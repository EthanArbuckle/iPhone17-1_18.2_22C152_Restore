uint64_t WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::ITPThirdPartyData>::destruct(*(WTF::StringImpl **)a1, (void *)(*(void *)a1 + 24 * v3));
  }
  v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::ITPThirdPartyData>::destruct(WTF::StringImpl *result, void *a2)
{
  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 1), a2);
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 3;
    }
    while (v3 != a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::hasLocalStorage(PAL::SessionID,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C3DE0;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::hasLocalStorage(PAL::SessionID,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C3DE0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  v4 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::hasLocalStorage(PAL::SessionID,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const WebCore::SecurityOriginData **)a2;
  v12 = *(const WebCore::SecurityOriginData **)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  int v13 = v5;
  unsigned int v14 = v4;
  if (v4)
  {
    uint64_t v6 = 48 * v4 - 48;
    do
    {
      uint64_t v7 = WebCore::RegistrableDomain::matches((WebCore::RegistrableDomain *)(a1 + 8), v3);
      if (v7) {
        break;
      }
      uint64_t v3 = (const WebCore::SecurityOriginData *)((char *)v3 + 48);
      uint64_t v8 = v6;
      v6 -= 48;
    }
    while (v8);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v10);
}

uint64_t WebCore::RegistrableDomain::matches(WebCore::RegistrableDomain *this, const WebCore::SecurityOriginData *a2)
{
  int v2 = *((_DWORD *)a2 + 6);
  if (v2)
  {
    if (v2 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x198B71E68);
    }
    uint64_t v3 = (uint64_t *)MEMORY[0x1E4F30980];
  }
  else
  {
    uint64_t v3 = (uint64_t *)((char *)a2 + 8);
  }
  uint64_t v4 = *v3;
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    unint64_t v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0x100000000;
  }

  return WebCore::RegistrableDomain::matches(this, v5, v6);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::setResourceLoadStatisticsLogTestingEvent(BOOL)::$_0,void,WebKit::NetworkSession &>::call(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(a2 + 96) = *(unsigned char *)(result + 8);
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::setManagedDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C3E58;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl **)a1[2];
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::setManagedDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C3E58;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl **)*((void *)this + 2);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::setManagedDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v1 = a1[1];
  if (v1 && (v2 = *(void *)(v1 + 8)) != 0 && (uint64_t v3 = *(void *)(v2 + 72)) != 0)
  {
    return WebKit::WebResourceLoadStatisticsStore::setManagedDomains(v3, a1 + 2, (const WTF::StringImpl *)(a1 + 3));
  }
  else
  {
    uint64_t v5 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    unint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::setShouldDowngradeReferrerForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::NetworkSession &>::call(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(a2 + 97) = *(unsigned char *)(result + 8);
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::preconnectTo(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)::$_0,void,WebCore::ResourceError const&,WebCore::NetworkLoadMetrics const&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C3EA8;
  WebKit::NetworkProcess::preconnectTo(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)::$_0::~$_0((uint64_t)(a1 + 2), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::preconnectTo(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)::$_0,void,WebCore::ResourceError const&,WebCore::NetworkLoadMetrics const&>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9C3EA8;
  WebKit::NetworkProcess::preconnectTo(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)::$_0::~$_0((uint64_t)a1 + 16, a2);

  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkProcess::preconnectTo(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)::$_0,void,WebCore::ResourceError const&,WebCore::NetworkLoadMetrics const&>::call(uint64_t a1, const WebCore::ResourceError *a2)
{
}

void WebKit::NetworkProcess::preconnectTo(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)::$_0::operator()(const WTF::String **a1, const WebCore::ResourceError *a2)
{
  if (*a1)
  {
    uint64_t v3 = (WebKit::NetworkSession *)*((void *)*a1 + 1);
    if (v3)
    {
      Scheduler = WebKit::NetworkSession::networkLoadScheduler(v3);
      WebKit::NetworkLoadScheduler::finishedPreconnectForMainResource(Scheduler, (const WTF::URL *)(a1 + 1), a1 + 6, a2);
    }
  }
}

uint64_t *WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (result = WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::expand(result, 0), (uint64_t v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = *a2;
  unint64_t v10 = *a2 + ~(*a2 << 32);
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  unsigned int v14 = (uint64_t *)(v6 + 8 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    int v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if (v7) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = *(unsigned int *)(v6 - 4);
        }
        char v25 = 0;
        uint64_t v26 = v6 + 8 * v20;
        goto LABEL_29;
      }
      if (v15 == -1) {
        v16 = v14;
      }
      unsigned int v13 = (v13 + v17) & v8;
      unsigned int v14 = (uint64_t *)(v6 + 8 * v13);
      uint64_t v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      uint64_t *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      uint64_t v9 = *a2;
      unsigned int v14 = v16;
    }
  }
  *unsigned int v14 = v9;
  uint64_t v18 = *v4;
  if (*v4) {
    int v19 = *(_DWORD *)(v18 - 12) + 1;
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(v18 - 12) = v19;
  uint64_t v21 = *v4;
  if (*v4) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_22:
      result = WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::expand(v4, v14);
      unsigned int v14 = result;
      uint64_t v21 = *v4;
      if (*v4) {
        unint64_t v24 = *(unsigned int *)(v21 - 4);
      }
      else {
        unint64_t v24 = 0;
      }
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_22;
  }
  uint64_t v26 = v21 + 8 * v24;
  char v25 = 1;
LABEL_29:
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v26;
  *(unsigned char *)(a3 + 16) = v25;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C3ED0;
  uint64_t v3 = (WTF::StringImpl **)a1[6];
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (WTF::StringImpl **)a1[5];
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl **)a1[4];
  if (v5) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  }
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  uint64_t v6 = a1[1];
  a1[1] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C3ED0;
  uint64_t v3 = (WTF::StringImpl **)*((void *)a1 + 6);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (WTF::StringImpl **)*((void *)a1 + 5);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl **)*((void *)a1 + 4);
  if (v5) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  }
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  uint64_t v7 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  return WTF::fastFree(a1, v6);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t v2 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "NetworkProcess::fetchWebsiteData finished fetching data", v3, 2u);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_0,void,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WTF::HashSet>,WTF::HashTraits<WTF::HashSet>,WTF::HashTableTraits> const&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C3EF8;
  WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_0,void,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WTF::HashSet>,WTF::HashTraits<WTF::HashSet>,WTF::HashTableTraits> const&>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C3EF8;
  WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_0,void,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WTF::HashSet>,WTF::HashTraits<WTF::HashSet>,WTF::HashTableTraits> const&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(a2);
  uint64_t v5 = (WebCore::SecurityOriginData *)result;
  uint64_t v7 = v6;
  if (*a2) {
    uint64_t v8 = *a2 + 32 * *(unsigned int *)(*a2 - 4);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != result)
  {
    do
    {
      uint64_t v9 = *(void *)(a1 + 8);
      v13[0] = 0;
      int v14 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v13, (uint64_t)v5);
      v15[0] = 0;
      int v16 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v15, (uint64_t)v13);
      LODWORD(v17) = 0x4000;
      *((void *)&v17 + 1) = 0;
      unsigned int v10 = *(_DWORD *)(v9 + 28);
      if (v10 == *(_DWORD *)(v9 + 24))
      {
        uint64_t result = WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>(v9 + 16, (unint64_t)v15);
      }
      else
      {
        uint64_t v11 = *(void *)(v9 + 16) + 48 * v10;
        *(unsigned char *)uint64_t v11 = 0;
        *(_DWORD *)(v11 + 24) = -1;
        uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v11, (uint64_t)v15);
        *(_OWORD *)(v11 + 32) = v17;
        ++*(_DWORD *)(v9 + 28);
      }
      if (v16 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9C39D0[v16])(&v12, v15);
      }
      int v16 = -1;
      if (v14 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9C39D0[v14])(&v12, v13);
      }
      int v14 = -1;
      while (1)
      {
        uint64_t v5 = (WebCore::SecurityOriginData *)((char *)v5 + 32);
        if (v5 == v7) {
          break;
        }
        uint64_t result = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v5);
        if (!result) {
          goto LABEL_16;
        }
      }
      uint64_t v5 = v7;
LABEL_16:
      ;
    }
    while (v5 != (WebCore::SecurityOriginData *)v8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_1,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C3F20;
  WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_1,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C3F20;
  WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_1,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v15 = *a2;
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = *((unsigned int *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  int v16 = v3;
  int v17 = v4;
  if (!v4) {
    return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, a2);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v7 = *(unsigned int *)(v5 + 24);
  unint64_t v6 = *(unsigned int *)(v5 + 28);
  unint64_t v8 = v6 + v4;
  if (v6 + v4 <= v7
    || ((unint64_t v9 = v7 + (v7 >> 2), v9 >= 0x10) ? (v10 = v9 + 1) : (v10 = 16),
        v10 <= v8 ? (unint64_t v11 = v8) : (unint64_t v11 = v10),
        result = WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v5 + 16, v11), unint64_t v6 = *(unsigned int *)(v5 + 28), v8 >= v6))
  {
    uint64_t v13 = *(void *)(v5 + 16) + 48 * v6;
    uint64_t v14 = v2 + 48 * v4;
    do
    {
      *(unsigned char *)uint64_t v13 = 0;
      *(_DWORD *)(v13 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v13, v2);
      *(_OWORD *)(v13 + 32) = *(_OWORD *)(v2 + 32);
      v2 += 48;
      v13 += 48;
    }
    while (v2 != v14);
    *(_DWORD *)(v5 + 28) = v8;
    return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, a2);
  }
  __break(0xC471u);
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_2,void,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C3F48;
  WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_2,void,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C3F48;
  WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_2,void,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = (uint64_t *)(*((void *)v4 + 1) + 48);
      int v6 = v2 - 1;
      unint64_t v7 = *(WTF::StringImpl **)(*(void *)a2 + 8 * (v2 - 1));
      *(void *)(*(void *)a2 + 8 * (v2 - 1)) = 0;
      unint64_t v10 = v7;
      WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)(*(void *)a2 + 8 * (v2 - 1)), (WTF::StringImpl *)(*(void *)a2 + 8 * v2));
      *(_DWORD *)(a2 + 12) = v6;
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v5, &v10, (uint64_t)&v9);
      uint64_t result = v10;
      unint64_t v10 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v2 = *(unsigned int *)(a2 + 12);
    }
    while (v2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_3,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C3F70;
  WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_3,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C3F70;
  WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_3,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v15 = *a2;
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = *((unsigned int *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  int v16 = v3;
  int v17 = v4;
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(unsigned int *)(v5 + 24);
  unint64_t v7 = *(unsigned int *)(v5 + 28) + v4;
  if (v7 > v6)
  {
    unint64_t v8 = v6 + (v6 >> 2);
    if (v8 >= 0x10) {
      unint64_t v9 = v8 + 1;
    }
    else {
      unint64_t v9 = 16;
    }
    if (v9 <= v7) {
      unint64_t v10 = *(unsigned int *)(v5 + 28) + v4;
    }
    else {
      unint64_t v10 = v9;
    }
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v5 + 16, v10);
  }
  if (v4)
  {
    uint64_t v11 = v2 + 48 * v4;
    unsigned int v12 = *(_DWORD *)(v5 + 28);
    do
    {
      uint64_t v13 = *(void *)(v5 + 16) + 48 * v12;
      *(unsigned char *)uint64_t v13 = 0;
      *(_DWORD *)(v13 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v13, v2);
      *(_OWORD *)(v13 + 32) = *(_OWORD *)(v2 + 32);
      unsigned int v12 = *(_DWORD *)(v5 + 28) + 1;
      *(_DWORD *)(v5 + 28) = v12;
      v2 += 48;
    }
    while (v2 != v11);
  }
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C3F98;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C3F98;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t v2 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "NetworkProcess::deleteWebsiteData finished deleting modified data", v3, 2u);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C3FC0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C3FC0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C3FE8;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C3FE8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_3,void,unsigned int>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C4010;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_3,void,unsigned int>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C4010;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C4038;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C4038;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_5,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C4060;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_5,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C4060;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_6,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C4088;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_6,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C4088;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_7,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C40B0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_7,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C40B0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_8,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C40D8;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_8,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C40D8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C4100;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C4100;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t v2 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "NetworkProcess::deleteWebsiteDataForOrigin finished deleting data", v3, 2u);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C4128;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C4128;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

WebKit::NetworkCache::Cache *WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(WebKit::NetworkCache::Cache *result, WTF::StringImpl *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::NetworkCache::Cache::~Cache(result, a2);
    return (WebKit::NetworkCache::Cache *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::NetworkCache::Key>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 72 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::NetworkCache::Key>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    unsigned int v3 = (WTF::StringImpl **)result;
    do
    {
      uint64_t v4 = v3[3];
      v3[3] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      uint64_t v5 = v3[2];
      v3[2] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, a2);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
      unint64_t v6 = v3[1];
      v3[1] = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      uint64_t result = *v3;
      *unsigned int v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 9;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_2,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9C4150;
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 72, a2);
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  if (v5 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9C39D0[v5])(&v9, a1 + 32);
  }
  *(_DWORD *)(a1 + 56) = -1;
  unint64_t v6 = *(unsigned int **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v6) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v6);
  }
  unint64_t v7 = *(WebKit::NetworkCache::Cache **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v7) {
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v7, v3);
  }
  return a1;
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *v6;
  WebKit::NetworkCache::Cache *v7;
  char v9;

  *(void *)a1 = &unk_1EE9C4150;
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 72, a2);
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  if (v5 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9C39D0[v5])(&v9, a1 + 32);
  }
  *(_DWORD *)(a1 + 56) = -1;
  unint64_t v6 = *(unsigned int **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v6) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v6);
  }
  unint64_t v7 = *(WebKit::NetworkCache::Cache **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v7) {
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v7, v3);
  }
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_2,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (*(unsigned char *)(a1 + 24)) {
      goto LABEL_6;
    }
    uint64_t v4 = (WebCore::SecurityOriginData *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)(*a2 + 80));
    WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(v15, v4, v5);
    uint64_t result = WebCore::operator==();
    int v7 = result;
    if (v16 != -1) {
      uint64_t result = ((uint64_t (*)(char *, uint64_t *))off_1EE9C39D0[v16])(&v14, v15);
    }
    if (v7)
    {
LABEL_6:
      unint64_t v8 = *a2;
      unsigned int v9 = *(_DWORD *)(a1 + 84);
      if (v9 == *(_DWORD *)(a1 + 80))
      {
        return WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::NetworkCache::Key const&>(a1 + 72, v8);
      }
      else
      {
        uint64_t result = WebKit::NetworkCache::Key::Key(*(void *)(a1 + 72) + 72 * v9, v8);
        ++*(_DWORD *)(a1 + 84);
      }
    }
  }
  else
  {
    unint64_t v10 = (const WebKit::NetworkCache::Key **)(a1 + 72);
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v11 = *(atomic_uint **)(a1 + 16);
    atomic_fetch_add(v11, 1u);
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v13 = &unk_1EE9C4178;
    v13[1] = v11;
    v15[0] = (uint64_t)v13;
    WebKit::NetworkCache::Cache::remove(v12, v10, v15);
    uint64_t result = v15[0];
    if (v15[0]) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v15[0] + 8))(v15[0]);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::NetworkCache::Key const&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WebKit::NetworkCache::Key::Key(*(void *)a1 + 72 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 72 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x38E38E4)
    {
      __break(0xC471u);
      JUMPOUT(0x198B73B50);
    }
    unint64_t v3 = *(WTF::StringImpl **)a1;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)a1 + 72 * *(unsigned int *)(a1 + 12));
    int v5 = 72 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(72 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::NetworkCache::Key>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::NetworkCache::Key>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    do
    {
      uint64_t v6 = *(WTF::StringImpl **)v5;
      *(void *)int v5 = 0;
      *(void *)a3 = v6;
      uint64_t v7 = *((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      *(void *)(a3 + 8) = v7;
      uint64_t v8 = *((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      *(void *)(a3 + 16) = v8;
      uint64_t v9 = *((void *)v5 + 3);
      *((void *)v5 + 3) = 0;
      *(void *)(a3 + 24) = v9;
      long long v10 = *((_OWORD *)v5 + 2);
      long long v11 = *((_OWORD *)v5 + 3);
      *(void *)(a3 + 64) = *((void *)v5 + 8);
      *(_OWORD *)(a3 + 32) = v10;
      *(_OWORD *)(a3 + 48) = v11;
      uint64_t v12 = (WTF::StringImpl *)*((void *)v5 + 3);
      *((void *)v5 + 3) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, a2);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
      uint64_t v13 = (WTF::StringImpl *)*((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, a2);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      char v14 = (WTF::StringImpl *)*((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, a2);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      uint64_t result = *(WTF::StringImpl **)v5;
      *(void *)int v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      int v5 = (WTF::StringImpl *)((char *)v5 + 72);
      a3 += 72;
    }
    while (v5 != a2);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess26deleteWebsiteDataForOriginEN3PAL9SessionIDENS_9OptionSetINS2_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEN3__2clIKNS2_12NetworkCache5Cache14TraversalEntryEEEDaPT_EUlvE_vJEED1Ev(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C4178;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess26deleteWebsiteDataForOriginEN3PAL9SessionIDENS_9OptionSetINS2_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEN3__2clIKNS2_12NetworkCache5Cache14TraversalEntryEEEDaPT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  unint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C4178;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_3,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C41A0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_3,void>::~CallableWrapper(WTF *this, void *a2)
{
  unint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C41A0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C41C8;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(WTF *this, void *a2)
{
  unint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C41C8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C41F0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C41F0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t v2 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "NetworkProcess::deleteWebsiteDataForOrigins finished deleting data", v3, 2u);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C4218;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C4218;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_3,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C4240;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_3,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C4240;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C4268;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C4268;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_5,void,unsigned int>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C4290;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_5,void,unsigned int>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C4290;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_6,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C42B8;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_6,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C42B8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_7,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C42E0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_7,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C42E0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_8,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C4308;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_8,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C4308;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_9,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C4330;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_9,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C4330;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_1,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C4358;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_1,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C4358;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_1,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::call(WTF::RunLoop *a1, uint64_t *a2)
{
  WTF::RunLoop::main(a1);
  uint64_t v4 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  uint64_t v10 = v4;
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy(a2, (uint64_t *)&v11);
  int v5 = (void *)WTF::fastMalloc((WTF *)0x18);
  *int v5 = &unk_1EE9C4380;
  v5[1] = v10;
  uint64_t v6 = v11;
  long long v11 = 0;
  v5[2] = v6;
  uint64_t v12 = v5;
  WTF::RunLoop::dispatch();
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8) {
    (*(void (**)(void *))(*v8 + 8))(v8);
  }
  if (v11) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v7);
  }
  return 0;
}

WTF::StringImpl *WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  if (*a1) {
    unsigned int v4 = *(_DWORD *)(*a1 - 12);
  }
  else {
    unsigned int v4 = 0;
  }
  uint64_t result = (WTF::StringImpl *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::reserveInitialCapacity(a2, v4);
  while (*a1 && *(_DWORD *)(*a1 - 12))
  {
    uint64_t v8 = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a1, (uint64_t)v6, v7);
    uint64_t v9 = *a1;
    if (*a1) {
      v9 += 8 * *(unsigned int *)(v9 - 4);
    }
    if ((WTF::StringImpl **)v9 == v8)
    {
      char v14 = 0;
      goto LABEL_15;
    }
    uint64_t v10 = *v8;
    *uint64_t v8 = 0;
    char v14 = v10;
    if (*a1)
    {
      uint64_t v11 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
      if ((WTF::StringImpl **)v11 == v8) {
        goto LABEL_15;
      }
    }
    else
    {
      if (!v8) {
        goto LABEL_15;
      }
      uint64_t v11 = 0;
    }
    if ((WTF::StringImpl **)v11 != v8) {
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::remove(a1, v8);
    }
LABEL_15:
    WebCore::RegistrableDomain::isolatedCopy(&v15);
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(a2, &v15, (uint64_t)v13);
    uint64_t v12 = v15;
    uint64_t v15 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v6);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t result = v14;
    char v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::reserveInitialCapacity(void *a1, unsigned int a2)
{
  unsigned int v3 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(a2);
  if (v3 <= 8) {
    unsigned int v4 = 8;
  }
  else {
    unsigned int v4 = v3;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * v4 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = 0;
  return result;
}

WTF::StringImpl **WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t result = (WTF::StringImpl **)WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>(a2, (WTF::StringImpl *)a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_1::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C4380;
  unsigned int v3 = (WTF::StringImpl **)a1[2];
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_1::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C4380;
  unsigned int v3 = (WTF::StringImpl **)*((void *)this + 2);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_1::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 16);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C43A8;
  unsigned int v3 = (WTF::StringImpl **)a1[2];
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C43A8;
  unsigned int v3 = (WTF::StringImpl **)*((void *)this + 2);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains finished deleting and restricting data", v5, 2u);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_2,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C43D0;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_2,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C43D0;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_3,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C43F8;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_3,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C43F8;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_4,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C4420;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_4,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C4420;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_5,void,WTF::CompletionHandler<WTF::HashSet::SecurityOriginData,WebCore::RegistrableDomain<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::DefaultHash<WebCore><WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::HashTraits<WebCore>> const&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C4448;
  uint64_t v3 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 3));
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_5,void,WTF::CompletionHandler<WTF::HashSet::SecurityOriginData,WebCore::RegistrableDomain<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::DefaultHash<WebCore><WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::HashTraits<WebCore>> const&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C4448;
  uint64_t v3 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 3));
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), v4);

  return WTF::fastFree((WTF *)a1, v5);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_5,void,WTF::CompletionHandler<WTF::HashSet::SecurityOriginData,WebCore::RegistrableDomain<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::DefaultHash<WebCore><WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::HashTraits<WebCore>> const&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t result = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(a2);
  int v5 = result;
  unsigned int v7 = v6;
  if (*a2) {
    uint64_t v8 = *a2 + 32 * *(unsigned int *)(*a2 - 4);
  }
  else {
    uint64_t v8 = 0;
  }
  if ((WTF::StringImpl *)v8 != result)
  {
    while (1)
    {
      int v9 = *((_DWORD *)v5 + 6);
      if (v9)
      {
        uint64_t v10 = (WebCore::RegistrableDomain *)MEMORY[0x1E4F30980];
        if (v9 != 1) {
          return (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
        }
      }
      else
      {
        uint64_t v10 = (WTF::StringImpl *)((char *)v5 + 8);
      }
      WebCore::RegistrableDomain::uncheckedCreateFromHost(v10, &v30);
      v31[0] = &v30;
      uint64_t v13 = WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<unsigned long WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::RegistrableDomain>(WebCore::RegistrableDomain const&)::{lambda(WebCore::RegistrableDomain&)#1}>(a1 + 8, v31, v11);
      uint64_t result = v30;
      v30 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      if (v13 != -1) {
        break;
      }
LABEL_27:
      while (1)
      {
        int v5 = (WTF::StringImpl *)((char *)v5 + 32);
        if (v5 == v7) {
          break;
        }
        uint64_t result = (WTF::StringImpl *)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v5);
        if (!result) {
          goto LABEL_31;
        }
      }
      int v5 = v7;
LABEL_31:
      if (v5 == (WTF::StringImpl *)v8) {
        return result;
      }
    }
    int v14 = *((_DWORD *)v5 + 6);
    if (!v14)
    {
      uint64_t v15 = (WTF::StringImpl *)((char *)v5 + 8);
LABEL_13:
      int v16 = (uint64_t *)(*(void *)(a1 + 24) + 16);
      WebCore::RegistrableDomain::uncheckedCreateFromHost(v15, &v30);
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v16, &v30, (uint64_t)v31);
      uint64_t result = v30;
      v30 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v18 = *(void *)(a1 + 32);
      if (v18)
      {
        uint64_t result = *(WTF::StringImpl **)(v18 + 8);
        if (result)
        {
          WebKit::NetworkSession::ensureSWServer(result);
          int v19 = *(atomic_uint **)(a1 + 24);
          atomic_fetch_add(v19, 1u);
          v30 = (WTF::StringImpl *)v19;
          uint64_t v20 = WTF::fastMalloc((WTF *)0x10);
          *(void *)uint64_t v20 = &unk_1EE9C4470;
          uint64_t v21 = v30;
          v30 = 0;
          v31[0] = (const WTF::StringImpl **)v20;
          *(void *)(v20 + 8) = v21;
          WebCore::SWServer::clear();
          int v22 = v31[0];
          v31[0] = 0;
          if (v22) {
            (*((void (**)(const WTF::StringImpl **))*v22 + 1))(v22);
          }
          WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)&v30);
          uint64_t v23 = *(void *)(a1 + 32);
          if (v23) {
            uint64_t v23 = *(void *)(v23 + 8);
          }
          uint64_t v24 = v23 + 1080;
          LOBYTE(v31[0]) = 0;
          int v32 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v31, (uint64_t)v5);
          char v25 = *(atomic_uint **)(a1 + 24);
          atomic_fetch_add(v25, 1u);
          v29 = v25;
          uint64_t v26 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(void *)uint64_t v26 = &unk_1EE9C4498;
          v27 = v29;
          v29 = 0;
          v30 = v26;
          *((void *)v26 + 1) = v27;
          WebKit::NetworkNotificationManager::removePushSubscriptionsForOrigin(v24, (uint64_t)v31, (uint64_t *)&v30);
          v28 = v30;
          v30 = 0;
          if (v28) {
            (*(void (**)(WTF::StringImpl *))(*(void *)v28 + 8))(v28);
          }
          uint64_t result = WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)&v29);
          if (v32 != -1) {
            uint64_t result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, const WTF::StringImpl ***))off_1EE9C39D0[v32])(&v30, v31);
          }
        }
      }
      goto LABEL_27;
    }
    uint64_t v15 = (WebCore::RegistrableDomain *)MEMORY[0x1E4F30980];
    if (v14 == 1) {
      goto LABEL_13;
    }
    return (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_5::operator()(WTF::CompletionHandler<WTF::HashSet::SecurityOriginData,WebCore::RegistrableDomain<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::DefaultHash<WebCore><WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::HashTraits<WebCore>> const&)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C4470;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_5::operator()(WTF::CompletionHandler<WTF::HashSet::SecurityOriginData,WebCore::RegistrableDomain<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::DefaultHash<WebCore><WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::HashTraits<WebCore>> const&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C4470;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v2);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess49deleteAndRestrictWebsiteDataForRegistrableDomainsEN3PAL9SessionIDENS_9OptionSetINS2_15WebsiteDataTypeEEEONS2_50RegistrableDomainsToDeleteOrRestrictWebsiteDataForEONS_17CompletionHandlerIFvONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISE_EENS_10HashTraitsISE_EENS_15HashTableTraitsEEEEEEEN3__5clERKNSC_INSD_18SecurityOriginDataENSF_ISQ_EENSH_ISQ_EESJ_EEEUlOT_E_vJjEED1Ev(void *a1)
{
  *a1 = &unk_1EE9C4498;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess49deleteAndRestrictWebsiteDataForRegistrableDomainsEN3PAL9SessionIDENS_9OptionSetINS2_15WebsiteDataTypeEEEONS2_50RegistrableDomainsToDeleteOrRestrictWebsiteDataForEONS_17CompletionHandlerIFvONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISE_EENS_10HashTraitsISE_EENS_15HashTableTraitsEEEEEEEN3__5clERKNSC_INSD_18SecurityOriginDataENSF_ISQ_EENSH_ISQ_EESJ_EEEUlOT_E_vJjEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C4498;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_6,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C44C0;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_6,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C44C0;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_6,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::call(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t result = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, (uint64_t)a2, a3);
  v14[0] = result;
  v14[1] = v6;
  if (*a2) {
    uint64_t v7 = *a2 + 8 * *(unsigned int *)(*a2 - 4);
  }
  else {
    uint64_t v7 = 0;
  }
  if ((WTF::StringImpl **)v7 != result)
  {
    do
    {
      uint64_t v8 = *result;
      if (*result) {
        *(_DWORD *)v8 += 2;
      }
      uint64_t v13 = v8;
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(*(void *)(a1 + 8) + 16), &v13, (uint64_t)&v12);
      uint64_t v11 = v13;
      uint64_t v13 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v9);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      v14[0] += 8;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v14, (uint64_t)v9, v10);
      uint64_t result = (WTF::StringImpl **)v14[0];
    }
    while (v14[0] != v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_7,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C44E8;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_7,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C44E8;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_7,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::call(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t result = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, (uint64_t)a2, a3);
  v14[0] = result;
  v14[1] = v6;
  if (*a2) {
    uint64_t v7 = *a2 + 8 * *(unsigned int *)(*a2 - 4);
  }
  else {
    uint64_t v7 = 0;
  }
  if ((WTF::StringImpl **)v7 != result)
  {
    do
    {
      uint64_t v8 = *result;
      if (*result) {
        *(_DWORD *)v8 += 2;
      }
      uint64_t v13 = v8;
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(*(void *)(a1 + 8) + 16), &v13, (uint64_t)&v12);
      uint64_t v11 = v13;
      uint64_t v13 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v9);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      v14[0] += 8;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v14, (uint64_t)v9, v10);
      uint64_t result = (WTF::StringImpl **)v14[0];
    }
    while (v14[0] != v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_8,void,WTF::HashTableTraits const&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C4510;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_8,void,WTF::HashTableTraits const&>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C4510;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_8,void,WTF::HashTableTraits const&>::call(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, (uint64_t)a2, a3);
  uint64_t v6 = (WTF::StringImpl **)result;
  v12[0] = result;
  v12[1] = v7;
  if (*a2) {
    uint64_t v8 = *a2 + 8 * *(unsigned int *)(*a2 - 4);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != result)
  {
    do
    {
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(*(void *)(a1 + 8) + 16), v6, (uint64_t)v11);
      v12[0] += 8;
      uint64_t result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v12, v9, v10);
      uint64_t v6 = (WTF::StringImpl **)v12[0];
    }
    while (v12[0] != v8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::DeleteWebsiteDataInUIProcessForRegistrableDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)>>(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C4538;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::DeleteWebsiteDataInUIProcessForRegistrableDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)>>(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C4538;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::DeleteWebsiteDataInUIProcessForRegistrableDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)>>(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl ***))(*(void *)v3 + 16))(v3, &v7);
      uint64_t result = (WTF::StringImpl **)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        uint64_t result = v7;
        if (v7) {
          return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v7, v5);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::NetworkProcessProxy::DeleteWebsiteDataInUIProcessForRegistrableDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkProcessProxy::DeleteWebsiteDataInUIProcessForRegistrableDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)>>(v6);
  }
  return result;
}

WTF::StringImpl **IPC::Connection::cancelReply<Messages::NetworkProcessProxy::DeleteWebsiteDataInUIProcessForRegistrableDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)>>(uint64_t *a1)
{
  uint64_t v4 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl ***))(*(void *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t result = v4;
  if (v4) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v2);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebsiteDataFetchOption>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char *a2)
{
  char v2 = *a2;
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = v2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteCookiesForTesting(PAL::SessionID,WebCore::RegistrableDomain,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C4560;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteCookiesForTesting(PAL::SessionID,WebCore::RegistrableDomain,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C4560;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteCookiesForTesting(PAL::SessionID,WebCore::RegistrableDomain,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C4588;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C4588;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &>::call(WTF::RunLoop *a1, uint64_t *a2)
{
  WTF::RunLoop::main(a1);
  uint64_t v4 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  uint64_t v10 = v4;
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy(a2, (uint64_t *)&v11);
  int v5 = (void *)WTF::fastMalloc((WTF *)0x18);
  *int v5 = &unk_1EE9C45B0;
  v5[1] = v10;
  uint64_t v6 = v11;
  uint64_t v11 = 0;
  v5[2] = v6;
  uint64_t v12 = v5;
  WTF::RunLoop::dispatch();
  char v8 = v12;
  uint64_t v12 = 0;
  if (v8) {
    (*(void (**)(void *))(*v8 + 8))(v8);
  }
  if (v11) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v7);
  }
  return 0;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C45B0;
  uint64_t v3 = (WTF::StringImpl **)a1[2];
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C45B0;
  uint64_t v3 = (WTF::StringImpl **)*((void *)this + 2);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 16);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C45D8;
  uint64_t v3 = (WTF::StringImpl **)a1[6];
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (WTF::StringImpl **)a1[5];
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  int v5 = (WTF::StringImpl **)a1[4];
  if (v5) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  }
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  uint64_t v6 = a1[1];
  a1[1] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C45D8;
  uint64_t v3 = (WTF::StringImpl **)*((void *)a1 + 6);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (WTF::StringImpl **)*((void *)a1 + 5);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  int v5 = (WTF::StringImpl **)*((void *)a1 + 4);
  if (v5) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  }
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  uint64_t v7 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  return WTF::fastFree(a1, v6);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::call(uint64_t a1)
{
  v30 = 0;
  uint64_t v2 = (WebCore::RegistrableDomain *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 32));
  uint64_t v3 = v2;
  int v5 = v4;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    uint64_t v7 = (WebCore::RegistrableDomain *)(v6 + 8 * *(unsigned int *)(v6 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != v2)
  {
    do
    {
      WebCore::RegistrableDomain::uncheckedCreateFromHost(v3, &v29);
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v30, &v29, (uint64_t)v28);
      uint64_t v9 = v29;
      v29 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v8);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      while (1)
      {
        uint64_t v3 = (WebCore::RegistrableDomain *)((char *)v3 + 8);
        if (v3 == v5) {
          break;
        }
        if ((unint64_t)(*(void *)v3 + 1) > 1) {
          goto LABEL_12;
        }
      }
      uint64_t v3 = v5;
LABEL_12:
      ;
    }
    while (v3 != v7);
  }
  uint64_t v10 = (WebCore::RegistrableDomain *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 40));
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(a1 + 40);
  if (v14) {
    uint64_t v15 = (WebCore::RegistrableDomain *)(v14 + 8 * *(unsigned int *)(v14 - 4));
  }
  else {
    uint64_t v15 = 0;
  }
  if (v15 != v10)
  {
    do
    {
      WebCore::RegistrableDomain::uncheckedCreateFromHost(v11, &v29);
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v30, &v29, (uint64_t)v28);
      uint64_t v17 = v29;
      v29 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v16);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      while (1)
      {
        uint64_t v11 = (WebCore::RegistrableDomain *)((char *)v11 + 8);
        if (v11 == v13) {
          break;
        }
        if ((unint64_t)(*(void *)v11 + 1) > 1) {
          goto LABEL_24;
        }
      }
      uint64_t v11 = v13;
LABEL_24:
      ;
    }
    while (v11 != v15);
  }
  uint64_t v18 = *(unsigned int *)(a1 + 28);
  if (!v18) {
    goto LABEL_37;
  }
  uint64_t v19 = 48 * v18;
  uint64_t v20 = (_DWORD *)(*(void *)(a1 + 16) + 24);
  uint64_t v21 = (WebCore::RegistrableDomain *)MEMORY[0x1E4F30980];
  while (!*v20)
  {
    int v22 = (WebCore::RegistrableDomain *)(v20 - 4);
LABEL_29:
    WebCore::RegistrableDomain::uncheckedCreateFromHost(v22, &v29);
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v30, &v29, (uint64_t)v28);
    uint64_t v24 = v29;
    v29 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v23);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    v20 += 12;
    v19 -= 48;
    if (!v19) {
      goto LABEL_37;
    }
  }
  int v22 = v21;
  if (*v20 == 1) {
    goto LABEL_29;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_37:
  uint64_t v25 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl ***))(*(void *)v25 + 16))(v25, &v30);
  (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  unint64_t result = v30;
  if (v30) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v26);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_1,void,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&>,WTF::HashTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&>,WTF::HashTableTraits> const&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C4600;
  WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_1,void,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&>,WTF::HashTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&>,WTF::HashTableTraits> const&>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C4600;
  WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_1,void,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&>,WTF::HashTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&>,WTF::HashTableTraits> const&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(a2);
  int v5 = (WebCore::SecurityOriginData *)result;
  uint64_t v7 = v6;
  if (*a2) {
    uint64_t v8 = *a2 + 32 * *(unsigned int *)(*a2 - 4);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != result)
  {
    do
    {
      uint64_t v9 = *(void *)(a1 + 8);
      v13[0] = 0;
      int v14 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v13, (uint64_t)v5);
      v15[0] = 0;
      int v16 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v15, (uint64_t)v13);
      LODWORD(v17) = 0x4000;
      *((void *)&v17 + 1) = 0;
      unsigned int v10 = *(_DWORD *)(v9 + 28);
      if (v10 == *(_DWORD *)(v9 + 24))
      {
        uint64_t result = WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>(v9 + 16, (unint64_t)v15);
      }
      else
      {
        uint64_t v11 = *(void *)(v9 + 16) + 48 * v10;
        *(unsigned char *)uint64_t v11 = 0;
        *(_DWORD *)(v11 + 24) = -1;
        uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v11, (uint64_t)v15);
        *(_OWORD *)(v11 + 32) = v17;
        ++*(_DWORD *)(v9 + 28);
      }
      if (v16 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9C39D0[v16])(&v12, v15);
      }
      int v16 = -1;
      if (v14 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9C39D0[v14])(&v12, v13);
      }
      int v14 = -1;
      while (1)
      {
        int v5 = (WebCore::SecurityOriginData *)((char *)v5 + 32);
        if (v5 == v7) {
          break;
        }
        uint64_t result = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v5);
        if (!result) {
          goto LABEL_16;
        }
      }
      int v5 = v7;
LABEL_16:
      ;
    }
    while (v5 != (WebCore::SecurityOriginData *)v8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_2,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C4628;
  WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_2,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C4628;
  WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_2,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v15 = *a2;
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = *((unsigned int *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  int v16 = v3;
  int v17 = v4;
  if (!v4) {
    return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, a2);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v7 = *(unsigned int *)(v5 + 24);
  unint64_t v6 = *(unsigned int *)(v5 + 28);
  unint64_t v8 = v6 + v4;
  if (v6 + v4 <= v7
    || ((unint64_t v9 = v7 + (v7 >> 2), v9 >= 0x10) ? (v10 = v9 + 1) : (v10 = 16),
        v10 <= v8 ? (unint64_t v11 = v8) : (unint64_t v11 = v10),
        result = WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v5 + 16, v11), unint64_t v6 = *(unsigned int *)(v5 + 28), v8 >= v6))
  {
    uint64_t v13 = *(void *)(v5 + 16) + 48 * v6;
    uint64_t v14 = v2 + 48 * v4;
    do
    {
      *(unsigned char *)uint64_t v13 = 0;
      *(_DWORD *)(v13 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v13, v2);
      *(_OWORD *)(v13 + 32) = *(_OWORD *)(v2 + 32);
      v2 += 48;
      v13 += 48;
    }
    while (v2 != v14);
    *(_DWORD *)(v5 + 28) = v8;
    return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, a2);
  }
  __break(0xC471u);
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_3,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C4650;
  WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_3,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C4650;
  WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_3,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v15 = *a2;
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = *((unsigned int *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  int v16 = v3;
  int v17 = v4;
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(unsigned int *)(v5 + 24);
  unint64_t v7 = *(unsigned int *)(v5 + 28) + v4;
  if (v7 > v6)
  {
    unint64_t v8 = v6 + (v6 >> 2);
    if (v8 >= 0x10) {
      unint64_t v9 = v8 + 1;
    }
    else {
      unint64_t v9 = 16;
    }
    if (v9 <= v7) {
      unint64_t v10 = *(unsigned int *)(v5 + 28) + v4;
    }
    else {
      unint64_t v10 = v9;
    }
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v5 + 16, v10);
  }
  if (v4)
  {
    uint64_t v11 = v2 + 48 * v4;
    unsigned int v12 = *(_DWORD *)(v5 + 28);
    do
    {
      uint64_t v13 = *(void *)(v5 + 16) + 48 * v12;
      *(unsigned char *)uint64_t v13 = 0;
      *(_DWORD *)(v13 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v13, v2);
      *(_OWORD *)(v13 + 32) = *(_OWORD *)(v2 + 32);
      unsigned int v12 = *(_DWORD *)(v5 + 28) + 1;
      *(_DWORD *)(v5 + 28) = v12;
      v2 += 48;
    }
    while (v2 != v11);
  }
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DownloadProxy::DecideDestinationWithSuggestedFilename,WebKit::NetworkProcess::findPendingDownloadLocation(WebKit::NetworkDataTask &,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&,WebCore::ResourceResponse const&)::$_0>(WebKit::NetworkProcess::findPendingDownloadLocation(WebKit::NetworkDataTask &,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&,WebCore::ResourceResponse const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C4678;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 32);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DownloadProxy::DecideDestinationWithSuggestedFilename,WebKit::NetworkProcess::findPendingDownloadLocation(WebKit::NetworkDataTask &,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&,WebCore::ResourceResponse const&)::$_0>(WebKit::NetworkProcess::findPendingDownloadLocation(WebKit::NetworkDataTask &,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&,WebCore::ResourceResponse const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C4678;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 32);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DownloadProxy::DecideDestinationWithSuggestedFilename,WebKit::NetworkProcess::findPendingDownloadLocation(WebKit::NetworkDataTask &,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&,WebCore::ResourceResponse const&)::$_0>(WebKit::NetworkProcess::findPendingDownloadLocation(WebKit::NetworkDataTask &,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&,WebCore::ResourceResponse const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  if (!a2 || !*(void *)a2)
  {
    uint64_t v13 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::DownloadProxy::DecideDestinationWithSuggestedFilename,WebKit::NetworkProcess::findPendingDownloadLocation(WebKit::NetworkDataTask &,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&,WebCore::ResourceResponse const&)::$_0>(v13);
  }
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v42);
  if (!v43)
  {
    LOBYTE(v31) = 0;
    char v41 = 0;
    goto LABEL_46;
  }
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v44);
  if (!v45)
  {
    int v11 = 0;
    int v12 = 0;
    LOBYTE(v31) = 0;
    char v41 = 0;
    goto LABEL_37;
  }
  unint64_t v6 = *((void *)a2 + 1);
  uint64_t v5 = *(WTF::StringImpl **)a2;
  unint64_t v7 = *((void *)a2 + 2) - *(void *)a2;
  if (v6 <= v7)
  {
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v26 = *((void *)a2 + 3);
    if (v26)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
        uint64_t v25 = *(WTF::StringImpl **)a2;
        unint64_t v24 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
      }
    }
    goto LABEL_49;
  }
  unint64_t v8 = (unsigned __int8 *)v5 + v7;
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v24 = v6;
    uint64_t v25 = 0;
LABEL_49:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v27 = *((void *)a2 + 3);
    if (v27)
    {
      if (v24)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v27 + 16))(v27, v25, v24);
        uint64_t v5 = *(WTF::StringImpl **)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_50;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_50:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v28 = *((void *)a2 + 3);
    if (v28)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v28 + 16))(v28, v5);
        uint64_t v29 = *((void *)a2 + 3);
        uint64_t v5 = *(WTF::StringImpl **)a2;
        uint64_t v30 = *((void *)a2 + 1);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        if (v29)
        {
          if (v30) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v29 + 16))(v29, v5);
          }
        }
      }
    }
    goto LABEL_9;
  }
  BOOL v2 = v9 != 0;
  unsigned __int16 v10 = IPC::Decoder::decode<WebKit::UseDownloadPlaceholder>((uint64_t *)a2);
  if (v10 <= 0xFFu)
  {
LABEL_9:
    int v11 = 0;
    int v12 = 0;
    LOBYTE(v31) = 0;
    char v41 = 0;
    goto LABEL_35;
  }
  int v11 = v10;
  IPC::Decoder::decode<WTF::URL>(a2, &v46);
  if (v49)
  {
    IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v50);
    if (!v51)
    {
      int v12 = 0;
      LOBYTE(v31) = 0;
      char v41 = 0;
LABEL_30:
      if (v49)
      {
        uint64_t v19 = v46;
        v46 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v5);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
      }
      goto LABEL_35;
    }
    IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)&v52);
    if (!v53)
    {
      int v12 = 0;
      LOBYTE(v31) = 0;
      char v41 = 0;
      goto LABEL_28;
    }
    IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)&v54);
    if (!v55)
    {
      int v12 = 0;
      LOBYTE(v31) = 0;
      goto LABEL_27;
    }
    if (v43 && v45 && v49 && v51 && v53)
    {
      uint64_t v15 = v42;
      v42 = 0;
      int v16 = v44;
      v44 = 0;
      v31 = v15;
      int v32 = v16;
      BOOL v33 = v2;
      unsigned __int8 v34 = v11;
      int v17 = v46;
      v46 = 0;
      v35 = v17;
      long long v36 = v47;
      long long v37 = v48;
      LODWORD(v47) = v47 & 0xFFFFFFFE;
      uint64_t v18 = v50;
      v50 = 0;
      v38 = v18;
      long long v39 = v52;
      int v12 = 1;
      long long v40 = v54;
LABEL_27:
      char v41 = v12;
LABEL_28:
      if (v51) {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v50);
      }
      goto LABEL_30;
    }
    __break(1u);
  }
  int v12 = 0;
  LOBYTE(v31) = 0;
  char v41 = 0;
LABEL_35:
  if (v45) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v44);
  }
LABEL_37:
  if (v43)
  {
    uint64_t v20 = v42;
    v42 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v5);
        if (!v12) {
          goto LABEL_46;
        }
LABEL_44:
        WebKit::NetworkProcess::findPendingDownloadLocation(WebKit::NetworkDataTask &,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&,WebCore::ResourceResponse const&)::$_0::operator()(v3, (uint64_t)&v31, (uint64_t)&v32, v2, v11 != 0, (uint64_t)&v35, v39, *((WTF **)&v39 + 1), v40, *((WTF **)&v40 + 1));
        return (WTF::StringImpl *)std::__optional_destruct_base<std::tuple<WTF::String,WebKit::SandboxExtensionHandle,WebKit::AllowOverwrite,WebKit::UseDownloadPlaceholder,WTF::URL,WebKit::SandboxExtensionHandle,std::span<unsigned char const,18446744073709551615ul>,std::span<unsigned char const,18446744073709551615ul>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31);
      }
      *(_DWORD *)v20 -= 2;
    }
  }
  if (v12) {
    goto LABEL_44;
  }
LABEL_46:
  uint64_t v21 = *(WTF::StringImpl **)a2;
  uint64_t v22 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v23 = *((void *)a2 + 3);
  if (v23)
  {
    if (v22)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v23 + 16))(v23, v21);
      if (v41)
      {
        BOOL v2 = v33;
        int v11 = v34;
        goto LABEL_44;
      }
    }
  }
  std::__optional_destruct_base<std::tuple<WTF::String,WebKit::SandboxExtensionHandle,WebKit::AllowOverwrite,WebKit::UseDownloadPlaceholder,WTF::URL,WebKit::SandboxExtensionHandle,std::span<unsigned char const,18446744073709551615ul>,std::span<unsigned char const,18446744073709551615ul>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31);
  return IPC::Connection::cancelReply<Messages::DownloadProxy::DecideDestinationWithSuggestedFilename,WebKit::NetworkProcess::findPendingDownloadLocation(WebKit::NetworkDataTask &,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&,WebCore::ResourceResponse const&)::$_0>(v3);
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::DownloadProxy::DecideDestinationWithSuggestedFilename,WebKit::NetworkProcess::findPendingDownloadLocation(WebKit::NetworkDataTask &,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&,WebCore::ResourceResponse const&)::$_0>(uint64_t *a1)
{
  unint64_t v8 = 0;
  unsigned int v9 = 0;
  v7[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v7);
  unint64_t v6 = 0;
  WebKit::NetworkProcess::findPendingDownloadLocation(WebKit::NetworkDataTask &,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&,WebCore::ResourceResponse const&)::$_0::operator()(a1, (uint64_t)&v9, (uint64_t)&v8, 0, 0, (uint64_t)v7, 0, 0, 0, 0);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v6);
  uint64_t v3 = v7[0];
  v7[0] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v8);
  uint64_t result = v9;
  unsigned int v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkProcess::findPendingDownloadLocation(WebKit::NetworkDataTask &,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&,WebCore::ResourceResponse const&)::$_0::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, WTF *a8, uint64_t a9, WTF *a10)
{
  int v12 = a1 + 3;
  uint64_t result = (WTF::StringImpl *)a1[3];
  uint64_t v13 = (WTF::StringImpl *)*((void *)result + 5);
  if (!v13)
  {
    __break(1u);
    return result;
  }
  if (*(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v18 = *a1;
    (*(void (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 48))(result, a2);
    uint64_t v26 = 0;
    WTF::URL::invalidate((WTF::URL *)&v26);
    if ((a5 & 1) == 0 && *(void *)a6 && *(_DWORD *)(*(void *)a6 + 4))
    {
      WTF::String::operator=((uint64_t *)&v26, (WTF::StringImpl **)a6);
      long long v27 = *(_OWORD *)(a6 + 8);
      long long v28 = *(_OWORD *)(a6 + 24);
LABEL_17:
      if (!*(void *)a6 || !*(_DWORD *)(*(void *)a6 + 4)) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    WTF::URL::fileURLWithFileSystemPath();
    WTF::URL::operator=((uint64_t)&v26, (uint64_t)v25);
    uint64_t v22 = v25[0];
    v25[0] = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::destroy(v22, v21);
        if ((a5 & 1) == 0) {
          goto LABEL_17;
        }
        goto LABEL_19;
      }
      *(_DWORD *)v22 -= 2;
    }
    if ((a5 & 1) == 0) {
      goto LABEL_17;
    }
LABEL_19:
    WebKit::DownloadManager::publishDownloadProgress(v18 + 160, (uint64_t)v13, (uint64_t)&v26, a7, a8, a5, a9, a10);
LABEL_20:
    uint64_t v23 = a1[2];
    a1[2] = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, 1);
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1[3] + 40))(a1[3]) != 2
      && (*(unsigned int (**)(void))(*(void *)*v12 + 40))() != 3)
    {
      v25[0] = v13;
      if (!WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(v18 + 192), v25))
      {
        uint64_t v29 = v13;
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::Ref<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>((uint64_t *)(v18 + 184), (uint64_t *)&v29, v12, (uint64_t)v25);
      }
    }
    uint64_t result = v26;
    uint64_t v26 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  uint64_t v19 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, 2);
  uint64_t v20 = *(uint64_t (**)(uint64_t))(*(void *)v19 + 8);

  return (WTF::StringImpl *)v20(v19);
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WebKit::SandboxExtensionHandle,WebKit::AllowOverwrite,WebKit::UseDownloadPlaceholder,WTF::URL,WebKit::SandboxExtensionHandle,std::span<unsigned char const,18446744073709551615ul>,std::span<unsigned char const,18446744073709551615ul>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104))
  {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 64));
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, v2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 8));
    uint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

WebKit::NetworkCache::Cache *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::setCacheModel(WebKit::CacheModel)::$_0,void,WebKit::NetworkSession &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WebKit::NetworkCache::Cache **)(a2 + 616);
  if (result) {
    return (WebKit::NetworkCache::Cache *)WebKit::NetworkCache::Cache::updateCapacity(result);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,WTF::String const&,WebCore::ShouldSample>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,WTF::String const&,WebCore::ShouldSample>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 16));
  char v4 = *(unsigned char *)(a2 + 24);

  return IPC::ArgumentCoder<WebCore::ShouldSample,void>::encode<IPC::Encoder>(a1, v4);
}

unint64_t IPC::ArgumentCoder<WebCore::ShouldSample,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C46C8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C46C8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    int v6 = 134217984;
    uint64_t v7 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcess::prepareToSuspend() Process is ready to suspend", (uint8_t *)&v6, 0xCu);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C46F0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C46F0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C4718;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C4718;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_3,void,WebKit::NetworkSession &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = **(atomic_uint ***)(a1 + 16);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  uint64_t v7 = (atomic_uchar *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v7 = &unk_1EE9C4768;
  *((void *)v7 + 1) = v6;
  uint64_t v14 = v7;
  WebKit::NetworkProcess::platformFlushCookies(v5, v4, (uint64_t *)&v14);
  uint64_t v8 = (uint64_t)v14;
  uint64_t v14 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a2 + 1048);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v9 + 16));
  unsigned __int16 v10 = **(atomic_uint ***)(a1 + 16);
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  int v11 = (atomic_uchar *)WTF::fastMalloc((WTF *)0x10);
  *(void *)int v11 = &unk_1EE9C4790;
  *((void *)v11 + 1) = v10;
  uint64_t v14 = v11;
  WebKit::NetworkStorageManager::suspend(v9, (uint64_t *)&v14);
  unint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    unint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
    if (!v9) {
      return result;
    }
  }
  else if (!v9)
  {
    return result;
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v9 + 16), v12);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess16prepareToSuspendEbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEENK3__3clINS2_14NetworkSessionEEEDaRT_EUlvE_vJEED1Ev(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C4768;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess16prepareToSuspendEbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEENK3__3clINS2_14NetworkSessionEEEDaRT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C4768;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess16prepareToSuspendEbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEENK3__3clINS2_14NetworkSessionEEEDaRT_EUlvE0_vJEED1Ev(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C4790;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess16prepareToSuspendEbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEENK3__3clINS2_14NetworkSessionEEEDaRT_EUlvE0_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C4790;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::HashTable<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>>::begin(void *result)
{
  if (!result) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)result - 1);
  uint64_t v3 = &result[v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[v2];
  }
  if (v2)
  {
    uint64_t v4 = 8 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v4 -= 8;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C47B8;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C47B8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processDidResume(BOOL)::$_0,void,WebKit::NetworkSession &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 1048);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v2 + 16));
  unint64_t result = (atomic_uchar *)WebKit::NetworkStorageManager::resume(v2);
  if (v2)
  {
    uint64_t v5 = *(atomic_uchar **)(v2 + 16);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(v5, v4);
  }
  return result;
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::syncLocalStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::NetworkSession &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 1048);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v3 + 16));
  uint64_t v4 = **(atomic_uint ***)(a1 + 8);
  atomic_fetch_add(v4, 1u);
  uint64_t v5 = (atomic_uchar *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v5 = &unk_1EE9C4830;
  *((void *)v5 + 1) = v4;
  uint64_t v9 = v5;
  WebKit::NetworkStorageManager::syncLocalStorage(v3, (uint64_t *)&v9);
  unint64_t result = v9;
  if (v9)
  {
    unint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v9 + 8))(v9);
    if (!v3) {
      return result;
    }
  }
  else if (!v3)
  {
    return result;
  }
  uint64_t v8 = *(atomic_uchar **)(v3 + 16);

  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(v8, v6);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess16syncLocalStorageEONS_17CompletionHandlerIFvvEEEENK3__0clINS2_14NetworkSessionEEEDaRT_EUlvE_vJEED1Ev(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C4830;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess16syncLocalStorageEONS_17CompletionHandlerIFvvEEEENK3__0clINS2_14NetworkSessionEEEDaRT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C4830;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::renameOriginInWebsiteData(PAL::SessionID,WebCore::SecurityOriginData &&,WebCore::SecurityOriginData &,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C4858;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::renameOriginInWebsiteData(PAL::SessionID,WebCore::SecurityOriginData &&,WebCore::SecurityOriginData &,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C4858;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::WebPushMessage>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 216 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::WebPushMessage>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    unsigned int v3 = result;
    do
    {
      std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v3 + 72, a2);
      uint64_t v4 = (WTF::StringImpl *)*((void *)v3 + 4);
      *((void *)v3 + 4) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      unint64_t result = (WTF::StringImpl *)*((void *)v3 + 3);
      *((void *)v3 + 3) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      if (*((unsigned char *)v3 + 16))
      {
        unint64_t result = *(WTF::StringImpl **)v3;
        if (*(void *)v3)
        {
          *(void *)unsigned int v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
          unint64_t result = (WTF::StringImpl *)WTF::fastFree(result, a2);
        }
      }
      unsigned int v3 = (WTF::StringImpl *)((char *)v3 + 216);
    }
    while (v3 != a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processPushMessage(PAL::SessionID,WebKit::WebPushMessage &&,WebCore::PushPermissionState,WTF::CompletionHandler<void ()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload> &&)> &&)::$_0,void,unsigned int>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C4880;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processPushMessage(PAL::SessionID,WebKit::WebPushMessage &&,WebCore::PushPermissionState,WTF::CompletionHandler<void ()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload> &&)> &&)::$_0,void,unsigned int>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C4880;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processPushMessage(PAL::SessionID,WebKit::WebPushMessage &&,WebCore::PushPermissionState,WTF::CompletionHandler<void ()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload> &&)> &&)::$_0,void,unsigned int>::call(uint64_t a1)
{
  v4[0] = 0;
  v4[136] = 0;
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void, unsigned char *))(*(void *)v1 + 16))(v1, 0, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processPushMessage(PAL::SessionID,WebKit::WebPushMessage &&,WebCore::PushPermissionState,WTF::CompletionHandler<void ()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload> &&)> &&)::$_1,void,BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload>>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C48A8;
  uint64_t v3 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  if (v5 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9C39D0[v5])(&v8, a1 + 32);
  }
  *(_DWORD *)(a1 + 56) = -1;
  int v6 = *(unsigned int **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 32);
    (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processPushMessage(PAL::SessionID,WebKit::WebPushMessage &&,WebCore::PushPermissionState,WTF::CompletionHandler<void ()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload> &&)> &&)::$_1,void,BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload>>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C48A8;
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((unsigned int *)this + 14);
  if (v5 != -1) {
    ((void (*)(char *, char *))off_1EE9C39D0[v5])(&v8, (char *)this + 32);
  }
  *((_DWORD *)this + 14) = -1;
  int v6 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 32);
    (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processPushMessage(PAL::SessionID,WebKit::WebPushMessage &&,WebCore::PushPermissionState,WTF::CompletionHandler<void ()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload> &&)> &&)::$_1,void,BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v6 + 410)
    || *(unsigned char *)(a1 + 80)
    || (a2 & 1) != 0
    || (uint64_t v13 = *(void *)(a1 + 24),
        (uint64_t v9 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 224), &v13)) == 0))
  {
    uint64_t v7 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, a2, a3);
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  else
  {
    uint64_t v10 = v9 + 1080;
    long long v12 = *(_OWORD *)(a1 + 64);
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v11 = &unk_1EE9C48D0;
    *(_OWORD *)(v11 + 8) = v12;
    *(unsigned char *)(v11 + 24) = a2;
    uint64_t v13 = v11;
    WebKit::NetworkNotificationManager::incrementSilentPushCount(v10, a1 + 32, &v13);
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processPushMessage(PAL::SessionID,WebKit::WebPushMessage &&,WebCore::PushPermissionState,WTF::CompletionHandler<void ()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload> &&)> &&)::$_1::operator()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload>)::{lambda(unsigned int)#1},void,unsigned int>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C48D0;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processPushMessage(PAL::SessionID,WebKit::WebPushMessage &&,WebCore::PushPermissionState,WTF::CompletionHandler<void ()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload> &&)> &&)::$_1::operator()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload>)::{lambda(unsigned int)#1},void,unsigned int>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C48D0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processPushMessage(PAL::SessionID,WebKit::WebPushMessage &&,WebCore::PushPermissionState,WTF::CompletionHandler<void ()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload> &&)> &&)::$_1::operator()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload>)::{lambda(unsigned int)#1},void,unsigned int>::call(uint64_t a1, int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
  {
    WTF::String::utf8();
    if (v11) {
      uint64_t v9 = (char *)v11 + 16;
    }
    else {
      uint64_t v9 = 0;
    }
    *(_DWORD *)buf = 136643075;
    uint64_t v13 = v9;
    __int16 v14 = 1024;
    int v15 = a2;
    _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Push message for scope %{sensitive}s not handled properly; new silent push count: %u",
      buf,
      0x12u);
    if (v11)
    {
      if (*(_DWORD *)v11 == 1) {
        WTF::fastFree(v11, v10);
      }
      else {
        --*(_DWORD *)v11;
      }
    }
  }
  uint64_t v5 = *(unsigned __int8 *)(a1 + 24);
  buf[0] = 0;
  char v16 = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v6 + 16))(v6, v5, buf);
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v7);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::hasPushSubscriptionForTesting(PAL::SessionID,WTF::URL &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,std::ExceptionData> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C48F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::hasPushSubscriptionForTesting(PAL::SessionID,WTF::URL &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,std::ExceptionData> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C48F8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::hasPushSubscriptionForTesting(PAL::SessionID,WTF::URL &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,std::ExceptionData> &&>::call(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 96)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = *(unsigned char *)(a2 + 88) == 0;
  }
  uint64_t v3 = !v2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v3);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::simulatePrivateClickMeasurementSessionRestart(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C4920;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::simulatePrivateClickMeasurementSessionRestart(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C4920;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::simulatePrivateClickMeasurementSessionRestart(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      (*(void (**)(void))(**(void **)(v3 + 160) + 128))(*(void *)(v3 + 160));
    }
  }
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t WTF::VectorCopier<false,WebCore::UserContentURLPattern>::uninitializedCopy<WebCore::UserContentURLPattern>(uint64_t result, uint64_t a2, uint64_t a3)
{
  while (result != a2)
  {
    uint64_t v3 = *(_DWORD **)result;
    if (*(void *)result) {
      *v3 += 2;
    }
    *(void *)a3 = v3;
    uint64_t v4 = *(_DWORD **)(result + 8);
    if (v4) {
      *v4 += 2;
    }
    *(void *)(a3 + 8) = v4;
    uint64_t v5 = *(_DWORD **)(result + 16);
    if (v5) {
      *v5 += 2;
    }
    *(void *)(a3 + 16) = v5;
    *(_WORD *)(a3 + 24) = *(_WORD *)(result + 24);
    result += 32;
    a3 += 32;
  }
  return result;
}

void WebKit::NetworkProcess::setCORSDisablingPatterns(WebKit::NetworkConnectionToWebProcess &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()<WTF::String>(uint64_t a1, uint64_t a2)
{
  long long v9 = 0uLL;
  uint64_t v10 = 0;
  int v4 = WebCore::UserContentURLPattern::parse();
  __int16 v11 = v4;
  if (v4)
  {
    char v8 = 0;
    *(unsigned char *)a1 = 0;
  }
  else
  {
    WebKit::NetworkOriginAccessPatterns::allowAccessTo(*(WebKit::NetworkOriginAccessPatterns **)(*(void *)a2 + 296), (const WebCore::UserContentURLPattern *)&v9);
    long long v6 = v9;
    long long v9 = 0uLL;
    *(_OWORD *)a1 = v6;
    uint64_t v7 = v10;
    uint64_t v10 = 0;
    *(void *)(a1 + 16) = v7;
    *(_WORD *)(a1 + 24) = v11;
    char v8 = 1;
  }
  *(unsigned char *)(a1 + 32) = v8;
  WebCore::UserContentURLPattern::~UserContentURLPattern((WebCore::UserContentURLPattern *)&v9, v5);
}

uint64_t std::__optional_destruct_base<WebCore::UserContentURLPattern,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    int v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  __int16 v11 = 0;
  if (v7)
  {
    uint64_t v13 = v7;
    __int16 v14 = (void *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          int v15 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::reinsert(*a1, v14);
          WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v14 + 1), v16);
          if (v14 == a3) {
            __int16 v11 = v15;
          }
        }
        else
        {
          WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v14 + 1), v10);
        }
      }
      v14 += 3;
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::reinsert(uint64_t a1, void *a2)
{
  if (a1) {
    int v3 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v3 = 0;
  }
  uint64_t v4 = (*a2 + ~(*a2 << 32)) ^ ((*a2 + ~(*a2 << 32)) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((unint64_t)(v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = (void *)(a1 + 24 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (*v10);
  uint64_t v11 = a1 + 24 * v9;
  WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11 + 8, a2);
  void *v10 = *a2;
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = 0;
  uint64_t v12 = a2[1];
  a2[1] = 0;
  *(void *)(v11 + 8) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(v11 + 16) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(v11 + 20) = v12;
  return v10;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v25 = a4;
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3) & v9;
  uint64_t v11 = (void *)(v8 + 24 * v10);
  uint64_t v12 = *v11;
  uint64_t v13 = *a3;
  if (*v11)
  {
    uint64_t v21 = 0;
    int v22 = 1;
    do
    {
      if (v12 == v13)
      {
        uint64_t v23 = *a2;
        if (*a2) {
          unsigned int v24 = *(_DWORD *)(v23 - 4);
        }
        else {
          unsigned int v24 = 0;
        }
        *(void *)a1 = v11;
        *(void *)(a1 + 8) = v23 + 24 * v24;
        *(unsigned char *)(a1 + 16) = 0;
        return WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)(v11 + 1), a4);
      }
      if (v12 == -1) {
        uint64_t v21 = v11;
      }
      unsigned int v10 = (v10 + v22) & v9;
      uint64_t v11 = (void *)(v8 + 24 * v10);
      uint64_t v12 = *v11;
      ++v22;
    }
    while (*v11);
    if (v21)
    {
      *uint64_t v21 = 0;
      v21[1] = 0;
      v21[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v13 = *a3;
      uint64_t v11 = v21;
    }
  }
  uint64_t result = WTF::HashMapTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::translate<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>> WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineAdd<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1}>(v11, v13, &v25);
  uint64_t v15 = *a2;
  if (*a2) {
    int v16 = *(_DWORD *)(v15 - 12) + 1;
  }
  else {
    int v16 = 1;
  }
  *(_DWORD *)(v15 - 12) = v16;
  uint64_t v17 = *a2;
  if (*a2) {
    int v18 = *(_DWORD *)(v17 - 12);
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = (*(_DWORD *)(v17 - 16) + v18);
  unint64_t v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19) {
      goto LABEL_11;
    }
LABEL_29:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a2, v11);
    uint64_t v11 = (void *)result;
    uint64_t v17 = *a2;
    if (*a2) {
      LODWORD(v20) = *(_DWORD *)(v17 - 4);
    }
    else {
      LODWORD(v20) = 0;
    }
    goto LABEL_11;
  }
  if (3 * v20 <= 4 * v19) {
    goto LABEL_29;
  }
LABEL_11:
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v17 + 24 * v20;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashMapTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::translate<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>> WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineAdd<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1}>(void *a1, uint64_t a2, uint64_t **a3)
{
  *a1 = a2;
  uint64_t v3 = *a3;
  uint64_t v4 = **a3;
  *uint64_t v3 = 0;
  v8[0] = v4;
  uint64_t v5 = v3[1];
  v3[1] = 0;
  v8[1] = v5;
  WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)(a1 + 1), v8);
  return WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v6);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::RequestBackgroundFetchPermission,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C4948;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::RequestBackgroundFetchPermission,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C4948;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::RequestBackgroundFetchPermission,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  int v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void WebKit::NetworkProcessPlatformStrategies::createBlobRegistry(void)::EmptyBlobRegistry::blobType(void *a1@<X8>)
{
  uint64_t v1 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v1 += 2;
  }
  *a1 = v1;
}

uint64_t WebKit::NetworkProcessPlatformStrategies::createBlobRegistry(void)::EmptyBlobRegistry::blobSize()
{
  return 0;
}

uint64_t WebCore::BlobRegistry::blobRegistryImpl(WebCore::BlobRegistry *this)
{
  return 0;
}

void WebKit::NetworkProcessPlatformStrategies::createBlobRegistry(void)::EmptyBlobRegistry::~EmptyBlobRegistry(WebCore::BlobRegistry *a1)
{
  WebCore::BlobRegistry::~BlobRegistry(a1);

  JUMPOUT(0x199740C10);
}

void sub_198B79400(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7960C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_198B79864(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_198B79D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B79E64(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_198B79F34(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_198B7A118(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7A3D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,WTF::StringImpl **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF::StringImpl **a31)
{
  if (a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  if (a22) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a22, a2);
  }
  if (a31) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a31, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7A560(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_198B7A874(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B7AAA4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef cf)
{
  uint64_t v36 = *(void *)(v34 - 56);
  *(void *)(v34 - 56) = 0;
  if (v36) {
    CFRelease(*(CFTypeRef *)(v36 + 8));
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  CFTypeRef v37 = cf;
  cf = 0;
  if (v37) {
    CFRelease(v37);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a10);
  _Unwind_Resume(a1);
}

void sub_198B7AC64(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, CFTypeRef cf, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    CFRelease(*(CFTypeRef *)(a14 + 8));
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a12) {
    CFRelease(*(CFTypeRef *)(a12 + 8));
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7ADA4(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B7AE50(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7B038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17)
{
  _Block_release(v17);
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, v20);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v20);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  uint64_t v21 = *(WTF::StringImpl **)(v18 - 40);
  *(void *)(v18 - 40) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v20);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, v20);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198B7B344(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v17 = v16;
  if (v17) {
    CFRelease(v17);
  }
  WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, a2);
  if (v15) {
    CFRelease(v15);
  }
  _Unwind_Resume(a1);
}

void sub_198B7B478(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (v16) {
    CFRelease(v16);
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, a2);
  if (v15) {
    CFRelease(v15);
  }
  _Unwind_Resume(a1);
}

void sub_198B7B6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFRelease(v9);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

void sub_198B7BCA4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, WTF *a10)
{
  if (a9) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)a9, a2);
  }
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7BD84(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v12 = *(void *)(v10 - 32);
  *(void *)(v10 - 32) = 0;
  if (v12) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v12, a2);
  }
  uint64_t v13 = *(void *)(v10 - 24);
  *(void *)(v10 - 24) = 0;
  if (v13) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v13, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7C20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v11)
  {
    CFRelease(v11);
    if (!v10) {
LABEL_4:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v10)
  {
    goto LABEL_4;
  }
  CFRelease(v10);
  goto LABEL_4;
}

uint64_t getExceptionTypeFromMainRunLoop(uint64_t *a1)
{
  unsigned int v5 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v2 = &unk_1EE9C4C00;
  v2[1] = v1;
  v2[2] = &v5;
  unsigned __int16 v4 = v2;
  WTF::callOnMainRunLoopAndWait();
  if (v4) {
    (*(void (**)(void *))(*v4 + 8))(v4);
  }
  return v5;
}

void sub_198B7C35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raiseExceptionIfNecessary(uint64_t result)
{
  if (result <= 5) {
    return [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:off_1E58123B0[(int)result]];
  }
  return result;
}

void sub_198B7C4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7C5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7C6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7C804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7C954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7CC44(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7CD94(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (v1[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
    }
    else {
      --v1[2];
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7CF44(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (v1[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
    }
    else {
      --v1[2];
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7D130(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_198B7D258(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7D2F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7D3CC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7D468(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7D4FC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7D6B8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_198B7D80C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7DAAC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20)
{
  WebCore::UserScript::~UserScript((WebCore::UserScript *)&a20, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v21);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v22);
  unsigned int v24 = a14;
  a14 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  uint64_t v25 = a19;
  a19 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v23);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void API::Object::constructInWrapper<API::UserScript,WebCore::UserScript,API::ContentWorld &>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (WebKit *)[a1 _apiObject];
  WebCore::UserScript::UserScript((uint64_t)v8, a2);
  API::UserScript::UserScript(v6, (uint64_t)v8, a3);
  WebCore::UserScript::~UserScript((WebCore::UserScript *)v8, v7);
  *((void *)v6 + 1) = a1;
}

void sub_198B7DDE0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20)
{
  WebCore::UserScript::~UserScript((WebCore::UserScript *)&a20, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v21);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v22);
  unsigned int v24 = a14;
  a14 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  uint64_t v25 = a19;
  a19 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v23);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198B7DEF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7E620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf)
{
  CFRelease(*(CFTypeRef *)(v33 + 8));
  CFTypeRef v35 = cf;
  cf = 0;
  if (v35) {
    CFRelease(v35);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_198B7E844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12)
{
  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a12) {
    CFRelease(*(CFTypeRef *)(a12 + 8));
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v14);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v14);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198B7EB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, unsigned int *a12)
{
  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v14);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v14);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v14);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a12, v14);
  }
  _Unwind_Resume(a1);
}

void sub_198B7ED10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef cf)
{
  _Block_release(v34);
  CFTypeRef v36 = cf;
  cf = 0;
  if (v36) {
    CFRelease(v36);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a10);
  _Unwind_Resume(a1);
}

void sub_198B7EFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,CFTypeRef cf)
{
  if (v21) {
    CFRelease(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7F154(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198B7F1D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B7F364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_198B7F480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_198B7F58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_198B7F68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_198B7FB0C(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v1);
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_198B7FCF8(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B7FEA8(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B7FFC4(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B801D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _Block_release(v9);
  _Unwind_Resume(a1);
}

void sub_198B803E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _Block_release(v9);
  _Unwind_Resume(a1);
}

void sub_198B80B5C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF::StringImpl *a29,WTF::StringImpl *a30,uint64_t a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (*(unsigned char *)(v39 - 240))
  {
    uint64_t v41 = *(void *)(v39 - 248);
    if (v41) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v41, a2);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B81234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock)
{
  CFRelease(*(CFTypeRef *)(v17 + 8));
  _Block_release(v16);
  _Block_release(v15);
  CFRelease(v13);
  _Block_release(0);
  CFRelease(v13);
  _Block_release(v14);
  _Unwind_Resume(a1);
}

void sub_198B816C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B817C0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B81978(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  uint64_t v15 = a14;
  a14 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, a2);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(a1);
}

void sub_198B81B70(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25)
{
  uint64_t v26 = a14;
  a14 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, a2);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  long long v28 = a25;
  a25 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v27);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v27);
  _Unwind_Resume(a1);
}

void sub_198B81D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = a11;
  a11 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_198B81E74(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B820D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Block_release(v12);
  CFRelease(v11);
  _Block_release(v10);
  _Unwind_Resume(a1);
}

void sub_198B82244(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  _Block_release(v2);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198B82518(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a9) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B8273C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B82858(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B82AB4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B82C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,CFTypeRef a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  CFRelease(*(CFTypeRef *)(v66 + 8));
  uint64_t v70 = *(void *)(v67 - 64);
  *(void *)(v67 - 64) = 0;
  if (v70) {
    CFRelease(*(CFTypeRef *)(v70 + 8));
  }
  if (a9) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a9, v69);
  }
  CFTypeRef v71 = a40;
  a40 = 0;
  if (v71) {
    CFRelease(v71);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a10, (WTF::StringImpl *)v69);
  CFTypeRef v72 = cf;
  CFTypeRef cf = 0;
  if (v72) {
    CFRelease(v72);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a42);
  _Unwind_Resume(a1);
}

void sub_198B82E68(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B830EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12)
{
  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a12) {
    CFRelease(*(CFTypeRef *)(a12 + 8));
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v14);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v14);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198B83210(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if ((a9 & 0x8000000000000) != 0)
  {
    uint64_t v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B835CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198B83890(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_198B83E24(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a43) {
    MEMORY[0x199732DE0](v65);
  }
  WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v66, a2);
  WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v68);
  if (LOBYTE(STACK[0x200])) {
    MEMORY[0x199732DE0](&a65);
  }
  _Unwind_Resume(a1);
}

void sub_198B840DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a19 && a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (a31) {
    MEMORY[0x199732DE0](&a23);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B84338(_Unwind_Exception *a1)
{
  _Block_release(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_198B844D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a33) {
    MEMORY[0x199732DE0](&a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B846B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198B8486C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  objc_destroyWeak(v12);
  _Block_release(aBlock);
  _Unwind_Resume(a1);
}

void sub_198B849DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  objc_destroyWeak(v12);
  _Block_release(aBlock);
  _Unwind_Resume(a1);
}

void sub_198B84B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198B84C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198B84D54(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B85AFC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl **a14)
{
  if (a14) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a14, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B85D68(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c66_ZTSKZ52__WKWebView_WKPrivate___didEnableBrowserExtensions__E4__47(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_198B85F70(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl **a20)
{
  if (a20) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a20, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B8608C(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198B86198(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v2 + 8));
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B86288(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v2 + 8));
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B864C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v13);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v13);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198B86A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id location, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  _Block_release(v31);
  (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  objc_destroyWeak(&location);
  WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a28, v33);
  _Unwind_Resume(a1);
}

void sub_198B86F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF::StringImpl *a30)
{
  _Block_release(v30);
  WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v32);
  WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, v33);
  _Unwind_Resume(a1);
}

WTF::StringImpl *coreTextManipulationItemIdentifierFromString(NSString *a1)
{
  MEMORY[0x19972EAD0](&v27);
  if (v27)
  {
    uint64_t v2 = *((void *)v27 + 1);
    unint64_t v3 = *((unsigned int *)v27 + 1) | ((unint64_t)((*((_DWORD *)v27 + 4) >> 2) & 1) << 32);
  }
  else
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0x100000000;
  }
  uint64_t v23 = v2;
  unint64_t v24 = v3;
  __int16 v25 = 45;
  char v26 = 0;
  uint64_t v19 = (WTF::StringView *)&v23;
  unsigned int v20 = 0;
  BOOL v22 = v3 == 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v19);
  unsigned __int16 v4 = 0;
  int v5 = 0;
  uint64_t v6 = 0;
  int v7 = 0;
  uint64_t v8 = 0;
  int v9 = 0;
  int v10 = 0;
  int v11 = v24;
  while (1)
  {
    uint64_t v12 = v20;
    if (v20 == v11 && v22) {
      break;
    }
    uint64_t v14 = WTF::StringView::substring((const char *)v19, v20, v21);
    if (v10)
    {
      if (v10 == 1)
      {
        uint64_t v6 = (void *)WTF::parseInteger<unsigned long long>((uint64_t)v14, v12, 0xAu);
        int v7 = v17;
      }
      else
      {
        if (v10 != 2) {
          goto LABEL_26;
        }
        unsigned __int16 v4 = (void *)WTF::parseInteger<unsigned long long>((uint64_t)v14, v12, 0xAu);
        int v5 = v15;
      }
    }
    else
    {
      uint64_t v8 = (void *)WTF::parseInteger<unsigned long long>((uint64_t)v14, v12, 0xAu);
      int v9 = v16;
    }
    ++v10;
    WTF::StringView::SplitResult::Iterator::operator++();
  }
  if (!v9 || !v8 || !v7 || !v6 || !v5 || !v4)
  {
LABEL_26:
    *(unsigned char *)a1 = 0;
    *((unsigned char *)a1 + 24) = 0;
    goto LABEL_27;
  }
  if (v6 == (void *)-1) {
    goto LABEL_35;
  }
  if (v8 == (void *)-1)
  {
    __break(0xC471u);
    JUMPOUT(0x198B87234);
  }
  if (v4 == (void *)-1)
  {
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x198B87214);
  }
  *a1 = v6;
  a1[1] = v8;
  a1[2] = v4;
  *((unsigned char *)a1 + 24) = 1;
LABEL_27:
  uint64_t result = v27;
  long long v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198B87258(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B87758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,WTF::StringImpl *a36)
{
  CFRelease(cf);
  WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a33, v37);
  _Unwind_Resume(a1);
}

uint64_t makeFailureSetForAllTextManipulationItems(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(a2, "count"));
  *a1 = v4;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v10 objects:v16 count:16];
  uint64_t v6 = result;
  if (result)
  {
    uint64_t v7 = *(void *)v11;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(a2);
        }
        uint64_t v9 = *(void *)(*((void *)&v10 + 1) + 8 * v8);
        uint64_t v14 = @"item";
        uint64_t v15 = v9;
        objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"WKTextManipulationItemErrorDomain", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1)));
        ++v8;
      }
      while (v6 != v8);
      uint64_t result = [a2 countByEnumeratingWithState:&v10 objects:v16 count:16];
      uint64_t v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_198B879EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  *a10 = 0;
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B87B60(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B87CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef cf)
{
  _Block_release(v34);
  if (*(unsigned char *)(v35 - 48))
  {
    uint64_t v37 = *(unsigned int *)(v35 - 56);
    if (v37 != -1) {
      ((void (*)(uint64_t *, uint64_t))off_1EE9C4DC0[v37])(&a9, v35 - 80);
    }
  }
  CFTypeRef v38 = cf;
  CFTypeRef cf = 0;
  if (v38) {
    CFRelease(v38);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a10);
  _Unwind_Resume(a1);
}

void sub_198B87E34(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B87F10(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198B87FBC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B8845C(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B885D0(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B888C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, WTF::StringImpl *a18)
{
  _Block_release(v18);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v20);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v20);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, v20);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, v20);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198B88D5C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  WTF::Vector<WTF::Ref<WebCore::SharedMemory,WTF::RawPtrTraits<WebCore::SharedMemory>,WTF::DefaultRefDerefTraits<WebCore::SharedMemory>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

unsigned int *convertAndAddHighlight(uint64_t a1, void *a2)
{
  uint64_t result = (unsigned int *)WebCore::SharedMemory::allocate((WebCore::SharedMemory *)[a2 length]);
  if (v13)
  {
    objc_msgSend(a2, "getBytes:length:", *(void *)(v13 + 16), objc_msgSend(a2, "length"));
    uint64_t v5 = v13;
    long long v12 = (unsigned int *)v13;
    uint64_t v13 = 0;
    uint64_t v6 = *(unsigned int *)(a1 + 12);
    if (v6 == *(_DWORD *)(a1 + 8))
    {
      uint64_t v7 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v6 + 1, (unint64_t)&v12);
      uint64_t v8 = *(unsigned int *)(a1 + 12);
      uint64_t v9 = *(void *)a1;
      uint64_t v10 = *v7;
      *uint64_t v7 = 0;
      *(void *)(v9 + 8 * v8) = v10;
      long long v11 = v12;
      *(_DWORD *)(a1 + 12) = v8 + 1;
      long long v12 = 0;
      if (v11) {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v11);
      }
    }
    else
    {
      *(void *)(*(void *)a1 + 8 * v6) = v5;
      *(_DWORD *)(a1 + 12) = v6 + 1;
    }
    uint64_t result = (unsigned int *)v13;
    uint64_t v13 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
    }
  }
  return result;
}

void sub_198B88E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, unsigned int *a10)
{
  if (a9) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(a9);
  }
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B88F24(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_198B890F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198B89308(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  uint64_t v17 = *(WTF::StringImpl **)(v15 - 72);
  *(void *)(v15 - 72) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, a2);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t v18 = *(unsigned int **)(v15 - 56);
  *(void *)(v15 - 56) = 0;
  if (v18) {
    WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref(v18, a2);
  }
  uint64_t v19 = *(const void **)(v15 - 64);
  *(void *)(v15 - 64) = 0;
  if (v19) {
    CFRelease(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B895E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, unsigned int *a14)
{
  CFRelease(*(CFTypeRef *)(v15 + 8));
  if (v14)
  {
    if (a10) {
      CFRelease(*(CFTypeRef *)(a10 + 8));
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v17);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v17);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, v17);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a14) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a14, v17);
  }
  _Unwind_Resume(a1);
}

void sub_198B89874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf)
{
  CFRelease(*(CFTypeRef *)(v33 + 8));
  CFTypeRef v35 = cf;
  CFTypeRef cf = 0;
  if (v35) {
    CFRelease(v35);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_198B89AB8(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *aBlock, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,CFTypeRef cf,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Block_release(aBlock);
  CFTypeRef v72 = cf;
  CFTypeRef cf = 0;
  if (v72) {
    CFRelease(v72);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a16);
  if (v70)
  {
    if (*(_DWORD *)v70 == 2) {
      WTF::StringImpl::destroy(v70, v73);
    }
    else {
      *(_DWORD *)v70 -= 2;
    }
  }
  CFTypeRef v74 = a70;
  a70 = 0;
  if (v74) {
    CFRelease(v74);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a46);
  _Unwind_Resume(a1);
}

void sub_198B89D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Block_release(0);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v11);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198B8A08C(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B8A18C(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B8A280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198B8A3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198B8A464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B8A5F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B8A8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_198B8A9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_198B8AAAC(_Unwind_Exception *a1)
{
  unsigned __int16 v4 = v3;
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  }
  _Unwind_Resume(a1);
}

void sub_198B8ABA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B8ACD8(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B8ADF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  CFRelease(*(CFTypeRef *)(v14 + 8));
  uint64_t v18 = *(void *)(v15 - 24);
  *(void *)(v15 - 24) = 0;
  if (v18) {
    CFRelease(*(CFTypeRef *)(v18 + 8));
  }
  uint64_t v19 = a14;
  a14 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v17);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v17);
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(a1);
}

void sub_198B8AF58(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  unsigned __int8 v16 = a15;
  a15 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, a2);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(a1);
}

void sub_198B8B130(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25)
{
  char v26 = a14;
  a14 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, a2);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  long long v28 = a25;
  a25 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v27);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v27);
  _Unwind_Resume(a1);
}

void sub_198B8B370(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25)
{
  char v26 = a14;
  a14 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, a2);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  long long v28 = a25;
  a25 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v27);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v27);
  _Unwind_Resume(a1);
}

void sub_198B8B564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  CFRelease(*(CFTypeRef *)(v14 + 8));
  uint64_t v18 = *(void *)(v15 - 56);
  *(void *)(v15 - 56) = 0;
  if (v18) {
    CFRelease(*(CFTypeRef *)(v18 + 8));
  }
  uint64_t v19 = a14;
  a14 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v17);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v17);
  _Unwind_Resume(a1);
}

void sub_198B8B730(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B8B96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  _Block_release(v13);
  CFRelease(*(CFTypeRef *)(v12 + 8));
  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v15);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198B8BCA0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B8C0D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, CFTypeRef cf, WTF::StringImpl *a14, WTF::StringImpl *a15, WTF::StringImpl *a16)
{
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B8C314(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B8C9A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198B8CC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, char a13)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v14);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v14);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v14);
  _Unwind_Resume(a1);
}

void sub_198B8D1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31 = a30;
  a30 = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  _Block_release(0);
  if (a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, v32);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, v32);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a28, v32);
  _Unwind_Resume(a1);
}

void sub_198B8D418(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B8D5A8(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B8D6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, atomic_uchar **a10)
{
  if (a10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*a10);
  }
  _Block_release(aBlock);
  _Unwind_Resume(a1);
}

void sub_198B8D82C(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B8D92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198B8DA80(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B8DB98(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B8E178(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B8E308(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B8E650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198B8E7DC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,CFTypeRef cf)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  CFTypeRef v39 = cf;
  CFTypeRef cf = 0;
  if (v39) {
    CFRelease(v39);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a14);
  _Unwind_Resume(a1);
}

void sub_198B8E998(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if ((a9 & 0x8000000000000) != 0)
  {
    long long v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B8EA80(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if ((a9 & 0x8000000000000) != 0)
  {
    long long v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B8EBF0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10) {
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B8F060(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B8F4D0(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B8F6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
}

void sub_198B8F900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _Block_release(v9);
  _Unwind_Resume(a1);
}

void sub_198B8FB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _Block_release(v9);
  _Unwind_Resume(a1);
}

void sub_198B8FC28(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B8FD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 8))(a3);
  }
  _Block_release(0);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v4);
  _Unwind_Resume(a1);
}

uint64_t elementsFromWKElements(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  unint64_t v3 = [a2 count];
  unsigned int v4 = v3;
  if (v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
LABEL_29:
      JUMPOUT(0x198B8FF74);
    }
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(a1 + 8) = v4;
    *(void *)a1 = v5;
  }
  else
  {
    uint64_t v5 = 0;
  }
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v18 objects:v22 count:16];
  uint64_t v7 = result;
  if (result)
  {
    unsigned int v8 = 0;
    uint64_t v9 = *(void *)v19;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v19 != v9) {
          objc_enumerationMutation(a2);
        }
        uint64_t v11 = *(void *)(*((void *)&v18 + 1) + 8 * v10);
        if (v8 == v4)
        {
          unint64_t v12 = ((unint64_t)v4 >> 2) + v4;
          if (v12 >= 0x10) {
            unint64_t v13 = v12 + 1;
          }
          else {
            unint64_t v13 = 16;
          }
          if (v13 <= (unint64_t)v4 + 1) {
            unint64_t v14 = v4 + 1;
          }
          else {
            unint64_t v14 = v13;
          }
          if (v14 >> 29)
          {
            __break(0xC471u);
            goto LABEL_29;
          }
          uint64_t v15 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
          *(_DWORD *)(a1 + 8) = v14;
          *(void *)a1 = v15;
          memcpy(v15, v5, 8 * v4);
          if (v5)
          {
            if (v15 == v5)
            {
              LODWORD(v14) = 0;
              *(void *)a1 = 0;
              *(_DWORD *)(a1 + 8) = 0;
            }
            WTF::fastFree((WTF *)v5, v16);
            unsigned int v4 = *(_DWORD *)(a1 + 12);
            uint64_t v15 = *(void **)a1;
          }
          CFRetain(*(CFTypeRef *)(v11 + 24));
          unsigned int v8 = v4;
          uint64_t v5 = v15;
          unsigned int v4 = v14;
        }
        else
        {
          CFRetain(*(CFTypeRef *)(v11 + 24));
        }
        *((void *)v5 + v8++) = v11 + 16;
        *(_DWORD *)(a1 + 12) = v8;
        ++v10;
      }
      while (v7 != v10);
      uint64_t result = [a2 countByEnumeratingWithState:&v18 objects:v22 count:16];
      uint64_t v7 = result;
    }
    while (result);
  }
  return result;
}

void sub_198B8FF80(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void sub_198B90068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 8))(a3);
  }
  _Block_release(0);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v4);
  _Unwind_Resume(a1);
}

void sub_198B90174(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B90274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198B903C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Block_release(v10);
  _Unwind_Resume(a1);
}

void sub_198B9058C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  _Block_release(v11);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v13);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198B90710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  objc_destroyWeak(v12);
  _Block_release(aBlock);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v14);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198B908D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (v9) {
    CFRelease(v9);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B90A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (v9) {
    CFRelease(v9);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B90B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B90C20(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B90E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock)
{
  uint64_t v15 = v13;
  _Block_release(v15[1]);
  WTF::fastFree((WTF *)v15, v17);
  objc_destroyWeak(v14);
  _Block_release(aBlock);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<getExceptionTypeFromMainRunLoop(WTF::Function<WebKit::WebURLSchemeTask::ExceptionType ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C4C00;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<getExceptionTypeFromMainRunLoop(WTF::Function<WebKit::WebURLSchemeTask::ExceptionType ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C4C00;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<getExceptionTypeFromMainRunLoop(WTF::Function<WebKit::WebURLSchemeTask::ExceptionType ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  **(_DWORD **)(a1 + 16) = result;
  return result;
}

uint64_t ScriptMessageHandlerDelegate::ScriptMessageHandlerDelegate(uint64_t a1, CFTypeRef cf, CFTypeRef a3, void *a4)
{
  *(void *)a1 = &unk_1EE9C4C28;
  *(void *)(a1 + 8) = cf;
  if (cf) {
    CFRetain(cf);
  }
  *(void *)(a1 + 16) = a3;
  if (a3) {
    CFRetain(a3);
  }
  *(void *)(a1 + 24) = [a4 copy];
  *(unsigned char *)(a1 + 32) = 0;
  return a1;
}

void sub_198B9104C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v3) {
    CFRelease(v3);
  }
  unsigned int v4 = *(const void **)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v4) {
    CFRelease(v4);
  }
  _Unwind_Resume(exception_object);
}

void ScriptMessageHandlerDelegate::~ScriptMessageHandlerDelegate(ScriptMessageHandlerDelegate *this)
{
  uint64_t v2 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(v3);
  }
  unsigned int v4 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void ScriptMessageHandlerDelegate::~ScriptMessageHandlerDelegate(ScriptMessageHandlerDelegate *this, void *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(v3);
  }
  unsigned int v4 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    CFRelease(v5);
  }

  WTF::fastFree(this, a2);
}

void ScriptMessageHandlerDelegate::didPostMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, API::SerializedScriptValue *a5)
{
  uint64_t v10 = (void *)MEMORY[0x199741920]();
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a2 + 32) + 2016));
  if (WeakRetained)
  {
    unint64_t v12 = WeakRetained;
    CFRetain(*(CFTypeRef *)(a2 + 8));
    uint64_t v19 = a2;
    uint64_t v13 = API::Object::newObject(0x140uLL, 60);
    uint64_t v14 = API::FrameInfo::FrameInfo(v13, a3, &v19);
    uint64_t v15 = *(const void **)(v14 + 8);
    if (v15)
    {
      CFRetain(*(CFTypeRef *)(v14 + 8));
      unsigned __int8 v16 = *(const void **)(v13 + 8);
    }
    else
    {
      unsigned __int8 v16 = 0;
    }
    CFRelease(v16);
    if (v19) {
      CFRelease(*(CFTypeRef *)(v19 + 8));
    }
    id v18 = [[WKScriptMessage alloc] _initWithBody:API::SerializedScriptValue::deserialize(a5, v17) webView:v12 frameInfo:v15 name:*(void *)(a1 + 24) world:*(void *)(a4 + 8)];
    [*(id *)(a1 + 16) userContentController:*(void *)(a1 + 8) didReceiveScriptMessage:v18];
    if (v18) {
      CFRelease(v18);
    }
    if (v15) {
      CFRelease(v15);
    }
    CFRelease(v12);
  }
}

void sub_198B91270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFRelease(*(CFTypeRef *)(v11 + 8));
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

uint64_t ScriptMessageHandlerDelegate::supportsAsyncReply(ScriptMessageHandlerDelegate *this)
{
  return *((unsigned __int8 *)this + 32);
}

void ScriptMessageHandlerDelegate::didPostMessageWithAsyncReply(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, API::SerializedScriptValue *a5, uint64_t *a6)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a2 + 32) + 2016));
  if (WeakRetained)
  {
    uint64_t v13 = WeakRetained;
    v28[0] = 0;
    v28[1] = v28;
    v28[2] = 0x4012000000;
    v28[3] = __Block_byref_object_copy__6;
    v28[4] = __Block_byref_object_dispose__6;
    v28[5] = 0;
    uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v14 = &unk_1EE9C4C60;
    uint64_t v15 = *a6;
    *a6 = 0;
    v29[0] = v15;
    v29[1] = (uint64_t)v14;
    unsigned __int8 v16 = (void *)MEMORY[0x199741920]();
    CFRetain(*(CFTypeRef *)(a2 + 8));
    uint64_t v30 = (CFTypeRef *)a2;
    uint64_t v17 = API::Object::newObject(0x140uLL, 60);
    uint64_t v18 = API::FrameInfo::FrameInfo(v17, a3, (uint64_t *)&v30);
    uint64_t v19 = *(const void **)(v18 + 8);
    if (v19)
    {
      CFRetain(*(CFTypeRef *)(v18 + 8));
      long long v20 = *(const void **)(v17 + 8);
    }
    else
    {
      long long v20 = 0;
    }
    CFRelease(v20);
    if (v30) {
      CFRelease(v30[1]);
    }
    id v24 = [[WKScriptMessage alloc] _initWithBody:API::SerializedScriptValue::deserialize(a5, v23) webView:v13 frameInfo:v19 name:a1[3] world:*(void *)(a4 + 8)];
    uint64_t v26 = a1[1];
    __int16 v25 = (void *)a1[2];
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN28ScriptMessageHandlerDelegate28didPostMessageWithAsyncReplyERN6WebKit12WebPageProxyEONS0_13FrameInfoDataERN3API12ContentWorldERN7WebCore21SerializedScriptValueEON3WTF8FunctionIFvPNS5_21SerializedScriptValueERKNSB_6StringEEEE_block_invoke;
    v27[3] = &unk_1E5812390;
    v27[4] = v28;
    [v25 userContentController:v26 didReceiveScriptMessage:v24 replyHandler:v27];
    if (v24) {
      CFRelease(v24);
    }
    if (v19) {
      CFRelease(v19);
    }
    _Block_object_dispose(v28, 8);
    WTF::CompletionHandlerWithFinalizer<void ()(API::SerializedScriptValue *,WTF::String const&)>::~CompletionHandlerWithFinalizer(v29);
    CFRelease(v13);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v30 = (CFTypeRef *)v28[0];
    (*(void (**)(uint64_t, void, CFTypeRef **))(*(void *)*a6 + 16))(*a6, 0, &v30);
    BOOL v22 = (WTF::StringImpl *)v30;
    uint64_t v30 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v21);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
}

void sub_198B9154C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  unsigned __int8 v16 = *(WTF::StringImpl **)(v14 - 72);
  *(void *)(v14 - 72) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, a2);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(result + 56) = v3;
  return result;
}

uint64_t *__Block_byref_object_dispose__6(uint64_t a1)
{
  return WTF::CompletionHandlerWithFinalizer<void ()(API::SerializedScriptValue *,WTF::String const&)>::~CompletionHandlerWithFinalizer((uint64_t *)(a1 + 48));
}

void ___ZN28ScriptMessageHandlerDelegate28didPostMessageWithAsyncReplyERN6WebKit12WebPageProxyEONS0_13FrameInfoDataERN3API12ContentWorldERN7WebCore21SerializedScriptValueEON3WTF8FunctionIFvPNS5_21SerializedScriptValueERKNSB_6StringEEEE_block_invoke(uint64_t a1, objc_object *this, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48))
  {
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"replyHandler passed to userContentController:didReceiveScriptMessage:replyHandler: should not be called twice"];
    if (a3)
    {
LABEL_3:
      uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
      MEMORY[0x19972EAD0](&v15, a3);
      WTF::CompletionHandlerWithFinalizer<void ()(API::SerializedScriptValue *,WTF::String const&)>::operator()(v6);
      unsigned int v8 = v15;
      uint64_t v15 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      return;
    }
  }
  API::SerializedScriptValue::createFromNSObject((BOOL)this, this, &v14);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  if (v14)
  {
    uint64_t v15 = 0;
    WTF::CompletionHandlerWithFinalizer<void ()(API::SerializedScriptValue *,WTF::String const&)>::operator()((uint64_t *)(v9 + 48));
    uint64_t v11 = v15;
    uint64_t v15 = 0;
    if (!v11) {
      goto LABEL_15;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v13 = v15;
    WTF::CompletionHandlerWithFinalizer<void ()(API::SerializedScriptValue *,WTF::String const&)>::operator()((uint64_t *)(v9 + 48));
    uint64_t v11 = v13;
    if (!v13) {
      goto LABEL_15;
    }
  }
  if (*(_DWORD *)v11 == 2) {
    WTF::StringImpl::destroy(v11, v10);
  }
  else {
    *(_DWORD *)v11 -= 2;
  }
LABEL_15:
  unint64_t v12 = v14;
  uint64_t v14 = 0;
  if (v12) {
    CFRelease(*((CFTypeRef *)v12 + 1));
  }
}

void sub_198B91780(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11) {
    CFRelease(*(CFTypeRef *)(a11 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandlerWithFinalizer<void ()(API::SerializedScriptValue *,WTF::String const&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198B9188C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t *WTF::CompletionHandlerWithFinalizer<void ()(API::SerializedScriptValue *,WTF::String const&)>::~CompletionHandlerWithFinalizer(uint64_t *a1)
{
  if (*a1) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1[1] + 16))(a1[1], a1);
  }
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_198B91978(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[1];
  v1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *v1;
  *uint64_t v1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<ScriptMessageHandlerDelegate::didPostMessageWithAsyncReply(WebKit::WebPageProxy &,WebKit::FrameInfoData &&,API::ContentWorld &,WebCore::SerializedScriptValue &,WTF::Function<void ()(WebKit::FrameInfoData &&::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(void (&)(WebKit::FrameInfoData &&::SerializedScriptValue *,WTF::String const&))#1},void,WTF::Function<void ()(WebKit::FrameInfoData &&::SerializedScriptValue *,WTF::String const&)> &>::call(uint64_t a1, void *a2)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(void, void, WTF::StringImpl **))(*(void *)*a2 + 16))(*a2, 0, &v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198B91A7C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

double WebKit::IconLoadingDelegate::operator delete(id *a1)
{
  objc_destroyWeak(a1 + 2);
  if (*(_DWORD *)a1)
  {
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)a1, v2);
  }
  return result;
}

double WebKit::ResourceLoadDelegate::operator delete(id *a1)
{
  objc_destroyWeak(a1 + 2);
  objc_destroyWeak(a1 + 1);
  if (*(_DWORD *)a1)
  {
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)a1, v2);
  }
  return result;
}

void ___ZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__ENK4__30clEv_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (const void *)[objc_alloc(MEMORY[0x1E4F42A80]) initWithCGImage:a2 scale:0 orientation:*(double *)(a1 + 40)];
    uint64_t v4 = 0;
  }
  else
  {
    createNSError(WKErrorUnknown, 0, &v5);
    uint64_t v3 = 0;
    uint64_t v4 = v5;
  }
  kdebug_trace();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v3) {
    CFRelease(v3);
  }
  if (v4) {
    CFRelease(v4);
  }
}

void sub_198B91C2C(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

double __copy_helper_block_e8_32c96_ZTSKZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__ENK4__30clEvEUlP7CGImageE_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = _Block_copy(*(const void **)(a2 + 32));
  double result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c96_ZTSKZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__ENK4__30clEvEUlP7CGImageE_(uint64_t a1)
{
}

uint64_t WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  unsigned int v3 = *(_DWORD *)(a2 + 12);
  *(void *)double result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0xD20D21)
  {
    unsigned int v5 = 312 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(312 * v3));
    *(_DWORD *)(v2 + 8) = v5 / 0x138;
    *(void *)uint64_t v2 = v6;
    WTF::VectorCopier<false,WebKit::BackForwardListItemState>::uninitializedCopy<WebKit::BackForwardListItemState>(*(WebKit::FrameState **)a2, (WebKit::FrameState *)(*(void *)a2 + 312 * *(unsigned int *)(a2 + 12)), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_198B91D2C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

WebKit::FrameState *WTF::VectorCopier<false,WebKit::BackForwardListItemState>::uninitializedCopy<WebKit::BackForwardListItemState>(WebKit::FrameState *result, WebKit::FrameState *a2, uint64_t a3)
{
  if (result != a2)
  {
    unsigned int v5 = (char *)result + 24;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)(v5 - 24);
      uint64_t v6 = (_DWORD *)*((void *)v5 - 1);
      if (v6) {
        *v6 += 2;
      }
      *(void *)(a3 + 16) = v6;
      double result = WebKit::FrameState::FrameState((WebKit::FrameState *)(a3 + 24), (const WebKit::FrameState *)v5);
      uint64_t v7 = v5 - 24;
      *(unsigned char *)(a3 + 272) = v5[248];
      unsigned int v8 = (atomic_uint *)*((void *)v5 + 32);
      if (v8) {
        atomic_fetch_add(v8, 1u);
      }
      *(void *)(a3 + 280) = v8;
      *(unsigned char *)(a3 + 288) = v5[264];
      *(unsigned char *)(a3 + 296) = v5[272];
      uint64_t v9 = (_DWORD *)*((void *)v5 + 35);
      if (v9) {
        ++*v9;
      }
      *(void *)(a3 + 304) = v9;
      a3 += 312;
      v5 += 312;
    }
    while (v7 + 312 != (char *)a2);
  }
  return result;
}

void sub_198B91E10(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *(WTF::StringImpl **)(v2 + 16);
  *(void *)(v2 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::FrameState *WebKit::FrameState::FrameState(WebKit::FrameState *this, const WebKit::FrameState *a2)
{
  uint64_t v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *(void *)this = v4;
  unsigned int v5 = (_DWORD *)*((void *)a2 + 1);
  if (v5) {
    *v5 += 2;
  }
  *((void *)this + 1) = v5;
  uint64_t v6 = (_DWORD *)*((void *)a2 + 2);
  if (v6) {
    *v6 += 2;
  }
  *((void *)this + 2) = v6;
  uint64_t v7 = (_DWORD *)*((void *)a2 + 3);
  if (v7) {
    *v7 += 2;
  }
  *((void *)this + 3) = v7;
  long long v8 = *((_OWORD *)a2 + 2);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((_OWORD *)this + 2) = v8;
  std::__optional_copy_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100]((uint64_t)this + 56, (uint64_t)a2 + 56);
  long long v9 = *((_OWORD *)a2 + 5);
  long long v10 = *((_OWORD *)a2 + 6);
  *((unsigned char *)this + 112) = 0;
  *((_OWORD *)this + 5) = v9;
  *((_OWORD *)this + 6) = v10;
  *((unsigned char *)this + 136) = 0;
  if (*((unsigned char *)a2 + 136))
  {
    std::construct_at[abi:sn180100]<WebKit::HTTPBody,WebKit::HTTPBody const&,WebKit::HTTPBody*>((void *)this + 14, (_DWORD **)a2 + 14);
    *((unsigned char *)this + 136) = 1;
  }
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  long long v11 = *((_OWORD *)a2 + 10);
  long long v12 = *((_OWORD *)a2 + 11);
  long long v13 = *((_OWORD *)a2 + 12);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_OWORD *)this + 11) = v12;
  *((_OWORD *)this + 12) = v13;
  *((_OWORD *)this + 10) = v11;
  WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 216, (uint64_t)a2 + 216);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 232, (uint64_t)a2 + 232);
  return this;
}

void sub_198B91F58(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 136))
  {
    WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 120, a2);
    uint64_t v6 = *(WTF::StringImpl **)(v2 + 112);
    *(void *)(v2 + 112) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v2 + 72))
  {
    unsigned int v5 = *v3;
    if (*v3)
    {
      *(void *)(v2 + 56) = 0;
      *(_DWORD *)(v2 + 64) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  uint64_t v7 = *(WTF::StringImpl **)(v2 + 24);
  *(void *)(v2 + 24) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  long long v8 = *(WTF::StringImpl **)(v2 + 16);
  *(void *)(v2 + 16) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  long long v9 = *(WTF::StringImpl **)(v2 + 8);
  *(void *)(v2 + 8) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  long long v10 = *(WTF::StringImpl **)v2;
  *(void *)uint64_t v2 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v4 = (WTF *)*(unsigned int *)(a2 + 12);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = v4;
    if (v4)
    {
      unsigned int v5 = (void *)WTF::fastMalloc(v4);
      *(_DWORD *)(a1 + 8) = v4;
      *(void *)a1 = v5;
      memcpy(v5, *(const void **)a2, *(unsigned int *)(a2 + 12));
    }
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void sub_198B920D8(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    uint64_t v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void *std::construct_at[abi:sn180100]<WebKit::HTTPBody,WebKit::HTTPBody const&,WebKit::HTTPBody*>(void *result, _DWORD **a2)
{
  if (result)
  {
    uint64_t v2 = result;
    unsigned int v3 = *a2;
    if (*a2) {
      *v3 += 2;
    }
    *double result = v3;
    WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(result + 1), (uint64_t)(a2 + 1));
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_198B92154(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)double result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0x4924925)
  {
    unsigned int v5 = 56 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(56 * v3));
    *(_DWORD *)(v2 + 8) = v5 / 0x38;
    *(void *)uint64_t v2 = v6;
    uint64_t v7 = *(unsigned int *)(a2 + 12);
    if (v7)
    {
      uint64_t v8 = v6;
      uint64_t v9 = *(void *)a2;
      uint64_t v10 = 56 * v7;
      do
      {
        *(unsigned char *)uint64_t v8 = 0;
        *(_DWORD *)(v8 + 48) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>,(std::__variant_detail::_Trait)1> const&>(v8, v9);
        v8 += 56;
        v9 += 56;
        v10 -= 56;
      }
      while (v10);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_198B92258(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = *(unsigned int *)(v14 + 48);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9C4CA8[v16])(&a13, v14);
  }
  *(_DWORD *)(v14 + 48) = -1;
  uint64_t v17 = *(WTF **)v13;
  if (*(void *)v13)
  {
    *(void *)uint64_t v13 = 0;
    *(_DWORD *)(v13 + 8) = 0;
    WTF::fastFree(v17, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 48);
  if (v4 != -1) {
    double result = ((uint64_t (*)(char *, uint64_t))off_1EE9C4CA8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 48) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 48);
  if (v5 != -1)
  {
    double result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9C4CC0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 48) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit8HTTPBody7Element8FileDataENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJSC_SG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (WTF *)*(unsigned int *)(a3 + 12);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if (v3)
  {
    char v6 = (void *)WTF::fastMalloc(v3);
    *(_DWORD *)(a2 + 8) = v3;
    *(void *)a2 = v6;
    size_t v7 = *(unsigned int *)(a3 + 12);
    uint64_t v8 = *(const void **)a3;
    memcpy(v6, v8, v7);
  }
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit8HTTPBody7Element8FileDataENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJSC_SG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v3 += 2;
  }
  *(void *)a2 = v3;
  __n128 result = *(__n128 *)(a3 + 8);
  long long v5 = *(_OWORD *)(a3 + 24);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a3 + 40);
  *(_OWORD *)(a2 + 24) = v5;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit8HTTPBody7Element8FileDataENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJSC_SG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, void *a2, _DWORD **a3)
{
  uint64_t v3 = *a3;
  if (*a3) {
    *v3 += 2;
  }
  *a2 = v3;
}

uint64_t WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)__n128 result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0x1084211)
  {
    unsigned int v5 = 248 * v3;
    char v6 = (WebKit::FrameState *)WTF::fastMalloc((WTF *)(248 * v3));
    *(_DWORD *)(v2 + 8) = v5 / 0xF8;
    *(void *)uint64_t v2 = v6;
    uint64_t v7 = *(unsigned int *)(a2 + 12);
    if (v7)
    {
      uint64_t v8 = *(const WebKit::FrameState **)a2;
      uint64_t v9 = 248 * v7;
      do
      {
        char v6 = (WebKit::FrameState *)(WebKit::FrameState::FrameState(v6, v8) + 248);
        uint64_t v8 = (const WebKit::FrameState *)((char *)v8 + 248);
        v9 -= 248;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_198B924A4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B926B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  CFRelease(v10);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_move_base<WebCore::WritingTools::Context,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 80) = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    WebCore::AttributedString::AttributedString();
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(unsigned char *)(a1 + 80) = 1;
  }
  return a1;
}

void sub_198B92780(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 80)) {
    MEMORY[0x199732DE0](v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B929D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  objc_destroyWeak(v11);
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_198B92C70(_Unwind_Exception *a1)
{
  _Block_release(v3);
  objc_destroyWeak(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198B92D44(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198B9301C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (v12) {
    CFRelease(v12);
  }
  if (v11) {
    CFRelease(v11);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = 48 * v3;
    uint64_t v5 = *(void *)a1 + 32;
    do
    {
      uint64_t v5 = WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2)
         + 48;
      v4 -= 48;
    }
    while (v4);
  }
  char v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  uint64_t v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v5 = 32 * v3;
    char v6 = (_DWORD *)((char *)v4 + 24);
    do
    {
      uint64_t v7 = *v6;
      if (v7 != -1) {
        ((void (*)(char *, _DWORD *))off_1EE9C4DA8[v7])(&v9, v6 - 4);
      }
      *char v6 = -1;
      v6 += 8;
      v5 -= 32;
    }
    while (v5);
    uint64_t v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_198B93460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B93748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef cf,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Block_release(0);
  CFTypeRef v66 = cf;
  CFTypeRef cf = 0;
  if (v66) {
    CFRelease(v66);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a10);
  CFTypeRef v68 = a65;
  a65 = 0;
  if (v68) {
    CFRelease(v68);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a35, v67);
  _Unwind_Resume(a1);
}

void sub_198B93CB0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ResourceErrorBase::ResourceErrorBase(uint64_t a1, char a2)
{
  *(void *)a1 = 0;
  WTF::URL::URL((WTF::URL *)(a1 + 8));
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 60) = a2;
  *(unsigned char *)(a1 + 61) = 0;
  return a1;
}

void sub_198B93D7C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B93F50(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B94178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef cf,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  CFTypeRef v66 = cf;
  CFTypeRef cf = 0;
  if (v66) {
    CFRelease(v66);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a10);
  CFTypeRef v68 = a65;
  a65 = 0;
  if (v68) {
    CFRelease(v68);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a35, v67);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<void({block_pointer})(void),void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void sub_198B9449C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZ61__WKWebView_closeAllMediaPresentationsWithCompletionHandler__EN4__16clIN6WebKit29VideoPresentationModelContextEN7WebCore31VideoPresentationInterfaceAVKitEEEDaRT_RT0_EUlvE_vJEED1Ev(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C5060;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ61__WKWebView_closeAllMediaPresentationsWithCompletionHandler__EN4__16clIN6WebKit29VideoPresentationModelContextEN7WebCore31VideoPresentationInterfaceAVKitEEEDaRT_RT0_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C5060;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(void)>,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C5C00;
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(void)>,void>::~CallableWrapper(const void **a1)
{
  *a1 = &unk_1EE9C5C00;
  _Block_release(a1[1]);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(void)>,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void sub_198B94FD4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B95264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *aBlock)
{
  _Block_release(v29);
  CFRelease(v28);
  _Unwind_Resume(a1);
}

void ___ZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__EN4__31clEv_block_invoke(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = ___ZZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__EN4__31clEvENUlvE_clEv_block_invoke;
  block[3] = &__block_descriptor_104_e8_32c99_ZTSKZZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__EN4__31clEvENUlvE_clEvEUlvE__e5_v8__0l;
  uint64_t v1 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  long long v4 = *(_OWORD *)(a1 + 40);
  long long v5 = *(_OWORD *)(a1 + 56);
  long long v6 = *(_OWORD *)(a1 + 72);
  uint64_t v2 = *(const void **)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 88);
  *(void *)(a1 + 96) = 0;
  CFTypeRef cf = v1;
  if (v1) {
    CFRetain(v1);
  }
  long long v10 = v4;
  long long v11 = v5;
  long long v12 = v6;
  uint64_t v13 = v7;
  aBlock = _Block_copy(v2);
  dispatch_async(MEMORY[0x1E4F14428], block);
  _Block_release(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Block_release(aBlock);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_198B953D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf)
{
  _Block_release(v21);
  CFRelease(v20);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c87_ZTSKZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__EN4__31clEvEUlvE_(uint64_t a1, uint64_t a2)
{
  long long v4 = *(const void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    CFRetain(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 40) = v5;
  __n128 result = _Block_copy(*(const void **)(a2 + 96));
  *(void *)(a1 + 96) = result;
  return result;
}

void sub_198B95470(_Unwind_Exception *exception_object)
{
  CFTypeRef v3 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c87_ZTSKZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__EN4__31clEvEUlvE_(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 96));
  uint64_t v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2)
  {
    CFRelease(v2);
  }
}

void ___ZZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__EN4__31clEvENUlvE_clEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 40);
  double v4 = *(double *)(a1 + 48);
  double v5 = *(double *)(a1 + 56);
  double v6 = *(double *)(a1 + 64);
  double v7 = *(double *)(a1 + 72);
  double v8 = *(double *)(a1 + 80);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3321888768;
  v11[2] = ___ZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__ENK4__30clEv_block_invoke;
  v11[3] = &__block_descriptor_48_e8_32c96_ZTSKZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__ENK4__30clEvEUlP7CGImageE__e18_v16__0__CGImage__8l;
  char v9 = _Block_copy(*(const void **)(a1 + 96));
  uint64_t v10 = *(void *)(a1 + 88);
  aBlock = _Block_copy(v9);
  uint64_t v13 = v10;
  objc_msgSend(v2, "_snapshotRectAfterScreenUpdates:rectInViewCoordinates:intoImageOfWidth:completionHandler:", v3 != 0, v11, v4, v5, v6, v7, v8);
  _Block_release(v9);
  _Block_release(aBlock);
}

void sub_198B955D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock)
{
  _Block_release(aBlock);
  _Block_release(v13);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c99_ZTSKZZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__EN4__31clEvENUlvE_clEvEUlvE_(uint64_t a1, uint64_t a2)
{
  double v4 = *(const void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    CFRetain(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 40) = v5;
  __n128 result = _Block_copy(*(const void **)(a2 + 96));
  *(void *)(a1 + 96) = result;
  return result;
}

void sub_198B95654(_Unwind_Exception *exception_object)
{
  int v3 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c99_ZTSKZZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__EN4__31clEvENUlvE_clEvEUlvE_(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 96));
  uint64_t v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2)
  {
    CFRelease(v2);
  }
}

void sub_198B957D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B959D8(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198B95CA0(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B95E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B96124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = 80 * v3;
    uint64_t v5 = *(void *)a1 + 16;
    do
    {
      uint64_t v5 = MEMORY[0x199732DE0](v5) + 80;
      v4 -= 80;
    }
    while (v4);
  }
  long long v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

unint64_t WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 80 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x3333334)
    {
      __break(0xC471u);
      JUMPOUT(0x198B962F8);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = *(void *)a1 + 80 * *(unsigned int *)(a1 + 12);
    int v5 = 80 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(80 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::WritingTools::Context>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebCore::WritingTools::Context>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = a3 + 16;
    uint64_t v5 = result + 16;
    do
    {
      *(_OWORD *)(v4 - 16) = *(_OWORD *)(v5 - 16);
      WebCore::AttributedString::AttributedString();
      *(_OWORD *)(v4 + 40) = *(_OWORD *)(v5 + 40);
      __n128 result = MEMORY[0x199732DE0](v5);
      v4 += 80;
      uint64_t v6 = v5 + 64;
      v5 += 80;
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::WritingTools::TextSuggestion>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 48 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::WritingTools::TextSuggestion>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    unsigned int v3 = (WTF::StringImpl **)result;
    do
    {
      __n128 result = v3[4];
      v3[4] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 6;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

unint64_t WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x198B96578);
    }
    unint64_t v3 = *(WTF::StringImpl **)a1;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)a1 + 48 * *(unsigned int *)(a1 + 12));
    int v5 = 48 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::WritingTools::TextSuggestion>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::WritingTools::TextSuggestion>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    do
    {
      long long v6 = *((_OWORD *)v5 + 1);
      *(_OWORD *)a3 = *(_OWORD *)v5;
      *(_OWORD *)(a3 + 16) = v6;
      uint64_t v7 = *((void *)v5 + 4);
      *((void *)v5 + 4) = 0;
      *(void *)(a3 + 32) = v7;
      *(unsigned char *)(a3 + 40) = *((unsigned char *)v5 + 40);
      __n128 result = (WTF::StringImpl *)*((void *)v5 + 4);
      *((void *)v5 + 4) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      int v5 = (WTF::StringImpl *)((char *)v5 + 48);
      a3 += 48;
    }
    while (v5 != a2);
  }
  return result;
}

void sub_198B96778(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B968B0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198B96B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  CFRelease(v21);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(const void ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      long long v6 = *v4++;
      _Block_release(v6);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    long long v6 = *(WTF **)a1;
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *(void *)v6;
      *(void *)long long v6 = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      long long v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_198B9704C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::FrameTreeNode::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = API::Object::newObject(0x150uLL, 62);
  uint64_t result = API::FrameTreeNode::FrameTreeNode(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_198B970D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t API::FrameTreeNode::FrameTreeNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9DFDE8;
  *(_WORD *)(a1 + 16) = *(_WORD *)a2;
  WebCore::ResourceRequestBase::ResourceRequestBase(a1 + 24, a2 + 8);
  uint64_t v6 = *(void *)(a2 + 200);
  *(void *)(a2 + 200) = 0;
  *(void *)(a1 + 216) = v6;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 224, a2 + 208);
  uint64_t v7 = *(void *)(a2 + 240);
  *(void *)(a2 + 240) = 0;
  *(void *)(a1 + 256) = v7;
  long long v8 = *(_OWORD *)(a2 + 248);
  long long v9 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 294) = *(_OWORD *)(a2 + 278);
  *(_OWORD *)(a1 + 264) = v8;
  *(_OWORD *)(a1 + 280) = v9;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  uint64_t v10 = *(void *)(a2 + 296);
  *(void *)(a2 + 296) = 0;
  *(void *)(a1 + 312) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a2 + 304) = 0;
  *(_DWORD *)(a1 + 320) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 308);
  *(_DWORD *)(a2 + 308) = 0;
  *(_DWORD *)(a1 + 324) = v10;
  CFRetain(*(CFTypeRef *)(a3 + 8));
  *(void *)(a1 + 328) = a3;
  return a1;
}

void sub_198B971F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16, a2);
  uint64_t v19 = *(WTF::StringImpl **)(v14 + 256);
  *(void *)(v14 + 256) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v18);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t v20 = *(unsigned int *)(v14 + 248);
  if (v20 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9C4DC0[v20])(&a13, v15);
  }
  *(_DWORD *)(v14 + 248) = -1;
  long long v21 = *(const void **)(v14 + 216);
  *(void *)(v14 + 216) = 0;
  if (v21) {
    CFRelease(v21);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase(v13);
  _Unwind_Resume(a1);
}

void sub_198B9742C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextManipulationControllerExclusionRule>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (unsigned char *)WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = (unsigned char *)(*(void *)a1 + 32 * *(unsigned int *)(a1 + 12));
  unsigned char *v4 = *v3;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v4 + 8), (uint64_t)(v3 + 8));
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x198B976C0);
    }
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = *(void *)a1 + 32 * *(unsigned int *)(a1 + 12);
    uint64_t v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::TextManipulationControllerExclusionRule>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebCore::TextManipulationControllerExclusionRule>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v11 = v3;
    uint64_t v12 = v4;
    uint64_t v6 = a3 + 8;
    uint64_t v7 = result + 8;
    do
    {
      uint64_t v8 = v7 - 8;
      *(unsigned char *)(v6 - 8) = *(unsigned char *)(v7 - 8);
      uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,(std::__variant_detail::_Trait)1>::__move_constructor(v6, v7);
      uint64_t v9 = *(unsigned int *)(v7 + 16);
      if (v9 != -1) {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9C4DA8[v9])(&v10, v7);
      }
      *(_DWORD *)(v7 + 16) = -1;
      v6 += 32;
      v7 += 32;
    }
    while (v8 + 32 != a2);
  }
  return result;
}

void sub_198B97974(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B97F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (v14) {
    CFRelease(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0x2AAAAAB)
  {
    int v5 = 96 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(96 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFE0) / 0x60;
    *(void *)uint64_t v2 = v6;
    WTF::VectorCopier<false,WebCore::TextManipulationToken>::uninitializedCopy<WebCore::TextManipulationToken>(*(void *)a2, *(void *)a2 + 96 * *(unsigned int *)(a2 + 12), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_198B9814C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorCopier<false,WebCore::TextManipulationToken>::uninitializedCopy<WebCore::TextManipulationToken>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = result + 16;
    int v5 = (unsigned char *)(a3 + 80);
    do
    {
      uint64_t v6 = v4 - 16;
      *((void *)v5 - 10) = *(void *)(v4 - 16);
      uint64_t v7 = *(_DWORD **)(v4 - 8);
      if (v7) {
        *v7 += 2;
      }
      *((void *)v5 - 9) = v7;
      *(v5 - 64) = 0;
      uint64_t result = (uint64_t)(v5 - 64);
      *int v5 = 0;
      if (*(unsigned char *)(v4 + 64))
      {
        uint64_t result = std::construct_at[abi:sn180100]<WebCore::TextManipulationTokenInfo,WebCore::TextManipulationTokenInfo const&,WebCore::TextManipulationTokenInfo*>(result, v4);
        *int v5 = 1;
      }
      v5[8] = *(unsigned char *)(v4 + 72);
      v4 += 96;
      v5 += 96;
    }
    while (v6 + 96 != a2);
  }
  return result;
}

void sub_198B98210(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::TextManipulationTokenInfo,false>::~__optional_destruct_base[abi:sn180100](v2 - 64, a2);
  int v5 = *(WTF::StringImpl **)(v2 - 72);
  *(void *)(v2 - 72) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::TextManipulationTokenInfo,WebCore::TextManipulationTokenInfo const&,WebCore::TextManipulationTokenInfo*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = *(_DWORD **)a2;
    if (*(void *)a2) {
      *v2 += 2;
    }
    *(void *)uint64_t result = v2;
    uint64_t v3 = *(_DWORD **)(a2 + 8);
    if (v3) {
      *v3 += 2;
    }
    *(void *)(result + 8) = v3;
    uint64_t v4 = *(_DWORD **)(a2 + 16);
    if (v4) {
      *v4 += 2;
    }
    *(void *)(result + 16) = v4;
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(result + 24) = v5;
    *(unsigned char *)(result + 56) = *(unsigned char *)(a2 + 56);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextManipulationItem>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 48 * *(unsigned int *)(a1 + 12);
  long long v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v3;
  *(_OWORD *)(v4 + 16) = v5;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  uint64_t v6 = *(void *)(v3 + 32);
  *(void *)(v3 + 32) = 0;
  *(void *)(v4 + 32) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 40);
  *(_DWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v4 + 40) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 44);
  *(_DWORD *)(v3 + 44) = 0;
  *(_DWORD *)(v4 + 44) = v6;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x198B9854CLL);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = (void *)(*(void *)a1 + 48 * *(unsigned int *)(a1 + 12));
    int v5 = 48 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::TextManipulationItem>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebCore::TextManipulationItem>::move(uint64_t result, void *a2, uint64_t a3)
{
  if ((void *)result != a2)
  {
    result += 32;
    do
    {
      long long v5 = *(_OWORD *)(result - 16);
      *(_OWORD *)a3 = *(_OWORD *)(result - 32);
      *(_OWORD *)(a3 + 16) = v5;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      uint64_t v6 = *(void *)result;
      *(void *)uint64_t result = 0;
      *(void *)(a3 + 32) = v6;
      LODWORD(v6) = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = 0;
      *(_DWORD *)(a3 + 40) = v6;
      LODWORD(v6) = *(_DWORD *)(result + 12);
      *(_DWORD *)(result + 12) = 0;
      *(_DWORD *)(a3 + 44) = v6;
      uint64_t v7 = WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2);
      unint64_t v8 = (void *)(v7 + 16);
      uint64_t result = v7 + 48;
      a3 += 48;
    }
    while (v8 != a2);
  }
  return result;
}

void sub_198B98834(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B98950(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::SharedMemory,WTF::RawPtrTraits<WebCore::SharedMemory>,WTF::DefaultRefDerefTraits<WebCore::SharedMemory>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(unsigned int ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      void *v4 = 0;
      if (v6) {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_198B98B40(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(*(WTF::StringImpl **)a1, (void *)(*(void *)a1 + 24 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(WTF::StringImpl *result, void *a2)
{
  if (result != a2)
  {
    unsigned int v3 = (WTF::StringImpl **)result;
    do
    {
      WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 1), a2);
      uint64_t result = *v3;
      *unsigned int v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 3;
    }
    while (v3 != a2);
  }
  return result;
}

void sub_198B999B4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MarkupExclusionRule>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = v5;
  uint64_t v6 = *(void *)(v3 + 8);
  *(void *)(v3 + 8) = 0;
  *(void *)(v4 + 8) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 16);
  *(_DWORD *)(v3 + 16) = 0;
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 20);
  *(_DWORD *)(v3 + 20) = 0;
  *(_DWORD *)(v4 + 20) = v6;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x198B99BE4);
    }
    unint64_t v3 = *(WTF::StringImpl **)a1;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)a1 + 24 * *(unsigned int *)(a1 + 12));
    int v5 = 24 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::MarkupExclusionRule>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::MarkupExclusionRule>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = (uint64_t)result + 8;
    do
    {
      uint64_t v7 = v5 - 8;
      uint64_t v6 = *(void *)(v5 - 8);
      *(void *)(v5 - 8) = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = v6;
      uint64_t v8 = *(void *)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)(a3 + 8) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 16) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 20) = v8;
      WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      uint64_t result = *(WTF::StringImpl **)(v5 - 8);
      *(void *)(v5 - 8) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v5 += 24;
      a3 += 24;
    }
    while ((WTF::StringImpl *)(v7 + 24) != a2);
  }
  return result;
}

void sub_198B99F44(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198B9A188(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B9A318(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B9A47C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B9A610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, CFTypeRef a10)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a10) {
    CFRelease(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B9A788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::ApplicationManifest::create@<X0>(uint64_t a1@<X0>, WebKit **a2@<X8>)
{
  uint64_t v4 = (WebKit *)API::Object::newObject(0x120uLL, 40);
  *(void *)uint64_t v4 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v4);
  *(void *)uint64_t v4 = &unk_1EE9C5C28;
  uint64_t result = WebCore::ApplicationManifest::ApplicationManifest((uint64_t)v4 + 16, a1);
  *a2 = v4;
  return result;
}

void sub_198B9A830(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void API::ApplicationManifest::~ApplicationManifest(API::ApplicationManifest *this, void *a2)
{
}

{
  uint64_t vars8;

  WebCore::ApplicationManifest::~ApplicationManifest((API::ApplicationManifest *)((char *)this + 16), a2);

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)40>::type()
{
  return 40;
}

uint64_t WebCore::ApplicationManifest::ApplicationManifest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v5 = *(_DWORD **)(a2 + 16);
  if (v5) {
    *v5 += 2;
  }
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *(_DWORD **)(a2 + 24);
  if (v6) {
    *v6 += 2;
  }
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(_DWORD **)(a2 + 32);
  if (v7) {
    *v7 += 2;
  }
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(_DWORD **)(a2 + 40);
  if (v8) {
    *v8 += 2;
  }
  *(void *)(a1 + 40) = v8;
  long long v9 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v9;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  unint64_t v10 = *(_DWORD **)(a2 + 88);
  if (v10) {
    *v10 += 2;
  }
  *(void *)(a1 + 88) = v10;
  long long v11 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v11;
  uint64_t v12 = *(_DWORD **)(a2 + 128);
  if (v12) {
    *v12 += 2;
  }
  *(void *)(a1 + 128) = v12;
  long long v13 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v13;
  uint64_t v14 = *(_DWORD **)(a2 + 168);
  if (v14) {
    *v14 += 2;
  }
  *(void *)(a1 + 168) = v14;
  long long v15 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v15;
  WebCore::Color::Color((WebCore::Color *)(a1 + 208), (const Color *)(a2 + 208));
  WebCore::Color::Color((WebCore::Color *)(a1 + 216), (const Color *)(a2 + 216));
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 224, a2 + 224);
  WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 240, a2 + 240);
  WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 256, a2 + 256);
  return a1;
}

void sub_198B9AA40(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, v8);
  uint64_t v10 = *v4;
  if ((*v4 & 0x8000000000000) != 0)
  {
    long long v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v9);
    }
  }
  uint64_t v12 = *v3;
  if ((*v3 & 0x8000000000000) != 0)
  {
    long long v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v9);
    }
  }
  uint64_t v14 = v2[21];
  v2[21] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v9);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  long long v15 = v2[16];
  v2[16] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v9);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = v2[11];
  v2[11] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v9);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = v2[5];
  v2[5] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v9);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t v18 = v2[4];
  v2[4] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v9);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  uint64_t v19 = v2[3];
  v2[3] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v9);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t v20 = v2[2];
  v2[2] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v9);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  long long v21 = *v2;
  *uint64_t v2 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v9);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0x38E38E4)
  {
    int v5 = 72 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(72 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
    *(void *)uint64_t v2 = v6;
    WTF::VectorCopier<false,WebCore::ApplicationManifest::Icon>::uninitializedCopy<WebCore::ApplicationManifest::Icon>(*(void *)a2, *(void *)a2 + 72 * *(unsigned int *)(a2 + 12), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_198B9AC80(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorCopier<false,WebCore::ApplicationManifest::Icon>::uninitializedCopy<WebCore::ApplicationManifest::Icon>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = a3 + 40;
    uint64_t v5 = result + 40;
    do
    {
      uint64_t v7 = v5 - 40;
      uint64_t v6 = *(_DWORD **)(v5 - 40);
      if (v6) {
        *v6 += 2;
      }
      *(void *)(v4 - 40) = v6;
      long long v8 = *(_OWORD *)(v5 - 16);
      *(_OWORD *)(v4 - 32) = *(_OWORD *)(v5 - 32);
      *(_OWORD *)(v4 - 16) = v8;
      uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v4, v5);
      long long v9 = *(_DWORD **)(v5 + 16);
      if (v9) {
        *v9 += 2;
      }
      *(void *)(v4 + 16) = v9;
      *(unsigned char *)(v4 + 24) = *(unsigned char *)(v5 + 24);
      v4 += 72;
      v5 += 72;
    }
    while (v7 + 72 != a2);
  }
  return result;
}

void sub_198B9AD40(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *(WTF::StringImpl **)(v2 - 40);
  *(void *)(v2 - 40) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 26))
  {
    uint64_t v5 = WTF::fastMalloc((WTF *)(v3 << 6));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    WTF::VectorCopier<false,WebCore::ApplicationManifest::Shortcut>::uninitializedCopy<WebCore::ApplicationManifest::Shortcut>(*(void *)a2, *(void *)a2 + ((unint64_t)*(unsigned int *)(a2 + 12) << 6), v5);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_198B9ADE4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorCopier<false,WebCore::ApplicationManifest::Shortcut>::uninitializedCopy<WebCore::ApplicationManifest::Shortcut>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = a3 + 48;
    uint64_t v5 = result + 48;
    do
    {
      uint64_t v7 = v5 - 48;
      uint64_t v6 = *(_DWORD **)(v5 - 48);
      if (v6) {
        *v6 += 2;
      }
      *(void *)(v4 - 48) = v6;
      long long v8 = *(_DWORD **)(v5 - 40);
      if (v8) {
        *v8 += 2;
      }
      *(void *)(v4 - 40) = v8;
      long long v9 = *(_OWORD *)(v5 - 16);
      *(_OWORD *)(v4 - 32) = *(_OWORD *)(v5 - 32);
      *(_OWORD *)(v4 - 16) = v9;
      uint64_t result = WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v4, v5);
      v4 += 64;
      v5 += 64;
    }
    while (v7 + 64 != a2);
  }
  return result;
}

void sub_198B9AE98(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *(WTF::StringImpl **)(v2 - 40);
  *(void *)(v2 - 40) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(WTF::StringImpl **)(v2 - 48);
  *(void *)(v2 - 48) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 29))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(WTF **)result;
    uint64_t v5 = *(unsigned int *)(result + 12);
    uint64_t v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    if (v5)
    {
      unint64_t v8 = (void *)v6;
      uint64_t v9 = 8 * v5;
      unint64_t v10 = (const void **)v4;
      do
      {
        long long v11 = *v10;
        _DWORD *v10 = 0;
        *v8++ = v11;
        uint64_t v12 = *v10++;
        _Block_release(v12);
        v9 -= 8;
      }
      while (v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void sub_198B9BDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  CFRelease(v21);
  _Unwind_Resume(a1);
}

void sub_198B9C090(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *_ZN3WTF6Detail15CallableWrapperIZZ72__WKWebView_WKTextExtraction___requestTextExtraction_completionHandler__ENK4__95clIN7WebCore14TextExtraction4ItemEEEDaOT_EUlRS8_E_NS4_9FloatRectEJRKSC_EED1Ev(void *a1)
{
  int v2 = (const void *)a1[1];
  *a1 = &unk_1EE9C5BD8;
  a1[1] = 0;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ72__WKWebView_WKTextExtraction___requestTextExtraction_completionHandler__ENK4__95clIN7WebCore14TextExtraction4ItemEEEDaOT_EUlRS8_E_NS4_9FloatRectEJRKSC_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C5BD8;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(v3);
  }

  return WTF::fastFree(this, a2);
}

float _ZN3WTF6Detail15CallableWrapperIZZ72__WKWebView_WKTextExtraction___requestTextExtraction_completionHandler__ENK4__95clIN7WebCore14TextExtraction4ItemEEEDaOT_EUlRS8_E_NS4_9FloatRectEJRKSC_EE4callESE_(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && (uint64_t v3 = *(const void **)(v2 + 632)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v2 + 632));
    uint64_t v5 = *(void **)(a1 + 8);
    WebCore::FloatRect::operator CGRect();
    objc_msgSend(v5, "convertRect:fromView:", v3);
    v11.origin.x = v6;
    v11.origin.y = v7;
    v11.size.width = v8;
    v11.size.height = v9;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v12, &v11);
    CFRelease(v3);
  }
  else
  {
    long long v12 = *a2;
  }
  return *(float *)&v12;
}

void sub_198B9C230(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NetworkResourceLoadMap::~NetworkResourceLoadMap(WebKit::NetworkResourceLoadMap *this, WTF::StringImpl *a2)
{
  WebKit::NetworkResourceLoadMap::clear(this, a2);
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*(void *)this) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(*(void *)this, v3);
  }
}

uint64_t WebKit::NetworkResourceLoadMap::clear(WebKit::NetworkResourceLoadMap *this, WTF::StringImpl *a2)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    *(void *)this = 0;
    uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(result, a2);
  }
  if (*((unsigned char *)this + 8))
  {
    *((unsigned char *)this + 8) = 0;
    uint64_t result = *((void *)this + 2);
    if (result)
    {
      uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v4();
    }
  }
  return result;
}

uint64_t *WebKit::NetworkResourceLoadMap::add@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = a2;
  int hasUpload = WebCore::ResourceRequestBase::hasUpload((WebCore::ResourceRequestBase *)(*a3 + 168));
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>((uint64_t *)a1, (WTF::StringImpl *)&v9, a3, a4);
  if (hasUpload && !*(unsigned char *)(a1 + 8))
  {
    *(unsigned char *)(a1 + 8) = 1;
    uint64_t result = *(uint64_t **)(a1 + 16);
    if (result) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, 1);
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  CGFloat v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *(void *)a2;
  unint64_t v12 = *(void *)a2 + ~(*(void *)a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    long long v28 = 0;
    int v29 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v30 = 0;
        }
        else {
          uint64_t v30 = *(unsigned int *)(v8 - 4);
        }
        char v27 = 0;
        uint64_t v26 = v8 + 16 * v30;
        goto LABEL_13;
      }
      if (v17 == -1) {
        long long v28 = v16;
      }
      unsigned int v15 = (v15 + v29) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v29;
    }
    while (*v16);
    if (v28)
    {
      uint64_t *v28 = 0;
      v28[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *(void *)a2;
      uint64_t v16 = v28;
    }
  }
  uint64_t *v16 = v11;
  uint64_t v18 = *a3;
  *a3 = 0;
  uint64_t v19 = v16[1];
  v16[1] = v18;
  if (v19) {
    uint64_t result = (uint64_t *)WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v19 + 8), a2);
  }
  uint64_t v20 = *v6;
  if (*v6) {
    int v21 = *(_DWORD *)(v20 - 12) + 1;
  }
  else {
    int v21 = 1;
  }
  *(_DWORD *)(v20 - 12) = v21;
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24) {
      goto LABEL_12;
    }
LABEL_22:
    uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
    uint64_t v16 = result;
    uint64_t v22 = *v6;
    if (*v6) {
      unint64_t v25 = *(unsigned int *)(v22 - 4);
    }
    else {
      unint64_t v25 = 0;
    }
    goto LABEL_12;
  }
  if (3 * v25 <= 4 * v24) {
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v26 = v22 + 16 * v25;
  char v27 = 1;
LABEL_13:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v26;
  *(unsigned char *)(a4 + 16) = v27;
  return result;
}

BOOL WebKit::NetworkResourceLoadMap::remove(uint64_t a1, uint64_t a2)
{
  WebKit::NetworkResourceLoadMap::take(a1, a2, &v5);
  uint64_t v3 = v5;
  if (v5) {
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v5 + 8), v2);
  }
  return v3 != 0;
}

uint64_t WebKit::NetworkResourceLoadMap::take@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v5 = (WTF::StringImpl *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned long long>>,unsigned long long>((uint64_t *)a1, &v16);
  uint64_t result = (uint64_t)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::take((uint64_t *)a1, v5, &v15);
  uint64_t v7 = v15;
  if (v15)
  {
    uint64_t result = WebCore::ResourceRequestBase::hasUpload((WebCore::ResourceRequestBase *)(v15 + 168));
    if (result)
    {
      uint64_t v8 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin((void **)a1);
      uint64_t v10 = *(void *)a1;
      if (*(void *)a1)
      {
        uint64_t v11 = *(unsigned int *)(v10 - 4);
        uint64_t v12 = v10 + 16 * v11;
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v11 = 0;
      }
      v14[0] = a1;
      v14[1] = v8;
      void v14[2] = v9;
      v14[3] = v12;
      v14[4] = v10 + 16 * v11;
      uint64_t result = WTF::anyOf<WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WebKit::NetworkResourceLoadMap::take(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0>(v14);
      if (*(unsigned __int8 *)(a1 + 8) != result)
      {
        uint64_t v13 = result;
        *(unsigned char *)(a1 + 8) = result;
        uint64_t result = *(void *)(a1 + 16);
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v13);
        }
      }
    }
    uint64_t v7 = v15;
  }
  *a3 = v7;
  return result;
}

uint64_t WTF::anyOf<WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WebKit::NetworkResourceLoadMap::take(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0>(void *a1)
{
  uint64_t v1 = (void *)a1[1];
  uint64_t v2 = (void *)a1[3];
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = (void *)a1[2];
  while (1)
  {
    uint64_t result = WebCore::ResourceRequestBase::hasUpload((WebCore::ResourceRequestBase *)(v1[1] + 168));
    if (result) {
      return 1;
    }
    while (1)
    {
      v1 += 2;
      if (v1 == v3) {
        break;
      }
      if ((unint64_t)(*v1 + 1) > 1) {
        goto LABEL_8;
      }
    }
    uint64_t v1 = v3;
LABEL_8:
    if (v1 == v2) {
      return result;
    }
  }
}

uint64_t WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, double a9, uint64_t *a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t *a14, char a15, char a16, char a17, uint64_t *a18, char a19, long long *a20,char a21,uint64_t *a22,char a23,char a24,char a25,int a26,__int16 a27,uint64_t *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t *a39,uint64_t a40,uint64_t a41,char a42,char a43,char a44)
{
  uint64_t Parameters = WebKit::NetworkLoadParameters::NetworkLoadParameters(a1, a2);
  *(void *)(Parameters + 2968) = a3;
  *(void *)(Parameters + 2992) = 0;
  *(void *)(Parameters + 2984) = 0;
  *(void *)(Parameters + 2976) = 0;
  *(double *)(Parameters + 3000) = a9;
  int v50 = *(_DWORD *)(a7 + 3);
  *(_DWORD *)(Parameters + 3008) = *(_DWORD *)a7;
  *(_DWORD *)(Parameters + 3011) = v50;
  uint64_t v51 = *(void *)(a7 + 8);
  *(void *)(a7 + 8) = 0;
  *(void *)(Parameters + 3016) = v51;
  long long v52 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(Parameters + 3040) = *(_OWORD *)(a7 + 32);
  *(_OWORD *)(Parameters + 3024) = v52;
  *(unsigned char *)(Parameters + 3056) = 0;
  *(unsigned char *)(Parameters + 3080) = 0;
  if (*((unsigned char *)a8 + 24))
  {
    *(void *)(a1 + 3056) = 0;
    *(void *)(a1 + 3064) = 0;
    uint64_t v64 = *a8;
    *a8 = 0;
    *(void *)(a1 + 3056) = v64;
    LODWORD(v64) = *((_DWORD *)a8 + 2);
    *((_DWORD *)a8 + 2) = 0;
    *(_DWORD *)(a1 + 3064) = v64;
    LODWORD(v64) = *((_DWORD *)a8 + 3);
    *((_DWORD *)a8 + 3) = 0;
    *(_DWORD *)(a1 + 3068) = v64;
    LODWORD(v64) = *((_DWORD *)a8 + 4);
    *(unsigned char *)(a1 + 3076) = *((unsigned char *)a8 + 20);
    *(_DWORD *)(a1 + 3072) = v64;
    *(unsigned char *)(a1 + 3080) = 1;
  }
  WTF::URL::URL(a1 + 3088, a10);
  WTF::URL::URL(a1 + 3128, a11);
  *(_WORD *)(a1 + 3168) = *(_WORD *)a12;
  char v53 = *(_DWORD **)(a12 + 8);
  if (v53) {
    *v53 += 2;
  }
  *(void *)(a1 + 3176) = v53;
  long long v54 = *(_DWORD **)(a12 + 16);
  if (v54) {
    *v54 += 2;
  }
  *(void *)(a1 + 3184) = v54;
  *(_WORD *)(a1 + 3192) = *(_WORD *)a13;
  char v55 = *(_DWORD **)(a13 + 8);
  if (v55) {
    *v55 += 2;
  }
  *(void *)(a1 + 3200) = v55;
  v56 = *(_DWORD **)(a13 + 16);
  if (v56) {
    *v56 += 2;
  }
  *(void *)(a1 + 3208) = v56;
  *(_OWORD *)(a1 + 3216) = 0u;
  uint64_t v57 = *a14;
  *a14 = 0;
  *(void *)(a1 + 3216) = v57;
  LODWORD(v57) = *((_DWORD *)a14 + 2);
  *((_DWORD *)a14 + 2) = 0;
  *(_DWORD *)(a1 + 3224) = v57;
  LODWORD(v57) = *((_DWORD *)a14 + 3);
  *((_DWORD *)a14 + 3) = 0;
  *(_DWORD *)(a1 + 3228) = v57;
  *(_OWORD *)(a1 + 3232) = 0u;
  uint64_t v58 = a14[2];
  a14[2] = 0;
  *(void *)(a1 + 3232) = v58;
  LODWORD(v58) = *((_DWORD *)a14 + 6);
  *((_DWORD *)a14 + 6) = 0;
  *(_DWORD *)(a1 + 3240) = v58;
  LODWORD(v58) = *((_DWORD *)a14 + 7);
  *((_DWORD *)a14 + 7) = 0;
  *(_DWORD *)(a1 + 3244) = v58;
  *(unsigned char *)(a1 + 3248) = a15;
  *(unsigned char *)(a1 + 3249) = a16;
  *(unsigned char *)(a1 + 3250) = a17;
  *(_OWORD *)(a1 + 3256) = 0u;
  uint64_t v59 = *a18;
  *a18 = 0;
  *(void *)(a1 + 3256) = v59;
  LODWORD(v59) = *((_DWORD *)a18 + 2);
  *((_DWORD *)a18 + 2) = 0;
  *(_DWORD *)(a1 + 3264) = v59;
  LODWORD(v59) = *((_DWORD *)a18 + 3);
  *((_DWORD *)a18 + 3) = 0;
  *(_DWORD *)(a1 + 3268) = v59;
  *(unsigned char *)(a1 + 3272) = a19;
  long long v60 = *a20;
  *(void *)(a1 + 3296) = *((void *)a20 + 2);
  *(_OWORD *)(a1 + 3280) = v60;
  *(unsigned char *)(a1 + 3304) = a21;
  WTF::URL::URL(a1 + 3312, a22);
  *(unsigned char *)(a1 + 3352) = a23;
  *(unsigned char *)(a1 + 3353) = a24;
  *(unsigned char *)(a1 + 3354) = a25;
  *(_WORD *)(a1 + 3356) = a27;
  WTF::URL::URL(a1 + 3360, a28);
  *(_WORD *)(a1 + 3400) = *(_WORD *)a29;
  uint64_t v61 = *(void *)(a29 + 8);
  *(void *)(a29 + 8) = 0;
  *(void *)(a1 + 3408) = v61;
  uint64_t v62 = *(void *)(a29 + 16);
  *(void *)(a29 + 16) = 0;
  *(void *)(a1 + 3416) = v62;
  *(void *)(a1 + 3424) = a30;
  *(void *)(a1 + 3432) = a31;
  *(unsigned char *)(a1 + 3440) = 0;
  *(unsigned char *)(a1 + 3664) = 0;
  if (*(unsigned char *)(a32 + 224))
  {
    std::construct_at[abi:sn180100]<WebCore::NavigationRequester,WebCore::NavigationRequester,WebCore::NavigationRequester*>(a1 + 3440, a32);
    *(unsigned char *)(a1 + 3664) = 1;
  }
  *(unsigned char *)(a1 + 3680) = a33;
  *(void *)(a1 + 3688) = a34;
  *(void *)(a1 + 3696) = a35;
  *(unsigned char *)(a1 + 3704) = a36;
  *(void *)(a1 + 3712) = a37;
  *(void *)(a1 + 3720) = a38;
  WTF::URL::URL(a1 + 3728, a39);
  *(void *)(a1 + 3768) = a40;
  *(void *)(a1 + 3776) = a41;
  *(unsigned char *)(a1 + 3784) = a42;
  *(unsigned char *)(a1 + 3785) = a43;
  *(unsigned char *)(a1 + 3786) = a44;
  if (*a4)
  {
    WebCore::ResourceRequestBase::setHTTPBody();
    if (!*(unsigned char *)(a5 + 16))
    {
      __break(0xC471u);
      goto LABEL_33;
    }
    uint64_t v65 = *(unsigned int *)(a5 + 12);
    if (v65)
    {
      CFTypeRef v66 = *(uint64_t **)a5;
      uint64_t v67 = 8 * v65;
      do
      {
        WebKit::SandboxExtension::create(v66, v78);
        uint64_t v68 = v78[0];
        if (v78[0])
        {
          uint64_t v69 = *(unsigned int *)(a1 + 2988);
          if (v69 == *(_DWORD *)(a1 + 2984))
          {
            WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(a1 + 2976, (unint64_t)v78);
          }
          else
          {
            uint64_t v70 = *(void *)(a1 + 2976);
            v78[0] = 0;
            *(void *)(v70 + 8 * v69) = v68;
            *(_DWORD *)(a1 + 2988) = v69 + 1;
          }
          CFTypeRef v71 = (const char ***)v78[0];
          v78[0] = 0;
          if (v71) {
            WTF::RefCounted<WebKit::SandboxExtension>::deref(v71);
          }
        }
        ++v66;
        v67 -= 8;
      }
      while (v67);
    }
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 88));
  if (!WTF::URL::protocolIs()) {
    return a1;
  }
  if (!*(unsigned char *)(a6 + 8))
  {
    __break(0xC471u);
LABEL_33:
    JUMPOUT(0x198B9CC3CLL);
  }
  WebKit::SandboxExtension::create((uint64_t *)a6, v78);
  uint64_t v72 = v78[0];
  v78[0] = 0;
  v73 = *(const char ****)(a1 + 2992);
  *(void *)(a1 + 2992) = v72;
  if (v73)
  {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v73);
    CFTypeRef v74 = (const char ***)v78[0];
    v78[0] = 0;
    if (v74) {
      WTF::RefCounted<WebKit::SandboxExtension>::deref(v74);
    }
  }
  return a1;
}

WTF::RefCountedBase *WebKit::NetworkResourceLoadParameters::sandboxExtensionsIfHttpBody@<X0>(WebKit::NetworkResourceLoadParameters *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (WebKit::NetworkResourceLoadParameters *)((char *)this + 88);
  WebCore::ResourceRequestBase::httpBody((uint64_t *)&v20, (WebKit::NetworkResourceLoadParameters *)((char *)this + 88));
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (!result)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  WTF::RefCounted<WebCore::FormData>::deref(result);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  WebCore::ResourceRequestBase::httpBody((uint64_t *)&v18, v3);
  CGFloat v6 = v18;
  uint64_t v18 = 0;
  if (v6) {
    WTF::RefCounted<WebCore::FormData>::deref((WTF::RefCountedBase *)v6);
  }
  uint64_t v7 = *((unsigned int *)v6 + 5);
  if (!v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    goto LABEL_16;
  }
  uint64_t v10 = v6[1];
  uint64_t v11 = 48 * v7;
  do
  {
    if (v10)
    {
      if (*((_DWORD *)v10 + 10) == 1)
      {
        WebKit::SandboxExtension::createHandle(0, (uint64_t)&v18);
        if (v19)
        {
          int v12 = HIDWORD(v21);
          if (HIDWORD(v21) != v21)
          {
            uint64_t v13 = v18;
            uint64_t v18 = 0;
            *((void *)v20 + HIDWORD(v21)) = v13;
            HIDWORD(v21) = v12 + 1;
LABEL_14:
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v18);
            goto LABEL_9;
          }
          unint64_t v14 = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v20, HIDWORD(v21) + 1, (unint64_t)&v18);
          uint64_t v15 = HIDWORD(v21);
          uint64_t v16 = v20;
          uint64_t v17 = *v14;
          *unint64_t v14 = 0;
          *((void *)v16 + v15) = v17;
          HIDWORD(v21) = v15 + 1;
          if (v19) {
            goto LABEL_14;
          }
        }
      }
    }
LABEL_9:
    v10 += 48;
    v11 -= 48;
  }
  while (v11);
  uint64_t v8 = v20;
  uint64_t v9 = v21;
LABEL_16:
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 16) = 1;
  return (WTF::RefCountedBase *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v5);
}

void WebKit::NetworkResourceLoadParameters::sandboxExtensionIflocalFile(WebKit::NetworkResourceLoadParameters *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = (WebKit::NetworkResourceLoadParameters *)((char *)this + 88);
  WebCore::ResourceRequestBase::url((WebKit::NetworkResourceLoadParameters *)((char *)this + 88));
  if ((WTF::URL::protocolIs() & 1) == 0)
  {
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  WebKit::SandboxExtensionHandle::SandboxExtensionHandle(&v18);
  if (*((unsigned char *)this + 84))
  {
    uint64_t v5 = (WTF::URL *)WebCore::ResourceRequestBase::url(v4);
    WTF::URL::fileSystemPath((uint64_t *)&v15, v5);
    unint64_t v6 = (unint64_t)v15;
    if (v15)
    {
      uint64_t v7 = (WebKit::SandboxExtensionImpl *)*((void *)v15 + 1);
      unint64_t v6 = *((unsigned int *)v15 + 1);
      unint64_t v8 = (unint64_t)((*((_DWORD *)v15 + 4) >> 2) & 1) << 32;
    }
    else
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0x100000000;
    }
    if (!*((unsigned char *)this + 84))
    {
      __break(1u);
      return;
    }
    long long v9 = *(_OWORD *)((char *)this + 68);
    v14[0] = *(_OWORD *)((char *)this + 52);
    v14[1] = v9;
    WebKit::SandboxExtension::createHandleForReadByAuditToken(v7, (WebKit::SandboxExtensionImpl *)(v8 | v6), v14, (uint64_t)&v16);
  }
  else
  {
    uint64_t v13 = (WTF::URL *)WebCore::ResourceRequestBase::url(v4);
    WTF::URL::fileSystemPath((uint64_t *)&v15, v13);
    WebKit::SandboxExtension::createHandle(0, (uint64_t)&v16);
  }
  uint64_t v11 = v15;
  uint64_t v15 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  if (v17)
  {
    WebKit::SandboxExtensionHandle::operator=(&v18, &v16);
    if (v17) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v16);
    }
  }
  int v12 = v18;
  uint64_t v18 = 0;
  *(void *)a2 = v12;
  a2[8] = 1;
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v18);
}

uint64_t WebKit::NetworkResourceLoader::NetworkResourceLoader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = (unsigned char *)(a1 + 4720);
  unint64_t v8 = (unsigned char *)(a1 + 4136);
  *(_DWORD *)(a1 + 8) = 1;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)a1 = &unk_1EE9C5C78;
  *(void *)(a1 + 16) = &unk_1EE9C5D70;
  *(void *)(a1 + 24) = &unk_1EE9C5DC0;
  *(void *)(a1 + 32) = &unk_1EE9C5DF0;
  *(void *)(a1 + 48) = &unk_1EE9C5E18;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = &unk_1EE9C5E68;
  long long v9 = (uint64_t *)(a1 + 80);
  WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters(a1 + 80, a2);
  ++*(_DWORD *)(a3 + 8);
  *(void *)(a1 + 3872) = a3;
  *(void *)(a1 + 3880) = 0;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 3888));
  *(void *)(a1 + 4128) = 0;
  *unint64_t v8 = 0;
  *(unsigned char *)(a1 + 4026) = *(unsigned char *)(a1 + 4026) & 0xF1 | 4;
  *(void *)(a1 + 4168) = 0;
  *(_OWORD *)(a1 + 4144) = 0u;
  *(_DWORD *)(a1 + 4160) = 0;
  WebKit::NetworkConnectionToWebProcess::resolveBlobReferences((void *)a3, v9, a1 + 4176);
  *(_WORD *)(a1 + 4192) = 0;
  v8[58] = *(unsigned char *)(a1 + 371);
  *(void *)(a1 + 4200) = 0;
  *(_DWORD *)(a1 + 4208) = 0;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(a1 + 4216));
  *(void *)(a1 + 4216) = &unk_1EE9BA5F0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v10 = &unk_1EE9C6188;
  v10[1] = WebKit::NetworkResourceLoader::bufferingTimerFired;
  v10[2] = 0;
  v10[3] = a1;
  *(void *)(a1 + 4264) = v10;
  uint64_t v11 = (WebKit::NetworkCache::Cache **)(a1 + 4272);
  *(void *)(a1 + 4336) = 0;
  *(unsigned char *)(a1 + 4304) = 0;
  *(_OWORD *)(a1 + 4288) = 0u;
  *(_OWORD *)(a1 + 4272) = 0u;
  *(unsigned char *)(a1 + 4328) = 0;
  *(_OWORD *)(a1 + 4312) = 0u;
  *((_WORD *)v8 + 104) = *(unsigned __int8 *)(*(void *)(a1 + 3872) + 208);
  *(void *)(a1 + 4352) = 0;
  v8[224] = 0;
  v8[248] = 0;
  *(void *)(a1 + 4392) = 0;
  *(_OWORD *)(a1 + 4400) = 0u;
  *(void *)(a1 + 4416) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 4424));
  *(void *)(a1 + 4664) = 0;
  v8[536] = 0;
  v8[426] = v8[426] & 0xF1 | 4;
  *(void *)(a1 + 4680) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 4680));
  *uint64_t v7 = 0;
  v7[80] = 0;
  *(void *)(a1 + 4808) = 0;
  *(_OWORD *)(a1 + 4816) = 0u;
  WTF::URL::invalidate((WTF::URL *)(a1 + 4824));
  *(void *)(a1 + 4896) = 0;
  *(void *)(a1 + 4888) = 0;
  *(unsigned char *)(a1 + 4904) = 0;
  *(void *)(a1 + 4912) = 0;
  v7[200] = 0;
  *(_OWORD *)(a1 + 4928) = 0u;
  *(void *)(a1 + 4941) = 0;
  *(void *)(a1 + 4952) = 0;
  uint64_t v12 = *(void *)(a3 + 80);
  uint64_t v67 = *(WTF::StringImpl **)(*(void *)(a1 + 3872) + 88);
  uint64_t v13 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v12 + 224), &v67);
  if (v13)
  {
    uint64_t v15 = *(WebKit::NetworkCache::Cache **)(v13 + 616);
    if (v15) {
      ++*(_DWORD *)v15;
    }
    uint64_t v16 = *v11;
    *uint64_t v11 = v15;
    if (v16) {
      WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v16, v14);
    }
  }
  if (*a4 || *(unsigned char *)(a1 + 3328) || *(unsigned char *)(a1 + 3094))
  {
    BOOL v17 = *(unsigned char *)(a1 + 315) == 1 && *(_DWORD *)(a1 + 3348) == 0;
    long long v54 = a4;
    uint64_t v18 = *(atomic_uint **)(a3 + 80);
    atomic_fetch_add(v18 + 32, 1u);
    char v19 = *(_DWORD **)(a3 + 288);
    LODWORD(v67) = *(_DWORD *)(a1 + 3088);
    *(_DWORD *)((char *)&v67 + 3) = *(_DWORD *)(a1 + 3091);
    uint64_t v20 = *(_DWORD **)(a1 + 3096);
    if (v20) {
      *v20 += 2;
    }
    *(void *)uint64_t v68 = v20;
    long long v21 = *(_OWORD *)(a1 + 3120);
    *(_OWORD *)&v68[8] = *(_OWORD *)(a1 + 3104);
    *(_OWORD *)&v68[24] = v21;
    uint64_t v22 = *(void *)(*(void *)(a1 + 3872) + 88);
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v65, (WTF::ASCIILiteral *)(a1 + 3296));
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v66, (WTF::ASCIILiteral *)(a1 + 3312));
    uint64_t v23 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 168));
    uint64_t v24 = *(WTF::StringImpl **)v23;
    if (*(void *)v23) {
      *(_DWORD *)v24 += 2;
    }
    uint64_t v62 = v24;
    long long v25 = *(_OWORD *)(v23 + 24);
    long long v63 = *(_OWORD *)(v23 + 8);
    long long v64 = v25;
    uint64_t v26 = *(WTF::StringImpl **)(a1 + 3392);
    if (v26) {
      *(_DWORD *)v26 += 2;
    }
    uint64_t v59 = v26;
    long long v60 = *(_OWORD *)(a1 + 3400);
    long long v61 = *(_OWORD *)(a1 + 3416);
    char v27 = *(atomic_uint **)(a1 + 120);
    if (v27) {
      atomic_fetch_add(v27, 1u);
    }
    char v28 = !v17;
    uint64_t v58 = (WTF *)v27;
    int v29 = *(atomic_uint **)(a1 + 112);
    if (v29) {
      atomic_fetch_add(v29, 1u);
    }
    uint64_t v57 = (WTF *)v29;
    if (*(_DWORD *)(a1 + 3348))
    {
      uint64_t v30 = **(atomic_uint ***)(a1 + 3336);
      atomic_fetch_add(v30, 1u);
    }
    else
    {
      uint64_t v30 = 0;
    }
    v56 = (WTF *)v30;
    WebCore::ResourceRequestBase::httpReferrer((uint64_t *)&v55, (WebCore::ResourceRequestBase *)(a1 + 168));
    char v31 = v8[208];
    int v32 = (WebKit::NetworkLoadChecker *)WTF::fastMalloc((WTF *)0x490);
    WebKit::NetworkLoadChecker::NetworkLoadChecker((uint64_t)v32, (uint64_t)v18, a1, v19, (int *)&v67, v22, *(void *)(a1 + 80), v65, (uint64_t *)&v62, (uint64_t *)&v59, (uint64_t *)&v58, (uint64_t *)&v57, (uint64_t *)&v56, *(unsigned char *)(a1 + 3329), (uint64_t *)&v55, *(unsigned char *)(a1 + 3043), v53, *(_WORD *)(a1 + 3044), 0,
      v31,
      v28);
    std::unique_ptr<WebKit::NetworkLoadChecker>::reset[abi:sn180100]((WebKit::NetworkLoadChecker **)(a1 + 4320), v32);
    uint64_t v34 = v55;
    char v55 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, v33);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
    if (v56) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v56, v33);
    }
    if (v57) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v57, v33);
    }
    if (v58) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v58, v33);
    }
    CFTypeRef v35 = v59;
    uint64_t v59 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2) {
        WTF::StringImpl::destroy(v35, v33);
      }
      else {
        *(_DWORD *)v35 -= 2;
      }
    }
    CFTypeRef v36 = v62;
    uint64_t v62 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v33);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v66);
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v65);
    if (*(void *)v68)
    {
      if (**(_DWORD **)v68 == 2) {
        WTF::StringImpl::destroy(*(WTF::StringImpl **)v68, v37);
      }
      else {
        **(_DWORD **)v68 -= 2;
      }
    }
    if (atomic_fetch_add(v18 + 32, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v18 + 32);
      (*(void (**)(atomic_uint *))(*(void *)v18 + 8))(v18);
    }
    if (*(unsigned char *)(a1 + 3160))
    {
      uint64_t v50 = *(void *)(a1 + 4320);
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v67, (uint64_t *)(a1 + 3136));
      *(_DWORD *)&v68[8] = *(_DWORD *)(a1 + 3152);
      v68[12] = *(unsigned char *)(a1 + 3156);
      std::optional<WebCore::ContentSecurityPolicyResponseHeaders>::operator=[abi:sn180100]<WebCore::ContentSecurityPolicyResponseHeaders,void>(v50 + 264, (uint64_t)&v67);
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v67, v51);
    }
    uint64_t v38 = *(void *)(a1 + 4320);
    *(_WORD *)(v38 + 296) = *(_WORD *)(a1 + 3248);
    WTF::String::operator=((uint64_t *)(v38 + 304), (WTF::StringImpl **)(a1 + 3256));
    WTF::String::operator=((uint64_t *)(v38 + 312), (WTF::StringImpl **)(a1 + 3264));
    uint64_t v39 = *(void *)(a1 + 4320);
    *(_WORD *)(v39 + 320) = *(_WORD *)(a1 + 3272);
    WTF::String::operator=((uint64_t *)(v39 + 328), (WTF::StringImpl **)(a1 + 3280));
    WTF::String::operator=((uint64_t *)(v39 + 336), (WTF::StringImpl **)(a1 + 3288));
    uint64_t v40 = *(void *)(a1 + 4320);
    uint64_t v41 = *(WTF::StringImpl **)(a1 + 3808);
    if (v41) {
      *(_DWORD *)v41 += 2;
    }
    uint64_t v67 = v41;
    *(_OWORD *)uint64_t v68 = *(_OWORD *)(a1 + 3816);
    *(_OWORD *)&v68[16] = *(_OWORD *)(a1 + 3832);
    v42 = *(WTF::StringImpl **)(a1 + 3208);
    if (v42) {
      *(_DWORD *)v42 += 2;
    }
    uint64_t v62 = v42;
    long long v43 = *(_OWORD *)(a1 + 3232);
    long long v63 = *(_OWORD *)(a1 + 3216);
    long long v64 = v43;
    uint64_t v44 = *(void *)(a1 + 3848);
    uint64_t v45 = *(void *)(a1 + 3856);
    WTF::URL::operator=(v40 + 344, (uint64_t)&v67);
    WTF::URL::operator=(v40 + 384, (uint64_t)&v62);
    *(void *)(v40 + 424) = v44;
    *(unsigned char *)(v40 + 432) = v45;
    long long v47 = v62;
    uint64_t v62 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2) {
        WTF::StringImpl::destroy(v47, v46);
      }
      else {
        *(_DWORD *)v47 -= 2;
      }
    }
    long long v48 = v67;
    uint64_t v67 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2) {
        WTF::StringImpl::destroy(v48, v46);
      }
      else {
        *(_DWORD *)v48 -= 2;
      }
    }
    if (*v54)
    {
      long long v52 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x220);
      WebKit::NetworkResourceLoader::SynchronousLoadData::SynchronousLoadData((uint64_t)v52, v54);
      std::unique_ptr<WebKit::NetworkResourceLoader::SynchronousLoadData>::reset[abi:sn180100]((WebKit::NetworkResourceLoader::SynchronousLoadData **)(a1 + 4168), v52);
    }
  }
  return a1;
}

unsigned int *WebKit::NetworkResourceLoader::bufferingTimerFired(unsigned int *this)
{
  uint64_t v1 = *((void *)this + 519);
  if (v1 && *(void *)(v1 + 48))
  {
    uint64_t v2 = this;
    uint64_t v3 = (WebCore::SharedBufferBuilder *)(this + 1038);
    WebCore::SharedBufferBuilder::takeAsContiguous((uint64_t *)&v21, (WebCore::SharedBufferBuilder *)(this + 1038));
    uint64_t v4 = (WebCore::ContentFilter *)*((void *)v2 + 601);
    if (!v4 || WebCore::ContentFilter::continueAfterDataReceived(v4, v21))
    {
      uint64_t v17 = *((void *)v21 + 6);
      uint64_t v5 = v21;
      atomic_fetch_add((atomic_uint *volatile)v21, 1u);
      uint64_t v18 = (unsigned int *)v5;
      char v19 = 0;
      uint64_t v6 = *((void *)v2 + 2);
      uint64_t v7 = *((void *)v2 + 518);
      v20[0] = &v17;
      v20[1] = v7;
      uint64_t v8 = (*(uint64_t (**)(unsigned int *))(v6 + 56))(v2 + 4);
      long long v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)long long v9 = 2712;
      *((void *)v9 + 1) = v8;
      *((void *)v9 + 66) = (char *)v9 + 16;
      *((void *)v9 + 67) = 512;
      *((void *)v9 + 68) = 0;
      *((void *)v9 + 70) = 0;
      *((void *)v9 + 69) = 0;
      IPC::Encoder::encodeHeader(v9);
      uint64_t v22 = v9;
      IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<IPC::SharedBufferReference const&,unsigned long long>,0ul,1ul>(v9, (uint64_t)v20);
      (*(void (**)(unsigned int *, IPC::Encoder **, void))(*((void *)v2 + 2) + 32))(v2 + 4, &v22, 0);
      uint64_t v11 = v22;
      uint64_t v22 = 0;
      if (v11)
      {
        IPC::Encoder::~Encoder(v11, v10);
        WTF::fastFree(v15, v16);
      }
      uint64_t v12 = v19;
      char v19 = 0;
      if (v12) {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v12);
      }
      uint64_t v13 = v18;
      uint64_t v18 = 0;
      if (v13) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v13, v10);
      }
    }
    WebCore::SharedBufferBuilder::empty(v3);
    *((void *)v2 + 518) = 0;
    this = (unsigned int *)v21;
    long long v21 = 0;
    if (this) {
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(this, v14);
    }
  }
  return this;
}

uint64_t WebKit::NetworkResourceLoader::shouldCaptureExtraNetworkLoadMetrics(WebKit::NetworkResourceLoader *this)
{
  return *((unsigned __int8 *)this + 4344);
}

uint64_t *WebKit::NetworkLoadChecker::setParentCrossOriginEmbedderPolicy(WebKit::NetworkLoadChecker *this, WTF::StringImpl **a2)
{
  *((_WORD *)this + 148) = *(_WORD *)a2;
  WTF::String::operator=((uint64_t *)this + 38, a2 + 1);

  return WTF::String::operator=((uint64_t *)this + 39, a2 + 2);
}

uint64_t *WebKit::NetworkLoadChecker::setCrossOriginEmbedderPolicy(WebKit::NetworkLoadChecker *this, WTF::StringImpl **a2)
{
  *((_WORD *)this + 160) = *(_WORD *)a2;
  WTF::String::operator=((uint64_t *)this + 41, a2 + 1);

  return WTF::String::operator=((uint64_t *)this + 42, a2 + 2);
}

void WebKit::NetworkResourceLoader::~NetworkResourceLoader(WebKit::NetworkResourceLoader *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 542);
  if (v3)
  {
    *((void *)this + 542) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, 2);
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WebCore::ResourceResponseBase *)*((void *)this + 619);
  *((void *)this + 619) = 0;
  if (v4) {
    std::default_delete<WebCore::ResourceResponse>::operator()[abi:sn180100](v4, a2);
  }
  uint64_t v5 = (WTF *)*((void *)this + 616);
  if (v5) {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v5, (WTF::StringImpl *)*((unsigned int *)this + 1234));
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 614);
  *((void *)this + 614) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (const void *)*((void *)this + 612);
  *((void *)this + 612) = 0;
  if (v7) {
    CFRelease(v7);
  }
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::~__value_func[abi:sn180100]((void *)this + 608);
  long long v9 = (WTF::StringImpl *)*((void *)this + 603);
  *((void *)this + 603) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 602);
  *((void *)this + 602) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  std::unique_ptr<WebCore::ContentFilter>::reset[abi:sn180100]((uint64_t *)this + 601, 0);
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 4720, v11);
  uint64_t v13 = (WTF::StringImpl *)*((void *)this + 585);
  *((void *)this + 585) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  unint64_t v14 = (const void *)*((void *)this + 583);
  *((void *)this + 583) = 0;
  if (v14) {
    CFRelease(v14);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::NetworkResourceLoader *)((char *)this + 4424), v12);
  uint64_t v16 = (unsigned int *)*((void *)this + 550);
  *((void *)this + 550) = 0;
  if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, v15);
  }
  uint64_t v17 = (WebKit::ServiceWorkerFetchTask *)*((void *)this + 549);
  *((void *)this + 549) = 0;
  if (v17) {
    WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v17);
  }
  if (*((unsigned char *)this + 4384))
  {
    uint64_t v33 = (const void *)*((void *)this + 547);
    *((void *)this + 547) = 0;
    if (v33) {
      CFRelease(v33);
    }
  }
  uint64_t v18 = *((void *)this + 544);
  *((void *)this + 544) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
  }
  uint64_t v19 = *((void *)this + 542);
  *((void *)this + 542) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  std::unique_ptr<WebKit::NetworkLoadChecker>::reset[abi:sn180100]((WebKit::NetworkLoadChecker **)this + 540, 0);
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)this + 539, 0);
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)this + 537, 0);
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)this + 536, 0);
  long long v21 = (unsigned int *)*((void *)this + 535);
  *((void *)this + 535) = 0;
  if (v21) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v21, v20);
  }
  uint64_t v22 = (WebKit::NetworkCache::Cache *)*((void *)this + 534);
  *((void *)this + 534) = 0;
  if (v22) {
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v22, (WTF::StringImpl *)v20);
  }
  *((void *)this + 527) = &unk_1EE9BA5F0;
  uint64_t v23 = *((void *)this + 533);
  *((void *)this + 533) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  WebCore::TimerBase::~TimerBase((WebKit::NetworkResourceLoader *)((char *)this + 4216));
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 4176, v24);
  std::unique_ptr<WebKit::NetworkResourceLoader::SynchronousLoadData>::reset[abi:sn180100]((WebKit::NetworkResourceLoader::SynchronousLoadData **)this + 521, 0);
  uint64_t v26 = (unsigned int *)*((void *)this + 519);
  *((void *)this + 519) = 0;
  if (v26) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v26, v25);
  }
  char v27 = (const void *)*((void *)this + 516);
  *((void *)this + 516) = 0;
  if (v27) {
    CFRelease(v27);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::NetworkResourceLoader *)((char *)this + 3888), (WTF::StringImpl *)v25);
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)this + 485, 0);
  int v29 = (_DWORD *)*((void *)this + 484);
  *((void *)this + 484) = 0;
  if (v29)
  {
    if (v29[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v29 + 8))(v29);
    }
    else {
      --v29[2];
    }
  }
  WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoader *)((char *)this + 80), v28);
  uint64_t v31 = *((void *)this + 7);
  if (v31)
  {
    *(void *)(v31 + 8) = 0;
    int v32 = (unsigned int *)*((void *)this + 7);
    *((void *)this + 7) = 0;
    if (v32)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v32, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v32);
        WTF::fastFree((WTF *)v32, v30);
      }
    }
  }
  else
  {
    *((void *)this + 7) = 0;
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::NetworkResourceLoader::~NetworkResourceLoader(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::NetworkResourceLoader::~NetworkResourceLoader(WebKit::NetworkResourceLoader *this, WTF::StringImpl *a2)
{
}

{
  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 24), a2);
}

{
  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 32), a2);
}

{
  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 48), a2);
}

{
  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 64), a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 16), a2);

  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 24), a2);

  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 32), a2);

  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 48), a2);

  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 64), a2);

  WTF::fastFree(v2, v3);
}

BOOL WebKit::NetworkResourceLoader::canUseCache(WebKit::NetworkResourceLoader *this, const WebCore::ResourceRequest *a2)
{
  return *((void *)this + 534)
      && (*(unsigned char *)(WebCore::ResourceRequestBase::url(a2) + 8) & 2) != 0
      && WebCore::ResourceRequestBase::cachePolicy((WebKit::NetworkResourceLoader *)((char *)this + 168)) != 4;
}

BOOL WebKit::NetworkResourceLoader::isSynchronous(WebKit::NetworkResourceLoader *this)
{
  return *((void *)this + 521) != 0;
}

void WebKit::NetworkResourceLoader::start(String *this)
{
}

void WebKit::NetworkResourceLoader::startRequest(WebKit::NetworkResourceLoader *this, const String *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 11);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x198B9E1B0);
    }
    uint64_t v6 = *((void *)this + 10);
    uint64_t v7 = *((void *)this + 12);
    uint64_t v8 = *((void *)this + 381);
    BOOL v9 = *((unsigned __int8 *)this + 315) == 1;
    int v10 = *((unsigned __int8 *)this + 3088);
    BOOL v11 = *((void *)this + 521) != 0;
    BOOL v12 = *((void *)this + 540) != 0;
    *(_DWORD *)buf = 134220032;
    *(void *)&uint8_t buf[4] = this;
    __int16 v25 = 2048;
    *(void *)uint64_t v26 = v6;
    *(_WORD *)&v26[8] = 2048;
    uint64_t v27 = v5;
    __int16 v28 = 2048;
    uint64_t v29 = v7;
    __int16 v30 = 2048;
    uint64_t v31 = v8;
    __int16 v32 = 1024;
    BOOL v33 = v9;
    __int16 v34 = 1024;
    int v35 = v10;
    __int16 v36 = 1024;
    BOOL v37 = v11;
    __int16 v38 = 1024;
    BOOL v39 = v12;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::startRequest: hasNetworkLoadChecker=%d", buf, 0x4Cu);
  }
  uint64_t v13 = *((void *)this + 11);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x198B9E1D0);
  }
  int v14 = *((unsigned char *)this + 315) == 1 && *((_DWORD *)this + 837) == 0;
  WebKit::NetworkConnectionToWebProcess::startTrackingResourceLoad(*((void **)this + 484), v13, *((void *)this + 381), v14, (uint64_t)buf);
  uint64_t v15 = (void *)((char *)this + 4360);
  if (*((unsigned __int8 *)this + 4384) == v27)
  {
    if (!*((unsigned char *)this + 4384)) {
      goto LABEL_9;
    }
    WebKit::NetworkActivityTracker::operator=((uint64_t)v15, (uint64_t *)buf);
  }
  else if (*((unsigned char *)this + 4384))
  {
    uint64_t v22 = (const void *)*((void *)this + 547);
    *((void *)this + 547) = 0;
    if (v22) {
      CFRelease(v22);
    }
    *((unsigned char *)this + 4384) = 0;
  }
  else
  {
    *uint64_t v15 = *(void *)buf;
    *((unsigned char *)this + 4368) = buf[8];
    uint64_t v20 = *(const void **)&v26[2];
    *((void *)this + 547) = *(void *)&v26[2];
    if (v20) {
      CFRetain(v20);
    }
    *((unsigned char *)this + 4384) = 1;
  }
  if ((_BYTE)v27)
  {
    long long v21 = *(const void **)&v26[2];
    *(void *)&v26[2] = 0;
    if (v21) {
      CFRelease(v21);
    }
  }
LABEL_9:
  *((unsigned char *)this + 4192) = 1;
  uint64_t v16 = *((void *)this + 540);
  if (v16)
  {
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, a2);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 14, (uint64_t)this + 48);
    uint64_t v17 = (atomic_uint *)*((void *)this + 7);
    if (v17) {
      atomic_fetch_add(v17, 1u);
    }
    uint64_t v18 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v18 = &unk_1EE9C61B0;
    *((void *)v18 + 1) = this;
    *((void *)v18 + 2) = v17;
    uint64_t v23 = v18;
    WebKit::NetworkLoadChecker::check(v16, (WebCore::ResourceRequestBase *)buf, (uint64_t)this + 24, &v23);
    if (v23) {
      (*(void (**)(WTF *))(*(void *)v23 + 8))(v23);
    }
    CFTypeRef v19 = cf;
    CFTypeRef cf = 0;
    if (v19) {
      CFRelease(v19);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
  }
  else if (WebKit::NetworkResourceLoader::canUseCache(this, (const WebCore::ResourceRequest *)a2))
  {
    WebKit::NetworkResourceLoader::retrieveCacheEntry(this, (WebKit::NetworkResourceLoader *)((char *)this + 168));
  }
  else
  {
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, a2);
    WebKit::NetworkResourceLoader::startNetworkLoad(this, (uint64_t)buf, 1);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf);
  }
}

_DWORD *WebKit::NetworkResourceLoader::retrieveCacheEntry(WebKit::NetworkResourceLoader *this, const WebCore::ResourceRequest *a2)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 11);
    if (!v5)
    {
      __break(0xC471u);
      goto LABEL_47;
    }
    uint64_t v6 = *((void *)this + 10);
    uint64_t v7 = *((void *)this + 12);
    uint64_t v8 = *((void *)this + 381);
    BOOL v9 = *((void *)this + 521) != 0;
    int v10 = *((unsigned __int8 *)this + 3088);
    BOOL v11 = *((unsigned __int8 *)this + 315) == 1;
    BOOL v12 = *((unsigned char *)this + 315) == 1 && *((_DWORD *)this + 837) == 0;
    *(_DWORD *)buf = 134220032;
    *(void *)&uint8_t buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v6;
    __int16 v90 = 2048;
    uint64_t v91 = v5;
    __int16 v92 = 2048;
    uint64_t v93 = v7;
    __int16 v94 = 2048;
    uint64_t v95 = v8;
    __int16 v96 = 1024;
    BOOL v97 = v11;
    __int16 v98 = 1024;
    int v99 = v10;
    __int16 v100 = 1024;
    BOOL v101 = v9;
    __int16 v102 = 1024;
    int v103 = v12;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntry: isMainFrameLoad=%d", buf, 0x4Cu);
  }
  ++*((_DWORD *)this + 2);
  if (*((unsigned char *)this + 315) == 1 && !*((_DWORD *)this + 837))
  {
    uint64_t v44 = *((void *)this + 484);
    uint64_t v45 = *(void *)(v44 + 80);
    *(void *)buf = *(void *)(v44 + 88);
    uint64_t v46 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v45 + 224), buf);
    if (v46)
    {
      long long v47 = (uint64_t **)(v46 + 520);
      long long v48 = (const WTF::StringImpl **)WebCore::ResourceRequestBase::url(a2);
      WebKit::PrefetchCache::take(v47, v48, &v88);
      char v49 = v88;
      if (v88)
      {
        uint64_t v50 = off_1EB358988;
        if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
        {
LABEL_27:
          if (WebCore::ResourceRequestBase::isNull((WebCore::ResourceRequest *)((char *)v49 + 272)))
          {
            v56 = v88;
            uint64_t v57 = (atomic_uint *)*((void *)v88 + 33);
            *((void *)v88 + 33) = 0;
            uint64_t v58 = (WebKit::NetworkCache::Cache *)*((void *)this + 534);
            char v59 = *((unsigned char *)v56 + 256);
            atomic_fetch_add(v57, 1u);
            *(void *)buf = v57;
            WebKit::NetworkCache::Cache::makeEntry(v58, a2, v56, v59, (uint64_t *)buf, (uint64_t *)&v87);
            long long v61 = *(unsigned int **)buf;
            *(void *)buf = 0;
            if (v61) {
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v61, v60);
            }
            WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const String *)a2);
            WebKit::NetworkResourceLoader::retrieveCacheEntryInternal((uint64_t)this, (const String **)&v87, (const WebCore::ResourceRequest *)buf);
            WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf);
            uint64_t v62 = (atomic_uchar *volatile **)*((void *)this + 534);
            char v63 = *((unsigned char *)v88 + 256);
            *(void *)buf = v57;
            uint64_t v84 = 0;
            WebKit::NetworkCache::Cache::store(a2, v88, v62, v63, (uint64_t *)buf, &v84, (uint64_t *)&v85);
            uint64_t v65 = v85;
            v85 = 0;
            if (v65)
            {
              WebKit::NetworkCache::Entry::~Entry(v65, v64);
              WTF::fastFree(v76, v77);
            }
            uint64_t v66 = v84;
            uint64_t v84 = 0;
            if (v66) {
              (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
            }
            uint64_t v67 = *(unsigned int **)buf;
            *(void *)buf = 0;
            if (v67) {
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v67, v64);
            }
          }
          else
          {
            WebKit::NetworkCache::Cache::makeRedirectEntry(*((WebKit::NetworkCache::Cache **)this + 534), a2, v88, (const String *)v88 + 34, (uint64_t *)&v87);
            WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const String *)a2);
            WebKit::NetworkResourceLoader::retrieveCacheEntryInternal((uint64_t)this, (const String **)&v87, (const WebCore::ResourceRequest *)buf);
            WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf);
            unint64_t v70 = WebKit::NetworkResourceLoader::validateCacheEntryForMaxAgeCapValidation(this, a2, v88, v69);
            WebKit::NetworkCache::Cache::storeRedirect(a2, v88, *((WebKit::NetworkCache::Cache **)this + 534), (const String *)v88 + 34, v70, v71, (uint64_t *)&v86);
            if (v86)
            {
              WebKit::NetworkCache::Entry::~Entry(v86, v64);
              WTF::fastFree(v72, v73);
            }
          }
          uint64_t v68 = v87;
          v87 = 0;
          if (v68)
          {
            WebKit::NetworkCache::Entry::~Entry(v68, v64);
            WTF::fastFree(v74, v75);
          }
          uint64_t v41 = v88;
          v88 = 0;
          if (v41) {
            std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)&v88, v41);
          }
          return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)this + 2, v41);
        }
        uint64_t v51 = *((void *)this + 11);
        if (v51)
        {
          uint64_t v52 = *((void *)this + 10);
          uint64_t v53 = *((void *)this + 12);
          uint64_t v54 = *((void *)this + 381);
          BOOL v79 = *((unsigned __int8 *)this + 315) == 1;
          int v80 = *((unsigned __int8 *)this + 3088);
          BOOL v78 = *((void *)this + 521) != 0;
          int isNull = WebCore::ResourceRequestBase::isNull((WebCore::ResourceRequest *)((char *)v49 + 272));
          *(_DWORD *)buf = 134220032;
          *(void *)&uint8_t buf[4] = this;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v52;
          __int16 v90 = 2048;
          uint64_t v91 = v51;
          __int16 v92 = 2048;
          uint64_t v93 = v53;
          __int16 v94 = 2048;
          uint64_t v95 = v54;
          __int16 v96 = 1024;
          BOOL v97 = v79;
          __int16 v98 = 1024;
          int v99 = v80;
          __int16 v100 = 1024;
          BOOL v101 = v78;
          __int16 v102 = 1024;
          int v103 = isNull ^ 1;
          _os_log_impl(&dword_1985F2000, v50, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntry: retrieved an entry from the prefetch cache (isRedirect=%d)", buf, 0x4Cu);
          char v49 = v88;
          goto LABEL_27;
        }
        __break(0xC471u);
LABEL_47:
        JUMPOUT(0x198B9E8B8);
      }
    }
  }
  uint64_t v13 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *((void *)this + 11);
    if (!v14)
    {
      __break(0xC471u);
      JUMPOUT(0x198B9E8D8);
    }
    uint64_t v15 = *((void *)this + 10);
    uint64_t v16 = *((void *)this + 12);
    uint64_t v17 = *((void *)this + 381);
    BOOL v18 = *((unsigned __int8 *)this + 315) == 1;
    int v19 = *((unsigned __int8 *)this + 3088);
    BOOL v20 = *((void *)this + 521) != 0;
    *(_DWORD *)buf = 134219776;
    *(void *)&uint8_t buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v15;
    __int16 v90 = 2048;
    uint64_t v91 = v14;
    __int16 v92 = 2048;
    uint64_t v93 = v16;
    __int16 v94 = 2048;
    uint64_t v95 = v17;
    __int16 v96 = 1024;
    BOOL v97 = v18;
    __int16 v98 = 1024;
    int v99 = v19;
    __int16 v100 = 1024;
    BOOL v101 = v20;
    _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntry: Checking the HTTP disk cache", buf, 0x46u);
  }
  uint64_t v21 = *((void *)this + 11);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x198B9E8F8);
  }
  uint64_t v22 = (WebKit::NetworkCache::Cache *)*((void *)this + 534);
  v81[0] = *((void *)this + 10);
  v81[1] = v21;
  long long v82 = *((_OWORD *)this + 6);
  char v83 = 1;
  __int16 v23 = *((_WORD *)this + 1520);
  int v24 = *((unsigned __int8 *)this + 3043);
  __int16 v25 = *((_WORD *)this + 1522);
  *(void *)buf = this;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 14, (uint64_t)this + 48);
  uint64_t v26 = (atomic_uint *)*((void *)this + 7);
  if (v26) {
    atomic_fetch_add(v26, 1u);
  }
  char v27 = v24 != 0;
  *(void *)&buf[8] = v26;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&buf[16], (const String *)a2);
  uint64_t v28 = WTF::fastMalloc((WTF *)0xE0);
  *(void *)uint64_t v28 = &unk_1EE9C6200;
  *(void *)(v28 + 8) = *(void *)buf;
  uint64_t v29 = *(void *)&buf[8];
  *(void *)&buf[8] = 0;
  *(void *)(v28 + 16) = v29;
  WTF::URL::URL(v28 + 24, (uint64_t *)&buf[16]);
  WTF::URL::URL(v28 + 64, (uint64_t *)((char *)&v97 + 2));
  *(void *)(v28 + 104) = v104;
  *(void *)(v28 + 112) = v105;
  uint64_t v30 = *((void *)&v105 + 1);
  long long v105 = 0u;
  *(void *)(v28 + 120) = v30;
  uint64_t v31 = v106;
  uint64_t v106 = 0;
  *(void *)(v28 + 128) = v31;
  uint64_t v32 = v107;
  uint64_t v107 = 0;
  *(void *)(v28 + 136) = v32;
  uint64_t v33 = v108;
  uint64_t v108 = 0;
  *(void *)(v28 + 144) = v33;
  uint64_t v34 = v109;
  uint64_t v109 = 0;
  *(void *)(v28 + 152) = v34;
  uint64_t v35 = v110;
  uint64_t v110 = 0;
  *(void *)(v28 + 160) = v35;
  LODWORD(v34) = v111;
  *(unsigned char *)(v28 + 172) = v112;
  *(_DWORD *)(v28 + 168) = v34;
  *(void *)(v28 + 176) = v113;
  uint64_t v36 = *((void *)&v113 + 1);
  long long v113 = 0u;
  *(void *)(v28 + 184) = v36;
  *(void *)(v28 + 192) = v114;
  uint64_t v37 = v115;
  *(unsigned char *)(v28 + 208) = v116;
  *(void *)(v28 + 200) = v37;
  CFTypeRef v38 = cf;
  uint64_t v114 = 0;
  CFTypeRef cf = 0;
  *(void *)(v28 + 216) = v38;
  v88 = (WebCore::ResourceRequest *)v28;
  WebKit::NetworkCache::Cache::retrieve(v22, a2, (uint64_t)v81, v23, v27, v25, (WTF::MonotonicTime *)&v88);
  BOOL v39 = v88;
  v88 = 0;
  if (v39) {
    (*(void (**)(WebCore::ResourceRequest *))(*(void *)v39 + 8))(v39);
  }
  CFTypeRef v40 = cf;
  CFTypeRef cf = 0;
  if (v40) {
    CFRelease(v40);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[16]);
  v42 = *(unsigned int **)&buf[8];
  *(void *)&buf[8] = 0;
  if (v42 && atomic_fetch_add((atomic_uint *volatile)v42, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v42);
    WTF::fastFree((WTF *)v42, v41);
  }
  return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)this + 2, v41);
}

WTF *WebKit::NetworkResourceLoader::startNetworkLoad(WebKit::NetworkResourceLoader *this, uint64_t a2, int a3)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    WebKit::NetworkResourceLoader::consumeSandboxExtensions(this);
    if (*((void *)this + 521) || *((double *)this + 385) > 0.0) {
      WebCore::SharedBufferBuilder::empty((WebKit::NetworkResourceLoader *)((char *)this + 4152));
    }
    if (WebKit::NetworkResourceLoader::canUseCache(this, (const WebCore::ResourceRequest *)a2)) {
      WebCore::SharedBufferBuilder::empty((WebKit::NetworkResourceLoader *)((char *)this + 4280));
    }
  }
  long long v6 = *((_OWORD *)this + 6);
  v116[0] = *((_OWORD *)this + 5);
  v116[1] = v6;
  uint64_t v7 = (atomic_uint *)*((void *)this + 14);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  v117 = (WTF *)v7;
  uint64_t v8 = (atomic_uint *)*((void *)this + 15);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  uint64_t v118 = (WTF *)v8;
  long long v9 = *((_OWORD *)this + 9);
  long long v119 = *((_OWORD *)this + 8);
  *(_OWORD *)v120 = v9;
  *(void *)&v120[13] = *(void *)((char *)this + 157);
  WebCore::ResourceRequest::ResourceRequest(v121, (const String *)this + 21);
  *(_DWORD *)((char *)v128 + 3) = *(_DWORD *)((char *)this + 371);
  v128[0] = *((_DWORD *)this + 92);
  v129[0] = 0;
  char v130 = 0;
  if (*((unsigned char *)this + 2960))
  {
    WebKit::NavigationActionData::NavigationActionData((WebKit::NavigationActionData *)v129, (WebKit::NetworkResourceLoader *)((char *)this + 384));
    char v130 = 1;
  }
  char v131 = *((unsigned char *)this + 2976);
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v132, (uint64_t)this + 2984);
  char v134 = *((unsigned char *)this + 3000);
  LOBYTE(v135) = 0;
  char v138 = 0;
  if (*((unsigned char *)this + 3032))
  {
    uint64_t v135 = *((void *)this + 376);
    char v136 = *((unsigned char *)this + 3016);
    v81 = (const void *)*((void *)this + 378);
    CFTypeRef v137 = v81;
    if (v81) {
      CFRetain(v81);
    }
    char v138 = 1;
    int v139 = *((_DWORD *)this + 760);
    __int16 v140 = *((_WORD *)this + 1522);
    if (*((unsigned char *)this + 4384))
    {
      WebKit::NetworkActivityTracker::operator=((uint64_t)&v135, (uint64_t *)this + 545);
    }
    else
    {
      CFTypeRef v90 = v137;
      CFTypeRef v137 = 0;
      if (v90) {
        CFRelease(v90);
      }
      char v138 = 0;
    }
  }
  else
  {
    int v139 = *((_DWORD *)this + 760);
    __int16 v140 = *((_WORD *)this + 1522);
    if (*((unsigned char *)this + 4384))
    {
      uint64_t v135 = *((void *)this + 545);
      char v136 = *((unsigned char *)this + 4368);
      char v59 = (const void *)*((void *)this + 547);
      CFTypeRef v137 = v59;
      if (v59) {
        CFRetain(v59);
      }
      char v138 = 1;
    }
  }
  if (BYTE2(v128[0]) == 1)
  {
    uint64_t v10 = *((void *)this + 540);
    if (v10) {
      BYTE2(v128[0]) = *(unsigned char *)(v10 + 64);
    }
  }
  uint64_t v11 = *((void *)this + 484);
  uint64_t v12 = *(void *)(v11 + 80);
  *(void *)buf = *(void *)(v11 + 88);
  uint64_t v13 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v12 + 224), buf);
  if (v13)
  {
    uint64_t v14 = (WebKit::NetworkSession *)v13;
    if (*(char *)(a2 + 148) < 0)
    {
      double v70 = *(double *)(v13 + 1040);
      if (v70 == 0.0) {
        double v70 = 3.0;
      }
      WebCore::ResourceRequestBase::setTimeoutInterval((WebCore::ResourceRequestBase *)a2, v70);
    }
    uint64_t v15 = off_1EB358988;
    if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
LABEL_23:
      WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
      if (WTF::URL::protocolIs())
      {
        WebCore::ResourceRequestBase::url((WebKit::NetworkResourceLoader *)((char *)this + 168));
        char v55 = (char)v117;
        buf[0] = 0;
        if (v117)
        {
          LODWORD(v103) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, (uint64_t)v117 + 8);
          char v55 = 1;
        }
        LOBYTE(v104) = v55;
        WebCore::BlobRegistryImpl::filesInBlob();
        if (HIDWORD(v133)) {
          WTF::VectorDestructor<true,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>::destruct(v132, (_DWORD **)v132 + HIDWORD(v133));
        }
        uint64_t v57 = v132;
        if (v132)
        {
          v132 = 0;
          LODWORD(v133) = 0;
          WTF::fastFree(v57, v56);
        }
        v132 = v94;
        uint64_t v58 = v95;
        __int16 v94 = 0;
        uint64_t v95 = 0;
        v133 = v58;
        WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v94, v56);
        if ((_BYTE)v104 && v103 != -1) {
          ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9C6158[v103])(&v98, buf);
        }
      }
      if (!*((unsigned char *)this + 3352) && !*((unsigned char *)this + 3864)) {
        goto LABEL_26;
      }
      LOBYTE(v98) = 0;
      char v99 = 0;
      WebCore::ResourceRequestBase::httpBody((uint64_t *)buf, (WebCore::ResourceRequestBase *)a2);
      if (*(void *)buf)
      {
        unint64_t v71 = WebCore::FormData::lengthInBytes(*(WebCore::FormData **)buf);
        uint64_t v72 = *(WTF::StringImpl **)buf;
        if (v71 > 0x100000) {
          goto LABEL_105;
        }
        *(void *)buf = 0;
        if (v99)
        {
          v73 = v98;
          __int16 v98 = v72;
          if (v73)
          {
            WTF::RefCounted<WebCore::FormData>::deref(v73);
            uint64_t v72 = *(WTF::StringImpl **)buf;
LABEL_105:
            *(void *)buf = 0;
            if (v72) {
              WTF::RefCounted<WebCore::FormData>::deref(v72);
            }
          }
        }
        else
        {
          __int16 v98 = v72;
          char v99 = 1;
        }
      }
      uint64_t v74 = *(void *)(*(void *)(*((void *)this + 484) + 80) + 40);
      WebKit::NetworkResourceLoader::resourceLoadInfo((WebKit::NetworkResourceLoader *)buf, (uint64_t)this);
      __int16 v94 = (WebKit::NetworkResourceLoader *)((char *)this + 80);
      uint64_t v95 = buf;
      uint64_t v96 = a2;
      BOOL v97 = &v98;
      IPC::Connection::send<Messages::NetworkProcessProxy::ResourceLoadDidSendRequest>(v74, (uint64_t)&v94);
      WebKit::ResourceLoadInfo::~ResourceLoadInfo((WebKit::ResourceLoadInfo *)buf, v75);
      if (v99)
      {
        v76 = v98;
        __int16 v98 = 0;
        if (v76) {
          WTF::RefCounted<WebCore::FormData>::deref(v76);
        }
      }
LABEL_26:
      if (*((unsigned char *)v14 + 726))
      {
        uint64_t v77 = *((void *)this + 484);
        uint64_t v78 = *(void *)(*(void *)(v77 + 80) + 40);
        __int16 v94 = *(WTF::StringImpl **)(v77 + 88);
        char v79 = *(unsigned char *)(a2 + 148);
        uint64_t v80 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
        *(void *)buf = &v94;
        buf[8] = (v79 & 0x40) != 0;
        *(void *)&v102[2] = v80;
        IPC::Connection::send<Messages::NetworkProcessProxy::DidAllowPrivateTokenUsageByThirdPartyForTesting>(v78, (uint64_t)buf);
      }
      WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v121, a2);
      uint64_t v26 = *(WTF::StringImpl **)(a2 + 152);
      *(void *)(a2 + 152) = 0;
      char v27 = v122;
      v122 = v26;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v25);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
      uint64_t v28 = *(WTF::StringImpl **)(a2 + 160);
      *(void *)(a2 + 160) = 0;
      uint64_t v29 = v123;
      v123 = v28;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, v25);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
      uint64_t v30 = *(WTF::RefCountedBase **)(a2 + 168);
      *(void *)(a2 + 168) = 0;
      uint64_t v31 = v124;
      v124 = v30;
      if (v31) {
        WTF::RefCounted<WebCore::FormData>::deref(v31);
      }
      uint64_t v125 = *(void *)(a2 + 176);
      char v126 = *(unsigned char *)(a2 + 184);
      uint64_t v32 = *(const void **)(a2 + 192);
      *(void *)(a2 + 192) = 0;
      CFTypeRef v33 = cf;
      CFTypeRef cf = v32;
      if (v33) {
        CFRelease(v33);
      }
      LOWORD(v139) = *((_WORD *)this + 1520);
      uint64_t v34 = (WebKit::NetworkLoad *)WTF::fastMalloc((WTF *)0xCA0);
      WebKit::NetworkLoad::NetworkLoad((uint64_t)v34, (uint64_t)this, (uint64_t)v116, v14);
      uint64_t v35 = (WebKit::NetworkLoad **)((char *)this + 3880);
      std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)this + 485, v34);
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 14, (uint64_t)this + 48);
      uint64_t v36 = *((void *)this + 7);
      if (v36) {
        atomic_fetch_add((atomic_uint *volatile)v36, 1u);
      }
      uint64_t v37 = (WebKit::NetworkLoad *)*((void *)this + 485);
      if (*((void *)this + 521)) {
        WebKit::NetworkLoad::start(v37);
      }
      else {
        WebKit::NetworkLoad::startWithScheduling((unsigned int *)v37);
      }
      if (v36)
      {
        if (*(void *)(v36 + 8))
        {
          BOOL v39 = *v35;
          if (*v35)
          {
            CFTypeRef v40 = off_1EB358988;
            if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v41 = *((void *)this + 11);
              if (!v41)
              {
                __break(0xC471u);
                JUMPOUT(0x198B9F0D8);
              }
              log = v40;
              uint64_t v42 = *((void *)this + 10);
              uint64_t v43 = *((void *)this + 12);
              uint64_t v44 = *((void *)this + 381);
              BOOL v45 = *((unsigned __int8 *)this + 315) == 1;
              int v46 = *((unsigned __int8 *)this + 3088);
              BOOL v47 = *((void *)this + 521) != 0;
              WebKit::NetworkLoad::description(v39, &v98);
              WTF::String::utf8();
              if (v94) {
                long long v48 = (char *)v94 + 16;
              }
              else {
                long long v48 = 0;
              }
              *(_DWORD *)buf = 134220034;
              *(void *)&uint8_t buf[4] = this;
              __int16 v101 = 2048;
              *(void *)__int16 v102 = v42;
              *(_WORD *)&v102[8] = 2048;
              uint64_t v103 = v41;
              __int16 v104 = 2048;
              uint64_t v105 = v43;
              __int16 v106 = 2048;
              uint64_t v107 = v44;
              __int16 v108 = 1024;
              BOOL v109 = v45;
              __int16 v110 = 1024;
              int v111 = v46;
              __int16 v112 = 1024;
              BOOL v113 = v47;
              __int16 v114 = 2082;
              v115[0] = v48;
              _os_log_impl(&dword_1985F2000, log, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::startNetworkLoad: Going to the network (description=%{public}s)", buf, 0x50u);
              char v49 = v94;
              __int16 v94 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 1) {
                  WTF::fastFree(v49, v38);
                }
                else {
                  --*(_DWORD *)v49;
                }
              }
              uint64_t v50 = v98;
              __int16 v98 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2) {
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v38);
                }
                else {
                  *(_DWORD *)v50 -= 2;
                }
              }
            }
          }
        }
        if (atomic_fetch_add((atomic_uint *volatile)v36, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v36);
          WTF::fastFree((WTF *)v36, v38);
        }
      }
      goto LABEL_58;
    }
    uint64_t v16 = *((void *)this + 11);
    if (v16)
    {
      uint64_t v17 = *((void *)this + 10);
      BOOL v18 = v14;
      uint64_t v19 = *((void *)this + 12);
      int v91 = a3;
      uint64_t v20 = *((void *)this + 381);
      BOOL v21 = *((unsigned __int8 *)this + 315) == 1;
      loga = v15;
      int v22 = *((unsigned __int8 *)this + 3088);
      BOOL v23 = *((void *)this + 521) != 0;
      WebCore::ResourceRequestBase::timeoutInterval((WebCore::ResourceRequestBase *)a2);
      *(_DWORD *)buf = 134220288;
      *(void *)&uint8_t buf[4] = this;
      __int16 v101 = 2048;
      *(void *)__int16 v102 = v17;
      *(_WORD *)&v102[8] = 2048;
      uint64_t v103 = v16;
      __int16 v104 = 2048;
      uint64_t v105 = v19;
      uint64_t v14 = v18;
      __int16 v106 = 2048;
      uint64_t v107 = v20;
      __int16 v108 = 1024;
      BOOL v109 = v21;
      __int16 v110 = 1024;
      int v111 = v22;
      __int16 v112 = 1024;
      BOOL v113 = v23;
      __int16 v114 = 1024;
      LODWORD(v115[0]) = v91;
      WORD2(v115[0]) = 2048;
      *(void *)((char *)v115 + 6) = v24;
      _os_log_impl(&dword_1985F2000, loga, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::startNetworkLoad: (isFirstLoad=%d, timeout=%f)", buf, 0x56u);
      goto LABEL_23;
    }
LABEL_122:
    __break(0xC471u);
    JUMPOUT(0x198B9F0A8);
  }
  WTFLogAlways();
  long long v61 = off_1EB358988;
  BOOL v62 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR);
  if (v62)
  {
    uint64_t v82 = *((void *)this + 11);
    if (!v82) {
      goto LABEL_122;
    }
    uint64_t v83 = *((void *)this + 10);
    uint64_t v84 = *((void *)this + 12);
    uint64_t v85 = *((void *)this + 381);
    BOOL v86 = *((unsigned __int8 *)this + 315) == 1;
    int v87 = *((unsigned __int8 *)this + 3088);
    BOOL v88 = *((void *)this + 521) != 0;
    uint64_t v89 = *(void *)(*((void *)this + 484) + 88);
    *(_DWORD *)buf = 134220032;
    *(void *)&uint8_t buf[4] = this;
    __int16 v101 = 2048;
    *(void *)__int16 v102 = v83;
    *(_WORD *)&v102[8] = 2048;
    uint64_t v103 = v82;
    __int16 v104 = 2048;
    uint64_t v105 = v84;
    __int16 v106 = 2048;
    uint64_t v107 = v85;
    __int16 v108 = 1024;
    BOOL v109 = v86;
    __int16 v110 = 1024;
    int v111 = v87;
    __int16 v112 = 1024;
    BOOL v113 = v88;
    __int16 v114 = 2048;
    v115[0] = v89;
    _os_log_error_impl(&dword_1985F2000, v61, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::startNetworkLoad: Attempted to create a NetworkLoad for a session that does not exist (sessionID=%llu)", buf, 0x50u);
  }
  char v63 = *(WTF **)(*((void *)this + 484) + 80);
  uint64_t v64 = *((void *)this + 10);
  uint64_t v65 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::internalErrorKey((uint64_t *)buf, (WebCore::DiagnosticLoggingKeys *)v62);
  WebCore::DiagnosticLoggingKeys::invalidSessionIDKey((uint64_t *)&v94, v65);
  WebKit::NetworkProcess::logDiagnosticMessage(v63, v64, (uint64_t)buf, (uint64_t)&v94, 0);
  uint64_t v67 = v94;
  __int16 v94 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2) {
      WTF::StringImpl::destroy(v67, v66);
    }
    else {
      *(_DWORD *)v67 -= 2;
    }
  }
  uint64_t v68 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2) {
      WTF::StringImpl::destroy(v68, v66);
    }
    else {
      *(_DWORD *)v68 -= 2;
    }
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
  WebCore::createInternalError();
  WebKit::NetworkResourceLoader::didFailLoading(this, (const WebCore::ResourceError *)buf);
  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v69);
LABEL_58:
  if (v138)
  {
    CFTypeRef v60 = v137;
    CFTypeRef v137 = 0;
    if (v60) {
      CFRelease(v60);
    }
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v132, v38);
  if (v130) {
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v129);
  }
  CFTypeRef v51 = cf;
  CFTypeRef cf = 0;
  if (v51) {
    CFRelease(v51);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v121);
  uint64_t v53 = v118;
  uint64_t v118 = 0;
  if (v53) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v53, v52);
  }
  uint64_t result = v117;
  v117 = 0;
  if (result) {
    return (WTF *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v52);
  }
  return result;
}

void WebKit::NetworkResourceLoader::retrieveCacheEntryInternal(uint64_t a1, const String **a2, const WebCore::ResourceRequest *a3)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  long long v6 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 88);
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198B9FA10);
    }
    uint64_t v8 = *(void *)(a1 + 80);
    uint64_t v9 = *(void *)(a1 + 96);
    uint64_t v10 = *(void *)(a1 + 3048);
    BOOL v11 = *(unsigned __int8 *)(a1 + 315) == 1;
    int v12 = *(unsigned __int8 *)(a1 + 3088);
    BOOL v13 = *(void *)(a1 + 4168) != 0;
    *(_DWORD *)buf = 134219776;
    uint64_t v77 = a1;
    __int16 v78 = 2048;
    uint64_t v79 = v8;
    __int16 v80 = 2048;
    uint64_t v81 = v7;
    __int16 v82 = 2048;
    uint64_t v83 = v9;
    __int16 v84 = 2048;
    uint64_t v85 = v10;
    __int16 v86 = 1024;
    BOOL v87 = v11;
    __int16 v88 = 1024;
    int v89 = v12;
    __int16 v90 = 1024;
    BOOL v91 = v13;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntryInternal:", buf, 0x46u);
  }
  if (WebKit::NetworkCache::Entry::hasReachedPrevalentResourceAgeCap((WebKit::NetworkCache::Entry *)*a2))
  {
    v56 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v57 = *(void *)(a1 + 88);
      if (!v57)
      {
        __break(0xC471u);
        JUMPOUT(0x198B9FC60);
      }
      uint64_t v58 = *(void *)(a1 + 80);
      uint64_t v59 = *(void *)(a1 + 96);
      uint64_t v60 = *(void *)(a1 + 3048);
      BOOL v61 = *(unsigned __int8 *)(a1 + 315) == 1;
      int v62 = *(unsigned __int8 *)(a1 + 3088);
      BOOL v63 = *(void *)(a1 + 4168) != 0;
      *(_DWORD *)buf = 134219776;
      uint64_t v77 = a1;
      __int16 v78 = 2048;
      uint64_t v79 = v58;
      __int16 v80 = 2048;
      uint64_t v81 = v57;
      __int16 v82 = 2048;
      uint64_t v83 = v59;
      __int16 v84 = 2048;
      uint64_t v85 = v60;
      __int16 v86 = 1024;
      BOOL v87 = v61;
      __int16 v88 = 1024;
      int v89 = v62;
      __int16 v90 = 1024;
      BOOL v91 = v63;
      _os_log_impl(&dword_1985F2000, v56, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntryInternal: Revalidating cached entry because it reached the prevalent resource age cap", buf, 0x46u);
    }
    uint64_t v64 = (String *)*a2;
    *a2 = 0;
    std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(a1 + 4296), (WTF::StringImpl *)v64);
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const String *)(a1 + 168));
    WebKit::NetworkResourceLoader::startNetworkLoad((WebKit::NetworkResourceLoader *)a1, (uint64_t)buf, 1);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf);
  }
  else
  {
    uint64_t v14 = *a2;
    if (LOBYTE((*a2)[69].m_impl.m_ptr))
    {
      uint64_t v65 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v66 = *(void *)(a1 + 88);
        if (!v66)
        {
          __break(0xC471u);
          JUMPOUT(0x198B9FC80);
        }
        uint64_t v67 = *(void *)(a1 + 80);
        uint64_t v68 = *(void *)(a1 + 96);
        uint64_t v69 = *(void *)(a1 + 3048);
        BOOL v70 = *(unsigned __int8 *)(a1 + 315) == 1;
        int v71 = *(unsigned __int8 *)(a1 + 3088);
        BOOL v72 = *(void *)(a1 + 4168) != 0;
        *(_DWORD *)buf = 134219776;
        uint64_t v77 = a1;
        __int16 v78 = 2048;
        uint64_t v79 = v67;
        __int16 v80 = 2048;
        uint64_t v81 = v66;
        __int16 v82 = 2048;
        uint64_t v83 = v68;
        __int16 v84 = 2048;
        uint64_t v85 = v69;
        __int16 v86 = 1024;
        BOOL v87 = v70;
        __int16 v88 = 1024;
        int v89 = v71;
        __int16 v90 = 1024;
        BOOL v91 = v72;
        _os_log_impl(&dword_1985F2000, v65, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntryInternal: Cached entry is a redirect", buf, 0x46u);
      }
      WebKit::NetworkResourceLoader::dispatchWillSendRequestForCacheEntry(a1, a3, a2);
    }
    else if (!*(unsigned char *)(a1 + 373) || LOBYTE(v14[26].m_impl.m_ptr))
    {
      if (WebCore::ResourceResponseBase::source((WebCore::ResourceResponseBase *)&v14[10]) == 3
        || WebCore::ResourceRequestBase::cachePolicy(a3) == 5)
      {
        uint64_t v15 = off_1EB358988;
        if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = *(void *)(a1 + 88);
          if (!v16)
          {
            __break(0xC471u);
            JUMPOUT(0x198B9FA30);
          }
          uint64_t v17 = *(void *)(a1 + 80);
          uint64_t v18 = *(void *)(a1 + 96);
          uint64_t v19 = *(void *)(a1 + 3048);
          BOOL v20 = *(unsigned __int8 *)(a1 + 315) == 1;
          int v21 = *(unsigned __int8 *)(a1 + 3088);
          BOOL v22 = *(void *)(a1 + 4168) != 0;
          *(_DWORD *)buf = 134219776;
          uint64_t v77 = a1;
          __int16 v78 = 2048;
          uint64_t v79 = v17;
          __int16 v80 = 2048;
          uint64_t v81 = v16;
          __int16 v82 = 2048;
          uint64_t v83 = v18;
          __int16 v84 = 2048;
          uint64_t v85 = v19;
          __int16 v86 = 1024;
          BOOL v87 = v20;
          __int16 v88 = 1024;
          int v89 = v21;
          __int16 v90 = 1024;
          BOOL v91 = v22;
          _os_log_impl(&dword_1985F2000, v15, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntryInternal: Cached entry needs revalidation", buf, 0x46u);
        }
        BOOL v23 = (String *)*a2;
        *a2 = 0;
        uint64_t v24 = off_1EB358988;
        if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v25 = *(void *)(a1 + 88);
          if (!v25)
          {
            __break(0xC471u);
            JUMPOUT(0x198B9FA50);
          }
          uint64_t v26 = *(void *)(a1 + 80);
          uint64_t v27 = *(void *)(a1 + 96);
          uint64_t v28 = *(void *)(a1 + 3048);
          BOOL v29 = *(unsigned __int8 *)(a1 + 315) == 1;
          int v30 = *(unsigned __int8 *)(a1 + 3088);
          BOOL v31 = *(void *)(a1 + 4168) != 0;
          *(_DWORD *)buf = 134219776;
          uint64_t v77 = a1;
          __int16 v78 = 2048;
          uint64_t v79 = v26;
          __int16 v80 = 2048;
          uint64_t v81 = v25;
          __int16 v82 = 2048;
          uint64_t v83 = v27;
          __int16 v84 = 2048;
          uint64_t v85 = v28;
          __int16 v86 = 1024;
          BOOL v87 = v29;
          __int16 v88 = 1024;
          int v89 = v30;
          __int16 v90 = 1024;
          BOOL v91 = v31;
          _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::validateCacheEntry:", buf, 0x46u);
        }
        WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const String *)(a1 + 168));
        if ((WebCore::ResourceRequestBase::isConditional((WebCore::ResourceRequestBase *)buf) & 1) == 0)
        {
          WebCore::ResourceResponseBase::httpHeaderField();
          WebCore::ResourceResponseBase::httpHeaderField();
          if (v75 && *((_DWORD *)v75 + 1)) {
            WebCore::ResourceRequestBase::setHTTPHeaderField();
          }
          uint64_t v42 = v74;
          if (v74)
          {
            if (*((_DWORD *)v74 + 1))
            {
              WebCore::ResourceRequestBase::setHTTPHeaderField();
              uint64_t v42 = v74;
            }
            uint64_t v74 = 0;
            if (*(_DWORD *)v42 == 2) {
              WTF::StringImpl::destroy(v42, v41);
            }
            else {
              *(_DWORD *)v42 -= 2;
            }
          }
          uint64_t v43 = v75;
          v75 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2) {
              WTF::StringImpl::destroy(v43, v41);
            }
            else {
              *(_DWORD *)v43 -= 2;
            }
          }
        }
        std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(a1 + 4288), (WTF::StringImpl *)v23);
        WebKit::NetworkResourceLoader::startNetworkLoad((WebKit::NetworkResourceLoader *)a1, (uint64_t)buf, 1);
        CFTypeRef v32 = cf;
        CFTypeRef cf = 0;
        if (v32) {
          CFRelease(v32);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
      }
      else
      {
        uint64_t v44 = off_1EB358988;
        if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v45 = *(void *)(a1 + 88);
          if (!v45)
          {
            __break(0xC471u);
            JUMPOUT(0x198B9FC3CLL);
          }
          uint64_t v46 = *(void *)(a1 + 80);
          uint64_t v47 = *(void *)(a1 + 96);
          uint64_t v48 = *(void *)(a1 + 3048);
          BOOL v49 = *(unsigned __int8 *)(a1 + 315) == 1;
          int v50 = *(unsigned __int8 *)(a1 + 3088);
          BOOL v51 = *(void *)(a1 + 4168) != 0;
          *(_DWORD *)buf = 134219776;
          uint64_t v77 = a1;
          __int16 v78 = 2048;
          uint64_t v79 = v46;
          __int16 v80 = 2048;
          uint64_t v81 = v45;
          __int16 v82 = 2048;
          uint64_t v83 = v47;
          __int16 v84 = 2048;
          uint64_t v85 = v48;
          __int16 v86 = 1024;
          BOOL v87 = v49;
          __int16 v88 = 1024;
          int v89 = v50;
          __int16 v90 = 1024;
          BOOL v91 = v51;
          _os_log_impl(&dword_1985F2000, v44, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntryInternal: Cached entry is directly usable", buf, 0x46u);
        }
        uint64_t v52 = (String *)*a2;
        *a2 = 0;
        v73 = (WebKit::NetworkCache::Entry *)v52;
        WebKit::NetworkResourceLoader::didRetrieveCacheEntry(a1, &v73);
        if (v73)
        {
          WebKit::NetworkCache::Entry::~Entry(v73, v53);
          WTF::fastFree(v54, v55);
        }
      }
    }
    else
    {
      CFTypeRef v33 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v34 = *(void *)(a1 + 88);
        if (!v34)
        {
          __break(0xC471u);
          JUMPOUT(0x198B9FCA0);
        }
        uint64_t v35 = *(void *)(a1 + 80);
        uint64_t v36 = *(void *)(a1 + 96);
        uint64_t v37 = *(void *)(a1 + 3048);
        BOOL v38 = *(unsigned __int8 *)(a1 + 315) == 1;
        int v39 = *(unsigned __int8 *)(a1 + 3088);
        BOOL v40 = *(void *)(a1 + 4168) != 0;
        *(_DWORD *)buf = 134219776;
        uint64_t v77 = a1;
        __int16 v78 = 2048;
        uint64_t v79 = v35;
        __int16 v80 = 2048;
        uint64_t v81 = v34;
        __int16 v82 = 2048;
        uint64_t v83 = v36;
        __int16 v84 = 2048;
        uint64_t v85 = v37;
        __int16 v86 = 1024;
        BOOL v87 = v38;
        __int16 v88 = 1024;
        int v89 = v39;
        __int16 v90 = 1024;
        BOOL v91 = v40;
        _os_log_impl(&dword_1985F2000, v33, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntryInternal: Cached entry is missing certificate information so we are not using it", buf, 0x46u);
      }
      WebKit::NetworkResourceLoader::startNetworkLoad((WebKit::NetworkResourceLoader *)a1, (uint64_t)a3, 1);
    }
  }
}

unint64_t WebKit::NetworkResourceLoader::validateCacheEntryForMaxAgeCapValidation(WebKit::NetworkResourceLoader *this, const WebCore::ResourceRequest *a2, const WebCore::ResourceRequest *a3, const WebCore::ResourceResponse *a4)
{
  if (!*((void *)this + 537)) {
    goto LABEL_11;
  }
  WebCore::ResourceResponseBase::httpHeaderField();
  WebCore::ResourceResponseBase::httpHeaderField();
  char v8 = WTF::equal(v18, v17, v6);
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v7);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t v9 = v18;
  uint64_t v18 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  WebKit::NetworkCache::Storage::remove(*(atomic_uchar *volatile **)(*((void *)this + 534) + 16), *((const WebKit::NetworkCache::Key **)this + 537));
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)this + 537, 0);
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  if ((v8 & 1) == 0)
  {
LABEL_11:
    uint64_t v12 = *((void *)this + 484);
    uint64_t v13 = *(void *)(v12 + 80);
    uint64_t v18 = *(WTF::StringImpl **)(v12 + 88);
    uint64_t v14 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v13 + 232), &v18);
    if (v14)
    {
      uint64_t v15 = WebCore::NetworkStorageSession::maxAgeCacheCap(v14, a2);
      unint64_t v10 = v15 & 0xFFFFFFFFFFFFFF00;
      uint64_t v11 = v15;
    }
    else
    {
      unint64_t v10 = 0;
      uint64_t v11 = 0;
    }
  }
  return v11 | v10;
}

void WebKit::NetworkResourceLoader::dispatchWillSendRequestForCacheEntry(uint64_t a1, const WebCore::ResourceRequest *a2, const String **a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  long long v6 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 88);
    if (!v7)
    {
      __break(0xC471u);
LABEL_15:
      __break(1u);
    }
    uint64_t v8 = *(void *)(a1 + 80);
    uint64_t v9 = *(void *)(a1 + 96);
    uint64_t v10 = *(void *)(a1 + 3048);
    BOOL v11 = *(unsigned __int8 *)(a1 + 315) == 1;
    int v12 = *(unsigned __int8 *)(a1 + 3088);
    BOOL v13 = *(void *)(a1 + 4168) != 0;
    *(_DWORD *)buf = 134219776;
    uint64_t v24 = a1;
    __int16 v25 = 2048;
    uint64_t v26 = v8;
    __int16 v27 = 2048;
    uint64_t v28 = v7;
    __int16 v29 = 2048;
    uint64_t v30 = v9;
    __int16 v31 = 2048;
    uint64_t v32 = v10;
    __int16 v33 = 1024;
    BOOL v34 = v11;
    __int16 v35 = 1024;
    int v36 = v12;
    __int16 v37 = 1024;
    BOOL v38 = v13;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::dispatchWillSendRequestForCacheEntry:", buf, 0x46u);
  }
  *(unsigned char *)(a1 + 4304) = 1;
  if (!LOBYTE((*a3)[69].m_impl.m_ptr)) {
    goto LABEL_15;
  }
  WebCore::ResourceRequest::ResourceRequest(v21, *a3 + 44);
  uint64_t v14 = *a3;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf, (const WebCore::ResourceResponseBase *)&v14[10]);
  m_ptr = v14[40].m_impl.m_ptr;
  CFTypeRef cf = m_ptr;
  if (m_ptr) {
    CFRetain(m_ptr);
  }
  char v40 = (char)v14[41].m_impl.m_ptr;
  uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v16 = &unk_1EE9C6458;
  BOOL v20 = v16;
  WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal(a1, a2, (WebCore::ResourceRequestBase *)v21, (uint64_t)buf, 0, (uint64_t *)&v20);
  if (v20) {
    (*(void (**)(void *))(*v20 + 8))(v20);
  }
  CFTypeRef v18 = cf;
  CFTypeRef cf = 0;
  if (v18) {
    CFRelease(v18);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v17);
  CFTypeRef v19 = v22;
  CFTypeRef v22 = 0;
  if (v19) {
    CFRelease(v19);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v21);
}

void WebKit::NetworkResourceLoader::didRetrieveCacheEntry(uint64_t a1, WTF::StringImpl **a2)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 88);
    if (!v5)
    {
      __break(0xC471u);
      goto LABEL_70;
    }
    uint64_t v6 = *(void *)(a1 + 80);
    uint64_t v7 = *(void *)(a1 + 96);
    uint64_t v8 = *(void *)(a1 + 3048);
    BOOL v9 = *(unsigned __int8 *)(a1 + 315) == 1;
    int v10 = *(unsigned __int8 *)(a1 + 3088);
    BOOL v11 = *(void *)(a1 + 4168) != 0;
    *(_DWORD *)buf = 134219776;
    uint64_t v104 = a1;
    __int16 v105 = 2048;
    uint64_t v106 = v6;
    __int16 v107 = 2048;
    uint64_t v108 = v5;
    __int16 v109 = 2048;
    uint64_t v110 = v7;
    __int16 v111 = 2048;
    uint64_t v112 = v8;
    __int16 v113 = 1024;
    BOOL v114 = v9;
    __int16 v115 = 1024;
    int v116 = v10;
    __int16 v117 = 1024;
    BOOL v118 = v11;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didRetrieveCacheEntry:", buf, 0x46u);
  }
  int v12 = *a2;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf, (WTF::StringImpl *)((char *)*a2 + 80));
  BOOL v13 = (const void *)*((void *)v12 + 40);
  CFTypeRef cf = v13;
  if (v13) {
    CFRetain(v13);
  }
  char v120 = *((unsigned char *)v12 + 328);
  uint64_t v14 = *(void *)(a1 + 4808);
  if (!v14 || *(unsigned char *)(v14 + 185) || WebCore::ContentFilter::continueAfterResponseReceived())
  {
    if (*(unsigned char *)(a1 + 315) == 1) {
      WebKit::NetworkResourceLoader::didReceiveMainResourceResponse((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceResponse *)buf);
    }
    WebKit::NetworkResourceLoader::initializeReportingEndpoints((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceResponse *)buf);
    if (*(unsigned char *)(a1 + 315) == 1
      && WebKit::NetworkResourceLoader::shouldInterruptLoadForCSPFrameAncestorsOrXFrameOptions((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceResponse *)buf))
    {
      char v40 = off_1EB358988;
      if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
      {
LABEL_47:
        WebKit::NetworkResourceLoader::sanitizeResponseIfPossible((uint64_t)v89, a1, (uint64_t)buf);
        WebCore::ResourceResponse::operator=((uint64_t)buf, (uint64_t)v89);
        WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v89, v41);
        *(void *)int v89 = buf;
        IPC::MessageSender::send<Messages::WebResourceLoader::StopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied>(a1 + 16, (WebCore::ResourceResponseBase **)v89);
        goto LABEL_34;
      }
      uint64_t v65 = *(void *)(a1 + 88);
      if (v65)
      {
        uint64_t v66 = *(void *)(a1 + 80);
        uint64_t v67 = *(void *)(a1 + 96);
        uint64_t v68 = *(void *)(a1 + 3048);
        BOOL v69 = *(unsigned __int8 *)(a1 + 315) == 1;
        int v70 = *(unsigned __int8 *)(a1 + 3088);
        BOOL v71 = *(void *)(a1 + 4168) != 0;
        *(_DWORD *)int v89 = 134219776;
        *(void *)&v89[4] = a1;
        *(_WORD *)&v89[12] = 2048;
        *(void *)&v89[14] = v66;
        __int16 v90 = 2048;
        uint64_t v91 = v65;
        __int16 v92 = 2048;
        uint64_t v93 = v67;
        __int16 v94 = 2048;
        *(void *)uint64_t v95 = v68;
        *(_WORD *)&v95[8] = 1024;
        *(_DWORD *)&v95[10] = v69;
        __int16 v96 = 1024;
        int v97 = v70;
        LOWORD(v98) = 1024;
        *(_DWORD *)((char *)&v98 + 2) = v71;
        _os_log_error_impl(&dword_1985F2000, v40, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didRetrieveCacheEntry: Stopping load due to CSP Frame-Ancestors or X-Frame-Options", v89, 0x46u);
        goto LABEL_47;
      }
      __break(0xC471u);
LABEL_70:
      JUMPOUT(0x198BA0598);
    }
    uint64_t v15 = *(WebKit::NetworkLoadChecker **)(a1 + 4320);
    if (v15)
    {
      WebKit::NetworkLoadChecker::validateResponse(v15, (const WebCore::ResourceRequest *)(a1 + 168), (WebCore::AdditionalNetworkLoadMetricsForWebInspector ***)buf, (uint64_t)v89);
      if ((_BYTE)v97)
      {
        uint64_t v42 = off_1EB358988;
        if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
        {
LABEL_51:
          WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceError *)v89);
          WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v89, v44);
          goto LABEL_34;
        }
LABEL_63:
        uint64_t v58 = *(void *)(a1 + 88);
        if (!v58)
        {
          __break(0xC471u);
          JUMPOUT(0x198BA07F0);
        }
        uint64_t v59 = *(void *)(a1 + 80);
        uint64_t v60 = *(void *)(a1 + 96);
        uint64_t v61 = *(void *)(a1 + 3048);
        BOOL v62 = *(unsigned __int8 *)(a1 + 315) == 1;
        int v63 = *(unsigned __int8 *)(a1 + 3088);
        BOOL v64 = *(void *)(a1 + 4168) != 0;
        *(_DWORD *)v73 = 134219776;
        uint64_t v74 = a1;
        __int16 v75 = 2048;
        uint64_t v76 = v59;
        __int16 v77 = 2048;
        uint64_t v78 = v58;
        __int16 v79 = 2048;
        uint64_t v80 = v60;
        __int16 v81 = 2048;
        uint64_t v82 = v61;
        __int16 v83 = 1024;
        BOOL v84 = v62;
        __int16 v85 = 1024;
        int v86 = v63;
        __int16 v87 = 1024;
        BOOL v88 = v64;
        _os_log_error_impl(&dword_1985F2000, v42, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didRetrieveCacheEntry: Failing load due to NetworkLoadChecker::validateResponse", v73, 0x46u);
        goto LABEL_51;
      }
      CFTypeRef v17 = v98;
      CFTypeRef v98 = 0;
      if (v17) {
        CFRelease(v17);
      }
      CFTypeRef v18 = *(WTF::StringImpl **)&v95[4];
      *(void *)&v95[4] = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v16);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
      CFTypeRef v19 = *(WTF::StringImpl **)&v89[8];
      *(void *)&v89[8] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v16);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      BOOL v20 = *(WTF::StringImpl **)v89;
      *(void *)int v89 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v16);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    WebKit::NetworkResourceLoader::doCrossOriginOpenerHandlingOfResponse((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceResponse *)buf, v89);
    if (!v100)
    {
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v89, v21);
      WebKit::NetworkResourceLoader::sanitizeResponseIfPossible((uint64_t)v89, a1, (uint64_t)buf);
      WebCore::ResourceResponseBase::operator=((uint64_t)buf, (uint64_t)v89);
      CFTypeRef v23 = v101;
      CFTypeRef v101 = 0;
      CFTypeRef v24 = cf;
      CFTypeRef cf = v23;
      if (v24)
      {
        CFRelease(v24);
        CFTypeRef v39 = v101;
        char v120 = v102;
        CFTypeRef v101 = 0;
        if (v39) {
          CFRelease(v39);
        }
      }
      else
      {
        char v120 = v102;
        CFTypeRef v101 = 0;
      }
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v89, v22);
      uint64_t v25 = *(void *)(a1 + 4168);
      if (v25)
      {
        WebCore::ResourceResponse::operator=(v25 + 208, (uint64_t)buf);
        uint64_t v45 = *(void **)(a1 + 4168);
        uint64_t v46 = *a2;
        uint64_t v47 = (atomic_uint *)*((void *)*a2 + 70);
        if (v47
          || (WebKit::NetworkCache::Entry::initializeBufferFromStorageRecord((unsigned int **)v46),
              (uint64_t v47 = (atomic_uint *)*((void *)v46 + 70)) != 0))
        {
          atomic_fetch_add(v47, 1u);
        }
        WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v89);
        WebKit::sendReplyToSynchronousRequest(v45, (WebCore::FragmentedSharedBuffer *)v47, (long long *)v89);
        WebCore::NetworkLoadMetrics::~NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v89, v48);
        if (v47) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v47, v49);
        }
      }
      else
      {
        int v26 = *(unsigned __int8 *)(a1 + 315);
        __int16 v27 = off_1EB358988;
        if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = *(void *)(a1 + 88);
          if (!v28)
          {
            __break(0xC471u);
            JUMPOUT(0x198BA05B8);
          }
          uint64_t v29 = *(void *)(a1 + 80);
          uint64_t v30 = *(void *)(a1 + 96);
          uint64_t v31 = *(void *)(a1 + 3048);
          int v32 = *(unsigned __int8 *)(a1 + 3088);
          *(_DWORD *)int v89 = 134220032;
          *(void *)&v89[4] = a1;
          *(_WORD *)&v89[12] = 2048;
          *(void *)&v89[14] = v29;
          __int16 v90 = 2048;
          uint64_t v91 = v28;
          __int16 v92 = 2048;
          uint64_t v93 = v30;
          __int16 v94 = 2048;
          *(void *)uint64_t v95 = v31;
          *(_WORD *)&v95[8] = 1024;
          *(_DWORD *)&v95[10] = v26 == 1;
          __int16 v96 = 1024;
          int v97 = v32;
          LOWORD(v98) = 1024;
          *(_DWORD *)((char *)&v98 + 2) = 0;
          HIWORD(v98) = 1024;
          int v99 = *(_DWORD *)&v95[10];
          _os_log_impl(&dword_1985F2000, v27, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didRetrieveCacheEntry: Sending WebResourceLoader::DidReceiveResponse IPC (needsContinueDidReceiveResponseMessage=%d)", v89, 0x4Cu);
        }
        WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup((WebCore::ResourceResponse *)a1, (WebCore::ResourceResponseBase *)buf, *((unsigned char *)*a2 + 760), v26 == 1);
        if (v26 == 1)
        {
          WebCore::ResourceResponse::operator=(a1 + 3888, (uint64_t)buf);
          int v50 = *a2;
          *(unsigned char *)(a1 + 4920) = *((unsigned char *)*a2 + 760);
          *a2 = 0;
          std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(a1 + 4312), v50);
          goto LABEL_34;
        }
        __int16 v33 = *a2;
        *a2 = 0;
        BOOL v72 = v33;
        WebKit::NetworkResourceLoader::sendResultForCacheEntry(a1, &v72);
        if (v33)
        {
          WebKit::NetworkCache::Entry::~Entry(v33, v34);
          WTF::fastFree(v37, v38);
        }
      }
      WebKit::NetworkResourceLoader::cleanup(a1, 1);
      goto LABEL_34;
    }
    uint64_t v42 = off_1EB358988;
    if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR)) {
      goto LABEL_49;
    }
    uint64_t v51 = *(void *)(a1 + 88);
    if (!v51)
    {
      __break(0xC471u);
      JUMPOUT(0x198BA07D0);
    }
    uint64_t v52 = *(void *)(a1 + 80);
    uint64_t v53 = *(void *)(a1 + 96);
    uint64_t v54 = *(void *)(a1 + 3048);
    BOOL v55 = *(unsigned __int8 *)(a1 + 315) == 1;
    int v56 = *(unsigned __int8 *)(a1 + 3088);
    BOOL v57 = *(void *)(a1 + 4168) != 0;
    *(_DWORD *)v73 = 134219776;
    uint64_t v74 = a1;
    __int16 v75 = 2048;
    uint64_t v76 = v52;
    __int16 v77 = 2048;
    uint64_t v78 = v51;
    __int16 v79 = 2048;
    uint64_t v80 = v53;
    __int16 v81 = 2048;
    uint64_t v82 = v54;
    __int16 v83 = 1024;
    BOOL v84 = v55;
    __int16 v85 = 1024;
    int v86 = v56;
    __int16 v87 = 1024;
    BOOL v88 = v57;
    _os_log_error_impl(&dword_1985F2000, v42, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didRetrieveCacheEntry: Interrupting load due to Cross-Origin-Opener-Policy", v73, 0x46u);
    if (v100)
    {
LABEL_49:
      WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceError *)v89);
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v89, v43);
      goto LABEL_34;
    }
    __break(1u);
    goto LABEL_63;
  }
LABEL_34:
  CFTypeRef v36 = cf;
  CFTypeRef cf = 0;
  if (v36) {
    CFRelease(v36);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v35);
}

uint64_t WebKit::NetworkResourceLoader::consumeSandboxExtensions(WebKit::NetworkResourceLoader *this)
{
  uint64_t v2 = *((unsigned int *)this + 767);
  if (v2)
  {
    uint64_t v5 = (WebKit::SandboxExtension **)*((void *)this + 382);
    uint64_t v6 = 8 * v2;
    do
    {
      uint64_t v7 = *v5++;
      WebKit::SandboxExtension::consume(v7);
      v6 -= 8;
    }
    while (v6);
  }
  uint64_t result = *((void *)this + 384);
  if (result) {
    uint64_t result = WebKit::SandboxExtension::consume((WebKit::SandboxExtension *)result);
  }
  uint64_t v4 = *((unsigned int *)this + 1047);
  if (v4)
  {
    uint64_t v8 = (uint64_t *)*((void *)this + 522);
    uint64_t v9 = 8 * v4;
    do
    {
      uint64_t v10 = *v8++;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
      v9 -= 8;
    }
    while (v9);
  }
  *((unsigned char *)this + 4193) = 1;
  return result;
}

unsigned int *WebCore::SharedBufferBuilder::empty(WebCore::SharedBufferBuilder *this)
{
  WebCore::FragmentedSharedBuffer::create((uint64_t *)&v6, this);
  uint64_t v3 = v6;
  uint64_t v6 = 0;
  uint64_t result = *(unsigned int **)this;
  *(void *)this = v3;
  if (result)
  {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v2);
    uint64_t result = v6;
    uint64_t v6 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
    }
  }
  return result;
}

uint64_t *WebKit::NetworkResourceLoader::didFailLoading(WebKit::NetworkResourceLoader *this, const WebCore::ResourceError *a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *((void *)this + 11);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x198BA0CECLL);
    }
    uint64_t v6 = *((void *)this + 10);
    uint64_t v7 = *((void *)this + 12);
    uint64_t v8 = *((void *)this + 381);
    BOOL v9 = *((unsigned __int8 *)this + 315) == 1;
    int v10 = *((unsigned __int8 *)this + 3088);
    log = v4;
    BOOL v11 = *((void *)this + 521) != 0;
    int v12 = *((unsigned __int8 *)a2 + 60);
    BOOL v31 = v12 == 4;
    BOOL v32 = *((void *)this + 549) != 0;
    BOOL v13 = v12 == 3;
    BOOL v30 = v12 == 2;
    MEMORY[0x19973EC60](a2);
    int v14 = *((_DWORD *)a2 + 14);
    *(_DWORD *)buf = 134221056;
    *(void *)&uint8_t buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v6;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)__int16 v37 = v5;
    *(_WORD *)&v37[8] = 2048;
    *(void *)&v37[10] = v7;
    __int16 v38 = 2048;
    uint64_t v39 = v8;
    __int16 v40 = 1024;
    BOOL v41 = v9;
    __int16 v42 = 1024;
    int v43 = v10;
    __int16 v44 = 1024;
    BOOL v45 = v11;
    __int16 v46 = 1024;
    BOOL v47 = v32;
    __int16 v48 = 1024;
    BOOL v49 = v31;
    __int16 v50 = 1024;
    BOOL v51 = v13;
    __int16 v52 = 1024;
    BOOL v53 = v30;
    __int16 v54 = 1024;
    int v55 = v14;
    _os_log_error_impl(&dword_1985F2000, log, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didFailLoading: (wasServiceWorkerLoad=%d, isTimeout=%d, isCancellation=%d, isAccessControl=%d, errorCode=%d)", buf, 0x64u);
  }
  if (*((unsigned char *)this + 4344)) {
    WebKit::NetworkConnectionToWebProcess::removeNetworkLoadInformation(*((void *)this + 484), *((void *)this + 381));
  }
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)this + 536, 0);
  uint64_t v15 = *((void *)this + 521);
  if (v15)
  {
    WebCore::ResourceError::operator=(v15 + 464, (uint64_t)a2);
    int v21 = (void *)*((void *)this + 521);
    WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)buf);
    WebKit::sendReplyToSynchronousRequest(v21, 0, (long long *)buf);
    WebCore::NetworkLoadMetrics::~NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)buf, v22);
  }
  else
  {
    uint64_t v16 = *(void *)(*((void *)this + 484) + 72);
    if (v16)
    {
      if (*((void *)this + 549))
      {
        *(void *)buf = a2;
        IPC::Connection::send<Messages::WebResourceLoader::DidFailServiceWorkerLoad>(v16, (WebCore::ResourceError **)buf, *((void *)this + 381));
      }
      else
      {
        *(void *)buf = a2;
        IPC::Connection::send<Messages::WebResourceLoader::DidFailResourceLoad>(v16, (WebCore::ResourceError **)buf, *((void *)this + 381));
      }
    }
  }
  if (*((unsigned char *)this + 3352) || *((unsigned char *)this + 3864))
  {
    uint64_t v18 = *(void *)(*(void *)(*((void *)this + 484) + 80) + 40);
    WebKit::NetworkResourceLoader::resourceLoadInfo((WebKit::NetworkResourceLoader *)v34, (uint64_t)this);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
    uint64_t v57 = 0;
    char v58 = 0;
    char v56 = v56 & 0xF1 | 4;
    v35[0] = (char *)this + 80;
    v35[1] = v34;
    v35[2] = buf;
    v35[3] = a2;
    IPC::Connection::send<Messages::NetworkProcessProxy::ResourceLoadDidCompleteWithError>(v18, (uint64_t)v35);
    WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)buf, v19);
    WebKit::ResourceLoadInfo::~ResourceLoadInfo((WebKit::ResourceLoadInfo *)v34, v20);
  }
  if (WebCore::ResourceError::blockedKnownTracker(a2))
  {
    MEMORY[0x19973EC60](a2);
    CFTypeRef v23 = (_DWORD *)*((void *)a2 + 1);
    if (v23) {
      *v23 += 2;
    }
    *(void *)buf = v23;
    long long v24 = *((_OWORD *)a2 + 2);
    *(_OWORD *)&buf[8] = *((_OWORD *)a2 + 1);
    *(_OWORD *)__int16 v37 = v24;
    WebCore::ResourceError::blockedTrackerHostName((uint64_t *)v34, a2);
    int v26 = v34[0];
    if (!v34[0]) {
      goto LABEL_23;
    }
    if (*((_DWORD *)v34[0] + 1))
    {
      WTF::URL::setHost();
      int v26 = v34[0];
      v34[0] = 0;
      if (!v26) {
        goto LABEL_23;
      }
    }
    else
    {
      v34[0] = 0;
    }
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v25);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
LABEL_23:
    uint64_t v27 = *(void *)(*(void *)(*((void *)this + 484) + 80) + 40);
    v34[0] = (WebKit::NetworkResourceLoader *)((char *)this + 80);
    v34[1] = (WTF::StringImpl *)buf;
    IPC::Connection::send<Messages::NetworkProcessProxy::DidBlockLoadToKnownTracker>(v27, (uint64_t **)v34);
    uint64_t v29 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v28);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
  }
  return WebKit::NetworkResourceLoader::cleanup((uint64_t)this, 2);
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkProcessProxy::ResourceLoadDidSendRequest>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 352;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v15 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode(v4, *(void *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v4, *(WebCore::ResourceRequest **)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 24);
  int v6 = *(unsigned __int8 *)(v5 + 8);
  uint64_t v7 = (unsigned char *)IPC::Encoder::grow(v4, 1uLL, 1);
  if (v6)
  {
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x198BA0E18);
    }
    *uint64_t v7 = 1;
    if (!*(unsigned char *)(v5 + 8))
    {
      BOOL v13 = (WebKit::NetworkResourceLoader *)std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)WebKit::NetworkResourceLoader::resourceLoadInfo(v13, v14);
    }
    IPC::ArgumentCoder<IPC::FormDataReference,void>::encode(v4, (_DWORD **)v5);
  }
  else
  {
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x198BA0E38);
    }
    *uint64_t v7 = 0;
  }
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v15, 0, 0);
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::resourceLoadInfo(WebKit::NetworkResourceLoader *this, uint64_t a2)
{
  *(void *)this = *(void *)(a2 + 4416);
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)(a2 + 96);
  *((unsigned char *)this + 24) = 1;
  *((_OWORD *)this + 2) = *(_OWORD *)(a2 + 3360);
  *((unsigned char *)this + 48) = *(unsigned char *)(a2 + 3376);
  uint64_t v4 = (WebCore::ResourceRequestBase *)(a2 + 168);
  uint64_t v5 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 168));
  int v6 = *(_DWORD **)v5;
  if (*(void *)v5) {
    *v6 += 2;
  }
  *((void *)this + 7) = v6;
  long long v7 = *(_OWORD *)(v5 + 24);
  *((_OWORD *)this + 4) = *(_OWORD *)(v5 + 8);
  *((_OWORD *)this + 5) = v7;
  uint64_t v8 = (WTF::WallTime *)WebCore::ResourceRequestBase::httpMethod(v4);
  BOOL v9 = *(_DWORD **)v8;
  if (*(void *)v8) {
    *v9 += 2;
  }
  *((void *)this + 12) = v9;
  WTF::WallTime::now(v8);
  *((void *)this + 13) = v10;
  uint64_t result = WebCore::ResourceResponseBase::source((WebCore::ResourceResponseBase *)(a2 + 3888));
  *((unsigned char *)this + 112) = (result < 9) & (0x1BCu >> result);
  unsigned int v12 = *(unsigned __int8 *)(a2 + 315) - 2;
  if (v12 < 7 && ((0x63u >> v12) & 1) != 0)
  {
    unint64_t v13 = 0x10A0D0D0D040DuLL >> (8 * v12);
  }
  else
  {
    LODWORD(v13) = *(unsigned __int8 *)(a2 + 3088) - 1;
    if (v13 > 0x13) {
      LOBYTE(v13) = 9;
    }
    else {
      LOBYTE(v13) = byte_1994F6358[(char)v13];
    }
  }
  *((unsigned char *)this + 113) = v13;
  return result;
}

void WebKit::ResourceLoadInfo::~ResourceLoadInfo(WebKit::ResourceLoadInfo *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
}

uint64_t IPC::Connection::send<Messages::NetworkProcessProxy::DidAllowPrivateTokenUsageByThirdPartyForTesting>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 323;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  unsigned int v12 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, *(uint64_t **)a2);
  char v5 = *(unsigned char *)(a2 + 8);
  int v6 = (unsigned char *)IPC::Encoder::grow(v4, 1uLL, 1);
  if (v7)
  {
    *int v6 = v5;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, *(uint64_t **)(a2 + 16));
    IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unsigned int v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t *WebKit::NetworkResourceLoader::cleanup(uint64_t a1, int a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 88);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x198BA1288);
    }
    uint64_t v6 = *(void *)(a1 + 80);
    uint64_t v7 = *(void *)(a1 + 96);
    uint64_t v8 = *(void *)(a1 + 3048);
    BOOL v9 = *(unsigned __int8 *)(a1 + 315) == 1;
    int v10 = *(unsigned __int8 *)(a1 + 3088);
    BOOL v11 = *(void *)(a1 + 4168) != 0;
    int v25 = 134220032;
    uint64_t v26 = a1;
    __int16 v27 = 2048;
    uint64_t v28 = v6;
    __int16 v29 = 2048;
    uint64_t v30 = v5;
    __int16 v31 = 2048;
    uint64_t v32 = v7;
    __int16 v33 = 2048;
    uint64_t v34 = v8;
    __int16 v35 = 1024;
    BOOL v36 = v9;
    __int16 v37 = 1024;
    int v38 = v10;
    __int16 v39 = 1024;
    BOOL v40 = v11;
    __int16 v41 = 1024;
    int v42 = a2;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::cleanup: (result=%u)", (uint8_t *)&v25, 0x4Cu);
  }
  WebKit::NetworkConnectionToWebProcess::stopTrackingResourceLoad(*(void *)(a1 + 3872), *(void *)(a1 + 3048));
  if ((*(void *)(a1 + 4248) & 0xFFFFFFFFFFFFLL) != 0) {
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 4216));
  }
  if (*(unsigned char *)(a1 + 4193))
  {
    uint64_t v13 = *(unsigned int *)(a1 + 3068);
    if (v13)
    {
      CFTypeRef v19 = *(WebKit::SandboxExtension ***)(a1 + 3056);
      uint64_t v20 = 8 * v13;
      do
      {
        int v21 = *v19++;
        WebKit::SandboxExtension::revoke(v21);
        v20 -= 8;
      }
      while (v20);
    }
    uint64_t v14 = *(WebKit::SandboxExtension **)(a1 + 3072);
    if (v14) {
      WebKit::SandboxExtension::revoke(v14);
    }
    uint64_t v15 = *(unsigned int *)(a1 + 4188);
    if (v15)
    {
      CFTypeRef v22 = *(uint64_t **)(a1 + 4176);
      uint64_t v23 = 8 * v15;
      do
      {
        uint64_t v24 = *v22++;
        (*(void (**)(uint64_t))(*(void *)v24 + 24))(v24);
        v23 -= 8;
      }
      while (v23);
    }
    *(unsigned char *)(a1 + 4193) = 0;
  }
  if (*(_DWORD *)(a1 + 4184))
  {
    uint64_t v17 = *(unsigned int *)(a1 + 4188);
    uint64_t v18 = *(WTF **)(a1 + 4176);
    if (v17)
    {
      WTF::VectorDestructor<true,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>::destruct(v18, (_DWORD **)v18 + v17);
      *(_DWORD *)(a1 + 4188) = 0;
      uint64_t v18 = *(WTF **)(a1 + 4176);
    }
    if (v18)
    {
      *(void *)(a1 + 4176) = 0;
      *(_DWORD *)(a1 + 4184) = 0;
      WTF::fastFree(v18, v12);
    }
  }
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)(a1 + 3880), 0);
  return WebKit::NetworkConnectionToWebProcess::didCleanupResourceLoader(*(WebKit::NetworkProcess ***)(a1 + 3872), (WebKit::NetworkResourceLoader *)a1);
}

uint64_t WebKit::NetworkResourceLoader::convertToDownload(uint64_t a1, uint64_t a2, WebCore::ResourceRequest *a3, WebCore::ResourceResponseBase *a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 88);
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x198BA1610);
    }
    uint64_t v10 = *(void *)(a1 + 80);
    uint64_t v11 = *(void *)(a1 + 96);
    uint64_t v12 = *(void *)(a1 + 3048);
    BOOL v13 = *(unsigned __int8 *)(a1 + 315) == 1;
    int v14 = *(unsigned __int8 *)(a1 + 3088);
    BOOL v15 = *(void *)(a1 + 4168) != 0;
    BOOL v16 = *(void *)(a1 + 3880) != 0;
    BOOL v17 = *(void *)(a1 + 4336) != 0;
    *(_DWORD *)buf = 134220544;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v35 = 2048;
    uint64_t v36 = v10;
    __int16 v37 = 2048;
    uint64_t v38 = v9;
    __int16 v39 = 2048;
    uint64_t v40 = v11;
    __int16 v41 = 2048;
    uint64_t v42 = v12;
    __int16 v43 = 1024;
    BOOL v44 = v13;
    __int16 v45 = 1024;
    int v46 = v14;
    __int16 v47 = 1024;
    BOOL v48 = v15;
    __int16 v49 = 2048;
    uint64_t v50 = a2;
    __int16 v51 = 1024;
    BOOL v52 = v16;
    __int16 v53 = 1024;
    BOOL v54 = v17;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::convertToDownload: (downloadID=%llu, hasNetworkLoad=%d, hasResponseCompletionHandler=%d)", buf, 0x5Cu);
  }
  uint64_t result = *(void *)(a1 + 4392);
  if (!result
    || (uint64_t result = WebKit::ServiceWorkerFetchTask::convertToDownload(result, *(void *)(*(void *)(a1 + 3872) + 80) + 160, a2, a3, a4), (result & 1) == 0))
  {
    uint64_t v19 = *(void *)(a1 + 3880);
    if (v19)
    {
      if (*(void *)(a1 + 4336))
      {
        uint64_t v20 = *(void *)(*(void *)(a1 + 3872) + 80) + 160;
        *(void *)(a1 + 3880) = 0;
        *(void *)buf = v19;
        std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)(a1 + 3880), 0);
        WebKit::DownloadManager::convertNetworkLoadToDownload(v20, a2, (uint64_t *)buf, (uint64_t *)(a1 + 4336), a1 + 4176, a3, a4);
        uint64_t result = *(void *)buf;
        *(void *)buf = 0;
        if (result)
        {
          WebKit::NetworkLoad::~NetworkLoad((WebKit::NetworkLoad *)result, v21);
          return WTF::fastFree(v22, v23);
        }
      }
    }
    else
    {
      uint64_t v24 = *(void *)(a1 + 3872);
      uint64_t v25 = *(void *)(v24 + 88);
      uint64_t v26 = *(void *)(v24 + 80) + 160;
      uint64_t v27 = *(void *)(a1 + 112);
      buf[0] = 0;
      if (v27)
      {
        LODWORD(v38) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v27 + 8);
        LOBYTE(v27) = 1;
      }
      LOBYTE(v39) = v27;
      __int16 v28 = *(_WORD *)(a1 + 3040);
      __int16 v33 = 0;
      LOBYTE(v31) = 0;
      char v32 = 0;
      WebKit::DownloadManager::startDownload(v26, v25, a2, (CFTypeRef *)a3, (WebCore::SecurityOriginData *)buf, v28, &v33, 0, &v31, 0, 0, 0, 0);
      uint64_t v30 = v33;
      __int16 v33 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2) {
          WTF::StringImpl::destroy(v30, v29);
        }
        else {
          *(_DWORD *)v30 -= 2;
        }
      }
      if ((_BYTE)v39 && v38 != -1) {
        ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9C6158[v38])(&v33, buf);
      }
      return (uint64_t)WebKit::NetworkResourceLoader::abort((WebKit::NetworkResourceLoader *)a1);
    }
  }
  return result;
}

uint64_t *WebKit::NetworkResourceLoader::abort(WebKit::NetworkResourceLoader *this)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 11);
    if (!v3)
    {
      __break(0xC471u);
      JUMPOUT(0x198BA1BF8);
    }
    uint64_t v4 = *((void *)this + 10);
    uint64_t v5 = *((void *)this + 12);
    uint64_t v6 = *((void *)this + 381);
    BOOL v7 = *((unsigned __int8 *)this + 315) == 1;
    int v8 = *((unsigned __int8 *)this + 3088);
    BOOL v9 = *((void *)this + 521) != 0;
    BOOL v10 = *((void *)this + 485) != 0;
    *(_DWORD *)uint64_t v57 = 134220032;
    *(void *)&v57[4] = this;
    *(_WORD *)&v57[12] = 2048;
    *(void *)&v57[14] = v4;
    __int16 v58 = 2048;
    uint64_t v59 = v3;
    __int16 v60 = 2048;
    uint64_t v61 = v5;
    __int16 v62 = 2048;
    *(void *)&long long v63 = v6;
    WORD4(v63) = 1024;
    *(_DWORD *)((char *)&v63 + 10) = v7;
    HIWORD(v63) = 1024;
    int v64 = v8;
    LOWORD(cf) = 1024;
    *(_DWORD *)((char *)&cf + 2) = v9;
    HIWORD(cf) = 1024;
    LODWORD(v66) = v10;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::abort: (hasNetworkLoad=%d)", v57, 0x4Cu);
  }
  if (*((unsigned char *)this + 3094) && (*((unsigned char *)this + 4026) & 1) != 0 && !*((unsigned char *)this + 4345))
  {
    *((unsigned char *)this + 4345) = 1;
    BOOL v48 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v49 = *((void *)this + 11);
      if (!v49)
      {
        __break(0xC471u);
        JUMPOUT(0x198BA1C58);
      }
      uint64_t v50 = *((void *)this + 10);
      uint64_t v51 = *((void *)this + 12);
      uint64_t v52 = *((void *)this + 381);
      BOOL v53 = *((unsigned __int8 *)this + 315) == 1;
      int v54 = *((unsigned __int8 *)this + 3088);
      BOOL v55 = *((void *)this + 521) != 0;
      *(_DWORD *)uint64_t v57 = 134219776;
      *(void *)&v57[4] = this;
      *(_WORD *)&v57[12] = 2048;
      *(void *)&v57[14] = v50;
      __int16 v58 = 2048;
      uint64_t v59 = v49;
      __int16 v60 = 2048;
      uint64_t v61 = v51;
      __int16 v62 = 2048;
      *(void *)&long long v63 = v52;
      WORD4(v63) = 1024;
      *(_DWORD *)((char *)&v63 + 10) = v53;
      HIWORD(v63) = 1024;
      int v64 = v54;
      LOWORD(cf) = 1024;
      *(_DWORD *)((char *)&cf + 2) = v55;
      _os_log_impl(&dword_1985F2000, v48, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::abort: Keeping network load alive due to keepalive option", v57, 0x46u);
    }
    return (uint64_t *)WebKit::NetworkConnectionToWebProcess::transferKeptAliveLoad(*((WebKit::NetworkConnectionToWebProcess **)this + 484), this);
  }
  else
  {
    uint64_t v11 = (WebKit::ServiceWorkerFetchTask *)*((void *)this + 549);
    *((void *)this + 549) = 0;
    if (v11)
    {
      uint64_t v12 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *((void *)this + 11);
        if (!v13)
        {
          __break(0xC471u);
          JUMPOUT(0x198BA1C18);
        }
        uint64_t v14 = *((void *)this + 10);
        uint64_t v15 = *((void *)this + 12);
        uint64_t v16 = *((void *)this + 381);
        BOOL v17 = *((unsigned __int8 *)this + 315) == 1;
        int v18 = *((unsigned __int8 *)this + 3088);
        BOOL v19 = *((void *)this + 521) != 0;
        uint64_t v20 = *((void *)v11 + 5);
        *(_DWORD *)uint64_t v57 = 134220032;
        *(void *)&v57[4] = this;
        *(_WORD *)&v57[12] = 2048;
        *(void *)&v57[14] = v14;
        __int16 v58 = 2048;
        uint64_t v59 = v13;
        __int16 v60 = 2048;
        uint64_t v61 = v15;
        __int16 v62 = 2048;
        *(void *)&long long v63 = v16;
        WORD4(v63) = 1024;
        *(_DWORD *)((char *)&v63 + 10) = v17;
        HIWORD(v63) = 1024;
        int v64 = v18;
        LOWORD(cf) = 1024;
        *(_DWORD *)((char *)&cf + 2) = v19;
        HIWORD(cf) = 2048;
        uint64_t v66 = v20;
        _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::abort: Cancelling pending service worker fetch task (fetchIdentifier=%llu)", v57, 0x50u);
      }
      WebKit::ServiceWorkerFetchTask::cancelFromClient(v11);
      WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v11);
    }
    uint64_t v21 = *((void *)this + 485);
    if (v21)
    {
      if (WebKit::NetworkResourceLoader::canUseCache(this, (const WebCore::ResourceRequest *)(v21 + 3024))
        && (*((unsigned char *)this + 4026) & 1) == 0)
      {
        WebKit::NetworkCache::Cache::remove(*((atomic_uchar *volatile ***)this + 534), (const WebCore::ResourceRequest *)(*((void *)this + 485) + 3024));
      }
      CFTypeRef v22 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = *((void *)this + 11);
        if (!v23)
        {
          __break(0xC471u);
          JUMPOUT(0x198BA1C38);
        }
        uint64_t v24 = *((void *)this + 10);
        uint64_t v25 = *((void *)this + 12);
        uint64_t v26 = *((void *)this + 381);
        BOOL v27 = *((unsigned __int8 *)this + 315) == 1;
        int v28 = *((unsigned __int8 *)this + 3088);
        BOOL v29 = *((void *)this + 521) != 0;
        *(_DWORD *)uint64_t v57 = 134219776;
        *(void *)&v57[4] = this;
        *(_WORD *)&v57[12] = 2048;
        *(void *)&v57[14] = v24;
        __int16 v58 = 2048;
        uint64_t v59 = v23;
        __int16 v60 = 2048;
        uint64_t v61 = v25;
        __int16 v62 = 2048;
        *(void *)&long long v63 = v26;
        WORD4(v63) = 1024;
        *(_DWORD *)((char *)&v63 + 10) = v27;
        HIWORD(v63) = 1024;
        int v64 = v28;
        LOWORD(cf) = 1024;
        *(_DWORD *)((char *)&cf + 2) = v29;
        _os_log_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::abort: Cancelling network load", v57, 0x46u);
      }
      uint64_t v30 = *(void *)(*((void *)this + 485) + 3008);
      if (v30) {
        (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
      }
    }
    if (*((void *)this + 521))
    {
      *(void *)uint64_t v57 = 0;
      *(void *)&v57[8] = 0;
      WTF::URL::invalidate((WTF::URL *)&v57[8]);
      HIDWORD(v63) = 0;
      LOWORD(v64) = 3;
      CFTypeRef cf = 0;
      LOBYTE(v66) = 1;
      uint64_t v32 = *((void *)this + 521);
      uint64_t v33 = *(void *)v57;
      *(void *)((char *)&v63 + 4) = 0;
      *(void *)uint64_t v57 = 0;
      uint64_t v34 = *(WTF::StringImpl **)(v32 + 464);
      *(void *)(v32 + 464) = v33;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, v31);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
      WTF::URL::operator=(v32 + 472, (uint64_t)&v57[8]);
      uint64_t v36 = *(void *)((char *)&v63 + 4);
      *(void *)((char *)&v63 + 4) = 0;
      __int16 v37 = *(WTF::StringImpl **)(v32 + 512);
      *(void *)(v32 + 512) = v36;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2) {
          WTF::StringImpl::destroy(v37, v35);
        }
        else {
          *(_DWORD *)v37 -= 2;
        }
      }
      *(_DWORD *)(v32 + 520) = HIDWORD(v63);
      *(_WORD *)(v32 + 524) = v64;
      CFTypeRef v38 = cf;
      CFTypeRef cf = 0;
      __int16 v39 = *(const void **)(v32 + 528);
      *(void *)(v32 + 528) = v38;
      if (v39)
      {
        CFRelease(v39);
        CFTypeRef v56 = cf;
        *(unsigned char *)(v32 + 536) = v66;
        CFTypeRef cf = 0;
        if (v56) {
          CFRelease(v56);
        }
      }
      else
      {
        *(unsigned char *)(v32 + 536) = v66;
        CFTypeRef cf = 0;
      }
      uint64_t v40 = *(WTF::StringImpl **)((char *)&v63 + 4);
      *(void *)((char *)&v63 + 4) = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2) {
          WTF::StringImpl::destroy(v40, v35);
        }
        else {
          *(_DWORD *)v40 -= 2;
        }
      }
      __int16 v41 = *(WTF::StringImpl **)&v57[8];
      *(void *)&v57[8] = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2) {
          WTF::StringImpl::destroy(v41, v35);
        }
        else {
          *(_DWORD *)v41 -= 2;
        }
      }
      uint64_t v42 = *(WTF::StringImpl **)v57;
      *(void *)uint64_t v57 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2) {
          WTF::StringImpl::destroy(v42, v35);
        }
        else {
          *(_DWORD *)v42 -= 2;
        }
      }
      __int16 v43 = (void *)*((void *)this + 521);
      WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v57);
      WebKit::sendReplyToSynchronousRequest(v43, 0, (long long *)v57);
      __int16 v45 = v68;
      uint64_t v68 = 0;
      if (v45) {
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v45);
      }
      int v46 = v67;
      uint64_t v67 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2) {
          WTF::StringImpl::destroy(v46, v44);
        }
        else {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    return WebKit::NetworkResourceLoader::cleanup((uint64_t)this, 3);
  }
}

void *WebKit::sendReplyToSynchronousRequest(void *result, WebCore::FragmentedSharedBuffer *this, long long *a3)
{
  uint64_t v3 = result + 25;
  if (result[25])
  {
    uint64_t v5 = result;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    if (this && *((void *)this + 6))
    {
      WebCore::FragmentedSharedBuffer::makeContiguous((uint64_t *)&v23, this);
      uint64_t v6 = v23;
      uint64_t result = (void *)WebCore::SharedBuffer::data(v23);
      size_t v8 = *((void *)v6 + 6);
      if (v8)
      {
        BOOL v9 = result;
        unint64_t v10 = HIDWORD(v25);
        unint64_t v11 = v8 + HIDWORD(v25);
        if (v11 > v25)
        {
          unint64_t v12 = v25 + ((unint64_t)v25 >> 2);
          if (v12 >= 0x10) {
            unint64_t v13 = v12 + 1;
          }
          else {
            unint64_t v13 = 16;
          }
          if (v13 <= v11) {
            uint64_t v14 = (WTF::FastMalloc *)(v8 + HIDWORD(v25));
          }
          else {
            uint64_t v14 = (WTF::FastMalloc *)v13;
          }
          uint64_t result = (void *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v24, v14);
          unint64_t v10 = HIDWORD(v25);
        }
        if (v11 < v10)
        {
          __break(0xC471u);
          return result;
        }
        memcpy((char *)v24 + v10, v9, v8);
        HIDWORD(v25) = v11;
      }
      uint64_t v15 = (unsigned int *)v23;
      uint64_t v23 = 0;
      if (v15) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v15, v7);
      }
    }
    uint64_t v16 = WTF::fastMalloc((WTF *)0x88);
    WTF::Box<WebCore::NetworkLoadMetrics>::Data::Data<WebCore::NetworkLoadMetrics const&>(v16, a3);
    int v18 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)v5[40];
    v5[40] = v16;
    if (v18) {
      WTF::ThreadSafeRefCounted<WTF::Box<WebCore::NetworkLoadMetrics>::Data,(WTF::DestructionThread)0>::deref(v18, v17);
    }
    WebCore::ResourceResponse::ResourceResponse((WebCore::ResourceResponse *)v22, (const WebCore::ResourceResponse *)(v5 + 26));
    WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(v3, (uint64_t)(v5 + 58), (uint64_t)v22, (uint64_t)&v24);
    WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v22, v19);
    uint64_t v21 = v5[25];
    v5[25] = 0;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    uint64_t result = v24;
    if (v24)
    {
      uint64_t v24 = 0;
      LODWORD(v25) = 0;
      return (void *)WTF::fastFree((WTF *)result, v20);
    }
  }
  return result;
}

double WebKit::NetworkResourceLoader::computeResponseMetrics(WebKit::NetworkResourceLoader *this, const WebCore::ResourceResponse *a2, uint64_t a3)
{
  if (*((unsigned char *)a2 + 3089))
  {
    *(unsigned char *)this = 0;
    *((unsigned char *)this + 128) = 0;
  }
  else
  {
    WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)&v19);
    uint64_t v6 = *(void *)(a3 + 112);
    if (v6)
    {
      long long v7 = *(_OWORD *)(v6 + 40);
      long long v8 = *(_OWORD *)(v6 + 56);
      long long v9 = *(_OWORD *)(v6 + 72);
      uint64_t v24 = *(void *)(v6 + 88);
      long long v10 = *(_OWORD *)(v6 + 24);
      long long v19 = *(_OWORD *)(v6 + 8);
      long long v20 = v10;
      long long v22 = v8;
      long long v23 = v9;
      long long v21 = v7;
      WTF::String::operator=(&v25, (WTF::StringImpl **)(v6 + 96));
      long long v11 = *(_OWORD *)(v6 + 104);
      unint64_t v12 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)(v6 + 128);
      uint64_t v27 = *(void *)(v6 + 120);
      long long v26 = v11;
      if (v12) {
        ++*(_DWORD *)v12;
      }
      unint64_t v13 = v28;
      int v28 = v12;
      if (v13) {
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v13);
      }
    }
    LOWORD(v26) = *((_DWORD *)a2 + 1040);
    long long v14 = v22;
    *((_OWORD *)this + 2) = v21;
    *((_OWORD *)this + 3) = v14;
    *((_OWORD *)this + 4) = v23;
    long long v15 = v20;
    *(_OWORD *)this = v19;
    *((_OWORD *)this + 1) = v15;
    uint64_t v16 = v25;
    *((void *)this + 10) = v24;
    *((void *)this + 11) = v16;
    double result = *(double *)&v26;
    *((_OWORD *)this + 6) = v26;
    int v18 = v28;
    *((void *)this + 14) = v27;
    *((void *)this + 15) = v18;
    *((unsigned char *)this + 128) = 1;
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::transferToNewWebProcess(WebKit::NetworkResourceLoader *this, WebKit::NetworkConnectionToWebProcess *a2, const WebKit::NetworkResourceLoadParameters *a3)
{
  ++*((_DWORD *)a2 + 2);
  uint64_t v6 = (_DWORD *)*((void *)this + 484);
  *((void *)this + 484) = a2;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
  *((void *)this + 381) = *((void *)a3 + 371);
  *((void *)this + 10) = *(void *)a3;
  *((void *)this + 11) = *((void *)a3 + 1);
  *((_OWORD *)this + 6) = *((_OWORD *)a3 + 1);
  *((_OWORD *)this + 194) = *((_OWORD *)a3 + 189);
  *((_OWORD *)this + 195) = *((_OWORD *)a3 + 190);
  uint64_t v7 = *((void *)this + 550);
  if (v7)
  {
    if (*(void *)(v7 + 8))
    {
      uint64_t v8 = WebKit::NetworkConnectionToWebProcess::swConnection(a2);
      if (v8) {
        WebKit::WebSWServerConnection::controlClient(v8, (uint64_t)this + 80, *(WebCore::SWServerRegistration **)(*((void *)this + 550) + 8), (WebKit::NetworkResourceLoader *)((char *)this + 168), *(void *)(*((void *)this + 484) + 264));
      }
    }
  }
  if (*((double *)this + 551) != 0.0)
  {
    uint64_t v9 = *((void *)this + 381);
    long long v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)long long v10 = 2717;
    *((void *)v10 + 1) = v9;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    v18[0] = v10;
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v10, *((double *)this + 551));
    (*(void (**)(char *, IPC::Encoder **, void))(*((void *)this + 2) + 32))((char *)this + 16, v18, 0);
    unint64_t v12 = v18[0];
    v18[0] = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v11);
      WTF::fastFree(v16, v17);
    }
  }
  char v13 = *((unsigned char *)this + 4920);
  WebKit::NetworkResourceLoader::computeResponseMetrics((WebKit::NetworkResourceLoader *)v18, this, (uint64_t)this + 3888);
  long long v19 = (char *)this + 3888;
  char v20 = v13;
  char v21 = 1;
  long long v22 = v18;
  IPC::MessageSender::send<Messages::WebResourceLoader::DidReceiveResponse>((uint64_t)this + 16, (uint64_t)&v19);
  return std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v14);
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebResourceLoader::DidReceiveResponse>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2714;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v10 = v5;
  IPC::ArgumentCoder<std::tuple<WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> const&>,0ul,1ul,2ul,3ul>(v5, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v10, 0);
  double result = v10;
  long long v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPage::AddConsoleMessage,WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2135;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  long long v11 = v6;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,0ul,1ul,2ul,3ul,4ul>(v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v11, 0);
  double result = v11;
  long long v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::shouldInterruptLoadForCSPFrameAncestorsOrXFrameOptions(WebKit::NetworkResourceLoader *this, const WebCore::ResourceResponse *a2)
{
  if (*(unsigned char *)(*((void *)this + 484) + 345)) {
    return 0;
  }
  uint64_t v4 = (WebCore::PreviewConverter *)WebCore::ResourceResponseBase::mimeType(a2);
  if (WebCore::PreviewConverter::supportsMIMEType(v4, v5)) {
    return 0;
  }
  uint64_t v8 = WebCore::ResourceResponseBase::url(a2);
  uint64_t v9 = *(WTF::StringImpl **)v8;
  if (*(void *)v8)
  {
    *(_DWORD *)v9 += 2;
    long long v10 = *(_OWORD *)(v8 + 8);
    long long v75 = *(_OWORD *)(v8 + 24);
    long long v74 = v10;
    *(_DWORD *)v9 += 2;
  }
  else
  {
    long long v65 = *(_OWORD *)(v8 + 8);
    long long v75 = *(_OWORD *)(v8 + 24);
    long long v74 = v65;
  }
  v73 = v9;
  uint64_t v69 = v9;
  long long v70 = v74;
  long long v71 = v75;
  MEMORY[0x199735820](v72, &v69, (char *)this + 24, (char *)this + 64);
  unint64_t v12 = v69;
  uint64_t v69 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  MEMORY[0x199739C00](&v69, a2);
  WebCore::ResourceRequestBase::httpReferrer((uint64_t *)&v78, (WebKit::NetworkResourceLoader *)((char *)this + 168));
  WebCore::ContentSecurityPolicy::didReceiveHeaders();
  long long v14 = v78;
  uint64_t v78 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v13);
  if (!WebCore::ContentSecurityPolicy::allowFrameAncestors()
    || (WebKit::NetworkResourceLoader::shouldInterruptNavigationForCrossOriginEmbedderPolicy(this, a2) & 1) != 0)
  {
    goto LABEL_17;
  }
  if ((WebCore::ContentSecurityPolicy::overridesXFrameOptions((WebCore::ContentSecurityPolicy *)v72) & 1) == 0)
  {
    WebCore::ResourceResponseBase::httpHeaderField();
    if (v68)
    {
      uint64_t v16 = (WebCore::SecurityOrigin *)WebCore::ResourceResponseBase::url(a2);
      if (*((unsigned char *)this + 315) != 1 || *((_DWORD *)this + 837))
      {
        switch(WebCore::parseXFrameOptionsHeader())
        {
          case 1u:
            goto LABEL_67;
          case 2u:
            WebCore::SecurityOrigin::create((uint64_t *)&v69, v16, v15);
            uint64_t v17 = *((unsigned int *)this + 837);
            if (!v17)
            {
              __break(0xC471u);
              JUMPOUT(0x198BA2AF4);
            }
            int v18 = *(atomic_uint **)(*((void *)this + 417) + 8 * v17 - 8);
            int v19 = 1;
            atomic_fetch_add(v18, 1u);
            if (WebCore::SecurityOrigin::isSameSchemeHostPort(v69, (const WebCore::SecurityOrigin *)v18))
            {
              uint64_t v21 = *((unsigned int *)this + 837);
              if (v21)
              {
                long long v22 = (const WebCore::SecurityOrigin **)*((void *)this + 417);
                uint64_t v23 = 8 * v21 - 8;
                do
                {
                  uint64_t v24 = *v22++;
                  int isSameSchemeHostPort = WebCore::SecurityOrigin::isSameSchemeHostPort(v69, v24);
                  if (isSameSchemeHostPort) {
                    BOOL v26 = v23 == 0;
                  }
                  else {
                    BOOL v26 = 1;
                  }
                  v23 -= 8;
                }
                while (!v26);
                int v19 = isSameSchemeHostPort ^ 1;
              }
              else
              {
                int v19 = 0;
              }
            }
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v18, v20);
            BOOL v44 = v69;
            uint64_t v69 = 0;
            if (v44)
            {
              WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v44, v15);
              if (!v19) {
                goto LABEL_89;
              }
            }
            else if (!v19)
            {
              goto LABEL_89;
            }
LABEL_67:
            __int16 v45 = (WTF::URL *)WebCore::ResourceResponseBase::url(a2);
            WTF::URL::stringCenterEllipsizedToLength(v45);
            int v46 = v68;
            if (v68) {
              *(_DWORD *)v68 += 2;
            }
            uint64_t v66 = v46;
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Refused to display '", 21, (uint64_t *)&v67, (uint64_t)"' in a frame because it set 'X-Frame-Options' to '", 51, (uint64_t *)&v66, (uint64_t)"'.", 3, &v82);
            BOOL v48 = v66;
            uint64_t v66 = 0;
            if (v48)
            {
              if (*(_DWORD *)v48 == 2) {
                WTF::StringImpl::destroy(v48, v47);
              }
              else {
                *(_DWORD *)v48 -= 2;
              }
            }
            uint64_t v49 = v67;
            uint64_t v67 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2) {
                WTF::StringImpl::destroy(v49, v47);
              }
              else {
                *(_DWORD *)v49 -= 2;
              }
            }
            uint64_t v78 = (WTF::StringImpl *)*((void *)this + 381);
            char v79 = 1;
            uint64_t v69 = (WebKit::NetworkResourceLoader *)((char *)this + 96);
            LOWORD(v70) = 520;
            *((void *)&v70 + 1) = &v82;
            *(void *)&long long v71 = &v78;
            uint64_t v50 = *((void *)this + 11);
            if (!v50)
            {
              __break(0xC471u);
              JUMPOUT(0x198BA2AACLL);
            }
            uint64_t v51 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v51 = 2135;
            *((void *)v51 + 1) = v50;
            *((void *)v51 + 66) = (char *)v51 + 16;
            *((void *)v51 + 67) = 512;
            *((void *)v51 + 68) = 0;
            *((void *)v51 + 70) = 0;
            *((void *)v51 + 69) = 0;
            IPC::Encoder::encodeHeader(v51);
            __int16 v83 = v51;
            IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,0ul,1ul,2ul,3ul,4ul>(v51, (uint64_t)&v69);
            (*(void (**)(char *, IPC::Encoder **, void))(*((void *)this + 2) + 32))((char *)this + 16, &v83, 0);
            BOOL v53 = v83;
            __int16 v83 = 0;
            if (v53)
            {
              IPC::Encoder::~Encoder(v53, v52);
              WTF::fastFree(v56, v57);
            }
            int v54 = v82;
            uint64_t v82 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 2) {
                WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v52);
              }
              else {
                *(_DWORD *)v54 -= 2;
              }
            }
            BOOL v55 = v68;
            uint64_t v68 = 0;
            if (v55)
            {
              if (*(_DWORD *)v55 == 2) {
                WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v52);
              }
              else {
                *(_DWORD *)v55 -= 2;
              }
            }
            break;
          case 4u:
            WTF::URL::stringCenterEllipsizedToLength(v16);
            uint64_t v27 = v68;
            *(_DWORD *)v68 += 2;
            uint64_t v76 = v27;
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Invalid 'X-Frame-Options' header encountered when loading '", 60, (uint64_t *)&v77, (uint64_t)"': '", 5, (uint64_t *)&v76, (uint64_t)"' is not a recognized directive. The header will be ignored.", 61, &v82);
            BOOL v29 = v76;
            uint64_t v76 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2) {
                WTF::StringImpl::destroy(v29, v28);
              }
              else {
                *(_DWORD *)v29 -= 2;
              }
            }
            uint64_t v33 = v77;
            __int16 v77 = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 2) {
                WTF::StringImpl::destroy(v33, v28);
              }
              else {
                *(_DWORD *)v33 -= 2;
              }
            }
            uint64_t v78 = (WTF::StringImpl *)*((void *)this + 381);
            char v79 = 1;
            uint64_t v69 = (WebKit::NetworkResourceLoader *)((char *)this + 96);
            LOWORD(v70) = 513;
            *((void *)&v70 + 1) = &v82;
            *(void *)&long long v71 = &v78;
            uint64_t v34 = *((void *)this + 11);
            if (!v34)
            {
              __break(0xC471u);
              JUMPOUT(0x198BA2ACCLL);
            }
            __int16 v35 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)__int16 v35 = 2135;
            *((void *)v35 + 1) = v34;
            *((void *)v35 + 66) = (char *)v35 + 16;
            *((void *)v35 + 67) = 512;
            *((void *)v35 + 68) = 0;
            *((void *)v35 + 70) = 0;
            *((void *)v35 + 69) = 0;
            IPC::Encoder::encodeHeader(v35);
            __int16 v83 = v35;
            IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,0ul,1ul,2ul,3ul,4ul>(v35, (uint64_t)&v69);
            (*(void (**)(char *, IPC::Encoder **, void))(*((void *)this + 2) + 32))((char *)this + 16, &v83, 0);
            uint64_t v36 = v83;
            __int16 v83 = 0;
            if (v36)
            {
              IPC::Encoder::~Encoder(v36, v15);
              WTF::fastFree(v58, v59);
            }
            __int16 v37 = v82;
            uint64_t v82 = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2) {
                WTF::StringImpl::destroy(v37, v15);
              }
              else {
                *(_DWORD *)v37 -= 2;
              }
            }
            goto LABEL_89;
          case 5u:
            uint64_t v30 = v68;
            *(_DWORD *)v68 += 2;
            __int16 v81 = v30;
            WTF::URL::stringCenterEllipsizedToLength(v16);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Multiple 'X-Frame-Options' headers with conflicting values ('", 62, (uint64_t *)&v81, (uint64_t)"') encountered when loading '", 30, (uint64_t *)&v80, (uint64_t)"'. Falling back to 'DENY'.", 27, &v82);
            uint64_t v32 = v80;
            uint64_t v80 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2) {
                WTF::StringImpl::destroy(v32, v31);
              }
              else {
                *(_DWORD *)v32 -= 2;
              }
            }
            CFTypeRef v38 = v81;
            __int16 v81 = 0;
            if (v38)
            {
              if (*(_DWORD *)v38 == 2) {
                WTF::StringImpl::destroy(v38, v31);
              }
              else {
                *(_DWORD *)v38 -= 2;
              }
            }
            uint64_t v78 = (WTF::StringImpl *)*((void *)this + 381);
            char v79 = 1;
            uint64_t v69 = (WebKit::NetworkResourceLoader *)((char *)this + 96);
            LOWORD(v70) = 513;
            *((void *)&v70 + 1) = &v82;
            *(void *)&long long v71 = &v78;
            uint64_t v39 = *((void *)this + 11);
            if (!v39)
            {
              __break(0xC471u);
              JUMPOUT(0x198BA2AECLL);
            }
            uint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v40 = 2135;
            *((void *)v40 + 1) = v39;
            *((void *)v40 + 66) = (char *)v40 + 16;
            *((void *)v40 + 67) = 512;
            *((void *)v40 + 68) = 0;
            *((void *)v40 + 70) = 0;
            *((void *)v40 + 69) = 0;
            IPC::Encoder::encodeHeader(v40);
            __int16 v83 = v40;
            IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,0ul,1ul,2ul,3ul,4ul>(v40, (uint64_t)&v69);
            (*(void (**)(char *, IPC::Encoder **, void))(*((void *)this + 2) + 32))((char *)this + 16, &v83, 0);
            uint64_t v42 = v83;
            __int16 v83 = 0;
            if (v42)
            {
              IPC::Encoder::~Encoder(v42, v41);
              WTF::fastFree(v60, v61);
            }
            __int16 v43 = v82;
            uint64_t v82 = 0;
            if (v43)
            {
              if (*(_DWORD *)v43 == 2) {
                WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v41);
              }
              else {
                *(_DWORD *)v43 -= 2;
              }
            }
            goto LABEL_67;
          default:
            goto LABEL_89;
        }
LABEL_17:
        uint64_t v6 = 1;
        goto LABEL_94;
      }
LABEL_89:
      __int16 v62 = v68;
      uint64_t v68 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2) {
          WTF::StringImpl::destroy(v62, v15);
        }
        else {
          *(_DWORD *)v62 -= 2;
        }
      }
    }
  }
  uint64_t v6 = 0;
LABEL_94:
  MEMORY[0x199735830](v72);
  int v64 = v73;
  v73 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2) {
      WTF::StringImpl::destroy(v64, v63);
    }
    else {
      *(_DWORD *)v64 -= 2;
    }
  }
  return v6;
}

uint64_t WebKit::NetworkResourceLoader::shouldInterruptNavigationForCrossOriginEmbedderPolicy(WebKit::NetworkResourceLoader *this, const WebCore::ResourceResponse *a2)
{
  if (!*((_WORD *)this + 1624)) {
    return 0;
  }
  uint64_t v5 = (WTF *)WebCore::obtainCrossOriginEmbedderPolicy();
  int v7 = v26[0];
  if (*((unsigned char *)this + 3249)) {
    BOOL v8 = v26[0] == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    if ((*((unsigned char *)this + 3176) & 1) == 0) {
      WTF::aboutBlankURL(v5);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::sendCOEPInheritenceViolation();
    uint64_t v9 = v20;
    char v20 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v6);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    int v7 = v26[0];
  }
  if (!*((unsigned char *)this + 3248) || v7)
  {
    WebCore::CrossOriginEmbedderPolicy::~CrossOriginEmbedderPolicy((WebCore::CrossOriginEmbedderPolicy *)v26, v6);
    return 0;
  }
  long long v10 = (WTF::URL *)WebCore::ResourceResponseBase::url(a2);
  WTF::URL::stringCenterEllipsizedToLength(v10);
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Refused to display '", 21, (uint64_t *)&v24, (uint64_t)"' in a frame because of Cross-Origin-Embedder-Policy.", 54, &v25);
  unint64_t v12 = v24;
  uint64_t v24 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v18 = *((void *)this + 381);
  char v19 = 1;
  char v20 = (WebKit::NetworkResourceLoader *)((char *)this + 96);
  __int16 v21 = 520;
  long long v22 = &v25;
  uint64_t v23 = &v18;
  uint64_t v13 = *((void *)this + 11);
  if (v13)
  {
    long long v14 = IPC::MessageSender::send<Messages::WebPage::AddConsoleMessage,WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>((uint64_t)this + 16, (uint64_t)&v20, v13);
    if ((*((unsigned char *)this + 3176) & 1) == 0) {
      WTF::aboutBlankURL(v14);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::sendCOEPInheritenceViolation();
    uint64_t v16 = v20;
    char v20 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = v25;
    uint64_t v25 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v15);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    WebCore::CrossOriginEmbedderPolicy::~CrossOriginEmbedderPolicy((WebCore::CrossOriginEmbedderPolicy *)v26, v15);
    return 1;
  }
  else
  {
    uint64_t result = 145;
    __break(0xC471u);
  }
  return result;
}

void WebKit::NetworkResourceLoader::doCrossOriginOpenerHandlingOfResponse(WebKit::NetworkResourceLoader *this@<X0>, const WebCore::ResourceResponse *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 315) == 1 && !*((_DWORD *)this + 837) && *((unsigned char *)this + 3432))
  {
    WebCore::ResourceResponseBase::httpHeaderField();
    int v7 = v32;
    uint64_t v32 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
      uint64_t v8 = WebCore::ResourceResponseBase::url(a2);
      uint64_t v9 = *(WTF::StringImpl **)v8;
      if (*(void *)v8) {
        *(_DWORD *)v9 += 2;
      }
      uint64_t v32 = v9;
      long long v10 = *(_OWORD *)(v8 + 24);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)(v8 + 8);
      *(_OWORD *)&v33[16] = v10;
      uint64_t v39 = this;
      std::make_unique[abi:sn180100]<WebCore::ContentSecurityPolicy,WTF::URL,decltype(nullptr),WebKit::NetworkResourceLoader *>((uint64_t *)&v40, (uint64_t)&v32, &v39);
      unint64_t v12 = v40;
      uint64_t v13 = v32;
      uint64_t v32 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v11);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      MEMORY[0x199739C00](&v32, a2);
      WebCore::ResourceRequestBase::httpReferrer((uint64_t *)&v40, (WebKit::NetworkResourceLoader *)((char *)this + 168));
      WebCore::ContentSecurityPolicy::didReceiveHeaders();
      long long v15 = v40;
      uint64_t v40 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v14);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      int v7 = (WTF::StringImpl *)WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v14);
    }
    else
    {
      unint64_t v12 = 0;
    }
    uint64_t v16 = (char *)this + 4800;
    if (!*((unsigned char *)this + 4800))
    {
      uint64_t v17 = (atomic_uint *)*((void *)this + 15);
      if (v17)
      {
        atomic_fetch_add(v17, 1u);
        uint64_t v40 = (WTF::StringImpl *)v17;
      }
      else
      {
        WebCore::SecurityOrigin::createOpaque((uint64_t *)&v40, v7);
      }
      v41[0] = 0;
      char v42 = 0;
      if (*((unsigned char *)this + 3744))
      {
        std::construct_at[abi:sn180100]<WebCore::NavigationRequester,WebCore::NavigationRequester const&,WebCore::NavigationRequester*>((uint64_t)v41, (uint64_t)this + 3520);
        char v42 = 1;
      }
      WebCore::CrossOriginOpenerPolicyEnforcementResult::from();
      std::optional<WebCore::CrossOriginOpenerPolicyEnforcementResult>::operator=[abi:sn180100]<WebCore::CrossOriginOpenerPolicyEnforcementResult,void>((uint64_t)this + 4720, (uint64_t)&v32);
      WebCore::CrossOriginOpenerPolicyEnforcementResult::~CrossOriginOpenerPolicyEnforcementResult((WebCore::CrossOriginOpenerPolicyEnforcementResult *)&v32, v18);
      if (v42) {
        WebCore::NavigationRequester::~NavigationRequester((WebCore::NavigationRequester *)v41, v19);
      }
      char v20 = v40;
      uint64_t v40 = 0;
      if (v20) {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v20, v19);
      }
    }
    WebCore::ResourceRequestBase::httpReferrer((uint64_t *)&v40, (WebKit::NetworkResourceLoader *)((char *)this + 168));
    if (*v16)
    {
      WebCore::doCrossOriginOpenerHandlingOfResponse();
      std::__optional_storage_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>>((uint64_t)this + 4720, (unsigned __int8 *)&v32);
      std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v32, v21);
      uint64_t v23 = v40;
      uint64_t v40 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v22);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      if (*v16)
      {
        *a3 = 0;
        a3[80] = 0;
      }
      else
      {
        WTF::String::String((uint64_t *)&v40, *MEMORY[0x1E4FB64F8], *(void *)(MEMORY[0x1E4FB64F8] + 8));
        uint64_t v24 = WebCore::ResourceResponseBase::url(a2);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v25 = v32;
        BOOL v26 = v40;
        if (v40) {
          *(_DWORD *)v40 += 2;
        }
        uint64_t v32 = v26;
        uint64_t v27 = *(_DWORD **)v24;
        if (*(void *)v24) {
          *v27 += 2;
        }
        *(void *)uint64_t v33 = v27;
        long long v28 = *(_OWORD *)(v24 + 8);
        *(_OWORD *)&v33[24] = *(_OWORD *)(v24 + 24);
        *(_OWORD *)&v33[8] = v28;
        if (v25) {
          *(_DWORD *)v25 += 2;
        }
        uint64_t v34 = v25;
        int v35 = 0;
        __int16 v36 = 2;
        uint64_t v37 = 0;
        char v38 = 1;
        std::optional<std::tuple<WebCore::ResourceError>>::optional[abi:sn180100]<std::in_place_t,WebCore::ResourceError,void>((uint64_t)a3, (uint64_t *)&v32);
        WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&v32, v29);
        if (v25)
        {
          if (*(_DWORD *)v25 == 2) {
            WTF::StringImpl::destroy(v25, v30);
          }
          else {
            *(_DWORD *)v25 -= 2;
          }
        }
        long long v31 = v40;
        uint64_t v40 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2) {
            WTF::StringImpl::destroy(v31, v30);
          }
          else {
            *(_DWORD *)v31 -= 2;
          }
        }
      }
      if (v12) {
        WebCore::ContentSecurityPolicy::operator delete((uint64_t)v12, 0xF0uLL);
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *a3 = 0;
    a3[80] = 0;
  }
}

void std::optional<WebCore::CrossOriginOpenerPolicyEnforcementResult>::operator=[abi:sn180100]<WebCore::CrossOriginOpenerPolicyEnforcementResult,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    WebCore::CrossOriginOpenerPolicyEnforcementResult::operator=(a1, a2);
  }
  else
  {
    WebCore::CrossOriginOpenerPolicyEnforcementResult::CrossOriginOpenerPolicyEnforcementResult(a1, a2);
    *(unsigned char *)(v2 + 80) = 1;
  }
}

void WebCore::CrossOriginOpenerPolicyEnforcementResult::~CrossOriginOpenerPolicyEnforcementResult(WebCore::CrossOriginOpenerPolicyEnforcementResult *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
  }
  uint64_t v6 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
}

uint64_t WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::DeleteWebsiteDataInWebProcessesForOrigin,WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_2>(os_unfair_lock_s *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v6 = &unk_1EE9C6278;
  v6[1] = v5;
  uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 322;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  long long v15 = v8;
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(v8, *(int **)a2);
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v8, *(void *)(a2 + 8));
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *(uint64_t **)(a2 + 24));
  v14[0] = (uint64_t)v6;
  v14[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v15, v14, 0, 0);
  uint64_t v10 = v14[0];
  v14[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v15;
  long long v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::ReloadExecutionContextsForOrigin,WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_3>(os_unfair_lock_s *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v6 = &unk_1EE9C62A0;
  v6[1] = v5;
  uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 342;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  long long v15 = v8;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v8, *(void *)a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v8, *(void *)(a2 + 16));
  v14[0] = (uint64_t)v6;
  v14[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v15, v14, 0, 0);
  uint64_t v10 = v14[0];
  v14[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v15;
  long long v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::didReceiveInformationalResponse(uint64_t a1, WebCore::ResourceResponseBase *this)
{
  uint64_t result = WebCore::ResourceResponseBase::httpStatusCode(this);
  if (result == 103)
  {
    uint64_t v5 = *(void *)(a1 + 4352);
    if (!v5)
    {
      uint64_t v5 = WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v5 = &unk_1EE9C2F80;
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 56), a1 + 48);
      uint64_t v6 = *(atomic_uint **)(a1 + 56);
      if (v6) {
        atomic_fetch_add(v6, 1u);
      }
      *(void *)(v5 + 8) = v6;
      *(unsigned char *)(v5 + 16) = 0;
      uint64_t v7 = *(void *)(a1 + 4352);
      *(void *)(a1 + 4352) = v5;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
        uint64_t v5 = *(void *)(a1 + 4352);
      }
    }
    return WebKit::EarlyHintsResourceLoader::handleEarlyHintsResponse(v5, this);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkResourceLoader::didReceiveResponse(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v5 = a1;
  uint64_t v230 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(v5 + 88);
    if (!v7)
    {
      __break(0xC471u);
      goto LABEL_224;
    }
    uint64_t v8 = *(void *)(v5 + 80);
    uint64_t v9 = *(void *)(v5 + 96);
    uint64_t v10 = *(void *)(v5 + 3048);
    BOOL v11 = *(unsigned __int8 *)(v5 + 315) == 1;
    int v187 = *(unsigned __int8 *)(v5 + 3088);
    log = v6;
    BOOL v12 = *(void *)(v5 + 4168) != 0;
    int v13 = WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)a2);
    WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)a2);
    WTF::String::utf8();
    if (*(void *)v209) {
      uint64_t v14 = *(void *)v209 + 16;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = WebCore::ResourceResponseBase::expectedContentLength((WebCore::ResourceResponseBase *)a2);
    BOOL v16 = *(void *)(v5 + 4288) != 0;
    BOOL v17 = *(void *)(v5 + 4320) != 0;
    *(_DWORD *)buf = 134221058;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v8;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&unsigned char buf[24] = v7;
    *(_WORD *)&buf[32] = 2048;
    *(void *)&buf[34] = v9;
    *(_WORD *)&buf[42] = 2048;
    *(void *)&buf[44] = v10;
    *(_WORD *)&buf[52] = 1024;
    *(_DWORD *)&buf[54] = v11;
    *(_WORD *)&buf[58] = 1024;
    *(_DWORD *)&buf[60] = v187;
    *(_WORD *)&buf[64] = 1024;
    *(_DWORD *)&buf[66] = v12;
    *(_WORD *)&buf[70] = 1024;
    LODWORD(v219) = v13;
    WORD2(v219) = 2082;
    *(void *)((char *)&v219 + 6) = v14;
    HIWORD(v219) = 2048;
    *(void *)&long long v220 = v15;
    WORD4(v220) = 1024;
    *(_DWORD *)((char *)&v220 + 10) = v16;
    HIWORD(v220) = 1024;
    LODWORD(v2WebKit::NetworkResourceLoader::startRequest((WebKit::NetworkResourceLoader *)this, this + 21) = v17;
    _os_log_impl(&dword_1985F2000, log, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: (httpStatusCode=%d, MIMEType=%{public}s, expectedContentLength=%lld, hasCachedEntryForValidation=%d, hasNetworkLoadChecker=%d)", buf, 0x6Cu);
    char v19 = *(WTF **)v209;
    *(void *)v209 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1) {
        WTF::fastFree(v19, v18);
      }
      else {
        --*(_DWORD *)v19;
      }
    }
    uint64_t v5 = a1;
  }
  if (*(void *)(v5 + 4808) && (WebCore::ContentFilter::continueAfterResponseReceived() & 1) == 0)
  {
    uint64_t v78 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v78 + 16))(v78, 2);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v78 + 8))(v78);
  }
  char v20 = (unsigned char *)(v5 + 4136);
  if (*(unsigned char *)(v5 + 315) == 1) {
    WebKit::NetworkResourceLoader::didReceiveMainResourceResponse((WebKit::NetworkResourceLoader *)v5, (const WebCore::ResourceResponse *)a2);
  }
  __int16 v21 = (WebCore::ResourceResponse *)(v5 + 3888);
  WebCore::ResourceResponseBase::operator=(v5 + 3888, a2);
  uint64_t v22 = *(void *)(a2 + 240);
  *(void *)(a2 + 240) = 0;
  uint64_t v23 = *(const void **)(v5 + 4128);
  *(void *)(v5 + 4128) = v22;
  if (v23) {
    CFRelease(v23);
  }
  *char v20 = *(unsigned char *)(a2 + 248);
  *(unsigned char *)(v5 + 4920) = a3;
  if ((*(unsigned char *)(v5 + 4688) & 1) == 0)
  {
    uint64_t v24 = WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)(v5 + 3888));
    WTF::String::operator=((uint64_t *)(v5 + 4680), (WTF::StringImpl **)v24);
    long long v25 = *(_OWORD *)(v24 + 24);
    *(_OWORD *)(v5 + 4688) = *(_OWORD *)(v24 + 8);
    *(_OWORD *)(v5 + 4704) = v25;
  }
  if (*(unsigned char *)(v5 + 4344))
  {
    uint64_t v89 = *(void *)(v5 + 4320);
    if (v89)
    {
      WebCore::NetworkLoadInformation::NetworkLoadInformation((uint64_t)buf, v89 + 536);
      WebCore::ResourceResponse::operator=((uint64_t)&v226, v5 + 3888);
      WebKit::NetworkConnectionToWebProcess::addNetworkLoadInformation(*(void *)(v5 + 3872), *(void *)(v5 + 3048), (uint64_t)buf);
      WebCore::NetworkLoadInformation::~NetworkLoadInformation((WebCore::NetworkLoadInformation *)buf, v90);
    }
  }
  WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)(v5 + 3888));
  if (WTF::URL::protocolIs())
  {
    uint64_t v91 = *(void *)(v5 + 3872);
    uint64_t v92 = *(void *)(v91 + 80);
    *(void *)buf = *(void *)(v91 + 88);
    uint64_t v93 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v92 + 224), buf);
    if (v93)
    {
      __int16 v94 = (WebKit::NetworkSession *)v93;
      ++*(_DWORD *)(v93 + 16);
      WebKit::NetworkResourceLoader::computeResponseMetrics((WebKit::NetworkResourceLoader *)buf, (const WebCore::ResourceResponse *)v5, v5 + 3888);
      if ((_BYTE)v223) {
        WebKit::NetworkSession::recordHTTPSConnectionTiming(v94, (const WebCore::NetworkLoadMetrics *)buf);
      }
      std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v95);
      int v96 = *((_DWORD *)v94 + 4);
      if (!v96)
      {
        __break(0xC471u);
        JUMPOUT(0x198BA4E04);
      }
      *((_DWORD *)v94 + 4) = v96 - 1;
    }
  }
  WebKit::NetworkResourceLoader::resourceLoadInfo((WebKit::NetworkResourceLoader *)v194, v5);
  BOOL v26 = (unsigned int **)(v5 + 4152);
  if (!*(void *)(v5 + 4152)
    && WebCore::ResourceResponseBase::expectedContentLength((WebCore::ResourceResponseBase *)(v5 + 3888)) > 0x100000
    && (HIBYTE(v201) == 13 || HIBYTE(v201) == 4))
  {
    __int16 v77 = (uint64_t *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)(v5 + 3888));
    if (WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1::operator()(v77))
    {
      WebCore::SharedBufferBuilder::empty((WebCore::SharedBufferBuilder *)(v5 + 4152));
      *(void *)(v5 + 3080) = 0x3FA999999999999ALL;
    }
  }
  if (!*(void *)(v5 + 4168))
  {
    uint64_t v27 = (void *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)(v5 + 3888));
    if (MEMORY[0x19972E990](*v27, "multipart/x-mixed-replace", 25))
    {
      CFTypeRef v98 = *v26;
      *BOOL v26 = 0;
      if (v98) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v98, v28);
      }
    }
  }
  BOOL v29 = (void *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)(v5 + 3888));
  if (MEMORY[0x19972E990](*v29, "multipart/x-mixed-replace", 25))
  {
    int v97 = *(unsigned int **)(v5 + 4280);
    *(void *)(v5 + 4280) = 0;
    if (v97) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v97, v30);
    }
  }
  if (!*(void *)(v5 + 4288)) {
    goto LABEL_44;
  }
  int v31 = WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)(v5 + 3888));
  uint64_t v32 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v33 = *(void *)(v5 + 88);
    if (!v33)
    {
      __break(0xC471u);
      JUMPOUT(0x198BA4158);
    }
    uint64_t v34 = *(void *)(v5 + 80);
    v188 = v32;
    uint64_t v35 = *(void *)(v5 + 96);
    uint64_t v36 = *(void *)(v5 + 3048);
    BOOL v37 = *(unsigned __int8 *)(v5 + 315) == 1;
    int v38 = *(unsigned __int8 *)(v5 + 3088);
    BOOL v39 = *(void *)(v5 + 4168) != 0;
    int isConditional = WebCore::ResourceRequestBase::isConditional((WebCore::ResourceRequestBase *)(v5 + 168));
    *(_DWORD *)buf = 134220288;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v34;
    char v20 = (unsigned char *)(v5 + 4136);
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&unsigned char buf[24] = v33;
    *(_WORD *)&buf[32] = 2048;
    *(void *)&buf[34] = v35;
    *(_WORD *)&buf[42] = 2048;
    *(void *)&buf[44] = v36;
    *(_WORD *)&buf[52] = 1024;
    *(_DWORD *)&buf[54] = v37;
    *(_WORD *)&buf[58] = 1024;
    *(_DWORD *)&buf[60] = v38;
    __int16 v21 = (WebCore::ResourceResponse *)(v5 + 3888);
    *(_WORD *)&buf[64] = 1024;
    *(_DWORD *)&buf[66] = v39;
    *(_WORD *)&buf[70] = 1024;
    LODWORD(v219) = v31 == 304;
    WORD2(v219) = 1024;
    *(_DWORD *)((char *)&v219 + 6) = isConditional;
    _os_log_impl(&dword_1985F2000, v188, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Received revalidation response (validationSucceeded=%d, wasOriginalRequestConditional=%d)", buf, 0x52u);
  }
  if (v31 == 304)
  {
    WebKit::NetworkCache::Cache::update(*(void **)(v5 + 4272), (WebCore::NetworkStorageSession *)(v5 + 168), *(void *)(v5 + 4288), v21, v20[784], (WebKit::NetworkCache::Entry **)buf);
    __int16 v41 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(v5 + 4288), v41);
    uint64_t v43 = *(WebKit::NetworkCache::Entry **)buf;
    *(void *)buf = 0;
    if (v43)
    {
      WebKit::NetworkCache::Entry::~Entry(v43, v42);
      WTF::fastFree(v79, v80);
    }
    if (WebCore::ResourceRequestBase::isConditional((WebCore::ResourceRequestBase *)(v5 + 168)))
    {
      WebCore::ResourceResponseBase::httpHeaderField();
      if (*(void *)buf && *(_DWORD *)(*(void *)buf + 4)) {
        WebCore::ResourceResponseBase::setHTTPHeaderField();
      }
      WebCore::ResourceResponseBase::httpHeaderField();
      if (*(void *)v209 && *(_DWORD *)(*(void *)v209 + 4)) {
        WebCore::ResourceResponseBase::setHTTPHeaderField();
      }
      std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(v5 + 4288), 0);
      __int16 v45 = *(WTF::StringImpl **)v209;
      *(void *)v209 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2) {
          WTF::StringImpl::destroy(v45, v44);
        }
        else {
          *(_DWORD *)v45 -= 2;
        }
      }
      int v46 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2) {
          WTF::StringImpl::destroy(v46, v44);
        }
        else {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
  }
  else
  {
    std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(v5 + 4288), 0);
  }
  if (!*(void *)(v5 + 4288))
  {
LABEL_44:
    __int16 v47 = *(WebKit::NetworkLoadChecker **)(v5 + 4320);
    if (v47)
    {
      uint64_t v48 = *(void *)(v5 + 3880);
      uint64_t v49 = (const WebCore::ResourceRequest *)(v48 ? v48 + 3024 : v5 + 168);
      WebKit::NetworkLoadChecker::validateResponse(v47, v49, (WebCore::AdditionalNetworkLoadMetricsForWebInspector ***)v21, (uint64_t)v209);
      int v51 = v216;
      if ((_BYTE)v216)
      {
        int v99 = off_1EB358988;
        uint64_t v100 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR);
        if (v100)
        {
          os_log_t loga = (os_log_t)v21;
          uint64_t v157 = *(void *)(v5 + 88);
          if (!v157)
          {
            __break(0xC471u);
            JUMPOUT(0x198BA4E70);
          }
          uint64_t v158 = *(void *)(a1 + 80);
          uint64_t v159 = *(void *)(a1 + 96);
          uint64_t v160 = *(void *)(a1 + 3048);
          BOOL v161 = *(unsigned __int8 *)(a1 + 315) == 1;
          int v189 = *(unsigned __int8 *)(a1 + 3088);
          BOOL v162 = *(void *)(a1 + 4168) != 0;
          MEMORY[0x19973EC60](v209);
          WTF::String::utf8();
          if (v227) {
            uint64_t v163 = v227 + 16;
          }
          else {
            uint64_t v163 = 0;
          }
          MEMORY[0x19973EC60](v209);
          *(_DWORD *)buf = 134220290;
          *(void *)&uint8_t buf[4] = a1;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v158;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = v157;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v159;
          *(_WORD *)&buf[42] = 2048;
          *(void *)&buf[44] = v160;
          *(_WORD *)&buf[52] = 1024;
          *(_DWORD *)&buf[54] = v161;
          *(_WORD *)&buf[58] = 1024;
          *(_DWORD *)&buf[60] = v189;
          *(_WORD *)&buf[64] = 1024;
          *(_DWORD *)&buf[66] = v162;
          *(_WORD *)&buf[70] = 2082;
          *(void *)&long long v219 = v163;
          WORD4(v219) = 1024;
          *(_DWORD *)((char *)&v219 + 10) = HIDWORD(v215);
          _os_log_error_impl(&dword_1985F2000, v99, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: NetworkLoadChecker::validateResponse returned an error (error.domain=%{public}s, error.code=%d)", buf, 0x56u);
          uint64_t v100 = v227;
          uint64_t v227 = 0;
          if (v100)
          {
            if (*(_DWORD *)v100 == 1) {
              uint64_t v100 = WTF::fastFree((WTF *)v100, v164);
            }
            else {
              --*(_DWORD *)v100;
            }
          }
          __int16 v21 = (WebCore::ResourceResponse *)loga;
          uint64_t v5 = a1;
        }
        WTF::RunLoop::main((WTF::RunLoop *)v100);
        ++*(_DWORD *)(v5 + 8);
        *(void *)buf = v5;
        WebCore::ResourceError::ResourceError((uint64_t)&buf[8], (uint64_t *)v209);
        WTF::Function<void ()(void)>::Function<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_2,void>(&v227, (uint64_t *)buf);
        WTF::RunLoop::dispatch();
        uint64_t v102 = v227;
        uint64_t v227 = 0;
        if (v102) {
          (*(void (**)(uint64_t))(*(void *)v102 + 8))(v102);
        }
        WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_2::~$_2((uint64_t *)buf, v101);
        uint64_t v103 = *a4;
        *a4 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v103 + 16))(v103, 2);
        (*(void (**)(uint64_t))(*(void *)v103 + 8))(v103);
      }
      else
      {
        uint64_t v52 = *(void *)(v5 + 3880);
        if (v52)
        {
          if (*(unsigned char *)(*(void *)(v5 + 4320) + 1160))
          {
            uint64_t v104 = *(void *)(v52 + 3008);
            if (v104) {
              (*(void (**)(uint64_t))(*(void *)v104 + 88))(v104);
            }
          }
        }
      }
      CFTypeRef v53 = cf;
      CFTypeRef cf = 0;
      if (v53) {
        CFRelease(v53);
      }
      int v54 = *(WTF::StringImpl **)((char *)&v215 + 4);
      *(void *)((char *)&v215 + 4) = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2) {
          WTF::StringImpl::destroy(v54, v50);
        }
        else {
          *(_DWORD *)v54 -= 2;
        }
      }
      BOOL v55 = *(WTF::StringImpl **)&v209[8];
      *(void *)&v209[8] = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2) {
          WTF::StringImpl::destroy(v55, v50);
        }
        else {
          *(_DWORD *)v55 -= 2;
        }
      }
      CFTypeRef v56 = *(WTF::StringImpl **)v209;
      *(void *)v209 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2) {
          WTF::StringImpl::destroy(v56, v50);
        }
        else {
          *(_DWORD *)v56 -= 2;
        }
      }
      if (v51) {
        goto LABEL_62;
      }
    }
    WebKit::NetworkResourceLoader::initializeReportingEndpoints((WebKit::NetworkResourceLoader *)v5, v21);
    if (*(unsigned char *)(v5 + 315) == 1
      && WebKit::NetworkResourceLoader::shouldInterruptLoadForCSPFrameAncestorsOrXFrameOptions((WebKit::NetworkResourceLoader *)v5, v21))
    {
      uint64_t v82 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
      {
        uint64_t v172 = *(void *)(v5 + 88);
        if (!v172)
        {
          __break(0xC471u);
          JUMPOUT(0x198BA4EB0);
        }
        uint64_t v173 = *(void *)(v5 + 80);
        uint64_t v174 = *(void *)(v5 + 96);
        uint64_t v175 = *(void *)(v5 + 3048);
        BOOL v176 = *(unsigned __int8 *)(v5 + 315) == 1;
        int v177 = *(unsigned __int8 *)(v5 + 3088);
        BOOL v178 = *(void *)(v5 + 4168) != 0;
        *(_DWORD *)buf = 134219776;
        *(void *)&uint8_t buf[4] = v5;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v173;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&unsigned char buf[24] = v172;
        *(_WORD *)&buf[32] = 2048;
        *(void *)&buf[34] = v174;
        *(_WORD *)&buf[42] = 2048;
        *(void *)&buf[44] = v175;
        *(_WORD *)&buf[52] = 1024;
        *(_DWORD *)&buf[54] = v176;
        *(_WORD *)&buf[58] = 1024;
        *(_DWORD *)&buf[60] = v177;
        *(_WORD *)&buf[64] = 1024;
        *(_DWORD *)&buf[66] = v178;
        _os_log_error_impl(&dword_1985F2000, v82, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Interrupting main resource load due to CSP frame-ancestors or X-Frame-Options", buf, 0x46u);
      }
      WebCore::ResourceResponse::ResourceResponse((WebCore::ResourceResponse *)v209, v21);
      WebKit::NetworkResourceLoader::sanitizeResponseIfPossible((uint64_t)buf, v5, (uint64_t)v209);
      WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v209, v83);
      *(void *)v209 = buf;
      IPC::MessageSender::send<Messages::WebResourceLoader::StopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied>(v5 + 16, (WebCore::ResourceResponseBase **)v209);
      uint64_t v84 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v84 + 16))(v84, 2);
      (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
      WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)buf, v85);
      goto LABEL_62;
    }
    if (*(unsigned char *)(v5 + 3088) == 19 && (*(unsigned char *)(v5 + 3272) || *(unsigned char *)(v5 + 3273)))
    {
      int v86 = (WTF *)WebCore::obtainCrossOriginEmbedderPolicy();
      int v88 = v209[0];
      if (*(unsigned char *)(v5 + 3273) && !v209[0])
      {
        if ((*(unsigned char *)(v5 + 3216) & 1) == 0) {
          WTF::aboutBlankURL(v86);
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::sendCOEPInheritenceViolation();
        uint64_t v141 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v141)
        {
          if (*(_DWORD *)v141 == 2) {
            WTF::StringImpl::destroy(v141, v87);
          }
          else {
            *(_DWORD *)v141 -= 2;
          }
        }
        int v88 = v209[0];
      }
      if (*(unsigned char *)(v5 + 3272) && !v88)
      {
        v142 = (WTF::URL *)WebCore::ResourceResponseBase::url(v21);
        WTF::URL::stringCenterEllipsizedToLength(v142);
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Refused to load '", 18, (uint64_t *)v203, (uint64_t)"' worker because of Cross-Origin-Embedder-Policy.", 50, v205);
        v144 = v203[0];
        v203[0] = 0;
        if (v144)
        {
          if (*(_DWORD *)v144 == 2) {
            WTF::StringImpl::destroy(v144, v143);
          }
          else {
            *(_DWORD *)v144 -= 2;
          }
        }
        uint64_t v227 = *(void *)(v5 + 3048);
        char v228 = 1;
        *(void *)buf = v5 + 96;
        *(_WORD *)&buf[8] = 520;
        *(void *)&buf[16] = v205;
        *(void *)&unsigned char buf[24] = &v227;
        uint64_t v145 = *(void *)(v5 + 88);
        if (!v145)
        {
          __break(0xC471u);
          JUMPOUT(0x198BA4E44);
        }
        v146 = IPC::MessageSender::send<Messages::WebPage::AddConsoleMessage,WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>(v5 + 16, (uint64_t)buf, v145);
        if ((*(unsigned char *)(v5 + 3216) & 1) == 0) {
          WTF::aboutBlankURL(v146);
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::sendCOEPInheritenceViolation();
        v148 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v148)
        {
          if (*(_DWORD *)v148 == 2) {
            WTF::StringImpl::destroy(v148, v147);
          }
          else {
            *(_DWORD *)v148 -= 2;
          }
        }
        v149 = v205[0];
        v205[0] = 0;
        if (v149)
        {
          if (*(_DWORD *)v149 == 2) {
            WTF::StringImpl::destroy(v149, v147);
          }
          else {
            *(_DWORD *)v149 -= 2;
          }
        }
        WebCore::CrossOriginEmbedderPolicy::~CrossOriginEmbedderPolicy((WebCore::CrossOriginEmbedderPolicy *)v209, v147);
        v150 = off_1EB358988;
        BOOL v151 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR);
        if (!v151) {
          goto LABEL_192;
        }
        uint64_t v179 = *(void *)(v5 + 88);
        if (v179)
        {
          uint64_t v180 = *(void *)(v5 + 80);
          uint64_t v181 = *(void *)(v5 + 96);
          uint64_t v182 = *(void *)(v5 + 3048);
          BOOL v183 = *(unsigned __int8 *)(v5 + 315) == 1;
          int v184 = *(unsigned __int8 *)(v5 + 3088);
          BOOL v185 = *(void *)(v5 + 4168) != 0;
          *(_DWORD *)buf = 134219776;
          *(void *)&uint8_t buf[4] = v5;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v180;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = v179;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v181;
          *(_WORD *)&buf[42] = 2048;
          *(void *)&buf[44] = v182;
          *(_WORD *)&buf[52] = 1024;
          *(_DWORD *)&buf[54] = v183;
          *(_WORD *)&buf[58] = 1024;
          *(_DWORD *)&buf[60] = v184;
          *(_WORD *)&buf[64] = 1024;
          *(_DWORD *)&buf[66] = v185;
          _os_log_error_impl(&dword_1985F2000, v150, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Interrupting worker load due to Cross-Origin-Opener-Policy", buf, 0x46u);
LABEL_192:
          WTF::RunLoop::main((WTF::RunLoop *)v151);
          ++*(_DWORD *)(v5 + 8);
          *(void *)buf = v5;
          uint64_t v152 = WebCore::ResourceResponseBase::url(v21);
          v153 = *(_DWORD **)v152;
          if (*(void *)v152) {
            *v153 += 2;
          }
          *(void *)&buf[8] = v153;
          long long v154 = *(_OWORD *)(v152 + 24);
          *(_OWORD *)&buf[16] = *(_OWORD *)(v152 + 8);
          *(_OWORD *)&buf[32] = v154;
          WTF::Function<void ()(void)>::Function<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_3,void>(v209, (uint64_t *)buf);
          WTF::RunLoop::dispatch();
          uint64_t v156 = *(void *)v209;
          *(void *)v209 = 0;
          if (v156) {
            (*(void (**)(uint64_t))(*(void *)v156 + 8))(v156);
          }
          WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_3::~$_3((uint64_t *)buf, v155);
          uint64_t v81 = *a4;
          *a4 = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v81 + 16))(v81, 2);
          goto LABEL_109;
        }
        __break(0xC471u);
        goto LABEL_223;
      }
      WebCore::CrossOriginEmbedderPolicy::~CrossOriginEmbedderPolicy((WebCore::CrossOriginEmbedderPolicy *)v209, v87);
    }
    WebKit::NetworkResourceLoader::doCrossOriginOpenerHandlingOfResponse((WebKit::NetworkResourceLoader *)v5, v21, buf);
    if (BYTE8(v219))
    {
      __int16 v105 = off_1EB358988;
      BOOL v106 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR);
      if (v106)
      {
        uint64_t v165 = *(void *)(v5 + 88);
        if (!v165)
        {
          __break(0xC471u);
          JUMPOUT(0x198BA4E90);
        }
        uint64_t v166 = *(void *)(v5 + 80);
        uint64_t v167 = *(void *)(v5 + 96);
        uint64_t v168 = *(void *)(v5 + 3048);
        BOOL v169 = *(unsigned __int8 *)(v5 + 315) == 1;
        int v170 = *(unsigned __int8 *)(v5 + 3088);
        BOOL v171 = *(void *)(v5 + 4168) != 0;
        *(_DWORD *)v209 = 134219776;
        *(void *)&v209[4] = v5;
        *(_WORD *)&v209[12] = 2048;
        *(void *)&v209[14] = v166;
        __int16 v210 = 2048;
        uint64_t v211 = v165;
        __int16 v212 = 2048;
        uint64_t v213 = v167;
        __int16 v214 = 2048;
        *(void *)&long long v215 = v168;
        WORD4(v215) = 1024;
        *(_DWORD *)((char *)&v215 + 10) = v169;
        HIWORD(v215) = 1024;
        int v216 = v170;
        LOWORD(cf) = 1024;
        *(_DWORD *)((char *)&cf + 2) = v171;
        _os_log_error_impl(&dword_1985F2000, v105, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Interrupting load due to Cross-Origin-Opener-Policy", v209, 0x46u);
      }
      WTF::RunLoop::main((WTF::RunLoop *)v106);
      ++*(_DWORD *)(v5 + 8);
      *(void *)v209 = v5;
      if (BYTE8(v219))
      {
        WebCore::ResourceError::ResourceError((uint64_t)&v209[8], (uint64_t *)buf);
        WTF::Function<void ()(void)>::Function<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_4,void>(&v227, (uint64_t *)v209);
        WTF::RunLoop::dispatch();
        uint64_t v108 = v227;
        uint64_t v227 = 0;
        if (v108) {
          (*(void (**)(uint64_t))(*(void *)v108 + 8))(v108);
        }
        WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_2::~$_2((uint64_t *)v209, v107);
        uint64_t v109 = *a4;
        *a4 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v109 + 16))(v109, 2);
        (*(void (**)(uint64_t))(*(void *)v109 + 8))(v109);
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v110);
        goto LABEL_62;
      }
LABEL_223:
      __break(1u);
LABEL_224:
      JUMPOUT(0x198BA4138);
    }
    std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v58);
    *(_OWORD *)&unsigned char buf[24] = v194[0];
    *(_OWORD *)&buf[40] = v194[1];
    *(_OWORD *)&buf[56] = v194[2];
    long long v59 = v198;
    long long v220 = v197;
    *(void *)buf = v5;
    ++*(_DWORD *)(v5 + 8);
    buf[16] = a3;
    LOBYTE(v219) = v195;
    __int16 v60 = v196;
    long long v221 = v59;
    uint64_t v61 = v199;
    v196 = 0;
    v199 = 0;
    *((void *)&v219 + 1) = v60;
    v222 = v61;
    __int16 v224 = v201;
    uint64_t v223 = v200;
    uint64_t v62 = *a4;
    *a4 = 0;
    uint64_t v225 = v62;
    uint64_t v63 = WTF::fastMalloc((WTF *)0xA0);
    *(void *)uint64_t v63 = &unk_1EE9C6340;
    *(void *)(v63 + 8) = v5;
    *(void *)&buf[8] = 0;
    *(void *)(v63 + 16) = v5;
    *(unsigned char *)(v63 + 24) = a3;
    long long v64 = *(_OWORD *)&buf[56];
    char v65 = v219;
    long long v66 = *(_OWORD *)&buf[40];
    *(_OWORD *)(v63 + 32) = *(_OWORD *)&buf[24];
    *(_OWORD *)(v63 + 48) = v66;
    *(unsigned char *)(v63 + 80) = v65;
    *(_OWORD *)(v63 + 64) = v64;
    v68.n128_f64[0] = WTF::URL::URL(v63 + 88, (uint64_t *)&v219 + 1);
    *(void *)(v63 + 128) = v222;
    *(_WORD *)(v63 + 144) = v224;
    *(void *)(v63 + 136) = v223;
    uint64_t v69 = v225;
    v222 = 0;
    uint64_t v225 = 0;
    *(void *)(v63 + 152) = v69;
    if (!*(unsigned char *)(v5 + 3433)) {
      goto LABEL_80;
    }
    unsigned int v70 = WebCore::parseClearSiteDataHeader(v21, v67);
    if (v70) {
      int v71 = 6;
    }
    else {
      int v71 = 0;
    }
    if ((v70 & 2) != 0) {
      v71 |= 1u;
    }
    int v72 = (v70 >> 2) & 1;
    if ((v70 & 8) != 0)
    {
      v71 |= 0x8C0F0u;
      int v208 = v71;
    }
    else
    {
      int v208 = v71;
      if (((v70 >> 2) & 1) == 0 && !v71)
      {
LABEL_80:
        (*(void (**)(uint64_t, __n128))(*(void *)v63 + 16))(v63, v68);
        (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
LABEL_81:
        uint64_t v73 = v225;
        uint64_t v225 = 0;
        if (v73) {
          (*(void (**)(uint64_t))(*(void *)v73 + 8))(v73);
        }
        long long v74 = v222;
        v222 = 0;
        if (v74)
        {
          if (*(_DWORD *)v74 == 2) {
            WTF::StringImpl::destroy(v74, v50);
          }
          else {
            *(_DWORD *)v74 -= 2;
          }
        }
        long long v75 = (WTF::StringImpl *)*((void *)&v219 + 1);
        *((void *)&v219 + 1) = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2) {
            WTF::StringImpl::destroy(v75, v50);
          }
          else {
            *(_DWORD *)v75 -= 2;
          }
        }
        uint64_t v76 = *(void *)&buf[8];
        *(void *)&buf[8] = 0;
        if (v76) {
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v76 + 8), v50);
        }
        goto LABEL_62;
      }
    }
    __int16 v111 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v112 = *(void *)(v5 + 88);
      if (!v112)
      {
        __break(0xC471u);
        JUMPOUT(0x198BA4E24);
      }
      uint64_t v113 = *(void *)(v5 + 80);
      uint64_t v114 = *(void *)(v5 + 96);
      uint64_t v115 = *(void *)(v5 + 3048);
      BOOL v116 = *(unsigned __int8 *)(v5 + 315) == 1;
      int v117 = *(unsigned __int8 *)(v5 + 3088);
      BOOL v118 = *(void *)(v5 + 4168) != 0;
      *(_DWORD *)v209 = 134219776;
      *(void *)&v209[4] = v5;
      *(_WORD *)&v209[12] = 2048;
      *(void *)&v209[14] = v113;
      __int16 v210 = 2048;
      uint64_t v211 = v112;
      __int16 v212 = 2048;
      uint64_t v213 = v114;
      __int16 v214 = 2048;
      *(void *)&long long v215 = v115;
      WORD4(v215) = 1024;
      *(_DWORD *)((char *)&v215 + 10) = v116;
      HIWORD(v215) = 1024;
      int v216 = v117;
      LOWORD(cf) = 1024;
      *(_DWORD *)((char *)&cf + 2) = v118;
      _os_log_impl(&dword_1985F2000, v111, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::processClearSiteDataHeader: BEGIN", v209, 0x46u);
    }
    long long v119 = (WebCore::SecurityOrigin *)WebCore::ResourceResponseBase::url(v21);
    WebCore::SecurityOrigin::create((uint64_t *)v209, v119, v120);
    LOBYTE(v227) = 0;
    int v229 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v227, *(void *)v209 + 8);
    uint64_t v122 = *(void *)v209;
    *(void *)v209 = 0;
    if (v122) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v122, v121);
    }
    uint64_t v123 = *(void *)(v5 + 112);
    if (v123) {
      v124 = (uint64_t *)(v123 + 8);
    }
    else {
      v124 = &v227;
    }
    v209[0] = 0;
    LODWORD(v211) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v209, (uint64_t)v124);
    LOBYTE(v212) = 0;
    HIDWORD(v215) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v212, (uint64_t)&v227);
    v205[0] = (WTF::StringImpl *)v5;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 56), v5 + 48);
    uint64_t v125 = *(atomic_uint **)(v5 + 56);
    char v126 = (WTF::StringImpl *)v5;
    if (v125)
    {
      atomic_fetch_add(v125, 1u);
      char v126 = v205[0];
      int v71 = v208;
    }
    v127 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v127 = &unk_1EE9C6228;
    v127[1] = v126;
    v127[2] = v125;
    v127[3] = v63;
    v205[1] = 0;
    v206 = 0;
    uint64_t v128 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v128 = 1;
    *(void *)(v128 + 8) = v127;
    WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)v205, v129);
    if (v71)
    {
      uint64_t v130 = *(void *)(v5 + 3872);
      uint64_t v131 = *(void *)(v130 + 80);
      uint64_t v132 = *(void *)(v130 + 88);
      atomic_fetch_add((atomic_uint *volatile)v128, 1u);
      v133 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(void *)v133 = &unk_1EE9C6250;
      *((void *)v133 + 1) = v128;
      v205[0] = v133;
      WebKit::NetworkProcess::deleteWebsiteDataForOrigin(v131, v132, v71, (uint64_t)v209, (uint64_t *)v205);
      char v134 = v205[0];
      v205[0] = 0;
      if (v134) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v134 + 8))(v134);
      }
      unsigned int v135 = v208;
    }
    else
    {
      unsigned int v135 = 0;
    }
    if (WebKit::WebsiteDataStore::computeWebProcessAccessTypeForDataRemoval(v135))
    {
      uint64_t v136 = *(void *)(v5 + 3872);
      CFTypeRef v137 = *(os_unfair_lock_s **)(*(void *)(v136 + 80) + 40);
      v203[0] = *(WTF::StringImpl **)(v136 + 88);
      v205[0] = (WTF::StringImpl *)&v208;
      v205[1] = (WTF::StringImpl *)v209;
      v206 = v203;
      uint64_t v207 = v5 + 80;
      atomic_fetch_add((atomic_uint *volatile)v128, 1u);
      v204 = (unsigned int *)v128;
      IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::DeleteWebsiteDataInWebProcessesForOrigin,WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_2>(v137, (uint64_t)v205, (uint64_t *)&v204);
      if (v204) {
        WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v204);
      }
    }
    if (v72)
    {
      LOBYTE(v205[0]) = 0;
      LOBYTE(v206) = 0;
      if (*(unsigned char *)(v5 + 315) == 1)
      {
        *(_OWORD *)v205 = *(_OWORD *)(v5 + 96);
        LOBYTE(v206) = 1;
      }
      uint64_t v138 = *(void *)(v5 + 3872);
      int v139 = *(unsigned int **)(v138 + 88);
      __int16 v140 = *(os_unfair_lock_s **)(*(void *)(v138 + 80) + 40);
      v203[0] = (WTF::StringImpl *)v209;
      v203[1] = (WTF::StringImpl *)&v204;
      v203[2] = (WTF::StringImpl *)v205;
      v204 = v139;
      atomic_fetch_add((atomic_uint *volatile)v128, 1u);
      v202 = (unsigned int *)v128;
      IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::ReloadExecutionContextsForOrigin,WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_3>(v140, (uint64_t)v203, (uint64_t *)&v202);
      if (v202) {
        WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v202);
      }
    }
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v128);
    WebCore::ClientOrigin::~ClientOrigin((WebCore::ClientOrigin *)v209);
    if (v229 != -1) {
      ((void (*)(unsigned char *, uint64_t *))off_1EE9C6158[v229])(v209, &v227);
    }
    goto LABEL_81;
  }
  uint64_t v81 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v81 + 16))(v81, 0);
LABEL_109:
  (*(void (**)(uint64_t))(*(void *)v81 + 8))(v81);
LABEL_62:
  if (v199)
  {
    if (*(_DWORD *)v199 == 2) {
      WTF::StringImpl::destroy(v199, v50);
    }
    else {
      *(_DWORD *)v199 -= 2;
    }
  }
  uint64_t result = v196;
  if (v196)
  {
    if (*(_DWORD *)v196 == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v196, v50);
    }
    else {
      *(_DWORD *)v196 -= 2;
    }
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::didReceiveMainResourceResponse(WebKit::NetworkResourceLoader *this, const WebCore::ResourceResponse *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 11);
    if (!v5)
    {
      __break(0xC471u);
      goto LABEL_17;
    }
    uint64_t v6 = *((void *)this + 10);
    uint64_t v7 = *((void *)this + 12);
    uint64_t v8 = *((void *)this + 381);
    BOOL v9 = *((unsigned __int8 *)this + 315) == 1;
    int v10 = *((unsigned __int8 *)this + 3088);
    BOOL v11 = *((void *)this + 521) != 0;
    *(_DWORD *)uint64_t v18 = 134219776;
    *(void *)&v18[4] = this;
    *(_WORD *)&v18[12] = 2048;
    *(void *)&v18[14] = v6;
    *(_WORD *)&v18[22] = 2048;
    *(void *)&v18[24] = v5;
    __int16 v19 = 2048;
    uint64_t v20 = v7;
    __int16 v21 = 2048;
    uint64_t v22 = v8;
    __int16 v23 = 1024;
    BOOL v24 = v9;
    __int16 v25 = 1024;
    int v26 = v10;
    __int16 v27 = 1024;
    BOOL v28 = v11;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveMainResourceResponse:", v18, 0x46u);
  }
  uint64_t v12 = *((void *)this + 534);
  if (v12)
  {
    uint64_t v14 = *(void *)(v12 + 40);
    if (v14)
    {
      uint64_t v15 = *((void *)this + 11);
      *(void *)uint64_t v18 = *((void *)this + 10);
      if (v15)
      {
        *(void *)&v18[8] = v15;
        *(_OWORD *)&v18[16] = *((_OWORD *)this + 6);
        WebKit::NetworkCache::SpeculativeLoadManager::registerMainResourceLoadResponse(v14, (const WebCore::ResourceRequest *)v18, (WebKit::NetworkResourceLoader *)((char *)this + 168), a2);
        goto LABEL_5;
      }
      __break(0xC471u);
LABEL_17:
      JUMPOUT(0x198BA50A4);
    }
  }
LABEL_5:
  uint64_t result = *(void *)WebCore::ResourceResponseBase::mimeType(a2);
  if (result)
  {
    uint64_t result = WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl>(result, "application/x-webarchive");
    if (result)
    {
      BOOL v16 = (WTF::URL *)WebCore::ResourceResponseBase::url(a2);
      WTF::URL::protocol(v16);
      uint64_t result = WebCore::LegacySchemeRegistry::shouldTreatURLSchemeAsLocal();
      if (result)
      {
        uint64_t v17 = *((void *)this + 484);
        ++*(_DWORD *)(v17 + 8);
        uint64_t result = WebKit::NetworkProcess::webProcessWillLoadWebArchive(*(void *)(v17 + 80), *(void *)(v17 + 264));
        if (*(_DWORD *)(v17 + 8) == 1) {
          return (*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
        else {
          --*(_DWORD *)(v17 + 8);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::ResourceResponse::operator=(uint64_t a1, uint64_t a2)
{
  WebCore::ResourceResponseBase::operator=(a1, a2);
  uint64_t v4 = *(void *)(a2 + 240);
  *(void *)(a2 + 240) = 0;
  uint64_t v5 = *(const void **)(a1 + 240);
  *(void *)(a1 + 240) = v4;
  if (v5) {
    CFRelease(v5);
  }
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  return a1;
}

{
  uint64_t v4;
  const void *v5;

  WebCore::ResourceResponseBase::operator=(a1, a2);
  uint64_t v4 = *(void *)(a2 + 240);
  if (v4) {
    CFRetain(*(CFTypeRef *)(a2 + 240));
  }
  uint64_t v5 = *(const void **)(a1 + 240);
  *(void *)(a1 + 240) = v4;
  if (v5) {
    CFRelease(v5);
  }
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  return a1;
}

void WebKit::NetworkConnectionToWebProcess::addNetworkLoadInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x258);
  uint64_t Information = WebCore::NetworkLoadInformation::NetworkLoadInformation((uint64_t)v6, a3);
  uint64_t v10 = *(void *)(a1 + 152);
  BOOL v9 = (uint64_t *)(a1 + 152);
  uint64_t v8 = v10;
  uint64_t v27 = Information;
  if (v10
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v9, 0), (uint64_t v8 = *v9) != 0))
  {
    int v11 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v11 = 0;
  }
  unint64_t v12 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v11 & ((v14 >> 31) ^ v14);
  BOOL v16 = (void *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == a2)
      {
        uint64_t v27 = 0;
        std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100]((uint64_t)&v27, v6);
        return;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v11;
      BOOL v16 = (void *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v9 - 16);
      BOOL v16 = v18;
    }
  }
  void *v16 = a2;
  uint64_t v20 = (void *)v16[1];
  v16[1] = v27;
  if (v20) {
    std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100]((uint64_t)(v16 + 1), v20);
  }
  uint64_t v21 = *v9;
  if (*v9) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v23 = *v9;
  if (*v9) {
    int v24 = *(_DWORD *)(v23 - 12);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
  unint64_t v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25) {
      return;
    }
  }
  else if (3 * v26 > 4 * v25)
  {
    return;
  }

  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v9, v16);
}

void WebCore::NetworkLoadInformation::~NetworkLoadInformation(WebCore::NetworkLoadInformation *this, void *a2)
{
  WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 584, a2);
  uint64_t v4 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((void *)this + 72);
  *((void *)this + 72) = 0;
  if (v4) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 68);
  *((void *)this + 68) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (const void *)*((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::NetworkLoadInformation *)((char *)this + 200), v3);
  uint64_t v7 = (const void *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v7) {
    CFRelease(v7);
  }

  WebCore::ResourceRequestBase::~ResourceRequestBase(this);
}

void WebKit::NetworkSession::recordHTTPSConnectionTiming(WebKit::NetworkSession *this, const WebCore::NetworkLoadMetrics *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)a2 + 98) & 0x20) != 0) {
    return;
  }
  double v2 = *((double *)a2 + 5);
  if (v2 == -1.0) {
    return;
  }
  double v3 = *((double *)a2 + 6) - v2;
  if (v3 <= 0.0) {
    return;
  }
  unint64_t v5 = *((void *)this + 101);
  unint64_t v6 = *((void *)this + 102);
  unint64_t v7 = v6;
  if (v5 > v6) {
    unint64_t v7 = v6 + *((unsigned int *)this + 208);
  }
  if (v7 - v5 >= 0x19)
  {
    if (v5 == v6) {
      goto LABEL_65;
    }
    if (v5 == *((unsigned int *)this + 208) - 1) {
      unint64_t v5 = 0;
    }
    else {
      ++v5;
    }
    *((void *)this + 101) = v5;
  }
  if (v5)
  {
    if (v6 + 1 == v5)
    {
      LODWORD(v8) = *((_DWORD *)this + 208);
LABEL_21:
      uint64_t v10 = v8;
      int v11 = (WTF *)*((void *)this + 103);
      unint64_t v12 = ((unint64_t)v8 >> 2) + v8;
      if (v12 <= 0xF) {
        unint64_t v12 = 15;
      }
      if (v12 < 0x19)
      {
        unint64_t v14 = (WebKit::NetworkSession *)((char *)this + 840);
        *((void *)this + 103) = (char *)this + 840;
        uint64_t v13 = 25;
        *((_DWORD *)this + 208) = 25;
        goto LABEL_27;
      }
      if (v12 < 0x1FFFFFFF)
      {
        uint64_t v13 = v12 + 1;
        unint64_t v14 = (WTF *)WTF::fastMalloc((WTF *)(8 * (v12 + 1)));
        *((_DWORD *)this + 208) = v13;
        *((void *)this + 103) = v14;
        unint64_t v5 = *((void *)this + 101);
        unint64_t v6 = *((void *)this + 102);
LABEL_27:
        if (v5 <= v6)
        {
          unint64_t v9 = v6;
          if (v5 != v6)
          {
            uint64_t v23 = (char *)v14 + 8 * v5;
            int v24 = (uint64_t *)((char *)v11 + 8 * v5);
            uint64_t v25 = 8 * v6 - 8 * v5;
            do
            {
              uint64_t v26 = *v24++;
              *(void *)uint64_t v23 = v26;
              v23 += 8;
              v25 -= 8;
            }
            while (v25);
            unint64_t v9 = v5;
          }
        }
        else
        {
          if (v6)
          {
            uint64_t v15 = 8 * v6;
            BOOL v16 = v14;
            uint64_t v17 = v11;
            do
            {
              uint64_t v18 = *(void *)v17;
              uint64_t v17 = (WTF *)((char *)v17 + 8);
              *(void *)BOOL v16 = v18;
              BOOL v16 = (WTF *)((char *)v16 + 8);
              v15 -= 8;
            }
            while (v15);
          }
          unint64_t v9 = v5 - v10 + v13;
          if (v5 != v10)
          {
            int v19 = (char *)v14 + 8 * v9;
            uint64_t v20 = (uint64_t *)((char *)v11 + 8 * v5);
            uint64_t v21 = 8 * v10 - 8 * v5;
            do
            {
              uint64_t v22 = *v20++;
              *(void *)int v19 = v22;
              v19 += 8;
              v21 -= 8;
            }
            while (v21);
          }
          *((void *)this + 101) = v9;
        }
        if ((WebKit::NetworkSession *)((char *)this + 840) != v11 && v11)
        {
          if (v14 == v11)
          {
            *((void *)this + 103) = 0;
            *((_DWORD *)this + 208) = 0;
          }
          WTF::fastFree(v11, a2);
          unint64_t v6 = *((void *)this + 102);
          unint64_t v9 = *((void *)this + 101);
        }
        goto LABEL_44;
      }
LABEL_65:
      __break(0xC471u);
      JUMPOUT(0x198BA5760);
    }
    unint64_t v9 = v5;
  }
  else
  {
    uint64_t v8 = *((unsigned int *)this + 208);
    if (v6)
    {
      if (v6 == v8 - 1) {
        goto LABEL_21;
      }
      unint64_t v9 = 0;
    }
    else
    {
      if (!v8) {
        goto LABEL_21;
      }
      unint64_t v9 = 0;
      unint64_t v6 = 0;
    }
  }
LABEL_44:
  uint64_t v27 = *((void *)this + 103);
  *(double *)(v27 + 8 * v6) = v3;
  unint64_t v28 = *((unsigned int *)this + 208);
  if (v6 == v28 - 1) {
    unint64_t v29 = 0;
  }
  else {
    unint64_t v29 = v6 + 1;
  }
  *((void *)this + 102) = v29;
  if (v29 == v9)
  {
    double v30 = NAN;
  }
  else
  {
    double v31 = 0.0;
    unint64_t v32 = v9;
    do
    {
      double v33 = *(double *)(v27 + 8 * v32);
      v32 += v28 + 1;
      do
        v32 -= v28;
      while (v32 >= v28);
      double v31 = v31 + v33;
    }
    while (v29 != v32);
    if (v29 >= v9) {
      unint64_t v34 = 0;
    }
    else {
      unint64_t v34 = v28;
    }
    double v35 = v31 / (double)(v29 - v9 + v34);
    do
    {
      double v36 = *(double *)(v27 + 8 * v9);
      v9 += v28 + 1;
      do
        v9 -= v28;
      while (v9 >= v28);
      double v35 = v35 * 0.25 + v36 * 0.75;
    }
    while (v29 != v9);
    double v30 = v35 * 1.5;
  }
  double v37 = fmax(v30, 3.0);
  if (v37 != *((double *)this + 130))
  {
    *((double *)this + 130) = v37;
    int v38 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      int v39 = 134217984;
      double v40 = v37;
      _os_log_impl(&dword_1985F2000, v38, OS_LOG_TYPE_DEFAULT, "NetworkSession::recordHTTPSConnectionTiming: Updating moving average: %lf", (uint8_t *)&v39, 0xCu);
    }
  }
}

uint64_t WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1::operator()(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    if (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>(result, (uint64_t)"audio/", 6uLL)) {
      return 1;
    }
    uint64_t result = *a1;
    if (!*a1) {
      return result;
    }
    if (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>(result, (uint64_t)"video/", 6uLL))
    {
      return 1;
    }
    else
    {
      uint64_t result = *a1;
      if (*a1)
      {
        return WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>(result, "application/octet-stream", 0x18uLL);
      }
    }
  }
  return result;
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_2,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x60);
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)uint64_t v4 = &unk_1EE9C62C8;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = a2[1];
  a2[1] = 0;
  *(void *)(v4 + 16) = v6;
  WTF::URL::URL(v4 + 24, a2 + 2);
  uint64_t v7 = a2[7];
  a2[7] = 0;
  *(void *)(v4 + 64) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 16);
  *(_WORD *)(v4 + 76) = *((_WORD *)a2 + 34);
  *(_DWORD *)(v4 + 72) = v7;
  uint64_t v8 = a2[9];
  a2[9] = 0;
  *(void *)(v4 + 80) = v8;
  *(unsigned char *)(v4 + 88) = *((unsigned char *)a2 + 80);
  *a1 = v4;
  return a1;
}

uint64_t *WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_2::~$_2(uint64_t *a1, WTF::StringImpl *a2)
{
  double v3 = (const void *)a1[9];
  a1[9] = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *a1;
  *a1 = 0;
  if (v7) {
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v7 + 8), a2);
  }
  return a1;
}

WTF::StringImpl *WebKit::NetworkResourceLoader::initializeReportingEndpoints(WebKit::NetworkResourceLoader *this, const WebCore::ResourceResponse *a2)
{
  WebCore::ResourceResponseBase::httpHeaderField();
  uint64_t result = v10;
  if (v10)
  {
    if (!*((_DWORD *)v10 + 1))
    {
      uint64_t v10 = 0;
LABEL_4:
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      }
      *(_DWORD *)result -= 2;
      return result;
    }
    uint64_t v6 = (const WTF::String *)WebCore::ResourceResponseBase::url(a2);
    WebCore::ReportingScope::parseReportingEndpointsFromHeader((uint64_t *)&v8, (WebCore::ReportingScope *)&v10, v6, v7);
    WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::operator=((uint64_t)this + 4928, (uint64_t *)&v8);
    if (v8) {
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v8, (WTF::StringImpl *)v9);
    }
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result) {
      goto LABEL_4;
    }
  }
  return result;
}

double WebKit::NetworkResourceLoader::sanitizeResponseIfPossible(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 3328))
  {
    uint64_t v6 = *(atomic_uint **)(*(void *)(a2 + 3872) + 80);
    atomic_fetch_add(v6 + 32, 1u);
    uint64_t v7 = *(void **)(a2 + 88);
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198BA5BB8);
    }
    uint64_t v8 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 168));
    int v9 = 1;
    if (!*(unsigned char *)(a2 + 3088) && *(unsigned char *)(a2 + 3089) == 2) {
      int v9 = WebKit::NetworkProcess::shouldDisableCORSForRequestTo((uint64_t)v6, v7, v8) ^ 1;
    }
    if (v6 && atomic_fetch_add(v6 + 32, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v6 + 32);
      (*(void (**)(atomic_uint *))(*(void *)v6 + 8))(v6);
    }
    if (v9) {
      WebCore::ResourceResponseBase::sanitizeHTTPHeaderFields();
    }
    WTF::URL::URL(a1, (uint64_t *)a3);
    uint64_t v10 = *(void *)(a3 + 40);
    uint64_t v11 = *(void *)(a3 + 48);
    *(void *)(a3 + 40) = 0;
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = v11;
    long long v12 = *(_OWORD *)(a3 + 56);
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a1 + 56) = v12;
    long long v13 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a1 + 72) = v13;
    *(void *)&long long v13 = *(void *)(a3 + 88);
    *(void *)(a3 + 88) = 0;
    *(void *)(a1 + 88) = v13;
    uint64_t v14 = *(void *)(a3 + 96);
    *(void *)(a3 + 96) = 0;
    *(void *)(a1 + 96) = v14;
    *(void *)&long long v13 = *(void *)(a3 + 104);
    *(void *)(a3 + 104) = 0;
    *(void *)(a1 + 104) = v13;
    uint64_t v15 = *(void *)(a3 + 112);
    *(void *)(a3 + 112) = 0;
    *(void *)(a1 + 112) = v15;
    *(unsigned char *)(a1 + 120) = 0;
    *(unsigned char *)(a1 + 128) = 0;
    if (*(unsigned char *)(a3 + 128))
    {
      uint64_t v18 = *(void *)(a3 + 120);
      *(void *)(a3 + 120) = 0;
      *(void *)(a1 + 120) = v18;
      *(unsigned char *)(a1 + 128) = 1;
    }
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a3 + 184);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a3 + 200);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a3 + 216);
    *(_DWORD *)(a1 + 231) = *(_DWORD *)(a3 + 231);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 136);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a3 + 152);
    long long v16 = *(_OWORD *)(a3 + 168);
    *(_OWORD *)(a1 + 168) = v16;
    uint64_t v17 = *(void *)(a3 + 240);
    *(void *)(a3 + 240) = 0;
    *(void *)(a1 + 240) = v17;
    *(unsigned char *)(a1 + 248) = *(unsigned char *)(a3 + 248);
  }
  else
  {
    *(void *)&long long v16 = std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>(a1, a3).n128_u64[0];
  }
  return *(double *)&v16;
}

WebCore::ResourceResponse *WebCore::ResourceResponse::ResourceResponse(WebCore::ResourceResponse *this, const WebCore::ResourceResponse *a2)
{
  WebCore::ResourceResponseBase::ResourceResponseBase(this, a2);
  uint64_t v4 = (const void *)*((void *)a2 + 30);
  *((void *)this + 30) = v4;
  if (v4) {
    CFRetain(v4);
  }
  *((unsigned char *)this + 248) = *((unsigned char *)a2 + 248);
  return this;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebResourceLoader::StopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied>(uint64_t a1, WebCore::ResourceResponseBase **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2718;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v5, *a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void *WTF::Function<void ()(void)>::Function<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_3,void>(void *a1, uint64_t *a2)
{
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x38);
  uint64_t v5 = *a2;
  *a2 = 0;
  void *v4 = &unk_1EE9C62F0;
  v4[1] = v5;
  WTF::URL::URL((uint64_t)(v4 + 2), a2 + 1);
  *a1 = v4;
  return a1;
}

uint64_t *WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_3::~$_3(uint64_t *a1, WTF::StringImpl *a2)
{
  double v3 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v4 + 8), a2);
  }
  return a1;
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_4,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x60);
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)uint64_t v4 = &unk_1EE9C6318;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = a2[1];
  a2[1] = 0;
  *(void *)(v4 + 16) = v6;
  WTF::URL::URL(v4 + 24, a2 + 2);
  uint64_t v7 = a2[7];
  a2[7] = 0;
  *(void *)(v4 + 64) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 16);
  *(_WORD *)(v4 + 76) = *((_WORD *)a2 + 34);
  *(_DWORD *)(v4 + 72) = v7;
  uint64_t v8 = a2[9];
  a2[9] = 0;
  *(void *)(v4 + 80) = v8;
  *(unsigned char *)(v4 + 88) = *((unsigned char *)a2 + 80);
  *a1 = v4;
  return a1;
}

WTF::StringImpl *WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup(WebCore::ResourceResponse *a1, WebCore::ResourceResponseBase *a2, char a3, int a4)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *((void *)a1 + 484);
  if (!*(unsigned char *)(v8 + 330) && *((unsigned char *)a1 + 4800) && *((unsigned char *)a1 + 4793))
  {
    int v19 = (unsigned __int8 *)a1 + 4345;
    if (*((unsigned char *)a1 + 4768) == 2) {
      char v20 = 2;
    }
    else {
      char v20 = 1;
    }
    WebKit::NetworkConnectionToWebProcess::takeNetworkResourceLoader(v8, *((void *)a1 + 381), &v60);
    if (v60)
    {
      if (*((unsigned char *)a1 + 3512))
      {
        uint64_t v21 = *(void *)(v60 + 4416);
        uint64_t v59 = v21;
        uint64_t v22 = *((void *)a1 + 484);
        uint64_t v23 = *(void *)(v22 + 80);
        *(void *)buf = *(void *)(v22 + 88);
        uint64_t v24 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v23 + 224), buf);
        if (v24)
        {
          *(void *)buf = v60;
          uint64_t v60 = 0;
          WebKit::NetworkSession::addLoaderAwaitingWebProcessTransfer(v24, (uint64_t *)buf);
          if (*(void *)buf) {
            WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(*(void *)buf + 8), v25);
          }
        }
        uint64_t v26 = (const WTF::URL *)WebCore::ResourceResponseBase::url(a2);
        WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v58, v26);
        if (*((unsigned char *)a1 + 3512))
        {
          uint64_t v27 = (char *)a1 + 80;
          unint64_t v28 = (char *)a1 + 3504;
          uint64_t v29 = *((void *)a1 + 484);
          uint64_t v31 = *(void *)(v29 + 80);
          double v30 = *(IPC::Encoder **)(v29 + 88);
          unint64_t v32 = *(os_unfair_lock_s **)(v31 + 40);
          *(void *)buf = v27;
          *(void *)&buf[8] = v28;
          buf[16] = v20;
          uint64_t v67 = &v58;
          *(void *)__n128 v68 = &v59;
          uint64_t v61 = v21;
          long long v64 = v30;
          uint64_t v33 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v31 + 224), &v64);
          if (v33)
          {
            uint64_t v34 = v33;
            WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v33 + 8), v33);
            double v35 = *(atomic_uint **)(v34 + 8);
            if (v35) {
              atomic_fetch_add(v35, 1u);
            }
          }
          else
          {
            double v35 = 0;
          }
          uint64_t v62 = (WTF *)v35;
          IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::TriggerBrowsingContextGroupSwitchForNavigation,WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup(WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL)::$_0>(v32, (uint64_t)buf, &v61);
          double v37 = (unsigned int *)v62;
          uint64_t v62 = 0;
          if (v37 && atomic_fetch_add((atomic_uint *volatile)v37, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v37);
            WTF::fastFree((WTF *)v37, v36);
          }
          uint64_t result = v58;
          __int16 v58 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v36);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
          goto LABEL_28;
        }
        goto LABEL_40;
      }
      int v38 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_FAULT))
      {
        uint64_t v41 = (WTF::StringImpl **)*((void *)a1 + 11);
        if (!v41)
        {
          __break(0xC471u);
LABEL_40:
          __break(1u);
LABEL_41:
          JUMPOUT(0x198BA63E0);
        }
        uint64_t v42 = *((void *)a1 + 10);
        uint64_t v43 = *((void *)a1 + 12);
        uint64_t v44 = *((void *)a1 + 381);
        BOOL v45 = *((unsigned __int8 *)a1 + 315) == 1;
        int v46 = *((unsigned __int8 *)a1 + 3088);
        BOOL v47 = *((void *)a1 + 521) != 0;
        int v48 = *v19;
        *(_DWORD *)buf = 134220544;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v42;
        __int16 v66 = 2048;
        uint64_t v67 = v41;
        *(_WORD *)__n128 v68 = 2048;
        *(void *)&v68[2] = v43;
        __int16 v69 = 2048;
        uint64_t v70 = v44;
        __int16 v71 = 1024;
        BOOL v72 = v45;
        __int16 v73 = 1024;
        int v74 = v46;
        __int16 v75 = 1024;
        BOOL v76 = v47;
        __int16 v77 = 2048;
        uint64_t v78 = v44;
        __int16 v79 = 1024;
        int v80 = v48;
        __int16 v81 = 1024;
        int v82 = a4;
        uint64_t v49 = "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, "
              "isSynchronous=%d] NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup: Missi"
              "ng navigationID, loaderIdentifier %llu, m_isKeptAlive=%d, needsContinueDidReceiveResponseMessage=%d";
        goto LABEL_37;
      }
    }
    else
    {
      int v38 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_FAULT))
      {
        uint64_t v50 = (WTF::StringImpl **)*((void *)a1 + 11);
        if (!v50)
        {
          __break(0xC471u);
          goto LABEL_41;
        }
        uint64_t v51 = *((void *)a1 + 10);
        uint64_t v52 = *((void *)a1 + 12);
        uint64_t v53 = *((void *)a1 + 381);
        BOOL v54 = *((unsigned __int8 *)a1 + 315) == 1;
        int v55 = *((unsigned __int8 *)a1 + 3088);
        BOOL v56 = *((void *)a1 + 521) != 0;
        int v57 = *v19;
        *(_DWORD *)buf = 134220544;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v51;
        __int16 v66 = 2048;
        uint64_t v67 = v50;
        *(_WORD *)__n128 v68 = 2048;
        *(void *)&v68[2] = v52;
        __int16 v69 = 2048;
        uint64_t v70 = v53;
        __int16 v71 = 1024;
        BOOL v72 = v54;
        __int16 v73 = 1024;
        int v74 = v55;
        __int16 v75 = 1024;
        BOOL v76 = v56;
        __int16 v77 = 2048;
        uint64_t v78 = v53;
        __int16 v79 = 1024;
        int v80 = v57;
        __int16 v81 = 1024;
        int v82 = a4;
        uint64_t v49 = "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, "
              "isSynchronous=%d] NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup: Faile"
              "d to find loader with identifier %llu, m_isKeptAlive=%d, needsContinueDidReceiveResponseMessage=%d";
LABEL_37:
        _os_log_fault_impl(&dword_1985F2000, v38, OS_LOG_TYPE_FAULT, v49, buf, 0x5Cu);
      }
    }
    WebKit::NetworkResourceLoader::computeResponseMetrics((WebKit::NetworkResourceLoader *)buf, a1, (uint64_t)a2);
    uint64_t v61 = (uint64_t)a2;
    LOBYTE(v62) = a3;
    BYTE1(v62) = a4;
    uint64_t v63 = buf;
    IPC::MessageSender::send<Messages::WebResourceLoader::DidReceiveResponse>((uint64_t)a1 + 16, (uint64_t)&v61);
    uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v39);
LABEL_28:
    uint64_t v40 = v60;
    uint64_t v60 = 0;
    if (v40) {
      return (WTF::StringImpl *)WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v40 + 8), (WTF::StringImpl *)v36);
    }
    return result;
  }
  double v9 = WebKit::NetworkResourceLoader::computeResponseMetrics((WebKit::NetworkResourceLoader *)buf, a1, (uint64_t)a2);
  uint64_t v61 = (uint64_t)a2;
  LOBYTE(v62) = a3;
  BYTE1(v62) = a4;
  uint64_t v63 = buf;
  uint64_t v11 = *((void *)a1 + 2);
  uint64_t v10 = (char *)a1 + 16;
  uint64_t v12 = (*(uint64_t (**)(char *, double))(v11 + 56))(v10, v9);
  long long v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v13 = 2714;
  *((void *)v13 + 1) = v12;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  long long v64 = v13;
  IPC::ArgumentCoder<std::tuple<WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> const&>,0ul,1ul,2ul,3ul>(v13, (uint64_t)&v61);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v10 + 32))(v10, &v64, 0);
  uint64_t v15 = v64;
  long long v64 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v14);
    WTF::fastFree(v17, v18);
  }
  return (WTF::StringImpl *)std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, (WTF::StringImpl *)v14);
}

void WebKit::NetworkSession::addLoaderAwaitingWebProcessTransfer(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(*a2 + 4416);
  uint64_t v5 = (uint64_t *)(a1 + 512);
  uint64_t v6 = (WebCore::TimerBase *)WTF::fastMalloc((WTF *)0x40);
  *(void *)WebCore::TimerBase::TimerBase(v6) = &unk_1EE9BA5F0;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v7 = &unk_1EE9C66A8;
  v7[1] = WebKit::NetworkSession::CachedNetworkResourceLoader::expirationTimerFired;
  v7[2] = 0;
  v7[3] = v6;
  *((void *)v6 + 6) = v7;
  uint64_t v8 = *a2;
  *a2 = 0;
  *((void *)v6 + 7) = v8;
  WebCore::TimerBase::start();
  uint64_t v26 = v6;
  uint64_t v9 = *(void *)(a1 + 512);
  if (v9
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v5, 0), (uint64_t v9 = *v5) != 0))
  {
    int v10 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    int v10 = 0;
  }
  unint64_t v11 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  unsigned int v14 = v10 & ((v13 >> 31) ^ v13);
  uint64_t v15 = (uint64_t *)(v9 + 16 * v14);
  uint64_t v16 = *v15;
  if (*v15)
  {
    uint64_t v17 = 0;
    int v18 = 1;
    do
    {
      if (v16 == v4)
      {
        uint64_t v26 = 0;
        std::default_delete<WebKit::NetworkSession::CachedNetworkResourceLoader>::operator()[abi:sn180100]((int)&v26, v6);
        return;
      }
      if (v16 == -1) {
        uint64_t v17 = v15;
      }
      unsigned int v14 = (v14 + v18) & v10;
      uint64_t v15 = (uint64_t *)(v9 + 16 * v14);
      uint64_t v16 = *v15;
      ++v18;
    }
    while (*v15);
    if (v17)
    {
      *uint64_t v17 = 0;
      v17[1] = 0;
      --*(_DWORD *)(*v5 - 16);
      uint64_t v15 = v17;
    }
  }
  *uint64_t v15 = v4;
  int v19 = (WebCore::TimerBase *)v15[1];
  v15[1] = (uint64_t)v26;
  if (v19) {
    std::default_delete<WebKit::NetworkSession::CachedNetworkResourceLoader>::operator()[abi:sn180100](v15 + 8, v19);
  }
  uint64_t v20 = *v5;
  if (*v5) {
    int v21 = *(_DWORD *)(v20 - 12) + 1;
  }
  else {
    int v21 = 1;
  }
  *(_DWORD *)(v20 - 12) = v21;
  uint64_t v22 = *v5;
  if (*v5) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24) {
      return;
    }
  }
  else if (3 * v25 > 4 * v24)
  {
    return;
  }

  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v5, v15);
}

uint64_t IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::TriggerBrowsingContextGroupSwitchForNavigation,WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup(WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL)::$_0>(os_unfair_lock_s *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  a3[1] = 0;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v7 = &unk_1EE9C6368;
  v7[1] = v5;
  v7[2] = v6;
  uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 359;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  int v19 = v9;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, *(uint64_t **)(a2 + 8));
  char v10 = *(unsigned char *)(a2 + 16);
  unint64_t v11 = (unsigned char *)IPC::Encoder::grow(v9, 1uLL, 1);
  if (v12)
  {
    *unint64_t v11 = v10;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, *(uint64_t **)(a2 + 24));
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, *(uint64_t **)(a2 + 32));
    v18[0] = (uint64_t)v7;
    v18[1] = v8;
    IPC::Connection::sendMessageWithAsyncReply(a1, &v19, v18, 0, 0);
    uint64_t v14 = v18[0];
    v18[0] = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    uint64_t result = (uint64_t)v19;
    int v19 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
      return WTF::fastFree(v16, v17);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

double WebKit::NetworkResourceLoader::didReceiveBuffer(WebKit::NetworkResourceLoader *this, const WebCore::FragmentedSharedBuffer *a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 525);
  if (!v6)
  {
    uint64_t v7 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *((void *)this + 11);
      if (!v8)
      {
        __break(0xC471u);
        JUMPOUT(0x198BA69F4);
      }
      uint64_t v9 = *((void *)this + 10);
      uint64_t v10 = *((void *)this + 12);
      uint64_t v11 = *((void *)this + 381);
      BOOL v12 = *((unsigned __int8 *)this + 315) == 1;
      int v13 = *((unsigned __int8 *)this + 3088);
      BOOL v14 = *((void *)this + 521) != 0;
      int v18 = 134220032;
      int v19 = this;
      __int16 v20 = 2048;
      uint64_t v21 = v9;
      __int16 v22 = 2048;
      uint64_t v23 = v8;
      __int16 v24 = 2048;
      uint64_t v25 = v10;
      __int16 v26 = 2048;
      uint64_t v27 = v11;
      __int16 v28 = 1024;
      BOOL v29 = v12;
      __int16 v30 = 1024;
      int v31 = v13;
      __int16 v32 = 1024;
      BOOL v33 = v14;
      __int16 v34 = 2048;
      uint64_t v35 = a3;
      _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveData: Started receiving data (reportedEncodedDataLength=%llu)", (uint8_t *)&v18, 0x50u);
      uint64_t v6 = *((void *)this + 525);
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  uint64_t v15 = *((void *)a2 + 6);
  *((void *)this + 525) = v15 + v6;
  uint64_t v16 = *((void *)this + 535);
  if (v16)
  {
    if ((unint64_t)(*(void *)(v16 + 48) + v15) > *(void *)(*(void *)(*((void *)this + 534) + 16) + 40) >> 3)
    {
      *((void *)this + 535) = 0;
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v16, a2);
    }
    else
    {
      WebCore::SharedBufferBuilder::ensureBuffer((WebKit::NetworkResourceLoader *)((char *)this + 4280));
      WebCore::FragmentedSharedBuffer::append();
    }
  }
  if ((WebKit::NetworkResourceLoader::isCrossOriginPrefetch(this) & 1) == 0)
  {
    if (*((void *)this + 519))
    {
      WebCore::SharedBufferBuilder::ensureBuffer((WebKit::NetworkResourceLoader *)((char *)this + 4152));
      WebCore::FragmentedSharedBuffer::append();
      *((void *)this + 518) += a3;
      if (!*((void *)this + 521))
      {
        if ((*((void *)this + 531) & 0xFFFFFFFFFFFFLL) == 0
          || (double result = *(double *)((*((void *)this + 531) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
        {
          WebCore::TimerBase::start();
        }
      }
    }
    else
    {
      WebKit::NetworkResourceLoader::sendBuffer(this, (WebCore::SharedBuffer **)a2, a3);
    }
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::isCrossOriginPrefetch(WebKit::NetworkResourceLoader *this)
{
  uint64_t v1 = (WebKit::NetworkResourceLoader *)((char *)this + 168);
  WebCore::ResourceRequestBase::httpHeaderField();
  if (MEMORY[0x19972E990](v5, "prefetch", 8))
  {
    WebCore::ResourceRequestBase::url(v1);
    uint64_t v3 = WebCore::SecurityOrigin::canRequest() ^ 1;
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v3;
}

unsigned int *WebKit::NetworkResourceLoader::sendBuffer(WebKit::NetworkResourceLoader *this, WebCore::SharedBuffer **a2, uint64_t a3)
{
  uint64_t v6 = (WebCore::ContentFilter *)*((void *)this + 601);
  if (!v6) {
    goto LABEL_2;
  }
  WebCore::FragmentedSharedBuffer::makeContiguous((uint64_t *)&v19, (WebCore::FragmentedSharedBuffer *)a2);
  int v18 = WebCore::ContentFilter::continueAfterDataReceived(v6, v19);
  double result = (unsigned int *)v19;
  int v19 = 0;
  if (result) {
    double result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v17);
  }
  if (v18)
  {
LABEL_2:
    int v19 = a2[6];
    __int16 v20 = (unsigned int *)a2;
    atomic_fetch_add((atomic_uint *volatile)a2, 1u);
    uint64_t v21 = 0;
    v22[0] = &v19;
    v22[1] = a3;
    uint64_t v8 = *((void *)this + 2);
    uint64_t v7 = (char *)this + 16;
    uint64_t v9 = (*(uint64_t (**)(char *))(v8 + 56))(v7);
    uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v10 = 2712;
    *((void *)v10 + 1) = v9;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    uint64_t v23 = v10;
    IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<IPC::SharedBufferReference const&,unsigned long long>,0ul,1ul>(v10, (uint64_t)v22);
    (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v7 + 32))(v7, &v23, 0);
    BOOL v12 = v23;
    uint64_t v23 = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v11);
      WTF::fastFree(v15, v16);
    }
    int v13 = v21;
    uint64_t v21 = 0;
    if (v13) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v13);
    }
    double result = v20;
    __int16 v20 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v11);
    }
  }
  return result;
}

uint64_t *WebKit::NetworkResourceLoader::didFinishLoading(WebKit::NetworkResourceLoader *this, const WebCore::NetworkLoadMetrics *a2)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *((void *)this + 11);
    if (!v6)
    {
      __break(0xC471u);
      goto LABEL_61;
    }
    uint64_t v7 = *((void *)this + 10);
    uint64_t v8 = *((void *)this + 12);
    uint64_t v9 = *((void *)this + 381);
    BOOL v10 = *((unsigned __int8 *)this + 315) == 1;
    int v11 = *((unsigned __int8 *)this + 3088);
    BOOL v12 = *((void *)this + 521) != 0;
    uint64_t v13 = *((void *)this + 525);
    BOOL v14 = *((void *)this + 536) != 0;
    *(_DWORD *)buf = 134220288;
    *(void *)&uint8_t buf[4] = this;
    __int16 v95 = 2048;
    uint64_t v96 = v7;
    __int16 v97 = 2048;
    uint64_t v98 = v6;
    __int16 v99 = 2048;
    uint64_t v100 = v8;
    __int16 v101 = 2048;
    uint64_t v102 = v9;
    __int16 v103 = 1024;
    BOOL v104 = v10;
    __int16 v105 = 1024;
    int v106 = v11;
    __int16 v107 = 1024;
    BOOL v108 = v12;
    __int16 v109 = 2048;
    uint64_t v110 = v13;
    __int16 v111 = 1024;
    BOOL v112 = v14;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didFinishLoading: (numBytesReceived=%zd, hasCacheEntryForValidation=%d)", buf, 0x56u);
  }
  if (*((unsigned char *)this + 4344)) {
    WebKit::NetworkConnectionToWebProcess::addNetworkLoadInformationMetrics(*((void *)this + 484), *((void *)this + 381), (uint64_t)a2);
  }
  uint64_t v15 = (WebKit::NetworkCache::Entry *)*((void *)this + 536);
  if (!v15)
  {
    if (WebKit::NetworkResourceLoader::shouldLogCookieInformation(*(WebKit::NetworkResourceLoader **)(*((void *)this + 484) + 80), *(WebKit::NetworkConnectionToWebProcess **)(*((void *)this + 484) + 88), v5))WebKit::NetworkResourceLoader::logCookieInformation(this); {
    uint64_t v16 = (void *)*((void *)this + 521);
    }
    uint64_t v17 = *((void *)this + 519);
    if (v16)
    {
      if (v17)
      {
        atomic_fetch_add((atomic_uint *volatile)v17, 1u);
        WebKit::sendReplyToSynchronousRequest(v16, (WebCore::FragmentedSharedBuffer *)v17, (long long *)a2);
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v17, v60);
      }
      else
      {
        WebKit::sendReplyToSynchronousRequest(v16, 0, (long long *)a2);
      }
    }
    else
    {
      if (v17 && *(void *)(v17 + 48))
      {
        atomic_fetch_add((atomic_uint *volatile)v17, 1u);
        WebKit::NetworkResourceLoader::sendBuffer(this, (WebCore::SharedBuffer **)v17, -1);
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v17, v42);
      }
      int v18 = (WebCore::ContentFilter *)*((void *)this + 601);
      if (v18)
      {
        uint64_t v52 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebKit::NetworkResourceLoader *)((char *)this + 168));
        double result = (uint64_t *)WebCore::ContentFilter::continueAfterNotifyFinished(v18, v52);
        if (!result) {
          return result;
        }
        WebCore::ContentFilter::stopFilteringMainResource(*((WebCore::ContentFilter **)this + 601));
      }
      uint64_t v19 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
      __int16 v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)__int16 v20 = 2711;
      *((void *)v20 + 1) = v19;
      *((void *)v20 + 66) = (char *)v20 + 16;
      *((void *)v20 + 67) = 512;
      *((void *)v20 + 68) = 0;
      *((void *)v20 + 70) = 0;
      *((void *)v20 + 69) = 0;
      IPC::Encoder::encodeHeader(v20);
      *(void *)buf = v20;
      IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode(v20, (uint64_t)a2);
      (*(void (**)(char *, unsigned char *, void))(*((void *)this + 2) + 32))((char *)this + 16, buf, 0);
      __int16 v22 = *(IPC::Encoder **)buf;
      *(void *)buf = 0;
      if (v22)
      {
        IPC::Encoder::~Encoder(v22, v21);
        WTF::fastFree(v53, v54);
      }
    }
    if (WebKit::NetworkResourceLoader::canUseCache(this, (const WebCore::ResourceRequest *)(*((void *)this + 485) + 3024)))
    {
      if (*((void *)this + 535))
      {
        if (!WebKit::NetworkResourceLoader::isCrossOriginPrefetch(this))
        {
          uint64_t v23 = off_1EB358988;
          if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v24 = *((void *)this + 11);
            if (!v24)
            {
              __break(0xC471u);
              JUMPOUT(0x198BA71F8);
            }
            uint64_t v25 = *((void *)this + 10);
            uint64_t v26 = *((void *)this + 12);
            uint64_t v27 = *((void *)this + 381);
            BOOL v28 = *((unsigned __int8 *)this + 315) == 1;
            int v29 = *((unsigned __int8 *)this + 3088);
            BOOL v30 = *((void *)this + 521) != 0;
            *(_DWORD *)buf = 134219776;
            *(void *)&uint8_t buf[4] = this;
            __int16 v95 = 2048;
            uint64_t v96 = v25;
            __int16 v97 = 2048;
            uint64_t v98 = v24;
            __int16 v99 = 2048;
            uint64_t v100 = v26;
            __int16 v101 = 2048;
            uint64_t v102 = v27;
            __int16 v103 = 1024;
            BOOL v104 = v28;
            __int16 v105 = 1024;
            int v106 = v29;
            __int16 v107 = 1024;
            BOOL v108 = v30;
            _os_log_impl(&dword_1985F2000, v23, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::tryStoreAsCacheEntry: Storing entry in HTTP disk cache", buf, 0x46u);
          }
          int v31 = (atomic_uchar *volatile **)*((void *)this + 534);
          __int16 v32 = (WebKit::NetworkCache *)(*((void *)this + 485) + 3024);
          char v33 = *((unsigned char *)this + 4920);
          WebCore::SharedBufferBuilder::take(v91, (WebKit::NetworkResourceLoader *)((char *)this + 4280));
          uint64_t v34 = v91[0];
          v91[0] = 0;
          __int16 v87 = (unsigned int *)v34;
          ++*((_DWORD *)this + 2);
          uint64_t v35 = (void *)WTF::fastMalloc((WTF *)0x10);
          void *v35 = &unk_1EE9C6430;
          v35[1] = this;
          uint64_t v93 = v35;
          WebKit::NetworkCache::Cache::store(v32, (WebKit::NetworkResourceLoader *)((char *)this + 3888), v31, v33, (uint64_t *)&v87, (uint64_t *)&v93, (uint64_t *)buf);
          double v37 = *(WebKit::NetworkCache::Entry **)buf;
          *(void *)buf = 0;
          if (v37)
          {
            WebKit::NetworkCache::Entry::~Entry(v37, v36);
            WTF::fastFree(v55, v56);
          }
          uint64_t v38 = (uint64_t)v93;
          uint64_t v93 = 0;
          if (v38) {
            (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
          }
          int v39 = v87;
          __int16 v87 = 0;
          if (v39) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v39, v36);
          }
          uint64_t v40 = (unsigned int *)v91[0];
          v91[0] = 0;
          if (!v40) {
            goto LABEL_29;
          }
          goto LABEL_55;
        }
        uint64_t v68 = *((void *)this + 484);
        uint64_t v69 = *(void *)(v68 + 80);
        *(void *)buf = *(void *)(v68 + 88);
        uint64_t v70 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v69 + 224), buf);
        if (!v70) {
          goto LABEL_29;
        }
        uint64_t v71 = v70;
        BOOL v72 = off_1EB358988;
        if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
        {
LABEL_52:
          uint64_t v80 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*((void *)this + 485) + 3024));
          char v81 = *((unsigned char *)this + 4920);
          WebCore::SharedBufferBuilder::take((uint64_t *)&v87, (WebKit::NetworkResourceLoader *)((char *)this + 4280));
          uint64_t v82 = (uint64_t)v87;
          __int16 v87 = 0;
          *(void *)buf = v82;
          WebKit::PrefetchCache::store((uint64_t **)(v71 + 520), v80, (uint64_t)this + 3888, v81, (uint64_t *)buf);
          uint64_t v83 = *(unsigned int **)buf;
          *(void *)buf = 0;
          if (v83) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v83, v36);
          }
          uint64_t v40 = v87;
          __int16 v87 = 0;
          if (!v40) {
            goto LABEL_29;
          }
LABEL_55:
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v40, v36);
LABEL_29:
          if (*((unsigned char *)this + 3352) || *((unsigned char *)this + 3864))
          {
            uint64_t v84 = *(void *)(*(void *)(*((void *)this + 484) + 80) + 40);
            WebKit::NetworkResourceLoader::resourceLoadInfo((WebKit::NetworkResourceLoader *)buf, (uint64_t)this);
            __int16 v87 = 0;
            v88[0] = 0;
            WTF::URL::invalidate((WTF::URL *)v88);
            v89[2] = 0;
            v89[0] = 0;
            *(void *)((char *)v89 + 6) = 0;
            char v90 = 1;
            v91[0] = (uint64_t)this + 80;
            v91[1] = (uint64_t)buf;
            v91[2] = (uint64_t)this + 3888;
            v91[3] = (uint64_t)&v87;
            IPC::Connection::send<Messages::NetworkProcessProxy::ResourceLoadDidCompleteWithError>(v84, (uint64_t)v91);
            WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&v87, v85);
            WebKit::ResourceLoadInfo::~ResourceLoadInfo((WebKit::ResourceLoadInfo *)buf, v86);
          }
          return WebKit::NetworkResourceLoader::cleanup((uint64_t)this, 1);
        }
        uint64_t v73 = *((void *)this + 11);
        if (v73)
        {
          uint64_t v74 = *((void *)this + 10);
          uint64_t v75 = *((void *)this + 12);
          uint64_t v76 = *((void *)this + 381);
          BOOL v77 = *((unsigned __int8 *)this + 315) == 1;
          int v78 = *((unsigned __int8 *)this + 3088);
          BOOL v79 = *((void *)this + 521) != 0;
          *(_DWORD *)buf = 134219776;
          *(void *)&uint8_t buf[4] = this;
          __int16 v95 = 2048;
          uint64_t v96 = v74;
          __int16 v97 = 2048;
          uint64_t v98 = v73;
          __int16 v99 = 2048;
          uint64_t v100 = v75;
          __int16 v101 = 2048;
          uint64_t v102 = v76;
          __int16 v103 = 1024;
          BOOL v104 = v77;
          __int16 v105 = 1024;
          int v106 = v78;
          __int16 v107 = 1024;
          BOOL v108 = v79;
          _os_log_impl(&dword_1985F2000, v72, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::tryStoreAsCacheEntry: Storing entry in prefetch cache", buf, 0x46u);
          goto LABEL_52;
        }
        __break(0xC471u);
LABEL_61:
        JUMPOUT(0x198BA71D8);
      }
      uint64_t v43 = off_1EB358988;
      if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_29;
      }
      uint64_t v61 = *((void *)this + 11);
      if (!v61)
      {
        __break(0xC471u);
        JUMPOUT(0x198BA74C4);
      }
      uint64_t v62 = *((void *)this + 10);
      uint64_t v63 = *((void *)this + 12);
      uint64_t v64 = *((void *)this + 381);
      BOOL v65 = *((unsigned __int8 *)this + 315) == 1;
      int v66 = *((unsigned __int8 *)this + 3088);
      BOOL v67 = *((void *)this + 521) != 0;
      *(_DWORD *)buf = 134219776;
      *(void *)&uint8_t buf[4] = this;
      __int16 v95 = 2048;
      uint64_t v96 = v62;
      __int16 v97 = 2048;
      uint64_t v98 = v61;
      __int16 v99 = 2048;
      uint64_t v100 = v63;
      __int16 v101 = 2048;
      uint64_t v102 = v64;
      __int16 v103 = 1024;
      BOOL v104 = v65;
      __int16 v105 = 1024;
      int v106 = v66;
      __int16 v107 = 1024;
      BOOL v108 = v67;
      uint64_t v51 = "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, is"
            "Synchronous=%d] NetworkResourceLoader::tryStoreAsCacheEntry: Not storing cache entry because m_bufferedDataForCache is null";
    }
    else
    {
      uint64_t v43 = off_1EB358988;
      if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_29;
      }
      uint64_t v44 = *((void *)this + 11);
      if (!v44)
      {
        __break(0xC471u);
        JUMPOUT(0x198BA7490);
      }
      uint64_t v45 = *((void *)this + 10);
      uint64_t v46 = *((void *)this + 12);
      uint64_t v47 = *((void *)this + 381);
      BOOL v48 = *((unsigned __int8 *)this + 315) == 1;
      int v49 = *((unsigned __int8 *)this + 3088);
      BOOL v50 = *((void *)this + 521) != 0;
      *(_DWORD *)buf = 134219776;
      *(void *)&uint8_t buf[4] = this;
      __int16 v95 = 2048;
      uint64_t v96 = v45;
      __int16 v97 = 2048;
      uint64_t v98 = v44;
      __int16 v99 = 2048;
      uint64_t v100 = v46;
      __int16 v101 = 2048;
      uint64_t v102 = v47;
      __int16 v103 = 1024;
      BOOL v104 = v48;
      __int16 v105 = 1024;
      int v106 = v49;
      __int16 v107 = 1024;
      BOOL v108 = v50;
      uint64_t v51 = "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, is"
            "Synchronous=%d] NetworkResourceLoader::tryStoreAsCacheEntry: Not storing cache entry because request is not eligible";
    }
    _os_log_impl(&dword_1985F2000, v43, OS_LOG_TYPE_DEFAULT, v51, buf, 0x46u);
    goto LABEL_29;
  }
  *((void *)this + 536) = 0;
  uint64_t v92 = v15;
  WebKit::NetworkResourceLoader::didRetrieveCacheEntry((uint64_t)this, &v92);
  double result = (uint64_t *)v92;
  if (v92)
  {
    WebKit::NetworkCache::Entry::~Entry(v92, v57);
    return (uint64_t *)WTF::fastFree(v58, v59);
  }
  return result;
}

WebCore::AdditionalNetworkLoadMetricsForWebInspector *WebKit::NetworkConnectionToWebProcess::addNetworkLoadInformationMetrics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 152);
  uint64_t v5 = *(void *)(a1 + 152);
  if (v5
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 152), 0), (uint64_t v5 = *v6) != 0))
  {
    int v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unint64_t v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  unsigned int v11 = v7 & ((v10 >> 31) ^ v10);
  BOOL v12 = (void *)(v5 + 16 * v11);
  uint64_t v13 = *v12;
  if (!*v12)
  {
LABEL_12:
    void *v12 = a2;
    uint64_t v16 = WTF::fastMalloc((WTF *)0x258);
    bzero((void *)v16, 0x258uLL);
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)v16);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v16 + 200));
    *(void *)(v16 + 440) = 0;
    *(unsigned char *)(v16 + 448) = 0;
    *(unsigned char *)(v16 + 338) = *(unsigned char *)(v16 + 338) & 0xF1 | 4;
    WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)(v16 + 456));
    *(_OWORD *)(v16 + 584) = 0u;
    uint64_t v17 = (void *)v12[1];
    v12[1] = v16;
    if (v17) {
      std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100]((uint64_t)(v12 + 1), v17);
    }
    uint64_t v18 = *v6;
    if (*v6) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - 12) = v19;
    uint64_t v20 = *v6;
    if (*v6) {
      int v21 = *(_DWORD *)(v20 - 12);
    }
    else {
      int v21 = 0;
    }
    uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
    unint64_t v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22) {
        goto LABEL_23;
      }
    }
    else if (3 * v23 > 4 * v22)
    {
      goto LABEL_23;
    }
    BOOL v12 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v12);
    goto LABEL_23;
  }
  BOOL v14 = 0;
  int v15 = 1;
  while (v13 != a2)
  {
    if (v13 == -1) {
      BOOL v14 = v12;
    }
    unsigned int v11 = (v11 + v15) & v7;
    BOOL v12 = (void *)(v5 + 16 * v11);
    uint64_t v13 = *v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *BOOL v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        BOOL v12 = v14;
      }
      goto LABEL_12;
    }
  }
LABEL_23:
  uint64_t v24 = v12[1];
  long long v25 = *(_OWORD *)(a3 + 32);
  long long v26 = *(_OWORD *)(a3 + 48);
  long long v27 = *(_OWORD *)(a3 + 64);
  *(void *)(v24 + 536) = *(void *)(a3 + 80);
  long long v28 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v24 + 456) = *(_OWORD *)a3;
  *(_OWORD *)(v24 + 472) = v28;
  *(_OWORD *)(v24 + 504) = v26;
  *(_OWORD *)(v24 + 520) = v27;
  *(_OWORD *)(v24 + 488) = v25;
  WTF::String::operator=((uint64_t *)(v24 + 544), (WTF::StringImpl **)(a3 + 88));
  long long v29 = *(_OWORD *)(a3 + 96);
  *(void *)(v24 + 568) = *(void *)(a3 + 112);
  *(_OWORD *)(v24 + 552) = v29;
  BOOL v30 = *(_DWORD **)(a3 + 120);
  if (v30) {
    ++*v30;
  }
  double result = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)(v24 + 576);
  *(void *)(v24 + 576) = v30;
  if (result)
  {
    return WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(result);
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::shouldLogCookieInformation(WebKit::NetworkResourceLoader *this, WebKit::NetworkConnectionToWebProcess *a2, SessionID a3)
{
  uint64_t v5 = a2;
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)this + 28, &v5);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 88);
    return v4();
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::logCookieInformation(WebKit::NetworkResourceLoader *this)
{
  uint64_t v2 = *((void *)this + 484);
  uint64_t v3 = *(void *)(v2 + 80);
  uint64_t v16 = *(const WTF::String **)(v2 + 88);
  int v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v3 + 232), &v16);
  uint64_t v5 = *((void *)this + 484);
  PartyForCookies = (const WTF::URL *)WebCore::ResourceRequestBase::firstPartyForCookies((WebKit::NetworkResourceLoader *)((char *)this + 168));
  uint64_t v7 = WebCore::SameSiteInfo::create();
  __int16 v14 = v7;
  char v15 = BYTE2(v7);
  unint64_t v8 = (const WTF::String **)WebCore::ResourceRequestBase::url((WebKit::NetworkResourceLoader *)((char *)this + 168));
  WebCore::ResourceRequestBase::httpReferrer((uint64_t *)&v16, (WebKit::NetworkResourceLoader *)((char *)this + 168));
  long long v12 = *((_OWORD *)this + 6);
  char v13 = 1;
  unint64_t v9 = (WTF::String *)*((void *)this + 11);
  if (v9)
  {
    WebKit::NetworkResourceLoader::logCookieInformation(v5, (uint64_t)"NetworkResourceLoader", 22, (uint64_t)this, v4, PartyForCookies, (unsigned __int8 *)&v14, v8, &v16, (uint64_t)&v12, v9, 1, *((WTF::String **)this + 381), 1);
    uint64_t result = (uint64_t)v16;
    uint64_t v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    uint64_t result = 145;
    __break(0xC471u);
  }
  return result;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebResourceLoader::DidFinishResourceLoad>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2711;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode(v5, *a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v10, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkProcessProxy::ResourceLoadDidCompleteWithError>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 348;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  unint64_t v9 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode(v4, *(void *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v4, *(WebCore::ResourceResponseBase **)(a2 + 16));
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v4, *(WebCore::ResourceError **)(a2 + 24));
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  unint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void WebKit::NetworkConnectionToWebProcess::removeNetworkLoadInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 152);
  uint64_t v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 152), &v7);
  uint64_t v5 = *(void *)(a1 + 152);
  if (v5)
  {
    uint64_t v6 = (void *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == v4) {
      return;
    }
  }
  else
  {
    if (!v4) {
      return;
    }
    uint64_t v6 = 0;
  }
  if (v6 != v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, v4);
  }
}

uint64_t WebCore::ResourceError::operator=(uint64_t a1, uint64_t a2)
{
  WTF::String::operator=((uint64_t *)a1, (WTF::StringImpl **)a2);
  WTF::String::operator=((uint64_t *)(a1 + 8), (WTF::StringImpl **)(a2 + 8));
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  WTF::String::operator=((uint64_t *)(a1 + 48), (WTF::StringImpl **)(a2 + 48));
  int v5 = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  if (v6) {
    CFRetain(*(CFTypeRef *)(a2 + 64));
  }
  uint64_t v7 = *(const void **)(a1 + 64);
  *(void *)(a1 + 64) = v6;
  if (v7) {
    CFRelease(v7);
  }
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

{
  int v4;
  uint64_t v5;
  const void *v6;

  WTF::String::operator=((uint64_t *)a1, (uint64_t *)a2);
  WTF::URL::operator=(a1 + 8, a2 + 8);
  WTF::String::operator=((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  long long v4 = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v4;
  int v5 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  uint64_t v6 = *(const void **)(a1 + 64);
  *(void *)(a1 + 64) = v5;
  if (v6) {
    CFRelease(v6);
  }
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t WebKit::NetworkResourceLoader::messageSenderConnection(WebKit::NetworkResourceLoader *this)
{
  return *(void *)(*((void *)this + 484) + 72);
}

IPC::Encoder *IPC::Connection::send<Messages::WebResourceLoader::DidFailServiceWorkerLoad>(uint64_t a1, WebCore::ResourceError **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2710;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unsigned int v11 = v6;
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  unsigned int v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::messageSenderDestinationID(WebKit::NetworkResourceLoader *this)
{
  return *((void *)this + 381);
}

IPC::Encoder **IPC::Connection::send<Messages::WebResourceLoader::DidFailResourceLoad>(uint64_t a1, WebCore::ResourceError **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2709;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v9 = v6;
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v9, v7);
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkProcessProxy::DidBlockLoadToKnownTracker>(uint64_t a1, uint64_t **a2)
{
  long long v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v4 = 324;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  unint64_t v9 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, a2[1]);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  unint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkResourceLoader::didBlockAuthenticationChallenge(WebKit::NetworkResourceLoader *this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 11);
    if (!v3)
    {
      __break(0xC471u);
      JUMPOUT(0x198BA7F7CLL);
    }
    uint64_t v4 = *((void *)this + 10);
    uint64_t v5 = *((void *)this + 12);
    uint64_t v6 = *((void *)this + 381);
    BOOL v7 = *((unsigned __int8 *)this + 315) == 1;
    int v8 = *((unsigned __int8 *)this + 3088);
    BOOL v9 = *((void *)this + 521) != 0;
    *(_DWORD *)uint64_t v18 = 134219776;
    *(void *)&v18[4] = this;
    __int16 v19 = 2048;
    uint64_t v20 = v4;
    __int16 v21 = 2048;
    uint64_t v22 = v3;
    __int16 v23 = 2048;
    uint64_t v24 = v5;
    __int16 v25 = 2048;
    uint64_t v26 = v6;
    __int16 v27 = 1024;
    BOOL v28 = v7;
    __int16 v29 = 1024;
    int v30 = v8;
    __int16 v31 = 1024;
    BOOL v32 = v9;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didBlockAuthenticationChallenge:", v18, 0x46u);
  }
  uint64_t v11 = *((void *)this + 2);
  unint64_t v10 = (char *)this + 16;
  uint64_t v12 = (*(uint64_t (**)(char *))(v11 + 56))(v10);
  char v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v13 = 2708;
  *((void *)v13 + 1) = v12;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  *(void *)uint64_t v18 = v13;
  (*(void (**)(char *, unsigned char *, void))(*(void *)v10 + 32))(v10, v18, 0);
  uint64_t result = *(IPC::Encoder **)v18;
  *(void *)uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkResourceLoader::didReceiveChallenge(WTF::StringImpl *this, const WebCore::AuthenticationChallenge *a2)
{
  if (*((unsigned char *)this + 3352) || *((unsigned char *)this + 3864))
  {
    uint64_t v3 = *(void *)(*(void *)(*((void *)this + 484) + 80) + 40);
    uint64_t v4 = (uint64_t *)((char *)this + 80);
    WebKit::NetworkResourceLoader::resourceLoadInfo((WebKit::NetworkResourceLoader *)v11, (uint64_t)this);
    uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v5 = 350;
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 66) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 68) = 0;
    *((void *)v5 + 70) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    __int16 v14 = v5;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, v4);
    IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode(v5, (uint64_t)v11);
    IPC::ArgumentCoder<WebCore::AuthenticationChallenge,void>::encode(v5, a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v14, 0, 0);
    BOOL v7 = v14;
    __int16 v14 = 0;
    if (v7)
    {
      IPC::Encoder::~Encoder(v7, v6);
      WTF::fastFree(v9, v10);
    }
    int v8 = v13;
    char v13 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    this = v12;
    uint64_t v12 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v6);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

void WebKit::NetworkResourceLoader::willSendRedirectedRequest(uint64_t a1, const WebCore::ResourceRequest *a2, WebCore::ResourceRequestBase *a3, uint64_t a4, uint64_t *a5)
{
}

void WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal(uint64_t a1, const WebCore::ResourceRequest *a2, WebCore::ResourceRequestBase *a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 88);
    if (!v13)
    {
      __break(0xC471u);
      goto LABEL_125;
    }
    uint64_t v14 = *(void *)(a1 + 80);
    uint64_t v15 = *(void *)(a1 + 96);
    uint64_t v16 = *(void *)(a1 + 3048);
    BOOL v17 = *(unsigned __int8 *)(a1 + 315) == 1;
    int v18 = *(unsigned __int8 *)(a1 + 3088);
    BOOL v19 = *(void *)(a1 + 4168) != 0;
    *(_DWORD *)buf = 134219776;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v14;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&unsigned char buf[24] = v13;
    *(_WORD *)__int16 v111 = 2048;
    *(void *)&v111[2] = v15;
    *(_WORD *)&v111[10] = 2048;
    *(void *)&v111[12] = v16;
    *(_WORD *)&v111[20] = 1024;
    *(_DWORD *)&v111[22] = v17;
    *(_WORD *)&v111[26] = 1024;
    int v112 = v18;
    LOWORD(v113) = 1024;
    *(_DWORD *)((char *)&v113 + 2) = v19;
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::willSendRedirectedRequest:", buf, 0x46u);
  }
  ++*(_DWORD *)(a1 + 4160);
  WebCore::ResourceResponseBase::operator=(a1 + 4424, a4);
  uint64_t v20 = *(void *)(a4 + 240);
  if (v20) {
    CFRetain(*(CFTypeRef *)(a4 + 240));
  }
  __int16 v21 = *(const void **)(a1 + 4664);
  *(void *)(a1 + 4664) = v20;
  if (v21) {
    CFRelease(v21);
  }
  *(unsigned char *)(a1 + 4672) = *(unsigned char *)(a4 + 248);
  if ((*(unsigned char *)(a1 + 4688) & 1) == 0)
  {
    uint64_t v22 = WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)a4);
    WTF::String::operator=((uint64_t *)(a1 + 4680), (WTF::StringImpl **)v22);
    long long v23 = *(_OWORD *)(v22 + 24);
    *(_OWORD *)(a1 + 4688) = *(_OWORD *)(v22 + 8);
    *(_OWORD *)(a1 + 4704) = v23;
  }
  if (*(void *)(a1 + 4808) && (WebCore::ContentFilter::continueAfterWillSendRequest() & 1) == 0)
  {
    std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)(a1 + 3880), 0);
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)buf);
    uint64_t v27 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v27 + 16))(v27, buf);
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    CFTypeRef v28 = cf;
    CFTypeRef cf = 0;
    if (v28) {
      CFRelease(v28);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
  }
  else
  {
    LOBYTE(v95) = 0;
    char v109 = 0;
    uint64_t v24 = (WebCore::PrivateClickMeasurement *)WebCore::ResourceRequestBase::url(a3);
    WebCore::PrivateClickMeasurement::parseAttributionRequest((uint64_t *)buf, v24, v25);
    if (v120 == 1)
    {
      if (!*(void *)buf)
      {
        int v39 = 1;
LABEL_46:
        ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9C6168[v39])(v92, buf);
LABEL_47:
        if ((a5 & 1) == 0)
        {
          unint64_t v40 = WebKit::NetworkResourceLoader::validateCacheEntryForMaxAgeCapValidation((WebKit::NetworkResourceLoader *)a1, a2, (const WebCore::ResourceRequest *)a4, v26);
          char v42 = v41;
          if (WebCore::ResourceResponseBase::source((WebCore::ResourceResponseBase *)a4) == 1
            && WebKit::NetworkResourceLoader::canUseCache((WebKit::NetworkResourceLoader *)a1, a2)
            && !*(void *)(a1 + 4296)
            && *(_DWORD *)(a1 + 4160) <= 5u)
          {
            WebKit::NetworkCache::Cache::storeRedirect(a2, (WebCore::ResourceRequest *)a4, *(WebKit::NetworkCache::Cache **)(a1 + 4272), (const String *)a3, v40, v42, (uint64_t *)&v94);
            uint64_t v44 = v94;
            __int16 v94 = 0;
            if (v44)
            {
              WebKit::NetworkCache::Entry::~Entry(v44, v43);
              WTF::fastFree(v87, v88);
            }
          }
        }
        if (*(unsigned char *)(a1 + 315) == 1
          && WebKit::NetworkResourceLoader::shouldInterruptNavigationForCrossOriginEmbedderPolicy((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceResponse *)a4))
        {
          uint64_t v45 = *(void *)(MEMORY[0x1E4FB64F8] + 8);
          if (v45)
          {
            if (v45 == 1)
            {
              uint64_t v46 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
              *MEMORY[0x1E4F30960] += 2;
            }
            else
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              uint64_t v46 = *(WTF::StringImpl **)buf;
            }
          }
          else
          {
            uint64_t v46 = 0;
          }
          uint64_t v47 = WebCore::ResourceRequestBase::url(a3);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          BOOL v48 = *(WTF::StringImpl **)buf;
          if (v46) {
            *(_DWORD *)v46 += 2;
          }
          *(void *)buf = v46;
          int v49 = *(_DWORD **)v47;
          if (*(void *)v47) {
            *v49 += 2;
          }
          *(void *)&buf[8] = v49;
          long long v50 = *(_OWORD *)(v47 + 24);
          *(_OWORD *)&buf[16] = *(_OWORD *)(v47 + 8);
          *(_OWORD *)__int16 v111 = v50;
          if (v48) {
            *(_DWORD *)v48 += 2;
          }
          *(void *)&v111[16] = v48;
          *(_DWORD *)&v111[24] = 0;
          LOWORD(v112) = 2;
          CFTypeRef v113 = 0;
          char v114 = 1;
          WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceError *)buf);
          CFTypeRef v52 = v113;
          CFTypeRef v113 = 0;
          if (v52) {
            CFRelease(v52);
          }
          uint64_t v53 = *(WTF::StringImpl **)&v111[16];
          *(void *)&v111[16] = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2) {
              WTF::StringImpl::destroy(v53, v51);
            }
            else {
              *(_DWORD *)v53 -= 2;
            }
          }
          uint64_t v64 = *(WTF::StringImpl **)&buf[8];
          *(void *)&buf[8] = 0;
          if (v64)
          {
            if (*(_DWORD *)v64 == 2) {
              WTF::StringImpl::destroy(v64, v51);
            }
            else {
              *(_DWORD *)v64 -= 2;
            }
          }
          BOOL v65 = *(WTF::StringImpl **)buf;
          *(void *)buf = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2)
            {
              WTF::StringImpl::destroy(v65, v51);
              if (!v48) {
                goto LABEL_95;
              }
LABEL_93:
              if (*(_DWORD *)v48 == 2)
              {
                WTF::StringImpl::destroy(v48, v51);
                if (!v46) {
                  goto LABEL_101;
                }
                goto LABEL_98;
              }
              *(_DWORD *)v48 -= 2;
LABEL_95:
              if (!v46) {
                goto LABEL_101;
              }
LABEL_98:
              if (*(_DWORD *)v46 == 2) {
                WTF::StringImpl::destroy(v46, v51);
              }
              else {
                *(_DWORD *)v46 -= 2;
              }
LABEL_101:
              WebCore::ResourceRequest::ResourceRequest((StringImpl *)buf);
              uint64_t v66 = *a6;
              *a6 = 0;
              (*(void (**)(uint64_t, unsigned char *))(*(void *)v66 + 16))(v66, buf);
              (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
              CFTypeRef v67 = cf;
              CFTypeRef cf = 0;
              if (v67) {
                CFRelease(v67);
              }
              WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
              goto LABEL_122;
            }
            *(_DWORD *)v65 -= 2;
          }
          if (!v48) {
            goto LABEL_95;
          }
          goto LABEL_93;
        }
        WebKit::NetworkResourceLoader::doCrossOriginOpenerHandlingOfResponse((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceResponse *)a4, v92);
        if (v93)
        {
          WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceError *)v92);
          WebCore::ResourceRequest::ResourceRequest((StringImpl *)buf);
          uint64_t v55 = *a6;
          *a6 = 0;
          (*(void (**)(uint64_t, unsigned char *))(*(void *)v55 + 16))(v55, buf);
          (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
          CFTypeRef v56 = cf;
          CFTypeRef cf = 0;
          if (v56) {
            CFRelease(v56);
          }
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
          std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v92, v57);
          goto LABEL_122;
        }
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v92, v54);
        WebCore::ResourceRequestBase::httpHeaderField();
        if (*(void *)buf)
        {
          if (WTF::linkedOnOrAfterSDKWithBehavior())
          {
            uint64_t v60 = (WTF *)WebCore::ResourceRequestBase::url(a2);
            uint64_t v61 = (const URL *)WebCore::ResourceRequestBase::url(a3);
            if (WTF::protocolHostAndPortAreEqual(v60, v61, v62)) {
              WebCore::ResourceRequestBase::setHTTPHeaderField();
            }
          }
          uint64_t v63 = *(WTF::StringImpl **)buf;
          *(void *)buf = 0;
          if (v63)
          {
            if (*(_DWORD *)v63 == 2) {
              WTF::StringImpl::destroy(v63, v59);
            }
            else {
              *(_DWORD *)v63 -= 2;
            }
          }
        }
        uint64_t v68 = *(WebKit::NetworkLoadChecker **)(a1 + 4320);
        if (!v68)
        {
          WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(a1, a2, a3, a4, (uint64_t)&v95, a6);
LABEL_122:
          std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v95, v58);
          return;
        }
        if (v109) {
          *((unsigned char *)v68 + 528) = 1;
        }
        WebKit::NetworkLoadChecker::storeRedirectionIfNeeded(v68, (const String *)a2, (const WebCore::ResourceResponse *)a4);
        uint64_t v69 = off_1EB358988;
        if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
        {
LABEL_111:
          ++*(_DWORD *)(a1 + 8);
          *(void *)buf = a1;
          *(void *)&buf[8] = a1;
          buf[16] = *(unsigned char *)(*(void *)(a1 + 4320) + 64);
          unsigned char buf[24] = 0;
          char v121 = 0;
          if (v109)
          {
            std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)&buf[24], (uint64_t)&v95);
            char v121 = 1;
          }
          uint64_t v77 = *a6;
          *a6 = 0;
          uint64_t v122 = v77;
          uint64_t v78 = *(void *)(a1 + 4320);
          uint64_t v79 = a1 + 24;
          uint64_t v80 = WTF::fastMalloc((WTF *)0xB0);
          *(void *)uint64_t v80 = &unk_1EE9C63B8;
          *(void *)(v80 + 8) = *(void *)buf;
          uint64_t v81 = *(void *)&buf[8];
          *(void *)&buf[8] = 0;
          *(void *)(v80 + 16) = v81;
          *(unsigned char *)(v80 + 24) = buf[16];
          *(unsigned char *)(v80 + 32) = 0;
          *(unsigned char *)(v80 + 160) = 0;
          if (v121)
          {
            std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v80 + 32, (uint64_t)&buf[24]);
            *(unsigned char *)(v80 + 160) = 1;
          }
          uint64_t v82 = v122;
          uint64_t v122 = 0;
          *(void *)(v80 + 168) = v82;
          v92[0] = (WTF::StringImpl *)v80;
          WebKit::NetworkLoadChecker::checkRedirection(v78, (uint64_t)a2, (uint64_t)a3, a4, v79, v92);
          uint64_t v84 = v92[0];
          v92[0] = 0;
          if (v84) {
            (*(void (**)(WTF::StringImpl *))(*(void *)v84 + 8))(v84);
          }
          uint64_t v85 = v122;
          uint64_t v122 = 0;
          if (v85) {
            (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
          }
          std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&buf[24], v83);
          uint64_t v86 = *(void *)&buf[8];
          *(void *)&buf[8] = 0;
          if (v86) {
            WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v86 + 8), v58);
          }
          goto LABEL_122;
        }
        uint64_t v70 = *(void *)(a1 + 88);
        if (v70)
        {
          uint64_t v71 = *(void *)(a1 + 80);
          uint64_t v72 = *(void *)(a1 + 96);
          uint64_t v73 = *(void *)(a1 + 3048);
          BOOL v74 = *(unsigned __int8 *)(a1 + 315) == 1;
          int v75 = *(unsigned __int8 *)(a1 + 3088);
          BOOL v76 = *(void *)(a1 + 4168) != 0;
          *(_DWORD *)buf = 134219776;
          *(void *)&uint8_t buf[4] = a1;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v71;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = v70;
          *(_WORD *)__int16 v111 = 2048;
          *(void *)&v111[2] = v72;
          *(_WORD *)&v111[10] = 2048;
          *(void *)&v111[12] = v73;
          *(_WORD *)&v111[20] = 1024;
          *(_DWORD *)&v111[22] = v74;
          *(_WORD *)&v111[26] = 1024;
          int v112 = v75;
          LOWORD(v113) = 1024;
          *(_DWORD *)((char *)&v113 + 2) = v76;
          _os_log_impl(&dword_1985F2000, v69, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::willSendRedirectedRequest: Checking redirect using NetworkLoadChecker", buf, 0x46u);
          goto LABEL_111;
        }
LABEL_126:
        __break(0xC471u);
        JUMPOUT(0x198BA8BFCLL);
      }
      if (*(_DWORD *)(*(void *)buf + 4)) {
        WebKit::NetworkResourceLoader::addConsoleMessage((void *)a1, 14, 2, (uint64_t)buf);
      }
      goto LABEL_45;
    }
    if (!v120)
    {
      __int16 v95 = *(_WORD *)buf;
      char v96 = buf[2];
      LOBYTE(v97) = 0;
      char v98 = 0;
      if (buf[16])
      {
        uint64_t v89 = *(void *)&buf[8];
        if (*(void *)&buf[8]) {
          **(_DWORD **)&buf[8] += 2;
        }
        uint64_t v97 = v89;
        char v98 = 1;
      }
      LOBYTE(v99) = 0;
      char v100 = 0;
      if (v111[0])
      {
        uint64_t v29 = *(void *)&buf[24];
        if (*(void *)&buf[24]) {
          **(_DWORD **)&buf[24] += 2;
        }
        uint64_t v99 = v29;
        char v100 = 1;
      }
      LOBYTE(v101) = 0;
      char v102 = 0;
      if (v111[16])
      {
        char v90 = *(WTF::StringImpl **)&v111[8];
        if (*(void *)&v111[8]) {
          **(_DWORD **)&v111[8] += 2;
        }
        __int16 v101 = v90;
        char v102 = 1;
      }
      LOBYTE(v103[0]) = 0;
      char v104 = 0;
      if (v115)
      {
        std::construct_at[abi:sn180100]<WebCore::PCM::DestinationUnlinkableToken,WebCore::PCM::DestinationUnlinkableToken const&,WebCore::PCM::DestinationUnlinkableToken*>(v103, (uint64_t)&v111[24]);
        char v104 = 1;
      }
      LOBYTE(v105) = 0;
      char v108 = 0;
      if (v119)
      {
        int v30 = v116;
        if (v116) {
          *v116 += 2;
        }
        __int16 v105 = v30;
        __int16 v31 = v117;
        if (v117) {
          *v117 += 2;
        }
        int v106 = v31;
        BOOL v32 = v118;
        if (v118) {
          *v118 += 2;
        }
        __int16 v107 = v32;
        char v108 = 1;
      }
      char v109 = 1;
      PartyForCookies = (const WTF::URL *)WebCore::ResourceRequestBase::firstPartyForCookies(a2);
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v92, PartyForCookies);
      if (v109)
      {
        uint64_t v35 = v92[0];
        if (v102)
        {
          v92[0] = 0;
          uint64_t v36 = v101;
          __int16 v101 = v35;
          if (!v36) {
            goto LABEL_45;
          }
          int v37 = *(_DWORD *)v36 - 2;
          if (*(_DWORD *)v36 != 2) {
            goto LABEL_43;
          }
          WTF::StringImpl::destroy(v36, v34);
          uint64_t v36 = v92[0];
          v92[0] = 0;
          if (!v36) {
            goto LABEL_45;
          }
          int v37 = *(_DWORD *)v36 - 2;
          if (*(_DWORD *)v36 == 2) {
            WTF::StringImpl::destroy(v36, v38);
          }
          else {
LABEL_43:
          }
            *(_DWORD *)uint64_t v36 = v37;
        }
        else
        {
          __int16 v101 = v92[0];
          char v102 = 1;
        }
LABEL_45:
        int v39 = v120;
        if (v120 == -1) {
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_125:
      __break(1u);
      goto LABEL_126;
    }
    uint64_t v91 = std::__throw_bad_variant_access[abi:sn180100]();
    WebKit::NetworkResourceLoader::willSendServiceWorkerRedirectedRequest(v91);
  }
}

uint64_t WebKit::NetworkResourceLoader::willSendServiceWorkerRedirectedRequest(uint64_t a1, const WebCore::ResourceRequest *a2, WebCore::ResourceRequestBase *a3, uint64_t a4)
{
  int v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v8 = &unk_1EE9C6390;
  uint64_t v11 = v8;
  WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal(a1, a2, a3, a4, 1, (uint64_t *)&v11);
  uint64_t result = (uint64_t)v11;
  if (v11)
  {
    unint64_t v10 = *(uint64_t (**)(void))(*v11 + 8);
    return v10();
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::addConsoleMessage(void *a1, char a2, char a3, uint64_t a4)
{
  uint64_t v11 = a1[381];
  char v12 = 1;
  uint64_t v13 = a1 + 12;
  char v14 = a2;
  char v15 = a3;
  uint64_t v16 = a4;
  BOOL v17 = &v11;
  uint64_t v4 = a1[11];
  if (v4)
  {
    uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v6 = 2135;
    *((void *)v6 + 1) = v4;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    int v18 = v6;
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,0ul,1ul,2ul,3ul,4ul>(v6, (uint64_t)&v13);
    (*(void (**)(void *, IPC::Encoder **, void))(a1[2] + 32))(a1 + 2, &v18, 0);
    uint64_t result = (uint64_t)v18;
    int v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v7);
      return WTF::fastFree(v9, v10);
    }
  }
  else
  {
    uint64_t result = 145;
    __break(0xC471u);
  }
  return result;
}

void WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(uint64_t a1, WebCore *a2, WebCore::ResourceRequestBase *this, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  WebCore::ResourceRequestBase::setIsAppInitiated(this);
  uint64_t v13 = (WTF::StringImpl *)off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 88);
    if (!v14)
    {
      uint64_t v26 = (WTF::StringImpl *)"/AppleInternal/Library/BuildRoots/7a5643da-a7fb-11ef-987a-36218cb420d5/Applications/Xcode"
                               ".app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal."
                               "sdk/usr/local/include/wtf/Markable.h";
      __break(0xC471u);
LABEL_112:
      __break(1u);
LABEL_113:
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v26);
      goto LABEL_30;
    }
    uint64_t v15 = *(void *)(a1 + 80);
    uint64_t v16 = *(void *)(a1 + 96);
    uint64_t v17 = *(void *)(a1 + 3048);
    BOOL v18 = *(unsigned __int8 *)(a1 + 315) == 1;
    int v19 = *(unsigned __int8 *)(a1 + 3088);
    BOOL v20 = *(void *)(a1 + 4168) != 0;
    int v21 = *(unsigned __int8 *)(a1 + 4345);
    int v22 = *(unsigned __int8 *)(a5 + 128);
    *(_DWORD *)buf = 134220288;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v15;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)uint64_t v130 = v14;
    *(_WORD *)&v130[8] = 2048;
    *(void *)&v130[10] = v16;
    *(_WORD *)&v130[18] = 2048;
    *(void *)&v130[20] = v17;
    __int16 v131 = 1024;
    *(_DWORD *)uint64_t v132 = v18;
    *(_WORD *)&v132[4] = 1024;
    *(_DWORD *)&v132[6] = v19;
    __int16 v133 = 1024;
    BOOL v134 = v20;
    __int16 v135 = 1024;
    LODWORD(v136) = v21;
    WORD2(v136) = 1024;
    *(_DWORD *)((char *)&v136 + 6) = v22;
    _os_log_impl(&dword_1985F2000, (os_log_t)v13, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRedirectedRequest: (m_isKeptAlive=%d, hasAdClickConversion=%d)", buf, 0x52u);
  }
  if (!*(unsigned char *)(a5 + 128)) {
    goto LABEL_96;
  }
  uint64_t v23 = *(void *)(a1 + 3872);
  uint64_t v24 = *(void *)(v23 + 80);
  *(void *)buf = *(void *)(v23 + 88);
  uint64_t v25 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v24 + 224), buf);
  if (!v25) {
    goto LABEL_96;
  }
  uint64_t v6 = v25;
  uint64_t v27 = *(_DWORD ***)(a1 + 3880);
  if (v27) {
    WebKit::NetworkLoad::attributedBundleIdentifier(v27, *(void *)(a1 + 80), &v107);
  }
  else {
    __int16 v107 = 0;
  }
  if (!*(unsigned char *)(a5 + 128)) {
    goto LABEL_112;
  }
  CFTypeRef v28 = (WebCore *)WebCore::ResourceRequestBase::url(a2);
  a2 = v28;
  uint64_t v13 = v107;
  __int16 v107 = 0;
  uint64_t v128 = v13;
  if (!v13 || !*((_DWORD *)v13 + 1))
  {
    WebCore::applicationBundleIdentifier((uint64_t *)buf, v28);
    int v30 = *(WTF::StringImpl **)buf;
    uint64_t v128 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v29);
        __int16 v31 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2) {
            WTF::StringImpl::destroy(v31, v29);
          }
          else {
            *(_DWORD *)v31 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v13 = v30;
  }
  if (!*(unsigned char *)(v6 + 488))
  {
    uint64_t v51 = *(void *)(v6 + 24);
    if ((v51 & 0x8000000000000000) == 0 || v51 == -1)
    {
      uint64_t v52 = *(void *)(v6 + 160);
      uint64_t v53 = (const WTF::URL *)WebCore::ResourceRequestBase::url(this);
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)buf, v53);
      uint64_t PartyForCookies = WebCore::ResourceRequestBase::firstPartyForCookies(this);
      (*(void (**)(uint64_t, uint64_t, WebCore *, unsigned char *, uint64_t, WTF::StringImpl **))(*(void *)v52 + 24))(v52, a5, a2, buf, PartyForCookies, &v128);
      uint64_t v55 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2) {
          WTF::StringImpl::destroy(v55, v29);
        }
        else {
          *(_DWORD *)v55 -= 2;
        }
      }
      uint64_t v13 = v128;
    }
    goto LABEL_88;
  }
  buf[0] = 0;
  char v154 = 0;
  std::construct_at[abi:sn180100]<WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement*>((uint64_t)buf, v6 + 176);
  char v154 = 1;
  if (*(unsigned char *)(v6 + 488))
  {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(v6 + 176), v26);
    *(unsigned char *)(v6 + 488) = 0;
    if (!v154) {
      goto LABEL_112;
    }
  }
  LOBYTE(v113) = buf[0];
  long long v32 = *(_OWORD *)&buf[8];
  *(void *)&buf[8] = 0;
  *(void *)&buf[16] = 0;
  *(_OWORD *)char v114 = v32;
  *(_OWORD *)char v115 = *(_OWORD *)v130;
  *(_OWORD *)((char *)&v115[1] + 1) = *(_OWORD *)&v130[9];
  v116[0] = 0;
  char v117 = 0;
  if ((_BYTE)v145)
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)v116, (uint64_t)&v132[2]);
    char v117 = 1;
  }
  long long v118 = *(_OWORD *)v146;
  long long v119 = *(_OWORD *)&v146[16];
  LOBYTE(v120) = 0;
  char v121 = 0;
  if ((_BYTE)v147)
  {
    uint64_t v33 = *(void *)&v146[32];
    *(void *)&v146[32] = 0;
    uint64_t v120 = v33;
    char v121 = 1;
  }
  long long v34 = *(_OWORD *)cf;
  long long v35 = v149;
  *(_OWORD *)CFTypeRef cf = 0u;
  long long v149 = 0u;
  long long v122 = v34;
  long long v123 = v35;
  LOBYTE(v124) = 0;
  char v126 = 0;
  if (v152)
  {
    long long v36 = v150;
    long long v150 = 0uLL;
    long long v124 = v36;
    uint64_t v37 = v151;
    uint64_t v151 = 0;
    uint64_t v125 = v37;
    char v126 = 1;
  }
  uint64_t v38 = v153;
  uint64_t v153 = 0;
  uint64_t v127 = v38;
  if (v154) {
    goto LABEL_113;
  }
LABEL_30:
  int v39 = (const WTF::URL *)WebCore::ResourceRequestBase::url(this);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v112, v39);
  uint64_t v40 = WebCore::ResourceRequestBase::firstPartyForCookies(this);
  char v41 = *(WTF::StringImpl **)v40;
  if (*(void *)v40) {
    *(_DWORD *)v41 += 2;
  }
  char v109 = v41;
  long long v42 = *(_OWORD *)(v40 + 24);
  long long v110 = *(_OWORD *)(v40 + 8);
  long long v111 = v42;
  uint64_t v43 = (WebCore::PrivateClickMeasurement *)WTF::WallTime::now((WTF::WallTime *)v40);
  double v45 = v44 - v115[0];
  WebCore::PrivateClickMeasurement::maxAge(v43);
  if (v45 > v46)
  {
    uint64_t v48 = *(void *)(v6 + 24);
    uint64_t v47 = *(void *)(v6 + 32);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::NetworkProcess::broadcastConsoleMessage(v47, v48, 14, 4, (uint64_t)buf);
    long long v50 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2) {
        WTF::StringImpl::destroy(v50, v49);
      }
      else {
        *(_DWORD *)v50 -= 2;
      }
    }
    goto LABEL_79;
  }
  if ((WebCore::PrivateClickMeasurement::isNeitherSameSiteNorCrossSiteTriggeringEvent() & 1) == 0)
  {
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)buf, (const WTF::URL *)&v109);
    int v57 = WTF::equal(v114[1], *(const WTF::StringImpl **)buf, v56);
    __int16 v58 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (!v58) {
      goto LABEL_44;
    }
    if (*(_DWORD *)v58 != 2)
    {
      *(_DWORD *)v58 -= 2;
LABEL_44:
      if (!v57) {
        goto LABEL_79;
      }
LABEL_50:
      uint64_t v59 = *(void *)(v6 + 160);
      *(void *)buf = v6;
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 8), v6);
      uint64_t v60 = *(atomic_uint **)(v6 + 8);
      if (v60) {
        atomic_fetch_add(v60, 1u);
      }
      *(void *)&buf[8] = v60;
      *(_WORD *)&buf[16] = *(_WORD *)a5;
      buf[18] = *(unsigned char *)(a5 + 2);
      v130[0] = 0;
      v130[8] = 0;
      if (*(unsigned char *)(a5 + 16))
      {
        uint64_t v103 = *(void *)(a5 + 8);
        *(void *)(a5 + 8) = 0;
        *(void *)uint64_t v130 = v103;
        v130[8] = 1;
      }
      v130[16] = 0;
      v130[24] = 0;
      if (*(unsigned char *)(a5 + 32))
      {
        uint64_t v61 = *(void *)(a5 + 24);
        *(void *)(a5 + 24) = 0;
        *(void *)&v130[16] = v61;
        v130[24] = 1;
      }
      v132[2] = 0;
      LOBYTE(v133) = 0;
      if (*(unsigned char *)(a5 + 48))
      {
        uint64_t v104 = *(void *)(a5 + 40);
        *(void *)(a5 + 40) = 0;
        *(void *)&v132[2] = v104;
        LOBYTE(v133) = 1;
      }
      LOBYTE(v136) = 0;
      char v138 = 0;
      if (*(unsigned char *)(a5 + 88))
      {
        long long v62 = *(_OWORD *)(a5 + 56);
        *(_OWORD *)(a5 + 56) = 0u;
        long long v136 = v62;
        long long v63 = *(_OWORD *)(a5 + 72);
        *(_OWORD *)(a5 + 72) = 0u;
        long long v137 = v63;
        char v138 = 1;
      }
      LOBYTE(v139) = 0;
      char v141 = 0;
      if (*(unsigned char *)(a5 + 120))
      {
        long long v64 = *(_OWORD *)(a5 + 96);
        *(void *)(a5 + 96) = 0;
        *(void *)(a5 + 104) = 0;
        long long v139 = v64;
        uint64_t v65 = *(void *)(a5 + 112);
        *(void *)(a5 + 112) = 0;
        uint64_t v140 = v65;
        char v141 = 1;
      }
      uint64_t v66 = *(_DWORD **)a2;
      if (*(void *)a2) {
        *v66 += 2;
      }
      v142 = v66;
      long long v67 = *(_OWORD *)((char *)a2 + 8);
      long long v144 = *(_OWORD *)((char *)a2 + 24);
      long long v143 = v67;
      uint64_t v68 = v112;
      int v112 = 0;
      uint64_t v69 = v109;
      char v109 = 0;
      uint64_t v145 = v68;
      *(void *)v146 = v69;
      *(_OWORD *)&v146[8] = v110;
      *(_OWORD *)&v146[24] = v111;
      LODWORD(v110) = v110 & 0xFFFFFFFE;
      uint64_t v70 = v128;
      uint64_t v128 = 0;
      v147 = v70;
      uint64_t v71 = WTF::fastMalloc((WTF *)0xF8);
      uint64_t v72 = v71;
      *(void *)uint64_t v71 = &unk_1EE9C6680;
      *(void *)(v71 + 8) = *(void *)buf;
      uint64_t v73 = *(void *)&buf[8];
      *(void *)&buf[8] = 0;
      *(void *)(v71 + 16) = v73;
      *(_WORD *)(v71 + 24) = *(_WORD *)&buf[16];
      *(unsigned char *)(v71 + 26) = buf[18];
      *(unsigned char *)(v71 + 32) = 0;
      *(unsigned char *)(v71 + 40) = 0;
      if (v130[8])
      {
        uint64_t v105 = *(void *)v130;
        *(void *)uint64_t v130 = 0;
        *(void *)(v71 + 32) = v105;
        *(unsigned char *)(v71 + 40) = 1;
      }
      *(unsigned char *)(v71 + 48) = 0;
      *(unsigned char *)(v71 + 56) = 0;
      if (v130[24])
      {
        uint64_t v74 = *(void *)&v130[16];
        *(void *)&v130[16] = 0;
        *(void *)(v71 + 48) = v74;
        *(unsigned char *)(v71 + 56) = 1;
      }
      *(unsigned char *)(v71 + 64) = 0;
      *(unsigned char *)(v71 + 72) = 0;
      if ((_BYTE)v133)
      {
        uint64_t v106 = *(void *)&v132[2];
        *(void *)&v132[2] = 0;
        *(void *)(v71 + 64) = v106;
        *(unsigned char *)(v71 + 72) = 1;
      }
      *(unsigned char *)(v71 + 80) = 0;
      *(unsigned char *)(v71 + 112) = 0;
      if (v138)
      {
        *(void *)(v71 + 80) = v136;
        uint64_t v75 = *((void *)&v136 + 1);
        long long v136 = 0u;
        *(void *)(v71 + 88) = v75;
        *(void *)(v71 + 96) = v137;
        uint64_t v76 = *((void *)&v137 + 1);
        long long v137 = 0u;
        *(void *)(v71 + 104) = v76;
        *(unsigned char *)(v71 + 112) = 1;
      }
      *(unsigned char *)(v71 + 120) = 0;
      *(unsigned char *)(v71 + 144) = 0;
      if (v141)
      {
        *(void *)(v71 + 120) = v139;
        uint64_t v77 = *((void *)&v139 + 1);
        long long v139 = 0uLL;
        *(void *)(v71 + 128) = v77;
        uint64_t v78 = v140;
        uint64_t v140 = 0;
        *(void *)(v71 + 136) = v78;
        *(unsigned char *)(v71 + 144) = 1;
      }
      uint64_t v79 = v142;
      if (v142) {
        *v142 += 2;
      }
      *(void *)(v71 + 152) = v79;
      long long v80 = v144;
      *(_OWORD *)(v71 + 160) = v143;
      *(_OWORD *)(v71 + 176) = v80;
      uint64_t v81 = v145;
      uint64_t v145 = 0;
      *(void *)(v71 + 192) = v81;
      double v82 = WTF::URL::URL(v71 + 200, (uint64_t *)v146);
      uint64_t v83 = v147;
      v147 = 0;
      *(void *)(v72 + 240) = v83;
      uint64_t v108 = v72;
      (*(void (**)(uint64_t, void **, uint64_t *, double))(*(void *)v59 + 16))(v59, &v113, &v108, v82);
      uint64_t v85 = v108;
      uint64_t v108 = 0;
      if (v85) {
        (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
      }
      WebKit::NetworkSession::handlePrivateClickMeasurementConversion(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::ResourceRequest const&,WebCore::PCM::AttributionTriggerData &&::String &&)::$_0::~$_0(buf, v84);
      uint64_t v13 = 0;
      goto LABEL_79;
    }
    WTF::StringImpl::destroy(v58, v49);
    if (v57) {
      goto LABEL_50;
    }
  }
LABEL_79:
  uint64_t v86 = v109;
  char v109 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2) {
      WTF::StringImpl::destroy(v86, v49);
    }
    else {
      *(_DWORD *)v86 -= 2;
    }
  }
  __int16 v87 = v112;
  int v112 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2) {
      WTF::StringImpl::destroy(v87, v49);
    }
    else {
      *(_DWORD *)v87 -= 2;
    }
  }
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v113, v49);
LABEL_88:
  uint64_t v128 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v29);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  int v88 = v107;
  __int16 v107 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2) {
      WTF::StringImpl::destroy(v88, v29);
    }
    else {
      *(_DWORD *)v88 -= 2;
    }
  }
LABEL_96:
  if (*(unsigned char *)(a1 + 4345))
  {
    WebKit::NetworkResourceLoader::continueWillSendRequest(a1, this, 0, a6);
  }
  else
  {
    WebCore::ResourceRequestBase::httpBody((uint64_t *)&v112, this);
    uint64_t v89 = v112;
    int v112 = 0;
    uint64_t v128 = v89;
    WebKit::NetworkResourceLoader::sanitizeResponseIfPossible((uint64_t)buf, a1, a4);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 56), a1 + 48);
    char v90 = *(atomic_uint **)(a1 + 56);
    if (v90) {
      atomic_fetch_add(v90, 1u);
    }
    uint64_t v91 = *a6;
    *a6 = 0;
    uint64_t v92 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
    char v93 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v93 = 2719;
    *((void *)v93 + 1) = v92;
    *((void *)v93 + 66) = (char *)v93 + 16;
    *((void *)v93 + 67) = 512;
    *((void *)v93 + 68) = 0;
    *((void *)v93 + 70) = 0;
    *((void *)v93 + 69) = 0;
    IPC::Encoder::encodeHeader(v93);
    char v109 = v93;
    IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v93, this);
    IPC::ArgumentCoder<IPC::FormDataReference,void>::encode(v93, (_DWORD **)&v128);
    IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v93, (WebCore::ResourceResponseBase *)buf);
    __int16 v94 = (void *)WTF::fastMalloc((WTF *)0x20);
    *__int16 v94 = &unk_1EE9C63E0;
    v94[1] = a1;
    v94[2] = v90;
    v94[3] = v91;
    __int16 v95 = (WTF *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    CFTypeRef v113 = v94;
    v114[0] = v95;
    (*(void (**)(uint64_t, WTF::StringImpl **, void **, void))(*(void *)(a1 + 16) + 40))(a1 + 16, &v109, &v113, 0);
    uint64_t v97 = v113;
    CFTypeRef v113 = 0;
    if (v97) {
      (*(void (**)(void *))(*v97 + 8))(v97);
    }
    char v98 = v109;
    char v109 = 0;
    if (v98)
    {
      IPC::Encoder::~Encoder(v98, v96);
      WTF::fastFree(v101, v102);
    }
    CFTypeRef v99 = cf[0];
    cf[0] = 0;
    if (v99) {
      CFRelease(v99);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, (WTF::StringImpl *)v96);
    if (v128) {
      WTF::RefCounted<WebCore::FormData>::deref(v128);
    }
    char v100 = v112;
    int v112 = 0;
    if (v100) {
      WTF::RefCounted<WebCore::FormData>::deref(v100);
    }
  }
}

void WebKit::NetworkResourceLoader::continueWillSendRequest(uint64_t a1, const WebCore::ResourceRequest *a2, int a3, uint64_t *a4)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  int v8 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 88);
    if (!v10)
    {
      __break(0xC471u);
      goto LABEL_116;
    }
    uint64_t v11 = *(void *)(a1 + 80);
    uint64_t v12 = *(void *)(a1 + 96);
    uint64_t v13 = *(void *)(a1 + 3048);
    BOOL v14 = *(unsigned __int8 *)(a1 + 315) == 1;
    int v15 = *(unsigned __int8 *)(a1 + 3088);
    BOOL v16 = *(void *)(a1 + 4168) != 0;
    *(_DWORD *)buf = 134220032;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v11;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&unsigned char buf[24] = v10;
    *(_WORD *)long long v119 = 2048;
    *(void *)&v119[2] = v12;
    *(_WORD *)&v119[10] = 2048;
    *(void *)&v119[12] = v13;
    *(_WORD *)&v119[20] = 1024;
    *(_DWORD *)&v119[22] = v14;
    *(_WORD *)&v119[26] = 1024;
    *(_DWORD *)&v119[28] = v15;
    LOWORD(v120) = 1024;
    *(_DWORD *)((char *)&v120 + 2) = v16;
    HIWORD(v120) = 1024;
    LODWORD(v1WebKit::NetworkResourceLoader::startRequest((WebKit::NetworkResourceLoader *)this, this + 21) = a3;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRequest: (isAllowedToAskUserForCredentials=%d)", buf, 0x4Cu);
  }
  uint64_t v17 = *(WebCore::ResourceResponseBase **)(a1 + 4952);
  if (v17)
  {
    BOOL v18 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(a1 + 88);
      if (!v19)
      {
        __break(0xC471u);
        JUMPOUT(0x198BAA608);
      }
      uint64_t v20 = *(void *)(a1 + 80);
      uint64_t v21 = *(void *)(a1 + 96);
      uint64_t v22 = *(void *)(a1 + 3048);
      BOOL v23 = *(unsigned __int8 *)(a1 + 315) == 1;
      int v24 = *(unsigned __int8 *)(a1 + 3088);
      BOOL v25 = *(void *)(a1 + 4168) != 0;
      *(_DWORD *)buf = 134219776;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v20;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&unsigned char buf[24] = v19;
      *(_WORD *)long long v119 = 2048;
      *(void *)&v119[2] = v21;
      *(_WORD *)&v119[10] = 2048;
      *(void *)&v119[12] = v22;
      *(_WORD *)&v119[20] = 1024;
      *(_DWORD *)&v119[22] = v23;
      *(_WORD *)&v119[26] = 1024;
      *(_DWORD *)&v119[28] = v24;
      LOWORD(v120) = 1024;
      *(_DWORD *)((char *)&v120 + 2) = v25;
      _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRequest: using stored redirect response", buf, 0x46u);
      uint64_t v17 = *(WebCore::ResourceResponseBase **)(a1 + 4952);
    }
    *(void *)(a1 + 4952) = 0;
    WebCore::ResourceRequestBase::redirectedRequest();
    *(unsigned char *)(a1 + 4328) = 1;
    WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal(a1, a2, buf, v17, 0, a4);
    CFTypeRef v26 = cf;
    CFTypeRef cf = 0;
    if (v26) {
      CFRelease(v26);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    std::default_delete<WebCore::ResourceResponse>::operator()[abi:sn180100](v17, v27);
    return;
  }
  uint64_t v28 = *(void *)(a1 + 4392);
  if (v28 && *(unsigned char *)(a1 + 3089))
  {
    int v29 = *(unsigned __int8 *)(a1 + 3088);
    if (v29 != 15 && v29 != 19) {
      goto LABEL_18;
    }
  }
  else if (*(unsigned char *)(a1 + 3089))
  {
    if (!v28) {
      goto LABEL_43;
    }
LABEL_18:
    int v30 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v31 = *(void *)(a1 + 88);
      if (!v31)
      {
        __break(0xC471u);
        JUMPOUT(0x198BAA6D8);
      }
      uint64_t v32 = *(void *)(a1 + 80);
      uint64_t v33 = *(void *)(a1 + 96);
      uint64_t v34 = *(void *)(a1 + 3048);
      BOOL v35 = *(unsigned __int8 *)(a1 + 315) == 1;
      int v36 = *(unsigned __int8 *)(a1 + 3088);
      BOOL v37 = *(void *)(a1 + 4168) != 0;
      uint64_t v38 = *(void *)(v28 + 40);
      *(_DWORD *)buf = 134220032;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v32;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&unsigned char buf[24] = v31;
      *(_WORD *)long long v119 = 2048;
      *(void *)&v119[2] = v33;
      *(_WORD *)&v119[10] = 2048;
      *(void *)&v119[12] = v34;
      *(_WORD *)&v119[20] = 1024;
      *(_DWORD *)&v119[22] = v35;
      *(_WORD *)&v119[26] = 1024;
      *(_DWORD *)&v119[28] = v36;
      LOWORD(v120) = 1024;
      *(_DWORD *)((char *)&v120 + 2) = v37;
      HIWORD(v120) = 2048;
      uint64_t v121 = v38;
      _os_log_impl(&dword_1985F2000, v30, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRequest: Continuing fetch task with redirect (fetchIdentifier=%llu)", buf, 0x50u);
      uint64_t v28 = *(void *)(a1 + 4392);
    }
    WebKit::ServiceWorkerFetchTask::continueFetchTaskWith(v28, (uint64_t)a2);
    goto LABEL_22;
  }
  char v41 = *(unsigned int **)(a1 + 4400);
  *(void *)(a1 + 4400) = 0;
  if (v41 && atomic_fetch_add((atomic_uint *volatile)v41, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v41);
    WTF::fastFree((WTF *)v41, v9);
  }
  WebKit::NetworkResourceLoader::setWorkerStart(a1, 0.0);
  WebKit::NetworkConnectionToWebProcess::createFetchTask(*(WebKit::NetworkConnectionToWebProcess **)(a1 + 3872), (WebKit::NetworkResourceLoader *)a1, a2, (uint64_t *)&v117);
  long long v42 = v117;
  if (v117)
  {
    uint64_t v43 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v44 = *(void *)(a1 + 88);
      if (!v44)
      {
        __break(0xC471u);
        JUMPOUT(0x198BAA6F8);
      }
      uint64_t v45 = *(void *)(a1 + 80);
      uint64_t v46 = *(void *)(a1 + 96);
      uint64_t v47 = *(void *)(a1 + 3048);
      BOOL v48 = *(unsigned __int8 *)(a1 + 315) == 1;
      int v49 = *(unsigned __int8 *)(a1 + 3088);
      BOOL v50 = *(void *)(a1 + 4168) != 0;
      uint64_t v51 = *((void *)v42 + 5);
      *(_DWORD *)buf = 134220032;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v45;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&unsigned char buf[24] = v44;
      *(_WORD *)long long v119 = 2048;
      *(void *)&v119[2] = v46;
      *(_WORD *)&v119[10] = 2048;
      *(void *)&v119[12] = v47;
      *(_WORD *)&v119[20] = 1024;
      *(_DWORD *)&v119[22] = v48;
      *(_WORD *)&v119[26] = 1024;
      *(_DWORD *)&v119[28] = v49;
      LOWORD(v120) = 1024;
      *(_DWORD *)((char *)&v120 + 2) = v50;
      HIWORD(v120) = 2048;
      uint64_t v121 = v51;
      _os_log_impl(&dword_1985F2000, v43, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRequest: Created a ServiceWorkerFetchTask to handle the redirect (fetchIdentifier=%llu)", buf, 0x50u);
    }
    std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)(a1 + 3880), 0);
    uint64_t v52 = v117;
    char v117 = 0;
    uint64_t v53 = *(WebKit::ServiceWorkerFetchTask **)(a1 + 4392);
    *(void *)(a1 + 4392) = v52;
    if (v53) {
      WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v53);
    }
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)buf);
    uint64_t v54 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v54 + 16))(v54, buf);
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
    CFTypeRef v55 = cf;
    CFTypeRef cf = 0;
    if (v55) {
      CFRelease(v55);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    CFTypeRef v56 = v117;
    char v117 = 0;
    if (v56) {
      WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v56);
    }
    return;
  }
  int v57 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v58 = *(void *)(a1 + 88);
    if (!v58)
    {
      __break(0xC471u);
      JUMPOUT(0x198BAA718);
    }
    uint64_t v59 = *(void *)(a1 + 80);
    uint64_t v60 = *(void *)(a1 + 96);
    uint64_t v61 = *(void *)(a1 + 3048);
    BOOL v62 = *(unsigned __int8 *)(a1 + 315) == 1;
    int v63 = *(unsigned __int8 *)(a1 + 3088);
    BOOL v64 = *(void *)(a1 + 4168) != 0;
    *(_DWORD *)buf = 134219776;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v59;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&unsigned char buf[24] = v58;
    *(_WORD *)long long v119 = 2048;
    *(void *)&v119[2] = v60;
    *(_WORD *)&v119[10] = 2048;
    *(void *)&v119[12] = v61;
    *(_WORD *)&v119[20] = 1024;
    *(_DWORD *)&v119[22] = v62;
    *(_WORD *)&v119[26] = 1024;
    *(_DWORD *)&v119[28] = v63;
    LOWORD(v120) = 1024;
    *(_DWORD *)((char *)&v120 + 2) = v64;
    _os_log_impl(&dword_1985F2000, v57, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRequest: Navigation is not using service workers", buf, 0x46u);
  }
  uint64_t v65 = *(WebKit::ServiceWorkerFetchTask **)(a1 + 4392);
  *(unsigned char *)(a1 + 4328) = v65 != 0;
  *(void *)(a1 + 4392) = 0;
  if (!v65) {
    goto LABEL_51;
  }
  WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v65);
  uint64_t v28 = *(void *)(a1 + 4392);
  if (v28) {
    goto LABEL_18;
  }
LABEL_43:
  if (*(unsigned char *)(a1 + 4328))
  {
    *(unsigned char *)(a1 + 4328) = 0;
    uint64_t v66 = *(const String **)(a1 + 3880);
    if (v66) {
      WebKit::NetworkLoad::updateRequestAfterRedirection(v66, a2);
    }
    long long v67 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v68 = *(void *)(a1 + 88);
      if (!v68)
      {
        __break(0xC471u);
        JUMPOUT(0x198BAA738);
      }
      uint64_t v69 = *(void *)(a1 + 80);
      uint64_t v70 = *(void *)(a1 + 96);
      uint64_t v71 = *(void *)(a1 + 3048);
      BOOL v72 = *(unsigned __int8 *)(a1 + 315) == 1;
      int v73 = *(unsigned __int8 *)(a1 + 3088);
      BOOL v74 = *(void *)(a1 + 4168) != 0;
      *(_DWORD *)buf = 134219776;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v69;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&unsigned char buf[24] = v68;
      *(_WORD *)long long v119 = 2048;
      *(void *)&v119[2] = v70;
      *(_WORD *)&v119[10] = 2048;
      *(void *)&v119[12] = v71;
      *(_WORD *)&v119[20] = 1024;
      *(_DWORD *)&v119[22] = v72;
      *(_WORD *)&v119[26] = 1024;
      *(_DWORD *)&v119[28] = v73;
      LOWORD(v120) = 1024;
      *(_DWORD *)((char *)&v120 + 2) = v74;
      _os_log_impl(&dword_1985F2000, v67, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRequest: Restarting network load", buf, 0x46u);
    }
    WebKit::NetworkResourceLoader::restartNetworkLoad(a1, a2, a4);
    return;
  }
LABEL_51:
  if (*(void *)(a1 + 4320))
  {
    if ((*(unsigned char *)(WebCore::ResourceRequestBase::url(a2) + 8) & 2) == 0)
    {
      WebCore::ResourceRequestBase::url(a2);
      if ((WTF::URL::protocolIs() & 1) == 0)
      {
        if (*(_DWORD *)(a1 + 4160))
        {
          uint64_t v75 = off_1EB358988;
          if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
          {
LABEL_56:
            uint64_t v76 = WebCore::ResourceRequestBase::url(a2);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            uint64_t v77 = *(WTF::StringImpl **)buf;
            *(void *)buf = 0;
            uint64_t v78 = *(_DWORD **)v76;
            if (*(void *)v76) {
              *v78 += 2;
            }
            *(void *)&buf[8] = v78;
            long long v79 = *(_OWORD *)(v76 + 24);
            *(_OWORD *)&buf[16] = *(_OWORD *)(v76 + 8);
            *(_OWORD *)long long v119 = v79;
            if (v77) {
              *(_DWORD *)v77 += 2;
            }
            *(void *)&v119[16] = v77;
            *(_DWORD *)&v119[24] = 0;
            *(_WORD *)&v119[28] = 2;
            CFTypeRef v120 = 0;
            LOBYTE(v1WebKit::NetworkResourceLoader::startRequest((WebKit::NetworkResourceLoader *)this, this + 21) = 1;
            WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceError *)buf);
            CFTypeRef v81 = v120;
            CFTypeRef v120 = 0;
            if (v81) {
              CFRelease(v81);
            }
            double v82 = *(WTF::StringImpl **)&v119[16];
            *(void *)&v119[16] = 0;
            if (v82)
            {
              if (*(_DWORD *)v82 == 2) {
                WTF::StringImpl::destroy(v82, v80);
              }
              else {
                *(_DWORD *)v82 -= 2;
              }
            }
            uint64_t v104 = *(WTF::StringImpl **)&buf[8];
            *(void *)&buf[8] = 0;
            if (v104)
            {
              if (*(_DWORD *)v104 == 2) {
                WTF::StringImpl::destroy(v104, v80);
              }
              else {
                *(_DWORD *)v104 -= 2;
              }
            }
            uint64_t v105 = *(WTF::StringImpl **)buf;
            *(void *)buf = 0;
            if (v105)
            {
              if (*(_DWORD *)v105 == 2) {
                WTF::StringImpl::destroy(v105, v80);
              }
              else {
                *(_DWORD *)v105 -= 2;
              }
            }
            if (v77)
            {
              if (*(_DWORD *)v77 == 2) {
                WTF::StringImpl::destroy(v77, v80);
              }
              else {
                *(_DWORD *)v77 -= 2;
              }
            }
            goto LABEL_22;
          }
          uint64_t v110 = *(void *)(a1 + 88);
          if (v110)
          {
            uint64_t v111 = *(void *)(a1 + 80);
            uint64_t v112 = *(void *)(a1 + 96);
            uint64_t v113 = *(void *)(a1 + 3048);
            BOOL v114 = *(unsigned __int8 *)(a1 + 315) == 1;
            int v115 = *(unsigned __int8 *)(a1 + 3088);
            BOOL v116 = *(void *)(a1 + 4168) != 0;
            *(_DWORD *)buf = 134219776;
            *(void *)&uint8_t buf[4] = a1;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v111;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&unsigned char buf[24] = v110;
            *(_WORD *)long long v119 = 2048;
            *(void *)&v119[2] = v112;
            *(_WORD *)&v119[10] = 2048;
            *(void *)&v119[12] = v113;
            *(_WORD *)&v119[20] = 1024;
            *(_DWORD *)&v119[22] = v114;
            *(_WORD *)&v119[26] = 1024;
            *(_DWORD *)&v119[28] = v115;
            LOWORD(v120) = 1024;
            *(_DWORD *)((char *)&v120 + 2) = v116;
            _os_log_error_impl(&dword_1985F2000, v75, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRequest: Failing load because it redirected to a scheme that is not HTTP(S)", buf, 0x46u);
            goto LABEL_56;
          }
          __break(0xC471u);
LABEL_116:
          JUMPOUT(0x198BAA5DCLL);
        }
      }
    }
  }
  *(unsigned char *)(a1 + 4194) = a3;
  WebCore::ResourceRequestBase::cachePolicy((WebCore::ResourceRequestBase *)(a1 + 168));
  WebCore::ResourceRequestBase::setCachePolicy();
  WebCore::ResourceRequestBase::setCachePartition(a2, (const WTF::String *)(a1 + 328));
  if (*(unsigned char *)(a1 + 4304))
  {
    *(unsigned char *)(a1 + 4304) = 0;
    uint64_t v83 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v84 = *(void *)(a1 + 88);
      if (!v84)
      {
        __break(0xC471u);
        JUMPOUT(0x198BAA760);
      }
      uint64_t v85 = *(void *)(a1 + 80);
      uint64_t v86 = *(void *)(a1 + 96);
      uint64_t v87 = *(void *)(a1 + 3048);
      BOOL v88 = *(unsigned __int8 *)(a1 + 315) == 1;
      int v89 = *(unsigned __int8 *)(a1 + 3088);
      BOOL v90 = *(void *)(a1 + 4168) != 0;
      *(_DWORD *)buf = 134219776;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v85;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&unsigned char buf[24] = v84;
      *(_WORD *)long long v119 = 2048;
      *(void *)&v119[2] = v86;
      *(_WORD *)&v119[10] = 2048;
      *(void *)&v119[12] = v87;
      *(_WORD *)&v119[20] = 1024;
      *(_DWORD *)&v119[22] = v88;
      *(_WORD *)&v119[26] = 1024;
      *(_DWORD *)&v119[28] = v89;
      LOWORD(v120) = 1024;
      *(_DWORD *)((char *)&v120 + 2) = v90;
      _os_log_impl(&dword_1985F2000, v83, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRequest: m_isWaitingContinueWillSendRequestForCachedRedirect was set", buf, 0x46u);
    }
    if (!WebKit::NetworkResourceLoader::canUseCache((WebKit::NetworkResourceLoader *)a1, a2)
      || *(void *)(a1 + 4296)
      || *(_DWORD *)(a1 + 4160) > 5u)
    {
      WebKit::NetworkResourceLoader::startNetworkLoad((WebKit::NetworkResourceLoader *)a1, (uint64_t)a2, 1);
    }
    else
    {
      WebKit::NetworkResourceLoader::retrieveCacheEntry((WebKit::NetworkResourceLoader *)a1, a2);
    }
    goto LABEL_22;
  }
  if (!*(void *)(a1 + 3880))
  {
LABEL_22:
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)buf);
    uint64_t v39 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v39 + 16))(v39, buf);
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
    CFTypeRef v40 = cf;
    CFTypeRef cf = 0;
    if (v40) {
      CFRelease(v40);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    return;
  }
  uint64_t v91 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v92 = *(void *)(a1 + 88);
    if (!v92)
    {
      __break(0xC471u);
      JUMPOUT(0x198BAA780);
    }
    uint64_t v93 = *(void *)(a1 + 80);
    uint64_t v94 = *(void *)(a1 + 96);
    uint64_t v95 = *(void *)(a1 + 3048);
    BOOL v96 = *(unsigned __int8 *)(a1 + 315) == 1;
    int v97 = *(unsigned __int8 *)(a1 + 3088);
    BOOL v98 = *(void *)(a1 + 4168) != 0;
    *(_DWORD *)buf = 134219776;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v93;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&unsigned char buf[24] = v92;
    *(_WORD *)long long v119 = 2048;
    *(void *)&v119[2] = v94;
    *(_WORD *)&v119[10] = 2048;
    *(void *)&v119[12] = v95;
    *(_WORD *)&v119[20] = 1024;
    *(_DWORD *)&v119[22] = v96;
    *(_WORD *)&v119[26] = 1024;
    *(_DWORD *)&v119[28] = v97;
    LOWORD(v120) = 1024;
    *(_DWORD *)((char *)&v120 + 2) = v98;
    _os_log_impl(&dword_1985F2000, v91, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRequest: Telling NetworkLoad to proceed with the redirect", buf, 0x46u);
  }
  if ((*(unsigned char *)(a1 + 3352) || *(unsigned char *)(a1 + 3864)) && (WebCore::ResourceRequestBase::isNull(a2) & 1) == 0)
  {
    uint64_t v99 = *(void *)(*(void *)(*(void *)(a1 + 3872) + 80) + 40);
    WebKit::NetworkResourceLoader::resourceLoadInfo((WebKit::NetworkResourceLoader *)buf, a1);
    char v100 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v100 = 349;
    *((void *)v100 + 1) = 0;
    *((void *)v100 + 66) = (char *)v100 + 16;
    *((void *)v100 + 67) = 512;
    *((void *)v100 + 68) = 0;
    *((void *)v100 + 70) = 0;
    *((void *)v100 + 69) = 0;
    IPC::Encoder::encodeHeader(v100);
    char v117 = v100;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v100, (uint64_t *)(a1 + 80));
    IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode(v100, (uint64_t)buf);
    IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v100, (WebCore::ResourceResponseBase *)(a1 + 4424));
    IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v100, a2);
    IPC::Connection::sendMessageImpl(v99, (uint64_t *)&v117, 0, 0);
    char v102 = v117;
    char v117 = 0;
    if (v102)
    {
      IPC::Encoder::~Encoder(v102, v101);
      WTF::fastFree(v108, v109);
    }
    uint64_t v103 = v122;
    long long v122 = 0;
    if (v103)
    {
      if (*(_DWORD *)v103 == 2) {
        WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v101);
      }
      else {
        *(_DWORD *)v103 -= 2;
      }
    }
    uint64_t v106 = *(WTF::StringImpl **)&v119[24];
    *(void *)&v119[24] = 0;
    if (v106)
    {
      if (*(_DWORD *)v106 == 2) {
        WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v101);
      }
      else {
        *(_DWORD *)v106 -= 2;
      }
    }
  }
  uint64_t v107 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, const WebCore::ResourceRequest *))(*(void *)v107 + 16))(v107, a2);
  (*(void (**)(uint64_t))(*(void *)v107 + 8))(v107);
}

WTF *WebKit::NetworkResourceLoader::restartNetworkLoad(uint64_t a1, WebCore::ResourceRequestBase *a2, uint64_t *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 88);
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198BAAA9CLL);
    }
    uint64_t v8 = *(void *)(a1 + 80);
    uint64_t v9 = *(void *)(a1 + 96);
    uint64_t v10 = *(void *)(a1 + 3048);
    BOOL v11 = *(unsigned __int8 *)(a1 + 315) == 1;
    int v12 = *(unsigned __int8 *)(a1 + 3088);
    BOOL v13 = *(void *)(a1 + 4168) != 0;
    BOOL v14 = *(void *)(a1 + 3880) != 0;
    int v28 = 134220032;
    uint64_t v29 = a1;
    __int16 v30 = 2048;
    uint64_t v31 = v8;
    __int16 v32 = 2048;
    uint64_t v33 = v7;
    __int16 v34 = 2048;
    uint64_t v35 = v9;
    __int16 v36 = 2048;
    uint64_t v37 = v10;
    __int16 v38 = 1024;
    BOOL v39 = v11;
    __int16 v40 = 1024;
    int v41 = v12;
    __int16 v42 = 1024;
    BOOL v43 = v13;
    __int16 v44 = 1024;
    BOOL v45 = v14;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::restartNetworkLoad: (hasNetworkLoad=%d)", (uint8_t *)&v28, 0x4Cu);
  }
  uint64_t v15 = *(void *)(a1 + 3880);
  if (v15)
  {
    BOOL v16 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 88);
      if (!v17)
      {
        __break(0xC471u);
        JUMPOUT(0x198BAAABCLL);
      }
      uint64_t v18 = *(void *)(a1 + 80);
      uint64_t v19 = *(void *)(a1 + 96);
      uint64_t v20 = *(void *)(a1 + 3048);
      BOOL v21 = *(unsigned __int8 *)(a1 + 315) == 1;
      int v22 = *(unsigned __int8 *)(a1 + 3088);
      BOOL v23 = *(void *)(a1 + 4168) != 0;
      int v28 = 134219776;
      uint64_t v29 = a1;
      __int16 v30 = 2048;
      uint64_t v31 = v18;
      __int16 v32 = 2048;
      uint64_t v33 = v17;
      __int16 v34 = 2048;
      uint64_t v35 = v19;
      __int16 v36 = 2048;
      uint64_t v37 = v20;
      __int16 v38 = 1024;
      BOOL v39 = v21;
      __int16 v40 = 1024;
      int v41 = v22;
      __int16 v42 = 1024;
      BOOL v43 = v23;
      _os_log_impl(&dword_1985F2000, v16, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::restartNetworkLoad: Cancelling existing network load so we can restart the load.", (uint8_t *)&v28, 0x46u);
      uint64_t v15 = *(void *)(a1 + 3880);
    }
    uint64_t v24 = *(void *)(v15 + 3008);
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
    }
    std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)(a1 + 3880), 0);
  }
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)&v28);
  uint64_t v25 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, int *))(*(void *)v25 + 16))(v25, &v28);
  (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  CFTypeRef v26 = cf;
  CFTypeRef cf = 0;
  if (v26) {
    CFRelease(v26);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v28);
  uint64_t result = (WTF *)WebCore::ResourceRequestBase::isEmpty(a2);
  if ((result & 1) == 0) {
    return WebKit::NetworkResourceLoader::startNetworkLoad((WebKit::NetworkResourceLoader *)a1, (uint64_t)a2, 0);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkResourceLoader::setWorkerStart(uint64_t a1, double a2)
{
  *(double *)(a1 + 4408) = a2;
  uint64_t v3 = *(void *)(a1 + 3048);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2717;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v4, *(double *)(a1 + 4408));
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(a1 + 16) + 32))(a1 + 16, &v9, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void WebKit::NetworkResourceLoader::continueDidReceiveResponse(WebKit::NetworkResourceLoader *this)
{
  v45[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 11);
    if (!v3)
    {
      __break(0xC471u);
      goto LABEL_16;
    }
    uint64_t v4 = *((void *)this + 10);
    uint64_t v5 = *((void *)this + 12);
    uint64_t v6 = *((void *)this + 381);
    BOOL v7 = *((unsigned __int8 *)this + 315) == 1;
    int v8 = *((unsigned __int8 *)this + 3088);
    BOOL v9 = *((void *)this + 521) != 0;
    BOOL v10 = *((void *)this + 539) != 0;
    BOOL v11 = *((void *)this + 542) != 0;
    *(_DWORD *)buf = 134220288;
    uint64_t v29 = this;
    __int16 v30 = 2048;
    uint64_t v31 = v4;
    __int16 v32 = 2048;
    uint64_t v33 = v3;
    __int16 v34 = 2048;
    uint64_t v35 = v5;
    __int16 v36 = 2048;
    uint64_t v37 = v6;
    __int16 v38 = 1024;
    BOOL v39 = v7;
    __int16 v40 = 1024;
    int v41 = v8;
    __int16 v42 = 1024;
    BOOL v43 = v9;
    __int16 v44 = 1024;
    LODWORD(v45[0]) = v10;
    WORD2(v45[0]) = 1024;
    *(_DWORD *)((char *)v45 + 6) = v11;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueDidReceiveResponse: (hasCacheEntryWaitingForContinueDidReceiveResponse=%d, hasResponseCompletionHandler=%d)", buf, 0x52u);
  }
  int v12 = (WebKit::ServiceWorkerFetchTask *)*((void *)this + 549);
  if (v12)
  {
    uint64_t v15 = off_1EB358988;
    if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
LABEL_12:
      WebKit::ServiceWorkerFetchTask::continueDidReceiveFetchResponse(v12);
      return;
    }
    uint64_t v16 = *((void *)this + 11);
    if (v16)
    {
      uint64_t v17 = *((void *)this + 10);
      uint64_t v18 = *((void *)this + 12);
      uint64_t v19 = *((void *)this + 381);
      BOOL v20 = *((unsigned __int8 *)this + 315) == 1;
      int v21 = *((unsigned __int8 *)this + 3088);
      BOOL v22 = *((void *)this + 521) != 0;
      uint64_t v23 = *((void *)v12 + 5);
      *(_DWORD *)buf = 134220032;
      uint64_t v29 = this;
      __int16 v30 = 2048;
      uint64_t v31 = v17;
      __int16 v32 = 2048;
      uint64_t v33 = v16;
      __int16 v34 = 2048;
      uint64_t v35 = v18;
      __int16 v36 = 2048;
      uint64_t v37 = v19;
      __int16 v38 = 1024;
      BOOL v39 = v20;
      __int16 v40 = 1024;
      int v41 = v21;
      __int16 v42 = 1024;
      BOOL v43 = v22;
      __int16 v44 = 2048;
      v45[0] = v23;
      _os_log_impl(&dword_1985F2000, v15, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueDidReceiveResponse: continuing with ServiceWorkerFetchTask (fetchIdentifier=%llu)", buf, 0x50u);
      int v12 = (WebKit::ServiceWorkerFetchTask *)*((void *)this + 549);
      goto LABEL_12;
    }
    __break(0xC471u);
LABEL_16:
    JUMPOUT(0x198BAAE58);
  }
  BOOL v13 = (WebKit::NetworkCache::Entry *)*((void *)this + 539);
  if (v13)
  {
    *((void *)this + 539) = 0;
    uint64_t v27 = v13;
    WebKit::NetworkResourceLoader::sendResultForCacheEntry((uint64_t)this, &v27);
    WebKit::NetworkCache::Entry::~Entry(v13, v24);
    WTF::fastFree(v25, v26);
    WebKit::NetworkResourceLoader::cleanup((uint64_t)this, 1);
  }
  else
  {
    uint64_t v14 = *((void *)this + 542);
    if (v14)
    {
      *((void *)this + 542) = 0;
      (*(void (**)(uint64_t, void))(*(void *)v14 + 16))(v14, 0);
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
}

void WebKit::NetworkResourceLoader::sendResultForCacheEntry(uint64_t a1, WebKit::NetworkCache::Entry **a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 88);
    if (!v5)
    {
      int v21 = "/AppleInternal/Library/BuildRoots/7a5643da-a7fb-11ef-987a-36218cb420d5/Applications/Xcode.app/Contents/Devel"
            "oper/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/wtf/Markable.h";
      uint64_t v22 = 145;
      __break(0xC471u);
      goto LABEL_24;
    }
    uint64_t v6 = *(void *)(a1 + 80);
    uint64_t v7 = *(void *)(a1 + 96);
    uint64_t v8 = *(void *)(a1 + 3048);
    BOOL v9 = *(unsigned __int8 *)(a1 + 315) == 1;
    int v10 = *(unsigned __int8 *)(a1 + 3088);
    BOOL v11 = *(void *)(a1 + 4168) != 0;
    *(_DWORD *)buf = 134219776;
    uint64_t v27 = a1;
    __int16 v28 = 2048;
    uint64_t v29 = v6;
    __int16 v30 = 2048;
    uint64_t v31 = v5;
    __int16 v32 = 2048;
    uint64_t v33 = v7;
    __int16 v34 = 2048;
    uint64_t v35 = v8;
    __int16 v36 = 1024;
    BOOL v37 = v9;
    __int16 v38 = 1024;
    int v39 = v10;
    __int16 v40 = 1024;
    BOOL v41 = v11;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::sendResultForCacheEntry:", buf, 0x46u);
  }
  WebKit::NetworkCache::Entry::shareableResourceHandle(*a2, buf);
  if ((_BYTE)v31)
  {
    uint64_t v17 = *(WebCore::ContentFilter **)(a1 + 4808);
    if (v17)
    {
      uint64_t v19 = (WebCore::FragmentedSharedBuffer *)WebKit::NetworkCache::Entry::buffer(*a2);
      WebCore::FragmentedSharedBuffer::makeContiguous((uint64_t *)&v25, v19);
      BOOL v20 = (const WebCore::SharedBuffer *)v25;
      WebKit::NetworkCache::Entry::buffer(*a2);
      LOBYTE(a2) = WebCore::ContentFilter::continueAfterDataReceived(v17, v20);
      uint64_t v22 = (uint64_t)v25;
      uint64_t v25 = 0;
      if (v22) {
        goto LABEL_25;
      }
      while ((a2 & 1) != 0)
      {
        if ((_BYTE)v31) {
          goto LABEL_15;
        }
LABEL_24:
        __break(1u);
LABEL_25:
        uint64_t v22 = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v22, v21);
      }
      uint64_t v23 = *(WebCore::ContentFilter **)(a1 + 4808);
      uint64_t v24 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 168));
      WebCore::ContentFilter::continueAfterNotifyFinished(v23, v24);
      WebCore::ContentFilter::stopFilteringMainResource(*(WebCore::ContentFilter **)(a1 + 4808));
      WebKit::NetworkResourceLoader::sendResultForCacheEntry(std::unique_ptr<WebKit::NetworkCache::Entry>)::$_0::operator()(a1);
    }
    else
    {
LABEL_15:
      uint64_t v25 = buf;
      IPC::MessageSender::send<Messages::WebResourceLoader::DidReceiveResource>(a1 + 16, (unint64_t *)&v25);
    }
    if ((_BYTE)v31) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)buf);
    }
  }
  else
  {
    if (WebKit::NetworkResourceLoader::shouldLogCookieInformation(*(WebKit::NetworkResourceLoader **)(*(void *)(a1 + 3872) + 80), *(WebKit::NetworkConnectionToWebProcess **)(*(void *)(a1 + 3872) + 88), v12))WebKit::NetworkResourceLoader::logCookieInformation((WebKit::NetworkResourceLoader *)a1); {
    BOOL v13 = *a2;
    }
    uint64_t v14 = *((void *)*a2 + 70);
    if (v14
      || (WebKit::NetworkCache::Entry::initializeBufferFromStorageRecord((unsigned int **)v13),
          (uint64_t v14 = *((void *)v13 + 70)) != 0))
    {
      atomic_fetch_add((atomic_uint *volatile)v14, 1u);
    }
    WebKit::NetworkResourceLoader::sendBuffer((WebKit::NetworkResourceLoader *)a1, (WebCore::SharedBuffer **)v14, *(void *)(v14 + 48));
    uint64_t v15 = *(WebCore::ContentFilter **)(a1 + 4808);
    if (v15)
    {
      uint64_t v18 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 168));
      WebCore::ContentFilter::continueAfterNotifyFinished(v15, v18);
      WebCore::ContentFilter::stopFilteringMainResource(*(WebCore::ContentFilter **)(a1 + 4808));
    }
    WebKit::NetworkResourceLoader::sendResultForCacheEntry(std::unique_ptr<WebKit::NetworkCache::Entry>)::$_0::operator()(a1);
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v14, v16);
  }
}

IPC::Encoder **WebKit::NetworkResourceLoader::didSendData(IPC::Encoder **this, uint64_t a2, uint64_t a3)
{
  if (!this[521])
  {
    v3[0] = a2;
    v3[1] = a3;
    return IPC::MessageSender::send<Messages::WebResourceLoader::DidSendData>((uint64_t)(this + 2), v3);
  }
  return this;
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebResourceLoader::DidSendData>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);

  return IPC::MessageSender::send<Messages::WebResourceLoader::DidSendData>(a1, a2, v4);
}

uint64_t WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  int v4 = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  char v5 = *((unsigned char *)a2 + 20);
  *((unsigned char *)a2 + 20) = 0;
  uint64_t v6 = *(WTF **)a1;
  *(void *)a1 = v3;
  uint64_t v7 = a2[1];
  a2[1] = 0;
  uint64_t v8 = (WTF::StringImpl *)*(unsigned int *)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 20) = v5;
  if (v6) {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v6, v8);
  }
  return a1;
}

WTF::StringImpl *WebKit::NetworkResourceLoader::sendResultForCacheEntry(std::unique_ptr<WebKit::NetworkCache::Entry>)::$_0::operator()(uint64_t a1)
{
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v15);
  v17 |= 1u;
  if (*(unsigned char *)(a1 + 4344))
  {
    WebCore::AdditionalNetworkLoadMetricsForWebInspector::create((uint64_t *)&v21);
    uint64_t v12 = (uint64_t)v21;
    *((void *)v21 + 10) = 0;
    *(void *)(v12 + 88) = 0;
    *(void *)(v12 + 72) = 0;
    int v21 = 0;
    BOOL v13 = v20;
    BOOL v20 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)v12;
    if (v13)
    {
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v13);
      uint64_t v14 = v21;
      int v21 = 0;
      if (v14) {
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v14);
      }
    }
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = a1 + 16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(v3 + 56))(v2);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2711;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v21 = v5;
  IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode(v5, (uint64_t)v15);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v2 + 32))(v2, &v21, 0);
  uint64_t v7 = v21;
  int v21 = 0;
  if (v7)
  {
    IPC::Encoder::~Encoder(v7, v6);
    WTF::fastFree(v10, v11);
  }
  uint64_t v8 = v20;
  BOOL v20 = 0;
  if (v8) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v8);
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebResourceLoader::DidReceiveResource>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);

  return IPC::MessageSender::send<Messages::WebResourceLoader::DidReceiveResource>(a1, a2, v4);
}

uint64_t non-virtual thunk to'WebKit::NetworkResourceLoader::messageSenderConnection(WebKit::NetworkResourceLoader *this)
{
  return *(void *)(*((void *)this + 482) + 72);
}

uint64_t WebKit::NetworkResourceLoader::crossOriginAccessControlCheckEnabled(WebKit::NetworkResourceLoader *this)
{
  return *((unsigned __int8 *)this + 3384);
}

uint64_t non-virtual thunk to'WebKit::NetworkResourceLoader::crossOriginAccessControlCheckEnabled(WebKit::NetworkResourceLoader *this)
{
  return *((unsigned __int8 *)this + 3352);
}

WTF::StringImpl *WebKit::NetworkResourceLoader::logCookieInformation(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, const WTF::URL *a6, unsigned __int8 *a7, const WTF::String **a8, const WTF::String **a9, uint64_t a10, WTF::String *a11, uint64_t a12, WTF::String *a13, uint64_t a14)
{
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  long long v118 = *(_OWORD *)a10;
  uint64_t v119 = *(void *)(a10 + 16);
  if (!WebCore::NetworkStorageSession::shouldBlockCookies())
  {
    long long v116 = *(_OWORD *)a10;
    uint64_t v117 = *(void *)(a10 + 16);
    return (WTF::StringImpl *)WebKit::logCookieInformationInternal(a1, a2, a3, a4, a5, a6, a7, a8, a9, &v116, a11, a12, a13, a14);
  }
  uint64_t v114 = a1;
  uint64_t v18 = *(WTF::String **)a10;
  int v19 = *(unsigned __int8 *)(a10 + 16);
  WebKit::escapeForJSON(&v130, *a8);
  WebKit::escapeForJSON(&v129, *(const WTF::String **)a6);
  if (v19) {
    WTF::String::number(v18);
  }
  else {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  uint64_t v22 = a4;
  uint64_t v21 = a1;
  if ((_BYTE)a12) {
    WTF::String::number(a11);
  }
  else {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  if ((_BYTE)a14) {
    WTF::String::number(a13);
  }
  else {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  WebKit::escapeForJSON(&v125, *a9);
  uint64_t v24 = *(void *)(a1 + 88);
  if ((v24 & 0x8000000000000000) == 0 || v24 == -1 || *(unsigned char *)(a1 + 332))
  {
    uint64_t v25 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::utf8();
      if (v124) {
        CFTypeRef v26 = (char *)v124 + 16;
      }
      else {
        CFTypeRef v26 = 0;
      }
      WTF::String::utf8();
      if (v123) {
        uint64_t v27 = (char *)v123 + 16;
      }
      else {
        uint64_t v27 = 0;
      }
      WTF::String::utf8();
      if (v122) {
        __int16 v28 = (char *)v122 + 16;
      }
      else {
        __int16 v28 = 0;
      }
      WTF::String::utf8();
      if (v121) {
        uint64_t v29 = (char *)v121 + 16;
      }
      else {
        uint64_t v29 = 0;
      }
      WTF::String::utf8();
      if (v120) {
        __int16 v30 = (char *)v120 + 16;
      }
      else {
        __int16 v30 = 0;
      }
      *(_DWORD *)buf = 134219522;
      uint64_t v132 = a4;
      __int16 v133 = 2080;
      uint64_t v134 = a2;
      __int16 v135 = 2080;
      long long v136 = v26;
      __int16 v137 = 2080;
      char v138 = v27;
      __int16 v139 = 2080;
      uint64_t v140 = v28;
      __int16 v141 = 2080;
      v142 = v29;
      __int16 v143 = 2082;
      long long v144 = v30;
      _os_log_impl(&dword_1985F2000, v25, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: BLOCKED cookie access for webPageID=%s, frameID=%s, resourceID=%s, firstParty=%s: { \"url\": \"%{public}s\",", buf, 0x48u);
      uint64_t v31 = v120;
      CFTypeRef v120 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 1) {
          WTF::fastFree(v31, v23);
        }
        else {
          --*(_DWORD *)v31;
        }
      }
      __int16 v32 = v121;
      uint64_t v121 = 0;
      uint64_t v21 = v114;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1) {
          WTF::fastFree(v32, v23);
        }
        else {
          --*(_DWORD *)v32;
        }
      }
      uint64_t v33 = v122;
      long long v122 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 1) {
          WTF::fastFree(v33, v23);
        }
        else {
          --*(_DWORD *)v33;
        }
      }
      __int16 v34 = v123;
      long long v123 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 1) {
          WTF::fastFree(v34, v23);
        }
        else {
          --*(_DWORD *)v34;
        }
      }
      uint64_t v35 = v124;
      uint64_t v124 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 1) {
          WTF::fastFree(v35, v23);
        }
        else {
          --*(_DWORD *)v35;
        }
      }
      uint64_t v24 = *(void *)(v114 + 88);
    }
    if ((v24 & 0x8000000000000000) == 0)
    {
LABEL_51:
      __int16 v36 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        WTF::String::utf8();
        if (v124) {
          BOOL v37 = (char *)v124 + 16;
        }
        else {
          BOOL v37 = 0;
        }
        WTF::String::utf8();
        if (v123) {
          __int16 v38 = (char *)v123 + 16;
        }
        else {
          __int16 v38 = 0;
        }
        WTF::String::utf8();
        if (v122) {
          int v39 = (char *)v122 + 16;
        }
        else {
          int v39 = 0;
        }
        WTF::String::utf8();
        if (v121) {
          __int16 v40 = (char *)v121 + 16;
        }
        else {
          __int16 v40 = 0;
        }
        *(_DWORD *)buf = 134219522;
        uint64_t v132 = v22;
        __int16 v133 = 2080;
        uint64_t v134 = a2;
        __int16 v135 = 2080;
        long long v136 = v37;
        __int16 v137 = 2080;
        char v138 = v38;
        __int16 v139 = 2080;
        uint64_t v140 = v39;
        __int16 v141 = 2080;
        v142 = v40;
        __int16 v143 = 2082;
        long long v144 = "BLOCKED";
        _os_log_impl(&dword_1985F2000, v36, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: BLOCKED cookie access for webPageID=%s, frameID=%s, resourceID=%s, firstParty=%s:   \"partition\": \"%{public}s\",", buf, 0x48u);
        BOOL v41 = v121;
        uint64_t v121 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 1) {
            WTF::fastFree(v41, v23);
          }
          else {
            --*(_DWORD *)v41;
          }
        }
        uint64_t v42 = v122;
        long long v122 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 1) {
            WTF::fastFree(v42, v23);
          }
          else {
            --*(_DWORD *)v42;
          }
        }
        BOOL v43 = v123;
        long long v123 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1) {
            WTF::fastFree(v43, v23);
          }
          else {
            --*(_DWORD *)v43;
          }
        }
        __int16 v44 = v124;
        uint64_t v124 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 1) {
            WTF::fastFree(v44, v23);
          }
          else {
            --*(_DWORD *)v44;
          }
        }
        uint64_t v24 = *(void *)(v21 + 88);
      }
      if ((v24 & 0x8000000000000000) == 0) {
        goto LABEL_82;
      }
      goto LABEL_304;
    }
  }
  if (v24 == -1)
  {
    uint64_t v22 = a4;
    uint64_t v21 = v114;
    goto LABEL_51;
  }
  uint64_t v22 = a4;
  uint64_t v21 = v114;
  if (*(unsigned char *)(v114 + 332)) {
    goto LABEL_51;
  }
LABEL_304:
  if (v24 == -1)
  {
    uint64_t v22 = a4;
    uint64_t v21 = v114;
  }
  else
  {
    uint64_t v22 = a4;
    uint64_t v21 = v114;
    if (!*(unsigned char *)(v114 + 332)) {
      goto LABEL_306;
    }
  }
LABEL_82:
  BOOL v45 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    WTF::String::utf8();
    if (v124) {
      uint64_t v46 = (char *)v124 + 16;
    }
    else {
      uint64_t v46 = 0;
    }
    WTF::String::utf8();
    if (v123) {
      uint64_t v47 = (char *)v123 + 16;
    }
    else {
      uint64_t v47 = 0;
    }
    WTF::String::utf8();
    if (v122) {
      BOOL v48 = (char *)v122 + 16;
    }
    else {
      BOOL v48 = 0;
    }
    WTF::String::utf8();
    if (v121) {
      int v49 = (char *)v121 + 16;
    }
    else {
      int v49 = 0;
    }
    *(_DWORD *)buf = 134219522;
    uint64_t v132 = v22;
    __int16 v133 = 2080;
    uint64_t v134 = a2;
    __int16 v135 = 2080;
    long long v136 = v46;
    __int16 v137 = 2080;
    char v138 = v47;
    __int16 v139 = 2080;
    uint64_t v140 = v48;
    __int16 v141 = 2080;
    v142 = v49;
    __int16 v143 = 2082;
    long long v144 = "false";
    _os_log_impl(&dword_1985F2000, v45, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: BLOCKED cookie access for webPageID=%s, frameID=%s, resourceID=%s, firstParty=%s:   \"hasStorageAccess\": %{public}s,", buf, 0x48u);
    BOOL v50 = v121;
    uint64_t v121 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1) {
        WTF::fastFree(v50, v23);
      }
      else {
        --*(_DWORD *)v50;
      }
    }
    uint64_t v51 = v122;
    long long v122 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 1) {
        WTF::fastFree(v51, v23);
      }
      else {
        --*(_DWORD *)v51;
      }
    }
    uint64_t v52 = v123;
    long long v123 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 1) {
        WTF::fastFree(v52, v23);
      }
      else {
        --*(_DWORD *)v52;
      }
    }
    uint64_t v53 = v124;
    uint64_t v124 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 1) {
        WTF::fastFree(v53, v23);
      }
      else {
        --*(_DWORD *)v53;
      }
    }
    uint64_t v24 = *(void *)(v21 + 88);
  }
  if ((v24 & 0x8000000000000000) == 0)
  {
LABEL_113:
    uint64_t v54 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::utf8();
      if (v124) {
        CFTypeRef v55 = (char *)v124 + 16;
      }
      else {
        CFTypeRef v55 = 0;
      }
      WTF::String::utf8();
      if (v123) {
        CFTypeRef v56 = (char *)v123 + 16;
      }
      else {
        CFTypeRef v56 = 0;
      }
      WTF::String::utf8();
      if (v122) {
        int v57 = (char *)v122 + 16;
      }
      else {
        int v57 = 0;
      }
      WTF::String::utf8();
      if (v121) {
        uint64_t v58 = (char *)v121 + 16;
      }
      else {
        uint64_t v58 = 0;
      }
      WTF::String::utf8();
      if (v120) {
        uint64_t v59 = (char *)v120 + 16;
      }
      else {
        uint64_t v59 = 0;
      }
      *(_DWORD *)buf = 134219522;
      uint64_t v132 = v22;
      __int16 v133 = 2080;
      uint64_t v134 = a2;
      __int16 v135 = 2080;
      long long v136 = v55;
      __int16 v137 = 2080;
      char v138 = v56;
      __int16 v139 = 2080;
      uint64_t v140 = v57;
      __int16 v141 = 2080;
      v142 = v58;
      __int16 v143 = 2082;
      long long v144 = v59;
      _os_log_impl(&dword_1985F2000, v54, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: BLOCKED cookie access for webPageID=%s, frameID=%s, resourceID=%s, firstParty=%s:   \"referer\": \"%{public}s\",", buf, 0x48u);
      uint64_t v60 = v120;
      CFTypeRef v120 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 1) {
          WTF::fastFree(v60, v23);
        }
        else {
          --*(_DWORD *)v60;
        }
      }
      uint64_t v61 = v121;
      uint64_t v121 = 0;
      uint64_t v21 = v114;
      if (v61)
      {
        if (*(_DWORD *)v61 == 1) {
          WTF::fastFree(v61, v23);
        }
        else {
          --*(_DWORD *)v61;
        }
      }
      BOOL v62 = v122;
      long long v122 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 1) {
          WTF::fastFree(v62, v23);
        }
        else {
          --*(_DWORD *)v62;
        }
      }
      int v63 = v123;
      long long v123 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 1) {
          WTF::fastFree(v63, v23);
        }
        else {
          --*(_DWORD *)v63;
        }
      }
      BOOL v64 = v124;
      uint64_t v124 = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 1) {
          WTF::fastFree(v64, v23);
        }
        else {
          --*(_DWORD *)v64;
        }
      }
      uint64_t v24 = *(void *)(v114 + 88);
    }
    if ((v24 & 0x8000000000000000) == 0) {
      goto LABEL_151;
    }
    goto LABEL_308;
  }
LABEL_306:
  if (v24 == -1)
  {
    uint64_t v22 = a4;
    uint64_t v21 = v114;
    goto LABEL_113;
  }
  uint64_t v22 = a4;
  uint64_t v21 = v114;
  if (*(unsigned char *)(v114 + 332)) {
    goto LABEL_113;
  }
LABEL_308:
  if (v24 == -1)
  {
    uint64_t v22 = a4;
    uint64_t v21 = v114;
  }
  else
  {
    uint64_t v22 = a4;
    uint64_t v21 = v114;
    if (!*(unsigned char *)(v114 + 332)) {
      goto LABEL_310;
    }
  }
LABEL_151:
  uint64_t v65 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    WTF::String::utf8();
    if (v124) {
      uint64_t v66 = (char *)v124 + 16;
    }
    else {
      uint64_t v66 = 0;
    }
    WTF::String::utf8();
    if (v123) {
      long long v67 = (char *)v123 + 16;
    }
    else {
      long long v67 = 0;
    }
    WTF::String::utf8();
    if (v122) {
      uint64_t v68 = (char *)v122 + 16;
    }
    else {
      uint64_t v68 = 0;
    }
    WTF::String::utf8();
    uint64_t v69 = (char *)v121 + 16;
    int v70 = *a7;
    uint64_t v71 = "false";
    *(_DWORD *)buf = 134219522;
    if (!v121) {
      uint64_t v69 = 0;
    }
    uint64_t v132 = v22;
    if (v70) {
      uint64_t v71 = "true";
    }
    __int16 v133 = 2080;
    uint64_t v134 = a2;
    __int16 v135 = 2080;
    long long v136 = v66;
    __int16 v137 = 2080;
    char v138 = v67;
    __int16 v139 = 2080;
    uint64_t v140 = v68;
    __int16 v141 = 2080;
    v142 = v69;
    __int16 v143 = 2082;
    long long v144 = v71;
    _os_log_impl(&dword_1985F2000, v65, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: BLOCKED cookie access for webPageID=%s, frameID=%s, resourceID=%s, firstParty=%s:   \"isSameSite\": \"%{public}s\",", buf, 0x48u);
    BOOL v72 = v121;
    uint64_t v121 = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 1) {
        WTF::fastFree(v72, v23);
      }
      else {
        --*(_DWORD *)v72;
      }
    }
    int v73 = v122;
    long long v122 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 1) {
        WTF::fastFree(v73, v23);
      }
      else {
        --*(_DWORD *)v73;
      }
    }
    BOOL v74 = v123;
    long long v123 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 1) {
        WTF::fastFree(v74, v23);
      }
      else {
        --*(_DWORD *)v74;
      }
    }
    uint64_t v75 = v124;
    uint64_t v124 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 1) {
        WTF::fastFree(v75, v23);
      }
      else {
        --*(_DWORD *)v75;
      }
    }
    uint64_t v24 = *(void *)(v21 + 88);
  }
  if ((v24 & 0x8000000000000000) == 0)
  {
LABEL_183:
    uint64_t v76 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::utf8();
      if (v124) {
        uint64_t v77 = (char *)v124 + 16;
      }
      else {
        uint64_t v77 = 0;
      }
      WTF::String::utf8();
      if (v123) {
        uint64_t v78 = (char *)v123 + 16;
      }
      else {
        uint64_t v78 = 0;
      }
      WTF::String::utf8();
      if (v122) {
        long long v79 = (char *)v122 + 16;
      }
      else {
        long long v79 = 0;
      }
      WTF::String::utf8();
      long long v80 = (char *)v121 + 16;
      int v81 = a7[1];
      double v82 = "false";
      *(_DWORD *)buf = 134219522;
      if (!v121) {
        long long v80 = 0;
      }
      uint64_t v132 = v22;
      if (v81) {
        double v82 = "true";
      }
      __int16 v133 = 2080;
      uint64_t v134 = a2;
      __int16 v135 = 2080;
      long long v136 = v77;
      __int16 v137 = 2080;
      char v138 = v78;
      __int16 v139 = 2080;
      uint64_t v140 = v79;
      __int16 v141 = 2080;
      v142 = v80;
      __int16 v143 = 2082;
      long long v144 = v82;
      _os_log_impl(&dword_1985F2000, v76, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: BLOCKED cookie access for webPageID=%s, frameID=%s, resourceID=%s, firstParty=%s:   \"isTopSite\": \"%{public}s\",", buf, 0x48u);
      uint64_t v83 = v121;
      uint64_t v121 = 0;
      if (v83)
      {
        if (*(_DWORD *)v83 == 1) {
          WTF::fastFree(v83, v23);
        }
        else {
          --*(_DWORD *)v83;
        }
      }
      uint64_t v84 = v122;
      long long v122 = 0;
      if (v84)
      {
        if (*(_DWORD *)v84 == 1) {
          WTF::fastFree(v84, v23);
        }
        else {
          --*(_DWORD *)v84;
        }
      }
      uint64_t v85 = v123;
      long long v123 = 0;
      if (v85)
      {
        if (*(_DWORD *)v85 == 1) {
          WTF::fastFree(v85, v23);
        }
        else {
          --*(_DWORD *)v85;
        }
      }
      uint64_t v86 = v124;
      uint64_t v124 = 0;
      if (v86)
      {
        if (*(_DWORD *)v86 == 1) {
          WTF::fastFree(v86, v23);
        }
        else {
          --*(_DWORD *)v86;
        }
      }
      uint64_t v24 = *(void *)(v21 + 88);
    }
    if ((v24 & 0x8000000000000000) == 0) {
      goto LABEL_215;
    }
    goto LABEL_312;
  }
LABEL_310:
  if (v24 == -1)
  {
    uint64_t v22 = a4;
    uint64_t v21 = v114;
    goto LABEL_183;
  }
  uint64_t v22 = a4;
  uint64_t v21 = v114;
  if (*(unsigned char *)(v114 + 332)) {
    goto LABEL_183;
  }
LABEL_312:
  if (v24 == -1)
  {
    uint64_t v22 = a4;
  }
  else
  {
    uint64_t v22 = a4;
    uint64_t v96 = v114;
    if (!*(unsigned char *)(v114 + 332)) {
      goto LABEL_314;
    }
  }
LABEL_215:
  uint64_t v87 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    WTF::String::utf8();
    if (v124) {
      BOOL v88 = (char *)v124 + 16;
    }
    else {
      BOOL v88 = 0;
    }
    WTF::String::utf8();
    if (v123) {
      int v89 = (char *)v123 + 16;
    }
    else {
      int v89 = 0;
    }
    WTF::String::utf8();
    if (v122) {
      BOOL v90 = (char *)v122 + 16;
    }
    else {
      BOOL v90 = 0;
    }
    WTF::String::utf8();
    if (v121) {
      uint64_t v91 = (char *)v121 + 16;
    }
    else {
      uint64_t v91 = 0;
    }
    *(_DWORD *)buf = 134219266;
    uint64_t v132 = v22;
    __int16 v133 = 2080;
    uint64_t v134 = a2;
    __int16 v135 = 2080;
    long long v136 = v88;
    __int16 v137 = 2080;
    char v138 = v89;
    __int16 v139 = 2080;
    uint64_t v140 = v90;
    __int16 v141 = 2080;
    v142 = v91;
    _os_log_impl(&dword_1985F2000, v87, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: BLOCKED cookie access for webPageID=%s, frameID=%s, resourceID=%s, firstParty=%s:   \"cookies\": []", buf, 0x3Eu);
    uint64_t v92 = v121;
    uint64_t v121 = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 1) {
        WTF::fastFree(v92, v23);
      }
      else {
        --*(_DWORD *)v92;
      }
    }
    uint64_t v93 = v122;
    long long v122 = 0;
    if (v93)
    {
      if (*(_DWORD *)v93 == 1) {
        WTF::fastFree(v93, v23);
      }
      else {
        --*(_DWORD *)v93;
      }
    }
    uint64_t v94 = v123;
    long long v123 = 0;
    if (v94)
    {
      if (*(_DWORD *)v94 == 1) {
        WTF::fastFree(v94, v23);
      }
      else {
        --*(_DWORD *)v94;
      }
    }
    uint64_t v95 = v124;
    uint64_t v124 = 0;
    if (v95)
    {
      if (*(_DWORD *)v95 == 1) {
        WTF::fastFree(v95, v23);
      }
      else {
        --*(_DWORD *)v95;
      }
    }
    uint64_t v24 = *(void *)(v114 + 88);
  }
  uint64_t v96 = v114;
  if ((v24 & 0x8000000000000000) == 0) {
    goto LABEL_246;
  }
LABEL_314:
  if (v24 == -1 || *(unsigned char *)(v96 + 332))
  {
LABEL_246:
    int v97 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::utf8();
      if (v124) {
        BOOL v98 = (char *)v124 + 16;
      }
      else {
        BOOL v98 = 0;
      }
      WTF::String::utf8();
      if (v123) {
        uint64_t v99 = (char *)v123 + 16;
      }
      else {
        uint64_t v99 = 0;
      }
      WTF::String::utf8();
      if (v122) {
        char v100 = (char *)v122 + 16;
      }
      else {
        char v100 = 0;
      }
      WTF::String::utf8();
      if (v121) {
        __int16 v101 = (char *)v121 + 16;
      }
      else {
        __int16 v101 = 0;
      }
      *(_DWORD *)buf = 134219266;
      uint64_t v132 = v22;
      __int16 v133 = 2080;
      uint64_t v134 = a2;
      __int16 v135 = 2080;
      long long v136 = v98;
      __int16 v137 = 2080;
      char v138 = v99;
      __int16 v139 = 2080;
      uint64_t v140 = v100;
      __int16 v141 = 2080;
      v142 = v101;
      _os_log_impl(&dword_1985F2000, v97, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: BLOCKED cookie access for webPageID=%s, frameID=%s, resourceID=%s, firstParty=%s:   }", buf, 0x3Eu);
      char v102 = v121;
      uint64_t v121 = 0;
      if (v102)
      {
        if (*(_DWORD *)v102 == 1) {
          WTF::fastFree(v102, v23);
        }
        else {
          --*(_DWORD *)v102;
        }
      }
      uint64_t v103 = v122;
      long long v122 = 0;
      if (v103)
      {
        if (*(_DWORD *)v103 == 1) {
          WTF::fastFree(v103, v23);
        }
        else {
          --*(_DWORD *)v103;
        }
      }
      uint64_t v104 = v123;
      long long v123 = 0;
      if (v104)
      {
        if (*(_DWORD *)v104 == 1) {
          WTF::fastFree(v104, v23);
        }
        else {
          --*(_DWORD *)v104;
        }
      }
      uint64_t v105 = v124;
      uint64_t v124 = 0;
      if (v105)
      {
        if (*(_DWORD *)v105 == 1) {
          WTF::fastFree(v105, v23);
        }
        else {
          --*(_DWORD *)v105;
        }
      }
    }
  }
  uint64_t v106 = v125;
  uint64_t v125 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2) {
      WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v23);
    }
    else {
      *(_DWORD *)v106 -= 2;
    }
  }
  uint64_t v107 = v126;
  char v126 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2) {
      WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v23);
    }
    else {
      *(_DWORD *)v107 -= 2;
    }
  }
  uint64_t v108 = v127;
  uint64_t v127 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2) {
      WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v23);
    }
    else {
      *(_DWORD *)v108 -= 2;
    }
  }
  char v109 = v128;
  uint64_t v128 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2) {
      WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v23);
    }
    else {
      *(_DWORD *)v109 -= 2;
    }
  }
  uint64_t v110 = v129;
  v129 = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 2) {
      WTF::StringImpl::destroy(v110, (WTF::StringImpl *)v23);
    }
    else {
      *(_DWORD *)v110 -= 2;
    }
  }
  uint64_t result = v130;
  uint64_t v130 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v23);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::logCookieInformationInternal(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, const WTF::URL *a6, unsigned char *a7, const WTF::String **a8, const WTF::String **a9, long long *a10, WTF::String *a11, uint64_t a12, WTF::String *a13, uint64_t a14)
{
  uint64_t v245 = *MEMORY[0x1E4F143B8];
  uint64_t v232 = 0;
  uint64_t v233 = 0;
  long long v230 = *a10;
  uint64_t v231 = *((void *)a10 + 2);
  if (!WebCore::NetworkStorageSession::getRawCookies()) {
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v232, v18);
  }
  WebKit::escapeForJSON(&v229, *a8);
  WebKit::escapeForJSON(&v228, (const WTF::String *)*MEMORY[0x1E4F30980]);
  WebKit::escapeForJSON(&v227, *a9);
  if (*((unsigned char *)a10 + 16)) {
    WTF::String::number(*(WTF::String **)a10);
  }
  else {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  if ((_BYTE)a12) {
    WTF::String::number(a11);
  }
  else {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  if ((_BYTE)a14) {
    WTF::String::number(a13);
  }
  else {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  int hasStorageAccess = 0;
  if (!*((unsigned char *)a10 + 16) || !(_BYTE)a12)
  {
LABEL_22:
    uint64_t v21 = *(void *)(a1 + 88);
    if ((v21 & 0x8000000000000000) == 0 || v21 == -1 || *(unsigned char *)(a1 + 332))
    {
      uint64_t v22 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        WTF::String::utf8();
        if (v223) {
          uint64_t v23 = (char *)v223 + 16;
        }
        else {
          uint64_t v23 = 0;
        }
        WTF::String::utf8();
        if (v220) {
          uint64_t v24 = (char *)v220 + 16;
        }
        else {
          uint64_t v24 = 0;
        }
        WTF::String::utf8();
        if (v219) {
          uint64_t v25 = (char *)v219 + 16;
        }
        else {
          uint64_t v25 = 0;
        }
        WTF::String::utf8();
        if (v218) {
          CFTypeRef v26 = (char *)v218 + 16;
        }
        else {
          CFTypeRef v26 = 0;
        }
        *(_DWORD *)buf = 134219266;
        *(void *)&uint8_t buf[4] = a4;
        __int16 v235 = 2080;
        uint64_t v236 = a2;
        __int16 v237 = 2080;
        v238 = v23;
        __int16 v239 = 2080;
        v240 = v24;
        __int16 v241 = 2080;
        v242 = v25;
        __int16 v243 = 2082;
        v244 = v26;
        _os_log_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s: { \"url\": \"%{public}s\",", buf, 0x3Eu);
        uint64_t v27 = v218;
        v218 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 1) {
            WTF::fastFree(v27, v18);
          }
          else {
            --*(_DWORD *)v27;
          }
        }
        __int16 v28 = v219;
        long long v219 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 1) {
            WTF::fastFree(v28, v18);
          }
          else {
            --*(_DWORD *)v28;
          }
        }
        uint64_t v29 = v220;
        long long v220 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 1) {
            WTF::fastFree(v29, v18);
          }
          else {
            --*(_DWORD *)v29;
          }
        }
        __int16 v30 = v223;
        uint64_t v223 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 1) {
            WTF::fastFree(v30, v18);
          }
          else {
            --*(_DWORD *)v30;
          }
        }
        uint64_t v21 = *(void *)(a1 + 88);
      }
      if ((v21 & 0x8000000000000000) == 0) {
        goto LABEL_84;
      }
    }
    if (v21 == -1 || *(unsigned char *)(a1 + 332))
    {
LABEL_84:
      uint64_t v31 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        WTF::String::utf8();
        if (v223) {
          __int16 v32 = (char *)v223 + 16;
        }
        else {
          __int16 v32 = 0;
        }
        WTF::String::utf8();
        if (v220) {
          uint64_t v33 = (char *)v220 + 16;
        }
        else {
          uint64_t v33 = 0;
        }
        WTF::String::utf8();
        if (v219) {
          __int16 v34 = (char *)v219 + 16;
        }
        else {
          __int16 v34 = 0;
        }
        WTF::String::utf8();
        if (v218) {
          uint64_t v35 = (char *)v218 + 16;
        }
        else {
          uint64_t v35 = 0;
        }
        *(_DWORD *)buf = 134219266;
        *(void *)&uint8_t buf[4] = a4;
        __int16 v235 = 2080;
        uint64_t v236 = a2;
        __int16 v237 = 2080;
        v238 = v32;
        __int16 v239 = 2080;
        v240 = v33;
        __int16 v241 = 2080;
        v242 = v34;
        __int16 v243 = 2082;
        v244 = v35;
        _os_log_impl(&dword_1985F2000, v31, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:   \"partition\": \"%{public}s\",", buf, 0x3Eu);
        __int16 v36 = v218;
        v218 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 1) {
            WTF::fastFree(v36, v18);
          }
          else {
            --*(_DWORD *)v36;
          }
        }
        BOOL v37 = v219;
        long long v219 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 1) {
            WTF::fastFree(v37, v18);
          }
          else {
            --*(_DWORD *)v37;
          }
        }
        __int16 v38 = v220;
        long long v220 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 1) {
            WTF::fastFree(v38, v18);
          }
          else {
            --*(_DWORD *)v38;
          }
        }
        int v39 = v223;
        uint64_t v223 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1) {
            WTF::fastFree(v39, v18);
          }
          else {
            --*(_DWORD *)v39;
          }
        }
        uint64_t v21 = *(void *)(a1 + 88);
      }
      if ((v21 & 0x8000000000000000) == 0) {
        goto LABEL_110;
      }
    }
    if (v21 == -1 || *(unsigned char *)(a1 + 332))
    {
LABEL_110:
      __int16 v40 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        WTF::String::utf8();
        if (v223) {
          BOOL v41 = (char *)v223 + 16;
        }
        else {
          BOOL v41 = 0;
        }
        WTF::String::utf8();
        if (v220) {
          uint64_t v42 = (char *)v220 + 16;
        }
        else {
          uint64_t v42 = 0;
        }
        WTF::String::utf8();
        if (v219) {
          BOOL v43 = (char *)v219 + 16;
        }
        else {
          BOOL v43 = 0;
        }
        __int16 v44 = "true";
        if (!hasStorageAccess) {
          __int16 v44 = "false";
        }
        *(_DWORD *)buf = 134219266;
        *(void *)&uint8_t buf[4] = a4;
        __int16 v235 = 2080;
        uint64_t v236 = a2;
        __int16 v237 = 2080;
        v238 = v41;
        __int16 v239 = 2080;
        v240 = v42;
        __int16 v241 = 2080;
        v242 = v43;
        __int16 v243 = 2082;
        v244 = v44;
        _os_log_impl(&dword_1985F2000, v40, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:   \"hasStorageAccess\": %{public}s,", buf, 0x3Eu);
        BOOL v45 = v219;
        long long v219 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 1) {
            WTF::fastFree(v45, v18);
          }
          else {
            --*(_DWORD *)v45;
          }
        }
        uint64_t v46 = v220;
        long long v220 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 1) {
            WTF::fastFree(v46, v18);
          }
          else {
            --*(_DWORD *)v46;
          }
        }
        uint64_t v47 = v223;
        uint64_t v223 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 1) {
            WTF::fastFree(v47, v18);
          }
          else {
            --*(_DWORD *)v47;
          }
        }
        uint64_t v21 = *(void *)(a1 + 88);
      }
      if ((v21 & 0x8000000000000000) == 0) {
        goto LABEL_141;
      }
    }
    if (v21 == -1 || *(unsigned char *)(a1 + 332))
    {
LABEL_141:
      BOOL v48 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        WTF::String::utf8();
        if (v223) {
          int v49 = (char *)v223 + 16;
        }
        else {
          int v49 = 0;
        }
        WTF::String::utf8();
        if (v220) {
          BOOL v50 = (char *)v220 + 16;
        }
        else {
          BOOL v50 = 0;
        }
        WTF::String::utf8();
        if (v219) {
          uint64_t v51 = (char *)v219 + 16;
        }
        else {
          uint64_t v51 = 0;
        }
        WTF::String::utf8();
        if (v218) {
          uint64_t v52 = (char *)v218 + 16;
        }
        else {
          uint64_t v52 = 0;
        }
        *(_DWORD *)buf = 134219266;
        *(void *)&uint8_t buf[4] = a4;
        __int16 v235 = 2080;
        uint64_t v236 = a2;
        __int16 v237 = 2080;
        v238 = v49;
        __int16 v239 = 2080;
        v240 = v50;
        __int16 v241 = 2080;
        v242 = v51;
        __int16 v243 = 2082;
        v244 = v52;
        _os_log_impl(&dword_1985F2000, v48, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:   \"referer\": \"%{public}s\",", buf, 0x3Eu);
        uint64_t v53 = v218;
        v218 = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 1) {
            WTF::fastFree(v53, v18);
          }
          else {
            --*(_DWORD *)v53;
          }
        }
        uint64_t v54 = v219;
        long long v219 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 1) {
            WTF::fastFree(v54, v18);
          }
          else {
            --*(_DWORD *)v54;
          }
        }
        CFTypeRef v55 = v220;
        long long v220 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 1) {
            WTF::fastFree(v55, v18);
          }
          else {
            --*(_DWORD *)v55;
          }
        }
        CFTypeRef v56 = v223;
        uint64_t v223 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 1) {
            WTF::fastFree(v56, v18);
          }
          else {
            --*(_DWORD *)v56;
          }
        }
        uint64_t v21 = *(void *)(a1 + 88);
      }
      if ((v21 & 0x8000000000000000) == 0) {
        goto LABEL_167;
      }
    }
    if (v21 == -1 || *(unsigned char *)(a1 + 332))
    {
LABEL_167:
      int v57 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        WTF::String::utf8();
        if (v223) {
          uint64_t v58 = (char *)v223 + 16;
        }
        else {
          uint64_t v58 = 0;
        }
        WTF::String::utf8();
        if (v220) {
          uint64_t v59 = (char *)v220 + 16;
        }
        else {
          uint64_t v59 = 0;
        }
        WTF::String::utf8();
        if (v219) {
          uint64_t v60 = (char *)v219 + 16;
        }
        else {
          uint64_t v60 = 0;
        }
        uint64_t v61 = "true";
        if (!*a7) {
          uint64_t v61 = "false";
        }
        *(_DWORD *)buf = 134219266;
        *(void *)&uint8_t buf[4] = a4;
        __int16 v235 = 2080;
        uint64_t v236 = a2;
        __int16 v237 = 2080;
        v238 = v58;
        __int16 v239 = 2080;
        v240 = v59;
        __int16 v241 = 2080;
        v242 = v60;
        __int16 v243 = 2082;
        v244 = v61;
        _os_log_impl(&dword_1985F2000, v57, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:   \"isSameSite\": \"%{public}s\",", buf, 0x3Eu);
        BOOL v62 = v219;
        long long v219 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 1) {
            WTF::fastFree(v62, v18);
          }
          else {
            --*(_DWORD *)v62;
          }
        }
        int v63 = v220;
        long long v220 = 0;
        if (v63)
        {
          if (*(_DWORD *)v63 == 1) {
            WTF::fastFree(v63, v18);
          }
          else {
            --*(_DWORD *)v63;
          }
        }
        BOOL v64 = v223;
        uint64_t v223 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 1) {
            WTF::fastFree(v64, v18);
          }
          else {
            --*(_DWORD *)v64;
          }
        }
        uint64_t v21 = *(void *)(a1 + 88);
      }
      if ((v21 & 0x8000000000000000) == 0) {
        goto LABEL_193;
      }
    }
    if (v21 == -1 || *(unsigned char *)(a1 + 332))
    {
LABEL_193:
      uint64_t v65 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        WTF::String::utf8();
        if (v223) {
          uint64_t v66 = (char *)v223 + 16;
        }
        else {
          uint64_t v66 = 0;
        }
        WTF::String::utf8();
        if (v220) {
          long long v67 = (char *)v220 + 16;
        }
        else {
          long long v67 = 0;
        }
        WTF::String::utf8();
        if (v219) {
          uint64_t v68 = (char *)v219 + 16;
        }
        else {
          uint64_t v68 = 0;
        }
        uint64_t v69 = "true";
        if (!a7[1]) {
          uint64_t v69 = "false";
        }
        *(_DWORD *)buf = 134219266;
        *(void *)&uint8_t buf[4] = a4;
        __int16 v235 = 2080;
        uint64_t v236 = a2;
        __int16 v237 = 2080;
        v238 = v66;
        __int16 v239 = 2080;
        v240 = v67;
        __int16 v241 = 2080;
        v242 = v68;
        __int16 v243 = 2082;
        v244 = v69;
        _os_log_impl(&dword_1985F2000, v65, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:   \"isTopSite\": \"%{public}s\",", buf, 0x3Eu);
        int v70 = v219;
        long long v219 = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 1) {
            WTF::fastFree(v70, v18);
          }
          else {
            --*(_DWORD *)v70;
          }
        }
        uint64_t v71 = v220;
        long long v220 = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 1) {
            WTF::fastFree(v71, v18);
          }
          else {
            --*(_DWORD *)v71;
          }
        }
        BOOL v72 = v223;
        uint64_t v223 = 0;
        if (v72)
        {
          if (*(_DWORD *)v72 == 1) {
            WTF::fastFree(v72, v18);
          }
          else {
            --*(_DWORD *)v72;
          }
        }
        uint64_t v21 = *(void *)(a1 + 88);
      }
      if ((v21 & 0x8000000000000000) == 0) {
        goto LABEL_194;
      }
    }
    if (v21 == -1 || *(unsigned char *)(a1 + 332))
    {
LABEL_194:
      int v73 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        WTF::String::utf8();
        if (v223) {
          BOOL v74 = (char *)v223 + 16;
        }
        else {
          BOOL v74 = 0;
        }
        WTF::String::utf8();
        if (v220) {
          uint64_t v75 = (char *)v220 + 16;
        }
        else {
          uint64_t v75 = 0;
        }
        WTF::String::utf8();
        if (v219) {
          uint64_t v76 = (char *)v219 + 16;
        }
        else {
          uint64_t v76 = 0;
        }
        *(_DWORD *)buf = 134219010;
        *(void *)&uint8_t buf[4] = a4;
        __int16 v235 = 2080;
        uint64_t v236 = a2;
        __int16 v237 = 2080;
        v238 = v74;
        __int16 v239 = 2080;
        v240 = v75;
        __int16 v241 = 2080;
        v242 = v76;
        _os_log_impl(&dword_1985F2000, v73, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:   \"cookies\": [", buf, 0x34u);
        uint64_t v77 = v219;
        long long v219 = 0;
        if (v77)
        {
          if (*(_DWORD *)v77 == 1) {
            WTF::fastFree(v77, v18);
          }
          else {
            --*(_DWORD *)v77;
          }
        }
        uint64_t v78 = v220;
        long long v220 = 0;
        if (v78)
        {
          if (*(_DWORD *)v78 == 1) {
            WTF::fastFree(v78, v18);
          }
          else {
            --*(_DWORD *)v78;
          }
        }
        long long v79 = v223;
        uint64_t v223 = 0;
        if (v79)
        {
          if (*(_DWORD *)v79 == 1) {
            WTF::fastFree(v79, v18);
          }
          else {
            --*(_DWORD *)v79;
          }
        }
      }
    }
    if (HIDWORD(v233))
    {
      uint64_t v208 = v232 + 136 * HIDWORD(v233);
      uint64_t v80 = v232 + 58;
      uint64_t v81 = HIDWORD(v233) - 1;
      do
      {
        uint64_t v82 = v80 - 58;
        WebKit::escapeForJSON(&v223, *(const WTF::String **)(v80 - 58));
        WebKit::escapeForJSON(&v220, *(const WTF::String **)(v80 - 50));
        WebKit::escapeForJSON(&v219, *(const WTF::String **)(v80 - 42));
        WebKit::escapeForJSON(&v218, *(const WTF::String **)(v80 - 34));
        WebKit::escapeForJSON(&v217, *(const WTF::String **)(v80 + 6));
        WebKit::escapeForJSON(&v216, *(const WTF::String **)(v80 + 14));
        uint64_t v83 = *(void *)(a1 + 88);
        if ((v83 & 0x8000000000000000) == 0 || v83 == -1 || *(unsigned char *)(a1 + 332))
        {
          uint64_t v84 = off_1EB358988;
          if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
          {
            WTF::String::utf8();
            if (v215) {
              uint64_t v85 = (char *)v215 + 16;
            }
            else {
              uint64_t v85 = 0;
            }
            WTF::String::utf8();
            if (v214) {
              uint64_t v86 = (char *)v214 + 16;
            }
            else {
              uint64_t v86 = 0;
            }
            WTF::String::utf8();
            if (v213) {
              uint64_t v87 = (char *)v213 + 16;
            }
            else {
              uint64_t v87 = 0;
            }
            WTF::String::utf8();
            if (v212) {
              BOOL v88 = (char *)v212 + 16;
            }
            else {
              BOOL v88 = 0;
            }
            *(_DWORD *)buf = 134219266;
            *(void *)&uint8_t buf[4] = a4;
            __int16 v235 = 2080;
            uint64_t v236 = a2;
            __int16 v237 = 2080;
            v238 = v85;
            __int16 v239 = 2080;
            v240 = v86;
            __int16 v241 = 2080;
            v242 = v87;
            __int16 v243 = 2082;
            v244 = v88;
            _os_log_impl(&dword_1985F2000, v84, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:   { \"name\": \"%{public}s\",", buf, 0x3Eu);
            int v89 = v212;
            __int16 v212 = 0;
            if (v89)
            {
              if (*(_DWORD *)v89 == 1) {
                WTF::fastFree(v89, v18);
              }
              else {
                --*(_DWORD *)v89;
              }
            }
            BOOL v90 = v213;
            uint64_t v213 = 0;
            if (v90)
            {
              if (*(_DWORD *)v90 == 1) {
                WTF::fastFree(v90, v18);
              }
              else {
                --*(_DWORD *)v90;
              }
            }
            uint64_t v91 = v214;
            __int16 v214 = 0;
            if (v91)
            {
              if (*(_DWORD *)v91 == 1) {
                WTF::fastFree(v91, v18);
              }
              else {
                --*(_DWORD *)v91;
              }
            }
            uint64_t v92 = v215;
            long long v215 = 0;
            if (v92)
            {
              if (*(_DWORD *)v92 == 1) {
                WTF::fastFree(v92, v18);
              }
              else {
                --*(_DWORD *)v92;
              }
            }
            uint64_t v83 = *(void *)(a1 + 88);
          }
          if ((v83 & 0x8000000000000000) == 0) {
            goto LABEL_280;
          }
        }
        if (v83 == -1 || *(unsigned char *)(a1 + 332))
        {
LABEL_280:
          uint64_t v93 = off_1EB358988;
          if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
          {
            WTF::String::utf8();
            if (v215) {
              uint64_t v94 = (char *)v215 + 16;
            }
            else {
              uint64_t v94 = 0;
            }
            WTF::String::utf8();
            if (v214) {
              uint64_t v95 = (char *)v214 + 16;
            }
            else {
              uint64_t v95 = 0;
            }
            WTF::String::utf8();
            if (v213) {
              uint64_t v96 = (char *)v213 + 16;
            }
            else {
              uint64_t v96 = 0;
            }
            WTF::String::utf8();
            if (v212) {
              int v97 = (char *)v212 + 16;
            }
            else {
              int v97 = 0;
            }
            *(_DWORD *)buf = 134219266;
            *(void *)&uint8_t buf[4] = a4;
            __int16 v235 = 2080;
            uint64_t v236 = a2;
            __int16 v237 = 2080;
            v238 = v94;
            __int16 v239 = 2080;
            v240 = v95;
            __int16 v241 = 2080;
            v242 = v96;
            __int16 v243 = 2082;
            v244 = v97;
            _os_log_impl(&dword_1985F2000, v93, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"value\": \"%{public}s\",", buf, 0x3Eu);
            BOOL v98 = v212;
            __int16 v212 = 0;
            if (v98)
            {
              if (*(_DWORD *)v98 == 1) {
                WTF::fastFree(v98, v18);
              }
              else {
                --*(_DWORD *)v98;
              }
            }
            uint64_t v99 = v213;
            uint64_t v213 = 0;
            if (v99)
            {
              if (*(_DWORD *)v99 == 1) {
                WTF::fastFree(v99, v18);
              }
              else {
                --*(_DWORD *)v99;
              }
            }
            char v100 = v214;
            __int16 v214 = 0;
            if (v100)
            {
              if (*(_DWORD *)v100 == 1) {
                WTF::fastFree(v100, v18);
              }
              else {
                --*(_DWORD *)v100;
              }
            }
            __int16 v101 = v215;
            long long v215 = 0;
            if (v101)
            {
              if (*(_DWORD *)v101 == 1) {
                WTF::fastFree(v101, v18);
              }
              else {
                --*(_DWORD *)v101;
              }
            }
            uint64_t v83 = *(void *)(a1 + 88);
          }
          if ((v83 & 0x8000000000000000) == 0) {
            goto LABEL_311;
          }
        }
        if (v83 == -1 || *(unsigned char *)(a1 + 332))
        {
LABEL_311:
          char v102 = off_1EB358988;
          if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
          {
            WTF::String::utf8();
            if (v215) {
              uint64_t v103 = (char *)v215 + 16;
            }
            else {
              uint64_t v103 = 0;
            }
            WTF::String::utf8();
            if (v214) {
              uint64_t v104 = (char *)v214 + 16;
            }
            else {
              uint64_t v104 = 0;
            }
            WTF::String::utf8();
            if (v213) {
              uint64_t v105 = (char *)v213 + 16;
            }
            else {
              uint64_t v105 = 0;
            }
            WTF::String::utf8();
            if (v212) {
              uint64_t v106 = (char *)v212 + 16;
            }
            else {
              uint64_t v106 = 0;
            }
            *(_DWORD *)buf = 134219266;
            *(void *)&uint8_t buf[4] = a4;
            __int16 v235 = 2080;
            uint64_t v236 = a2;
            __int16 v237 = 2080;
            v238 = v103;
            __int16 v239 = 2080;
            v240 = v104;
            __int16 v241 = 2080;
            v242 = v105;
            __int16 v243 = 2082;
            v244 = v106;
            _os_log_impl(&dword_1985F2000, v102, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"domain\": \"%{public}s\",", buf, 0x3Eu);
            uint64_t v107 = v212;
            __int16 v212 = 0;
            if (v107)
            {
              if (*(_DWORD *)v107 == 1) {
                WTF::fastFree(v107, v18);
              }
              else {
                --*(_DWORD *)v107;
              }
            }
            uint64_t v108 = v213;
            uint64_t v213 = 0;
            if (v108)
            {
              if (*(_DWORD *)v108 == 1) {
                WTF::fastFree(v108, v18);
              }
              else {
                --*(_DWORD *)v108;
              }
            }
            char v109 = v214;
            __int16 v214 = 0;
            if (v109)
            {
              if (*(_DWORD *)v109 == 1) {
                WTF::fastFree(v109, v18);
              }
              else {
                --*(_DWORD *)v109;
              }
            }
            uint64_t v110 = v215;
            long long v215 = 0;
            if (v110)
            {
              if (*(_DWORD *)v110 == 1) {
                WTF::fastFree(v110, v18);
              }
              else {
                --*(_DWORD *)v110;
              }
            }
            uint64_t v83 = *(void *)(a1 + 88);
          }
          if ((v83 & 0x8000000000000000) == 0) {
            goto LABEL_342;
          }
        }
        if (v83 == -1 || *(unsigned char *)(a1 + 332))
        {
LABEL_342:
          uint64_t v111 = off_1EB358988;
          if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
          {
            WTF::String::utf8();
            if (v215) {
              uint64_t v112 = (char *)v215 + 16;
            }
            else {
              uint64_t v112 = 0;
            }
            WTF::String::utf8();
            if (v214) {
              uint64_t v113 = (char *)v214 + 16;
            }
            else {
              uint64_t v113 = 0;
            }
            WTF::String::utf8();
            if (v213) {
              uint64_t v114 = (char *)v213 + 16;
            }
            else {
              uint64_t v114 = 0;
            }
            WTF::String::utf8();
            if (v212) {
              int v115 = (char *)v212 + 16;
            }
            else {
              int v115 = 0;
            }
            *(_DWORD *)buf = 134219266;
            *(void *)&uint8_t buf[4] = a4;
            __int16 v235 = 2080;
            uint64_t v236 = a2;
            __int16 v237 = 2080;
            v238 = v112;
            __int16 v239 = 2080;
            v240 = v113;
            __int16 v241 = 2080;
            v242 = v114;
            __int16 v243 = 2082;
            v244 = v115;
            _os_log_impl(&dword_1985F2000, v111, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"path\": \"%{public}s\",", buf, 0x3Eu);
            long long v116 = v212;
            __int16 v212 = 0;
            if (v116)
            {
              if (*(_DWORD *)v116 == 1) {
                WTF::fastFree(v116, v18);
              }
              else {
                --*(_DWORD *)v116;
              }
            }
            uint64_t v117 = v213;
            uint64_t v213 = 0;
            if (v117)
            {
              if (*(_DWORD *)v117 == 1) {
                WTF::fastFree(v117, v18);
              }
              else {
                --*(_DWORD *)v117;
              }
            }
            long long v118 = v214;
            __int16 v214 = 0;
            if (v118)
            {
              if (*(_DWORD *)v118 == 1) {
                WTF::fastFree(v118, v18);
              }
              else {
                --*(_DWORD *)v118;
              }
            }
            uint64_t v119 = v215;
            long long v215 = 0;
            if (v119)
            {
              if (*(_DWORD *)v119 == 1) {
                WTF::fastFree(v119, v18);
              }
              else {
                --*(_DWORD *)v119;
              }
            }
            uint64_t v83 = *(void *)(a1 + 88);
          }
          if ((v83 & 0x8000000000000000) == 0) {
            goto LABEL_366;
          }
        }
        if (v83 == -1 || *(unsigned char *)(a1 + 332))
        {
LABEL_366:
          CFTypeRef v120 = off_1EB358988;
          if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
          {
            WTF::String::utf8();
            if (v215) {
              uint64_t v121 = (char *)v215 + 16;
            }
            else {
              uint64_t v121 = 0;
            }
            WTF::String::utf8();
            if (v214) {
              long long v122 = (char *)v214 + 16;
            }
            else {
              long long v122 = 0;
            }
            WTF::String::utf8();
            if (v213) {
              long long v123 = (char *)v213 + 16;
            }
            else {
              long long v123 = 0;
            }
            uint64_t v124 = *(const char **)(v80 - 26);
            *(_DWORD *)buf = 134219266;
            *(void *)&uint8_t buf[4] = a4;
            __int16 v235 = 2080;
            uint64_t v236 = a2;
            __int16 v237 = 2080;
            v238 = v121;
            __int16 v239 = 2080;
            v240 = v122;
            __int16 v241 = 2080;
            v242 = v123;
            __int16 v243 = 2048;
            v244 = v124;
            _os_log_impl(&dword_1985F2000, v120, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"created\": %f,", buf, 0x3Eu);
            uint64_t v125 = v213;
            uint64_t v213 = 0;
            if (v125)
            {
              if (*(_DWORD *)v125 == 1) {
                WTF::fastFree(v125, v18);
              }
              else {
                --*(_DWORD *)v125;
              }
            }
            char v126 = v214;
            __int16 v214 = 0;
            if (v126)
            {
              if (*(_DWORD *)v126 == 1) {
                WTF::fastFree(v126, v18);
              }
              else {
                --*(_DWORD *)v126;
              }
            }
            uint64_t v127 = v215;
            long long v215 = 0;
            if (v127)
            {
              if (*(_DWORD *)v127 == 1) {
                WTF::fastFree(v127, v18);
              }
              else {
                --*(_DWORD *)v127;
              }
            }
            uint64_t v83 = *(void *)(a1 + 88);
          }
          if ((v83 & 0x8000000000000000) == 0) {
            goto LABEL_393;
          }
        }
        if (v83 == -1 || *(unsigned char *)(a1 + 332))
        {
LABEL_393:
          uint64_t v128 = off_1EB358988;
          if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
          {
            WTF::String::utf8();
            if (v215) {
              v129 = (char *)v215 + 16;
            }
            else {
              v129 = 0;
            }
            WTF::String::utf8();
            if (v214) {
              uint64_t v130 = (char *)v214 + 16;
            }
            else {
              uint64_t v130 = 0;
            }
            WTF::String::utf8();
            if (v213) {
              __int16 v131 = (char *)v213 + 16;
            }
            else {
              __int16 v131 = 0;
            }
            if (*(unsigned char *)(v80 - 10)) {
              uint64_t v132 = *(const char **)(v80 - 18);
            }
            else {
              uint64_t v132 = 0;
            }
            *(_DWORD *)buf = 134219266;
            *(void *)&uint8_t buf[4] = a4;
            __int16 v235 = 2080;
            uint64_t v236 = a2;
            __int16 v237 = 2080;
            v238 = v129;
            __int16 v239 = 2080;
            v240 = v130;
            __int16 v241 = 2080;
            v242 = v131;
            __int16 v243 = 2048;
            v244 = v132;
            _os_log_impl(&dword_1985F2000, v128, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"expires\": %f,", buf, 0x3Eu);
            __int16 v133 = v213;
            uint64_t v213 = 0;
            if (v133)
            {
              if (*(_DWORD *)v133 == 1) {
                WTF::fastFree(v133, v18);
              }
              else {
                --*(_DWORD *)v133;
              }
            }
            uint64_t v134 = v214;
            __int16 v214 = 0;
            if (v134)
            {
              if (*(_DWORD *)v134 == 1) {
                WTF::fastFree(v134, v18);
              }
              else {
                --*(_DWORD *)v134;
              }
            }
            __int16 v135 = v215;
            long long v215 = 0;
            if (v135)
            {
              if (*(_DWORD *)v135 == 1) {
                WTF::fastFree(v135, v18);
              }
              else {
                --*(_DWORD *)v135;
              }
            }
            uint64_t v83 = *(void *)(a1 + 88);
          }
          if ((v83 & 0x8000000000000000) == 0) {
            goto LABEL_419;
          }
        }
        if (v83 == -1 || *(unsigned char *)(a1 + 332))
        {
LABEL_419:
          long long v136 = off_1EB358988;
          if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
          {
            WTF::String::utf8();
            if (v215) {
              __int16 v137 = (char *)v215 + 16;
            }
            else {
              __int16 v137 = 0;
            }
            WTF::String::utf8();
            if (v214) {
              char v138 = (char *)v214 + 16;
            }
            else {
              char v138 = 0;
            }
            WTF::String::utf8();
            if (v213) {
              __int16 v139 = (char *)v213 + 16;
            }
            else {
              __int16 v139 = 0;
            }
            uint64_t v140 = "true";
            if (!*(unsigned char *)(v80 - 2)) {
              uint64_t v140 = "false";
            }
            *(_DWORD *)buf = 134219266;
            *(void *)&uint8_t buf[4] = a4;
            __int16 v235 = 2080;
            uint64_t v236 = a2;
            __int16 v237 = 2080;
            v238 = v137;
            __int16 v239 = 2080;
            v240 = v138;
            __int16 v241 = 2080;
            v242 = v139;
            __int16 v243 = 2082;
            v244 = v140;
            _os_log_impl(&dword_1985F2000, v136, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"httpOnly\": %{public}s,", buf, 0x3Eu);
            __int16 v141 = v213;
            uint64_t v213 = 0;
            if (v141)
            {
              if (*(_DWORD *)v141 == 1) {
                WTF::fastFree(v141, v18);
              }
              else {
                --*(_DWORD *)v141;
              }
            }
            v142 = v214;
            __int16 v214 = 0;
            if (v142)
            {
              if (*(_DWORD *)v142 == 1) {
                WTF::fastFree(v142, v18);
              }
              else {
                --*(_DWORD *)v142;
              }
            }
            __int16 v143 = v215;
            long long v215 = 0;
            if (v143)
            {
              if (*(_DWORD *)v143 == 1) {
                WTF::fastFree(v143, v18);
              }
              else {
                --*(_DWORD *)v143;
              }
            }
            uint64_t v83 = *(void *)(a1 + 88);
          }
          if ((v83 & 0x8000000000000000) == 0) {
            goto LABEL_445;
          }
        }
        if (v83 == -1 || *(unsigned char *)(a1 + 332))
        {
LABEL_445:
          long long v144 = off_1EB358988;
          if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
          {
            WTF::String::utf8();
            if (v215) {
              uint64_t v145 = (char *)v215 + 16;
            }
            else {
              uint64_t v145 = 0;
            }
            WTF::String::utf8();
            if (v214) {
              v146 = (char *)v214 + 16;
            }
            else {
              v146 = 0;
            }
            WTF::String::utf8();
            if (v213) {
              v147 = (char *)v213 + 16;
            }
            else {
              v147 = 0;
            }
            v148 = "true";
            if (!*(unsigned char *)(v80 - 1)) {
              v148 = "false";
            }
            *(_DWORD *)buf = 134219266;
            *(void *)&uint8_t buf[4] = a4;
            __int16 v235 = 2080;
            uint64_t v236 = a2;
            __int16 v237 = 2080;
            v238 = v145;
            __int16 v239 = 2080;
            v240 = v146;
            __int16 v241 = 2080;
            v242 = v147;
            __int16 v243 = 2082;
            v244 = v148;
            _os_log_impl(&dword_1985F2000, v144, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"secure\": %{public}s,", buf, 0x3Eu);
            long long v149 = v213;
            uint64_t v213 = 0;
            if (v149)
            {
              if (*(_DWORD *)v149 == 1) {
                WTF::fastFree(v149, v18);
              }
              else {
                --*(_DWORD *)v149;
              }
            }
            long long v150 = v214;
            __int16 v214 = 0;
            if (v150)
            {
              if (*(_DWORD *)v150 == 1) {
                WTF::fastFree(v150, v18);
              }
              else {
                --*(_DWORD *)v150;
              }
            }
            uint64_t v151 = v215;
            long long v215 = 0;
            if (v151)
            {
              if (*(_DWORD *)v151 == 1) {
                WTF::fastFree(v151, v18);
              }
              else {
                --*(_DWORD *)v151;
              }
            }
            uint64_t v83 = *(void *)(a1 + 88);
          }
          if ((v83 & 0x8000000000000000) == 0) {
            goto LABEL_471;
          }
        }
        if (v83 == -1 || *(unsigned char *)(a1 + 332))
        {
LABEL_471:
          char v152 = off_1EB358988;
          if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
          {
            WTF::String::utf8();
            if (v215) {
              uint64_t v153 = (char *)v215 + 16;
            }
            else {
              uint64_t v153 = 0;
            }
            WTF::String::utf8();
            if (v214) {
              char v154 = (char *)v214 + 16;
            }
            else {
              char v154 = 0;
            }
            WTF::String::utf8();
            if (v213) {
              uint64_t v155 = (char *)v213 + 16;
            }
            else {
              uint64_t v155 = 0;
            }
            uint64_t v156 = "true";
            if (!*(unsigned char *)v80) {
              uint64_t v156 = "false";
            }
            *(_DWORD *)buf = 134219266;
            *(void *)&uint8_t buf[4] = a4;
            __int16 v235 = 2080;
            uint64_t v236 = a2;
            __int16 v237 = 2080;
            v238 = v153;
            __int16 v239 = 2080;
            v240 = v154;
            __int16 v241 = 2080;
            v242 = v155;
            __int16 v243 = 2082;
            v244 = v156;
            _os_log_impl(&dword_1985F2000, v152, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"session\": %{public}s,", buf, 0x3Eu);
            uint64_t v157 = v213;
            uint64_t v213 = 0;
            if (v157)
            {
              if (*(_DWORD *)v157 == 1) {
                WTF::fastFree(v157, v18);
              }
              else {
                --*(_DWORD *)v157;
              }
            }
            uint64_t v158 = v214;
            __int16 v214 = 0;
            if (v158)
            {
              if (*(_DWORD *)v158 == 1) {
                WTF::fastFree(v158, v18);
              }
              else {
                --*(_DWORD *)v158;
              }
            }
            uint64_t v159 = v215;
            long long v215 = 0;
            if (v159)
            {
              if (*(_DWORD *)v159 == 1) {
                WTF::fastFree(v159, v18);
              }
              else {
                --*(_DWORD *)v159;
              }
            }
            uint64_t v83 = *(void *)(a1 + 88);
          }
          if ((v83 & 0x8000000000000000) == 0) {
            goto LABEL_502;
          }
        }
        if (v83 == -1 || *(unsigned char *)(a1 + 332))
        {
LABEL_502:
          uint64_t v160 = off_1EB358988;
          if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
          {
            WTF::String::utf8();
            if (v215) {
              BOOL v161 = (char *)v215 + 16;
            }
            else {
              BOOL v161 = 0;
            }
            WTF::String::utf8();
            if (v214) {
              BOOL v162 = (char *)v214 + 16;
            }
            else {
              BOOL v162 = 0;
            }
            WTF::String::utf8();
            if (v213) {
              uint64_t v163 = (char *)v213 + 16;
            }
            else {
              uint64_t v163 = 0;
            }
            WTF::String::utf8();
            if (v212) {
              v164 = (char *)v212 + 16;
            }
            else {
              v164 = 0;
            }
            *(_DWORD *)buf = 134219266;
            *(void *)&uint8_t buf[4] = a4;
            __int16 v235 = 2080;
            uint64_t v236 = a2;
            __int16 v237 = 2080;
            v238 = v161;
            __int16 v239 = 2080;
            v240 = v162;
            __int16 v241 = 2080;
            v242 = v163;
            __int16 v243 = 2082;
            v244 = v164;
            _os_log_impl(&dword_1985F2000, v160, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"comment\": \"%{public}s\",", buf, 0x3Eu);
            uint64_t v165 = v212;
            __int16 v212 = 0;
            if (v165)
            {
              if (*(_DWORD *)v165 == 1) {
                WTF::fastFree(v165, v18);
              }
              else {
                --*(_DWORD *)v165;
              }
            }
            uint64_t v166 = v213;
            uint64_t v213 = 0;
            if (v166)
            {
              if (*(_DWORD *)v166 == 1) {
                WTF::fastFree(v166, v18);
              }
              else {
                --*(_DWORD *)v166;
              }
            }
            uint64_t v167 = v214;
            __int16 v214 = 0;
            if (v167)
            {
              if (*(_DWORD *)v167 == 1) {
                WTF::fastFree(v167, v18);
              }
              else {
                --*(_DWORD *)v167;
              }
            }
            uint64_t v168 = v215;
            long long v215 = 0;
            if (v168)
            {
              if (*(_DWORD *)v168 == 1) {
                WTF::fastFree(v168, v18);
              }
              else {
                --*(_DWORD *)v168;
              }
            }
            uint64_t v83 = *(void *)(a1 + 88);
          }
          if ((v83 & 0x8000000000000000) == 0) {
            goto LABEL_533;
          }
        }
        if (v83 == -1 || *(unsigned char *)(a1 + 332))
        {
LABEL_533:
          BOOL v169 = off_1EB358988;
          if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
          {
            WTF::String::utf8();
            if (v215) {
              int v170 = (char *)v215 + 16;
            }
            else {
              int v170 = 0;
            }
            WTF::String::utf8();
            if (v214) {
              BOOL v171 = (char *)v214 + 16;
            }
            else {
              BOOL v171 = 0;
            }
            WTF::String::utf8();
            if (v213) {
              uint64_t v172 = (char *)v213 + 16;
            }
            else {
              uint64_t v172 = 0;
            }
            WTF::String::utf8();
            if (v212) {
              uint64_t v173 = (char *)v212 + 16;
            }
            else {
              uint64_t v173 = 0;
            }
            *(_DWORD *)buf = 134219266;
            *(void *)&uint8_t buf[4] = a4;
            __int16 v235 = 2080;
            uint64_t v236 = a2;
            __int16 v237 = 2080;
            v238 = v170;
            __int16 v239 = 2080;
            v240 = v171;
            __int16 v241 = 2080;
            v242 = v172;
            __int16 v243 = 2082;
            v244 = v173;
            _os_log_impl(&dword_1985F2000, v169, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"commentURL\": \"%{public}s\"", buf, 0x3Eu);
            uint64_t v174 = v212;
            __int16 v212 = 0;
            if (v174)
            {
              if (*(_DWORD *)v174 == 1) {
                WTF::fastFree(v174, v18);
              }
              else {
                --*(_DWORD *)v174;
              }
            }
            uint64_t v175 = v213;
            uint64_t v213 = 0;
            if (v175)
            {
              if (*(_DWORD *)v175 == 1) {
                WTF::fastFree(v175, v18);
              }
              else {
                --*(_DWORD *)v175;
              }
            }
            BOOL v176 = v214;
            __int16 v214 = 0;
            if (v176)
            {
              if (*(_DWORD *)v176 == 1) {
                WTF::fastFree(v176, v18);
              }
              else {
                --*(_DWORD *)v176;
              }
            }
            int v177 = v215;
            long long v215 = 0;
            if (v177)
            {
              if (*(_DWORD *)v177 == 1) {
                WTF::fastFree(v177, v18);
              }
              else {
                --*(_DWORD *)v177;
              }
            }
            uint64_t v83 = *(void *)(a1 + 88);
          }
          if ((v83 & 0x8000000000000000) == 0) {
            goto LABEL_534;
          }
        }
        if (v83 == -1 || *(unsigned char *)(a1 + 332))
        {
LABEL_534:
          BOOL v178 = off_1EB358988;
          if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
          {
            WTF::String::utf8();
            if (v215) {
              uint64_t v179 = (char *)v215 + 16;
            }
            else {
              uint64_t v179 = 0;
            }
            WTF::String::utf8();
            if (v214) {
              uint64_t v180 = (char *)v214 + 16;
            }
            else {
              uint64_t v180 = 0;
            }
            WTF::String::utf8();
            if (v213) {
              uint64_t v181 = (char *)v213 + 16;
            }
            else {
              uint64_t v181 = 0;
            }
            *(_DWORD *)buf = 134219266;
            uint64_t v182 = ",";
            if (!v81) {
              uint64_t v182 = "";
            }
            *(void *)&uint8_t buf[4] = a4;
            __int16 v235 = 2080;
            uint64_t v236 = a2;
            __int16 v237 = 2080;
            v238 = v179;
            __int16 v239 = 2080;
            v240 = v180;
            __int16 v241 = 2080;
            v242 = v181;
            __int16 v243 = 2082;
            v244 = v182;
            _os_log_impl(&dword_1985F2000, v178, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:   }%{public}s", buf, 0x3Eu);
            BOOL v183 = v213;
            uint64_t v213 = 0;
            if (v183)
            {
              if (*(_DWORD *)v183 == 1) {
                WTF::fastFree(v183, v18);
              }
              else {
                --*(_DWORD *)v183;
              }
            }
            int v184 = v214;
            __int16 v214 = 0;
            if (v184)
            {
              if (*(_DWORD *)v184 == 1) {
                WTF::fastFree(v184, v18);
              }
              else {
                --*(_DWORD *)v184;
              }
            }
            BOOL v185 = v215;
            long long v215 = 0;
            if (v185)
            {
              if (*(_DWORD *)v185 == 1) {
                WTF::fastFree(v185, v18);
              }
              else {
                --*(_DWORD *)v185;
              }
            }
          }
        }
        v186 = v216;
        int v216 = 0;
        if (v186)
        {
          if (*(_DWORD *)v186 == 2) {
            WTF::StringImpl::destroy(v186, (WTF::StringImpl *)v18);
          }
          else {
            *(_DWORD *)v186 -= 2;
          }
        }
        int v187 = v217;
        v217 = 0;
        if (v187)
        {
          if (*(_DWORD *)v187 == 2) {
            WTF::StringImpl::destroy(v187, (WTF::StringImpl *)v18);
          }
          else {
            *(_DWORD *)v187 -= 2;
          }
        }
        v188 = v218;
        v218 = 0;
        if (v188)
        {
          if (*(_DWORD *)v188 == 2) {
            WTF::StringImpl::destroy(v188, (WTF::StringImpl *)v18);
          }
          else {
            *(_DWORD *)v188 -= 2;
          }
        }
        int v189 = v219;
        long long v219 = 0;
        if (v189)
        {
          if (*(_DWORD *)v189 == 2) {
            WTF::StringImpl::destroy(v189, (WTF::StringImpl *)v18);
          }
          else {
            *(_DWORD *)v189 -= 2;
          }
        }
        v190 = v220;
        long long v220 = 0;
        if (v190)
        {
          if (*(_DWORD *)v190 == 2) {
            WTF::StringImpl::destroy(v190, (WTF::StringImpl *)v18);
          }
          else {
            *(_DWORD *)v190 -= 2;
          }
        }
        v191 = v223;
        uint64_t v223 = 0;
        if (v191)
        {
          if (*(_DWORD *)v191 == 2) {
            WTF::StringImpl::destroy(v191, (WTF::StringImpl *)v18);
          }
          else {
            *(_DWORD *)v191 -= 2;
          }
        }
        v80 += 136;
        --v81;
      }
      while (v82 + 136 != v208);
    }
    uint64_t v192 = *(void *)(a1 + 88);
    if ((v192 & 0x8000000000000000) == 0 || v192 == -1 || *(unsigned char *)(a1 + 332))
    {
      v193 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        WTF::String::utf8();
        if (v223) {
          v194 = (char *)v223 + 16;
        }
        else {
          v194 = 0;
        }
        WTF::String::utf8();
        if (v220) {
          char v195 = (char *)v220 + 16;
        }
        else {
          char v195 = 0;
        }
        WTF::String::utf8();
        if (v219) {
          v196 = (char *)v219 + 16;
        }
        else {
          v196 = 0;
        }
        *(_DWORD *)buf = 134219010;
        *(void *)&uint8_t buf[4] = a4;
        __int16 v235 = 2080;
        uint64_t v236 = a2;
        __int16 v237 = 2080;
        v238 = v194;
        __int16 v239 = 2080;
        v240 = v195;
        __int16 v241 = 2080;
        v242 = v196;
        _os_log_impl(&dword_1985F2000, v193, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s: ]}", buf, 0x34u);
        long long v197 = v219;
        long long v219 = 0;
        if (v197)
        {
          if (*(_DWORD *)v197 == 1) {
            WTF::fastFree(v197, v18);
          }
          else {
            --*(_DWORD *)v197;
          }
        }
        long long v198 = v220;
        long long v220 = 0;
        if (v198)
        {
          if (*(_DWORD *)v198 == 1) {
            WTF::fastFree(v198, v18);
          }
          else {
            --*(_DWORD *)v198;
          }
        }
        v199 = v223;
        uint64_t v223 = 0;
        if (v199)
        {
          if (*(_DWORD *)v199 == 1) {
            WTF::fastFree(v199, v18);
          }
          else {
            --*(_DWORD *)v199;
          }
        }
      }
    }
    uint64_t v200 = v224;
    __int16 v224 = 0;
    if (v200)
    {
      if (*(_DWORD *)v200 == 2) {
        WTF::StringImpl::destroy(v200, (WTF::StringImpl *)v18);
      }
      else {
        *(_DWORD *)v200 -= 2;
      }
    }
    __int16 v201 = v225;
    uint64_t v225 = 0;
    if (v201)
    {
      if (*(_DWORD *)v201 == 2) {
        WTF::StringImpl::destroy(v201, (WTF::StringImpl *)v18);
      }
      else {
        *(_DWORD *)v201 -= 2;
      }
    }
    v202 = v226;
    uint64_t v226 = 0;
    if (v202)
    {
      if (*(_DWORD *)v202 == 2) {
        WTF::StringImpl::destroy(v202, (WTF::StringImpl *)v18);
      }
      else {
        *(_DWORD *)v202 -= 2;
      }
    }
    v203 = v227;
    uint64_t v227 = 0;
    if (v203)
    {
      if (*(_DWORD *)v203 == 2) {
        WTF::StringImpl::destroy(v203, (WTF::StringImpl *)v18);
      }
      else {
        *(_DWORD *)v203 -= 2;
      }
    }
    v204 = v228;
    char v228 = 0;
    if (v204)
    {
      if (*(_DWORD *)v204 == 2) {
        WTF::StringImpl::destroy(v204, (WTF::StringImpl *)v18);
      }
      else {
        *(_DWORD *)v204 -= 2;
      }
    }
    v205 = v229;
    int v229 = 0;
    if (v205)
    {
      if (*(_DWORD *)v205 == 2) {
        WTF::StringImpl::destroy(v205, (WTF::StringImpl *)v18);
      }
      else {
        *(_DWORD *)v205 -= 2;
      }
    }
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v232, v18);
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)buf, (const WTF::URL *)a8);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v223, a6);
  if (*((unsigned char *)a10 + 16))
  {
    long long v221 = *a10;
    char v222 = 1;
    int hasStorageAccess = WebCore::NetworkStorageSession::hasStorageAccess();
    int v19 = v223;
    uint64_t v223 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v18);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    BOOL v20 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v18);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    goto LABEL_22;
  }
  uint64_t v207 = std::__throw_bad_optional_access[abi:sn180100]();
}

uint64_t non-virtual thunk to'WebKit::NetworkResourceLoader::addConsoleMessage(uint64_t a1, char a2, char a3, uint64_t a4)
{
  return WebKit::NetworkResourceLoader::addConsoleMessage((void *)(a1 - 24), a2, a3, a4);
}

uint64_t WebKit::NetworkResourceLoader::enqueueSecurityPolicyViolationEvent(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[11];
  if (v2)
  {
    char v5 = a1 + 12;
    uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v6 = 2235;
    *((void *)v6 + 1) = v2;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    BOOL v11 = v6;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v6, v5);
    IPC::ArgumentCoder<WebCore::SecurityPolicyViolationEventInit,void>::encode(v6, a2);
    (*(void (**)(void *, IPC::Encoder **, void))(a1[2] + 32))(a1 + 2, &v11, 0);
    uint64_t result = (uint64_t)v11;
    BOOL v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v7);
      return WTF::fastFree(v9, v10);
    }
  }
  else
  {
    uint64_t result = 145;
    __break(0xC471u);
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::NetworkResourceLoader::enqueueSecurityPolicyViolationEvent(uint64_t a1, uint64_t a2)
{
  return WebKit::NetworkResourceLoader::enqueueSecurityPolicyViolationEvent((void *)(a1 - 24), a2);
}

void WebKit::NetworkResourceLoader::startWithServiceWorker(WebKit::NetworkResourceLoader *this)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 11);
    if (!v3)
    {
      __break(0xC471u);
      goto LABEL_31;
    }
    uint64_t v4 = *((void *)this + 10);
    uint64_t v5 = *((void *)this + 12);
    uint64_t v6 = *((void *)this + 381);
    BOOL v7 = *((unsigned __int8 *)this + 315) == 1;
    int v8 = *((unsigned __int8 *)this + 3088);
    BOOL v9 = *((void *)this + 521) != 0;
    *(_DWORD *)buf = 134219776;
    *(void *)&uint8_t buf[4] = this;
    __int16 v37 = 2048;
    uint64_t v38 = v4;
    __int16 v39 = 2048;
    uint64_t v40 = v3;
    __int16 v41 = 2048;
    uint64_t v42 = v5;
    __int16 v43 = 2048;
    uint64_t v44 = v6;
    __int16 v45 = 1024;
    BOOL v46 = v7;
    __int16 v47 = 1024;
    int v48 = v8;
    __int16 v49 = 1024;
    BOOL v50 = v9;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::startWithServiceWorker:", buf, 0x46u);
  }
  WebCore::ResourceRequest::ResourceRequest(v34, (const String *)this + 21);
  if (*((unsigned char *)this + 315) == 1)
  {
    WebCore::ContentFilter::create();
    uint64_t v14 = (WebCore::ContentFilter **)((char *)this + 4808);
    uint64_t v15 = *(void *)buf;
    *(void *)buf = 0;
    std::unique_ptr<WebCore::ContentFilter>::reset[abi:sn180100]((uint64_t *)this + 601, v15);
    uint64_t v16 = *(void *)buf;
    *(void *)buf = 0;
    if (v16)
    {
      uint64_t v23 = (WTF *)MEMORY[0x199731260]();
      WTF::fastFree(v23, v24);
    }
    uint64_t v17 = *(void *)(*(void *)(*((void *)this + 484) + 80) + 40);
    if (v17)
    {
      if (*(void *)(v17 + 352))
      {
        xpc_connection_get_audit_token();
        LOBYTE(v17) = 1;
        goto LABEL_20;
      }
      LOBYTE(v17) = 0;
    }
    buf[0] = 0;
LABEL_20:
    LOBYTE(v41) = v17;
    WebCore::ContentFilter::setHostProcessAuditToken();
    uint64_t v18 = *v14;
    int v19 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v34);
    WebCore::ContentFilter::startFilteringMainResource(v18, v19);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
    CFTypeRef v54 = 0;
    char v55 = 0;
    char v53 = v53 & 0xF1 | 4;
    char v21 = WebCore::ContentFilter::continueAfterWillSendRequest();
    CFTypeRef v22 = v54;
    CFTypeRef v54 = 0;
    if (v22) {
      CFRelease(v22);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v20);
    if ((v21 & 1) == 0)
    {
      WebCore::ContentFilter::stopFilteringMainResource(*v14);
      goto LABEL_12;
    }
  }
  WebKit::NetworkConnectionToWebProcess::createFetchTask(*((WebKit::NetworkConnectionToWebProcess **)this + 484), this, (const WebCore::ResourceRequest *)v34, (uint64_t *)buf);
  uint64_t v10 = *(void *)buf;
  *(void *)buf = 0;
  BOOL v11 = (WebKit::ServiceWorkerFetchTask *)*((void *)this + 549);
  *((void *)this + 549) = v10;
  if (v11)
  {
    WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v11);
    uint64_t v12 = *(WebKit::ServiceWorkerFetchTask **)buf;
    *(void *)buf = 0;
    if (v12) {
      WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v12);
    }
    uint64_t v10 = *((void *)this + 549);
  }
  if (v10)
  {
    uint64_t v25 = off_1EB358988;
    if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    uint64_t v26 = *((void *)this + 11);
    if (v26)
    {
      uint64_t v27 = *((void *)this + 10);
      uint64_t v28 = *((void *)this + 12);
      uint64_t v29 = *((void *)this + 381);
      BOOL v30 = *((unsigned __int8 *)this + 315) == 1;
      int v31 = *((unsigned __int8 *)this + 3088);
      BOOL v32 = *((void *)this + 521) != 0;
      uint64_t v33 = *(void *)(v10 + 40);
      *(_DWORD *)buf = 134220032;
      *(void *)&uint8_t buf[4] = this;
      __int16 v37 = 2048;
      uint64_t v38 = v27;
      __int16 v39 = 2048;
      uint64_t v40 = v26;
      __int16 v41 = 2048;
      uint64_t v42 = v28;
      __int16 v43 = 2048;
      uint64_t v44 = v29;
      __int16 v45 = 1024;
      BOOL v46 = v30;
      __int16 v47 = 1024;
      int v48 = v31;
      __int16 v49 = 1024;
      BOOL v50 = v32;
      __int16 v51 = 2048;
      uint64_t v52 = v33;
      _os_log_impl(&dword_1985F2000, v25, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::startWithServiceWorker: Created a ServiceWorkerFetchTask (fetchIdentifier=%llu)", buf, 0x50u);
      goto LABEL_12;
    }
    __break(0xC471u);
LABEL_31:
    JUMPOUT(0x198BAEC04);
  }
  if ((WebKit::NetworkResourceLoader::abortIfServiceWorkersOnly(this) & 1) == 0) {
    WebKit::NetworkResourceLoader::startRequest(this, (const String *)v34);
  }
LABEL_12:
  CFTypeRef v13 = cf;
  CFTypeRef cf = 0;
  if (v13) {
    CFRelease(v13);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v34);
}

uint64_t WebKit::NetworkResourceLoader::abortIfServiceWorkersOnly(WebKit::NetworkResourceLoader *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v1 = *((unsigned __int8 *)this + 3760);
  if (v1 != 2) {
    return v1 == 2;
  }
  uint64_t v4 = off_1EB358988;
  if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
  {
LABEL_4:
    IPC::MessageSender::send<Messages::WebResourceLoader::ServiceWorkerDidNotHandle,WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>((uint64_t)this + 16, *((void *)this + 381));
    WebKit::NetworkResourceLoader::abort(this);
    return v1 == 2;
  }
  uint64_t v5 = *((void *)this + 11);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 10);
    uint64_t v7 = *((void *)this + 12);
    uint64_t v8 = *((void *)this + 381);
    BOOL v9 = *((unsigned __int8 *)this + 315) == 1;
    int v10 = *((unsigned __int8 *)this + 3088);
    BOOL v11 = *((void *)this + 521) != 0;
    int v12 = 134219776;
    CFTypeRef v13 = this;
    __int16 v14 = 2048;
    uint64_t v15 = v6;
    __int16 v16 = 2048;
    uint64_t v17 = v5;
    __int16 v18 = 2048;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = v8;
    __int16 v22 = 1024;
    BOOL v23 = v9;
    __int16 v24 = 1024;
    int v25 = v10;
    __int16 v26 = 1024;
    BOOL v27 = v11;
    _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::abortIfServiceWorkersOnly: Aborting load because the service worker did not handle the load and serviceWorkerMode only allows service workers", (uint8_t *)&v12, 0x46u);
    goto LABEL_4;
  }
  uint64_t result = 145;
  __break(0xC471u);
  return result;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebResourceLoader::ServiceWorkerDidNotHandle,WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2716;
  *((void *)v4 + 1) = a2;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  BOOL v9 = v4;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v9, 0);
  uint64_t result = v9;
  BOOL v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void WebKit::NetworkResourceLoader::serviceWorkerDidNotHandle(WebKit::NetworkResourceLoader *this, WebKit::ServiceWorkerFetchTask *a2)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 11);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x198BAF2C8);
    }
    uint64_t v6 = *((void *)this + 10);
    uint64_t v7 = *((void *)this + 12);
    uint64_t v8 = *((void *)this + 381);
    BOOL v9 = *((unsigned __int8 *)this + 315) == 1;
    int v10 = *((unsigned __int8 *)this + 3088);
    BOOL v11 = *((void *)this + 521) != 0;
    if (a2) {
      uint64_t v12 = *((void *)a2 + 5);
    }
    else {
      uint64_t v12 = 0;
    }
    *(_DWORD *)buf = 134220032;
    uint64_t v52 = this;
    __int16 v53 = 2048;
    uint64_t v54 = v6;
    __int16 v55 = 2048;
    uint64_t v56 = v5;
    __int16 v57 = 2048;
    uint64_t v58 = v7;
    __int16 v59 = 2048;
    uint64_t v60 = v8;
    __int16 v61 = 1024;
    BOOL v62 = v9;
    __int16 v63 = 1024;
    int v64 = v10;
    __int16 v65 = 1024;
    BOOL v66 = v11;
    __int16 v67 = 2048;
    uint64_t v68 = v12;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::serviceWorkerDidNotHandle: (fetchIdentifier=%llu)", buf, 0x50u);
  }
  if (*((WebKit::ServiceWorkerFetchTask **)this + 549) != a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198BAF2A8);
  }
  if ((WebKit::NetworkResourceLoader::abortIfServiceWorkersOnly(this) & 1) == 0)
  {
    uint64_t v13 = *((void *)this + 549);
    if (v13)
    {
      WTF::URL::URL((uint64_t)buf, (uint64_t *)(v13 + 64));
      WTF::URL::URL((uint64_t)&v58 + 6, (uint64_t *)(v13 + 104));
      uint64_t v14 = *(void *)(v13 + 144);
      long long v15 = *(_OWORD *)(v13 + 152);
      *(_OWORD *)(v13 + 152) = 0u;
      long long v70 = v15;
      *(void *)&long long v15 = *(void *)(v13 + 168);
      *(void *)(v13 + 168) = 0;
      uint64_t v69 = v14;
      uint64_t v71 = v15;
      uint64_t v16 = *(void *)(v13 + 176);
      *(void *)(v13 + 176) = 0;
      uint64_t v72 = v16;
      uint64_t v17 = *(void *)(v13 + 184);
      *(void *)(v13 + 184) = 0;
      uint64_t v73 = v17;
      uint64_t v18 = *(void *)(v13 + 192);
      *(void *)(v13 + 192) = 0;
      uint64_t v74 = v18;
      uint64_t v19 = *(void *)(v13 + 200);
      *(void *)(v13 + 200) = 0;
      uint64_t v75 = v19;
      LODWORD(v18) = *(_DWORD *)(v13 + 208);
      char v77 = *(unsigned char *)(v13 + 212);
      int v76 = v18;
      long long v20 = *(_OWORD *)(v13 + 216);
      *(_OWORD *)(v13 + 216) = 0u;
      long long v78 = v20;
      uint64_t v21 = *(void *)(v13 + 232);
      uint64_t v22 = *(void *)(v13 + 240);
      *(void *)(v13 + 232) = 0;
      char v81 = *(unsigned char *)(v13 + 248);
      uint64_t v79 = v21;
      uint64_t v80 = v22;
      BOOL v23 = *(const void **)(v13 + 256);
      *(void *)(v13 + 256) = 0;
      CFTypeRef cf = v23;
      __int16 v24 = (WebKit::ServiceWorkerFetchTask *)*((void *)this + 549);
      *((void *)this + 549) = 0;
      if (v24) {
        WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v24);
      }
      int v25 = (const String *)*((void *)this + 485);
      if (v25) {
        WebKit::NetworkLoad::updateRequestAfterRedirection(v25, (WebCore::ResourceRequest *)buf);
      }
      __int16 v26 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v27 = *((void *)this + 11);
        if (!v27)
        {
          __break(0xC471u);
          JUMPOUT(0x198BAF2E8);
        }
        uint64_t v28 = *((void *)this + 10);
        uint64_t v29 = *((void *)this + 12);
        uint64_t v30 = *((void *)this + 381);
        BOOL v31 = *((unsigned __int8 *)this + 315) == 1;
        int v32 = *((unsigned __int8 *)this + 3088);
        BOOL v33 = *((void *)this + 521) != 0;
        *(_DWORD *)__int16 v36 = 134219776;
        *(void *)&v36[4] = this;
        __int16 v37 = 2048;
        uint64_t v38 = v28;
        __int16 v39 = 2048;
        uint64_t v40 = v27;
        __int16 v41 = 2048;
        uint64_t v42 = v29;
        __int16 v43 = 2048;
        uint64_t v44 = v30;
        __int16 v45 = 1024;
        BOOL v46 = v31;
        __int16 v47 = 1024;
        int v48 = v32;
        __int16 v49 = 1024;
        BOOL v50 = v33;
        _os_log_impl(&dword_1985F2000, v26, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::serviceWorkerDidNotHandle: Restarting network load for redirect", v36, 0x46u);
      }
      __int16 v34 = (void *)WTF::fastMalloc((WTF *)0x10);
      *__int16 v34 = &unk_1EE9C6480;
      *(void *)__int16 v36 = v34;
      WebKit::NetworkResourceLoader::restartNetworkLoad((uint64_t)this, (WebCore::ResourceRequestBase *)buf, (uint64_t *)v36);
      if (*(void *)v36) {
        (*(void (**)(void))(**(void **)v36 + 8))(*(void *)v36);
      }
      CFTypeRef v35 = cf;
      CFTypeRef cf = 0;
      if (v35) {
        CFRelease(v35);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    }
    else
    {
      WebKit::NetworkResourceLoader::startRequest(this, (WebKit::NetworkResourceLoader *)((char *)this + 168));
    }
  }
}

uint64_t WebKit::NetworkResourceLoader::notifyReportObservers(uint64_t a1, WebCore::Report **a2)
{
  if (*(unsigned char *)(a1 + 315) == 1 && *(unsigned char *)(a1 + 3376))
  {
    uint64_t v3 = (uint64_t *)(a1 + 3360);
    uint64_t v4 = (uint64_t *)(a1 + 3368);
  }
  else
  {
    uint64_t v3 = (uint64_t *)(a1 + 96);
    uint64_t v4 = (uint64_t *)(a1 + 104);
  }
  uint64_t v5 = *v4;
  v13[0] = *v3;
  v13[1] = v5;
  uint64_t v6 = *(void *)(a1 + 88);
  if (v6)
  {
    uint64_t v7 = a1 + 16;
    uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v8 = 2326;
    *((void *)v8 + 1) = v6;
    *((void *)v8 + 66) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 68) = 0;
    *((void *)v8 + 70) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    uint64_t v14 = v8;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, v13);
    IPC::ArgumentCoder<WebCore::Report,void>::encode(v8, *a2);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v7 + 32))(v7, &v14, 0);
    uint64_t result = (uint64_t)v14;
    uint64_t v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
      return WTF::fastFree(v11, v12);
    }
  }
  else
  {
    uint64_t result = 145;
    __break(0xC471u);
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::NetworkResourceLoader::notifyReportObservers(uint64_t a1, WebCore::Report **a2)
{
  return WebKit::NetworkResourceLoader::notifyReportObservers(a1 - 64, a2);
}

WTF *WebKit::NetworkResourceLoader::endpointURIForToken@<X0>(WebKit::NetworkResourceLoader *this@<X0>, WTF::StringImpl **a2@<X1>, WTF *a3@<X8>)
{
  return WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a3, (uint64_t)this + 4928, a2);
}

WTF *non-virtual thunk to'WebKit::NetworkResourceLoader::endpointURIForToken@<X0>(WebKit::NetworkResourceLoader *this@<X0>, WTF::StringImpl **a2@<X1>, WTF *a3@<X8>)
{
  return WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a3, (uint64_t)this + 4864, a2);
}

uint64_t WebKit::NetworkResourceLoader::sendReportToEndpoints(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _DWORD **a5, char a6)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v44, a3);
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v11 = *(unsigned int *)(a4 + 12);
  if (v11)
  {
    uint64_t v12 = *(WTF::StringImpl ***)a4;
    uint64_t v13 = 8 * v11;
    do
    {
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WTF *)v41, a1 + 4928, v12);
      long long v15 = v41[0];
      if (v41[0] && *((_DWORD *)v41[0] + 1))
      {
        unsigned int v16 = v46;
        if (v46 == v45)
        {
          uint64_t v21 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v44, v46 + 1, (unint64_t)v41);
          uint64_t v22 = v46;
          unsigned int v23 = v46 + 1;
          uint64_t v24 = v44;
          uint64_t v25 = *v21;
          *uint64_t v21 = 0;
          *(void *)(v24 + 8 * v22) = v25;
          unsigned int v46 = v23;
        }
        else
        {
          v41[0] = 0;
          *(void *)(v44 + 8 * v46) = v15;
          unsigned int v46 = v16 + 1;
        }
      }
      else
      {
        uint64_t v17 = HIDWORD(v43);
        if (HIDWORD(v43) == v43)
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v42, (unint64_t)v12);
        }
        else
        {
          uint64_t v18 = v42;
          uint64_t v19 = *v12;
          if (*v12) {
            *(_DWORD *)v19 += 2;
          }
          *(void *)(v18 + 8 * v17) = v19;
          HIDWORD(v43) = v17 + 1;
        }
      }
      long long v20 = v41[0];
      v41[0] = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v14);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  if (*(unsigned char *)(a1 + 315) == 1 && *(unsigned char *)(a1 + 3376))
  {
    __int16 v26 = (WTF::StringImpl **)(a1 + 3360);
    uint64_t v27 = (WTF::StringImpl **)(a1 + 3368);
  }
  else
  {
    __int16 v26 = (WTF::StringImpl **)(a1 + 96);
    uint64_t v27 = (WTF::StringImpl **)(a1 + 104);
  }
  uint64_t v28 = *v27;
  v41[0] = *v26;
  v41[1] = v28;
  uint64_t v29 = *a5;
  *a5 = 0;
  uint64_t v40 = v29;
  uint64_t v30 = *(void *)(a1 + 88);
  if (!v30)
  {
    __break(0xC471u);
    goto LABEL_33;
  }
  BOOL v31 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v31 = 2404;
  *((void *)v31 + 1) = v30;
  *((void *)v31 + 66) = (char *)v31 + 16;
  *((void *)v31 + 67) = 512;
  *((void *)v31 + 68) = 0;
  *((void *)v31 + 70) = 0;
  *((void *)v31 + 69) = 0;
  IPC::Encoder::encodeHeader(v31);
  __int16 v47 = v31;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v31, (uint64_t *)v41);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v31, a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v31, (uint64_t)&v44);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v31, (uint64_t)&v42);
  IPC::ArgumentCoder<IPC::FormDataReference,void>::encode(v31, &v40);
  int v32 = (unsigned char *)IPC::Encoder::grow(v31, 1uLL, 1);
  if (!v33)
  {
    __break(0xC471u);
LABEL_33:
    JUMPOUT(0x198BAF70CLL);
  }
  *int v32 = a6;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(a1 + 16) + 32))(a1 + 16, &v47, 0);
  CFTypeRef v35 = v47;
  __int16 v47 = 0;
  if (v35)
  {
    IPC::Encoder::~Encoder(v35, v34);
    WTF::fastFree(v38, v39);
    if (!v29) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v29) {
LABEL_27:
  }
    WTF::RefCounted<WebCore::FormData>::deref((WTF::RefCountedBase *)v29);
LABEL_28:
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v34);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v36);
}

uint64_t non-virtual thunk to'WebKit::NetworkResourceLoader::sendReportToEndpoints(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _DWORD **a5, char a6)
{
  return WebKit::NetworkResourceLoader::sendReportToEndpoints(a1 - 64, a2, a3, a4, a5, a6);
}

uint64_t WebKit::NetworkResourceLoader::serviceWorkerDidFinish(uint64_t this)
{
  int v1 = *(WebCore::ContentFilter **)(this + 4808);
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(this + 168));
    WebCore::ContentFilter::continueAfterNotifyFinished(v1, v3);
    uint64_t v4 = *(WebCore::ContentFilter **)(v2 + 4808);
    return WebCore::ContentFilter::stopFilteringMainResource(v4);
  }
  return this;
}

unsigned int *WebKit::NetworkResourceLoader::dataReceivedThroughContentFilter(WebKit::NetworkResourceLoader *this, const WebCore::SharedBuffer *a2, uint64_t a3)
{
  uint64_t v12 = *((void *)a2 + 6);
  uint64_t v13 = (unsigned int *)a2;
  atomic_fetch_add((atomic_uint *volatile)a2, 1u);
  uint64_t v14 = 0;
  v15[0] = &v12;
  v15[1] = a3;
  uint64_t v3 = (char *)this + 16;
  uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2712;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unsigned int v16 = v5;
  IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<IPC::SharedBufferReference const&,unsigned long long>,0ul,1ul>(v5, (uint64_t)v15);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v16, 0);
  uint64_t v7 = v16;
  unsigned int v16 = 0;
  if (v7)
  {
    IPC::Encoder::~Encoder(v7, v6);
    WTF::fastFree(v10, v11);
  }
  uint64_t v8 = v14;
  uint64_t v14 = 0;
  if (v8) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v8);
  }
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v6);
  }
  return result;
}

unsigned int *non-virtual thunk to'WebKit::NetworkResourceLoader::dataReceivedThroughContentFilter(WebKit::NetworkResourceLoader *this, const WebCore::SharedBuffer *a2, uint64_t a3)
{
  return WebKit::NetworkResourceLoader::dataReceivedThroughContentFilter((WebKit::NetworkResourceLoader *)((char *)this - 48), a2, a3);
}

void *WebKit::NetworkResourceLoader::contentFilterDidBlock@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X2>, const WebCore::ResourceError *a4@<X8>)
{
  v19[3] = *MEMORY[0x1E4F143B8];
  WebKit::blockedByContentFilterError((WebKit *)(a1 + 168), (uint64_t)a4);
  WTF::String::operator=((uint64_t *)(a1 + 4816), (WTF::StringImpl **)a2);
  WTF::String::operator=((uint64_t *)(a1 + 4824), (WTF::StringImpl **)(a2 + 8));
  long long v8 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4832) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 4848) = v8;
  uint64_t v9 = a1 + 4864;
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::__value_func[abi:sn180100]((uint64_t)v17, a2 + 48);
  if (v17 != (void *)(a1 + 4864))
  {
    int v10 = v18;
    uint64_t v11 = *(void *)(a1 + 4888);
    if (v18 == v17)
    {
      if (v11 == v9)
      {
        (*(void (**)(void *, void *))(v17[0] + 24))(v17, v19);
        (*(void (**)(void *))(*v18 + 32))(v18);
        uint64_t v18 = 0;
        (*(void (**)(void, void *))(**(void **)(a1 + 4888) + 24))(*(void *)(a1 + 4888), v17);
        (*(void (**)(void))(**(void **)(a1 + 4888) + 32))(*(void *)(a1 + 4888));
        *(void *)(a1 + 4888) = 0;
        uint64_t v18 = v17;
        (*(void (**)(void *, uint64_t))(v19[0] + 24))(v19, a1 + 4864);
        (*(void (**)(void *))(v19[0] + 32))(v19);
      }
      else
      {
        (*(void (**)(void *, uint64_t))(v17[0] + 24))(v17, a1 + 4864);
        (*(void (**)(void *))(*v18 + 32))(v18);
        uint64_t v18 = *(void **)(a1 + 4888);
      }
      *(void *)(a1 + 4888) = v9;
    }
    else if (v11 == v9)
    {
      (*(void (**)(uint64_t, void *))(*(void *)(a1 + 4864) + 24))(a1 + 4864, v17);
      (*(void (**)(void))(**(void **)(a1 + 4888) + 32))(*(void *)(a1 + 4888));
      *(void *)(a1 + 4888) = v18;
      uint64_t v18 = v17;
    }
    else
    {
      uint64_t v18 = *(void **)(a1 + 4888);
      *(void *)(a1 + 4888) = v10;
    }
  }
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::~__value_func[abi:sn180100](v17);
  uint64_t v12 = *(void *)(a2 + 80);
  if (v12) {
    CFRetain(*(CFTypeRef *)(a2 + 80));
  }
  uint64_t v13 = *(const void **)(a1 + 4896);
  *(void *)(a1 + 4896) = v12;
  if (v13) {
    CFRelease(v13);
  }
  *(unsigned char *)(a1 + 4904) = *(unsigned char *)(a2 + 88);
  WTF::String::operator=((uint64_t *)(a1 + 4912), a3);
  if (WebCore::ContentFilterUnblockHandler::needsUIProcess((WebCore::ContentFilterUnblockHandler *)a2))
  {
    WebCore::ContentFilter::setBlockedError(*(WebCore::ContentFilter **)(a1 + 4808), a4);
    return (void *)WebCore::ContentFilter::handleProvisionalLoadFailure();
  }
  else
  {
    ++*(_DWORD *)(a1 + 8);
    long long v15 = operator new(0x18uLL);
    *long long v15 = &unk_1EE9C64A8;
    v15[1] = a1;
    void v15[2] = a1;
    v16[3] = v15;
    WebCore::ContentFilterUnblockHandler::requestUnblockAsync();
    return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:sn180100](v16);
  }
}

void WebCore::ContentFilter::setBlockedError(WebCore::ContentFilter *this, const WebCore::ResourceError *a2)
{
  WTF::String::operator=((uint64_t *)this + 13, (WTF::StringImpl **)a2);
  WTF::String::operator=((uint64_t *)this + 14, (WTF::StringImpl **)a2 + 1);
  long long v4 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 120) = *((_OWORD *)a2 + 1);
  *(_OWORD *)((char *)this + 136) = v4;
  WTF::String::operator=((uint64_t *)this + 19, (WTF::StringImpl **)a2 + 6);
  int v5 = *((_DWORD *)a2 + 14);
  *((_WORD *)this + 82) = *((_WORD *)a2 + 30);
  *((_DWORD *)this + 40) = v5;
  uint64_t v6 = *((void *)a2 + 8);
  if (v6) {
    CFRetain(*((CFTypeRef *)a2 + 8));
  }
  uint64_t v7 = (const void *)*((void *)this + 21);
  *((void *)this + WebKit::NetworkResourceLoader::startRequest((WebKit::NetworkResourceLoader *)this, this + 21) = v6;
  if (v7) {
    CFRelease(v7);
  }
  *((unsigned char *)this + 176) = *((unsigned char *)a2 + 72);
}

void *non-virtual thunk to'WebKit::NetworkResourceLoader::contentFilterDidBlock@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X2>, const WebCore::ResourceError *a4@<X8>)
{
  return WebKit::NetworkResourceLoader::contentFilterDidBlock(a1 - 48, a2, a3, a4);
}

uint64_t WebKit::NetworkResourceLoader::cancelMainResourceLoadForContentFilter(uint64_t result)
{
  if (!*(void *)(result + 4808))
  {
    uint64_t result = 2133;
    __break(0xC471u);
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::NetworkResourceLoader::cancelMainResourceLoadForContentFilter(uint64_t result)
{
  if (!*(void *)(result + 4760))
  {
    uint64_t result = 2133;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkResourceLoader::handleProvisionalLoadFailureFromContentFilter(WebKit::NetworkResourceLoader *this, const WTF::URL *a2, WebCore::SubstituteData *a3)
{
  uint64_t v6 = *((void *)this + 484);
  uint64_t v7 = *(void *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 264);
  uint64_t v9 = (const WTF::URL *)WebCore::ContentFilter::blockedPageURL(this);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v24, v9);
  int v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v10 = &unk_1EE9C64F0;
  unsigned int v23 = v10;
  WebKit::NetworkProcess::addAllowedFirstPartyForCookies(v7, v8, &v24, 0, (uint64_t *)&v23);
  uint64_t v12 = (uint64_t)v23;
  unsigned int v23 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v24;
  uint64_t v24 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v15 = *((void *)this + 2);
  uint64_t v14 = (uint64_t *)((char *)this + 16);
  unsigned int v16 = (WebCore::ResourceError *)(v14[599] + 104);
  uint64_t v17 = (*(uint64_t (**)(uint64_t *))(v15 + 56))(v14);
  uint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v18 = 2707;
  *((void *)v18 + 1) = v17;
  *((void *)v18 + 66) = (char *)v18 + 16;
  *((void *)v18 + 67) = 512;
  *((void *)v18 + 68) = 0;
  *((void *)v18 + 70) = 0;
  *((void *)v18 + 69) = 0;
  IPC::Encoder::encodeHeader(v18);
  uint64_t v24 = v18;
  IPC::ArgumentCoder<WebCore::ContentFilterUnblockHandler,void>::encode(v18, (uint64_t)(v14 + 600));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v18, v14 + 612);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v18, v16);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v18, (uint64_t *)a2);
  IPC::ArgumentCoder<WebCore::SubstituteData,void>::encode(v18, (uint64_t)a3);
  (*(void (**)(uint64_t *, WTF::StringImpl **, void))(*v14 + 32))(v14, &v24, 0);
  uint64_t result = v24;
  uint64_t v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (WTF::StringImpl *)WTF::fastFree(v21, v22);
  }
  return result;
}

WTF::StringImpl *non-virtual thunk to'WebKit::NetworkResourceLoader::handleProvisionalLoadFailureFromContentFilter(WebKit::NetworkResourceLoader *this, const WTF::URL *a2, WebCore::SubstituteData *a3)
{
  return WebKit::NetworkResourceLoader::handleProvisionalLoadFailureFromContentFilter((WebKit::NetworkResourceLoader *)((char *)this - 48), a2, a3);
}

void WebKit::NetworkResourceLoader::useRedirectionForCurrentNavigation(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  long long v4 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 88);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x198BB01E4);
    }
    uint64_t v6 = *(void *)(a1 + 80);
    uint64_t v7 = *(void *)(a1 + 96);
    uint64_t v8 = *(void *)(a1 + 3048);
    BOOL v9 = *(unsigned __int8 *)(a1 + 315) == 1;
    int v10 = *(unsigned __int8 *)(a1 + 3088);
    BOOL v11 = *(void *)(a1 + 4168) != 0;
    int v30 = 134219776;
    uint64_t v31 = a1;
    __int16 v32 = 2048;
    uint64_t v33 = v6;
    __int16 v34 = 2048;
    uint64_t v35 = v5;
    __int16 v36 = 2048;
    uint64_t v37 = v7;
    __int16 v38 = 2048;
    uint64_t v39 = v8;
    __int16 v40 = 1024;
    BOOL v41 = v9;
    __int16 v42 = 1024;
    int v43 = v10;
    __int16 v44 = 1024;
    BOOL v45 = v11;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::useRedirectionForCurrentNavigation", (uint8_t *)&v30, 0x46u);
  }
  uint64_t v12 = WTF::fastMalloc((WTF *)0x100);
  WTF::URL::URL(v12, (uint64_t *)a2);
  uint64_t v15 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(v13 + 40) = v15;
  *(void *)(v13 + 48) = *(void *)(a2 + 48);
  uint64_t v16 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(v13 + 56) = v16;
  uint64_t v17 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(v13 + 64) = v17;
  uint64_t v18 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(void *)(v13 + 80) = 0;
  *(void *)(v13 + 88) = 0;
  *(void *)(v13 + 72) = v18;
  uint64_t v19 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  *(void *)(v13 + 80) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_DWORD *)(v13 + 88) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(v13 + 92) = v19;
  *(void *)(v13 + 96) = 0;
  *(void *)(v13 + 104) = 0;
  uint64_t v20 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  *(void *)(v13 + 96) = v20;
  LODWORD(v20) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(v13 + 104) = v20;
  LODWORD(v20) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(v13 + 108) = v20;
  uint64_t v21 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(void *)(v13 + 112) = v21;
  *(unsigned char *)(v13 + 120) = 0;
  *(unsigned char *)(v13 + 128) = 0;
  if (*(unsigned char *)(a2 + 128))
  {
    uint64_t v29 = *(void *)(a2 + 120);
    *(void *)(a2 + 120) = 0;
    *(void *)(v13 + 120) = v29;
    *(unsigned char *)(v13 + 128) = 1;
  }
  long long v22 = *(_OWORD *)(a2 + 136);
  long long v23 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v13 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v13 + 152) = v23;
  *(_OWORD *)(v13 + 136) = v22;
  long long v24 = *(_OWORD *)(a2 + 184);
  long long v25 = *(_OWORD *)(a2 + 200);
  long long v26 = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(v13 + 231) = *(_DWORD *)(a2 + 231);
  *(_OWORD *)(v13 + 216) = v26;
  *(_OWORD *)(v13 + 200) = v25;
  *(_OWORD *)(v13 + 184) = v24;
  uint64_t v27 = *(void *)(a2 + 240);
  *(void *)(a2 + 240) = 0;
  *(void *)(v13 + 240) = v27;
  *(unsigned char *)(v13 + 248) = *(unsigned char *)(a2 + 248);
  uint64_t v28 = *(WebCore::ResourceResponseBase **)(a1 + 4952);
  *(void *)(a1 + 4952) = v13;
  if (v28) {
    std::default_delete<WebCore::ResourceResponse>::operator()[abi:sn180100](v28, v14);
  }
}

uint64_t WebKit::NetworkSchemeRegistry::shouldTreatURLSchemeAsCORSEnabled(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2;
  uint64_t v7 = a3;
  if (!WTF::StringView::startsWith()) {
    return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::HashSetTranslatorAdapter<WTF::StringViewHashTranslator>,WTF::StringView>((uint64_t *)(a1 + 8), &v6);
  }
  if (v7 == 4) {
    return 1;
  }
  if (v7 != 5) {
    return 0;
  }
  if (BYTE4(v7)) {
    int v5 = *(unsigned __int8 *)(v6 + 4);
  }
  else {
    int v5 = *(unsigned __int16 *)(v6 + 8);
  }
  return v5 == 115;
}

void WebKit::NetworkSession::~NetworkSession(WebKit::NetworkSession *this)
{
  *(void *)this = &unk_1EE9C5EA8;
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v2 = &unk_1EE9C6518;
  __int16 v61 = v2;
  WebKit::NetworkSession::destroyResourceLoadStatistics((uint64_t)this, (uint64_t *)&v61);
  if (v61) {
    (*(void (**)(void *))(*v61 + 8))(v61);
  }
  long long v4 = (uint64_t *)*((void *)this + 63);
  *((void *)this + 63) = 0;
  if (v4)
  {
    uint64_t v5 = *((unsigned int *)v4 - 1);
    uint64_t v6 = (WebKit::NetworkResourceLoader **)&v4[v5];
    if (*((_DWORD *)v4 - 3))
    {
      uint64_t v7 = (WebKit::NetworkResourceLoader **)v4;
      if (v5)
      {
        uint64_t v8 = 8 * v5;
        uint64_t v7 = (WebKit::NetworkResourceLoader **)v4;
        while ((unint64_t)*v7 + 1 <= 1)
        {
          ++v7;
          v8 -= 8;
          if (!v8)
          {
            uint64_t v7 = v6;
            goto LABEL_10;
          }
        }
      }
      goto LABEL_10;
    }
    uint64_t v7 = (WebKit::NetworkResourceLoader **)&v4[v5];
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v6 = (WebKit::NetworkResourceLoader **)&v4[v5];
  if (!v4)
  {
    BOOL v9 = 0;
    goto LABEL_15;
  }
LABEL_10:
  BOOL v9 = (WebKit::NetworkResourceLoader **)&v4[*((unsigned int *)v4 - 1)];
LABEL_15:
  while (v7 != v9)
  {
    int v10 = v7 + 1;
    WebKit::NetworkResourceLoader::abort(*v7);
    uint64_t v7 = v6;
    if (v10 != v6)
    {
      uint64_t v7 = v10;
      while ((unint64_t)*v7 + 1 <= 1)
      {
        if (++v7 == v6)
        {
          uint64_t v7 = v6;
          break;
        }
      }
    }
  }
  if (v4) {
    WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::deallocateTable(v4, v3);
  }
  *((void *)this + 135) = &unk_1EE9C9498;
  uint64_t v11 = *((void *)this + 137);
  *((void *)this + 137) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *((void *)this + 135) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 136, v3);
  uint64_t v13 = *((void *)this + 134);
  if (v13) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v13, v12);
  }
  uint64_t v14 = (WTF::StringImpl *)*((void *)this + 132);
  *((void *)this + 132) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v12);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = *((void *)this + 131);
  *((void *)this + 131) = 0;
  if (v15) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v15 + 16), v12);
  }
  uint64_t v16 = (WTF *)*((void *)this + 103);
  if ((WebKit::NetworkSession *)((char *)this + 840) != v16 && v16)
  {
    *((void *)this + 103) = 0;
    *((_DWORD *)this + 208) = 0;
    WTF::fastFree(v16, v12);
  }
  uint64_t v17 = (WebKit::WebSharedWorkerServer *)*((void *)this + 100);
  *((void *)this + 100) = 0;
  if (v17) {
    WebKit::WebSharedWorkerServer::operator delete(v17, (WTF::StringImpl *)0x38);
  }
  uint64_t v18 = (_DWORD *)*((void *)this + 98);
  *((void *)this + 98) = 0;
  if (v18)
  {
    if (v18[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
    }
    else {
      --v18[2];
    }
  }
  uint64_t v19 = (_DWORD *)*((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v19) {
    WTF::RefCounted<WebCore::SWServer>::deref(v19);
  }
  if (*((unsigned char *)this + 768))
  {
    uint64_t v20 = (WTF::StringImpl *)*((void *)this + 94);
    *((void *)this + 94) = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v12);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
  }
  uint64_t v21 = *((void *)this + 93);
  if (v21)
  {
    uint64_t v22 = *(unsigned int *)(v21 - 4);
    if (v22)
    {
      long long v23 = (unsigned int **)(v21 + 8);
      do
      {
        if (*(v23 - 1) != (unsigned int *)-1)
        {
          long long v24 = *v23;
          *long long v23 = 0;
          if (v24)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v24, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v24);
              WTF::fastFree((WTF *)v24, v12);
            }
          }
        }
        v23 += 2;
        --v22;
      }
      while (v22);
    }
    WTF::fastFree((WTF *)(v21 - 16), v12);
  }
  uint64_t v25 = *((void *)this + 92);
  if (v25)
  {
    uint64_t v26 = *(unsigned int *)(v25 - 4);
    if (v26)
    {
      uint64_t v27 = (uint64_t *)*((void *)this + 92);
      do
      {
        uint64_t v28 = *v27;
        if (*v27 != -1)
        {
          uint64_t *v27 = 0;
          if (v28) {
            (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
          }
        }
        ++v27;
        --v26;
      }
      while (v26);
    }
    WTF::fastFree((WTF *)(v25 - 16), v12);
  }
  uint64_t v29 = (unsigned int **)*((void *)this + 89);
  *((void *)this + 89) = 0;
  if (!v29) {
    goto LABEL_90;
  }
  int v30 = v29[1];
  if (!v30) {
    goto LABEL_86;
  }
  uint64_t v31 = *(v30 - 1);
  if (!v31) {
    goto LABEL_85;
  }
  __int16 v32 = v30 + 8;
  while (1)
  {
    int v33 = *(v32 - 2);
    if (v33) {
      break;
    }
    if (*((void *)v32 - 4) != -1) {
      goto LABEL_74;
    }
LABEL_81:
    v32 += 18;
    if (!--v31) {
      goto LABEL_85;
    }
  }
  if (v33 == 1)
  {
LABEL_74:
    uint64_t v34 = *((void *)v32 + 4);
    if (v34) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v34, v12);
    }
    uint64_t v35 = v32[6];
    if (v35 != -1) {
      ((void (*)(char *, unsigned int *))off_1EE9C6158[v35])(&v62, v32);
    }
    v32[6] = -1;
    uint64_t v36 = *(v32 - 2);
    if (v36 != -1) {
      ((void (*)(char *, unsigned int *))off_1EE9C6158[v36])(&v63, v32 - 8);
    }
    *(v32 - 2) = -1;
    goto LABEL_81;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_85:
  WTF::fastFree((WTF *)(v30 - 4), v12);
LABEL_86:
  uint64_t v37 = *v29;
  _DWORD *v29 = 0;
  if (v37 && atomic_fetch_add((atomic_uint *volatile)v37 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v37 + 32);
    (*(void (**)(unsigned int *))(*(void *)v37 + 8))(v37);
  }
  WTF::fastFree((WTF *)v29, v12);
LABEL_90:
  MEMORY[0x199732F90]((char *)this + 632);
  std::unique_ptr<WebKit::NetworkLoadScheduler>::reset[abi:sn180100]((WebKit::NetworkLoadScheduler **)this + 78, 0);
  uint64_t v39 = (WebKit::NetworkCache::Cache *)*((void *)this + 77);
  *((void *)this + 77) = 0;
  if (v39) {
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v39, v38);
  }
  WebKit::PrefetchCache::~PrefetchCache((WebKit::NetworkSession *)((char *)this + 520));
  uint64_t v41 = *((void *)this + 64);
  if (v41)
  {
    uint64_t v42 = *(unsigned int *)(v41 - 4);
    if (v42)
    {
      int v43 = (WebCore::TimerBase **)(v41 + 8);
      do
      {
        if (*(v43 - 1) != (WebCore::TimerBase *)-1)
        {
          __int16 v40 = *v43;
          *int v43 = 0;
          if (v40) {
            std::default_delete<WebKit::NetworkSession::CachedNetworkResourceLoader>::operator()[abi:sn180100]((int)v43, v40);
          }
        }
        v43 += 2;
        --v42;
      }
      while (v42);
    }
    WTF::fastFree((WTF *)(v41 - 16), v40);
  }
  __int16 v44 = (uint64_t *)*((void *)this + 63);
  if (v44) {
    WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::deallocateTable(v44, v40);
  }
  if (*((unsigned char *)this + 488)) {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebKit::NetworkSession *)((char *)this + 176), v40);
  }
  uint64_t v45 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 136, v40);
  __int16 v47 = (WTF::StringImpl **)*((void *)this + 16);
  if (v47) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v47, v46);
  }
  int v48 = (WTF::StringImpl **)*((void *)this + 15);
  if (v48) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v48, v46);
  }
  __int16 v49 = (WTF::StringImpl **)*((void *)this + 14);
  if (v49) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v49, v46);
  }
  BOOL v50 = (WTF::StringImpl *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2) {
      WTF::StringImpl::destroy(v50, v46);
    }
    else {
      *(_DWORD *)v50 -= 2;
    }
  }
  __int16 v51 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2) {
      WTF::StringImpl::destroy(v51, v46);
    }
    else {
      *(_DWORD *)v51 -= 2;
    }
  }
  uint64_t v52 = (atomic_uchar **)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v52) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v52);
  }
  __int16 v53 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2) {
      WTF::StringImpl::destroy(v53, v46);
    }
    else {
      *(_DWORD *)v53 -= 2;
    }
  }
  uint64_t v54 = *((void *)this + 5);
  if (v54)
  {
    uint64_t v55 = *(unsigned int *)(v54 - 4);
    if (v55)
    {
      uint64_t v56 = (atomic_uchar **)(v54 + 8);
      do
      {
        if (*(v56 - 1) != (atomic_uchar *)-1)
        {
          __int16 v57 = *v56;
          WTF::StringImpl *v56 = 0;
          if (v57) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v57, v46);
          }
        }
        v56 += 2;
        --v55;
      }
      while (v55);
    }
    WTF::fastFree((WTF *)(v54 - 16), v46);
  }
  uint64_t v58 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v58 && atomic_fetch_add((atomic_uint *volatile)v58 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v58 + 32);
    (*(void (**)(unsigned int *))(*(void *)v58 + 8))(v58);
  }
  uint64_t v59 = *((void *)this + 1);
  if (v59)
  {
    *(void *)(v59 + 8) = 0;
    uint64_t v60 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v60)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v60, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v60);
        WTF::fastFree((WTF *)v60, v46);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

{
  _DWORD *v1;
  void *v2;
  uint64_t vars8;

  WebKit::NetworkSession::~NetworkSession(this);
  if (v1[4])
  {
    bzero(v1, 0x450uLL);
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

unsigned int *WebKit::NetworkSession::destroyResourceLoadStatistics(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(WTF::RunLoop **)(a1 + 72);
  if (v3)
  {
    uint64_t result = WebKit::WebResourceLoadStatisticsStore::didDestroyNetworkSession(v3, a2);
    uint64_t v5 = *(atomic_uchar ***)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    if (v5)
    {
      uint64_t v6 = *v5;
      return (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(v6);
    }
  }
  else
  {
    uint64_t v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return (unsigned int *)v8(v7);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkSession::invalidateAndCancel(WebKit::NetworkSession *this, void *a2)
{
  WTF::ThreadSafeWeakHashSet<WebKit::NetworkDataTask>::values((uint64_t)this + 40, a2, (uint64_t)&v14);
  if (v15)
  {
    long long v4 = v14;
    uint64_t v5 = 8 * v15;
    do
    {
      uint64_t v6 = *(void *)v4;
      long long v4 = (WTF::StringImpl *)((char *)v4 + 8);
      (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
      v5 -= 8;
    }
    while (v5);
  }
  WTF::Vector<WTF::Ref<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v3);
  uint64_t v8 = *((void *)this + 9);
  if (v8)
  {
    BOOL v9 = *(unsigned int **)(v8 + 16);
    *(void *)(v8 + 16) = 0;
    if (v9)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v7);
      }
    }
  }
  uint64_t result = (WTF::StringImpl *)*((void *)this + 77);
  if (result)
  {
    uint64_t v11 = (WTF::StringImpl *)*((void *)result + 10);
    if (v11) {
      *(_DWORD *)v11 += 2;
    }
    uint64_t v14 = v11;
    *((void *)this + 77) = 0;
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(result, (WTF::StringImpl *)v7);
    WTF::FileSystemImpl::markPurgeable((WTF::FileSystemImpl *)&v14, v12);
    uint64_t result = v14;
    uint64_t v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkSession::deleteAndRestrictWebsiteDataForRegistrableDomains(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 32);
  unsigned int v15 = *(void **)(a1 + 24);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v8 + 232), &v15))
  {
    uint64_t v9 = *(unsigned int *)(a3 + 60);
    if (v9)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = 8 * v9;
      do
      {
        uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v12 = &unk_1EE9C6630;
        unsigned int v15 = v12;
        WebCore::NetworkStorageSession::setAllCookiesToSameSiteStrict();
        uint64_t v13 = v15;
        unsigned int v15 = 0;
        if (v13) {
          (*(void (**)(void *))(*v13 + 8))(v13);
        }
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
    }
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a3 + 48, 0);
  return WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(*(void **)(a1 + 32), *(void *)(a1 + 24), a2, (unsigned int *)a3, a4);
}

uint64_t WebKit::NetworkSession::setFirstPartyHostCNAMEDomain(uint64_t result, WTF **a2, const WTF::StringImpl **a3)
{
  if (*a2)
  {
    if (*((_DWORD *)*a2 + 1))
    {
      uint64_t v4 = result;
      uint64_t result = (uint64_t)*a3;
      if (*a3)
      {
        if (*(_DWORD *)(result + 4))
        {
          uint64_t result = MEMORY[0x19972E990]();
          if ((result & 1) == 0)
          {
            uint64_t result = WTF::equal(*a2, *a3, v6);
            if ((result & 1) == 0) {
              return (uint64_t)WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::add<WebCore::RegistrableDomain>((uint64_t *)(v4 + 120), a2, (const WTF::StringImpl *)a3, (uint64_t)v7);
            }
          }
        }
      }
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::add<WebCore::RegistrableDomain>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v14 = v11 & v9;
    unsigned int v15 = (uint64_t *)(v8 + 16 * (v11 & v9));
    uint64_t v16 = (WTF *)*v15;
    if (*v15 != -1) {
      break;
    }
    uint64_t v12 = (uint64_t *)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      uint64_t *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      unsigned int v15 = v12;
    }
    WTF::String::operator=(v15, (uint64_t *)a2);
    uint64_t v19 = *(void *)a3;
    *(void *)a3 = 0;
    uint64_t result = (WTF::StringImpl **)v15[1];
    v15[1] = v19;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    uint64_t v24 = *a1;
    if (*a1) {
      int v25 = *(_DWORD *)(v24 - 12) + 1;
    }
    else {
      int v25 = 1;
    }
    *(_DWORD *)(v24 - 12) = v25;
    uint64_t v26 = *a1;
    if (*a1) {
      int v27 = *(_DWORD *)(v26 - 12);
    }
    else {
      int v27 = 0;
    }
    uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
    unint64_t v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 <= 2 * v28)
      {
LABEL_32:
        uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v15);
        unsigned int v15 = (uint64_t *)result;
        uint64_t v26 = *a1;
        if (*a1) {
          unint64_t v29 = *(unsigned int *)(v26 - 4);
        }
        else {
          unint64_t v29 = 0;
        }
      }
    }
    else if (3 * v29 <= 4 * v28)
    {
      goto LABEL_32;
    }
    uint64_t v23 = v26 + 16 * v29;
    char v22 = 1;
    goto LABEL_35;
  }
  uint64_t result = (WTF::StringImpl **)WTF::equal(v16, *a2, a3);
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v20 = *a1;
  if (*a1) {
    uint64_t v21 = *(unsigned int *)(v20 - 4);
  }
  else {
    uint64_t v21 = 0;
  }
  char v22 = 0;
  uint64_t v23 = v20 + 16 * v21;
LABEL_35:
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v23;
  *(unsigned char *)(a4 + 16) = v22;
  return result;
}

WTF *WebKit::NetworkSession::firstPartyHostCNAMEDomain@<X0>(WTF *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, unsigned char *a4@<X8>)
{
  if ((unint64_t)*a2 + 1 <= 1) {
    goto LABEL_2;
  }
  uint64_t v6 = this;
  this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 15, a2, a3);
  uint64_t v7 = (WTF *)*((void *)v6 + 15);
  if (v7) {
    uint64_t v7 = (WTF *)((char *)v7 + 16 * *((unsigned int *)v7 - 1));
  }
  if (v7 == this)
  {
LABEL_2:
    char v5 = 0;
    *a4 = 0;
  }
  else
  {
    uint64_t v8 = (_DWORD *)*((void *)this + 1);
    if (v8) {
      *v8 += 2;
    }
    *(void *)a4 = v8;
    char v5 = 1;
  }
  a4[8] = v5;
  return this;
}

WTF::StringImpl *WebKit::NetworkSession::resetFirstPartyDNSData(WebKit::NetworkSession *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl **)*((void *)this + 15);
  if (v3)
  {
    *((void *)this + 15) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (WTF::StringImpl **)*((void *)this + 16);
  if (v4)
  {
    *((void *)this + 16) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }

  return std::__optional_destruct_base<WebCore::RegistrableDomain,false>::reset[abi:sn180100]((WebKit::NetworkSession *)((char *)this + 136), a2);
}

double WebKit::NetworkSession::setFirstPartyHostIPAddress(WebKit::NetworkSession *this, const WTF::String *a2, const WTF::String *a3)
{
  if (*(void *)a2 && *(_DWORD *)(*(void *)a2 + 4) && *(void *)a3 && *(_DWORD *)(*(void *)a3 + 4))
  {
    WebCore::IPAddress::fromString((uint64_t *)&v7, a3, a2);
    if (v8) {
      *(void *)&double result = WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::IPAddress>((uint64_t)&v6, (uint64_t *)this + 16, (WTF::StringImpl **)a2, &v7).n128_u64[0];
    }
  }
  return result;
}

uint64_t WebKit::NetworkSession::firstPartyHostIPAddress@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  if (!*a2 || !*((_DWORD *)*a2 + 1)) {
    goto LABEL_8;
  }
  uint64_t v5 = this;
  this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(this + 128), a2, a3);
  uint64_t v6 = *(void *)(v5 + 128);
  if (v6) {
    v6 += 32 * *(unsigned int *)(v6 - 4);
  }
  if (v6 != this)
  {
    *(_OWORD *)a4 = *(_OWORD *)(this + 8);
    *(_DWORD *)(a4 + 16) = *(_DWORD *)(this + 24);
    char v7 = 1;
  }
  else
  {
LABEL_8:
    char v7 = 0;
    *(unsigned char *)a4 = 0;
  }
  *(unsigned char *)(a4 + 20) = v7;
  return this;
}

uint64_t WebKit::NetworkSession::storePrivateClickMeasurement(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 496))
  {
    *(unsigned char *)(a2 + 32) = 1;
LABEL_4:
    uint64_t v3 = a1 + 176;
    return std::optional<WebCore::PrivateClickMeasurement>::operator=[abi:sn180100]<WebCore::PrivateClickMeasurement,void>(v3, a2);
  }
  if (*(unsigned char *)(a2 + 32)) {
    goto LABEL_4;
  }
  if (*(unsigned char *)(a2 + 48))
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)a1 + 184);
    return v5();
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 160);
    char v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    *char v7 = &unk_1EE9C6658;
    uint64_t v8 = (uint64_t)v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v6 + 16))(v6, a2, &v8);
    uint64_t result = v8;
    uint64_t v8 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t std::optional<WebCore::PrivateClickMeasurement>::operator=[abi:sn180100]<WebCore::PrivateClickMeasurement,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 312))
  {
    WebCore::PrivateClickMeasurement::operator=(a1, a2);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement*>(a1, a2);
    *(unsigned char *)(a1 + 312) = 1;
  }
  return a1;
}

void *WebKit::NetworkSession::handlePrivateClickMeasurementConversion(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::ResourceRequest const&,WebCore::PCM::AttributionTriggerData &&::String &&)::$_0::~$_0(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[29];
  a1[29] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[24];
  a1[24] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[23];
  a1[23] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)a1[18];
  a1[18] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 14), a2);
  std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 9), v7);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 7), v8);
  std::optional<WebCore::PublicSuffix>::~optional((uint64_t)(a1 + 5), v9);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 3), v10);
  uint64_t v12 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, v11);
  }
  return a1;
}

void WebKit::NetworkSession::clearPrivateClickMeasurement(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 160) + 32))(*(void *)(a1 + 160));
  if (*(unsigned char *)(a1 + 488))
  {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 176), v2);
    *(unsigned char *)(a1 + 488) = 0;
  }
  *(unsigned char *)(a1 + 496) = 0;
}

WTF::StringImpl *WebKit::NetworkSession::setPrivateClickMeasurementAppBundleIDForTesting(WebCore *a1, uint64_t a2)
{
  WebCore::applicationBundleIdentifier((uint64_t *)&v14, a1);
  uint64_t isRunningTest = WebKit::isRunningTest((WebKit *)&v14, v4);
  if ((isRunningTest & 1) == 0)
  {
    if (v14 && *((_DWORD *)v14 + 1))
    {
      WTF::String::utf8();
      WTFLogAlways();
      uint64_t isRunningTest = (uint64_t)v13;
      uint64_t v13 = 0;
      if (isRunningTest)
      {
        if (*(_DWORD *)isRunningTest == 1) {
          uint64_t isRunningTest = WTF::fastFree((WTF *)isRunningTest, v6);
        }
        else {
          --*(_DWORD *)isRunningTest;
        }
      }
    }
    else
    {
      uint64_t isRunningTest = WTFLogAlways();
    }
  }
  WebCore::applicationBundleIdentifier((uint64_t *)&v13, (WebCore *)isRunningTest);
  char v9 = WebKit::isRunningTest((WebKit *)&v13, v7);
  unsigned int v10 = v13;
  uint64_t v13 = 0;
  if (!v10)
  {
LABEL_12:
    if (v9) {
      goto LABEL_13;
    }
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x198BB154CLL);
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_12;
  }
  WTF::StringImpl::destroy(v10, v8);
  if ((v9 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_13:
  (*(void (**)(void *, uint64_t))(**((void **)a1 + 20) + 136))(*((void **)a1 + 20), a2);
  uint64_t result = v14;
  unsigned int v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *WebKit::NetworkSession::removeKeptAliveLoad(WebKit::NetworkSession *this, WebKit::NetworkResourceLoader *a2)
{
  uint64_t v3 = (uint64_t *)((char *)this + 504);
  char v7 = a2;
  uint64_t result = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WebKit::NetworkResourceLoader const*>((uint64_t *)this + 63, &v7);
  uint64_t v5 = *((void *)this + 63);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v5 + 8 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (v6 != result) {
    return WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::remove(v3, (WTF::StringImpl *)result);
  }
  return result;
}

void WebKit::NetworkSession::CachedNetworkResourceLoader::expirationTimerFired(WebKit::NetworkSession::CachedNetworkResourceLoader *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 7) + 3872);
  uint64_t v3 = *(void *)(v2 + 80);
  uint64_t v6 = *(void *)(v2 + 88);
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v3 + 224), &v6);
  if (v4)
  {
    uint64_t v5 = *(void *)(*((void *)this + 7) + 4416);
    WebKit::NetworkSession::removeLoaderWaitingWebProcessTransfer(v4, v5);
  }
}

void WebKit::NetworkSession::removeLoaderWaitingWebProcessTransfer(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v2 = (uint64_t *)(a1 + 512);
  uint64_t v3 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 512), &v8);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::take(v2, v3, &v7);
  if (v7)
  {
    uint64_t v4 = (WebKit::NetworkResourceLoader *)*((void *)v7 + 7);
    *((void *)v7 + 7) = 0;
    WebKit::NetworkResourceLoader::abort(v4);
    if (v4) {
      WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v4 + 2, v5);
    }
    uint64_t v6 = v7;
    char v7 = 0;
    if (v6) {
      std::default_delete<WebKit::NetworkSession::CachedNetworkResourceLoader>::operator()[abi:sn180100]((int)&v7, v6);
    }
  }
}

void WebKit::NetworkSession::takeLoaderAwaitingWebProcessTransfer(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = (uint64_t *)(a1 + 512);
  uint64_t v5 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 512), &v9);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::take(v4, v5, &v8);
  uint64_t v6 = v8;
  if (v8)
  {
    uint64_t v7 = *((void *)v8 + 7);
    *((void *)v8 + 7) = 0;
    uint64_t v8 = 0;
    std::default_delete<WebKit::NetworkSession::CachedNetworkResourceLoader>::operator()[abi:sn180100]((int)&v8, v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a3 = v7;
}

void WebKit::NetworkSession::createWebSocketTask(void *a1@<X8>)
{
  *a1 = 0;
}

atomic_uchar *WTF::ThreadSafeWeakHashSet<WebKit::NetworkDataTask>::add<WebKit::NetworkDataTask,(void *)0>(uint64_t a1, uint64_t a2)
{
  if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(*(atomic_uchar **)(a2 + 8)))
  {
    __break(0xC471u);
    JUMPOUT(0x198BB1A44);
  }
  char v4 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 16), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 16);
  }
  uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakRef(*(atomic_uchar **)(a2 + 8));
  if (!result) {
    goto LABEL_17;
  }
  uint64_t v7 = result;
  unsigned int v8 = *(_DWORD *)(a1 + 12);
  unsigned int v9 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v9;
  uint64_t v10 = *(void *)a1;
  if (v9 > v8)
  {
    if (v10)
    {
      int v27 = *(_DWORD *)(v10 - 4);
      if (!v27) {
        goto LABEL_43;
      }
      int v28 = 0;
      unsigned int v29 = v27 - 1;
      do
      {
        uint64_t v30 = v29;
        uint64_t v31 = (void *)(v10 + 16 * v29);
        if ((unint64_t)(*v31 + 1) >= 2)
        {
          uint64_t v32 = v10 + 16 * v29;
          uint64_t v34 = *(atomic_uchar **)(v32 + 8);
          int v33 = (atomic_uchar **)(v32 + 8);
          if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v34))
          {
            void *v31 = -1;
            uint64_t v35 = *v33;
            *int v33 = 0;
            if (v35) {
              WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v35, v6);
            }
            ++v28;
          }
        }
        --v29;
      }
      while (v30);
      uint64_t v10 = *(void *)a1;
      if (v28)
      {
        *(_DWORD *)(v10 - 16) += v28;
        uint64_t v40 = *(void *)a1;
        if (*(void *)a1) {
          int v41 = *(_DWORD *)(v40 - 12);
        }
        else {
          int v41 = 0;
        }
        *(_DWORD *)(v40 - 12) = v41 - v28;
        uint64_t v10 = *(void *)a1;
      }
      if (v10)
      {
        unsigned int v36 = *(_DWORD *)(v10 - 4);
        if (v36 >= 9 && 6 * *(_DWORD *)(v10 - 12) < v36)
        {
          WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v10 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v10)
          {
            unsigned int v38 = 0;
            goto LABEL_45;
          }
LABEL_44:
          unsigned int v38 = *(_DWORD *)(v10 - 12);
          int v39 = 0x7FFFFFFF;
          if (v38 >= 0x7FFFFFFF)
          {
LABEL_46:
            *(_DWORD *)(a1 + 12) = 2 * v39;
            goto LABEL_6;
          }
LABEL_45:
          int v39 = v38;
          goto LABEL_46;
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = 0;
        goto LABEL_44;
      }
    }
    uint64_t v10 = 0;
    unsigned int v38 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_45;
  }
LABEL_6:
  if (v10
    || (WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::expand((uint64_t *)a1),
        (uint64_t v10 = *(void *)a1) != 0))
  {
    int v11 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    int v11 = 0;
  }
  unint64_t v12 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v11 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (void *)(v10 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    int v25 = 0;
    int v26 = 1;
    do
    {
      if (v17 == a2)
      {
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v7, v6);
        goto LABEL_17;
      }
      if (v17 == -1) {
        int v25 = v16;
      }
      unsigned int v15 = (v15 + v26) & v11;
      uint64_t v16 = (void *)(v10 + 16 * v15);
      uint64_t v17 = *v16;
      ++v26;
    }
    while (*v16);
    if (v25)
    {
      *int v25 = 0;
      v25[1] = 0;
      --*(_DWORD *)(*(void *)a1 - 16);
      uint64_t v16 = v25;
    }
  }
  uint64_t result = (atomic_uchar *)v16[1];
  void *v16 = a2;
  v16[1] = v7;
  if (result) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v6);
  }
  uint64_t v18 = *(void *)a1;
  if (*(void *)a1) {
    int v19 = *(_DWORD *)(v18 - 12) + 1;
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(v18 - 12) = v19;
  uint64_t v20 = *(void *)a1;
  if (*(void *)a1) {
    int v21 = *(_DWORD *)(v20 - 12);
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
  unint64_t v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22) {
      goto LABEL_17;
    }
  }
  else if (3 * v23 > 4 * v22)
  {
    goto LABEL_17;
  }
  uint64_t result = (atomic_uchar *)WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::expand((uint64_t *)a1);
LABEL_17:
  int v24 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 16), (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
  if (v24 != 1)
  {
    return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 16));
  }
  return result;
}

uint64_t WTF::ThreadSafeWeakHashSet<WebKit::NetworkDataTask>::remove<WebKit::NetworkDataTask,(void *)0>(uint64_t a1, void *a2)
{
  char v4 = 0;
  uint64_t v5 = (atomic_uchar *)(a1 + 16);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 16), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 16);
  }
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)a1;
  if (v7 > v6)
  {
    if (v8)
    {
      int v29 = *(_DWORD *)(v8 - 4);
      if (!v29) {
        goto LABEL_45;
      }
      int v30 = 0;
      unsigned int v31 = v29 - 1;
      do
      {
        uint64_t v32 = v31;
        int v33 = (void *)(v8 + 16 * v31);
        if ((unint64_t)(*v33 + 1) >= 2)
        {
          uint64_t v34 = v8 + 16 * v31;
          unsigned int v36 = *(atomic_uchar **)(v34 + 8);
          uint64_t v35 = (atomic_uchar **)(v34 + 8);
          if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v36))
          {
            *int v33 = -1;
            uint64_t v37 = *v35;
            atomic_uchar *v35 = 0;
            if (v37) {
              WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v37, a2);
            }
            ++v30;
          }
        }
        --v31;
      }
      while (v32);
      uint64_t v8 = *(void *)a1;
      if (v30)
      {
        *(_DWORD *)(v8 - 16) += v30;
        uint64_t v42 = *(void *)a1;
        if (*(void *)a1) {
          int v43 = *(_DWORD *)(v42 - 12);
        }
        else {
          int v43 = 0;
        }
        *(_DWORD *)(v42 - 12) = v43 - v30;
        uint64_t v8 = *(void *)a1;
      }
      if (v8)
      {
        unsigned int v38 = *(_DWORD *)(v8 - 4);
        if (v38 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v38)
        {
          WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v8 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v8)
          {
            unsigned int v40 = 0;
            goto LABEL_47;
          }
LABEL_46:
          unsigned int v40 = *(_DWORD *)(v8 - 12);
          int v41 = 0x7FFFFFFF;
          if (v40 >= 0x7FFFFFFF)
          {
LABEL_48:
            *(_DWORD *)(a1 + 12) = 2 * v41;
            goto LABEL_4;
          }
LABEL_47:
          int v41 = v40;
          goto LABEL_48;
        }
LABEL_45:
        *(_DWORD *)(a1 + 8) = 0;
        goto LABEL_46;
      }
    }
    uint64_t v8 = 0;
    unsigned int v40 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_47;
  }
LABEL_4:
  if (!v8) {
    goto LABEL_21;
  }
  unsigned int v9 = *(_DWORD *)(v8 - 8);
  unint64_t v10 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  uint64_t v13 = v9 & ((v12 >> 31) ^ v12);
  unint64_t v14 = *(void **)(v8 + 16 * v13);
  if (v14 != a2)
  {
    int v28 = 1;
    while (v14)
    {
      uint64_t v13 = (v13 + v28) & v9;
      unint64_t v14 = *(void **)(v8 + 16 * v13);
      ++v28;
      if (v14 == a2) {
        goto LABEL_6;
      }
    }
    uint64_t v13 = *(unsigned int *)(v8 - 4);
  }
LABEL_6:
  if (v13 != *(_DWORD *)(v8 - 4))
  {
    unsigned int v15 = (void *)(v8 + 16 * v13);
    uint64_t v17 = (atomic_uchar **)(v15 + 1);
    uint64_t v16 = (atomic_uchar *)v15[1];
    if (v16)
    {
      BOOL HasStartedDeletion = WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v16);
      uint64_t v8 = *(void *)a1;
      if (!*(void *)a1)
      {
        int v19 = 0;
        goto LABEL_10;
      }
    }
    else
    {
      BOOL HasStartedDeletion = 0;
    }
    int v19 = (void *)(v8 + 16 * *(unsigned int *)(v8 - 4));
    if (v19 == v15)
    {
      uint64_t v8 = 0;
      goto LABEL_19;
    }
LABEL_10:
    if (v19 == v15) {
      goto LABEL_55;
    }
    *unsigned int v15 = -1;
    uint64_t v20 = *v17;
    *uint64_t v17 = 0;
    if (v20) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v20, a2);
    }
    ++*(_DWORD *)(*(void *)a1 - 16);
    uint64_t v21 = *(void *)a1;
    int v22 = *(void *)a1 ? *(_DWORD *)(v21 - 12) - 1 : -1;
    *(_DWORD *)(v21 - 12) = v22;
    uint64_t v23 = *(void *)a1;
    if (!*(void *)a1)
    {
LABEL_55:
      uint64_t v8 = 1;
    }
    else
    {
      unsigned int v24 = 6 * *(_DWORD *)(v23 - 12);
      unsigned int v25 = *(_DWORD *)(v23 - 4);
      uint64_t v8 = 1;
      if (v24 < v25 && v25 >= 9) {
        WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::rehash((uint64_t *)a1, v25 >> 1);
      }
    }
LABEL_19:
    if (!HasStartedDeletion) {
      goto LABEL_21;
    }
  }
  uint64_t v8 = 0;
LABEL_21:
  int v26 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
  if (v26 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return v8;
}

WebKit::NetworkLoadScheduler *WebKit::NetworkSession::networkLoadScheduler(WebKit::NetworkSession *this)
{
  uint64_t result = (WebKit::NetworkLoadScheduler *)*((void *)this + 78);
  if (!result)
  {
    uint64_t v3 = (WebKit::NetworkLoadScheduler **)((char *)this + 624);
    char v4 = (WebKit::NetworkLoadScheduler *)WTF::fastMalloc((WTF *)0x20);
    WebKit::NetworkLoadScheduler::NetworkLoadScheduler(v4);
    std::unique_ptr<WebKit::NetworkLoadScheduler>::reset[abi:sn180100](v3, v4);
    return *v3;
  }
  return result;
}

IPC::Encoder *WebKit::NetworkSession::reportNetworkIssue(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 40);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 345;
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v11 = v5;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, &v10);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a3);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  unint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::NetworkSession::lowMemoryHandler(void *a1)
{
  WebKit::PrefetchCache::clear((WebKit::PrefetchCache *)(a1 + 65));
  uint64_t v2 = (WebCore::SWServer *)a1[97];
  if (v2) {
    WebCore::SWServer::handleLowMemoryWarning(v2);
  }
  uint64_t v3 = (atomic_uchar *volatile *)a1[131];

  return WebKit::NetworkStorageManager::handleLowMemoryWarning(v3);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::ServiceWorkerFetchTask&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = *(unsigned int *)(v8 - 4);
        }
        char v29 = 0;
        uint64_t v30 = v8 + 16 * v24;
        goto LABEL_30;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  uint64_t v21 = *(atomic_uint **)(a3 + 8);
  atomic_fetch_add(v21, 1u);
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v21;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
  }
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v25 = *v6;
  if (*v6) {
    int v26 = *(_DWORD *)(v25 - 12);
  }
  else {
    int v26 = 0;
  }
  uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
  unint64_t v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_23:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v25 = *v6;
      if (*v6) {
        unint64_t v28 = *(unsigned int *)(v25 - 4);
      }
      else {
        unint64_t v28 = 0;
      }
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_23;
  }
  uint64_t v30 = v25 + 16 * v28;
  char v29 = 1;
LABEL_30:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v30;
  *(unsigned char *)(a4 + 16) = v29;
  return result;
}

uint64_t *WebKit::NetworkSession::removeNavigationPreloaderTask(WebKit::NetworkSession *this, WebKit::ServiceWorkerFetchTask *a2)
{
  uint64_t v3 = (uint64_t *)((char *)this + 744);
  uint64_t v7 = *((void *)a2 + 5);
  uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 93, &v7);
  uint64_t v5 = *((void *)this + 93);
  if (v5)
  {
    unsigned int v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    unsigned int v6 = 0;
  }
  if (v6 != result) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(v3, result);
  }
  return result;
}

unsigned int **WebKit::NetworkSession::unregisterSWServerConnection(unsigned int **this, WebKit::WebSWServerConnection *a2)
{
  uint64_t v2 = this[97];
  if (v2)
  {
    this = (unsigned int **)*((void *)v2 + 17);
    if (this) {
      return WebKit::WebSWOriginStore::unregisterSWServerConnection(this, a2);
    }
  }
  return this;
}

uint64_t WebKit::NetworkSession::requestBackgroundFetchPermission(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v4 = *(os_unfair_lock_s **)(v3 + 40);
  v6[0] = &v7;
  v6[1] = a2;
  return IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::RequestBackgroundFetchPermission,WTF::CompletionHandler<void ()(BOOL)>>(v4, (uint64_t)v6, a3, 0, 0);
}

void *WebKit::NetworkSession::softUpdate(uint64_t a1, uint64_t a2, char a3, const String *a4, uint64_t *a5)
{
  int v10 = (uint64_t *)(a1 + 736);
  uint64_t v11 = WTF::fastMalloc((WTF *)0x1B0);
  uint64_t result = (void *)WebKit::ServiceWorkerSoftUpdateLoader::ServiceWorkerSoftUpdateLoader(v11, a1, a2, a3, a4, a5);
  uint64_t v13 = *(void *)(a1 + 736);
  if (v13
    || (result = WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::expand(v10, 0), (uint64_t v13 = *v10) != 0))
  {
    int v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    int v14 = 0;
  }
  unint64_t v15 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  unsigned int v18 = v14 & ((v17 >> 31) ^ v17);
  int v19 = (uint64_t *)(v13 + 8 * v18);
  uint64_t v20 = *v19;
  if (*v19)
  {
    uint64_t v21 = 0;
    int v22 = 1;
    while (v20 != v11)
    {
      if (v20 == -1) {
        uint64_t v21 = v19;
      }
      unsigned int v18 = (v18 + v22) & v14;
      int v19 = (uint64_t *)(v13 + 8 * v18);
      uint64_t v20 = *v19;
      ++v22;
      if (!*v19)
      {
        if (v21)
        {
          *uint64_t v21 = 0;
          --*(_DWORD *)(*v10 - 16);
          int v19 = v21;
        }
        goto LABEL_12;
      }
    }
    uint64_t v25 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);
    return (void *)v25(v11);
  }
  else
  {
LABEL_12:
    *int v19 = v11;
    uint64_t v23 = *v10;
    if (*v10) {
      int v24 = *(_DWORD *)(v23 - 12) + 1;
    }
    else {
      int v24 = 1;
    }
    *(_DWORD *)(v23 - 12) = v24;
    uint64_t v26 = *v10;
    if (*v10) {
      int v27 = *(_DWORD *)(v26 - 12);
    }
    else {
      int v27 = 0;
    }
    uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
    unint64_t v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28) {
        return result;
      }
    }
    else if (3 * v29 > 4 * v28)
    {
      return result;
    }
    return WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::expand(v10, v19);
  }
}

IPC::Encoder *WebKit::NetworkSession::createContextConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  v21[0] = a3;
  v21[1] = a4;
  unsigned int v6 = *(os_unfair_lock_s **)(*(void *)(a1 + 32) + 40);
  v16[0] = 1;
  uint64_t v17 = a2;
  unsigned int v18 = v21;
  uint64_t v19 = a5;
  uint64_t v20 = a1 + 24;
  uint64_t v7 = *a6;
  *a6 = 0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v8 = &unk_1EE9C66D0;
  v8[1] = v7;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v10 = 329;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v23 = v10;
  IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&,PAL::SessionID const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&,PAL::SessionID const&>,0ul,1ul,2ul,3ul,4ul>(v10, (uint64_t)v16);
  v22[0] = (uint64_t)v8;
  v22[1] = v9;
  IPC::Connection::sendMessageWithAsyncReply(v6, &v23, v22, 0, 0);
  uint64_t v12 = v22[0];
  v22[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t result = v23;
  uint64_t v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkSession::appBoundDomains(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)(a1 + 32) + 40);
  uint64_t v3 = (uint64_t *)(a1 + 24);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v5 = &unk_1EE9C66F8;
  v5[1] = v4;
  uint64_t v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 330;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  int v14 = v7;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, v3);
  v13[0] = (uint64_t)v5;
  v13[1] = v6;
  IPC::Connection::sendMessageWithAsyncReply(v2, &v14, v13, 0, 0);
  uint64_t v9 = v13[0];
  v13[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t result = v14;
  int v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t WebKit::NetworkSession::addAllowedFirstPartyForCookies(uint64_t a1, uint64_t a2, uint64_t a3, char a4, WTF::ASCIICaseInsensitiveHash **a5)
{
  if (!a4
    || a3 == a2
    || (uint64_t result = WebKit::NetworkProcess::allowsFirstPartyForCookies(*(void *)(a1 + 32), a3, a5), result == 1))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v10 = &unk_1EE9C6720;
    uint64_t v11 = v10;
    WebKit::NetworkProcess::addAllowedFirstPartyForCookies(v9, a2, a5, 0, (uint64_t *)&v11);
    uint64_t result = (uint64_t)v11;
    uint64_t v11 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::NetworkSession::createBackgroundFetchRecordLoader@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = (String *)WTF::fastMalloc((WTF *)0x110);
  uint64_t result = WebKit::BackgroundFetchLoad::BackgroundFetchLoad(v13, v12, *(StringImpl **)(a1 + 24), a2, a3, a4, a5);
  *a6 = result;
  return result;
}

uint64_t WebKit::NetworkSession::createBackgroundFetchStore@<X0>(WebKit::NetworkSession *this@<X0>, void *a2@<X8>)
{
  uint64_t result = WebKit::NetworkSession::ensureBackgroundFetchStore(this);
  ++*(_DWORD *)(result + 8);
  *a2 = result;
  return result;
}

uint64_t WebKit::NetworkSession::ensureBackgroundFetchStore(WebKit::NetworkSession *this)
{
  uint64_t result = *((void *)this + 98);
  if (!result)
  {
    uint64_t v3 = *((void *)this + 131);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v3 + 8), v3);
    uint64_t v4 = *(atomic_uint **)(v3 + 8);
    if (v4) {
      atomic_fetch_add(v4, 1u);
    }
    uint64_t v5 = WebKit::NetworkSession::ensureSWServer(this);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 8), v5);
    uint64_t v6 = *(atomic_uint **)(v5 + 8);
    if (v6) {
      atomic_fetch_add(v6, 1u);
    }
    uint64_t result = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(result + 8) = 1;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v4;
    *(void *)uint64_t result = &unk_1EE9CADF8;
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = v6;
    uint64_t v7 = (_DWORD *)*((void *)this + 98);
    *((void *)this + 98) = result;
    if (v7)
    {
      if (v7[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
        return *((void *)this + 98);
      }
      else
      {
        --v7[2];
      }
    }
  }
  return result;
}

WTF::StringImpl **WebKit::NetworkSession::setPersistedDomains(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v6 = (uint64_t *)(a1 + 112);
  uint64_t v5 = *(WTF::StringImpl ***)(a1 + 112);
  *uint64_t v6 = v4;
  if (v5) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  }
  uint64_t result = *(WTF::StringImpl ***)(a1 + 72);
  if (result)
  {
    return WebKit::WebResourceLoadStatisticsStore::setPersistedDomains(result, v6, a3);
  }
  return result;
}

uint64_t WebKit::NetworkSocketChannel::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, long long *a7@<X6>, uint64_t **a8@<X8>)
{
  uint64_t v10 = *(void *)(a1 + 80);
  atomic_fetch_add((atomic_uint *volatile)(v10 + 128), 1u);
  *(void *)&long long v21 = a2;
  uint64_t v11 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v10 + 224), &v21);
  uint64_t v12 = (uint64_t *)WTF::fastMalloc((WTF *)0xA8);
  long long v21 = *a7;
  uint64_t v22 = *((void *)a7 + 2);
  uint64_t result = WebKit::NetworkSocketChannel::NetworkSocketChannel((uint64_t)v12, a1, v11, a3, a4, a5, a6);
  if (v10 && atomic_fetch_add((atomic_uint *volatile)(v10 + 128), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v10 + 128));
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (v12[7])
  {
    *a8 = v12;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::NetworkSocketChannel::didClose(v12, 0, (const WTF::String *)&v21);
    unint64_t v15 = (WTF::StringImpl *)v21;
    *(void *)&long long v21 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    *a8 = 0;
    return (*(uint64_t (**)(uint64_t *))(*v12 + 8))(v12);
  }
  return result;
}

uint64_t *WebKit::NetworkSocketChannel::didClose(uint64_t *this, WTF::StringImpl *a2, const WTF::String *a3)
{
  __int16 v4 = (__int16)a2;
  uint64_t v5 = this;
  if ((this[13] & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((this[13] & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t *))(*this + 56))(this);
    uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v7 = 2840;
    *((void *)v7 + 1) = v6;
    *((void *)v7 + 66) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    int v14 = v7;
    IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v7, v4);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a3);
    (*(void (**)(uint64_t *, IPC::Encoder **, void))(*v5 + 32))(v5, &v14, 0);
    uint64_t v9 = v14;
    int v14 = 0;
    if (v9)
    {
      IPC::Encoder::~Encoder(v9, v8);
      WTF::fastFree(v10, v11);
    }
    return WebKit::NetworkSocketChannel::finishClosingIfPossible(v5);
  }
  else
  {
    uint64_t v12 = *(_DWORD **)a3;
    if (*(void *)a3) {
      *v12 += 2;
    }
    int v13 = *((unsigned __int8 *)this + 152);
    *((_WORD *)this + 68) = (_WORD)a2;
    if (v13)
    {
      this = (uint64_t *)this[18];
      v5[18] = (uint64_t)v12;
      if (this)
      {
        if (*(_DWORD *)this == 2)
        {
          return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        }
        else
        {
          *(_DWORD *)this -= 2;
        }
      }
    }
    else
    {
      this[18] = (uint64_t)v12;
      *((unsigned char *)this + 152) = 1;
    }
  }
  return this;
}

uint64_t WebKit::NetworkSocketChannel::NetworkSocketChannel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE9C5FD0;
  *(void *)(a1 + 8) = &unk_1EE9C6028;
  *(void *)(a1 + 16) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 56), a2 + 48);
  uint64_t v12 = *(atomic_uint **)(a2 + 56);
  atomic_fetch_add(v12, 1u);
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = a6;
  if (a3)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
    int v13 = *(atomic_uint **)(a3 + 8);
    if (v13) {
      atomic_fetch_add(v13, 1u);
    }
  }
  else
  {
    int v13 = 0;
  }
  *(void *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(a1 + 72));
  *(void *)(a1 + 72) = &unk_1EE9BA5F0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x20);
  *int v14 = &unk_1EE9C6748;
  v14[1] = WebKit::NetworkSocketChannel::sendDelayedError;
  uint64_t v14[2] = 0;
  v14[3] = a1;
  *(void *)(a1 + 120) = v14;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = a7;
  uint64_t v15 = *(void *)(a1 + 48);
  if (v15)
  {
    uint64_t v16 = *(void *)(v15 + 8);
    if (v16)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v16 + 192))(&v21);
      uint64_t v17 = v21;
      uint64_t v21 = 0;
      uint64_t v18 = *(void *)(a1 + 56);
      *(void *)(a1 + 56) = v17;
      if (v18)
      {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        uint64_t v19 = v21;
        uint64_t v21 = 0;
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
        }
        uint64_t v17 = *(void *)(a1 + 56);
      }
      if (v17)
      {
        (*(void (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 48) + 8) + 208))(*(void *)(*(void *)(a1 + 48) + 8), a7);
        [*(id *)(*(void *)(a1 + 56) + 56) resume];
      }
    }
  }
  return a1;
}

IPC::Encoder *WebKit::NetworkSocketChannel::sendDelayedError(WebKit::NetworkSocketChannel *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 128);
  uint64_t v3 = (*(uint64_t (**)(WebKit::NetworkSocketChannel *))(*(void *)this + 56))(this);
  __int16 v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v4 = 2844;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v15 = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, v2);
  (*(void (**)(WebKit::NetworkSocketChannel *, IPC::Encoder **, void))(*(void *)this + 32))(this, &v15, 0);
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  if (*((unsigned char *)this + 152))
  {
    uint64_t v7 = (*(uint64_t (**)(WebKit::NetworkSocketChannel *))(*(void *)this + 56))(this);
    uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v8 = 2840;
    *((void *)v8 + 1) = v7;
    *((void *)v8 + 66) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 68) = 0;
    *((void *)v8 + 70) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    uint64_t v15 = v8;
    IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v8, *((_WORD *)this + 68));
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, (uint64_t *)this + 18);
    (*(void (**)(WebKit::NetworkSocketChannel *, IPC::Encoder **, void))(*(void *)this + 32))(this, &v15, 0);
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10)
    {
      IPC::Encoder::~Encoder(v10, v9);
      WTF::fastFree(v13, v14);
    }
    return (IPC::Encoder *)WebKit::NetworkSocketChannel::finishClosingIfPossible((uint64_t *)this);
  }
  return result;
}

void WebKit::NetworkSocketChannel::~NetworkSocketChannel(WebKit::NetworkSocketChannel *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C5FD0;
  *((void *)this + 1) = &unk_1EE9C6028;
  uint64_t v3 = *((void *)this + 7);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 6);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        uint64_t v6 = *(void *)(v3 + 120);
        if (v6)
        {
          uint64_t v7 = *(WebKit::SessionSet **)(v6 + 8);
          if (v7)
          {
            ++*(_DWORD *)v7;
            (*(void (**)(uint64_t, WebKit::SessionSet *))(*(void *)v5 + 200))(v5, v7);
            WTF::RefCounted<WebKit::SessionSet>::deref(v7, v8);
            uint64_t v3 = *((void *)this + 7);
          }
        }
      }
    }
    [*(id *)(v3 + 56) cancel];
  }
  if (*((unsigned char *)this + 152))
  {
    uint64_t v9 = (WTF::StringImpl *)*((void *)this + 18);
    *((void *)this + 18) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, a2);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  *((void *)this + 9) = &unk_1EE9BA5F0;
  uint64_t v11 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  WebCore::TimerBase::~TimerBase((WebKit::NetworkSocketChannel *)((char *)this + 72));
  uint64_t v13 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  int v14 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v14 && atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, v12);
  }
  uint64_t v15 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v15 && atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, v12);
  }
  *((void *)this + 1) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v12);
}

void non-virtual thunk to'WebKit::NetworkSocketChannel::~NetworkSocketChannel(WebKit::NetworkSocketChannel *this, WTF::StringImpl *a2)
{
}

{
  WebKit::NetworkSocketChannel::operator delete((WebKit::NetworkSocketChannel *)((char *)this - 8), a2);
}

double WebKit::NetworkSocketChannel::operator delete(WebKit::NetworkSocketChannel *a1, WTF::StringImpl *a2)
{
  WebKit::NetworkSocketChannel::~NetworkSocketChannel(a1, a2);
  if (*(_DWORD *)(v2 + 24))
  {
    *(void *)(v2 + 160) = 0;
    double result = 0.0;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
  return result;
}

void WebKit::NetworkSocketChannel::sendString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
}

void WebKit::NetworkSocketChannel::sendData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
}

uint64_t *WebKit::NetworkSocketChannel::finishClosingIfPossible(uint64_t *this)
{
  if (*((_DWORD *)this + 16))
  {
    *((_DWORD *)this + 16) = 2;
    uint64_t v1 = *(void *)(this[4] + 8);
    if (v1) {
      uint64_t v2 = v1 - 48;
    }
    else {
      uint64_t v2 = 0;
    }
    ++*(_DWORD *)(v2 + 8);
    this = WebKit::NetworkConnectionToWebProcess::removeSocketChannel(v2, this[5]);
    if (v1)
    {
      if (*(_DWORD *)(v2 + 8) == 1)
      {
        uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)(v1 - 48) + 8);
        return (uint64_t *)v3(v1 - 48);
      }
      else
      {
        --*(_DWORD *)(v2 + 8);
      }
    }
  }
  else
  {
    *((_DWORD *)this + 16) = 1;
  }
  return this;
}

uint64_t *WebKit::NetworkSocketChannel::close(WebKit::WebSocketTask **this, int a2, const WTF::String *a3)
{
  WebKit::WebSocketTask::close(this[7], a2, a3);

  return WebKit::NetworkSocketChannel::finishClosingIfPossible((uint64_t *)this);
}

IPC::Encoder *WebKit::NetworkSocketChannel::didConnect(WebKit::NetworkSocketChannel *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v6 = (*(uint64_t (**)(WebKit::NetworkSocketChannel *))(*(void *)this + 56))(this);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2841;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a3);
  (*(void (**)(WebKit::NetworkSocketChannel *, IPC::Encoder **, void))(*(void *)this + 32))(this, &v12, 0);
  double result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkSocketChannel::didReceiveText(WebKit::NetworkSocketChannel *this, const WTF::String *a2)
{
  uint64_t v4 = (*(uint64_t (**)(WebKit::NetworkSocketChannel *))(*(void *)this + 56))(this);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2845;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
  (*(void (**)(WebKit::NetworkSocketChannel *, IPC::Encoder **, void))(*(void *)this + 32))(this, &v10, 0);
  double result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkSocketChannel::didReceiveBinaryData(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2842;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v7, a2, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v12, 0);
  double result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::NetworkSocketChannel::didReceiveMessageError(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = WTF::String::operator=((uint64_t *)(a1 + 128), a2);
  WTF::cryptographicallyRandomUnitInterval((WTF *)v2);

  return WebCore::TimerBase::start();
}

IPC::Encoder *WebKit::NetworkSocketChannel::didSendHandshakeRequest(uint64_t a1, WebCore::ResourceRequest *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2846;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v5, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v10, 0);
  double result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkSocketChannel::didReceiveHandshakeResponse(uint64_t a1, WebCore::ResourceResponseBase *a2)
{
  WebCore::ResourceResponseBase::sanitizeHTTPHeaderFields();
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2843;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v5, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v10, 0);
  double result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::NetworkSocketChannel::messageSenderConnection(WebKit::NetworkSocketChannel *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 4) + 8);
  if (v1) {
    uint64_t v2 = v1 - 48;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(void *)(v2 + 72);
}

WTF::StringImpl *WebKit::PingLoad::timeoutTimerFired(WebKit::PingLoad *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - PingLoad::timeoutTimerFired", buf, 0xCu);
  }
  uint64_t v3 = *((void *)this + 487);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v4 = *(WTF::StringImpl **)buf;
  int v14 = 0;
  uint64_t v5 = *(WTF::StringImpl **)(v3 + 160);
  if (v5) {
    *(_DWORD *)v5 += 2;
  }
  uint64_t v15 = v5;
  long long v6 = *(_OWORD *)(v3 + 184);
  long long v16 = *(_OWORD *)(v3 + 168);
  long long v17 = v6;
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  uint64_t v18 = v4;
  int v19 = 0;
  __int16 v20 = 4;
  CFTypeRef v21 = 0;
  char v22 = 1;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  CFTypeRef cf = 0;
  char v26 = 0;
  char v24 = v24 & 0xF1 | 4;
  WebKit::PingLoad::didFinish(this, (const WebCore::ResourceError *)&v14, (const WebCore::ResourceResponse *)buf);
  CFTypeRef v8 = cf;
  CFTypeRef cf = 0;
  if (v8) {
    CFRelease(v8);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v7);
  CFTypeRef v10 = v21;
  CFTypeRef v21 = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = v18;
  uint64_t v18 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = v15;
  uint64_t v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v9);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  double result = v14;
  int v14 = 0;
  if (!result)
  {
LABEL_22:
    if (!v4) {
      return result;
    }
    goto LABEL_25;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_22;
  }
  double result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
  if (!v4) {
    return result;
  }
LABEL_25:
  if (*(_DWORD *)v4 == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v9);
  }
  *(_DWORD *)v4 -= 2;
  return result;
}

uint64_t WebKit::PingLoad::PingLoad(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v7 = (unsigned int *)(a1 + 8);
  *(void *)a1 = &unk_1EE9C6060;
  *(void *)(a1 + 16) = a2[11];
  CFTypeRef v8 = (uint64_t *)(a1 + 32);
  WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters(a1 + 32, a3);
  uint64_t v9 = *a4;
  *a4 = 0;
  *(void *)(a1 + 3824) = v9;
  *(void *)(a1 + 3832) = 0;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(a1 + 3840));
  *(void *)(a1 + 3840) = &unk_1EE9BA5F0;
  CFTypeRef v10 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v10 = &unk_1EE9C6770;
  v10[1] = WebKit::PingLoad::timeoutTimerFired;
  v10[2] = 0;
  v10[3] = a1;
  *(void *)(a1 + 3888) = v10;
  uint64_t v11 = a2[10];
  uint64_t v12 = (_DWORD *)a2[36];
  LODWORD(v51) = *(_DWORD *)(a1 + 3040);
  *(_DWORD *)((char *)&v51 + 3) = *(_DWORD *)(a1 + 3043);
  uint64_t v13 = *(WTF::StringImpl **)(a1 + 3048);
  if (v13) {
    *(_DWORD *)v13 += 2;
  }
  uint64_t v52 = v13;
  long long v14 = *(_OWORD *)(a1 + 3072);
  long long v53 = *(_OWORD *)(a1 + 3056);
  long long v54 = v14;
  uint64_t v15 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 120));
  long long v16 = *(WTF::StringImpl **)v15;
  if (*(void *)v15) {
    *(_DWORD *)v16 += 2;
  }
  int v48 = v16;
  long long v17 = *(_OWORD *)(v15 + 24);
  long long v49 = *(_OWORD *)(v15 + 8);
  long long v50 = v17;
  uint64_t v18 = *(WTF::StringImpl **)(a1 + 3344);
  if (v18) {
    *(_DWORD *)v18 += 2;
  }
  uint64_t v45 = v18;
  long long v46 = *(_OWORD *)(a1 + 3352);
  long long v47 = *(_OWORD *)(a1 + 3368);
  int v19 = *(atomic_uint **)(a1 + 72);
  if (v19) {
    atomic_fetch_add(v19, 1u);
  }
  __int16 v44 = (WTF *)v19;
  __int16 v20 = *(atomic_uint **)(a1 + 64);
  if (v20) {
    atomic_fetch_add(v20, 1u);
  }
  int v43 = (WTF *)v20;
  if (*(_DWORD *)(a1 + 3300))
  {
    CFTypeRef v21 = **(atomic_uint ***)(a1 + 3288);
    atomic_fetch_add(v21, 1u);
  }
  else
  {
    CFTypeRef v21 = 0;
  }
  uint64_t v42 = (WTF *)v21;
  WebCore::ResourceRequestBase::httpReferrer((uint64_t *)&v41, (WebCore::ResourceRequestBase *)(a1 + 120));
  uint64_t v22 = WTF::fastMalloc((WTF *)0x490);
  *(void *)(a1 + 3896) = WebKit::NetworkLoadChecker::NetworkLoadChecker(v22, v11, 0, v12, (int *)&v51, *(void *)(a1 + 16), *(void *)(a1 + 32), (uint64_t *)(a1 + 3248), (uint64_t *)&v48, (uint64_t *)&v45, (uint64_t *)&v44, (uint64_t *)&v43, (uint64_t *)&v42, *(unsigned char *)(a1 + 3281), (uint64_t *)&v41, *(unsigned char *)(a1 + 2995), v40, *(_WORD *)(a1 + 2996), 0,
                             0,
                             1);
  char v24 = v41;
  int v41 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (v42) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v42, v23);
  }
  if (v43) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v43, v23);
  }
  if (v44) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v44, v23);
  }
  uint64_t v25 = v45;
  uint64_t v45 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v23);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  char v26 = v48;
  int v48 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v23);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  if (v52)
  {
    if (*(_DWORD *)v52 == 2) {
      WTF::StringImpl::destroy(v52, v23);
    }
    else {
      *(_DWORD *)v52 -= 2;
    }
  }
  WebKit::NetworkConnectionToWebProcess::resolveBlobReferences(a2, v8, a1 + 3904);
  uint64_t v27 = *(unsigned int *)(a1 + 3916);
  if (v27)
  {
    uint64_t v28 = *(void **)(a1 + 3904);
    uint64_t v29 = 8 * v27;
    do
    {
      if (*v28) {
        (*(void (**)(void))(*(void *)*v28 + 16))(*v28);
      }
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  uint64_t v30 = (atomic_uint *)a2[10];
  atomic_fetch_add(v30 + 32, 1u);
  unsigned int v31 = *(WebKit::NetworkLoadChecker **)(a1 + 3896);
  *((unsigned char *)v31 + 528) = 1;
  if (*(unsigned char *)(a1 + 3112))
  {
    std::optional<WebCore::ContentSecurityPolicyResponseHeaders>::operator=[abi:sn180100]<WebCore::ContentSecurityPolicyResponseHeaders,void>((uint64_t)v31 + 264, a1 + 3088);
    unsigned int v31 = *(WebKit::NetworkLoadChecker **)(a1 + 3896);
  }
  WebKit::NetworkLoadChecker::setParentCrossOriginEmbedderPolicy(v31, (WTF::StringImpl **)(a1 + 3200));
  WebKit::NetworkLoadChecker::setCrossOriginEmbedderPolicy(*(WebKit::NetworkLoadChecker **)(a1 + 3896), (WTF::StringImpl **)(a1 + 3224));
  uint64_t v32 = *(void *)(a1 + 3896);
  uint64_t v33 = *(void *)(a1 + 3800);
  uint64_t v34 = *(void *)(a1 + 3808);
  WTF::URL::operator=(v32 + 344, a1 + 3760);
  WTF::URL::operator=(v32 + 384, a1 + 3160);
  *(void *)(v32 + 424) = v33;
  *(unsigned char *)(v32 + 432) = v34;
  WebCore::TimerBase::start();
  uint64_t v35 = *(void *)(a1 + 3896);
  WebCore::ResourceRequest::ResourceRequest(&v51, (const String *)(a1 + 120));
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v7, a1);
  unsigned int v36 = *(atomic_uint **)(a1 + 8);
  if (v36) {
    atomic_fetch_add(v36, 1u);
  }
  atomic_fetch_add(v30 + 32, 1u);
  uint64_t v37 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v37 = &unk_1EE9C6798;
  *((void *)v37 + 1) = a1;
  *((void *)v37 + 2) = v36;
  *((void *)v37 + 3) = v30;
  int v48 = v37;
  WebKit::NetworkLoadChecker::check(v35, (WebCore::ResourceRequestBase *)&v51, 0, &v48);
  if (v48) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v48 + 8))(v48);
  }
  CFTypeRef v38 = cf;
  CFTypeRef cf = 0;
  if (v38) {
    CFRelease(v38);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v51);
  if (atomic_fetch_add(v30 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v30 + 32);
    (*(void (**)(atomic_uint *))(*(void *)v30 + 8))(v30);
  }
  return a1;
}

void WebKit::PingLoad::~PingLoad(WebKit::PingLoad *this, void *a2)
{
  uint64_t v3 = *((void *)this + 479);
  if (v3)
  {
    uint64_t v4 = *(unsigned int **)(v3 + 24);
    *(void *)(v3 + 24) = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
    (*(void (**)(void))(**((void **)this + 479) + 16))(*((void *)this + 479));
  }
  uint64_t v5 = *((unsigned int *)this + 979);
  if (v5)
  {
    long long v6 = (void *)*((void *)this + 488);
    uint64_t v7 = 8 * v5;
    do
    {
      if (*v6) {
        (*(void (**)(void))(*(void *)*v6 + 24))(*v6);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 3904, a2);
  std::unique_ptr<WebKit::NetworkLoadChecker>::reset[abi:sn180100]((WebKit::NetworkLoadChecker **)this + 487, 0);
  *((void *)this + 480) = &unk_1EE9BA5F0;
  uint64_t v8 = *((void *)this + 486);
  *((void *)this + 486) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  WebCore::TimerBase::~TimerBase((WebKit::PingLoad *)((char *)this + 3840));
  uint64_t v10 = *((void *)this + 479);
  *((void *)this + 479) = 0;
  if (v10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v10 + 8));
  }
  uint64_t v11 = *((void *)this + 478);
  *((void *)this + 478) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::PingLoad *)((char *)this + 32), v9);
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v12);
}

{
  uint64_t vars8;

  WebKit::PingLoad::~PingLoad(this, a2);

  JUMPOUT(0x199740C10);
}

void WebKit::PingLoad::didFinish(WebKit::PingLoad *this, const WebCore::ResourceError *a2, const WebCore::ResourceResponse *a3)
{
  uint64_t v4 = *((void *)this + 478);
  *((void *)this + 478) = 0;
  (*(void (**)(uint64_t, const WebCore::ResourceError *, const WebCore::ResourceResponse *))(*(void *)v4 + 16))(v4, a2, a3);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  WebKit::PingLoad::~PingLoad(this, v5);

  JUMPOUT(0x199740C10);
}

void WebKit::PingLoad::willPerformHTTPRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 3896);
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)v14);
  uint64_t v9 = *a4;
  *a4 = 0;
  uint64_t v10 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v10 = &unk_1EE9C67C0;
  *((void *)v10 + 1) = a1;
  *((void *)v10 + 2) = v9;
  uint64_t v13 = v10;
  WebKit::NetworkLoadChecker::checkRedirection(v8, (uint64_t)v14, a3, a2, 0, &v13);
  uint64_t v11 = v13;
  uint64_t v13 = 0;
  if (v11) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v11 + 8))(v11);
  }
  CFTypeRef v12 = cf;
  CFTypeRef cf = 0;
  if (v12) {
    CFRelease(v12);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v14);
}

WTF::StringImpl *WebKit::PingLoad::didReceiveChallenge(uint64_t a1, WebCore::AuthenticationChallengeBase *a2, char a3, uint64_t *a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = a1;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - PingLoad::didReceiveChallenge", (uint8_t *)&buf, 0xCu);
  }
  if (*(unsigned char *)(WebCore::AuthenticationChallengeBase::protectionSpace(a2) + 21) == 8)
  {
    uint64_t v9 = (uint64_t *)(*(void *)(*(void *)(a1 + 3896) + 80) + 208);
    *(void *)&long long buf = "AuthenticationManager";
    *((void *)&buf + 1) = 22;
    uint64_t v10 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v9, (WTF::ASCIILiteralHash *)&buf);
    uint64_t v11 = *(void *)(a1 + 64);
    if (v11) {
      uint64_t v12 = v11 + 8;
    }
    else {
      uint64_t v12 = 0;
    }
    return (WTF::StringImpl *)WebKit::AuthenticationManager::didReceiveAuthenticationChallenge((uint64_t)v10, *(void *)(a1 + 16), *(void *)(a1 + 32), v12, a2, a3, a4);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v14 = *(void *)(a1 + 8);
  if (v14) {
    atomic_fetch_add((atomic_uint *volatile)v14, 1u);
  }
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&buf);
  CFTypeRef v38 = 0;
  uint64_t v15 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v15 + 16))(v15, 2, &buf);
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  CFTypeRef v17 = v38;
  CFTypeRef v38 = 0;
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = (WTF::StringImpl *)*((void *)&buf + 1);
  *((void *)&buf + 1) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v16);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  double result = (WTF::StringImpl *)buf;
  *(void *)&long long buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      double result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
      if (!v14) {
        return result;
      }
      goto LABEL_22;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v14) {
    return result;
  }
LABEL_22:
  if (!*(void *)(v14 + 8)) {
    goto LABEL_48;
  }
  uint64_t v19 = *(void *)(a1 + 3896);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  __int16 v20 = (WTF::StringImpl *)buf;
  uint64_t v28 = 0;
  CFTypeRef v21 = *(WTF::StringImpl **)(v19 + 160);
  if (v21) {
    *(_DWORD *)v21 += 2;
  }
  uint64_t v29 = v21;
  long long v22 = *(_OWORD *)(v19 + 184);
  long long v30 = *(_OWORD *)(v19 + 168);
  long long v31 = v22;
  if (v20) {
    *(_DWORD *)v20 += 2;
  }
  uint64_t v32 = v20;
  int v33 = 0;
  __int16 v34 = 2;
  CFTypeRef v35 = 0;
  char v36 = 1;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&buf);
  CFTypeRef cf = 0;
  char v41 = 0;
  char v39 = v39 & 0xF1 | 4;
  WebKit::PingLoad::didFinish((WebKit::PingLoad *)a1, (const WebCore::ResourceError *)&v28, (const WebCore::ResourceResponse *)&buf);
  CFTypeRef v24 = cf;
  CFTypeRef cf = 0;
  if (v24) {
    CFRelease(v24);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&buf, v23);
  CFTypeRef v25 = v35;
  CFTypeRef v35 = 0;
  if (v25) {
    CFRelease(v25);
  }
  char v26 = v32;
  uint64_t v32 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v16);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  uint64_t v27 = v29;
  uint64_t v29 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v16);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  double result = v28;
  uint64_t v28 = 0;
  if (!result)
  {
LABEL_42:
    if (!v20) {
      goto LABEL_48;
    }
    goto LABEL_45;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_42;
  }
  double result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
  if (!v20) {
    goto LABEL_48;
  }
LABEL_45:
  if (*(_DWORD *)v20 == 2) {
    double result = (WTF::StringImpl *)WTF::StringImpl::destroy(v20, v16);
  }
  else {
    *(_DWORD *)v20 -= 2;
  }
LABEL_48:
  if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v14);
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v14, v16);
  }
  return result;
}

WTF::StringImpl *WebKit::PingLoad::didReceiveResponse(unsigned int *a1, WebCore::ResourceResponseBase *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long v16 = 134218240;
    *(void *)&void v16[4] = a1;
    *(_WORD *)&v16[12] = 1024;
    *(_DWORD *)&v16[14] = WebCore::ResourceResponseBase::httpStatusCode(a2);
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - PingLoad::didReceiveResponse - httpStatusCode=%d", v16, 0x12u);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1 + 2, (uint64_t)a1);
  uint64_t v9 = *((void *)a1 + 1);
  if (v9) {
    atomic_fetch_add((atomic_uint *volatile)v9, 1u);
  }
  uint64_t v10 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, 2);
  double result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
  if (v9)
  {
    if (*(void *)(v9 + 8))
    {
      *(void *)long long v16 = 0;
      *(void *)&char v16[8] = 0;
      WTF::URL::invalidate((WTF::URL *)&v16[8]);
      CFTypeRef cf = 0;
      v17[0] = 0;
      *(void *)((char *)v17 + 6) = 0;
      char v19 = 1;
      WebKit::PingLoad::didFinish((WebKit::PingLoad *)a1, (const WebCore::ResourceError *)v16, a2);
      CFTypeRef v13 = cf;
      CFTypeRef cf = 0;
      if (v13) {
        CFRelease(v13);
      }
      uint64_t v14 = (WTF::StringImpl *)v17[0];
      v17[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      uint64_t v15 = *(WTF::StringImpl **)&v16[8];
      *(void *)&char v16[8] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v12);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      double result = *(WTF::StringImpl **)v16;
      *(void *)long long v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          double result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v9);
      return (WTF::StringImpl *)WTF::fastFree((WTF *)v9, v12);
    }
  }
  return result;
}

void WebKit::PingLoad::didReceiveData(WebKit::PingLoad *this, const WebCore::SharedBuffer *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 134217984;
    uint64_t v5 = this;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - PingLoad::didReceiveData", (uint8_t *)&v4, 0xCu);
  }
}

void WebKit::PingLoad::didCompleteWithError(WebKit::PingLoad *this, const WebCore::ResourceError *a2, const WebCore::NetworkLoadMetrics *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v5 = *((unsigned __int8 *)a2 + 60);
  uint64_t v6 = off_1EB358988;
  BOOL v7 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (!v7) {
      goto LABEL_7;
    }
    MEMORY[0x19973EC60](a2);
    int v8 = *((_DWORD *)a2 + 14);
    int v14 = 134218240;
    uint64_t v15 = this;
    __int16 v16 = 1024;
    int v17 = v8;
    uint64_t v9 = "%p - PingLoad::didCompleteWithError, error_code=%d";
    uint64_t v10 = v6;
    uint32_t v11 = 18;
  }
  else
  {
    if (!v7) {
      goto LABEL_7;
    }
    int v14 = 134217984;
    uint64_t v15 = this;
    uint64_t v9 = "%p - PingLoad::didComplete";
    uint64_t v10 = v6;
    uint32_t v11 = 12;
  }
  _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v14, v11);
LABEL_7:
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v14);
  CFTypeRef cf = 0;
  char v20 = 0;
  char v18 = v18 & 0xF1 | 4;
  WebKit::PingLoad::didFinish(this, a2, (const WebCore::ResourceResponse *)&v14);
  CFTypeRef v13 = cf;
  CFTypeRef cf = 0;
  if (v13) {
    CFRelease(v13);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v14, v12);
}

void WebKit::PingLoad::wasBlocked(WebKit::PingLoad *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    char v18 = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - PingLoad::wasBlocked", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v11, (const String *)(*((void *)this + 487) + 160), 0);
  CFTypeRef v12 = 0;
  WebKit::blockedError((WebKit *)v11, (uint64_t)&v13);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  CFTypeRef cf = 0;
  char v21 = 0;
  char v19 = v19 & 0xF1 | 4;
  WebKit::PingLoad::didFinish(this, (const WebCore::ResourceError *)&v13, (const WebCore::ResourceResponse *)buf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v3);
  CFTypeRef v6 = v16;
  CFTypeRef v16 = 0;
  if (v6) {
    CFRelease(v6);
  }
  BOOL v7 = v15;
  uint64_t v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  int v8 = v14;
  int v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v13;
  CFTypeRef v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v5);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  CFTypeRef v10 = v12;
  CFTypeRef v12 = 0;
  if (v10) {
    CFRelease(v10);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v11);
}

void WebKit::PingLoad::cannotShowURL(WebKit::PingLoad *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    char v18 = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - PingLoad::cannotShowURL", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v11, (const String *)(*((void *)this + 487) + 160), 0);
  CFTypeRef v12 = 0;
  WebKit::cannotShowURLError((WebKit *)v11, (uint64_t)&v13);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  CFTypeRef cf = 0;
  char v21 = 0;
  char v19 = v19 & 0xF1 | 4;
  WebKit::PingLoad::didFinish(this, (const WebCore::ResourceError *)&v13, (const WebCore::ResourceResponse *)buf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v3);
  CFTypeRef v6 = v16;
  CFTypeRef v16 = 0;
  if (v6) {
    CFRelease(v6);
  }
  BOOL v7 = v15;
  uint64_t v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  int v8 = v14;
  int v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v13;
  CFTypeRef v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v5);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  CFTypeRef v10 = v12;
  CFTypeRef v12 = 0;
  if (v10) {
    CFRelease(v10);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v11);
}

void WebKit::PingLoad::wasBlockedByRestrictions(WebKit::PingLoad *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    char v18 = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - PingLoad::wasBlockedByRestrictions", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v11, (const String *)(*((void *)this + 487) + 160), 0);
  CFTypeRef v12 = 0;
  WebKit::wasBlockedByRestrictionsError((WebKit *)v11, (uint64_t)&v13);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  CFTypeRef cf = 0;
  char v21 = 0;
  char v19 = v19 & 0xF1 | 4;
  WebKit::PingLoad::didFinish(this, (const WebCore::ResourceError *)&v13, (const WebCore::ResourceResponse *)buf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v3);
  CFTypeRef v6 = v16;
  CFTypeRef v16 = 0;
  if (v6) {
    CFRelease(v6);
  }
  BOOL v7 = v15;
  uint64_t v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  int v8 = v14;
  int v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v13;
  CFTypeRef v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v5);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  CFTypeRef v10 = v12;
  CFTypeRef v12 = 0;
  if (v10) {
    CFRelease(v10);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v11);
}

void WebKit::PingLoad::wasBlockedByDisabledFTP(WebKit::PingLoad *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    char v18 = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - PingLoad::wasBlockedByDisabledFTP", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v11, (const String *)(*((void *)this + 487) + 160), 0);
  CFTypeRef v12 = 0;
  WebKit::ftpDisabledError((WebKit *)v11, (uint64_t)&v13);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  CFTypeRef cf = 0;
  char v21 = 0;
  char v19 = v19 & 0xF1 | 4;
  WebKit::PingLoad::didFinish(this, (const WebCore::ResourceError *)&v13, (const WebCore::ResourceResponse *)buf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v3);
  CFTypeRef v6 = v16;
  CFTypeRef v16 = 0;
  if (v6) {
    CFRelease(v6);
  }
  BOOL v7 = v15;
  uint64_t v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  int v8 = v14;
  int v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v13;
  CFTypeRef v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v5);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  CFTypeRef v10 = v12;
  CFTypeRef v12 = 0;
  if (v10) {
    CFRelease(v10);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v11);
}

void *WebKit::PreconnectTask::PreconnectTask(void *a1, WebKit::NetworkSession *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1EE9C60E8;
  a1[1] = 0;
  BOOL v7 = (WebKit::NetworkLoad **)(a1 + 1);
  uint64_t v8 = *a4;
  *a4 = 0;
  a1[2] = v8;
  a1[3] = 0x404E000000000000;
  uint64_t v9 = (WebCore::TimerBase *)(a1 + 4);
  CFTypeRef v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v10 = &unk_1EE9C67E8;
  v10[1] = a1;
  WebCore::TimerBase::TimerBase(v9);
  a1[4] = &unk_1EE9BA5F0;
  a1[10] = v10;
  uint32_t v11 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 134217984;
    uint64_t v15 = a1;
    _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%p - PreconnectTask::PreconnectTask()", (uint8_t *)&v14, 0xCu);
  }
  CFTypeRef v12 = (WebKit::NetworkLoad *)WTF::fastMalloc((WTF *)0xCA0);
  WebKit::NetworkLoad::NetworkLoad((uint64_t)v12, (uint64_t)a1, a3, a2);
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100](v7, v12);
  return a1;
}

uint64_t WebKit::PreconnectTask::setTimeout(uint64_t result, double a2)
{
  *(double *)(result + 24) = a2;
  return result;
}

uint64_t WebKit::PreconnectTask::start(WebKit::PreconnectTask *this)
{
  WebCore::TimerBase::start();
  uint64_t v2 = (WebKit::NetworkLoad *)*((void *)this + 1);

  return WebKit::NetworkLoad::start(v2);
}

void WebKit::PreconnectTask::~PreconnectTask(WebKit::PreconnectTask *this)
{
  WebCore::Timer::~Timer((WebKit::PreconnectTask *)((char *)this + 32));
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)this + 1, 0);
}

{
  uint64_t vars8;

  WebKit::PreconnectTask::~PreconnectTask(this);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::PreconnectTask::willSendRedirectedRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, a3);
  CFTypeRef v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

uint64_t WebKit::PreconnectTask::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void WebKit::PreconnectTask::didFinishLoading(WebKit::PreconnectTask *this, const WebCore::NetworkLoadMetrics *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v6[0]) = 134217984;
    *(void *)((char *)v6 + 4) = this;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - PreconnectTask::didFinishLoading", (uint8_t *)v6, 0xCu);
  }
  v6[0] = 0uLL;
  WTF::URL::invalidate((WTF::URL *)((char *)v6 + 8));
  v7[2] = 0;
  v7[0] = 0;
  *(void *)((char *)v7 + 6) = 0;
  char v8 = 1;
  WebKit::PreconnectTask::didFinish(this, (const WebCore::ResourceError *)v6, a2);
  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v6, v5);
}

void WebKit::PreconnectTask::didFinish(WebKit::PreconnectTask *this, const WebCore::ResourceError *a2, const WebCore::NetworkLoadMetrics *a3)
{
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    *((void *)this + 2) = 0;
    (*(void (**)(uint64_t, const WebCore::ResourceError *, const WebCore::NetworkLoadMetrics *))(*(void *)v4 + 16))(v4, a2, a3);
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  WebKit::PreconnectTask::~PreconnectTask(this);

  JUMPOUT(0x199740C10);
}

void WebKit::PreconnectTask::didFailLoading(WebKit::PreconnectTask *this, const WebCore::ResourceError *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = off_1EB358988;
  BOOL v5 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    MEMORY[0x19973EC60](a2);
    int v6 = *((_DWORD *)a2 + 14);
    int v8 = 134218240;
    uint64_t v9 = this;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - PreconnectTask::didFailLoading, error_code=%d", (uint8_t *)&v8, 0x12u);
  }
  BOOL v7 = (const WebCore::NetworkLoadMetrics *)WebCore::NetworkLoadMetrics::emptyMetrics((WebCore::NetworkLoadMetrics *)v5);
  WebKit::PreconnectTask::didFinish(this, a2, v7);
}

uint64_t WebKit::NetworkResourceLoader::isAllowedToAskUserForCredentials(WebKit::NetworkResourceLoader *this)
{
  return *((unsigned __int8 *)this + 4194);
}

uint64_t WebKit::NetworkResourceLoader::ref(uint64_t this)
{
  return this;
}

_DWORD *WebKit::NetworkResourceLoader::deref(WebKit::NetworkResourceLoader *this, WTF::StringImpl *a2)
{
  return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)this + 2, a2);
}

uint64_t *WebKit::NetworkResourceLoader::httpUserAgent@<X0>(WebKit::NetworkResourceLoader *this@<X0>, uint64_t *a2@<X8>)
{
  return WebCore::ResourceRequestBase::httpUserAgent(a2, (WebKit::NetworkResourceLoader *)((char *)this + 168));
}

uint64_t non-virtual thunk to'WebKit::NetworkResourceLoader::messageSenderDestinationID(WebKit::NetworkResourceLoader *this)
{
  return *((void *)this + 379);
}

uint64_t non-virtual thunk to'WebKit::NetworkResourceLoader::ref(uint64_t this)
{
  return this;
}

_DWORD *non-virtual thunk to'WebKit::NetworkResourceLoader::deref(WebKit::NetworkResourceLoader *this, WTF::StringImpl *a2)
{
  return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)this - 10, a2);
}

uint64_t *non-virtual thunk to'WebKit::NetworkResourceLoader::httpUserAgent@<X0>(WebKit::NetworkResourceLoader *this@<X0>, uint64_t *a2@<X8>)
{
  return WebCore::ResourceRequestBase::httpUserAgent(a2, (WebKit::NetworkResourceLoader *)((char *)this + 104));
}

uint64_t WebKit::NetworkSession::shouldLogCookieInformation(WebKit::NetworkSession *this)
{
  return 0;
}

void WebKit::NetworkSession::hostNamesWithAlternativeServices(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void WebKit::NetworkSession::originsWithCredentials(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::NetworkSession::hasIsolatedSession()
{
  return 0;
}

uint64_t WebKit::NetworkSession::hasAppBoundSession(WebKit::NetworkSession *this)
{
  return 0;
}

uint64_t WebKit::NetworkSession::removeNetworkWebsiteData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  int v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

uint64_t WebKit::NetworkSession::countNonDefaultSessionSets(WebKit::NetworkSession *this)
{
  return 0;
}

uint64_t WebKit::NetworkSocketChannel::messageSenderDestinationID(WebKit::NetworkSocketChannel *this)
{
  return *((void *)this + 5);
}

uint64_t WebKit::PreconnectTask::isSynchronous(WebKit::PreconnectTask *this)
{
  return 0;
}

uint64_t WebKit::PreconnectTask::isAllowedToAskUserForCredentials(WebKit::PreconnectTask *this)
{
  return 0;
}

uint64_t WebKit::NetworkLoadClient::shouldCaptureExtraNetworkLoadMetrics(WebKit::NetworkLoadClient *this)
{
  return 0;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v5 + 8), a2);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebKit::NetworkResourceLoader::SynchronousLoadData::SynchronousLoadData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = WebCore::ResourceRequest::ResourceRequest((StringImpl *)a1);
  uint64_t v5 = *a2;
  *a2 = 0;
  *((void *)v4 + 25) = v5;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)((char *)v4 + 208));
  *(void *)(a1 + 44++*(_DWORD *)(this + 8) = 0;
  *(unsigned char *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 346) = *(unsigned char *)(a1 + 346) & 0xF1 | 4;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 472));
  *(void *)(a1 + 52++*(_DWORD *)(this + 8) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 51++*(_DWORD *)(this + 8) = 0;
  *(unsigned char *)(a1 + 536) = 1;
  return a1;
}

WebKit::NetworkResourceLoader::SynchronousLoadData *std::unique_ptr<WebKit::NetworkResourceLoader::SynchronousLoadData>::reset[abi:sn180100](WebKit::NetworkResourceLoader::SynchronousLoadData **a1, WTF::StringImpl *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkResourceLoader::SynchronousLoadData::~SynchronousLoadData(result, a2);
    return (WebKit::NetworkResourceLoader::SynchronousLoadData *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::NetworkResourceLoader::SynchronousLoadData::~SynchronousLoadData(WebKit::NetworkResourceLoader::SynchronousLoadData *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 66);
  *((void *)this + 66) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 64);
  *((void *)this + 64) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (WTF::StringImpl *)*((void *)this + 58);
  *((void *)this + 5++*(_DWORD *)(this + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  BOOL v7 = (const void *)*((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v7) {
    CFRelease(v7);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::NetworkResourceLoader::SynchronousLoadData *)((char *)this + 208), a2);
  uint64_t v8 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = (const void *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v9) {
    CFRelease(v9);
  }

  WebCore::ResourceRequestBase::~ResourceRequestBase(this);
}

WebCore::ResourceResponseBase *std::default_delete<WebCore::ResourceResponse>::operator()[abi:sn180100](WebCore::ResourceResponseBase *this, WTF::StringImpl *a2)
{
  if (this)
  {
    uint64_t v2 = this;
    uint64_t v3 = (const void *)*((void *)this + 30);
    *((void *)v2 + 30) = 0;
    if (v3) {
      CFRelease(v3);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase(v2, a2);
    return (WebCore::ResourceResponseBase *)WTF::fastFree(v4, v5);
  }
  return this;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(WTF *this, WTF::StringImpl *a2)
{
  if (a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = (WTF::StringImpl **)((char *)this + 8);
    do
    {
      uint64_t v5 = *v4;
      WTF *v4 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, a2);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
      int v6 = *(v4 - 1);
      *(v4 - 1) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t std::unique_ptr<WebCore::ContentFilter>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    uint64_t v4 = (WTF *)MEMORY[0x199731260]();
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 64);
    *(void *)(a1 + 64) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + ++*(_DWORD *)(this - 40) = 0;
    if (v6) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, a2);
    }
    BOOL v7 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, a2);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return a1;
}

WebKit::NetworkCache::Entry *std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100](WebKit::NetworkCache::Entry **a1, WTF::StringImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkCache::Entry::~Entry(result, a2);
    return (WebKit::NetworkCache::Entry *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::NetworkCache::Entry::~Entry(WebKit::NetworkCache::Entry *this, WTF::StringImpl *a2)
{
  WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Entry *)((char *)this + 576), a2);
  uint64_t v4 = (unsigned int *)*((void *)this + 71);
  *((void *)this + 71) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableResource,(WTF::DestructionThread)0>::deref(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 70);
  *((void *)this + 70) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v5, v3);
  }
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebKit::NetworkCache::Entry *)((char *)this + 352));
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 336, v6);
  uint64_t v8 = (const void *)*((void *)this + 40);
  *((void *)this + ++*(_DWORD *)(this - 40) = 0;
  if (v8) {
    CFRelease(v8);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::NetworkCache::Entry *)((char *)this + 80), v7);
  __int16 v10 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  int v11 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v9);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  CFTypeRef v13 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v9);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
}

void WebKit::NetworkCache::Storage::Record::~Record(WebKit::NetworkCache::Storage::Record *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (void *)*((void *)this + 14);
  if (v3) {
    os_release(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 10);
  if (v4) {
    os_release(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  BOOL v7 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::ShareableResource,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    WebCore::ShareableResource::~ShareableResource((WebCore::ShareableResource *)result);
    return (unsigned int *)WTF::fastFree(v1, v2);
  }
  return result;
}

WebKit::NetworkLoad *std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100](WebKit::NetworkLoad **a1, WebKit::NetworkLoad *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkLoad::~NetworkLoad(result, a2);
    return (WebKit::NetworkLoad *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WebKit::NetworkActivityTracker::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(unsigned char *)(a1 + ++*(_DWORD *)(this + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v3;
  uint64_t v4 = a2[2];
  if (v4) {
    CFRetain((CFTypeRef)a2[2]);
  }
  uint64_t v5 = *(const void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  if (v5) {
    CFRelease(v5);
  }
  return a1;
}

void std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (WebCore::ResourceRequestBase *)(a2 + 34);
    uint64_t v4 = (const void *)a2[58];
    a2[58] = 0;
    if (v4) {
      CFRelease(v4);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase(v3);
    uint64_t v6 = (unsigned int *)a2[33];
    a2[33] = 0;
    if (v6) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, v5);
    }
    BOOL v7 = (const void *)a2[30];
    a2[30] = 0;
    if (v7) {
      CFRelease(v7);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)a2, (WTF::StringImpl *)v5);
    WTF::fastFree(v8, v9);
  }
}

void WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  *a1 = 0;
  std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v8, a3);
  WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(v6, a2, (uint64_t)v8, a4);
  WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v8, v7);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
}

uint64_t WTF::Box<WebCore::NetworkLoadMetrics>::Data::Data<WebCore::NetworkLoadMetrics const&>(uint64_t result, long long *a2)
{
  *(_DWORD *)uint64_t result = 1;
  long long v2 = *a2;
  *(_OWORD *)(result + 24) = a2[1];
  *(_OWORD *)(result + ++*(_DWORD *)(this + 8) = v2;
  long long v3 = a2[2];
  long long v4 = a2[3];
  long long v5 = a2[4];
  *(void *)(result + 8++*(_DWORD *)(this + 8) = *((void *)a2 + 10);
  *(_OWORD *)(result + 72) = v5;
  *(_OWORD *)(result + 56) = v4;
  *(_OWORD *)(result + ++*(_DWORD *)(this - 40) = v3;
  uint64_t v6 = (_DWORD *)*((void *)a2 + 11);
  if (v6) {
    *v6 += 2;
  }
  *(void *)(result + 96) = v6;
  long long v7 = a2[6];
  *(void *)(result + 120) = *((void *)a2 + 14);
  *(_OWORD *)(result + 104) = v7;
  uint64_t v8 = (_DWORD *)*((void *)a2 + 15);
  if (v8) {
    ++*v8;
  }
  *(void *)(result + 12++*(_DWORD *)(this + 8) = v8;
  return result;
}

void WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 v7 = std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v9, a3);
  (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, __n128))(*(void *)a1 + 16))(a1, a2, v9, a4, v7);
  WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v9, v8);
}

uint64_t std::make_unique[abi:sn180100]<WebCore::ContentSecurityPolicy,WTF::URL,decltype(nullptr),WebKit::NetworkResourceLoader *>(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0xF0);
  if (*a3) {
    uint64_t v7 = *a3 + 64;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t result = MEMORY[0x199735820](v6, a2, 0, v7);
  *a1 = result;
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::NavigationRequester,WebCore::NavigationRequester const&,WebCore::NavigationRequester*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    long long v4 = *(_DWORD **)a2;
    if (*(void *)a2) {
      *v4 += 2;
    }
    *(void *)uint64_t result = v4;
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(result + ++*(_DWORD *)(this + 8) = v5;
    uint64_t v6 = *(atomic_uint **)(a2 + 40);
    atomic_fetch_add(v6, 1u);
    *(void *)(result + ++*(_DWORD *)(this - 40) = v6;
    uint64_t v7 = *(atomic_uint **)(a2 + 48);
    atomic_fetch_add(v7, 1u);
    *(void *)(result + 4++*(_DWORD *)(this + 8) = v7;
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(result + 56, (uint64_t *)(a2 + 56));
    int v8 = *(_DWORD *)(a2 + 72);
    *(unsigned char *)(v3 + 76) = *(unsigned char *)(a2 + 76);
    *(_DWORD *)(v3 + 72) = v8;
    *(_WORD *)(v3 + 80) = *(_WORD *)(a2 + 80);
    uint64_t v9 = *(_DWORD **)(a2 + 88);
    if (v9) {
      *v9 += 2;
    }
    *(void *)(v3 + 8++*(_DWORD *)(this + 8) = v9;
    __int16 v10 = *(_DWORD **)(a2 + 96);
    if (v10) {
      *v10 += 2;
    }
    *(void *)(v3 + 96) = v10;
    *(_WORD *)(v3 + 104) = *(_WORD *)(a2 + 104);
    int v11 = *(_DWORD **)(a2 + 112);
    if (v11) {
      *v11 += 2;
    }
    *(void *)(v3 + 112) = v11;
    uint64_t v12 = *(_DWORD **)(a2 + 120);
    if (v12) {
      *v12 += 2;
    }
    *(void *)(v3 + 120) = v12;
    *(unsigned char *)(v3 + 12++*(_DWORD *)(this + 8) = *(unsigned char *)(a2 + 128);
    *(_OWORD *)(v3 + 136) = *(_OWORD *)(a2 + 136);
    long long v13 = *(_OWORD *)(a2 + 152);
    long long v14 = *(_OWORD *)(a2 + 168);
    long long v15 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(v3 + 194) = *(_OWORD *)(a2 + 194);
    *(_OWORD *)(v3 + 184) = v15;
    *(_OWORD *)(v3 + 16++*(_DWORD *)(this + 8) = v14;
    *(_OWORD *)(v3 + 152) = v13;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebCore::CrossOriginOpenerPolicyEnforcementResult::operator=(uint64_t a1, uint64_t a2)
{
  WTF::URL::operator=(a1, a2);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a2 + ++*(_DWORD *)(this - 40) = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this - 40) = v5;
  if (v6) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, v4);
  }
  *(_WORD *)(a1 + 4++*(_DWORD *)(this + 8) = *(_WORD *)(a2 + 48);
  WTF::String::operator=((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
  WTF::String::operator=((uint64_t *)(a1 + 64), (uint64_t *)(a2 + 64));
  char v7 = *(unsigned char *)(a2 + 74);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(unsigned char *)(a1 + 74) = v7;
  return a1;
}

void WebCore::CrossOriginOpenerPolicyEnforcementResult::CrossOriginOpenerPolicyEnforcementResult(uint64_t a1, uint64_t a2)
{
  WTF::URL::URL(a1, (uint64_t *)a2);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a2 + ++*(_DWORD *)(this - 40) = 0;
  *(void *)(v4 + ++*(_DWORD *)(this - 40) = v3;
  *(_WORD *)(v4 + 4++*(_DWORD *)(this + 8) = *(_WORD *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(v4 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(v4 + 64) = v6;
  LOWORD(v6) = *(_WORD *)(a2 + 72);
  *(unsigned char *)(v4 + 74) = *(unsigned char *)(a2 + 74);
  *(_WORD *)(v4 + 72) = v6;
}

void std::__optional_storage_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>>(uint64_t a1, unsigned __int8 *a2)
{
  if (*(unsigned __int8 *)(a1 + 80) == a2[80])
  {
    if (*(unsigned char *)(a1 + 80))
    {
      WebCore::CrossOriginOpenerPolicyEnforcementResult::operator=(a1, (uint64_t)a2);
    }
  }
  else if (*(unsigned char *)(a1 + 80))
  {
    std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    WebCore::CrossOriginOpenerPolicyEnforcementResult::CrossOriginOpenerPolicyEnforcementResult(a1, (uint64_t)a2);
    *(unsigned char *)(v2 + 80) = 1;
  }
}

uint64_t std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>::reset[abi:sn180100](uint64_t result, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(result + 80))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(WTF::StringImpl **)(result + 64);
    *(void *)(v2 + 64) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(v2 + 56);
    *(void *)(v2 + 56) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(void *)(v2 + 40);
    *(void *)(v2 + ++*(_DWORD *)(this - 40) = 0;
    if (v5) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
    }
    uint64_t result = *(void *)v2;
    *(void *)uint64_t v2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    *(unsigned char *)(v2 + 80) = 0;
  }
  return result;
}

uint64_t WebCore::NetworkLoadInformation::NetworkLoadInformation(uint64_t a1, uint64_t a2)
{
  WTF::URL::URL(a1, (uint64_t *)a2);
  WTF::URL::URL(v4 + 40, (uint64_t *)(a2 + 40));
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a2 + 8++*(_DWORD *)(this + 8) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 8++*(_DWORD *)(this + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 96) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 104) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 10++*(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(a1 + 10++*(_DWORD *)(this + 8) = v6;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(void *)(a1 + 112) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 120) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_DWORD *)(a1 + 124) = v7;
  *(void *)(a1 + 12++*(_DWORD *)(this + 8) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v8 = *(void *)(a2 + 128);
  *(void *)(a2 + 12++*(_DWORD *)(this + 8) = 0;
  *(void *)(a1 + 12++*(_DWORD *)(this + 8) = v8;
  LODWORD(v++*(_DWORD *)(this + 8) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 136) = v8;
  LODWORD(v++*(_DWORD *)(this + 8) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 1++*(_DWORD *)(this - 40) = 0;
  *(_DWORD *)(a1 + 1++*(_DWORD *)(this - 40) = v8;
  LODWORD(v++*(_DWORD *)(this + 8) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 14++*(_DWORD *)(this + 8) = *(unsigned char *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v8;
  uint64_t v9 = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  *(void *)(a1 + 152) = v9;
  uint64_t v10 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(a1 + 160) = v10;
  uint64_t v11 = *(void *)(a2 + 168);
  *(void *)(a2 + 16++*(_DWORD *)(this + 8) = 0;
  *(void *)(a1 + 16++*(_DWORD *)(this + 8) = v11;
  uint64_t v12 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v12;
  uint64_t v13 = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  *(void *)(a1 + 192) = v13;
  WTF::URL::URL(a1 + 200, (uint64_t *)(a2 + 200));
  uint64_t v14 = *(void *)(a2 + 240);
  uint64_t v15 = *(void *)(a2 + 248);
  *(void *)(a2 + 2++*(_DWORD *)(this - 40) = 0;
  *(void *)(a1 + 2++*(_DWORD *)(this - 40) = v14;
  *(void *)(a1 + 24++*(_DWORD *)(this + 8) = v15;
  uint64_t v16 = *(void *)(a2 + 256);
  *(void *)(a2 + 256) = 0;
  *(void *)(a1 + 256) = v16;
  uint64_t v17 = *(void *)(a2 + 264);
  *(void *)(a2 + 264) = 0;
  *(void *)(a1 + 264) = v17;
  uint64_t v18 = *(void *)(a2 + 272);
  *(void *)(a2 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 28++*(_DWORD *)(this + 8) = 0;
  *(void *)(a1 + 272) = v18;
  uint64_t v19 = *(void *)(a2 + 280);
  *(void *)(a2 + 280) = 0;
  *(void *)(a1 + 280) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a2 + 28++*(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(a1 + 28++*(_DWORD *)(this + 8) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a2 + 292) = 0;
  *(_DWORD *)(a1 + 292) = v19;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  uint64_t v20 = *(void *)(a2 + 296);
  *(void *)(a2 + 296) = 0;
  *(void *)(a1 + 296) = v20;
  LODWORD(v20) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a2 + 304) = 0;
  *(_DWORD *)(a1 + 304) = v20;
  LODWORD(v20) = *(_DWORD *)(a2 + 308);
  *(_DWORD *)(a2 + 30++*(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(a1 + 30++*(_DWORD *)(this + 8) = v20;
  uint64_t v21 = *(void *)(a2 + 312);
  *(void *)(a2 + 312) = 0;
  *(void *)(a1 + 312) = v21;
  *(unsigned char *)(a1 + 320) = 0;
  *(unsigned char *)(a1 + 32++*(_DWORD *)(this + 8) = 0;
  if (*(unsigned char *)(a2 + 328))
  {
    uint64_t v37 = *(void *)(a2 + 320);
    *(void *)(a2 + 320) = 0;
    *(void *)(a1 + 320) = v37;
    *(unsigned char *)(a1 + 32++*(_DWORD *)(this + 8) = 1;
  }
  long long v22 = *(_OWORD *)(a2 + 336);
  long long v23 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 36++*(_DWORD *)(this + 8) = v23;
  *(_OWORD *)(a1 + 336) = v22;
  long long v24 = *(_OWORD *)(a2 + 384);
  long long v25 = *(_OWORD *)(a2 + 400);
  long long v26 = *(_OWORD *)(a2 + 416);
  *(_DWORD *)(a1 + 431) = *(_DWORD *)(a2 + 431);
  *(_OWORD *)(a1 + 400) = v25;
  *(_OWORD *)(a1 + 416) = v26;
  *(_OWORD *)(a1 + 384) = v24;
  uint64_t v27 = *(void *)(a2 + 440);
  *(void *)(a2 + 4++*(_DWORD *)(this - 40) = 0;
  *(void *)(a1 + 4++*(_DWORD *)(this - 40) = v27;
  *(unsigned char *)(a1 + 44++*(_DWORD *)(this + 8) = *(unsigned char *)(a2 + 448);
  long long v28 = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 472) = v28;
  long long v29 = *(_OWORD *)(a2 + 488);
  long long v30 = *(_OWORD *)(a2 + 504);
  long long v31 = *(_OWORD *)(a2 + 520);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(_OWORD *)(a1 + 504) = v30;
  *(_OWORD *)(a1 + 520) = v31;
  *(_OWORD *)(a1 + 48++*(_DWORD *)(this + 8) = v29;
  uint64_t v32 = *(void *)(a2 + 544);
  *(void *)(a2 + 544) = 0;
  *(void *)(a1 + 544) = v32;
  long long v33 = *(_OWORD *)(a2 + 552);
  *(void *)(a1 + 56++*(_DWORD *)(this + 8) = *(void *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = v33;
  uint64_t v34 = *(void *)(a2 + 576);
  *(void *)(a2 + 576) = 0;
  *(void *)(a1 + 576) = v34;
  *(_OWORD *)(a1 + 584) = 0u;
  uint64_t v35 = *(void *)(a2 + 584);
  *(void *)(a2 + 584) = 0;
  *(void *)(a1 + 584) = v35;
  LODWORD(v35) = *(_DWORD *)(a2 + 592);
  *(_DWORD *)(a2 + 592) = 0;
  *(_DWORD *)(a1 + 592) = v35;
  LODWORD(v35) = *(_DWORD *)(a2 + 596);
  *(_DWORD *)(a2 + 596) = 0;
  *(_DWORD *)(a1 + 596) = v35;
  return a1;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::RegistrableDomain,false> const&>(uint64_t *a1, WTF::StringImpl **a2)
{
  if (*((unsigned __int8 *)a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*((unsigned char *)a1 + 8)) {
      return WTF::String::operator=(a1, a2);
    }
  }
  else if (*((unsigned char *)a1 + 8))
  {
    return (uint64_t *)std::__optional_destruct_base<WebCore::RegistrableDomain,false>::reset[abi:sn180100]((WTF::StringImpl *)a1, (WTF::StringImpl *)a2);
  }
  else
  {
    uint64_t v2 = *a2;
    if (*a2) {
      *(_DWORD *)v2 += 2;
    }
    *a1 = (uint64_t)v2;
    *((unsigned char *)a1 + ++*(_DWORD *)(this + 8) = 1;
  }
  return a1;
}

void std::__optional_storage_base<WebCore::PCM::DestinationUnlinkableToken,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PCM::DestinationUnlinkableToken,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      CFTypeRef v4 = *(CFTypeRef *)a2;
      if (*(void *)a2) {
        CFRetain(*(CFTypeRef *)a2);
      }
      unsigned int v5 = *(const void **)a1;
      *(void *)a1 = v4;
      if (v5) {
        CFRelease(v5);
      }
      uint64_t v6 = *(void *)(a2 + 8);
      if (v6) {
        CFRetain(*(CFTypeRef *)(a2 + 8));
      }
      uint64_t v7 = *(const void **)(a1 + 8);
      *(void *)(a1 + ++*(_DWORD *)(this + 8) = v6;
      if (v7) {
        CFRelease(v7);
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (v8) {
        CFRetain(*(CFTypeRef *)(a2 + 16));
      }
      uint64_t v9 = *(const void **)(a1 + 16);
      *(void *)(a1 + 16) = v8;
      if (v9) {
        CFRelease(v9);
      }
      WTF::String::operator=((uint64_t *)(a1 + 24), (WTF::StringImpl **)(a2 + 24));
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::DestinationUnlinkableToken,WebCore::PCM::DestinationUnlinkableToken const&,WebCore::PCM::DestinationUnlinkableToken*>((void *)a1, a2);
    *(unsigned char *)(a1 + 32) = 1;
  }
}

uint64_t *std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PCM::DestinationSecretToken,false> const&>(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*((unsigned __int8 *)result + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*((unsigned char *)result + 24))
    {
      WTF::String::operator=(result, (WTF::StringImpl **)a2);
      WTF::String::operator=(v3 + 1, (WTF::StringImpl **)(a2 + 8));
      return WTF::String::operator=(v3 + 2, (WTF::StringImpl **)(a2 + 16));
    }
  }
  else if (*((unsigned char *)result + 24))
  {
    return (uint64_t *)std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::reset[abi:sn180100]((uint64_t)result, (WTF::StringImpl *)a2);
  }
  else
  {
    uint64_t result = std::construct_at[abi:sn180100]<WebCore::PCM::DestinationSecretToken,WebCore::PCM::DestinationSecretToken const&,WebCore::PCM::DestinationSecretToken*>(result, a2);
    *((unsigned char *)v3 + 24) = 1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore3PCM22AttributionTriggerDataEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 96, a2);
  std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 56, v3);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 40, v4);
  std::optional<WebCore::PublicSuffix>::~optional((uint64_t)a2 + 24, v5);

  return std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 8, v6);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore3PCM22AttributionTriggerDataEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

BOOL WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl>(uint64_t a1, char *__s)
{
  uint64_t v2 = __s;
  if (__s) {
    __s = (char *)strlen(__s);
  }
  if (__s != (char *)*(unsigned int *)(a1 + 4)) {
    return 0;
  }
  CFTypeRef v4 = *(unsigned __int8 **)(a1 + 8);
  if ((*(unsigned char *)(a1 + 16) & 4) != 0)
  {
    if (!__s) {
      return 1;
    }
    if (*(unsigned __int8 *)(MEMORY[0x1E4F30990] + *v4) == *(unsigned __int8 *)(MEMORY[0x1E4F30990]
                                                                               + *v2))
    {
      uint64_t v5 = 1;
      do
      {
        unint64_t v6 = v5;
        if (__s == (char *)v5) {
          break;
        }
        int v7 = *(unsigned __int8 *)(MEMORY[0x1E4F30990] + v4[v5]);
        int v8 = *(unsigned __int8 *)(MEMORY[0x1E4F30990] + v2[v5++]);
      }
      while (v7 == v8);
      return v6 >= (unint64_t)__s;
    }
    return 0;
  }

  return WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>((BOOL)v4, (uint64_t)__s, (uint64_t)v2, (uint64_t)__s, (unint64_t)__s);
}

WTF::StringImpl **WebKit::escapeForJSON(WTF::StringImpl **this, const WTF::String *a2)
{
  uint64_t v2 = this;
  if (a2 && (this = (WTF::StringImpl **)WTF::StringImpl::replace(), v4))
  {
    this = (WTF::StringImpl **)WTF::StringImpl::replace();
    *uint64_t v2 = v4;
    if (*(_DWORD *)v4 == 2) {
      return (WTF::StringImpl **)WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return this;
}

uint64_t WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::PrivateClickMeasurementManager,WTF::UniqueRef<WebKit::PCM::ClientImpl>,WTF::String const&>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x160);
  uint64_t v7 = *a2;
  *a2 = 0;
  uint64_t v9 = v7;
  *a1 = WebKit::PrivateClickMeasurementManager::PrivateClickMeasurementManager(v6, &v9, a3);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::deallocateTable(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    CFTypeRef v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != -1)
      {
        uint64_t *v4 = 0;
        if (v5) {
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v5 + 8), a2);
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

void WebKit::WebSharedWorkerServer::operator delete(WebKit::WebSharedWorkerServer *a1, WTF::StringImpl *a2)
{
  WebKit::WebSharedWorkerServer::~WebSharedWorkerServer(a1, a2);
  if (v3[2])
  {
    bzero(v3, (size_t)a2);
  }
  else
  {
    WTF::fastFree((WTF *)v3, v4);
  }
}

WebKit::NetworkLoadScheduler *std::unique_ptr<WebKit::NetworkLoadScheduler>::reset[abi:sn180100](WebKit::NetworkLoadScheduler **a1, WTF::StringImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkLoadScheduler::~NetworkLoadScheduler(result, a2);
    return (WebKit::NetworkLoadScheduler *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    CFTypeRef v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        WTF *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    CFTypeRef v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        uint64_t v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
          {
            WTF::StringImpl::destroy(v6, a2);
            uint64_t v5 = *v4;
          }
          else
          {
            *(_DWORD *)v6 -= 2;
          }
        }
        WTF *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WebCore::PrivateClickMeasurement::operator=(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  WTF::String::operator=((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  WTF::String::operator=((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  long long v4 = *(_OWORD *)(a2 + 33);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 33) = v4;
  std::__optional_storage_base<WebCore::PCM::AttributionTriggerData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::AttributionTriggerData,false>>((uint64_t *)(a1 + 56), a2 + 56);
  long long v5 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 20++*(_DWORD *)(this + 8) = v5;
  std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>((uint64_t *)(a1 + 224), (uint64_t *)(a2 + 224));
  uint64_t v6 = *(void *)(a2 + 240);
  *(void *)(a2 + 2++*(_DWORD *)(this - 40) = 0;
  uint64_t v7 = *(const void **)(a1 + 240);
  *(void *)(a1 + 2++*(_DWORD *)(this - 40) = v6;
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(void *)(a2 + 248);
  *(void *)(a2 + 24++*(_DWORD *)(this + 8) = 0;
  uint64_t v9 = *(const void **)(a1 + 248);
  *(void *)(a1 + 24++*(_DWORD *)(this + 8) = v8;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *(void *)(a2 + 256);
  *(void *)(a2 + 256) = 0;
  uint64_t v11 = *(const void **)(a1 + 256);
  *(void *)(a1 + 256) = v10;
  if (v11) {
    CFRelease(v11);
  }
  WTF::String::operator=((uint64_t *)(a1 + 264), (uint64_t *)(a2 + 264));
  std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationSecretToken,false>>((uint64_t *)(a1 + 272), a2 + 272);
  WTF::String::operator=((uint64_t *)(a1 + 304), (uint64_t *)(a2 + 304));
  return a1;
}

{
  long long v4;
  _WORD *v5;
  WTF::StringImpl *v6;
  __int16 v7;
  long long v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  const void *v14;
  uint64_t *v15;
  WTF::StringImpl **v16;

  *(unsigned char *)a1 = *(unsigned char *)a2;
  WTF::String::operator=((uint64_t *)(a1 + 8), (WTF::StringImpl **)(a2 + 8));
  WTF::String::operator=((uint64_t *)(a1 + 16), (WTF::StringImpl **)(a2 + 16));
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  *(_OWORD *)(a1 + 24) = v4;
  long long v5 = (_WORD *)(a1 + 56);
  uint64_t v6 = (WTF::StringImpl *)(a2 + 56);
  if (*(unsigned __int8 *)(a1 + 184) == *(unsigned __int8 *)(a2 + 184))
  {
    if (*(unsigned char *)(a1 + 184))
    {
      uint64_t v7 = *(_WORD *)v6;
      *(unsigned char *)(a1 + 5++*(_DWORD *)(this + 8) = *(unsigned char *)(a2 + 58);
      *long long v5 = v7;
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::RegistrableDomain,false> const&>((uint64_t *)(a1 + 64), (WTF::StringImpl **)(a2 + 64));
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::RegistrableDomain,false> const&>((uint64_t *)(a1 + 80), (WTF::StringImpl **)(a2 + 80));
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::RegistrableDomain,false> const&>((uint64_t *)(a1 + 96), (WTF::StringImpl **)(a2 + 96));
      std::__optional_storage_base<WebCore::PCM::DestinationUnlinkableToken,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PCM::DestinationUnlinkableToken,false> const&>(a1 + 112, a2 + 112);
      std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PCM::DestinationSecretToken,false> const&>((uint64_t *)(a1 + 152), a2 + 152);
    }
  }
  else if (*(unsigned char *)(a1 + 184))
  {
    std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::reset[abi:sn180100]((uint64_t)v5, v6);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData const&,WebCore::PCM::AttributionTriggerData*>((uint64_t)v5, (uint64_t)v6);
    *(unsigned char *)(a1 + 184) = 1;
  }
  uint64_t v8 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 20++*(_DWORD *)(this + 8) = v8;
  std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::RegistrableDomain,false> const&>((uint64_t *)(a1 + 224), (WTF::StringImpl **)(a2 + 224));
  uint64_t v9 = *(void *)(a2 + 240);
  if (v9) {
    CFRetain(*(CFTypeRef *)(a2 + 240));
  }
  uint64_t v10 = *(const void **)(a1 + 240);
  *(void *)(a1 + 2++*(_DWORD *)(this - 40) = v9;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *(void *)(a2 + 248);
  if (v11) {
    CFRetain(*(CFTypeRef *)(a2 + 248));
  }
  uint64_t v12 = *(const void **)(a1 + 248);
  *(void *)(a1 + 24++*(_DWORD *)(this + 8) = v11;
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = *(void *)(a2 + 256);
  if (v13) {
    CFRetain(*(CFTypeRef *)(a2 + 256));
  }
  uint64_t v14 = *(const void **)(a1 + 256);
  *(void *)(a1 + 256) = v13;
  if (v14) {
    CFRelease(v14);
  }
  WTF::String::operator=((uint64_t *)(a1 + 264), (WTF::StringImpl **)(a2 + 264));
  uint64_t v15 = (uint64_t *)(a1 + 272);
  uint64_t v16 = (WTF::StringImpl **)(a2 + 272);
  if (*(unsigned __int8 *)(a1 + 296) == *(unsigned __int8 *)(a2 + 296))
  {
    if (*(unsigned char *)(a1 + 296))
    {
      WTF::String::operator=(v15, v16);
      WTF::String::operator=((uint64_t *)(a1 + 280), (WTF::StringImpl **)(a2 + 280));
      WTF::String::operator=((uint64_t *)(a1 + 288), (WTF::StringImpl **)(a2 + 288));
    }
  }
  else if (*(unsigned char *)(a1 + 296))
  {
    std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::reset[abi:sn180100]((uint64_t)v15, (WTF::StringImpl *)v16);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::DestinationSecretToken,WebCore::PCM::DestinationSecretToken const&,WebCore::PCM::DestinationSecretToken*>(v15, (uint64_t)v16);
    *(unsigned char *)(a1 + 296) = 1;
  }
  WTF::String::operator=((uint64_t *)(a1 + 304), (WTF::StringImpl **)(a2 + 304));
  return a1;
}

uint64_t *std::__optional_storage_base<WebCore::PCM::AttributionTriggerData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::AttributionTriggerData,false>>(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*((unsigned __int8 *)result + 128) == *(unsigned __int8 *)(a2 + 128))
  {
    if (*((unsigned char *)result + 128))
    {
      __int16 v4 = *(_WORD *)a2;
      *((unsigned char *)result + 2) = *(unsigned char *)(a2 + 2);
      *(_WORD *)uint64_t result = v4;
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>(result + 1, (uint64_t *)(a2 + 8));
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>(v3 + 3, (uint64_t *)(a2 + 24));
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>(v3 + 5, (uint64_t *)(a2 + 40));
      std::__optional_storage_base<WebCore::PCM::DestinationUnlinkableToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationUnlinkableToken,false>>((uint64_t)(v3 + 7), (uint64_t *)(a2 + 56));
      return std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationSecretToken,false>>(v3 + 12, a2 + 96);
    }
  }
  else if (*((unsigned char *)result + 128))
  {
    return (uint64_t *)std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::reset[abi:sn180100]((uint64_t)result, (WTF::StringImpl *)a2);
  }
  else
  {
    uint64_t result = (uint64_t *)std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)result, a2);
    *((unsigned char *)v3 + 12++*(_DWORD *)(this + 8) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::reset[abi:sn180100](uint64_t result, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(result + 128))
  {
    uint64_t v2 = result;
    std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100](result + 96, a2);
    std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100](v2 + 56, v3);
    std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100](v2 + 40, v4);
    std::optional<WebCore::PublicSuffix>::~optional(v2 + 24, v5);
    uint64_t result = std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100](v2 + 8, v6);
    *(unsigned char *)(v2 + 12++*(_DWORD *)(this + 8) = 0;
  }
  return result;
}

void std::default_delete<WebKit::NetworkSession::CachedNetworkResourceLoader>::operator()[abi:sn180100](int a1, WebCore::TimerBase *this)
{
  if (this)
  {
    uint64_t v3 = *((void *)this + 7);
    *((void *)this + 7) = 0;
    if (v3) {
      WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v3 + 8), this);
    }
    *(void *)this = &unk_1EE9BA5F0;
    uint64_t v4 = *((void *)this + 6);
    *((void *)this + 6) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    WebCore::TimerBase::~TimerBase(this);
    WTF::fastFree(v5, v6);
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v14 != -1)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 16 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          long long v24 = (uint64_t *)(v15 + 16 * v22);
          uint64_t v25 = v24[1];
          v24[1] = 0;
          if (v25) {
            WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v25 + 8), v10);
          }
          *long long v24 = *v13;
          uint64_t v26 = v6 + 16 * v11;
          uint64_t v27 = *(void *)(v26 + 8);
          *(void *)(v26 + ++*(_DWORD *)(this + 8) = 0;
          v24[1] = v27;
          uint64_t v28 = *(void *)(v26 + 8);
          *(void *)(v26 + ++*(_DWORD *)(this + 8) = 0;
          if (v28) {
            WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v28 + 8), v10);
          }
          if (v13 == a3) {
            uint64_t v12 = v24;
          }
        }
      }
      else
      {
        uint64_t v29 = v13[1];
        v13[1] = 0;
        if (v29) {
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v29 + 8), v10);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *result;
  if (*result) {
    int v4 = (WTF::StringImpl *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  }
  else {
    int v4 = 0;
  }
  if (v4 == a2)
  {
    *a3 = 0;
    return result;
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5)
  {
    *((void *)a2 + 1) = 0;
    uint64_t v3 = *result;
  }
  *a3 = v5;
  if (v3)
  {
    uint64_t v6 = (WTF::StringImpl *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v6 == a2) {
      return result;
    }
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (v6 != a2) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(result, a2);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *result, WTF::StringImpl *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((void *)a2 + 1);
  *(void *)a2 = -1;
  *((void *)a2 + 1) = 0;
  if (v3) {
    uint64_t result = (uint64_t *)WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v3 + 8), a2);
  }
  ++*(_DWORD *)(*v2 - 16);
  uint64_t v4 = *v2;
  if (*v2) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *v2;
  if (*v2)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v2, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::NetworkResourceLoader::*&)(void),WebKit::NetworkResourceLoader*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

WebKit::ServiceWorkerFetchTask *WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(WebKit::ServiceWorkerFetchTask *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::ServiceWorkerFetchTask::~ServiceWorkerFetchTask(result);
    return (WebKit::ServiceWorkerFetchTask *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::startRequest(WebCore::ResourceRequest const&)::$_0,void,std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C61B0;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::startRequest(WebCore::ResourceRequest const&)::$_0,void,std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C61B0;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::startRequest(WebCore::ResourceRequest const&)::$_0,void,std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::call(uint64_t *result, const WebCore::ResourceRequest *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = result[2];
  if (!v2 || !*(void *)(v2 + 8)) {
    return result;
  }
  uint64_t v4 = result[1];
  int v5 = *((_DWORD *)a2 + 164);
  if (v5 == -1) {
    uint64_t v6 = -1;
  }
  else {
    uint64_t v6 = *((unsigned int *)a2 + 164);
  }
  if (!v6)
  {
    if (!v5)
    {
      unsigned int v7 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(v4 + 88);
        if (!v8)
        {
          __break(0xC471u);
          JUMPOUT(0x198BB79B8);
        }
        uint64_t v9 = *(void *)(v4 + 80);
        uint64_t v10 = *(void *)(v4 + 96);
        uint64_t v11 = *(void *)(v4 + 3048);
        BOOL v12 = *(unsigned __int8 *)(v4 + 315) == 1;
        int v13 = *(unsigned __int8 *)(v4 + 3088);
        BOOL v14 = *(void *)(v4 + 4168) != 0;
        int v17 = 134219776;
        uint64_t v18 = v4;
        __int16 v19 = 2048;
        uint64_t v20 = v9;
        __int16 v21 = 2048;
        uint64_t v22 = v8;
        __int16 v23 = 2048;
        uint64_t v24 = v10;
        __int16 v25 = 2048;
        uint64_t v26 = v11;
        __int16 v27 = 1024;
        BOOL v28 = v12;
        __int16 v29 = 1024;
        int v30 = v13;
        __int16 v31 = 1024;
        BOOL v32 = v14;
        _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::start: NetworkLoadChecker::check is done", (uint8_t *)&v17, 0x46u);
      }
      if (WebKit::NetworkResourceLoader::canUseCache((WebKit::NetworkResourceLoader *)v4, a2)) {
        return (uint64_t *)WebKit::NetworkResourceLoader::retrieveCacheEntry((WebKit::NetworkResourceLoader *)v4, a2);
      }
      else {
        return (uint64_t *)WebKit::NetworkResourceLoader::startNetworkLoad((WebKit::NetworkResourceLoader *)v4, (uint64_t)a2, 1);
      }
    }
LABEL_25:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v6 == 1)
  {
    if (v5 != 1) {
      goto LABEL_25;
    }
    uint64_t v16 = result[1];
    return (uint64_t *)_ZNSt3__16invokeB8sn180100IN3WTF7VisitorIZZN6WebKit21NetworkResourceLoader12startRequestERKN7WebCore15ResourceRequestEENK3__0clINS_7variantIJS6_NS3_18NetworkLoadChecker18RedirectionTripletENS5_13ResourceErrorEEEEEEDaOT_EUlRSE_E_JZZNS4_12startRequestES8_ENKSA_ISF_EESG_SI_EUlRSD_E_ZZNS4_12startRequestES8_ENKSA_ISF_EESG_SI_EUlRS6_E_EEEJSL_EEENS_13invoke_resultISH_JDpT0_EE4typeESI_DpOSR_(v16, (uint64_t)a2);
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_25;
    }
    uint64_t v15 = result[1];
    return _ZNSt3__16invokeB8sn180100IN3WTF7VisitorIZZN6WebKit21NetworkResourceLoader12startRequestERKN7WebCore15ResourceRequestEENK3__0clINS_7variantIJS6_NS3_18NetworkLoadChecker18RedirectionTripletENS5_13ResourceErrorEEEEEEDaOT_EUlRSE_E_JZZNS4_12startRequestES8_ENKSA_ISF_EESG_SI_EUlRSD_E_ZZNS4_12startRequestES8_ENKSA_ISF_EESG_SI_EUlRS6_E_EEEJSJ_EEENS_13invoke_resultISH_JDpT0_EE4typeESI_DpOSR_(v15, (uint64_t)a2);
  }
}

uint64_t _ZNSt3__16invokeB8sn180100IN3WTF7VisitorIZZN6WebKit21NetworkResourceLoader12startRequestERKN7WebCore15ResourceRequestEENK3__0clINS_7variantIJS6_NS3_18NetworkLoadChecker18RedirectionTripletENS5_13ResourceErrorEEEEEEDaOT_EUlRSE_E_JZZNS4_12startRequestES8_ENKSA_ISF_EESG_SI_EUlRSD_E_ZZNS4_12startRequestES8_ENKSA_ISF_EESG_SI_EUlRS6_E_EEEJSL_EEENS_13invoke_resultISH_JDpT0_EE4typeESI_DpOSR_(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 88);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x198BB7C18);
    }
    uint64_t v6 = *(void *)(a1 + 80);
    uint64_t v7 = *(void *)(a1 + 96);
    uint64_t v8 = *(void *)(a1 + 3048);
    BOOL v9 = *(unsigned __int8 *)(a1 + 315) == 1;
    int v10 = *(unsigned __int8 *)(a1 + 3088);
    BOOL v11 = *(void *)(a1 + 4168) != 0;
    *(_DWORD *)BOOL v14 = 134219776;
    *(void *)&v14[4] = a1;
    __int16 v15 = 2048;
    uint64_t v16 = v6;
    __int16 v17 = 2048;
    uint64_t v18 = v5;
    __int16 v19 = 2048;
    uint64_t v20 = v7;
    __int16 v21 = 2048;
    uint64_t v22 = v8;
    __int16 v23 = 1024;
    BOOL v24 = v9;
    __int16 v25 = 1024;
    int v26 = v10;
    __int16 v27 = 1024;
    BOOL v28 = v11;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::start: NetworkLoadChecker::check returned a synthetic redirect", v14, 0x46u);
  }
  *(unsigned char *)(a1 + 4304) = 1;
  BOOL v12 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v12 = &unk_1EE9C61D8;
  *(void *)BOOL v14 = v12;
  WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal(a1, (const WebCore::ResourceRequest *)a2, (WebCore::ResourceRequestBase *)(a2 + 200), a2 + 400, 0, (uint64_t *)v14);
  uint64_t result = *(void *)v14;
  if (*(void *)v14) {
    return (*(uint64_t (**)(void))(**(void **)v14 + 8))(*(void *)v14);
  }
  return result;
}

uint64_t *_ZNSt3__16invokeB8sn180100IN3WTF7VisitorIZZN6WebKit21NetworkResourceLoader12startRequestERKN7WebCore15ResourceRequestEENK3__0clINS_7variantIJS6_NS3_18NetworkLoadChecker18RedirectionTripletENS5_13ResourceErrorEEEEEEDaOT_EUlRSE_E_JZZNS4_12startRequestES8_ENKSA_ISF_EESG_SI_EUlRSD_E_ZZNS4_12startRequestES8_ENKSA_ISF_EESG_SI_EUlRS6_E_EEEJSJ_EEENS_13invoke_resultISH_JDpT0_EE4typeESI_DpOSR_(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = off_1EB358988;
  uint64_t result = (uint64_t *)os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
  if (result)
  {
    uint64_t v6 = *(void *)(a1 + 88);
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198BB7E0CLL);
    }
    uint64_t v7 = *(void *)(a1 + 80);
    uint64_t v8 = *(void *)(a1 + 96);
    uint64_t v9 = *(void *)(a1 + 3048);
    BOOL v10 = *(unsigned __int8 *)(a1 + 315) == 1;
    int v16 = *(unsigned __int8 *)(a1 + 3088);
    BOOL v11 = *(void *)(a1 + 4168) != 0;
    MEMORY[0x19973EC60](a2);
    WTF::String::utf8();
    if (v17) {
      BOOL v12 = (char *)v17 + 16;
    }
    else {
      BOOL v12 = 0;
    }
    MEMORY[0x19973EC60](a2);
    int v13 = *(_DWORD *)(a2 + 56);
    BOOL v14 = *(unsigned __int8 *)(a2 + 60) == 3;
    *(_DWORD *)long long buf = 134220546;
    uint64_t v19 = a1;
    __int16 v20 = 2048;
    uint64_t v21 = v7;
    __int16 v22 = 2048;
    uint64_t v23 = v6;
    __int16 v24 = 2048;
    uint64_t v25 = v8;
    __int16 v26 = 2048;
    uint64_t v27 = v9;
    __int16 v28 = 1024;
    BOOL v29 = v10;
    __int16 v30 = 1024;
    int v31 = v16;
    __int16 v32 = 1024;
    BOOL v33 = v11;
    __int16 v34 = 2082;
    uint64_t v35 = v12;
    __int16 v36 = 1024;
    int v37 = v13;
    __int16 v38 = 1024;
    BOOL v39 = v14;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::start: NetworkLoadChecker::check returned an error (error.domain=%{public}s, error.code=%d, isCancellation=%d)", buf, 0x5Cu);
    uint64_t result = (uint64_t *)v17;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1) {
        uint64_t result = (uint64_t *)WTF::fastFree(v17, v15);
      }
      else {
        --*(_DWORD *)v17;
      }
    }
  }
  if (*(unsigned char *)(a2 + 60) != 3) {
    return WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceError *)a2);
  }
  return result;
}

void _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit21NetworkResourceLoader12startRequestERKN7WebCore15ResourceRequestEENK3__0clINSt3__17variantIJS5_NS2_18NetworkLoadChecker18RedirectionTripletENS4_13ResourceErrorEEEEEEDaOT_ENKUlRSD_E_clESJ_EUlSH_E_vJOS5_EE4callESM_(uint64_t a1, uint64_t a2)
{
  WTF::URL::URL((uint64_t)v10, (uint64_t *)a2);
  WTF::URL::URL((uint64_t)v11, (uint64_t *)(a2 + 40));
  v11[5] = *(void *)(a2 + 80);
  long long v3 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a2 + 8++*(_DWORD *)(this + 8) = 0u;
  long long v12 = v3;
  *(void *)&long long v3 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  uint64_t v13 = v3;
  uint64_t v4 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v14 = v4;
  *(void *)&long long v3 = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  uint64_t v15 = v3;
  uint64_t v5 = *(void *)(a2 + 128);
  *(void *)(a2 + 12++*(_DWORD *)(this + 8) = 0;
  uint64_t v16 = v5;
  *(void *)&long long v3 = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  uint64_t v17 = v3;
  LODWORD(v5) = *(_DWORD *)(a2 + 144);
  char v19 = *(unsigned char *)(a2 + 148);
  int v18 = v5;
  long long v6 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a2 + 152) = 0u;
  long long v20 = v6;
  char v23 = *(unsigned char *)(a2 + 184);
  uint64_t v7 = *(void *)(a2 + 168);
  uint64_t v8 = *(void *)(a2 + 176);
  *(void *)(a2 + 16++*(_DWORD *)(this + 8) = 0;
  uint64_t v21 = v7;
  uint64_t v22 = v8;
  uint64_t v9 = *(const void **)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  uint64_t v24 = 0;
  if (v9) {
    CFRelease(v9);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v10);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::retrieveCacheEntry(WebCore::ResourceRequest const&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C6200;
  uint64_t v2 = (WebCore::ResourceRequestBase *)(a1 + 3);
  long long v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  uint64_t v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::retrieveCacheEntry(WebCore::ResourceRequest const&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C6200;
  uint64_t v2 = (WebCore::ResourceRequestBase *)(a1 + 3);
  long long v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  uint64_t v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }

  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::retrieveCacheEntry(WebCore::ResourceRequest const&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&>::call(void *a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  long long v3 = *(String **)a2;
  *(void *)a2 = 0;
  uint64_t v106 = v3;
  uint64_t v4 = a1[2];
  if (!v4 || !*(void *)(v4 + 8)) {
    goto LABEL_9;
  }
  double v7 = *(double *)a3;
  double v6 = *(double *)(a3 + 8);
  int v8 = *(_DWORD *)(a3 + 16);
  double v9 = *(double *)(a3 + 24);
  double v10 = *(double *)(a3 + 32);
  double v11 = *(double *)(a3 + 40);
  double v12 = *(double *)(a3 + 48);
  double v13 = *(double *)(a3 + 64);
  double v105 = *(double *)(a3 + 56);
  double v14 = *(double *)(a3 + 72);
  uint64_t v15 = *(void *)(a3 + 80);
  uint64_t v16 = *(void *)(a3 + 88);
  int v17 = *(unsigned __int8 *)(a3 + 96);
  int v18 = *(unsigned __int8 *)(a3 + 97);
  int v104 = *(unsigned __int8 *)(a3 + 98);
  int v19 = *(unsigned __int8 *)(a3 + 104);
  uint64_t v20 = a1[1];
  uint64_t v21 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = *(void *)(v20 + 88);
    if (!v22)
    {
      __break(0xC471u);
      goto LABEL_58;
    }
    uint64_t v23 = *(void *)(v20 + 80);
    uint64_t v24 = *(void *)(v20 + 96);
    uint64_t v25 = *(void *)(v20 + 3048);
    BOOL v26 = *(unsigned __int8 *)(v20 + 315) == 1;
    int v27 = *(unsigned __int8 *)(v20 + 3088);
    BOOL v28 = *(void *)(v20 + 4168) != 0;
    *(_DWORD *)long long buf = 134220032;
    uint64_t v108 = v20;
    __int16 v109 = 2048;
    uint64_t v110 = v23;
    __int16 v111 = 2048;
    uint64_t v112 = v22;
    __int16 v113 = 2048;
    uint64_t v114 = v24;
    __int16 v115 = 2048;
    uint64_t v116 = v25;
    __int16 v117 = 1024;
    BOOL v118 = v26;
    __int16 v119 = 1024;
    int v120 = v27;
    __int16 v121 = 1024;
    BOOL v122 = v28;
    __int16 v123 = 1024;
    LODWORD(v124) = v3 != 0;
    _os_log_impl(&dword_1985F2000, v21, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntry: Done checking the HTTP disk cache (foundCachedEntry=%d)", buf, 0x4Cu);
  }
  double v29 = v6 - v7;
  if (v29 < 1.0) {
    goto LABEL_7;
  }
  __int16 v32 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v33 = *(void *)(v20 + 88);
    if (!v33)
    {
      __break(0xC471u);
      JUMPOUT(0x198BB89B8);
    }
    uint64_t v34 = *(void *)(v20 + 80);
    uint64_t v35 = *(void *)(v20 + 96);
    uint64_t v36 = *(void *)(v20 + 3048);
    BOOL v37 = *(unsigned __int8 *)(v20 + 315) == 1;
    int v38 = *(unsigned __int8 *)(v20 + 3088);
    BOOL v39 = *(void *)(v20 + 4168) != 0;
    *(_DWORD *)long long buf = 134220288;
    uint64_t v108 = v20;
    __int16 v109 = 2048;
    uint64_t v110 = v34;
    __int16 v111 = 2048;
    uint64_t v112 = v33;
    __int16 v113 = 2048;
    uint64_t v114 = v35;
    __int16 v115 = 2048;
    uint64_t v116 = v36;
    __int16 v117 = 1024;
    BOOL v118 = v37;
    __int16 v119 = 1024;
    int v120 = v38;
    __int16 v121 = 1024;
    BOOL v122 = v39;
    __int16 v123 = 2048;
    double v124 = v29 * 1000.0;
    __int16 v125 = 1024;
    LODWORD(v126) = v8;
    _os_log_impl(&dword_1985F2000, v32, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::logSlowCacheRetrieveIfNeeded: Took %.0fms, priority %d", buf, 0x56u);
  }
  if (v19)
  {
    uint64_t v40 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v41 = *(void *)(v20 + 88);
      if (!v41)
      {
        __break(0xC471u);
        JUMPOUT(0x198BB89D8);
      }
      uint64_t v42 = *(void *)(v20 + 80);
      uint64_t v43 = *(void *)(v20 + 96);
      uint64_t v44 = *(void *)(v20 + 3048);
      BOOL v45 = *(unsigned __int8 *)(v20 + 315) == 1;
      int v46 = *(unsigned __int8 *)(v20 + 3088);
      BOOL v47 = *(void *)(v20 + 4168) != 0;
      *(_DWORD *)long long buf = 134219776;
      uint64_t v108 = v20;
      __int16 v109 = 2048;
      uint64_t v110 = v42;
      __int16 v111 = 2048;
      uint64_t v112 = v41;
      __int16 v113 = 2048;
      uint64_t v114 = v43;
      __int16 v115 = 2048;
      uint64_t v116 = v44;
      __int16 v117 = 1024;
      BOOL v118 = v45;
      __int16 v119 = 1024;
      int v120 = v46;
      __int16 v121 = 1024;
      BOOL v122 = v47;
      _os_log_impl(&dword_1985F2000, v40, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::logSlowCacheRetrieveIfNeeded: Was speculative load", buf, 0x46u);
    }
  }
  if (v9 == 0.0) {
    goto LABEL_7;
  }
  int v48 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v49 = *(void *)(v20 + 88);
    if (!v49)
    {
      __break(0xC471u);
      JUMPOUT(0x198BB89F8);
    }
    uint64_t v50 = *(void *)(v20 + 80);
    uint64_t v51 = *(void *)(v20 + 96);
    uint64_t v52 = *(void *)(v20 + 3048);
    BOOL v53 = *(unsigned __int8 *)(v20 + 315) == 1;
    int v54 = *(unsigned __int8 *)(v20 + 3088);
    BOOL v55 = *(void *)(v20 + 4168) != 0;
    *(_DWORD *)long long buf = 134220032;
    uint64_t v108 = v20;
    __int16 v109 = 2048;
    uint64_t v110 = v50;
    __int16 v111 = 2048;
    uint64_t v112 = v49;
    __int16 v113 = 2048;
    uint64_t v114 = v51;
    __int16 v115 = 2048;
    uint64_t v116 = v52;
    __int16 v117 = 1024;
    BOOL v118 = v53;
    __int16 v119 = 1024;
    int v120 = v54;
    __int16 v121 = 1024;
    BOOL v122 = v55;
    __int16 v123 = 2048;
    double v124 = (v14 - v9) * 1000.0;
    _os_log_impl(&dword_1985F2000, v48, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::logSlowCacheRetrieveIfNeeded: Storage retrieve time %.0fms", buf, 0x50u);
  }
  if (v10 != 0.0)
  {
    uint64_t v56 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v57 = *(void *)(v20 + 88);
      if (!v57)
      {
        __break(0xC471u);
        JUMPOUT(0x198BB8A18);
      }
      uint64_t v58 = *(void *)(v20 + 80);
      uint64_t v59 = *(void *)(v20 + 96);
      uint64_t v60 = *(void *)(v20 + 3048);
      BOOL v61 = *(unsigned __int8 *)(v20 + 315) == 1;
      int v62 = *(unsigned __int8 *)(v20 + 3088);
      BOOL v63 = *(void *)(v20 + 4168) != 0;
      *(_DWORD *)long long buf = 134220288;
      uint64_t v108 = v20;
      __int16 v109 = 2048;
      uint64_t v110 = v58;
      __int16 v111 = 2048;
      uint64_t v112 = v57;
      __int16 v113 = 2048;
      uint64_t v114 = v59;
      __int16 v115 = 2048;
      uint64_t v116 = v60;
      __int16 v117 = 1024;
      BOOL v118 = v61;
      __int16 v119 = 1024;
      int v120 = v62;
      __int16 v121 = 1024;
      BOOL v122 = v63;
      __int16 v123 = 2048;
      double v124 = (v10 - v9) * 1000.0;
      __int16 v125 = 2048;
      uint64_t v126 = v16 - v15;
      _os_log_impl(&dword_1985F2000, v56, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::logSlowCacheRetrieveIfNeeded: Dispatch delay %.0fms, dispatched %lu resources first", buf, 0x5Au);
    }
  }
  if (v11 != 0.0)
  {
    int v64 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v65 = *(void *)(v20 + 88);
      if (!v65)
      {
        __break(0xC471u);
        JUMPOUT(0x198BB8A38);
      }
      uint64_t v66 = *(void *)(v20 + 80);
      uint64_t v67 = *(void *)(v20 + 96);
      uint64_t v68 = *(void *)(v20 + 3048);
      BOOL v69 = *(unsigned __int8 *)(v20 + 315) == 1;
      int v70 = *(unsigned __int8 *)(v20 + 3088);
      BOOL v71 = *(void *)(v20 + 4168) != 0;
      *(_DWORD *)long long buf = 134220032;
      uint64_t v108 = v20;
      __int16 v109 = 2048;
      uint64_t v110 = v66;
      __int16 v111 = 2048;
      uint64_t v112 = v65;
      __int16 v113 = 2048;
      uint64_t v114 = v67;
      __int16 v115 = 2048;
      uint64_t v116 = v68;
      __int16 v117 = 1024;
      BOOL v118 = v69;
      __int16 v119 = 1024;
      int v120 = v70;
      __int16 v121 = 1024;
      BOOL v122 = v71;
      __int16 v123 = 2048;
      double v124 = (v12 - v11) * 1000.0;
      _os_log_impl(&dword_1985F2000, v64, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::logSlowCacheRetrieveIfNeeded: Record I/O time %.0fms", buf, 0x50u);
    }
  }
  if (v105 != 0.0)
  {
    uint64_t v72 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v73 = *(void *)(v20 + 88);
      if (!v73)
      {
        __break(0xC471u);
        JUMPOUT(0x198BB8A58);
      }
      uint64_t v74 = *(void *)(v20 + 80);
      uint64_t v75 = *(void *)(v20 + 96);
      uint64_t v76 = *(void *)(v20 + 3048);
      BOOL v77 = *(unsigned __int8 *)(v20 + 315) == 1;
      int v78 = *(unsigned __int8 *)(v20 + 3088);
      BOOL v79 = *(void *)(v20 + 4168) != 0;
      *(_DWORD *)long long buf = 134220032;
      uint64_t v108 = v20;
      __int16 v109 = 2048;
      uint64_t v110 = v74;
      __int16 v111 = 2048;
      uint64_t v112 = v73;
      __int16 v113 = 2048;
      uint64_t v114 = v75;
      __int16 v115 = 2048;
      uint64_t v116 = v76;
      __int16 v117 = 1024;
      BOOL v118 = v77;
      __int16 v119 = 1024;
      int v120 = v78;
      __int16 v121 = 1024;
      BOOL v122 = v79;
      __int16 v123 = 2048;
      double v124 = (v13 - v105) * 1000.0;
      _os_log_impl(&dword_1985F2000, v72, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::logSlowCacheRetrieveIfNeeded: Blob I/O time %.0fms", buf, 0x50u);
    }
  }
  if (v17)
  {
    uint64_t v80 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v81 = *(void *)(v20 + 88);
      if (!v81)
      {
        __break(0xC471u);
        JUMPOUT(0x198BB8A78);
      }
      uint64_t v82 = *(void *)(v20 + 80);
      uint64_t v83 = *(void *)(v20 + 96);
      uint64_t v84 = *(void *)(v20 + 3048);
      BOOL v85 = *(unsigned __int8 *)(v20 + 315) == 1;
      int v86 = *(unsigned __int8 *)(v20 + 3088);
      BOOL v87 = *(void *)(v20 + 4168) != 0;
      *(_DWORD *)long long buf = 134219776;
      uint64_t v108 = v20;
      __int16 v109 = 2048;
      uint64_t v110 = v82;
      __int16 v111 = 2048;
      uint64_t v112 = v81;
      __int16 v113 = 2048;
      uint64_t v114 = v83;
      __int16 v115 = 2048;
      uint64_t v116 = v84;
      __int16 v117 = 1024;
      BOOL v118 = v85;
      __int16 v119 = 1024;
      int v120 = v86;
      __int16 v121 = 1024;
      BOOL v122 = v87;
      _os_log_impl(&dword_1985F2000, v80, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::logSlowCacheRetrieveIfNeeded: Synchronization was in progress", buf, 0x46u);
    }
  }
  if (v18)
  {
    BOOL v88 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v89 = *(void *)(v20 + 88);
      if (!v89)
      {
        __break(0xC471u);
        JUMPOUT(0x198BB8A98);
      }
      uint64_t v90 = *(void *)(v20 + 80);
      uint64_t v91 = *(void *)(v20 + 96);
      uint64_t v92 = *(void *)(v20 + 3048);
      BOOL v93 = *(unsigned __int8 *)(v20 + 315) == 1;
      int v94 = *(unsigned __int8 *)(v20 + 3088);
      BOOL v95 = *(void *)(v20 + 4168) != 0;
      *(_DWORD *)long long buf = 134219776;
      uint64_t v108 = v20;
      __int16 v109 = 2048;
      uint64_t v110 = v90;
      __int16 v111 = 2048;
      uint64_t v112 = v89;
      __int16 v113 = 2048;
      uint64_t v114 = v91;
      __int16 v115 = 2048;
      uint64_t v116 = v92;
      __int16 v117 = 1024;
      BOOL v118 = v93;
      __int16 v119 = 1024;
      int v120 = v94;
      __int16 v121 = 1024;
      BOOL v122 = v95;
      _os_log_impl(&dword_1985F2000, v88, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::logSlowCacheRetrieveIfNeeded: Shrink was in progress", buf, 0x46u);
    }
  }
  if (!v104) {
    goto LABEL_7;
  }
  uint64_t v96 = off_1EB358988;
  if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_7;
  }
  uint64_t v97 = *(void *)(v20 + 88);
  if (!v97)
  {
    __break(0xC471u);
LABEL_58:
    JUMPOUT(0x198BB8240);
  }
  uint64_t v98 = *(void *)(v20 + 80);
  uint64_t v99 = *(void *)(v20 + 96);
  uint64_t v100 = *(void *)(v20 + 3048);
  BOOL v101 = *(unsigned __int8 *)(v20 + 315) == 1;
  int v102 = *(unsigned __int8 *)(v20 + 3088);
  BOOL v103 = *(void *)(v20 + 4168) != 0;
  *(_DWORD *)long long buf = 134219776;
  uint64_t v108 = v20;
  __int16 v109 = 2048;
  uint64_t v110 = v98;
  __int16 v111 = 2048;
  uint64_t v112 = v97;
  __int16 v113 = 2048;
  uint64_t v114 = v99;
  __int16 v115 = 2048;
  uint64_t v116 = v100;
  __int16 v117 = 1024;
  BOOL v118 = v101;
  __int16 v119 = 1024;
  int v120 = v102;
  __int16 v121 = 1024;
  BOOL v122 = v103;
  _os_log_impl(&dword_1985F2000, v96, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::logSlowCacheRetrieveIfNeeded: Retrieve was canceled", buf, 0x46u);
LABEL_7:
  if (!v3)
  {
    WebKit::NetworkResourceLoader::startNetworkLoad((WebKit::NetworkResourceLoader *)v20, (uint64_t)(a1 + 3), 1);
    return;
  }
  WebKit::NetworkResourceLoader::retrieveCacheEntryInternal(v20, (const String **)&v106, (const WebCore::ResourceRequest *)(a1 + 3));
  long long v3 = v106;
LABEL_9:
  if (v3)
  {
    WebKit::NetworkCache::Entry::~Entry((WebKit::NetworkCache::Entry *)v3, a2);
    WTF::fastFree(v30, v31);
  }
}

unsigned char *IPC::ArgumentCoder<std::tuple<WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, *(WebCore::ResourceResponseBase **)a2);
  char v4 = *(unsigned char *)(a2 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6 || (*uint64_t v5 = v4, v7 = *(unsigned char *)(a2 + 9), v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1), !v9))
  {
    __break(0xC471u);
    JUMPOUT(0x198BB8B5CLL);
  }
  *int v8 = v7;
  uint64_t v10 = *(void *)(a2 + 16);

  return IPC::ArgumentCoder<std::optional<WebCore::NetworkLoadMetrics>,void>::encode<IPC::Encoder,std::optional<WebCore::NetworkLoadMetrics> const&>(a1, v10);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C6228;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C6228;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[2];
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v3 = a1[1];
    char v4 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(v3 + 88);
      if (!v5)
      {
        __break(0xC471u);
        JUMPOUT(0x198BB8EF0);
      }
      uint64_t v6 = *(void *)(v3 + 80);
      uint64_t v7 = *(void *)(v3 + 96);
      uint64_t v8 = *(void *)(v3 + 3048);
      BOOL v9 = *(unsigned __int8 *)(v3 + 315) == 1;
      int v10 = *(unsigned __int8 *)(v3 + 3088);
      BOOL v11 = *(void *)(v3 + 4168) != 0;
      int v16 = 134219776;
      uint64_t v17 = v3;
      __int16 v18 = 2048;
      uint64_t v19 = v6;
      __int16 v20 = 2048;
      uint64_t v21 = v5;
      __int16 v22 = 2048;
      uint64_t v23 = v7;
      __int16 v24 = 2048;
      uint64_t v25 = v8;
      __int16 v26 = 1024;
      BOOL v27 = v9;
      __int16 v28 = 1024;
      int v29 = v10;
      __int16 v30 = 1024;
      BOOL v31 = v11;
      _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::processClearSiteDataHeader: END", (uint8_t *)&v16, 0x46u);
    }
    uint64_t v12 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    return (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  else
  {
    uint64_t v14 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
    uint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 8);
    return v15(v14);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C6250;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C6250;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::DeleteWebsiteDataInWebProcessesForOrigin,WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_2>(WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_2 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C6278;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::DeleteWebsiteDataInWebProcessesForOrigin,WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_2>(WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_2 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C6278;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::ReloadExecutionContextsForOrigin,WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_3>(WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_3 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C62A0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::ReloadExecutionContextsForOrigin,WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_3>(WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_3 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C62A0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_2,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C62C8;
  uint64_t v3 = (const void *)a1[10];
  a1[10] = 0;
  if (v3) {
    CFRelease(v3);
  }
  char v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = a1[1];
  a1[1] = 0;
  if (v7) {
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v7 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_2,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v2 = (WTF *)WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_2,void>::~CallableWrapper(a1, a2);

  return WTF::fastFree(v2, v3);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_2,void>::call(uint64_t a1)
{
  uint64_t result = *(uint64_t **)(a1 + 8);
  if (result[485]) {
    return WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)result, (const WebCore::ResourceError *)(a1 + 16));
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_3,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C62F0;
  uint64_t v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v4 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_3,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C62F0;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v4 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_3,void>::call(WTF::StringImpl *result)
{
  uint64_t v1 = (WebKit::NetworkResourceLoader *)*((void *)result + 1);
  if (*((void *)v1 + 485))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(MEMORY[0x1E4FB64F8] + 8);
    if (v3)
    {
      if (v3 == 1)
      {
        uint64_t v4 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
        *MEMORY[0x1E4F30960] += 2;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v5 = v13;
        goto LABEL_5;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v4 = v13;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v5 = v13;
      if (v13)
      {
LABEL_5:
        char v6 = 0;
        *(_DWORD *)v4 += 2;
        goto LABEL_6;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v4 = 0;
      uint64_t v5 = v13;
    }
    char v6 = 1;
LABEL_6:
    double v13 = v4;
    uint64_t v7 = (WTF::StringImpl *)*((void *)v2 + 2);
    if (v7) {
      *(_DWORD *)v7 += 2;
    }
    uint64_t v14 = v7;
    long long v8 = *(_OWORD *)((char *)v2 + 40);
    long long v15 = *(_OWORD *)((char *)v2 + 24);
    long long v16 = v8;
    if (v5) {
      *(_DWORD *)v5 += 2;
    }
    uint64_t v17 = v5;
    int v18 = 0;
    __int16 v19 = 2;
    CFTypeRef cf = 0;
    char v21 = 1;
    WebKit::NetworkResourceLoader::didFailLoading(v1, (const WebCore::ResourceError *)&v13);
    CFTypeRef v10 = cf;
    CFTypeRef cf = 0;
    if (v10) {
      CFRelease(v10);
    }
    BOOL v11 = v17;
    uint64_t v17 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = v14;
    uint64_t v14 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v9);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t result = v13;
    double v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        if (!v5) {
          goto LABEL_28;
        }
LABEL_26:
        if (*(_DWORD *)v5 == 2)
        {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v9);
          if (v6) {
            return result;
          }
          goto LABEL_31;
        }
        *(_DWORD *)v5 -= 2;
LABEL_28:
        if (v6) {
          return result;
        }
LABEL_31:
        if (*(_DWORD *)v4 == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v9);
        }
        *(_DWORD *)v4 -= 2;
        return result;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v5) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_4,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C6318;
  uint64_t v3 = (const void *)a1[10];
  a1[10] = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  char v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = a1[1];
  a1[1] = 0;
  if (v7) {
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v7 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_4,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v2 = (WTF *)WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_4,void>::~CallableWrapper(a1, a2);

  return WTF::fastFree(v2, v3);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_4,void>::call(uint64_t a1)
{
  uint64_t result = *(uint64_t **)(a1 + 8);
  if (result[485]) {
    return WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)result, (const WebCore::ResourceError *)(a1 + 16));
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_5,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C6340;
  uint64_t v3 = a1[19];
  a1[19] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[16];
  a1[16] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[11];
  a1[11] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[2];
  a1[2] = 0;
  if (v6) {
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v6 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_5,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C6340;
  uint64_t v3 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6) {
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v6 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_5,void>::call(uint64_t a1)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf, (const WebCore::ResourceResponseBase *)(v2 + 3888));
  uint64_t v3 = *(const void **)(v2 + 4128);
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  char v80 = *(unsigned char *)(v2 + 4136);
  WebKit::NetworkResourceLoader::sanitizeResponseIfPossible((uint64_t)v63, v2, (uint64_t)buf);
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v4);
  uint64_t v6 = *(void *)(v2 + 4168);
  if (v6)
  {
    int v29 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = *(void *)(v2 + 88);
      if (!v30)
      {
        __break(0xC471u);
        JUMPOUT(0x198BB9F18);
      }
      uint64_t v31 = *(void *)(v2 + 80);
      uint64_t v32 = *(void *)(v2 + 96);
      uint64_t v33 = *(void *)(v2 + 3048);
      BOOL v34 = *(unsigned __int8 *)(v2 + 315) == 1;
      int v35 = *(unsigned __int8 *)(v2 + 3088);
      *(_DWORD *)long long buf = 134219776;
      *(void *)&uint8_t buf[4] = v2;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v31;
      *(_WORD *)&unsigned char buf[22] = 2048;
      uint64_t v66 = v30;
      __int16 v67 = 2048;
      uint64_t v68 = v32;
      __int16 v69 = 2048;
      uint64_t v70 = v33;
      __int16 v71 = 1024;
      BOOL v72 = v34;
      __int16 v73 = 1024;
      int v74 = v35;
      __int16 v75 = 1024;
      int v76 = 1;
      _os_log_impl(&dword_1985F2000, v29, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Using response for synchronous load", buf, 0x46u);
      uint64_t v6 = *(void *)(v2 + 4168);
    }
    WebCore::ResourceResponse::operator=(v6 + 208, (uint64_t)v63);
    goto LABEL_17;
  }
  if (WebKit::NetworkResourceLoader::isCrossOriginPrefetch((WebKit::NetworkResourceLoader *)v2))
  {
    uint64_t v36 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v37 = *(void *)(v2 + 88);
      if (!v37)
      {
        __break(0xC471u);
        JUMPOUT(0x198BB9F38);
      }
      uint64_t v38 = *(void *)(v2 + 80);
      uint64_t v39 = *(void *)(v2 + 96);
      uint64_t v40 = *(void *)(v2 + 3048);
      BOOL v41 = *(unsigned __int8 *)(v2 + 315) == 1;
      int v42 = *(unsigned __int8 *)(v2 + 3088);
      BOOL v43 = *(void *)(v2 + 4168) != 0;
      *(_DWORD *)long long buf = 134219776;
      *(void *)&uint8_t buf[4] = v2;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v38;
      *(_WORD *)&unsigned char buf[22] = 2048;
      uint64_t v66 = v37;
      __int16 v67 = 2048;
      uint64_t v68 = v39;
      __int16 v69 = 2048;
      uint64_t v70 = v40;
      __int16 v71 = 1024;
      BOOL v72 = v41;
      __int16 v73 = 1024;
      int v74 = v42;
      __int16 v75 = 1024;
      int v76 = v43;
      _os_log_impl(&dword_1985F2000, v36, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Using response for cross-origin prefetch", buf, 0x46u);
    }
    WebCore::ResourceResponseBase::httpHeaderField();
    if (!*(void *)buf) {
      goto LABEL_17;
    }
    uint64_t v45 = WTF::StringImpl::find();
    int v46 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2) {
        WTF::StringImpl::destroy(v46, v44);
      }
      else {
        *(_DWORD *)v46 -= 2;
      }
    }
    if (v45 == -1) {
      goto LABEL_17;
    }
    BOOL v47 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v48 = *(void *)(v2 + 88);
      if (!v48) {
        goto LABEL_51;
      }
      uint64_t v49 = *(void *)(v2 + 80);
      uint64_t v50 = *(void *)(v2 + 96);
      uint64_t v51 = *(void *)(v2 + 3048);
      BOOL v52 = *(unsigned __int8 *)(v2 + 315) == 1;
      int v53 = *(unsigned __int8 *)(v2 + 3088);
      BOOL v54 = *(void *)(v2 + 4168) != 0;
      *(_DWORD *)long long buf = 134219776;
      *(void *)&uint8_t buf[4] = v2;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v49;
      *(_WORD *)&unsigned char buf[22] = 2048;
      uint64_t v66 = v48;
      __int16 v67 = 2048;
      uint64_t v68 = v50;
      __int16 v69 = 2048;
      uint64_t v70 = v51;
      __int16 v71 = 1024;
      BOOL v72 = v52;
      __int16 v73 = 1024;
      int v74 = v53;
      __int16 v75 = 1024;
      int v76 = v54;
      _os_log_impl(&dword_1985F2000, v47, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Canceling cross-origin prefetch for Vary: Cookie", buf, 0x46u);
    }
    WebKit::NetworkResourceLoader::abort((WebKit::NetworkResourceLoader *)v2);
    goto LABEL_42;
  }
  int v7 = *(unsigned __int8 *)(v2 + 315);
  long long v8 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(v2 + 88);
    if (v9)
    {
      uint64_t v10 = *(void *)(v2 + 80);
      uint64_t v11 = *(void *)(v2 + 96);
      uint64_t v12 = *(void *)(v2 + 3048);
      int v13 = *(unsigned __int8 *)(v2 + 3088);
      BOOL v14 = *(void *)(v2 + 4168) != 0;
      *(_DWORD *)long long buf = 134220032;
      *(void *)&uint8_t buf[4] = v2;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v10;
      *(_WORD *)&unsigned char buf[22] = 2048;
      uint64_t v66 = v9;
      __int16 v67 = 2048;
      uint64_t v68 = v11;
      __int16 v69 = 2048;
      uint64_t v70 = v12;
      __int16 v71 = 1024;
      BOOL v72 = v7 == 1;
      __int16 v73 = 1024;
      int v74 = v13;
      __int16 v75 = 1024;
      int v76 = v14;
      __int16 v77 = 1024;
      BOOL v78 = v72;
      _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Sending WebResourceLoader::DidReceiveResponse IPC (willWaitForContinueDidReceiveResponse=%d)", buf, 0x4Cu);
      goto LABEL_10;
    }
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x198BB9C00);
  }
LABEL_10:
  WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup((WebCore::ResourceResponse *)v2, (WebCore::ResourceResponseBase *)v63, *(unsigned char *)(a1 + 24), v7 == 1);
  if (*(unsigned char *)(v2 + 3352) || *(unsigned char *)(v2 + 3864))
  {
    uint64_t v55 = *(void *)(*(void *)(*(void *)(v2 + 3872) + 80) + 40);
    *(void *)long long buf = v2 + 80;
    *(void *)&buf[8] = a1 + 32;
    *(void *)&buf[16] = v63;
    IPC::Connection::send<Messages::NetworkProcessProxy::ResourceLoadDidReceiveResponse>(v55, (uint64_t)buf);
  }
  if (v7 != 1)
  {
    int v16 = *(unsigned __int8 *)(v2 + 4345);
    uint64_t v17 = off_1EB358988;
    BOOL v18 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
    if (!v16)
    {
      if (v18)
      {
        uint64_t v19 = *(void *)(v2 + 88);
        if (!v19)
        {
          __break(0xC471u);
          JUMPOUT(0x198BB9C20);
        }
        uint64_t v20 = *(void *)(v2 + 80);
        uint64_t v21 = *(void *)(v2 + 96);
        uint64_t v22 = *(void *)(v2 + 3048);
        BOOL v23 = *(unsigned __int8 *)(v2 + 315) == 1;
        int v24 = *(unsigned __int8 *)(v2 + 3088);
        BOOL v25 = *(void *)(v2 + 4168) != 0;
        *(_DWORD *)long long buf = 134219776;
        *(void *)&uint8_t buf[4] = v2;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v20;
        *(_WORD *)&unsigned char buf[22] = 2048;
        uint64_t v66 = v19;
        __int16 v67 = 2048;
        uint64_t v68 = v21;
        __int16 v69 = 2048;
        uint64_t v70 = v22;
        __int16 v71 = 1024;
        BOOL v72 = v23;
        __int16 v73 = 1024;
        int v74 = v24;
        __int16 v75 = 1024;
        int v76 = v25;
        _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Using response", buf, 0x46u);
      }
LABEL_17:
      uint64_t v26 = *(void *)(a1 + 152);
      *(void *)(a1 + 152) = 0;
      (*(void (**)(uint64_t, void))(*(void *)v26 + 16))(v26, 0);
LABEL_18:
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      goto LABEL_19;
    }
    if (v18)
    {
      uint64_t v56 = *(void *)(v2 + 88);
      if (!v56)
      {
        __break(0xC471u);
        JUMPOUT(0x198BB9F58);
      }
      uint64_t v57 = *(void *)(v2 + 80);
      uint64_t v58 = *(void *)(v2 + 96);
      uint64_t v59 = *(void *)(v2 + 3048);
      BOOL v60 = *(unsigned __int8 *)(v2 + 315) == 1;
      int v61 = *(unsigned __int8 *)(v2 + 3088);
      BOOL v62 = *(void *)(v2 + 4168) != 0;
      *(_DWORD *)long long buf = 134219776;
      *(void *)&uint8_t buf[4] = v2;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v57;
      *(_WORD *)&unsigned char buf[22] = 2048;
      uint64_t v66 = v56;
      __int16 v67 = 2048;
      uint64_t v68 = v58;
      __int16 v69 = 2048;
      uint64_t v70 = v59;
      __int16 v71 = 1024;
      BOOL v72 = v60;
      __int16 v73 = 1024;
      int v74 = v61;
      __int16 v75 = 1024;
      int v76 = v62;
      _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Ignoring response because of keepalive option", buf, 0x46u);
    }
LABEL_42:
    uint64_t v26 = *(void *)(a1 + 152);
    *(void *)(a1 + 152) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, 2);
    goto LABEL_18;
  }
  uint64_t v28 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  uint64_t v26 = *(void *)(v2 + 4336);
  *(void *)(v2 + 4336) = v28;
  if (v26) {
    goto LABEL_18;
  }
LABEL_19:
  CFTypeRef v27 = v64;
  CFTypeRef v64 = 0;
  if (v27) {
    CFRelease(v27);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v63, v15);
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkProcessProxy::ResourceLoadDidReceiveResponse>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 351;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode(v4, *(void *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v4, *(WebCore::ResourceResponseBase **)(a2 + 16));
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::TriggerBrowsingContextGroupSwitchForNavigation,WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup(WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL)::$_0>(WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup(WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C6368;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::TriggerBrowsingContextGroupSwitchForNavigation,WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup(WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL)::$_0>(WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup(WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C6368;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::TriggerBrowsingContextGroupSwitchForNavigation,WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup(WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL)::$_0>(WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup(WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 <= 0xFFu)
    {
      uint64_t v8 = *a2;
      uint64_t v9 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v10 = a2[3];
      if (v10 && v9) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
      }
    }
    else if ((_BYTE)v4)
    {
      return;
    }
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      WebKit::NetworkSession::removeLoaderWaitingWebProcessTransfer(v6, v7);
    }
  }
}

void WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::willSendServiceWorkerRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&)::$_0,void,WebCore::ResourceRequest &>::call(uint64_t a1, uint64_t a2)
{
  WTF::URL::URL((uint64_t)v10, (uint64_t *)a2);
  WTF::URL::URL((uint64_t)v11, (uint64_t *)(a2 + 40));
  v11[5] = *(void *)(a2 + 80);
  long long v3 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a2 + 8++*(_DWORD *)(this + 8) = 0u;
  long long v12 = v3;
  *(void *)&long long v3 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  uint64_t v13 = v3;
  uint64_t v4 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v14 = v4;
  *(void *)&long long v3 = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  uint64_t v15 = v3;
  uint64_t v5 = *(void *)(a2 + 128);
  *(void *)(a2 + 12++*(_DWORD *)(this + 8) = 0;
  uint64_t v16 = v5;
  *(void *)&long long v3 = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  uint64_t v17 = v3;
  LODWORD(v5) = *(_DWORD *)(a2 + 144);
  char v19 = *(unsigned char *)(a2 + 148);
  int v18 = v5;
  long long v6 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a2 + 152) = 0u;
  long long v20 = v6;
  char v23 = *(unsigned char *)(a2 + 184);
  uint64_t v7 = *(void *)(a2 + 168);
  uint64_t v8 = *(void *)(a2 + 176);
  *(void *)(a2 + 16++*(_DWORD *)(this + 8) = 0;
  uint64_t v21 = v7;
  uint64_t v22 = v8;
  uint64_t v9 = *(const void **)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  uint64_t v24 = 0;
  if (v9) {
    CFRelease(v9);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v10);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,WebKit::NetworkResourceLoader::IsFromServiceWorker,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C63B8;
  uint64_t v3 = a1[21];
  a1[21] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 4), a2);
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v5 + 8), v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,WebKit::NetworkResourceLoader::IsFromServiceWorker,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C63B8;
  uint64_t v3 = *((void *)a1 + 21);
  *((void *)a1 + WebKit::NetworkResourceLoader::startRequest((WebKit::NetworkResourceLoader *)this, this + 21) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 32, a2);
  uint64_t v5 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v5) {
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v5 + 8), v4);
  }

  return WTF::fastFree(a1, v4);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,WebKit::NetworkResourceLoader::IsFromServiceWorker,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(_DWORD *)(a2 + 656);
  if (!v5)
  {
    uint64_t v14 = *(void *)(v4 + 3880);
    if (v14)
    {
      uint64_t v15 = *(void *)(v4 + 4320);
      if (v15)
      {
        if (*(unsigned char *)(v15 + 1160))
        {
          uint64_t v16 = *(void *)(v14 + 3008);
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 88))(v16);
          }
        }
      }
    }
    uint64_t v17 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(v4 + 88);
      if (!v18)
      {
LABEL_56:
        __break(0xC471u);
        JUMPOUT(0x198BBAAF0);
      }
      uint64_t v19 = *(void *)(v4 + 80);
      uint64_t v20 = *(void *)(v4 + 96);
      uint64_t v21 = *(void *)(v4 + 3048);
      BOOL v22 = *(unsigned __int8 *)(v4 + 315) == 1;
      int v23 = *(unsigned __int8 *)(v4 + 3088);
      BOOL v24 = *(void *)(v4 + 4168) != 0;
      *(_DWORD *)long long buf = 134219776;
      *(void *)&uint8_t buf[4] = v4;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v19;
      __int16 v66 = 2048;
      uint64_t v67 = v18;
      __int16 v68 = 2048;
      uint64_t v69 = v20;
      __int16 v70 = 2048;
      uint64_t v71 = v21;
      __int16 v72 = 1024;
      BOOL v73 = v22;
      __int16 v74 = 1024;
      int v75 = v23;
      __int16 v76 = 1024;
      int v77 = v24;
      _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::willSendRedirectedRequest: NetworkLoadChecker::checkRedirection is done", buf, 0x46u);
    }
    if (*(unsigned char *)(v4 + 3092) == 2)
    {
      if (!*(_DWORD *)(a2 + 656))
      {
        BOOL v25 = off_1EB358988;
        if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v26 = *(void *)(v4 + 88);
          if (!v26)
          {
            __break(0xC471u);
            JUMPOUT(0x198BBAB30);
          }
          uint64_t v27 = *(void *)(v4 + 80);
          uint64_t v28 = *(void *)(v4 + 96);
          uint64_t v29 = *(void *)(v4 + 3048);
          BOOL v30 = *(unsigned __int8 *)(v4 + 315) == 1;
          int v31 = *(unsigned __int8 *)(v4 + 3088);
          BOOL v32 = *(void *)(v4 + 4168) != 0;
          *(_DWORD *)long long buf = 134219776;
          *(void *)&uint8_t buf[4] = v4;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v27;
          __int16 v66 = 2048;
          uint64_t v67 = v26;
          __int16 v68 = 2048;
          uint64_t v69 = v28;
          __int16 v70 = 2048;
          uint64_t v71 = v29;
          __int16 v72 = 1024;
          BOOL v73 = v30;
          __int16 v74 = 1024;
          int v75 = v31;
          __int16 v76 = 1024;
          int v77 = v32;
          _os_log_impl(&dword_1985F2000, v25, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didFinishWithRedirectResponse:", buf, 0x46u);
        }
        WebCore::ResourceResponseBase::setType();
        if (WebKit::NetworkResourceLoader::isCrossOriginPrefetch((WebKit::NetworkResourceLoader *)v4))
        {
          uint64_t v33 = *(void *)(v4 + 3872);
          uint64_t v34 = *(void *)(v33 + 80);
          *(void *)long long buf = *(void *)(v33 + 88);
          uint64_t v35 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v34 + 224), buf);
          if (v35)
          {
            uint64_t v36 = v35 + 520;
            uint64_t v37 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
            WebKit::PrefetchCache::storeRedirect(v36, v37, a2 + 400, (WebCore::ResourceRequestBase *)(a2 + 200));
          }
        }
        else
        {
          uint64_t v40 = (void *)WTF::fastMalloc((WTF *)0x10);
          *uint64_t v40 = &unk_1EE9C6408;
          *(void *)long long buf = v40;
          WebKit::NetworkResourceLoader::didReceiveResponse(v4, a2 + 400, 0, (uint64_t *)buf);
          if (*(void *)buf) {
            (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
          }
        }
        WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)buf);
        v79 |= 1u;
        uint64_t v80 = 0;
        uint64_t v81 = 0;
        uint64_t v41 = *(void *)(v4 + 4392);
        if (v41)
        {
          uint64_t v42 = *(void *)(v41 + 280);
          if (v42) {
            uint64_t v43 = *(void *)(v42 + 3544);
          }
          else {
            uint64_t v43 = 0;
          }
          *(void *)&buf[8] = v43;
        }
        CFTypeRef v64 = buf;
        IPC::MessageSender::send<Messages::WebResourceLoader::DidFinishResourceLoad>(v4 + 16, (uint64_t *)&v64);
        WebKit::NetworkResourceLoader::cleanup(v4, 1);
        int v53 = v82;
        uint64_t v82 = 0;
        if (v53) {
          WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v53);
        }
        BOOL v54 = v78;
        BOOL v78 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2) {
            WTF::StringImpl::destroy(v54, v52);
          }
          else {
            *(_DWORD *)v54 -= 2;
          }
        }
        goto LABEL_50;
      }
    }
    else
    {
      int v38 = *(unsigned __int8 *)(a1 + 24);
      int v39 = *(unsigned __int8 *)(*(void *)(v4 + 4320) + 64);
      if (*(void *)(v4 + 4168))
      {
        if (v38 == v39)
        {
          if (!*(_DWORD *)(a2 + 656))
          {
            WebKit::NetworkResourceLoader::continueWillSendRequest(v4, (const WebCore::ResourceRequest *)(a2 + 200), 0, (uint64_t *)(a1 + 168));
            return;
          }
        }
        else
        {
          uint64_t v44 = off_1EB358988;
          if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v46 = *(void *)(v4 + 88);
            if (!v46)
            {
              __break(0xC471u);
              JUMPOUT(0x198BBAB50);
            }
            uint64_t v47 = *(void *)(v4 + 80);
            uint64_t v48 = *(void *)(v4 + 96);
            uint64_t v49 = *(void *)(v4 + 3048);
            BOOL v50 = *(unsigned __int8 *)(v4 + 315) == 1;
            int v51 = *(unsigned __int8 *)(v4 + 3088);
            *(_DWORD *)long long buf = 134219776;
            *(void *)&uint8_t buf[4] = v4;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v47;
            __int16 v66 = 2048;
            uint64_t v67 = v46;
            __int16 v68 = 2048;
            uint64_t v69 = v48;
            __int16 v70 = 2048;
            uint64_t v71 = v49;
            __int16 v72 = 1024;
            BOOL v73 = v50;
            __int16 v74 = 1024;
            int v75 = v51;
            __int16 v76 = 1024;
            int v77 = 1;
            _os_log_impl(&dword_1985F2000, v44, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::willSendRedirectedRequest: Restarting network load due to credential policy change for synchronous load", buf, 0x46u);
          }
          if (!*(_DWORD *)(a2 + 656))
          {
            WebKit::NetworkResourceLoader::restartNetworkLoad(v4, (WebCore::ResourceRequestBase *)(a2 + 200), (uint64_t *)(a1 + 168));
            return;
          }
        }
      }
      else
      {
        *(unsigned char *)(v4 + 432++*(_DWORD *)(this + 8) = v38 != v39;
        if (!*(_DWORD *)(a2 + 656))
        {
          WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(v4, (WebCore *)a2, (WebCore::ResourceRequestBase *)(a2 + 200), a2 + 400, a1 + 32, (uint64_t *)(a1 + 168));
          return;
        }
      }
    }
LABEL_55:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_56;
  }
  if (v5 != 1) {
    goto LABEL_55;
  }
  long long v6 = off_1EB358988;
  if (*(unsigned char *)(a2 + 60) == 3)
  {
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(v4 + 88);
      if (!v7)
      {
        __break(0xC471u);
        JUMPOUT(0x198BBAB10);
      }
      uint64_t v8 = *(void *)(v4 + 80);
      uint64_t v9 = *(void *)(v4 + 96);
      uint64_t v10 = *(void *)(v4 + 3048);
      BOOL v11 = *(unsigned __int8 *)(v4 + 315) == 1;
      int v12 = *(unsigned __int8 *)(v4 + 3088);
      BOOL v13 = *(void *)(v4 + 4168) != 0;
      *(_DWORD *)long long buf = 134219776;
      *(void *)&uint8_t buf[4] = v4;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v8;
      __int16 v66 = 2048;
      uint64_t v67 = v7;
      __int16 v68 = 2048;
      uint64_t v69 = v9;
      __int16 v70 = 2048;
      uint64_t v71 = v10;
      __int16 v72 = 1024;
      BOOL v73 = v11;
      __int16 v74 = 1024;
      int v75 = v12;
      __int16 v76 = 1024;
      int v77 = v13;
      _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::willSendRedirectedRequest: NetworkLoadChecker::checkRedirection returned with a cancellation", buf, 0x46u);
    }
    goto LABEL_50;
  }
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
  {
    uint64_t v57 = *(void *)(v4 + 88);
    if (!v57)
    {
      __break(0xC471u);
      JUMPOUT(0x198BBAB70);
    }
    uint64_t v58 = *(void *)(v4 + 80);
    uint64_t v59 = *(void *)(v4 + 96);
    uint64_t v60 = *(void *)(v4 + 3048);
    BOOL v61 = *(unsigned __int8 *)(v4 + 315) == 1;
    int v62 = *(unsigned __int8 *)(v4 + 3088);
    BOOL v63 = *(void *)(v4 + 4168) != 0;
    *(_DWORD *)long long buf = 134219776;
    *(void *)&uint8_t buf[4] = v4;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v58;
    __int16 v66 = 2048;
    uint64_t v67 = v57;
    __int16 v68 = 2048;
    uint64_t v69 = v59;
    __int16 v70 = 2048;
    uint64_t v71 = v60;
    __int16 v72 = 1024;
    BOOL v73 = v61;
    __int16 v74 = 1024;
    int v75 = v62;
    __int16 v76 = 1024;
    int v77 = v63;
    _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::willSendRedirectedRequest: NetworkLoadChecker::checkRedirection returned an error", buf, 0x46u);
    if (*(_DWORD *)(a2 + 656) != 1) {
      goto LABEL_55;
    }
  }
  WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)v4, (const WebCore::ResourceError *)a2);
LABEL_50:
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)buf);
  uint64_t v55 = *(void *)(a1 + 168);
  *(void *)(a1 + 16++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v55 + 16))(v55, buf);
  (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
  CFTypeRef v56 = cf;
  CFTypeRef cf = 0;
  if (v56) {
    CFRelease(v56);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
}

void *WTF::Detail::CallableWrapper<std::optional<WebCore::PCM::AttributionTriggerData><void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebResourceLoader::WillSendRequest,WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,std::optional<WebCore::PCM::AttributionTriggerData> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>(WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,std::optional<WebCore::PCM::AttributionTriggerData> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &)#1},void,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C63E0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::optional<WebCore::PCM::AttributionTriggerData><void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebResourceLoader::WillSendRequest,WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,std::optional<WebCore::PCM::AttributionTriggerData> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>(WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,std::optional<WebCore::PCM::AttributionTriggerData> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &)#1},void,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C63E0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<std::optional<WebCore::PCM::AttributionTriggerData><void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebResourceLoader::WillSendRequest,WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,std::optional<WebCore::PCM::AttributionTriggerData> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>(WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,std::optional<WebCore::PCM::AttributionTriggerData> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &)#1},void,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &>::call(uint64_t *a1, IPC::Decoder *a2)
{
  uint64_t v2 = a1 + 1;
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<WebCore::ResourceRequest>(a2, (uint64_t)v27);
    char v5 = v29;
    if (!v29)
    {
LABEL_15:
      v24[0] = 0;
      goto LABEL_16;
    }
    unint64_t v6 = *((void *)a2 + 1);
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *((void *)a2 + 2) - *(void *)a2;
    if (v6 <= v8)
    {
      unint64_t v13 = 0;
      uint64_t v14 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v15 = *((void *)a2 + 3);
      if (v15)
      {
        if (v6)
        {
          (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
          uint64_t v14 = *(void *)a2;
          unint64_t v13 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v13 = 0;
          uint64_t v14 = 0;
        }
      }
    }
    else
    {
      uint64_t v9 = (unsigned __int8 *)(v7 + v8);
      *((void *)a2 + 2) = v9 + 1;
      if (v7)
      {
        unsigned int v10 = *v9;
        if (v10 < 2)
        {
          BOOL v11 = v10 != 0;
          std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v24, (uint64_t)v27);
          BOOL v25 = v11;
          char v5 = 1;
LABEL_16:
          char v26 = v5;
          std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v27);
          if (v26
            || (uint64_t v21 = *(void *)a2,
                uint64_t v22 = *((void *)a2 + 1),
                *(void *)a2 = 0,
                *((void *)a2 + 1) = 0,
                (uint64_t v23 = *((void *)a2 + 3)) != 0)
            && v22
            && ((*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v21), v26))
          {
            uint64_t v18 = a1[2];
            if (v18 && *(void *)(v18 + 8))
            {
              WebKit::NetworkResourceLoader::continueWillSendRequest(a1[1], (const WebCore::ResourceRequest *)v24, v25, a1 + 3);
            }
            else
            {
              WebCore::ResourceRequest::ResourceRequest((StringImpl *)v27);
              uint64_t v19 = a1[3];
              a1[3] = 0;
              (*(void (**)(uint64_t, unsigned char *))(*(void *)v19 + 16))(v19, v27);
              (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
              CFTypeRef v20 = cf;
              CFTypeRef cf = 0;
              if (v20) {
                CFRelease(v20);
              }
              WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v27);
            }
            std::__optional_destruct_base<std::tuple<WebCore::ResourceRequest,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v24);
          }
          else
          {
            std::__optional_destruct_base<std::tuple<WebCore::ResourceRequest,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v24);
            IPC::Connection::cancelReply<Messages::WebResourceLoader::WillSendRequest,WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,std::optional<WebCore::PCM::AttributionTriggerData> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>(v2);
          }
          return;
        }
        goto LABEL_13;
      }
      unint64_t v13 = v6;
      uint64_t v14 = 0;
    }
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v16 = *((void *)a2 + 3);
    if (v16)
    {
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14, v13);
        uint64_t v7 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v7 = 0;
      }
    }
LABEL_13:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v17 = *((void *)a2 + 3);
    if (v17 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v7);
    }
    char v5 = 0;
    goto LABEL_15;
  }
  int v12 = a1 + 1;

  IPC::Connection::cancelReply<Messages::WebResourceLoader::WillSendRequest,WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,std::optional<WebCore::PCM::AttributionTriggerData> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>(v12);
}

void IPC::Connection::cancelReply<Messages::WebResourceLoader::WillSendRequest,WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,std::optional<WebCore::PCM::AttributionTriggerData> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>(uint64_t *a1)
{
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)v6);
  uint64_t v2 = a1[1];
  if (v2 && *(void *)(v2 + 8))
  {
    WebKit::NetworkResourceLoader::continueWillSendRequest(*a1, (const WebCore::ResourceRequest *)v6, 0, a1 + 2);
  }
  else
  {
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)v8);
    uint64_t v3 = a1[2];
    a1[2] = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v8);
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    CFTypeRef v4 = v9;
    CFTypeRef v9 = 0;
    if (v4) {
      CFRelease(v4);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v8);
  }
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v6);
}

WebCore::ResourceRequestBase *std::__optional_destruct_base<std::tuple<WebCore::ResourceRequest,BOOL>,false>::~__optional_destruct_base[abi:sn180100](WebCore::ResourceRequestBase *this)
{
  if (*((unsigned char *)this + 208))
  {
    uint64_t v2 = (const void *)*((void *)this + 24);
    *((void *)this + 24) = 0;
    if (v2) {
      CFRelease(v2);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase(this);
  }
  return this;
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebResourceLoader::DidSendData>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v6 = 2715;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unsigned int v10 = v6;
  uint64_t v7 = (IPC::Encoder *)IPC::Encoder::operator<<<unsigned long long>(v6, a2);
  IPC::Encoder::operator<<<unsigned long long>(v7, a2 + 1);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v10, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v10, v8);
}

unint64_t IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<IPC::SharedBufferReference const&,unsigned long long>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode(a1, *(IPC::SharedBufferReference **)a2);
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t result = IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(void *)unint64_t result = v4;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::tryStoreAsCacheEntry(void)::$_0,void,WebKit::NetworkCache::MappedBody &&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9C6430;
  a1[1] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v3 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::tryStoreAsCacheEntry(void)::$_0,void,WebKit::NetworkCache::MappedBody &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C6430;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::tryStoreAsCacheEntry(void)::$_0,void,WebKit::NetworkCache::MappedBody &&>::call(IPC::Encoder *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 32))
  {
    unint64_t v2 = a2 + 8;
    uint64_t v3 = (void *)*((void *)result + 1);
    uint64_t v4 = v3[2];
    v3 += 2;
    uint64_t v5 = (*(uint64_t (**)(void *))(v4 + 56))(v3);
    unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v6 = 307;
    *((void *)v6 + 1) = v5;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    unsigned int v10 = v6;
    IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v6, (WebCore::ResourceRequest *)(v3 + 19));
    IPC::ArgumentCoder<WebCore::ShareableResourceHandle,void>::encode(v6, v2);
    (*(void (**)(void *, IPC::Encoder **, void))(*v3 + 32))(v3, &v10, 0);
    unint64_t result = v10;
    unsigned int v10 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v7);
      return (IPC::Encoder *)WTF::fastFree(v8, v9);
    }
  }
  return result;
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebResourceLoader::DidReceiveResource>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v6 = 2713;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  CFTypeRef v9 = v6;
  IPC::ArgumentCoder<WebCore::ShareableResourceHandle,void>::encode(v6, *a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v9, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v9, v7);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::dispatchWillSendRequestForCacheEntry(WebCore::ResourceRequest &&,std::unique_ptr<WebKit::NetworkCache::Entry,WebCore::ResourceRequest &&::default_delete<WebKit::NetworkCache>> &&)::$_0,void,WebCore::ResourceRequest &>::call(uint64_t a1, uint64_t a2)
{
  WTF::URL::URL((uint64_t)v10, (uint64_t *)a2);
  WTF::URL::URL((uint64_t)v11, (uint64_t *)(a2 + 40));
  v11[5] = *(void *)(a2 + 80);
  long long v3 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a2 + 8++*(_DWORD *)(this + 8) = 0u;
  long long v12 = v3;
  *(void *)&long long v3 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  uint64_t v13 = v3;
  uint64_t v4 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v14 = v4;
  *(void *)&long long v3 = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  uint64_t v15 = v3;
  uint64_t v5 = *(void *)(a2 + 128);
  *(void *)(a2 + 12++*(_DWORD *)(this + 8) = 0;
  uint64_t v16 = v5;
  *(void *)&long long v3 = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  uint64_t v17 = v3;
  LODWORD(v5) = *(_DWORD *)(a2 + 144);
  char v19 = *(unsigned char *)(a2 + 148);
  int v18 = v5;
  long long v6 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a2 + 152) = 0u;
  long long v20 = v6;
  char v23 = *(unsigned char *)(a2 + 184);
  uint64_t v7 = *(void *)(a2 + 168);
  uint64_t v8 = *(void *)(a2 + 176);
  *(void *)(a2 + 16++*(_DWORD *)(this + 8) = 0;
  uint64_t v21 = v7;
  uint64_t v22 = v8;
  CFTypeRef v9 = *(const void **)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  uint64_t v24 = 0;
  if (v9) {
    CFRelease(v9);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v10);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::serviceWorkerDidNotHandle(WebKit::ServiceWorkerFetchTask *)::$_0,void,WebCore::ResourceRequest &&>::call(uint64_t a1, uint64_t a2)
{
  WTF::URL::URL((uint64_t)v10, (uint64_t *)a2);
  WTF::URL::URL((uint64_t)v11, (uint64_t *)(a2 + 40));
  v11[5] = *(void *)(a2 + 80);
  long long v3 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a2 + 8++*(_DWORD *)(this + 8) = 0u;
  long long v12 = v3;
  *(void *)&long long v3 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  uint64_t v13 = v3;
  uint64_t v4 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v14 = v4;
  *(void *)&long long v3 = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  uint64_t v15 = v3;
  uint64_t v5 = *(void *)(a2 + 128);
  *(void *)(a2 + 12++*(_DWORD *)(this + 8) = 0;
  uint64_t v16 = v5;
  *(void *)&long long v3 = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  uint64_t v17 = v3;
  LODWORD(v5) = *(_DWORD *)(a2 + 144);
  char v19 = *(unsigned char *)(a2 + 148);
  int v18 = v5;
  long long v6 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a2 + 152) = 0u;
  long long v20 = v6;
  char v23 = *(unsigned char *)(a2 + 184);
  uint64_t v7 = *(void *)(a2 + 168);
  uint64_t v8 = *(void *)(a2 + 176);
  *(void *)(a2 + 16++*(_DWORD *)(this + 8) = 0;
  uint64_t v21 = v7;
  uint64_t v22 = v8;
  CFTypeRef v9 = *(const void **)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  uint64_t v24 = 0;
  if (v9) {
    CFRelease(v9);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v10);
}

WTF *WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(WTF *result, uint64_t a2, WTF::StringImpl **a3)
{
  long long v3 = result;
  uint64_t v4 = *(_DWORD **)a2;
  if (*(void *)a2)
  {
    int v7 = *(_DWORD *)(a2 + 8);
    int v8 = v7 - 1;
    int v9 = *(_DWORD *)(a2 + 16);
    unsigned int v10 = *((_DWORD *)*a3 + 4);
    if (v10 >= 0x100)
    {
      unsigned int v11 = v10 >> 8;
    }
    else
    {
      unsigned int v11 = WTF::StringImpl::hashSlowCase(*a3);
      uint64_t v4 = *(_DWORD **)a2;
    }
    unsigned int v12 = (v11 ^ v9) & v8;
    uint64_t v13 = (uint64_t)&v4[4 * v12];
    unint64_t result = *(WTF **)v13;
    if (*(void *)v13)
    {
      int v14 = -1;
      do
      {
        unsigned int v15 = *((_DWORD *)result + 4);
        unint64_t result = v15 >= 0x100 ? (WTF *)(v15 >> 8) : (WTF *)WTF::StringImpl::hashSlowCase(result);
        if (++v14 > ((v12 + v7 - ((result ^ v9) & v8)) & v8)) {
          break;
        }
        if (result == v11)
        {
          unint64_t result = (WTF *)WTF::equal(*(WTF **)v13, *a3, (const WTF::StringImpl *)a3);
          if (result)
          {
            uint64_t v4 = *(_DWORD **)(v13 + 8);
            if (v4) {
              *v4 += 2;
            }
            goto LABEL_15;
          }
        }
        unsigned int v12 = (v12 + 1) & v8;
        uint64_t v13 = *(void *)a2 + 16 * v12;
        unint64_t result = *(WTF **)v13;
      }
      while (*(void *)v13);
    }
    uint64_t v4 = 0;
  }
LABEL_15:
  *long long v3 = v4;
  return result;
}

void *std::__function::__func<WebKit::NetworkResourceLoader::contentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::~__func(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C64A8;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v3 + 8), a2);
  }
  return a1;
}

void std::__function::__func<WebKit::NetworkResourceLoader::contentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::~__func(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C64A8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v2 + 8), a2);
  }

  JUMPOUT(0x199740C10);
}

void *std::__function::__func<WebKit::NetworkResourceLoader::contentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *unint64_t result = &unk_1EE9C64A8;
  result[1] = v3;
  ++*(_DWORD *)(v4 + 8);
  result[2] = v4;
  return result;
}

uint64_t std::__function::__func<WebKit::NetworkResourceLoader::contentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE9C64A8;
  a2[1] = v2;
  uint64_t v3 = *(void *)(result + 16);
  ++*(_DWORD *)(v3 + 8);
  a2[2] = v3;
  return result;
}

_DWORD *std::__function::__func<WebKit::NetworkResourceLoader::contentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::destroy(_DWORD *result, WTF::StringImpl *a2)
{
  uint64_t v2 = *((void *)result + 2);
  *((void *)result + 2) = 0;
  if (v2) {
    return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v2 + 8), a2);
  }
  return result;
}

void std::__function::__func<WebKit::NetworkResourceLoader::contentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::destroy_deallocate(void *__p, WTF::StringImpl *a2)
{
  uint64_t v3 = __p[2];
  __p[2] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v3 + 8), a2);
  }

  operator delete(__p);
}

void std::__function::__func<WebKit::NetworkResourceLoader::contentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  WebCore::ContentFilterUnblockHandler::setUnblockedAfterRequest((WebCore::ContentFilterUnblockHandler *)(v3 + 4816));
  uint64_t v4 = WebCore::ResourceRequest::ResourceRequest((StringImpl *)v34);
  if (*(unsigned char *)(v3 + 4192) | v2)
  {
    WebCore::ResourceRequestBase::operator=((uint64_t)v34, v3 + 168);
    uint64_t v5 = *(const void **)(v3 + 360);
    if (v5) {
      CFRetain(*(CFTypeRef *)(v3 + 360));
    }
    CFTypeRef v6 = cf;
    CFTypeRef cf = v5;
    if (v6) {
      CFRelease(v6);
    }
  }
  else
  {
    int v7 = (const String *)WTF::aboutBlankURL((WTF *)v4);
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)&v24, v7, 0);
    CFTypeRef v33 = 0;
    WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v34, (uint64_t)&v24);
    int v9 = v28;
    uint64_t v28 = 0;
    unsigned int v10 = v35;
    uint64_t v35 = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    unsigned int v11 = v29;
    char v29 = 0;
    unsigned int v12 = v36;
    uint64_t v36 = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v8);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t v13 = v30;
    BOOL v30 = 0;
    int v14 = v37;
    uint64_t v37 = v13;
    if (v14) {
      WTF::RefCounted<WebCore::FormData>::deref(v14);
    }
    uint64_t v38 = v31;
    char v39 = v32;
    CFTypeRef v15 = v33;
    CFTypeRef v33 = 0;
    CFTypeRef v16 = cf;
    CFTypeRef cf = v15;
    if (v16)
    {
      CFRelease(v16);
      CFTypeRef v23 = v33;
      CFTypeRef v33 = 0;
      if (v23) {
        CFRelease(v23);
      }
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v24);
  }
  WebKit::blockedByContentFilterError((WebKit *)v34, (uint64_t)&v24);
  WebCore::ContentFilter::setBlockedError(*(WebCore::ContentFilter **)(v3 + 4808), (const WebCore::ResourceError *)&v24);
  WebCore::ContentFilter::handleProvisionalLoadFailure();
  CFTypeRef v18 = v27;
  CFTypeRef v27 = 0;
  if (v18) {
    CFRelease(v18);
  }
  char v19 = v26;
  char v26 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v17);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  long long v20 = v25;
  BOOL v25 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v17);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t v21 = v24;
  uint64_t v24 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v17);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  CFTypeRef v22 = cf;
  CFTypeRef cf = 0;
  if (v22) {
    CFRelease(v22);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v34);
}

WTF::StringImpl *WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>::translate<WTF::String,WTF::String,WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(WTF::String&&)::{lambda(void)#1}>(WTF::StringImpl **a1, WTF::StringImpl *a2, WTF::StringImpl ***a3)
{
  uint64_t v4 = **a3;
  **a3 = 0;
  unint64_t result = *a1;
  *a1 = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::HashSetTranslatorAdapter<WTF::StringViewHashTranslator>,WTF::StringView>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v2 - 8);
    int v5 = WTF::StringViewHashTranslator::hash(*a2, a2[1]);
    for (i = 0; ; int v5 = i + v7)
    {
      int v7 = v5 & v4;
      int v8 = (uint64_t *)(v2 + 8 * (v5 & v4));
      if (!*v8) {
        break;
      }
      if (*v8 != -1 && WTF::StringViewHashTranslator::equal(v8, (unsigned __int8 *)*a2, a2[1])) {
        return 1;
      }
      ++i;
    }
  }
  return 0;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(atomic_uchar *this)
{
  uint64_t v1 = this;
  char v2 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = v3 - 1;
  *((void *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    uint64_t v9 = *((void *)v1 + 2);
    uint64_t v6 = *((void *)v1 + 3);
    *((void *)v1 + 3) = 0;
    BOOL v5 = v9 == 0;
  }
  else
  {
    BOOL v5 = 0;
    uint64_t v6 = 0;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (!v4)
  {
    uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v8 = &unk_1EE9C6810;
    *(void *)(v8 + ++*(_DWORD *)(this + 8) = v1;
    *(void *)(v8 + 16) = v6;
    *(unsigned char *)(v8 + 24) = v5;
    unsigned int v10 = (atomic_uchar *)v8;
    WTF::ensureOnMainThread();
    this = v10;
    if (v10) {
      return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v10 + 8))(v10);
    }
  }
  return this;
}

void WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t v4 = *(WTF **)(a1 + 8);
  uint64_t v3 = *(WebKit::ResourceLoadStatisticsStore ***)(a1 + 16);
  if (v3) {
    WebKit::WebResourceLoadStatisticsStore::operator delete(v3, 0x80uLL);
  }
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    WTF::fastFree(v4, a2);
  }
}

void WebKit::WebResourceLoadStatisticsStore::operator delete(WebKit::ResourceLoadStatisticsStore **a1, size_t a2)
{
  WebKit::WebResourceLoadStatisticsStore::~WebResourceLoadStatisticsStore(a1);
  if (atomic_load(v3 + 2))
  {
    bzero(v3, a2);
  }
  else
  {
    WTF::fastFree((WTF *)v3, v4);
  }
}

uint64_t WTF::ThreadSafeWeakHashSet<WebKit::NetworkDataTask>::values@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result;
  char v5 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + ++*(_DWORD *)(this + 8) = 0;
  uint64_t v6 = (WTF::Lock *)(result + 16);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 16), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    unint64_t result = MEMORY[0x19972E8D0](result + 16);
  }
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  if (*(void *)v3 && (uint64_t v7 = *(unsigned int *)(*(void *)v3 - 12), v7))
  {
    if (v7 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
    LODWORD(v45) = v7;
    uint64_t v44 = (uint64_t)v8;
    uint64_t v9 = *(void *)v3;
    if (*(void *)v3 && *(_DWORD *)(v9 - 12))
    {
      uint64_t v10 = *(unsigned int *)(v9 - 4);
      if (v10)
      {
        uint64_t v11 = 16 * v10;
        uint64_t v12 = *(void *)v3;
        while ((unint64_t)(*(void *)v12 + 1) <= 1)
        {
          v12 += 16;
          v11 -= 16;
          if (!v11) {
            goto LABEL_32;
          }
        }
      }
      else
      {
        uint64_t v12 = *(void *)v3;
      }
      uint64_t v14 = v9 + 16 * v10;
      if (v14 == v12)
      {
LABEL_32:
        int v13 = 0;
        LODWORD(v15) = 0;
      }
      else
      {
        int v13 = 0;
        LODWORD(v15) = 0;
        a2 = *(void **)v12;
LABEL_19:
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v12 + 8), (uint64_t)a2, &v47);
        uint64_t v16 = v47;
        if (v47)
        {
          uint64_t v46 = v47;
          uint64_t v47 = 0;
          if (v15 == v45)
          {
            uint64_t v17 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v44, v15 + 1, (unint64_t)&v46);
            uint64_t v15 = HIDWORD(v45);
            uint64_t v8 = (WTF *)v44;
            uint64_t v18 = *v17;
            *uint64_t v17 = 0;
            *((void *)v8 + v15) = v18;
          }
          else
          {
            uint64_t v46 = 0;
            *((void *)v8 + v15) = v16;
          }
          LODWORD(v15) = v15 + 1;
          HIDWORD(v45) = v15;
          uint64_t v19 = v46;
          uint64_t v46 = 0;
          if (v19) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v19 + 8));
          }
          uint64_t v20 = v47;
          uint64_t v47 = 0;
          if (v20) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v20 + 8));
          }
        }
        else
        {
          int v13 = 1;
        }
        while (1)
        {
          v12 += 16;
          if (v12 == v14) {
            break;
          }
          a2 = *(void **)v12;
          if ((unint64_t)(*(void *)v12 + 1) > 1)
          {
            if (v12 != v14) {
              goto LABEL_19;
            }
            break;
          }
        }
        LODWORD(v7) = v45;
      }
      if (v7 <= v15) {
        goto LABEL_37;
      }
      if (v15)
      {
        LODWORD(v45) = v15;
        uint64_t v44 = WTF::fastRealloc(v8, (void *)(8 * v15));
        goto LABEL_37;
      }
      if (!v8) {
        goto LABEL_37;
      }
    }
    else
    {
      int v13 = 0;
    }
    uint64_t v44 = 0;
    LODWORD(v45) = 0;
    WTF::fastFree(v8, a2);
  }
  else
  {
    int v13 = 0;
  }
LABEL_37:
  uint64_t v21 = *(unsigned int *)(a3 + 12);
  CFTypeRef v22 = *(WTF **)a3;
  if (v21)
  {
    uint64_t v23 = 8 * v21;
    uint64_t v24 = *(WTF **)a3;
    do
    {
      uint64_t v25 = *(void *)v24;
      *(void *)uint64_t v24 = 0;
      if (v25) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v25 + 8));
      }
      uint64_t v24 = (WTF *)((char *)v24 + 8);
      v23 -= 8;
    }
    while (v23);
  }
  if (v22) {
    WTF::fastFree(v22, a2);
  }
  *(void *)a3 = v44;
  uint64_t v26 = v45;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  *(void *)(a3 + ++*(_DWORD *)(this + 8) = v26;
  unint64_t result = WTF::Vector<WTF::Ref<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, a2);
  uint64_t v27 = *(void *)v3;
  if (!v13) {
    goto LABEL_66;
  }
  if (!v27) {
    goto LABEL_75;
  }
  int v28 = *(_DWORD *)(v27 - 4);
  if (!v28)
  {
LABEL_65:
    *(_DWORD *)(v3 + ++*(_DWORD *)(this + 8) = 0;
    goto LABEL_67;
  }
  int v29 = 0;
  unsigned int v30 = v28 - 1;
  do
  {
    uint64_t v31 = v30;
    char v32 = (void *)(v27 + 16 * v30);
    if ((unint64_t)(*v32 + 1) >= 2)
    {
      uint64_t v33 = v27 + 16 * v30;
      uint64_t v35 = *(atomic_uchar **)(v33 + 8);
      uint64_t v34 = (uint64_t *)(v33 + 8);
      unint64_t result = WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v35);
      if (result)
      {
        *char v32 = -1;
        unint64_t result = *v34;
        *uint64_t v34 = 0;
        if (result) {
          unint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)result, v36);
        }
        ++v29;
      }
    }
    --v30;
  }
  while (v31);
  uint64_t v27 = *(void *)v3;
  if (v29)
  {
    *(_DWORD *)(v27 - 16) += v29;
    uint64_t v37 = *(void *)v3;
    if (*(void *)v3) {
      int v38 = *(_DWORD *)(v37 - 12);
    }
    else {
      int v38 = 0;
    }
    *(_DWORD *)(v37 - 12) = v38 - v29;
    uint64_t v27 = *(void *)v3;
  }
  if (!v27)
  {
LABEL_75:
    unsigned int v41 = 0;
    *(_DWORD *)(v3 + ++*(_DWORD *)(this + 8) = 0;
    goto LABEL_68;
  }
  unsigned int v39 = *(_DWORD *)(v27 - 4);
  if (v39 < 9 || 6 * *(_DWORD *)(v27 - 12) >= v39) {
    goto LABEL_65;
  }
  unint64_t result = WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::shrinkToBestSize((uint64_t *)v3);
  uint64_t v27 = *(void *)v3;
LABEL_66:
  *(_DWORD *)(v3 + ++*(_DWORD *)(this + 8) = 0;
  if (v27)
  {
LABEL_67:
    unsigned int v41 = *(_DWORD *)(v27 - 12);
    int v42 = 0x7FFFFFFF;
    if (v41 >= 0x7FFFFFFF) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  unsigned int v41 = 0;
LABEL_68:
  int v42 = v41;
LABEL_69:
  *(_DWORD *)(v3 + 12) = 2 * v42;
  int v43 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 16), (unsigned __int8 *)&v43, 0, memory_order_release, memory_order_relaxed);
  if (v43 != 1) {
    return WTF::Lock::unlockSlow(v6);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::shrinkToBestSize(uint64_t *a1)
{
  if (*a1) {
    unsigned int v1 = *(_DWORD *)(*a1 - 12);
  }
  else {
    unsigned int v1 = 0;
  }
  unsigned int v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  unint64_t v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1) {
      goto LABEL_14;
    }
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    double v5 = (double)v1;
    double v6 = (double)v4;
    double v7 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400) {
    goto LABEL_6;
  }
LABEL_14:
  double v5 = (double)v1;
  double v6 = (double)v4;
  double v7 = 0.416666667;
LABEL_7:
  if (v6 * v7 <= v5) {
    LODWORD(v4) = 2 * v4;
  }
  if (v4 <= 8) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = v4;
  }
  return WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::rehash(a1, v8);
}

uint64_t WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = (uint64_t *)(v4 + 16 * i);
      uint64_t v11 = *v10;
      if (*v10)
      {
        if (v11 != -1)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            int v13 = 0;
          }
          unint64_t v14 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
          int v18 = 1;
          do
          {
            unsigned int v19 = v17;
            uint64_t v20 = *(void *)(v12 + 16 * v17);
            unsigned int v17 = (v17 + v18++) & v13;
          }
          while (v20);
          uint64_t v21 = (uint64_t *)(v12 + 16 * v19);
          CFTypeRef v22 = (atomic_uchar *)v21[1];
          v21[1] = 0;
          if (v22) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v22, v8);
          }
          *uint64_t v21 = *v10;
          uint64_t v23 = v4 + 16 * i;
          uint64_t v24 = *(void *)(v23 + 8);
          *(void *)(v23 + ++*(_DWORD *)(this + 8) = 0;
          v21[1] = v24;
          uint64_t v25 = *(atomic_uchar **)(v23 + 8);
          *(void *)(v23 + ++*(_DWORD *)(this + 8) = 0;
          if (v25) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v25, v8);
          }
        }
      }
      else
      {
        uint64_t v26 = (atomic_uchar *)v10[1];
        v10[1] = 0;
        if (v26) {
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v26, v8);
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::Vector<WTF::Ref<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)uint64_t v4 = 0;
      if (v6) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v6 + 8));
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  double v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v4 = *a1;
  if (!*a1)
  {
    int v5 = 0;
    int v6 = 0;
LABEL_3:
    unsigned int v7 = 8;
    goto LABEL_4;
  }
  int v5 = *(_DWORD *)(v4 - 4);
  int v6 = *(_DWORD *)(v4 - 12);
  if (!v5) {
    goto LABEL_3;
  }
  unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
LABEL_4:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = (WTF::StringImpl **)(v4 + 16 * v10);
      int v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unsigned int v18 = *((_DWORD *)v13 + 4);
          if (v18 >= 0x100) {
            unsigned int v19 = v18 >> 8;
          }
          else {
            unsigned int v19 = WTF::StringImpl::hashSlowCase(v13);
          }
          int v20 = 0;
          do
          {
            uint64_t v21 = v19 & v17;
            unsigned int v19 = ++v20 + v21;
          }
          while (*(void *)(v16 + 16 * v21));
          CFTypeRef v22 = (WTF::StringImpl **)(v16 + 16 * v21);
          uint64_t v23 = v22[1];
          v22[1] = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 != 2)
            {
              *(_DWORD *)v23 -= 2;
              goto LABEL_22;
            }
            WTF::StringImpl::destroy(v23, v9);
            uint64_t v24 = *v22;
            *CFTypeRef v22 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2) {
                WTF::StringImpl::destroy(v24, v9);
              }
              else {
                *(_DWORD *)v24 -= 2;
              }
            }
          }
          else
          {
LABEL_22:
            *CFTypeRef v22 = 0;
          }
          uint64_t v25 = *v12;
          WTF::StringImpl *v12 = 0;
          *CFTypeRef v22 = v25;
          uint64_t v26 = v4 + 16 * v10;
          uint64_t v27 = *(WTF::StringImpl **)(v26 + 8);
          *(void *)(v26 + ++*(_DWORD *)(this + 8) = 0;
          v22[1] = v27;
          int v28 = *(WTF::StringImpl **)(v26 + 8);
          *(void *)(v26 + ++*(_DWORD *)(this + 8) = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v9);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          int v29 = *v12;
          WTF::StringImpl *v12 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, v9);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          if (v12 == a2) {
            uint64_t v11 = v22;
          }
          goto LABEL_42;
        }
        uint64_t v14 = v4 + 16 * v10;
        unint64_t v15 = *(WTF::StringImpl **)(v14 + 8);
        *(void *)(v14 + ++*(_DWORD *)(this + 8) = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
          {
            WTF::StringImpl::destroy(v15, v9);
            int v13 = *v12;
          }
          else
          {
            *(_DWORD *)v15 -= 2;
          }
        }
        WTF::StringImpl *v12 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, v9);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
      }
LABEL_42:
      if (++v10 == v5) {
        goto LABEL_45;
      }
    }
  }
  uint64_t v11 = 0;
  uint64_t result = 0;
  if (v4)
  {
LABEL_45:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v11;
  }
  return result;
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  int v5 = *(_DWORD *)(v3 - 8);
  unsigned int v6 = *((_DWORD *)*a2 + 4);
  if (v6 >= 0x100) {
    unsigned int v7 = v6 >> 8;
  }
  else {
    unsigned int v7 = WTF::StringImpl::hashSlowCase(*a2);
  }
  for (i = 0; ; unsigned int v7 = i + v10)
  {
    uint64_t v10 = v7 & v5;
    uint64_t result = *(WTF **)(v3 + 16 * v10);
    if (result != (WTF *)-1)
    {
      if (!result) {
        return result;
      }
      if (WTF::equal(result, *a2, a3)) {
        break;
      }
    }
    ++i;
  }
  return (WTF *)(v3 + 16 * v10);
}

__n128 WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::IPAddress>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, __n128 *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a3 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a3);
  }
  uint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v14 = v11 & v9;
    uint64_t v15 = v8 + 32 * v14;
    uint64_t v16 = *(WTF **)v15;
    if (!*(void *)v15)
    {
      if (v12)
      {
        *(void *)uint64_t v12 = 0;
        *(_DWORD *)(v12 + ++*(_DWORD *)(this + 8) = 0;
        *(_DWORD *)(v12 + 24) = 0;
        --*(_DWORD *)(*a2 - 16);
        uint64_t v15 = v12;
      }
      WTF::String::operator=((uint64_t *)v15, a3);
      unsigned __int32 v17 = a4[1].n128_u32[0];
      __n128 result = *a4;
      *(__n128 *)(v15 + ++*(_DWORD *)(this + 8) = *a4;
      *(_DWORD *)(v15 + 24) = v17;
      uint64_t v19 = *a2;
      if (*a2) {
        int v20 = *(_DWORD *)(v19 - 12) + 1;
      }
      else {
        int v20 = 1;
      }
      *(_DWORD *)(v19 - 12) = v20;
      uint64_t v21 = *a2;
      if (*a2) {
        int v22 = *(_DWORD *)(v21 - 12);
      }
      else {
        int v22 = 0;
      }
      uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
      unint64_t v24 = *(unsigned int *)(v21 - 4);
      if (v24 > 0x400)
      {
        if (v24 > 2 * v23) {
          goto LABEL_16;
        }
      }
      else if (3 * v24 > 4 * v23)
      {
LABEL_16:
        *(void *)a1 = v15;
        *(void *)(a1 + ++*(_DWORD *)(this + 8) = v21 + 32 * v24;
        *(unsigned char *)(a1 + 16) = 1;
        return result;
      }
      uint64_t v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, (WTF::StringImpl **)v15);
      uint64_t v21 = *a2;
      if (*a2) {
        unint64_t v24 = *(unsigned int *)(v21 - 4);
      }
      else {
        unint64_t v24 = 0;
      }
      goto LABEL_16;
    }
    if (v16 == (WTF *)-1)
    {
      uint64_t v12 = v8 + 32 * v14;
      goto LABEL_23;
    }
    if (WTF::equal(v16, *a3, (const WTF::StringImpl *)a3)) {
      break;
    }
LABEL_23:
    unsigned int v11 = i + v14;
  }
  uint64_t v25 = *a2;
  if (*a2) {
    uint64_t v26 = *(unsigned int *)(v25 - 4);
  }
  else {
    uint64_t v26 = 0;
  }
  *(void *)a1 = v15;
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = v25 + 32 * v26;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v27 = v8 + 32 * v14;
  __n128 result = *a4;
  *(_DWORD *)(v27 + 24) = a4[1].n128_u32[0];
  *(__n128 *)(v27 + ++*(_DWORD *)(this + 8) = result;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t Table = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v13 = v7;
    uint64_t v14 = (WTF::StringImpl **)v6;
    do
    {
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (*v14)
        {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(*a1, (uint64_t)v14);
          uint64_t v16 = v15;
          WebCore::RegistrableDomain::~RegistrableDomain(v14, v17);
          if (v14 == a3) {
            uint64_t v11 = v16;
          }
        }
        else
        {
          WebCore::RegistrableDomain::~RegistrableDomain(v14, v10);
        }
      }
      v14 += 4;
      --v13;
    }
    while (v13);
    goto LABEL_13;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(unsigned int a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = WTF::fastMalloc((WTF *)((32 * a1) | 0x10));
  uint64_t result = v3 + 16;
  if (a1)
  {
    unsigned int v5 = (_DWORD *)(v3 + 24);
    do
    {
      *((void *)v5 - 1) = 0;
      *unsigned int v5 = 0;
      v5[4] = 0;
      v5 += 8;
      --v2;
    }
    while (v2);
  }
  return result;
}

__n128 WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, uint64_t a2)
{
  int v4 = *(WTF::StringImpl **)a2;
  if (a1) {
    int v5 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v5 = 0;
  }
  unsigned int v6 = *((_DWORD *)v4 + 4);
  if (v6 >= 0x100) {
    unsigned int v7 = v6 >> 8;
  }
  else {
    unsigned int v7 = WTF::StringImpl::hashSlowCase(v4);
  }
  int v8 = 0;
  do
  {
    uint64_t v9 = v7 & v5;
    unsigned int v7 = ++v8 + v9;
  }
  while (*(void *)(a1 + 32 * v9));
  uint64_t v10 = a1 + 32 * v9;
  *(void *)uint64_t v10 = 0;
  uint64_t v11 = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  *(void *)uint64_t v10 = v11;
  __n128 result = *(__n128 *)(a2 + 8);
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 + 24);
  *(__n128 *)(v10 + ++*(_DWORD *)(this + 8) = result;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  int v6 = *(_DWORD *)(v3 - 8);
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100) {
    unsigned int v8 = v7 >> 8;
  }
  else {
    unsigned int v8 = WTF::StringImpl::hashSlowCase(*a2);
  }
  for (i = 0; ; unsigned int v8 = i + v10)
  {
    uint64_t v10 = v8 & v6;
    uint64_t v11 = *(WTF **)(v3 + 32 * v10);
    if (!v11) {
      break;
    }
    if (v11 != (WTF *)-1 && (WTF::equal(v11, *a2, a3) & 1) != 0) {
      return v3 + 32 * v10;
    }
    ++i;
  }
  if (*a1) {
    return *a1 + 32 * *(unsigned int *)(*a1 - 4);
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkSession::handlePrivateClickMeasurementConversion(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::ResourceRequest const&,WTF::String &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C6680;
  WebKit::NetworkSession::handlePrivateClickMeasurementConversion(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::ResourceRequest const&,WebCore::PCM::AttributionTriggerData &&::String &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkSession::handlePrivateClickMeasurementConversion(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::ResourceRequest const&,WTF::String &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C6680;
  WebKit::NetworkSession::handlePrivateClickMeasurementConversion(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::ResourceRequest const&,WebCore::PCM::AttributionTriggerData &&::String &&)::$_0::~$_0((void *)a1 + 1, a2);

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkSession::handlePrivateClickMeasurementConversion(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::ResourceRequest const&,WTF::String &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    if (*(void *)(v1 + 8)) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)(result + 8) + 160)
    }
                                                                                            + 24))(*(void *)(*(void *)(result + 8) + 160), result + 24, result + 152, result + 192, result + 200, result + 240);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::add@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::expand(result, 0), (uint64_t v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = 0;
  uint64_t v10 = *(void *)a2;
  unint64_t v11 = ~(*(void *)a2 << 32) + *(void *)a2;
  unint64_t v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  unsigned int v14 = (v13 >> 31) ^ v13;
  for (int i = 1; ; ++i)
  {
    unsigned int v16 = v14 & v8;
    unsigned __int32 v17 = (uint64_t *)(v6 + 8 * v16);
    uint64_t v18 = *v17;
    if (*v17 != -1) {
      break;
    }
    uint64_t v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    unsigned int v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      *uint64_t v9 = 0;
      --*(_DWORD *)(*v4 - 16);
      uint64_t v10 = *(void *)a2;
      unsigned __int32 v17 = v9;
    }
    *(void *)a2 = 0;
    uint64_t v19 = *v17;
    *unsigned __int32 v17 = v10;
    if (v19) {
      __n128 result = (uint64_t *)WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v19 + 8), a2);
    }
    uint64_t v20 = *v4;
    if (*v4) {
      int v21 = *(_DWORD *)(v20 - 12) + 1;
    }
    else {
      int v21 = 1;
    }
    *(_DWORD *)(v20 - 12) = v21;
    uint64_t v25 = *v4;
    if (*v4) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_27:
        __n128 result = WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::expand(v4, v17);
        unsigned __int32 v17 = result;
        uint64_t v25 = *v4;
        if (*v4) {
          unint64_t v28 = *(unsigned int *)(v25 - 4);
        }
        else {
          unint64_t v28 = 0;
        }
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_27;
    }
    uint64_t v24 = v25 + 8 * v28;
    char v23 = 1;
    goto LABEL_32;
  }
  if (v18 != v10) {
    goto LABEL_10;
  }
  if (v7) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *(unsigned int *)(v6 - 4);
  }
  char v23 = 0;
  uint64_t v24 = v6 + 8 * v22;
LABEL_32:
  *(void *)a3 = v17;
  *(void *)(a3 + ++*(_DWORD *)(this + 8) = v24;
  *(unsigned char *)(a3 + 16) = v23;
  return result;
}

void *WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = (uint64_t *)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 8 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          uint64_t v24 = (void *)(v15 + 8 * v22);
          *uint64_t v24 = 0;
          uint64_t v25 = *v13;
          *unint64_t v13 = 0;
          *uint64_t v24 = v25;
          uint64_t v26 = *v13;
          *unint64_t v13 = 0;
          if (v26) {
            WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v26 + 8), v10);
          }
          if (v13 == a3) {
            unint64_t v12 = v24;
          }
        }
        else
        {
          *unint64_t v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    __n128 result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::remove(uint64_t *result, WTF::StringImpl *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)a2;
  *(void *)a2 = 0;
  if (v4) {
    __n128 result = (uint64_t *)WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v4 + 8), a2);
  }
  *(void *)a2 = -1;
  ++*(_DWORD *)(*v3 - 16);
  uint64_t v5 = *v3;
  if (*v3) {
    int v6 = *(_DWORD *)(v5 - 12) - 1;
  }
  else {
    int v6 = -1;
  }
  *(_DWORD *)(v5 - 12) = v6;
  uint64_t v7 = *v3;
  if (*v3)
  {
    unsigned int v8 = 6 * *(_DWORD *)(v7 - 12);
    unsigned int v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
    {
      return WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::rehash(v3, v9 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WebKit::NetworkResourceLoader const*>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = ~(*a2 << 32) + *a2;
  unint64_t v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  for (int i = 1; ; ++i)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(void *)(v2 + 8 * v7);
    if (v10 != -1)
    {
      if (!v10) {
        return v2 + 8 * *(unsigned int *)(v2 - 4);
      }
      if (v10 == *a2) {
        break;
      }
    }
    unsigned int v7 = (v9 + i) & v3;
  }
  return v2 + 8 * v9;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::NetworkSession::CachedNetworkResourceLoader::*&)(void),WebKit::NetworkSession::CachedNetworkResourceLoader*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  int v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            int v19 = 0;
          }
          unint64_t v20 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
          int v24 = 1;
          do
          {
            unsigned int v25 = v23;
            uint64_t v26 = *(void *)(v18 + 16 * v23);
            unsigned int v23 = (v23 + v24++) & v19;
          }
          while (v26);
          uint64_t v27 = (uint64_t *)(v18 + 16 * v25);
          int v29 = v27 + 1;
          unint64_t v28 = (WebCore::TimerBase *)v27[1];
          v27[1] = 0;
          if (v28) {
            std::default_delete<WebKit::NetworkSession::CachedNetworkResourceLoader>::operator()[abi:sn180100]((int)v29, v28);
          }
          uint64_t *v27 = *v13;
          uint64_t v30 = v6 + 16 * v11;
          uint64_t v32 = *(void *)(v30 + 8);
          uint64_t v31 = (WebCore::TimerBase **)(v30 + 8);
          void *v31 = 0;
          void *v29 = v32;
          uint64_t v10 = *v31;
          void *v31 = 0;
          if (v10) {
            std::default_delete<WebKit::NetworkSession::CachedNetworkResourceLoader>::operator()[abi:sn180100]((int)v31, v10);
          }
          if (v13 == a3) {
            unint64_t v12 = v27;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          unint64_t v17 = *(WebCore::TimerBase **)(v15 + 8);
          int v16 = (void *)(v15 + 8);
          uint64_t v10 = v17;
          void *v16 = 0;
          if (v17) {
            std::default_delete<WebKit::NetworkSession::CachedNetworkResourceLoader>::operator()[abi:sn180100]((int)v16, v10);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    __n128 result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::take(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (void *)*a1;
  if (*a1) {
    v3 += 2 * *((unsigned int *)v3 - 1);
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return;
  }
  uint64_t v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    unsigned int v5 = (void *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2) {
      return;
    }
  }
  else
  {
    if (!a2) {
      return;
    }
    unsigned int v5 = 0;
  }
  if (v5 != a2) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, a2);
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  unsigned int v5 = (WebCore::TimerBase *)a2[1];
  uint64_t v3 = a2 + 1;
  uint64_t v4 = v5;
  *uint64_t v3 = 0;
  if (v5) {
    std::default_delete<WebKit::NetworkSession::CachedNetworkResourceLoader>::operator()[abi:sn180100]((int)v3, v4);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v6 = *a1;
  if (*a1) {
    int v7 = *(_DWORD *)(v6 - 12) - 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(v6 - 12) = v7;
  uint64_t v8 = *a1;
  if (*a1)
  {
    unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
    unsigned int v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v10 >> 1, 0);
    }
  }
}

uint64_t WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::rehash(a1, v3);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(uint64_t *result, void *a2)
{
  int v2 = (unsigned int *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2);
    unsigned int v9 = result;
    WTF::fastFree((WTF *)v2, a2);
    __n128 result = v9;
  }
  ++*(_DWORD *)(*result - 16);
  uint64_t v3 = *result;
  if (*result) {
    int v4 = *(_DWORD *)(v3 - 12) - 1;
  }
  else {
    int v4 = -1;
  }
  *(_DWORD *)(v3 - 12) = v4;
  uint64_t v5 = *result;
  if (*result)
  {
    unsigned int v6 = 6 * *(_DWORD *)(v5 - 12);
    unsigned int v7 = *(_DWORD *)(v5 - 4);
    if (v6 < v7 && v7 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(result, v7 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 8);
    unint64_t v4 = *a2 + ~(*a2 << 32);
    unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
    unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
    uint64_t v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
    uint64_t v8 = *(void *)(v2 + 16 * v7);
    if (v8 == *a2)
    {
LABEL_6:
      uint64_t v10 = *(void *)(v2 + 16 * v7 + 8);
      if (v10) {
        return *(void *)(v10 + 8);
      }
    }
    else
    {
      int v9 = 1;
      while (v8)
      {
        uint64_t v7 = (v7 + v9) & v3;
        uint64_t v8 = *(void *)(v2 + 16 * v7);
        ++v9;
        if (v8 == *a2) {
          goto LABEL_6;
        }
      }
    }
  }
  return 0;
}

void *WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    unint64_t v13 = (uint64_t *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          uint64_t v14 = (void *)WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::lookupForReinsert(a1, v13);
          uint64_t v15 = *v14;
          *uint64_t v14 = 0;
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          }
          uint64_t v16 = *v13;
          *unint64_t v13 = 0;
          *uint64_t v14 = v16;
          uint64_t v17 = *v13;
          *unint64_t v13 = 0;
          if (v17) {
            (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
          }
          if (v13 == a3) {
            uint64_t v11 = v14;
          }
        }
        else
        {
          *unint64_t v13 = 0;
        }
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  else
  {
    __n128 result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::lookupForReinsert(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  unint64_t v4 = ~(*a2 << 32) + *a2;
  unint64_t v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = *(void *)(v2 + 8 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 8 * v9;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::EstablishRemoteWorkerContextConnectionToNetworkProcess,WebKit::NetworkSession::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkSession::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C66D0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::EstablishRemoteWorkerContextConnectionToNetworkProcess,WebKit::NetworkSession::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkSession::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C66D0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::EstablishRemoteWorkerContextConnectionToNetworkProcess,WebKit::NetworkSession::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkSession::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2) {
    IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  unint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

unint64_t IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&,PAL::SessionID const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&,PAL::SessionID const&>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<JSC::MessageSource,void>::encode<IPC::Encoder>(a1, *(unsigned char *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, *(void *)(a2 + 16));
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&>(a1, *(void *)(a2 + 24));
  unint64_t v4 = *(uint64_t **)(a2 + 32);

  return IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, v4);
}

void *IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  __n128 result = (void *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198BBDC08);
    }
    *(unsigned char *)__n128 result = 1;
    if (*(unsigned char *)(a2 + 8))
    {
      return (void *)IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      unsigned int v7 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
      return WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::GetAppBoundDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)>>(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198BBDC28);
    }
    *(unsigned char *)__n128 result = 0;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::GetAppBoundDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)>>(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C66F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::GetAppBoundDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)>>(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C66F8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::GetAppBoundDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)>>(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl ***))(*(void *)v3 + 16))(v3, &v7);
      __n128 result = (WTF::StringImpl **)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        __n128 result = v7;
        if (v7) {
          return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v7, v5);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::NetworkProcessProxy::GetAppBoundDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkProcessProxy::GetAppBoundDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)>>(v6);
  }
  return result;
}

WTF::StringImpl **IPC::Connection::cancelReply<Messages::NetworkProcessProxy::GetAppBoundDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)>>(uint64_t *a1)
{
  int v4 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl ***))(*(void *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  __n128 result = v4;
  if (v4) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::NetworkSocketChannel::*&)(void),WebKit::NetworkSocketChannel*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::PingLoad::*&)(void),WebKit::PingLoad*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::PingLoad::initialize(WebKit::NetworkProcess &)::$_0,void,std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C6798;
  uint64_t v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 32);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PingLoad::initialize(WebKit::NetworkProcess &)::$_0,void,std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C6798;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 32);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  int v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::PingLoad::initialize(WebKit::NetworkProcess &)::$_0,void,std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::call(void *a1, uint64_t a2)
{
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1[2];
  if (!v5 || !*(void *)(v5 + 8)) {
    return;
  }
  uint64_t v7 = a1[1];
  int v8 = *(_DWORD *)(a2 + 656);
  if (v8 == -1) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = *(unsigned int *)(a2 + 656);
  }
  if (v9 == 2)
  {
    if (v8 == 2)
    {
      WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v61);
      CFTypeRef cf = 0;
      LOBYTE(v69) = 0;
      char v67 = v67 & 0xF1 | 4;
      WebKit::PingLoad::didFinish((WebKit::PingLoad *)v7, (const WebCore::ResourceError *)a2, (const WebCore::ResourceResponse *)v61);
      CFTypeRef v11 = cf;
      CFTypeRef cf = 0;
      if (v11) {
        CFRelease(v11);
      }
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v61, v10);
      return;
    }
LABEL_83:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_84;
  }
  if (v9 == 1)
  {
    if (v8 == 1) {
      return;
    }
    goto LABEL_83;
  }
  if (v8) {
    goto LABEL_83;
  }
  uint64_t v12 = a1[3];
  unint64_t v13 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v61[0]) = 134217984;
    *(void *)((char *)v61 + 4) = v7;
    _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%p - PingLoad::startNetworkLoad", (uint8_t *)v61, 0xCu);
  }
  *(void *)&v61[0] = *(void *)(v7 + 16);
  uint64_t v14 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v12 + 224), v61);
  if (v14)
  {
    uint64_t v2 = (WebKit::NetworkSession *)v14;
    long long v15 = *(_OWORD *)(v7 + 48);
    v61[0] = *(_OWORD *)(v7 + 32);
    v61[1] = v15;
    uint64_t v16 = *(atomic_uint **)(v7 + 64);
    if (v16) {
      atomic_fetch_add(v16, 1u);
    }
    int v62 = v16;
    uint64_t v17 = *(atomic_uint **)(v7 + 72);
    if (v17) {
      atomic_fetch_add(v17, 1u);
    }
    BOOL v63 = v17;
    long long v18 = *(_OWORD *)(v7 + 80);
    long long v19 = *(_OWORD *)(v7 + 96);
    *(void *)&v65[13] = *(void *)(v7 + 109);
    long long v64 = v18;
    *(_OWORD *)uint64_t v65 = v19;
    int v4 = v61;
    uint64_t v3 = v66;
    WebCore::ResourceRequest::ResourceRequest(v66, (const String *)(v7 + 120));
    *(_DWORD *)((char *)v74 + 3) = *(_DWORD *)(v7 + 323);
    v74[0] = *(_DWORD *)(v7 + 320);
    v75[0] = 0;
    char v76 = 0;
    if (*(unsigned char *)(v7 + 2912))
    {
      WebKit::NavigationActionData::NavigationActionData((WebKit::NavigationActionData *)v75, (const WebKit::NavigationActionData *)(v7 + 336));
      char v76 = 1;
    }
    char v77 = *(unsigned char *)(v7 + 2928);
    WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v78, v7 + 2936);
    v78[16] = *(unsigned char *)(v7 + 2952);
    v78[24] = 0;
    char v80 = 0;
    if (!*(unsigned char *)(v7 + 2984))
    {
LABEL_25:
      int v81 = *(_DWORD *)(v7 + 2992);
      __int16 v82 = *(_WORD *)(v7 + 2996);
      uint64_t v83 = *(void *)(v7 + 3000);
      uint64_t v20 = *(unsigned int *)(v7 + 3020);
      long long v84 = 0u;
      HIDWORD(v84) = v20;
      if (v20)
      {
        if (v20 >> 29) {
          goto LABEL_87;
        }
        unint64_t v21 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
        DWORD2(v84) = v20;
        *(void *)&long long v84 = v21;
        uint64_t v22 = *(unsigned int *)(v7 + 3020);
        if (v22)
        {
          unsigned int v23 = *(_DWORD ***)(v7 + 3008);
          uint64_t v24 = 8 * v22;
          do
          {
            unsigned int v25 = *v23;
            if (*v23) {
              ++*v25;
            }
            *v21++ = v25;
            ++v23;
            v24 -= 8;
          }
          while (v24);
        }
      }
      uint64_t v26 = *(_DWORD **)(v7 + 3024);
      if (v26) {
        ++*v26;
      }
      BOOL v85 = v26;
      uint64_t v86 = *(void *)(v7 + 3032);
      *(_DWORD *)((char *)v87 + 3) = *(_DWORD *)(v7 + 3043);
      v87[0] = *(_DWORD *)(v7 + 3040);
      uint64_t v27 = *(_DWORD **)(v7 + 3048);
      if (v27) {
        *v27 += 2;
      }
      BOOL v88 = v27;
      long long v89 = *(_OWORD *)(v7 + 3056);
      long long v90 = *(_OWORD *)(v7 + 3072);
      v91[0] = 0;
      char v94 = 0;
      if (*(unsigned char *)(v7 + 3112))
      {
        WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v91, (uint64_t *)(v7 + 3088));
        int v92 = *(_DWORD *)(v7 + 3104);
        char v93 = *(unsigned char *)(v7 + 3108);
        char v94 = 1;
      }
      unint64_t v28 = *(_DWORD **)(v7 + 3120);
      if (v28) {
        *v28 += 2;
      }
      BOOL v95 = v28;
      long long v96 = *(_OWORD *)(v7 + 3128);
      long long v97 = *(_OWORD *)(v7 + 3144);
      int v29 = *(_DWORD **)(v7 + 3160);
      if (v29) {
        *v29 += 2;
      }
      uint64_t v98 = v29;
      long long v99 = *(_OWORD *)(v7 + 3168);
      long long v100 = *(_OWORD *)(v7 + 3184);
      __int16 v101 = *(_WORD *)(v7 + 3200);
      uint64_t v30 = *(_DWORD **)(v7 + 3208);
      if (v30) {
        *v30 += 2;
      }
      int v102 = v30;
      uint64_t v31 = *(_DWORD **)(v7 + 3216);
      if (v31) {
        *v31 += 2;
      }
      BOOL v103 = v31;
      __int16 v104 = *(_WORD *)(v7 + 3224);
      uint64_t v32 = *(_DWORD **)(v7 + 3232);
      if (v32) {
        *v32 += 2;
      }
      double v105 = v32;
      uint64_t v33 = *(_DWORD **)(v7 + 3240);
      if (v33) {
        *v33 += 2;
      }
      uint64_t v106 = v33;
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)&v107, (WTF::ASCIILiteral *)(v7 + 3248));
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v108, (WTF::ASCIILiteral *)(v7 + 3264));
      v108[8] = *(_WORD *)(v7 + 3280);
      char v109 = *(unsigned char *)(v7 + 3282);
      uint64_t v34 = *(unsigned int *)(v7 + 3300);
      long long v110 = 0u;
      HIDWORD(v110) = v34;
      if (!v34) {
        goto LABEL_55;
      }
      if (!(v34 >> 29))
      {
        uint64_t v35 = (atomic_uint **)WTF::fastMalloc((WTF *)(8 * v34));
        DWORD2(v110) = v34;
        *(void *)&long long v110 = v35;
        uint64_t v36 = *(unsigned int *)(v7 + 3300);
        if (v36)
        {
          uint64_t v37 = *(atomic_uint ***)(v7 + 3288);
          uint64_t v38 = 8 * v36;
          do
          {
            unsigned int v39 = *v37++;
            atomic_fetch_add(v39, 1u);
            *v35++ = v39;
            v38 -= 8;
          }
          while (v38);
        }
LABEL_55:
        long long v40 = *(_OWORD *)(v7 + 3320);
        long long v111 = *(_OWORD *)(v7 + 3304);
        long long v112 = v40;
        char v113 = *(unsigned char *)(v7 + 3336);
        unsigned int v41 = *(_DWORD **)(v7 + 3344);
        if (v41) {
          *v41 += 2;
        }
        uint64_t v114 = v41;
        long long v115 = *(_OWORD *)(v7 + 3352);
        long long v116 = *(_OWORD *)(v7 + 3368);
        int v117 = *(_DWORD *)(v7 + 3384);
        __int16 v118 = *(_WORD *)(v7 + 3388);
        int v42 = *(_DWORD **)(v7 + 3392);
        if (v42) {
          *v42 += 2;
        }
        __int16 v119 = v42;
        long long v120 = *(_OWORD *)(v7 + 3400);
        long long v121 = *(_OWORD *)(v7 + 3416);
        __int16 v122 = *(_WORD *)(v7 + 3432);
        int v43 = *(_DWORD **)(v7 + 3440);
        if (v43) {
          *v43 += 2;
        }
        __int16 v123 = v43;
        uint64_t v44 = *(_DWORD **)(v7 + 3448);
        if (v44) {
          *v44 += 2;
        }
        double v124 = v44;
        long long v125 = *(_OWORD *)(v7 + 3456);
        v126[0] = 0;
        char v127 = 0;
        if (*(unsigned char *)(v7 + 3696))
        {
          std::construct_at[abi:sn180100]<WebCore::NavigationRequester,WebCore::NavigationRequester const&,WebCore::NavigationRequester*>((uint64_t)v126, v7 + 3472);
          char v127 = 1;
        }
        long long v45 = *(_OWORD *)(v7 + 3712);
        *(_OWORD *)((char *)v129 + 9) = *(_OWORD *)(v7 + 3737);
        long long v128 = v45;
        v129[0] = *(_OWORD *)(v7 + 3728);
        uint64_t v46 = *(_DWORD **)(v7 + 3760);
        if (v46) {
          *v46 += 2;
        }
        uint64_t v130 = v46;
        long long v131 = *(_OWORD *)(v7 + 3768);
        long long v132 = *(_OWORD *)(v7 + 3784);
        v133[0] = *(_OWORD *)(v7 + 3800);
        *(_DWORD *)((char *)v133 + 15) = *(_DWORD *)(v7 + 3815);
        WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v3, a2);
        uint64_t v48 = *(const void **)(a2 + 152);
        *(void *)(a2 + 152) = 0;
        uint64_t v49 = (WTF::StringImpl *)cf;
        CFTypeRef cf = v48;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2) {
            WTF::StringImpl::destroy(v49, v47);
          }
          else {
            *(_DWORD *)v49 -= 2;
          }
        }
        BOOL v50 = *(WTF::StringImpl **)(a2 + 160);
        *(void *)(a2 + 160) = 0;
        int v51 = v69;
        uint64_t v69 = v50;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2) {
            WTF::StringImpl::destroy(v51, v47);
          }
          else {
            *(_DWORD *)v51 -= 2;
          }
        }
        BOOL v52 = *(WTF::RefCountedBase **)(a2 + 168);
        *(void *)(a2 + 16++*(_DWORD *)(this + 8) = 0;
        int v53 = v70;
        __int16 v70 = v52;
        if (v53) {
          WTF::RefCounted<WebCore::FormData>::deref(v53);
        }
        uint64_t v71 = *(void *)(a2 + 176);
        char v72 = *(unsigned char *)(a2 + 184);
        BOOL v54 = *(const void **)(a2 + 192);
        *(void *)(a2 + 192) = 0;
        CFTypeRef v55 = v73;
        CFTypeRef v73 = v54;
        if (v55) {
          CFRelease(v55);
        }
        CFTypeRef v56 = (WebKit::NetworkDataTaskCocoa *)WTF::fastMalloc((WTF *)0x318);
        uint64_t v57 = WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa(v56, v2, (WebKit::NetworkDataTaskClient *)v7, (const WebKit::NetworkLoadParameters *)v61);
        uint64_t v58 = *(void *)(v7 + 3832);
        *(void *)(v7 + 3832) = v57;
        if (v58)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v58 + 8));
          uint64_t v57 = *(WebKit::NetworkDataTaskCocoa **)(v7 + 3832);
        }
        (*(void (**)(WebKit::NetworkDataTaskCocoa *))(*(void *)v57 + 24))(v57);
        WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v61, v59);
        return;
      }
LABEL_87:
      __break(0xC471u);
      JUMPOUT(0x198BBE7E4);
    }
LABEL_84:
    *((void *)v4 + 366) = *(void *)(v7 + 2960);
    *((unsigned char *)v4 + 2936) = *(unsigned char *)(v7 + 2968);
    uint64_t v60 = *(const void **)(v7 + 2976);
    char v79 = v60;
    if (v60) {
      CFRetain(v60);
    }
    char v80 = 1;
    goto LABEL_25;
  }
}

void *WTF::Detail::CallableWrapper<WebKit::PingLoad::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C67C0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PingLoad::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C67C0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::PingLoad::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::call(uint64_t a1, uint64_t a2)
{
  int v4 = *(WebKit::PingLoad **)(a1 + 8);
  int v5 = *(_DWORD *)(a2 + 656);
  if (v5)
  {
    if (v5 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x198BBED28);
    }
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v60);
    CFTypeRef cf = 0;
    char v64 = 0;
    char v61 = v61 & 0xF1 | 4;
    WebKit::PingLoad::didFinish(v4, (const WebCore::ResourceError *)a2, (const WebCore::ResourceResponse *)v60);
    CFTypeRef v7 = cf;
    CFTypeRef cf = 0;
    if (v7) {
      CFRelease(v7);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v60, v6);
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)v60);
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v8 + 16))(v8, v60);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    CFTypeRef v9 = v62;
    CFTypeRef v62 = 0;
    if (v9) {
      CFRelease(v9);
    }
    uint64_t v10 = (WebCore::ResourceRequestBase *)v60;
    goto LABEL_41;
  }
  WTF::URL::URL((uint64_t)v45, (uint64_t *)(a2 + 200));
  WTF::URL::URL((uint64_t)v46, (uint64_t *)(a2 + 240));
  uint64_t v11 = *(void *)(a2 + 280);
  long long v12 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a2 + 28++*(_DWORD *)(this + 8) = 0u;
  long long v47 = v12;
  *(void *)&long long v12 = *(void *)(a2 + 304);
  *(void *)(a2 + 304) = 0;
  v46[5] = v11;
  uint64_t v48 = v12;
  uint64_t v13 = *(void *)(a2 + 312);
  *(void *)(a2 + 312) = 0;
  uint64_t v49 = v13;
  uint64_t v14 = *(void *)(a2 + 320);
  *(void *)(a2 + 320) = 0;
  uint64_t v50 = v14;
  uint64_t v15 = *(void *)(a2 + 328);
  *(void *)(a2 + 32++*(_DWORD *)(this + 8) = 0;
  uint64_t v51 = v15;
  uint64_t v16 = *(void *)(a2 + 336);
  *(void *)(a2 + 336) = 0;
  uint64_t v52 = v16;
  LODWORD(v15) = *(_DWORD *)(a2 + 344);
  char v54 = *(unsigned char *)(a2 + 348);
  int v53 = v15;
  long long v17 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a2 + 352) = 0u;
  long long v55 = v17;
  uint64_t v18 = *(void *)(a2 + 368);
  uint64_t v19 = *(void *)(a2 + 376);
  *(void *)(a2 + 36++*(_DWORD *)(this + 8) = 0;
  char v58 = *(unsigned char *)(a2 + 384);
  uint64_t v56 = v18;
  uint64_t v57 = v19;
  uint64_t v20 = *(const void **)(a2 + 392);
  *(void *)(a2 + 392) = 0;
  CFTypeRef v59 = v20;
  if ((*(unsigned char *)(WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v45) + 8) & 2) == 0)
  {
    uint64_t v21 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v45);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v22 = (WTF::StringImpl *)v60[0];
    uint64_t v36 = 0;
    unsigned int v23 = *(WTF::StringImpl **)v21;
    if (*(void *)v21) {
      *(_DWORD *)v23 += 2;
    }
    uint64_t v37 = v23;
    long long v24 = *(_OWORD *)(v21 + 8);
    long long v39 = *(_OWORD *)(v21 + 24);
    long long v38 = v24;
    if (v22) {
      *(_DWORD *)v22 += 2;
    }
    long long v40 = v22;
    int v41 = 0;
    __int16 v42 = 2;
    CFTypeRef v43 = 0;
    char v44 = 1;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v60);
    CFTypeRef cf = 0;
    char v64 = 0;
    char v61 = v61 & 0xF1 | 4;
    WebKit::PingLoad::didFinish(v4, (const WebCore::ResourceError *)&v36, (const WebCore::ResourceResponse *)v60);
    CFTypeRef v26 = cf;
    CFTypeRef cf = 0;
    if (v26) {
      CFRelease(v26);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v60, v25);
    CFTypeRef v28 = v43;
    CFTypeRef v43 = 0;
    if (v28) {
      CFRelease(v28);
    }
    int v29 = v40;
    long long v40 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v27);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    uint64_t v31 = v37;
    uint64_t v37 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v27);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
    uint64_t v32 = v36;
    uint64_t v36 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::destroy(v32, v27);
        if (!v22)
        {
LABEL_35:
          WebCore::ResourceRequest::ResourceRequest((StringImpl *)v60);
          uint64_t v33 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = 0;
          (*(void (**)(uint64_t, void *))(*(void *)v33 + 16))(v33, v60);
          (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
          CFTypeRef v34 = v62;
          CFTypeRef v62 = 0;
          if (v34) {
            CFRelease(v34);
          }
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v60);
          goto LABEL_38;
        }
LABEL_32:
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v27);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
        goto LABEL_35;
      }
      *(_DWORD *)v32 -= 2;
    }
    if (!v22) {
      goto LABEL_35;
    }
    goto LABEL_32;
  }
  uint64_t v30 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v30 + 16))(v30, v45);
  (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
LABEL_38:
  CFTypeRef v35 = v59;
  CFTypeRef v59 = 0;
  if (v35) {
    CFRelease(v35);
  }
  uint64_t v10 = (WebCore::ResourceRequestBase *)v45;
LABEL_41:
  WebCore::ResourceRequestBase::~ResourceRequestBase(v10);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::PreconnectTask::PreconnectTask(WebKit::NetworkSession &,WebKit::NetworkLoadParameters &&,WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WTF::CompletionHandler::NetworkLoadMetrics const&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(WebKit::PreconnectTask **)(a1 + 8);
  uint64_t v2 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*((void *)v1 + 1) + 120));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v3 = (WTF::StringImpl *)v13[0];
  uint64_t v16 = 0;
  int v4 = *(WTF::StringImpl **)v2;
  if (*(void *)v2) {
    *(_DWORD *)v4 += 2;
  }
  long long v17 = v4;
  long long v5 = *(_OWORD *)(v2 + 24);
  long long v18 = *(_OWORD *)(v2 + 8);
  long long v19 = v5;
  if (v3) {
    *(_DWORD *)v3 += 2;
  }
  uint64_t v20 = v3;
  int v21 = 0;
  __int16 v22 = 4;
  unsigned int v23 = 0;
  char v24 = 1;
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v13);
  WebKit::PreconnectTask::didFinish(v1, (const WebCore::ResourceError *)&v16, (const WebCore::NetworkLoadMetrics *)v13);
  CFTypeRef v7 = v15;
  uint64_t v15 = 0;
  if (v7) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v7);
  }
  uint64_t v8 = v14;
  uint64_t v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  CFTypeRef v9 = v23;
  unsigned int v23 = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = v20;
  uint64_t v20 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v6);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = v17;
  long long v17 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v6);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  __n128 result = v16;
  uint64_t v16 = 0;
  if (!result)
  {
LABEL_24:
    if (!v3) {
      return result;
    }
    goto LABEL_27;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_24;
  }
  __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  if (!v3) {
    return result;
  }
LABEL_27:
  if (*(_DWORD *)v3 == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v6);
  }
  *(_DWORD *)v3 -= 2;
  return result;
}

void sub_198BBFC60(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13, uint64_t a14)
{
  if (a13 && a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198BBFE14(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (v12[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
  }
  else {
    --v12[2];
  }
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC05CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC0660(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_198BC0774(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10)
{
  if (a10) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC0804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl **a9, unsigned int a10, uint64_t a11, char a12)
{
  if (a12)
  {
    if (a9) {
      WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(a9, (WTF::StringImpl *)a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC0A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,uint64_t a21,WTF::StringImpl **a22,unsigned int a23,uint64_t a24,char a25)
{
  if (a25)
  {
    if (a22) {
      WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(a22, (WTF::StringImpl *)a23);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC0D94(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC0EDC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  if (a14) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC0FD4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC124C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

NSUInteger dumpCALayer(WTF::TextStream *a1, CALayer *a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  [(CALayer *)a2 bounds];
  WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>((uint64_t)"[x: ", 5, (uint64_t)" y: ", 5, (uint64_t)" width: ", 9, (uint64_t)" height: ", 10, __src, 0x5Du);
  WTF::TextStream::dumpProperty<WTF::String>(a1);
  long long v5 = *(WTF::StringImpl **)&__src[0];
  *(void *)&__src[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  [(CALayer *)a2 position];
  if (v6 != 0.0 || ([(CALayer *)a2 position], v7 != 0.0))
  {
    [(CALayer *)a2 position];
    WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>((uint64_t)"[x: ", 5, (uint64_t)" y: ", 5, 93, __src, v8, v8);
    WTF::TextStream::dumpProperty<WTF::String>(a1);
    uint64_t v10 = *(WTF::StringImpl **)&__src[0];
    *(void *)&__src[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  [(CALayer *)a2 zPosition];
  if (v11 != 0.0)
  {
    [(CALayer *)a2 zPosition];
    *(void *)&__src[0] = v12;
    WTF::tryMakeString<double>(v65);
    if (!v65[0])
    {
      __break(0xC471u);
      JUMPOUT(0x198BC1950);
    }
    WTF::TextStream::dumpProperty<WTF::String>(a1);
    uint64_t v14 = v65[0];
    v65[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  [(CALayer *)a2 anchorPoint];
  if (v15 != 0.5 || ([(CALayer *)a2 anchorPoint], v16 != 0.5))
  {
    [(CALayer *)a2 anchorPoint];
    WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>((uint64_t)"[x: ", 5, (uint64_t)" y: ", 5, 93, __src, v17, v17);
    WTF::TextStream::dumpProperty<WTF::String>(a1);
    long long v19 = *(WTF::StringImpl **)&__src[0];
    *(void *)&__src[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v18);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
  [(CALayer *)a2 anchorPointZ];
  if (v20 != 0.0)
  {
    [(CALayer *)a2 anchorPointZ];
    *(void *)&__src[0] = v21;
    WTF::tryMakeString<double>(v65);
    if (!v65[0])
    {
      __break(0xC471u);
      JUMPOUT(0x198BC1958);
    }
    WTF::TextStream::dumpProperty<WTF::String>(a1);
    unsigned int v23 = v65[0];
    v65[0] = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v22);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
  }
  [(CALayer *)a2 opacity];
  if (v24 != 1.0)
  {
    [(CALayer *)a2 opacity];
    unsigned int v25 = WTF::numberToStringAndSize();
    unsigned int v26 = v25;
    HIDWORD(v64) = v25;
    if ((v25 & 0x80000000) == 0)
    {
      long long v69 = v61;
      long long v70 = v62;
      long long v71 = v63;
      long long v72 = v64;
      *(_OWORD *)uint64_t v65 = v57;
      long long v66 = v58;
      long long v67 = v59;
      long long v68 = v60;
      if (!v25)
      {
        uint64_t v27 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
        *MEMORY[0x1E4F30960] += 2;
LABEL_36:
        WTF::TextStream::dumpProperty<WTF::String>(a1);
        char v54 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v29);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
        goto LABEL_40;
      }
      WTF::tryFastCompactMalloc((WTF *)(v25 + 20));
      uint64_t v27 = (WTF::StringImpl *)v55;
      if (v55)
      {
        CFTypeRef v28 = v55 + 5;
        *long long v55 = 2;
        *((_DWORD *)v27 + 1) = v26;
        *((void *)v27 + 1) = (char *)v27 + 20;
        *((_DWORD *)v27 + 4) = 4;
        __src[4] = v69;
        __src[5] = v70;
        __src[6] = v71;
        __src[7] = v72;
        __src[0] = *(_OWORD *)v65;
        __src[1] = v66;
        __src[2] = v67;
        __src[3] = v68;
        if (HIDWORD(v72))
        {
          if (HIDWORD(v72) == 1) {
            unsigned char *v28 = __src[0];
          }
          else {
            memcpy(v28, __src, HIDWORD(v72));
          }
        }
        goto LABEL_36;
      }
    }
    char v54 = 0;
    __break(0xC471u);
    goto LABEL_78;
  }
LABEL_40:
  [(CALayer *)a2 cornerRadius];
  if (v30 == 0.0) {
    goto LABEL_46;
  }
  [(CALayer *)a2 cornerRadius];
  *(void *)&__src[0] = v31;
  WTF::tryMakeString<double>(v65);
  if (!v65[0])
  {
    __break(0xC471u);
LABEL_78:
    JUMPOUT(0x198BC1940);
  }
  WTF::TextStream::dumpProperty<WTF::String>(a1);
  uint64_t v33 = v65[0];
  v65[0] = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, v32);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
LABEL_46:
  if ([(CALayer *)a2 maskedCorners] == 15) {
    goto LABEL_60;
  }
  CACornerMask v34 = [(CALayer *)a2 maskedCorners];
  LODWORD(v35) = 0;
  unint64_t v36 = v34;
  do
  {
    uint64_t v35 = (v35 + 1);
    BOOL v37 = v36 > 9;
    v36 /= 0xAuLL;
  }
  while (v37);
  if ((v35 & 0x80000000) != 0) {
    goto LABEL_74;
  }
  if (v35)
  {
    WTF::tryFastCompactMalloc((WTF *)(v35 + 20));
    uint64_t v38 = *(void *)&__src[0];
    if (*(void *)&__src[0])
    {
      uint64_t v39 = 0;
      long long v40 = (void *)(*(void *)&__src[0] + 20);
      **(_DWORD **)&__src[0] = 2;
      *(_DWORD *)(v38 + 4) = v35;
      *(void *)(v38 + ++*(_DWORD *)(this + 8) = v38 + 20;
      *(_DWORD *)(v38 + 16) = 4;
      do
      {
        *((unsigned char *)&__src[1] + v39-- + ++*(_DWORD *)(this + 8) = (v34 % 0xA) | 0x30;
        BOOL v37 = v34 > 9;
        v34 /= 0xAuLL;
      }
      while (v37);
      if (v39 + 26 <= 25) {
        memcpy(v40, (char *)&__src[1] + v39 + 9, -v39);
      }
      goto LABEL_56;
    }
LABEL_74:
    __break(0xC471u);
    JUMPOUT(0x198BC1948);
  }
  uint64_t v38 = MEMORY[0x1E4F30960];
  *MEMORY[0x1E4F30960] += 2;
LABEL_56:
  v65[0] = (WTF::StringImpl *)v38;
  WTF::TextStream::dumpProperty<WTF::String>(a1);
  __int16 v42 = v65[0];
  v65[0] = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, v41);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
  }
LABEL_60:
  NSUInteger result = [(NSArray *)[(CALayer *)a2 sublayers] count];
  if (result)
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    char v44 = [(CALayer *)a2 sublayers];
    uint64_t v45 = [(NSArray *)v44 countByEnumeratingWithState:&v50 objects:v56 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v51;
      do
      {
        for (uint64_t i = 0; i != v45; ++i)
        {
          if (*(void *)v51 != v46) {
            objc_enumerationMutation(v44);
          }
          uint64_t v48 = *(CALayer **)(*((void *)&v50 + 1) + 8 * i);
          WTF::TextStream::startGroup(a1);
          dumpCALayer(a1, v48, v49);
          WTF::TextStream::endGroup(a1);
        }
        uint64_t v45 = [(NSArray *)v44 countByEnumeratingWithState:&v50 objects:v56 count:16];
      }
      while (v45);
    }
    return WTF::TextStream::endGroup(a1);
  }
  return result;
}

void sub_198BC1964(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,WTF::StringImpl *a53)
{
  if (a53)
  {
    if (*(_DWORD *)a53 == 2) {
      WTF::StringImpl::destroy(a53, a2);
    }
    else {
      *(_DWORD *)a53 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC1C30(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,char a22)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&a22, a2);
  _Unwind_Resume(a1);
}

void sub_198BC1FF8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC213C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198BC2254(_Unwind_Exception *a1, void *a2)
{
  long long v5 = v4;
  WTF::fastFree(v5, a2);
  _Block_release(v3);
  CFRelease(*(CFTypeRef *)(v2 + 8));
  _Unwind_Resume(a1);
}

void sub_198BC2318(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC25DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198BC26D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC2A58(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC2AC8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC2C2C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC2D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198BC2E80(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC2FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  _Block_release(v16);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v18);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, v18);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198BC3174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198BC32CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198BC3424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198BC3544(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC3688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198BC3784(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC3844(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC3974(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC3A54(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC3B8C(_Unwind_Exception *a1)
{
  _Block_release(v2);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_198BC3C7C(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC408C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl **a21)
{
  if (a21) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a21, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC41E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _Block_object_dispose(&a14, 8);
  if (a20) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a20, v21);
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4++*(_DWORD *)(this + 8) = 0;
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 4++*(_DWORD *)(this + 8) = 0;
  *(void *)(result + 4++*(_DWORD *)(this + 8) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__7(uint64_t a1, void *a2)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  }
  return result;
}

void sub_198BC43EC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, a2);
  _Unwind_Resume(a1);
}

void sub_198BC471C(_Unwind_Exception *a1)
{
  CFRelease(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void sub_198BC48EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_198BC4A68(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC4B14(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC4BC0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC4C80(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC528C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

uint64_t API::WebsitePolicies::setVisibilityAdjustmentSelectors(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 48);
  uint64_t v4 = *(unsigned int *)(a1 + 60);
  if (v4)
  {
    uint64_t v6 = *v3;
    uint64_t v7 = 16 * v4;
    do
    {
      uint64_t v6 = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, a2)+ 16;
      v7 -= 16;
    }
    while (v7);
  }

  return WTF::VectorBuffer<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::FastMalloc>::adopt((uint64_t)v3, a2);
}

void sub_198BC552C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (v10) {
    CFRelease(v10);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC56DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC5818(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC5D5C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC5F58(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC6110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC62E0(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198BC6354(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198BC6484(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC6974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 8))(a18);
  }
  _Block_release(0);
  _Block_release(v18);
  _Unwind_Resume(a1);
}

void sub_198BC6C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = a20;
  a20 = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  _Block_release(0);
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v23);
  _Block_release(v20);
  _Unwind_Resume(a1);
}

void sub_198BC6E74(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC718C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void sub_198BC75E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Block_release(v10);
  _Unwind_Resume(a1);
}

void sub_198BC77EC(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198BC7984(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10)
{
  if (v10) {
    CFRelease(v10);
  }
  if (a10) {
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC7B00(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl **a25)
{
  if (a25) {
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(a25, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC7C90(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC7DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Block_release(0);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v15);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v16);
  long long v18 = a14;
  a14 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v17);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198BC7E70()
{
}

void sub_198BC7FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12)
{
  _Block_release(v12);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v14);
  double v16 = a12;
  a12 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198BC80C4(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC8200(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC8310(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC8404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198BC8524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198BC8644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198BC8764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198BC8850(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC890C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198BC8A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  _Block_release(v16);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v18);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, v18);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198BC8C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  _Block_release(v16);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v18);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, v18);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198BC8D24(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC8DE0(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC8ECC(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC91FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,int a27,char a28,uint64_t a29,uint64_t a30,int a31,WTF::StringImpl *a32)
{
  _Block_release(v32);
  if (a26 != -1) {
    ((void (*)(char *, char *))off_1EE9C6980[a26])(&a22, &a23);
  }
  if (a31 != -1) {
    ((void (*)(char *, char *))off_1EE9C6980[a31])(&a23, &a28);
  }
  _Unwind_Resume(a1);
}

void sub_198BC9340(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC948C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  _Block_release(v12);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v14);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v14);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198BC95A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_198BC96FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198BC97F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198BC98F0(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC9A9C(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC9BCC(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC9CF4(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BC9E38(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_198BCA0E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)va, a2);
  _Unwind_Resume(a1);
}

void sub_198BCA244(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a43) {
    WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&a11, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BCA3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198BCA538(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a43) {
    WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&a11, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BCA61C(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BCA728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198BCA8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198BCAA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198BCAC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198BCADB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198BCAEA4(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BCB040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  _Block_release(v12);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v14);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Block_release(v11);
  _Unwind_Resume(a1);
}

void sub_198BCB2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,int a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27)
{
  _Block_release(v27);
  if (a27 != -1) {
    ((void (*)(uint64_t *, uint64_t))off_1EE9C6980[a27])(&a9, v28);
  }
  a27 = -1;
  if (a23 != -1) {
    ((void (*)(uint64_t *, char *))off_1EE9C6980[a23])(&a9, &a20);
  }
  a23 = -1;
  uint64_t v31 = a10;
  a10 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v30);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  uint64_t v32 = a15;
  a15 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v30);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

uint64_t WebKit::toWebsiteDataType(WebKit *this, NSString *a2)
{
  if ([(WebKit *)this isEqualToString:@"WKWebsiteDataTypeCookies"])
  {
    uint64_t v3 = 0x100000000;
    uint64_t v4 = 1;
  }
  else if ([(WebKit *)this isEqualToString:@"WKWebsiteDataTypeFetchCache"])
  {
    uint64_t v3 = 0x100000000;
    uint64_t v4 = 0x8000;
  }
  else if ([(WebKit *)this isEqualToString:@"WKWebsiteDataTypeDiskCache"])
  {
    uint64_t v3 = 0x100000000;
    uint64_t v4 = 2;
  }
  else if ([(WebKit *)this isEqualToString:@"WKWebsiteDataTypeMemoryCache"])
  {
    uint64_t v3 = 0x100000000;
    uint64_t v4 = 4;
  }
  else if ([(WebKit *)this isEqualToString:@"WKWebsiteDataTypeOfflineWebApplicationCache"])
  {
    uint64_t v3 = 0x100000000;
    uint64_t v4 = 8;
  }
  else if ([(WebKit *)this isEqualToString:@"WKWebsiteDataTypeSessionStorage"])
  {
    uint64_t v3 = 0x100000000;
    uint64_t v4 = 16;
  }
  else if ([(WebKit *)this isEqualToString:@"WKWebsiteDataTypeLocalStorage"])
  {
    uint64_t v3 = 0x100000000;
    uint64_t v4 = 32;
  }
  else if ([(WebKit *)this isEqualToString:@"WKWebsiteDataTypeWebSQLDatabases"])
  {
    uint64_t v3 = 0x100000000;
    uint64_t v4 = 64;
  }
  else if ([(WebKit *)this isEqualToString:@"WKWebsiteDataTypeIndexedDBDatabases"])
  {
    uint64_t v3 = 0x100000000;
    uint64_t v4 = 128;
  }
  else if ([(WebKit *)this isEqualToString:@"WKWebsiteDataTypeServiceWorkerRegistrations"])
  {
    uint64_t v3 = 0x100000000;
    uint64_t v4 = 0x4000;
  }
  else if ([(WebKit *)this isEqualToString:@"WKWebsiteDataTypeFileSystem"])
  {
    uint64_t v3 = 0x100000000;
    uint64_t v4 = 0x80000;
  }
  else if ([(WebKit *)this isEqualToString:@"_WKWebsiteDataTypeHSTSCache"])
  {
    uint64_t v3 = 0x100000000;
    uint64_t v4 = 512;
  }
  else if ([(WebKit *)this isEqualToString:@"WKWebsiteDataTypeMediaKeys"])
  {
    uint64_t v3 = 0x100000000;
    uint64_t v4 = 256;
  }
  else if ([(WebKit *)this isEqualToString:@"WKWebsiteDataTypeHashSalt"])
  {
    uint64_t v3 = 0x100000000;
    uint64_t v4 = 0x10000;
  }
  else if ([(WebKit *)this isEqualToString:@"WKWebsiteDataTypeSearchFieldRecentSearches"])
  {
    uint64_t v3 = 0x100000000;
    uint64_t v4 = 1024;
  }
  else if ([(WebKit *)this isEqualToString:@"_WKWebsiteDataTypeResourceLoadStatistics"])
  {
    uint64_t v3 = 0x100000000;
    uint64_t v4 = 4096;
  }
  else if ([(WebKit *)this isEqualToString:@"_WKWebsiteDataTypeCredentials"])
  {
    uint64_t v3 = 0x100000000;
    uint64_t v4 = 0x2000;
  }
  else if ([(WebKit *)this isEqualToString:@"_WKWebsiteDataTypeAdClickAttributions"])
  {
    uint64_t v3 = 0x100000000;
    uint64_t v4 = 0x20000;
  }
  else if ([(WebKit *)this isEqualToString:@"_WKWebsiteDataTypePrivateClickMeasurements"])
  {
    uint64_t v4 = 0x20000;
    uint64_t v3 = 0x100000000;
  }
  else
  {
    int v5 = [(WebKit *)this isEqualToString:@"_WKWebsiteDataTypeAlternativeServices"];
    uint64_t v3 = 0x100000000;
    if (!v5) {
      uint64_t v3 = 0;
    }
    uint64_t v4 = 0x40000;
  }
  return v4 | v3;
}

void sub_198BCB74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198BCB868(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BCB940(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198BCBA14(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BCBF8C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a57) {
    WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&a25, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BCC0D4(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198BCC1A8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16_WKWebPushActionEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16_WKWebPushActionEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_198BCC460(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebCore::WindowFeatures::wantsPopup(WebCore::WindowFeatures *this)
{
  if (!*(unsigned char *)this
    && !*((unsigned char *)this + 8)
    && !*((unsigned char *)this + 16)
    && !*((unsigned char *)this + 24)
    && !*((unsigned char *)this + 32)
    && !*((unsigned char *)this + 37)
    && !*((unsigned char *)this + 39)
    && !*((unsigned char *)this + 41)
    && !*((unsigned char *)this + 43)
    && !*((unsigned char *)this + 45)
    && !*((unsigned char *)this + 47)
    && !*((unsigned char *)this + 49))
  {
    return 0;
  }
  if (*((unsigned char *)this + 37)) {
    return *((unsigned char *)this + 36) != 0;
  }
  if ((*((unsigned char *)this + 45) && *((unsigned char *)this + 44) || *((unsigned char *)this + 43) && *((unsigned char *)this + 42))
    && *((unsigned char *)this + 39)
    && *((unsigned char *)this + 38)
    && (!*((unsigned char *)this + 49) || *((unsigned char *)this + 48))
    && *((unsigned char *)this + 47)
    && *((unsigned char *)this + 46)
    && *((unsigned char *)this + 41))
  {
    return *((unsigned char *)this + 40) == 0;
  }
  return 1;
}

uint64_t WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    unsigned int v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        unsigned int v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 12) = v5;
      unsigned int v4 = v5;
    }
    if (v4)
    {
      memmove(*(void **)a1, *(const void **)a2, 96 * v4 - 15);
      unsigned int v6 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      unsigned int v6 = 0;
    }
    unsigned int v7 = *(_DWORD *)(a2 + 12);
    if (v6 != v7)
    {
      double v8 = (_OWORD *)(*(void *)a1 + 96 * v6);
      CFTypeRef v9 = (_OWORD *)(*(void *)a2 + 96 * v6);
      uint64_t v10 = 96 * v7 - 96 * v6;
      do
      {
        long long v11 = v9[1];
        *double v8 = *v9;
        v8[1] = v11;
        long long v12 = v9[2];
        long long v13 = v9[3];
        long long v14 = v9[5];
        v8[4] = v9[4];
        v8[5] = v14;
        void v8[2] = v12;
        v8[3] = v13;
        v8 += 6;
        v9 += 6;
        v10 -= 96;
      }
      while (v10);
      unsigned int v6 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v6;
  }
  return a1;
}

void sub_198BCCF3C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,WTF *a21,int a22)
{
  if (a19) {
    WTF::fastFree(a19, a2);
  }
  if (a21) {
    WTF::fastFree(a21, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BCD260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_storage_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>>(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  if (*(unsigned __int8 *)(result + 24) == *((unsigned __int8 *)a2 + 24))
  {
    if (*(unsigned char *)(result + 24))
    {
      uint64_t v3 = *a2;
      *a2 = 0;
      int v4 = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = 0;
      char v5 = *((unsigned char *)a2 + 20);
      *((unsigned char *)a2 + 20) = 0;
      CFTypeRef result = *(void *)result;
      *(void *)uint64_t v2 = v3;
      uint64_t v6 = a2[1];
      a2[1] = 0;
      unsigned int v7 = (WTF::StringImpl *)*(unsigned int *)(v2 + 8);
      *(void *)(v2 + ++*(_DWORD *)(this + 8) = v6;
      *(_DWORD *)(v2 + 16) = v4;
      *(unsigned char *)(v2 + 20) = v5;
      if (result)
      {
        return WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable((WTF::StringImpl **)result, v7);
      }
    }
  }
  else if (*(unsigned char *)(result + 24))
  {
    CFTypeRef result = *(void *)result;
    if (*(void *)v2) {
      CFTypeRef result = WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable((WTF::StringImpl **)result, (WTF::StringImpl *)*(unsigned int *)(v2 + 8));
    }
    *(unsigned char *)(v2 + 24) = 0;
  }
  else
  {
    *(void *)CFTypeRef result = 0;
    *(void *)(result + ++*(_DWORD *)(this + 8) = 0;
    *(void *)(result + 13) = 0;
    uint64_t v8 = *a2;
    *a2 = 0;
    *(void *)CFTypeRef result = v8;
    LODWORD(v++*(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(result + ++*(_DWORD *)(this + 8) = v8;
    LODWORD(v++*(_DWORD *)(this + 8) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(result + 12) = v8;
    LODWORD(v++*(_DWORD *)(this + 8) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(result + 16) = v8;
    LOBYTE(v++*(_DWORD *)(this + 8) = *((unsigned char *)a2 + 20);
    *((unsigned char *)a2 + 20) = 0;
    *(unsigned char *)(result + 20) = v8;
    *(unsigned char *)(result + 24) = 1;
  }
  return result;
}

uint64_t WTF::TextStream::dumpProperty<WTF::String>(WTF::TextStream *a1)
{
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();

  return WTF::TextStream::endGroup(a1);
}

uint64_t WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, unsigned __int8 a10)
{
  v15[0] = a1;
  v15[1] = a2;
  v14[0] = a3;
  v14[1] = a4;
  v13[0] = a5;
  v13[1] = a6;
  v12[0] = a7;
  v12[1] = a8;
  uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v15, v14, v13, v12, a9, &a10);
  if (!*a9) {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X4>, uint64_t *a4@<X6>, void *a5@<X8>, unsigned __int8 *a6)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1[1];
  BOOL v8 = v7 != 0;
  unint64_t v9 = v7 - 1;
  if (!v8) {
    unint64_t v9 = 0;
  }
  uint64_t v27 = *a1;
  if (v9 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198BCD830);
  }
  int v28 = v9;
  int v36 = WTF::numberToStringAndSize();
  uint64_t v13 = a2[1];
  BOOL v8 = v13 != 0;
  unint64_t v14 = v13 - 1;
  if (!v8) {
    unint64_t v14 = 0;
  }
  uint64_t v25 = *a2;
  if (v14 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198BCD850);
  }
  int v26 = v14;
  int v34 = WTF::numberToStringAndSize();
  uint64_t v15 = a3[1];
  BOOL v8 = v15 != 0;
  unint64_t v16 = v15 - 1;
  if (!v8) {
    unint64_t v16 = 0;
  }
  uint64_t v23 = *a3;
  if (v16 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198BCD870);
  }
  int v24 = v16;
  int v32 = WTF::numberToStringAndSize();
  uint64_t v17 = a4[1];
  BOOL v8 = v17 != 0;
  unint64_t v18 = v17 - 1;
  if (!v8) {
    unint64_t v18 = 0;
  }
  uint64_t v21 = *a4;
  if (v18 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198BCD890);
  }
  int v22 = v18;
  int v30 = WTF::numberToStringAndSize();
  unsigned __int8 v20 = *a6;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v27, (uint64_t)v35, (uint64_t)&v25, (uint64_t)v33, (uint64_t)&v23, (uint64_t)v31, (uint64_t)&v21, (uint64_t)v29, a5, &v20);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, unsigned __int8 *a10)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(*(_DWORD *)(a1 + 8), *(_DWORD *)(a2 + 124), *(unsigned int *)(a3 + 8), *(_DWORD *)(a4 + 124), *(_DWORD *)(a5 + 8), *(_DWORD *)(a6 + 124), *(_DWORD *)(a7 + 8), *(_DWORD *)(a8 + 124), (uint64_t)v50, 1);
  if (v50[0])
  {
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v21 = *(int8x16_t **)a1;
    uint64_t v22 = *(void *)(a1 + 8);
    long long v23 = *(_OWORD *)(a2 + 80);
    v55[4] = *(_OWORD *)(a2 + 64);
    v55[5] = v23;
    long long v24 = *(_OWORD *)(a2 + 112);
    v55[6] = *(_OWORD *)(a2 + 96);
    v55[7] = v24;
    long long v25 = *(_OWORD *)(a2 + 16);
    v55[0] = *(_OWORD *)a2;
    v55[1] = v25;
    long long v26 = *(_OWORD *)(a2 + 48);
    v55[2] = *(_OWORD *)(a2 + 32);
    v55[3] = v26;
    uint64_t v27 = *(int8x16_t **)a3;
    uint64_t v28 = *(void *)(a3 + 8);
    long long v29 = *(_OWORD *)(a4 + 112);
    v54[6] = *(_OWORD *)(a4 + 96);
    v54[7] = v29;
    long long v30 = *(_OWORD *)(a4 + 80);
    v54[4] = *(_OWORD *)(a4 + 64);
    v54[5] = v30;
    long long v31 = *(_OWORD *)(a4 + 48);
    v54[2] = *(_OWORD *)(a4 + 32);
    v54[3] = v31;
    long long v32 = *(_OWORD *)(a4 + 16);
    v54[0] = *(_OWORD *)a4;
    v54[1] = v32;
    uint64_t v33 = *(int8x16_t **)a5;
    uint64_t v34 = *(void *)(a5 + 8);
    long long v35 = *(_OWORD *)a6;
    long long v36 = *(_OWORD *)(a6 + 16);
    long long v37 = *(_OWORD *)(a6 + 48);
    v53[2] = *(_OWORD *)(a6 + 32);
    v53[3] = v37;
    v53[0] = v35;
    v53[1] = v36;
    long long v38 = *(_OWORD *)(a6 + 64);
    long long v39 = *(_OWORD *)(a6 + 80);
    long long v40 = *(_OWORD *)(a6 + 112);
    v53[6] = *(_OWORD *)(a6 + 96);
    v53[7] = v40;
    v53[4] = v38;
    v53[5] = v39;
    int v41 = *(int8x16_t **)a7;
    uint64_t v42 = *(void *)(a7 + 8);
    long long v43 = *(_OWORD *)a8;
    long long v44 = *(_OWORD *)(a8 + 16);
    long long v45 = *(_OWORD *)(a8 + 48);
    v52[2] = *(_OWORD *)(a8 + 32);
    v52[3] = v45;
    v52[0] = v43;
    v52[1] = v44;
    long long v46 = *(_OWORD *)(a8 + 64);
    long long v47 = *(_OWORD *)(a8 + 80);
    long long v48 = *(_OWORD *)(a8 + 112);
    v52[6] = *(_OWORD *)(a8 + 96);
    v52[7] = v48;
    v52[4] = v46;
    v52[5] = v47;
    uint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(v51, 1, v21, v22, v55, v27, v28, v54, &v49, v33, v34, v53, v41, v42, v52, *a10);
    uint64_t v20 = v49;
  }
  *a9 = v20;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, _OWORD *a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, long long *a8@<X7>, void *a9@<X8>, int8x16_t *a10, uint64_t a11, long long *a12, int8x16_t *a13, uint64_t a14, long long *a15, unsigned __int8 a16)
{
  int v18 = result;
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        long long v67 = a9;
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        uint64_t v20 = v76;
        if (v76)
        {
          *(_DWORD *)uint64_t v76 = 2;
          *(_DWORD *)(v76 + 4) = v18;
          *(void *)(v76 + ++*(_DWORD *)(this + 8) = v76 + 20;
          *(_DWORD *)(v76 + 16) = 4;
          long long v21 = a5[3];
          v84[2] = a5[2];
          v84[3] = v21;
          long long v22 = a5[5];
          v84[4] = a5[4];
          v84[5] = v22;
          long long v23 = a5[7];
          v84[6] = a5[6];
          v84[7] = v23;
          long long v24 = a5[1];
          v84[0] = *a5;
          v84[1] = v24;
          long long v25 = *a8;
          long long v26 = a8[1];
          long long v27 = a8[3];
          v83[2] = a8[2];
          v83[3] = v27;
          v83[0] = v25;
          v83[1] = v26;
          long long v28 = a8[4];
          long long v29 = a8[5];
          long long v30 = a8[7];
          v83[6] = a8[6];
          v83[7] = v30;
          v83[4] = v28;
          v83[5] = v29;
          long long v31 = *a12;
          long long v32 = a12[1];
          long long v33 = a12[3];
          v82[2] = a12[2];
          v82[3] = v33;
          v82[0] = v31;
          v82[1] = v32;
          long long v34 = a12[4];
          long long v35 = a12[5];
          long long v36 = a12[7];
          v82[6] = a12[6];
          v82[7] = v36;
          v82[4] = v34;
          v82[5] = v35;
          long long v37 = *a15;
          long long v38 = a15[1];
          long long v39 = a15[3];
          void v81[2] = a15[2];
          v81[3] = v39;
          v81[0] = v37;
          v81[1] = v38;
          long long v40 = a15[4];
          long long v41 = a15[5];
          long long v42 = a15[7];
          v81[6] = a15[6];
          v81[7] = v42;
          v81[4] = v40;
          v81[5] = v41;
          uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>((unsigned char *)(v76 + 20), a3, a4, v84, a6, a7, v83, v19, a10, a11, v82, a13, a14, v81, a16);
        }
        a9 = v67;
        goto LABEL_14;
      }
LABEL_9:
      uint64_t v20 = 0;
      goto LABEL_14;
    }
LABEL_10:
    uint64_t v20 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_14;
  }
  if (!result) {
    goto LABEL_10;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_9;
  }
  long long v43 = a9;
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  uint64_t v20 = v76;
  if (v76)
  {
    *(_DWORD *)uint64_t v76 = 2;
    *(_DWORD *)(v76 + 4) = v18;
    *(void *)(v76 + ++*(_DWORD *)(this + 8) = v76 + 20;
    *(_DWORD *)(v76 + 16) = 0;
    long long v45 = a5[3];
    v80[2] = a5[2];
    v80[3] = v45;
    long long v46 = a5[5];
    v80[4] = a5[4];
    v80[5] = v46;
    long long v47 = a5[7];
    v80[6] = a5[6];
    v80[7] = v47;
    long long v48 = a5[1];
    v80[0] = *a5;
    v80[1] = v48;
    long long v49 = *a8;
    long long v50 = a8[1];
    long long v51 = a8[3];
    v79[2] = a8[2];
    v79[3] = v51;
    v79[0] = v49;
    v79[1] = v50;
    long long v52 = a8[4];
    long long v53 = a8[5];
    long long v54 = a8[7];
    v79[6] = a8[6];
    v79[7] = v54;
    v79[4] = v52;
    v79[5] = v53;
    long long v55 = *a12;
    long long v56 = a12[1];
    long long v57 = a12[3];
    uint64_t v78[2] = a12[2];
    v78[3] = v57;
    v78[0] = v55;
    v78[1] = v56;
    long long v58 = a12[4];
    long long v59 = a12[5];
    long long v60 = a12[7];
    v78[6] = a12[6];
    v78[7] = v60;
    v78[4] = v58;
    v78[5] = v59;
    long long v61 = *a15;
    long long v62 = a15[1];
    long long v63 = a15[3];
    v77[2] = a15[2];
    v77[3] = v63;
    v77[0] = v61;
    v77[1] = v62;
    long long v64 = a15[4];
    long long v65 = a15[5];
    long long v66 = a15[7];
    v77[6] = a15[6];
    v77[7] = v66;
    v77[4] = v64;
    v77[5] = v65;
    uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>((char *)(v76 + 20), a3, a4, v80, a6, a7, v79, v44, a10, a11, v78, a13, a14, v77, a16);
  }
  a9 = v43;
LABEL_14:
  *a9 = v20;
  return result;
}

void sub_198BCDD10(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(unsigned char *__dst, unsigned char *a2, unsigned int a3, _OWORD *a4, unsigned char *__src, unsigned int a6, long long *a7, int a8, unsigned char *a9, uint64_t a10, long long *a11, unsigned char *a12, uint64_t a13, long long *a14, uint64_t a15)
{
  uint64_t v20 = __dst;
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (a3 == 1) {
      *__dst = *a2;
    }
    else {
      __dst = memcpy(__dst, a2, a3);
    }
  }
  long long v21 = a4[5];
  long long v22 = &v20[a3];
  __srca[4] = a4[4];
  __srca[5] = v21;
  long long v23 = a4[7];
  __srca[6] = a4[6];
  *(_OWORD *)__n = v23;
  long long v24 = a4[1];
  __srca[0] = *a4;
  __srca[1] = v24;
  long long v25 = a4[3];
  __srca[2] = a4[2];
  __srca[3] = v25;
  long long v51 = a7[2];
  long long v52 = a7[3];
  long long v49 = *a7;
  long long v50 = a7[1];
  long long v55 = a7[6];
  long long v56 = a7[7];
  long long v53 = a7[4];
  long long v54 = a7[5];
  long long v43 = a11[2];
  long long v44 = a11[3];
  long long v41 = *a11;
  long long v42 = a11[1];
  long long v47 = a11[6];
  long long v48 = a11[7];
  long long v45 = a11[4];
  long long v46 = a11[5];
  long long v35 = a14[2];
  long long v36 = a14[3];
  long long v33 = *a14;
  long long v34 = a14[1];
  long long v39 = a14[6];
  long long v40 = a14[7];
  long long v37 = a14[4];
  long long v38 = a14[5];
  uint64_t v26 = HIDWORD(__n[1]);
  if (HIDWORD(__n[1]))
  {
    if (HIDWORD(__n[1]) == 1) {
      *long long v22 = __srca[0];
    }
    else {
      __dst = memcpy(v22, __srca, HIDWORD(__n[1]));
    }
  }
  long long v27 = &v22[v26];
  if (a6)
  {
    if (a6 == 1) {
      unsigned char *v27 = *__src;
    }
    else {
      __dst = memcpy(v27, __src, a6);
    }
  }
  long long v28 = &v27[a6];
  v59[4] = v53;
  v59[5] = v54;
  v59[6] = v55;
  *(_OWORD *)long long v60 = v56;
  v59[0] = v49;
  v59[1] = v50;
  v59[2] = v51;
  v59[3] = v52;
  if (HIDWORD(v56))
  {
    if (HIDWORD(v56) == 1) {
      unsigned char *v28 = v59[0];
    }
    else {
      __dst = memcpy(v28, v59, HIDWORD(v56));
    }
  }
  long long v29 = &v28[HIDWORD(v56)];
  if (a10)
  {
    if (a10 == 1) {
      unsigned char *v29 = *a9;
    }
    else {
      __dst = memcpy(v29, a9, a10);
    }
  }
  long long v30 = &v29[a10];
  v61[4] = v45;
  v61[5] = v46;
  v61[6] = v47;
  *(_OWORD *)long long v62 = v48;
  v61[0] = v41;
  v61[1] = v42;
  _OWORD v61[2] = v43;
  v61[3] = v44;
  if (HIDWORD(v48))
  {
    if (HIDWORD(v48) == 1) {
      unsigned char *v30 = v61[0];
    }
    else {
      __dst = memcpy(v30, v61, HIDWORD(v48));
    }
  }
  long long v31 = &v30[HIDWORD(v48)];
  if (a13)
  {
    if (a13 == 1) {
      unsigned char *v31 = *a12;
    }
    else {
      __dst = memcpy(v31, a12, a13);
    }
  }
  long long v32 = &v31[a13];
  v63[4] = v37;
  v63[5] = v38;
  v63[6] = v39;
  long long v64 = v40;
  v63[0] = v33;
  v63[1] = v34;
  v63[2] = v35;
  v63[3] = v36;
  if (HIDWORD(v40))
  {
    if (HIDWORD(v40) == 1) {
      *long long v32 = v63[0];
    }
    else {
      __dst = memcpy(v32, v63, HIDWORD(v64));
    }
  }
  v32[HIDWORD(v40)] = a15;
  return __dst;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *a1, int8x16_t *a2, int a3, _OWORD *a4, int8x16_t *a5, int a6, long long *a7, uint64_t a8, int8x16_t *a9, int a10, long long *a11, int8x16_t *a12, int a13, long long *a14, char a15)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    unint64_t v16 = &a1[2 * (a3 & 0xFFFFFFC0)];
    long long v17 = 0uLL;
    do
    {
      v132.val[0] = *a2;
      int8x16_t v18 = a2[1];
      v136.val[0] = a2[2];
      int8x16_t v19 = a2[3];
      a2 += 4;
      int8x16_t v20 = v19;
      v136.val[1] = 0uLL;
      v140.val[0] = v18;
      v132.val[1] = 0uLL;
      long long v21 = a1;
      vst2q_s8(v21, v132);
      v21 += 32;
      v140.val[1] = 0uLL;
      vst2q_s8(v21, v140);
      long long v22 = a1 + 64;
      vst2q_s8(v22, v136);
      long long v23 = a1 + 96;
      vst2q_s8(v23, *(int8x16x2_t *)(&v17 - 1));
      a1 += 128;
    }
    while (a1 != v16);
    a1 = v16;
  }
  while (a1 != v15)
  {
    __int16 v24 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v24;
    a1 += 2;
  }
  long long v25 = a4[5];
  v86[4] = a4[4];
  v86[5] = v25;
  long long v26 = a4[7];
  v86[6] = a4[6];
  long long v87 = v26;
  long long v27 = a4[1];
  v86[0] = *a4;
  v86[1] = v27;
  long long v28 = a4[3];
  v86[2] = a4[2];
  v86[3] = v28;
  long long v80 = a7[2];
  long long v81 = a7[3];
  long long v78 = *a7;
  long long v79 = a7[1];
  long long v84 = a7[6];
  long long v85 = a7[7];
  long long v82 = a7[4];
  long long v83 = a7[5];
  long long v72 = a11[2];
  long long v73 = a11[3];
  long long v70 = *a11;
  long long v71 = a11[1];
  long long v76 = a11[6];
  long long v77 = a11[7];
  long long v74 = a11[4];
  long long v75 = a11[5];
  long long v64 = a14[2];
  long long v65 = a14[3];
  long long v62 = *a14;
  long long v63 = a14[1];
  long long v68 = a14[6];
  long long v69 = a14[7];
  long long v29 = &v15[2 * HIDWORD(v87)];
  long long v66 = a14[4];
  long long v67 = a14[5];
  if (HIDWORD(v87) < 0x40)
  {
    long long v31 = (int8x16_t *)v86;
  }
  else
  {
    long long v30 = &v15[2 * (HIDWORD(v87) & 0xFFFFFFC0)];
    long long v31 = (int8x16_t *)v86;
    long long v32 = 0uLL;
    do
    {
      v133.val[0] = *v31;
      int8x16_t v33 = v31[1];
      v137.val[0] = v31[2];
      int8x16_t v34 = v31[3];
      v31 += 4;
      int8x16_t v35 = v34;
      v137.val[1] = 0uLL;
      v141.val[0] = v33;
      v133.val[1] = 0uLL;
      long long v36 = v15;
      vst2q_s8(v36, v133);
      v36 += 32;
      v141.val[1] = 0uLL;
      vst2q_s8(v36, v141);
      long long v37 = v15 + 64;
      vst2q_s8(v37, v137);
      long long v38 = v15 + 96;
      vst2q_s8(v38, *(int8x16x2_t *)(&v32 - 1));
      v15 += 128;
    }
    while (v15 != v30);
    uint64_t v15 = v30;
  }
  while (v15 != v29)
  {
    __int16 v39 = v31->u8[0];
    long long v31 = (int8x16_t *)((char *)v31 + 1);
    *(_WORD *)uint64_t v15 = v39;
    v15 += 2;
  }
  long long v108 = v82;
  long long v109 = v83;
  long long v110 = v84;
  long long v111 = v85;
  long long v104 = v78;
  long long v105 = v79;
  long long v106 = v80;
  long long v107 = v81;
  long long v98 = v72;
  long long v99 = v73;
  long long v96 = v70;
  long long v97 = v71;
  long long v102 = v76;
  long long v103 = v77;
  long long v100 = v74;
  long long v101 = v75;
  long long v90 = v64;
  long long v91 = v65;
  long long v88 = v62;
  long long v89 = v63;
  long long v94 = v68;
  long long v95 = v69;
  long long v40 = &v29[2 * a6];
  long long v92 = v66;
  long long v93 = v67;
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    long long v41 = &v29[2 * (a6 & 0xFFFFFFC0)];
    long long v42 = 0uLL;
    do
    {
      v134.val[0] = *a5;
      int8x16_t v43 = a5[1];
      v138.val[0] = a5[2];
      int8x16_t v44 = a5[3];
      a5 += 4;
      int8x16_t v45 = v44;
      v138.val[1] = 0uLL;
      v142.val[0] = v43;
      v134.val[1] = 0uLL;
      long long v46 = v29;
      vst2q_s8(v46, v134);
      v46 += 32;
      v142.val[1] = 0uLL;
      vst2q_s8(v46, v142);
      long long v47 = v29 + 64;
      vst2q_s8(v47, v138);
      long long v48 = v29 + 96;
      vst2q_s8(v48, *(int8x16x2_t *)(&v42 - 1));
      v29 += 128;
    }
    while (v29 != v41);
    long long v29 = v41;
  }
  while (v29 != v40)
  {
    __int16 v49 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)long long v29 = v49;
    v29 += 2;
  }
  _DWORD v128[4] = v108;
  v128[5] = v109;
  v128[6] = v110;
  v128[7] = v111;
  v128[0] = v104;
  v128[1] = v105;
  v128[2] = v106;
  v128[3] = v107;
  long long v123 = v99;
  long long v122 = v98;
  long long v121 = v97;
  long long v120 = v96;
  long long v127 = v103;
  long long v126 = v102;
  long long v125 = v101;
  long long v124 = v100;
  long long v114 = v90;
  long long v115 = v91;
  long long v112 = v88;
  long long v113 = v89;
  long long v118 = v94;
  long long v119 = v95;
  long long v50 = &v40[2 * HIDWORD(v111)];
  long long v116 = v92;
  long long v117 = v93;
  if (HIDWORD(v111) < 0x40)
  {
    long long v52 = (int8x16_t *)v128;
  }
  else
  {
    long long v51 = &v40[2 * (HIDWORD(v111) & 0xFFFFFFC0)];
    long long v52 = (int8x16_t *)v128;
    long long v53 = 0uLL;
    do
    {
      v135.val[0] = *v52;
      int8x16_t v54 = v52[1];
      v139.val[0] = v52[2];
      int8x16_t v55 = v52[3];
      v52 += 4;
      int8x16_t v56 = v55;
      v139.val[1] = 0uLL;
      v143.val[0] = v54;
      v135.val[1] = 0uLL;
      long long v57 = v40;
      vst2q_s8(v57, v135);
      v57 += 32;
      v143.val[1] = 0uLL;
      vst2q_s8(v57, v143);
      long long v58 = v40 + 64;
      vst2q_s8(v58, v139);
      long long v59 = v40 + 96;
      vst2q_s8(v59, *(int8x16x2_t *)(&v53 - 1));
      v40 += 128;
    }
    while (v40 != v51);
    long long v40 = v51;
  }
  while (v40 != v50)
  {
    __int16 v60 = v52->u8[0];
    long long v52 = (int8x16_t *)((char *)v52 + 1);
    *(_WORD *)long long v40 = v60;
    v40 += 2;
  }
  v130[4] = v124;
  v130[5] = v125;
  v130[6] = v126;
  v130[7] = v127;
  v130[0] = v120;
  v130[1] = v121;
  v130[2] = v122;
  v130[3] = v123;
  v129[3] = v115;
  _OWORD v129[2] = v114;
  v129[1] = v113;
  v129[0] = v112;
  v129[7] = v119;
  v129[6] = v118;
  v129[5] = v117;
  v129[4] = v116;
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(v50, a9, a10, v130, a12, a13, v129, a15);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *result, int8x16_t *a2, int a3, _OWORD *a4, int8x16_t *a5, int a6, long long *a7, char a8)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  BOOL v8 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    unint64_t v9 = &result[2 * (a3 & 0xFFFFFFC0)];
    long long v10 = 0uLL;
    do
    {
      v74.val[0] = *a2;
      int8x16_t v11 = a2[1];
      v78.val[0] = a2[2];
      int8x16_t v12 = a2[3];
      a2 += 4;
      int8x16_t v13 = v12;
      v78.val[1] = 0uLL;
      v82.val[0] = v11;
      v74.val[1] = 0uLL;
      unint64_t v14 = result;
      vst2q_s8(v14, v74);
      v14 += 32;
      v82.val[1] = 0uLL;
      vst2q_s8(v14, v82);
      uint64_t v15 = result + 64;
      vst2q_s8(v15, v78);
      unint64_t v16 = result + 96;
      vst2q_s8(v16, *(int8x16x2_t *)(&v10 - 1));
      result += 128;
    }
    while (result != v9);
    uint64_t result = v9;
  }
  while (result != v8)
  {
    __int16 v17 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)uint64_t result = v17;
    result += 2;
  }
  long long v18 = a4[5];
  v62[4] = a4[4];
  v62[5] = v18;
  long long v19 = a4[7];
  v62[6] = a4[6];
  long long v63 = v19;
  long long v20 = a4[1];
  v62[0] = *a4;
  v62[1] = v20;
  long long v21 = a4[3];
  size_t v62[2] = a4[2];
  v62[3] = v21;
  long long v56 = a7[2];
  long long v57 = a7[3];
  long long v54 = *a7;
  long long v55 = a7[1];
  long long v60 = a7[6];
  long long v61 = a7[7];
  long long v22 = &v8[2 * HIDWORD(v63)];
  long long v58 = a7[4];
  long long v59 = a7[5];
  if (HIDWORD(v63) < 0x40)
  {
    __int16 v24 = (int8x16_t *)v62;
  }
  else
  {
    long long v23 = &v8[2 * (HIDWORD(v63) & 0xFFFFFFC0)];
    __int16 v24 = (int8x16_t *)v62;
    long long v25 = 0uLL;
    do
    {
      v75.val[0] = *v24;
      int8x16_t v26 = v24[1];
      v79.val[0] = v24[2];
      int8x16_t v27 = v24[3];
      v24 += 4;
      int8x16_t v28 = v27;
      v79.val[1] = 0uLL;
      v83.val[0] = v26;
      v75.val[1] = 0uLL;
      long long v29 = v8;
      vst2q_s8(v29, v75);
      v29 += 32;
      v83.val[1] = 0uLL;
      vst2q_s8(v29, v83);
      long long v30 = v8 + 64;
      vst2q_s8(v30, v79);
      long long v31 = v8 + 96;
      vst2q_s8(v31, *(int8x16x2_t *)(&v25 - 1));
      v8 += 128;
    }
    while (v8 != v23);
    BOOL v8 = v23;
  }
  while (v8 != v22)
  {
    __int16 v32 = v24->u8[0];
    __int16 v24 = (int8x16_t *)((char *)v24 + 1);
    *(_WORD *)BOOL v8 = v32;
    v8 += 2;
  }
  long long v68 = v58;
  long long v69 = v59;
  long long v70 = v60;
  long long v71 = v61;
  long long v64 = v54;
  long long v65 = v55;
  int8x16_t v33 = &v22[2 * a6];
  long long v66 = v56;
  long long v67 = v57;
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    int8x16_t v34 = &v22[2 * (a6 & 0xFFFFFFC0)];
    long long v35 = 0uLL;
    do
    {
      v76.val[0] = *a5;
      int8x16_t v36 = a5[1];
      v80.val[0] = a5[2];
      int8x16_t v37 = a5[3];
      a5 += 4;
      int8x16_t v38 = v37;
      v80.val[1] = 0uLL;
      v84.val[0] = v36;
      v76.val[1] = 0uLL;
      __int16 v39 = v22;
      vst2q_s8(v39, v76);
      v39 += 32;
      v84.val[1] = 0uLL;
      vst2q_s8(v39, v84);
      long long v40 = v22 + 64;
      vst2q_s8(v40, v80);
      long long v41 = v22 + 96;
      vst2q_s8(v41, *(int8x16x2_t *)(&v35 - 1));
      v22 += 128;
    }
    while (v22 != v34);
    long long v22 = v34;
  }
  while (v22 != v33)
  {
    __int16 v42 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)long long v22 = v42;
    v22 += 2;
  }
  v72[4] = v68;
  v72[5] = v69;
  v72[6] = v70;
  v72[7] = v71;
  v72[0] = v64;
  v72[1] = v65;
  v72[2] = v66;
  v72[3] = v67;
  int8x16_t v43 = &v33[2 * HIDWORD(v71)];
  if (HIDWORD(v71) < 0x40)
  {
    int8x16_t v45 = (int8x16_t *)v72;
  }
  else
  {
    int8x16_t v44 = &v33[2 * (HIDWORD(v71) & 0xFFFFFFC0)];
    int8x16_t v45 = (int8x16_t *)v72;
    long long v46 = 0uLL;
    do
    {
      v77.val[0] = *v45;
      int8x16_t v47 = v45[1];
      v81.val[0] = v45[2];
      int8x16_t v48 = v45[3];
      v45 += 4;
      int8x16_t v49 = v48;
      v81.val[1] = 0uLL;
      v85.val[0] = v47;
      v77.val[1] = 0uLL;
      long long v50 = v33;
      vst2q_s8(v50, v77);
      v50 += 32;
      v85.val[1] = 0uLL;
      vst2q_s8(v50, v85);
      long long v51 = v33 + 64;
      vst2q_s8(v51, v81);
      long long v52 = v33 + 96;
      vst2q_s8(v52, *(int8x16x2_t *)(&v46 - 1));
      v33 += 128;
    }
    while (v33 != v44);
    int8x16_t v33 = v44;
  }
  while (v33 != v43)
  {
    __int16 v53 = v45->u8[0];
    int8x16_t v45 = (int8x16_t *)((char *)v45 + 1);
    *(_WORD *)int8x16_t v33 = v53;
    v33 += 2;
  }
  *(_WORD *)int8x16_t v43 = a8;
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, void *a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  v14[0] = a1;
  v14[1] = a2;
  v13[0] = a3;
  v13[1] = a4;
  double v11 = a8;
  double v12 = a7;
  char v10 = a5;
  uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v14, v13, &v10, a6);
  if (!*a6) {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X2>, char *a3@<X4>, void *a4@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1[1];
  BOOL v6 = v5 != 0;
  unint64_t v7 = v5 - 1;
  if (!v6) {
    unint64_t v7 = 0;
  }
  uint64_t v16 = *a1;
  if (v7 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198BCE850);
  }
  int v17 = v7;
  int v21 = WTF::numberToStringAndSize();
  uint64_t v10 = a2[1];
  BOOL v6 = v10 != 0;
  unint64_t v11 = v10 - 1;
  if (!v6) {
    unint64_t v11 = 0;
  }
  uint64_t v14 = *a2;
  if (v11 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198BCE870);
  }
  int v15 = v11;
  int v19 = WTF::numberToStringAndSize();
  char v13 = *a3;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v16, (uint64_t)v20, (uint64_t)&v14, (uint64_t)v18, &v13, a4);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, void *a6@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v7 = *(_DWORD *)(a4 + 124);
  if (v7 < 0) {
    goto LABEL_20;
  }
  int v8 = *(_DWORD *)(a3 + 8);
  int v9 = v7 + 1;
  BOOL v10 = __OFADD__(v7, 1);
  if (v8 < 0 || v10) {
    goto LABEL_20;
  }
  int v11 = *(_DWORD *)(a2 + 124);
  BOOL v12 = __OFADD__(v8, v9);
  int v13 = v8 + v9;
  BOOL v14 = v12;
  if (v11 < 0
    || v14
    || ((v15 = result, v16 = *(_DWORD *)(result + 8), BOOL v12 = __OFADD__(v11, v13), v17 = v11 + v13, !v12)
      ? (char v18 = 0)
      : (char v18 = 1),
        v16 < 0 || (v18 & 1) != 0 || (uint64_t result = (v16 + v17), __OFADD__(v16, v17))))
  {
LABEL_20:
    *a6 = 0;
  }
  else
  {
    long long v20 = *(int8x16_t **)v15;
    uint64_t v19 = *(void *)(v15 + 8);
    long long v21 = *(_OWORD *)(a2 + 80);
    v33[4] = *(_OWORD *)(a2 + 64);
    v33[5] = v21;
    long long v22 = *(_OWORD *)(a2 + 112);
    v33[6] = *(_OWORD *)(a2 + 96);
    v33[7] = v22;
    long long v23 = *(_OWORD *)(a2 + 16);
    v33[0] = *(_OWORD *)a2;
    v33[1] = v23;
    long long v24 = *(_OWORD *)(a2 + 48);
    v33[2] = *(_OWORD *)(a2 + 32);
    v33[3] = v24;
    long long v25 = *(int8x16_t **)a3;
    uint64_t v26 = *(void *)(a3 + 8);
    long long v27 = *(_OWORD *)(a4 + 112);
    v32[6] = *(_OWORD *)(a4 + 96);
    v32[7] = v27;
    long long v28 = *(_OWORD *)(a4 + 80);
    v32[4] = *(_OWORD *)(a4 + 64);
    v32[5] = v28;
    long long v29 = *(_OWORD *)(a4 + 48);
    v32[2] = *(_OWORD *)(a4 + 32);
    v32[3] = v29;
    long long v30 = *(_OWORD *)(a4 + 16);
    v32[0] = *(_OWORD *)a4;
    v32[1] = v30;
    uint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(result, 1, v20, v19, v33, v25, v26, v32, &v31, *a5);
    *a6 = v31;
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, long long *a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, long long *a8@<X7>, void *a9@<X8>, char a10)
{
  int v16 = result;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        uint64_t v18 = *(void *)&v65[0];
        if (*(void *)&v65[0])
        {
          uint64_t v19 = (unsigned char *)(*(void *)&v65[0] + 20);
          **(_DWORD **)&v65[0] = 2;
          *(_DWORD *)(v18 + 4) = v16;
          *(void *)(v18 + ++*(_DWORD *)(this + 8) = v18 + 20;
          *(_DWORD *)(v18 + 16) = 4;
          long long v20 = a5[5];
          long long v59 = a5[4];
          long long v60 = v20;
          long long v21 = a5[7];
          long long v61 = a5[6];
          long long v62 = v21;
          long long v22 = a5[1];
          long long v55 = *a5;
          long long v56 = v22;
          long long v23 = a5[3];
          long long v57 = a5[2];
          long long v58 = v23;
          long long v24 = *a8;
          long long v25 = a8[1];
          long long v26 = a8[3];
          long long v49 = a8[2];
          long long v50 = v26;
          long long v47 = v24;
          long long v48 = v25;
          long long v27 = a8[4];
          long long v28 = a8[5];
          long long v29 = a8[7];
          long long v53 = a8[6];
          long long v54 = v29;
          long long v51 = v27;
          long long v52 = v28;
          if (a4)
          {
            if (a4 == 1) {
              *uint64_t v19 = a3->i8[0];
            }
            else {
              uint64_t result = (uint64_t)memcpy((void *)(v18 + 20), a3, a4);
            }
          }
          long long v30 = &v19[a4];
          __src[4] = v59;
          __src[5] = v60;
          __src[6] = v61;
          *(_OWORD *)__n = v62;
          __src[0] = v55;
          __src[1] = v56;
          __src[2] = v57;
          __src[3] = v58;
          uint64_t v31 = HIDWORD(v62);
          if (HIDWORD(v62))
          {
            if (HIDWORD(v62) == 1) {
              unsigned char *v30 = __src[0];
            }
            else {
              uint64_t result = (uint64_t)memcpy(v30, __src, HIDWORD(v62));
            }
          }
          __int16 v32 = &v30[v31];
          if (a7)
          {
            if (a7 == 1) {
              *__int16 v32 = a6->i8[0];
            }
            else {
              uint64_t result = (uint64_t)memcpy(v32, a6, a7);
            }
          }
          int8x16_t v33 = &v32[a7];
          v65[4] = v51;
          v65[5] = v52;
          v65[6] = v53;
          long long v66 = v54;
          v65[0] = v47;
          v65[1] = v48;
          uint64_t v65[2] = v49;
          v65[3] = v50;
          uint64_t v34 = HIDWORD(v54);
          if (HIDWORD(v54))
          {
            if (HIDWORD(v54) == 1) {
              *int8x16_t v33 = v65[0];
            }
            else {
              uint64_t result = (uint64_t)memcpy(v33, v65, HIDWORD(v66));
            }
          }
          v33[v34] = a10;
        }
        goto LABEL_25;
      }
LABEL_21:
      uint64_t v18 = 0;
      goto LABEL_25;
    }
LABEL_22:
    uint64_t v18 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_25;
  }
  if (!result) {
    goto LABEL_22;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_21;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  uint64_t v18 = *(void *)&v65[0];
  if (*(void *)&v65[0])
  {
    **(_DWORD **)&v65[0] = 2;
    *(_DWORD *)(v18 + 4) = v16;
    *(void *)(v18 + ++*(_DWORD *)(this + 8) = v18 + 20;
    *(_DWORD *)(v18 + 16) = 0;
    long long v35 = a5[3];
    v46[2] = a5[2];
    v46[3] = v35;
    long long v36 = a5[5];
    v46[4] = a5[4];
    v46[5] = v36;
    long long v37 = a5[7];
    void v46[6] = a5[6];
    v46[7] = v37;
    long long v38 = a5[1];
    v46[0] = *a5;
    v46[1] = v38;
    long long v39 = *a8;
    long long v40 = a8[1];
    long long v41 = a8[3];
    v45[2] = a8[2];
    void v45[3] = v41;
    v45[0] = v39;
    v45[1] = v40;
    long long v42 = a8[4];
    long long v43 = a8[5];
    long long v44 = a8[7];
    v45[6] = a8[6];
    v45[7] = v44;
    v45[4] = v42;
    v45[5] = v43;
    uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>((char *)(v18 + 20), a3, a4, v46, a6, a7, v45, a10);
  }
LABEL_25:
  *a9 = v18;
  return result;
}

void sub_198BCEC7C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::tryMakeString<double>@<X0>(void *a1@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t result = WTF::numberToStringAndSize();
  HIDWORD(v12) = result;
  if ((result & 0x80000000) != 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    v13[4] = v9;
    v13[5] = v10;
    v13[6] = v11;
    v13[7] = v12;
    v13[0] = v5;
    v13[1] = v6;
    uint64_t v13[2] = v7;
    v13[3] = v8;
    uint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<double,void>>(result, 1, v13, &v4);
    uint64_t v3 = v4;
  }
  *a1 = v3;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<double,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, void *a4@<X8>)
{
  int v5 = result;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        uint64_t v7 = v28;
        if (v28)
        {
          uint64_t result = v28 + 20;
          *(_DWORD *)uint64_t v28 = 2;
          *(_DWORD *)(v28 + 4) = v5;
          *(void *)(v28 + ++*(_DWORD *)(this + 8) = v28 + 20;
          *(_DWORD *)(v28 + 16) = 4;
          long long v8 = a3[5];
          __src[4] = a3[4];
          __src[5] = v8;
          long long v9 = a3[7];
          __src[6] = a3[6];
          long long v32 = v9;
          long long v10 = a3[1];
          __src[0] = *a3;
          __src[1] = v10;
          long long v11 = a3[3];
          __src[2] = a3[2];
          __src[3] = v11;
          if (HIDWORD(v32))
          {
            if (HIDWORD(v32) == 1) {
              *(unsigned char *)uint64_t result = __src[0];
            }
            else {
              uint64_t result = (uint64_t)memcpy((void *)result, __src, HIDWORD(v32));
            }
          }
        }
        goto LABEL_20;
      }
LABEL_10:
      uint64_t v7 = 0;
      goto LABEL_20;
    }
LABEL_11:
    uint64_t v7 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_20;
  }
  if (!result) {
    goto LABEL_11;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_10;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  uint64_t v7 = v28;
  if (v28)
  {
    long long v12 = (char *)(v28 + 20);
    *(_DWORD *)uint64_t v28 = 2;
    *(_DWORD *)(v28 + 4) = v5;
    *(void *)(v28 + ++*(_DWORD *)(this + 8) = v28 + 20;
    *(_DWORD *)(v28 + 16) = 0;
    long long v13 = a3[3];
    uint64_t v29[2] = a3[2];
    v29[3] = v13;
    long long v14 = a3[5];
    v29[4] = a3[4];
    v29[5] = v14;
    long long v15 = a3[7];
    v29[6] = a3[6];
    long long v30 = v15;
    long long v16 = a3[1];
    v29[0] = *a3;
    v29[1] = v16;
    uint64_t v17 = v28 + 20 + 2 * HIDWORD(v30);
    if (HIDWORD(v30) < 0x40)
    {
      uint64_t v19 = (int8x16_t *)v29;
    }
    else
    {
      uint64_t v18 = &v12[2 * (HIDWORD(v30) & 0xFFFFFFC0)];
      uint64_t v19 = (int8x16_t *)v29;
      long long v20 = 0uLL;
      do
      {
        v34.val[0] = *v19;
        int8x16_t v21 = v19[1];
        v35.val[0] = v19[2];
        int8x16_t v22 = v19[3];
        v19 += 4;
        int8x16_t v23 = v22;
        v35.val[1] = 0uLL;
        v36.val[0] = v21;
        v34.val[1] = 0uLL;
        long long v24 = v12;
        vst2q_s8(v24, v34);
        v24 += 32;
        v36.val[1] = 0uLL;
        vst2q_s8(v24, v36);
        long long v25 = v12 + 64;
        vst2q_s8(v25, v35);
        long long v26 = v12 + 96;
        vst2q_s8(v26, *(int8x16x2_t *)(&v20 - 1));
        v12 += 128;
      }
      while (v12 != v18);
      long long v12 = v18;
    }
    while (v12 != (char *)v17)
    {
      __int16 v27 = v19->u8[0];
      uint64_t v19 = (int8x16_t *)((char *)v19 + 1);
      *(_WORD *)long long v12 = v27;
      v12 += 2;
    }
  }
LABEL_20:
  *a4 = v7;
  return result;
}

void std::default_delete<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + ++*(_DWORD *)(this + 8) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)a2, (void *)a2);
    WTF::fastFree((WTF *)v4, v5);
  }
}

void sub_198BCF170(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebsiteDataRecord *WebKit::WebsiteDataRecord::WebsiteDataRecord(WebKit::WebsiteDataRecord *this, const WebKit::WebsiteDataRecord *a2)
{
  uint64_t v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *(void *)this = v4;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((unsigned char *)this + 16) = 0;
  *((unsigned char *)this + 32) = 0;
  if (*((unsigned char *)a2 + 32))
  {
    *((void *)this + 2) = *((void *)a2 + 2);
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::HashTable((uint64_t *)this + 3, (_DWORD **)a2 + 3);
    *((unsigned char *)this + 32) = 1;
  }
  WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::HashTable((uint64_t *)this + 5, (uint64_t *)a2 + 5);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)this + 6, (void **)a2 + 6);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)this + 7, (void **)a2 + 7);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)this + 8, (void **)a2 + 8);
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)this + 9, (uint64_t *)a2 + 9);
  return this;
}

void sub_198BCF25C(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 32) && *v3) {
    WTF::fastFree((WTF *)(*v3 - 16), a2);
  }
  int v5 = *(WTF::StringImpl **)v2;
  *(void *)uint64_t v2 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::HashTable(uint64_t *a1, _DWORD **a2)
{
  *a1 = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    int v4 = *(v3 - 3);
    if (v4)
    {
      unsigned int v6 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(*(v3 - 3));
      uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(16 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 12) = v6;
      *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      long long v8 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::begin(a2);
      long long v10 = *a2;
      if (*a2) {
        v10 += 4 * *(v10 - 1);
      }
      while (v8 != v10)
      {
        uint64_t v11 = *a1;
        if (*a1) {
          int v12 = *(_DWORD *)(v11 - 8);
        }
        else {
          int v12 = 0;
        }
        int v13 = 0;
        unsigned int v14 = *v8 + ~(*v8 << 15);
        unsigned int v15 = (9 * (v14 ^ (v14 >> 10))) ^ ((9 * (v14 ^ (v14 >> 10))) >> 6);
        unsigned int v16 = (v15 + ~(v15 << 11)) ^ ((v15 + ~(v15 << 11)) >> 16);
        do
        {
          uint64_t v17 = v16 & v12;
          unsigned int v16 = ++v13 + v17;
        }
        while (*(_DWORD *)(v11 + 16 * v17));
        long long v18 = *(_OWORD *)v8;
        v8 += 4;
        *(_OWORD *)(v11 + 16 * v17) = v18;
        while (v8 != v9)
        {
          if ((*v8 + 1) > 1) {
            goto LABEL_16;
          }
          v8 += 4;
        }
        long long v8 = v9;
LABEL_16:
        ;
      }
    }
  }
  return a1;
}

_DWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::begin(_DWORD **a1)
{
  uint64_t result = *a1;
  if (!result) {
    return 0;
  }
  uint64_t v2 = *(result - 1);
  uint64_t v3 = &result[4 * v2];
  if (!*(result - 3)) {
    return &result[4 * v2];
  }
  if (v2)
  {
    uint64_t v4 = 16 * v2;
    while ((*result + 1) <= 1)
    {
      result += 4;
      v4 -= 16;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 80 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x3333334)
    {
      __break(0xC471u);
      JUMPOUT(0x198BCF5F4);
    }
    unint64_t v3 = *(WTF::StringImpl **)a1;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)a1 + 80 * *(unsigned int *)(a1 + 12));
    int v5 = 80 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(80 * a2));
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = (v5 & 0xFFFFFFF0) / 0x50;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebsiteDataRecord>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebKit::WebsiteDataRecord>::move(WTF::StringImpl *a1, WTF::StringImpl *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      unint64_t v7 = (WTF::StringImpl *)((char *)a1 + v6);
      uint64_t v8 = a3 + v6;
      uint64_t v9 = *(void *)((char *)a1 + v6);
      *(void *)((char *)a1 + v6) = 0;
      *(void *)uint64_t v8 = v9;
      *(_DWORD *)(v8 + ++*(_DWORD *)(this + 8) = *(_DWORD *)((char *)a1 + v6 + 8);
      *(unsigned char *)(v8 + 16) = 0;
      *(unsigned char *)(v8 + 32) = 0;
      if (*((unsigned char *)a1 + v6 + 32))
      {
        *(void *)(v8 + 16) = *((void *)v7 + 2);
        *(void *)(v8 + 24) = 0;
        uint64_t v10 = *((void *)v7 + 3);
        *((void *)v7 + 3) = 0;
        *(void *)(v8 + 24) = v10;
        *(unsigned char *)(v8 + 32) = 1;
      }
      *(void *)(v8 + ++*(_DWORD *)(this - 40) = 0;
      uint64_t v11 = *((void *)v7 + 5);
      *((void *)v7 + 5) = 0;
      *(void *)(v8 + ++*(_DWORD *)(this - 40) = v11;
      *(void *)(v8 + 4++*(_DWORD *)(this + 8) = 0;
      uint64_t v12 = *((void *)v7 + 6);
      *((void *)v7 + 6) = 0;
      *(void *)(v8 + 4++*(_DWORD *)(this + 8) = v12;
      *(void *)(v8 + 56) = 0;
      uint64_t v13 = *((void *)v7 + 7);
      *((void *)v7 + 7) = 0;
      *(void *)(v8 + 56) = v13;
      *(void *)(v8 + 64) = 0;
      uint64_t v14 = *((void *)v7 + 8);
      *((void *)v7 + ++*(_DWORD *)(this + 8) = 0;
      *(void *)(v8 + 64) = v14;
      *(void *)(v8 + 72) = 0;
      uint64_t v15 = *((void *)v7 + 9);
      *((void *)v7 + 9) = 0;
      *(void *)(v8 + 72) = v15;
      WebKit::WebsiteDataRecord::~WebsiteDataRecord(v7, a2);
      v6 += 80;
    }
    while ((WTF::StringImpl *)(v16 + 80) != a2);
  }
}

void WebKit::WebsiteDataRecord::~WebsiteDataRecord(WebKit::WebsiteDataRecord *this, WTF::StringImpl *a2)
{
  unint64_t v3 = (WTF::StringImpl **)*((void *)this + 9);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (WTF::StringImpl **)*((void *)this + 8);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  int v5 = (WTF::StringImpl **)*((void *)this + 7);
  if (v5) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  }
  uint64_t v6 = (WTF::StringImpl **)*((void *)this + 6);
  if (v6) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, a2);
  }
  uint64_t v7 = *((void *)this + 5);
  if (v7) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v7, a2);
  }
  if (*((unsigned char *)this + 32))
  {
    uint64_t v8 = *((void *)this + 3);
    if (v8) {
      WTF::fastFree((WTF *)(v8 - 16), a2);
    }
  }
  uint64_t v9 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
}

uint64_t *WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::HashTable(uint64_t *a1, uint64_t *a2)
{
  *a1 = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    int v4 = *(_DWORD *)(v3 - 12);
    if (v4)
    {
      unsigned int v6 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(*(_DWORD *)(v3 - 12));
      uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(40 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 12) = v6;
      *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      uint64_t v8 = WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::begin(a2);
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      uint64_t v12 = *a2 ? *a2 + 40 * *(unsigned int *)(*a2 - 4) : 0;
      if ((WTF **)v12 != v8)
      {
        do
        {
          int8x16_t v21 = v9;
          uint64_t v13 = *a1;
          if (*a1) {
            int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            int v14 = 0;
          }
          unsigned int v15 = *((_DWORD *)*v9 + 4);
          if (v15 >= 0x100) {
            unsigned int v16 = v15 >> 8;
          }
          else {
            unsigned int v16 = WTF::StringImpl::hashSlowCase(*v9);
          }
          int v17 = 0;
          do
          {
            unsigned int v18 = v16 & v14;
            int v19 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)(v13 + 40 * (v16 & v14)));
            unsigned int v16 = ++v17 + v18;
          }
          while (!v19);
          WTF::IdentityHashTranslator<WTF::HashTraits<WTF::URL>,WTF::DefaultHash<WTF::URL>>::translate<WTF::URL,WTF::URL,WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::HashTable(WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>> const&)::{lambda(void)#1}>(v13 + 40 * v18, (uint64_t)v9, &v21);
          while (1)
          {
            v9 += 5;
            if (v9 == v11) {
              break;
            }
            if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v9) & 1) == 0
              && *v9 != (WTF::StringImpl *)-1)
            {
              goto LABEL_21;
            }
          }
          uint64_t v9 = v11;
LABEL_21:
          ;
        }
        while (v9 != (WTF::StringImpl **)v12);
      }
    }
  }
  return a1;
}

WTF::StringImpl *WTF::IdentityHashTranslator<WTF::HashTraits<WTF::URL>,WTF::DefaultHash<WTF::URL>>::translate<WTF::URL,WTF::URL,WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::HashTable(WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>> const&)::{lambda(void)#1}>(uint64_t a1, uint64_t a2, WTF::StringImpl ***a3)
{
  uint64_t v3 = *a3;
  int v4 = **a3;
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  uint64_t v8 = v4;
  long long v5 = *(_OWORD *)(v3 + 3);
  long long v9 = *(_OWORD *)(v3 + 1);
  long long v10 = v5;
  WTF::URL::operator=(a1, (uint64_t)&v8);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198BCF97C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebsiteDataStoreClient::~WebsiteDataStoreClient(id *this)
{
}

{
  void *v2;
  uint64_t vars8;

  objc_destroyWeak(this + 2);
  objc_destroyWeak(this + 1);

  WTF::fastFree((WTF *)this, v2);
}

WebCore::NotificationData *WebCore::NotificationData::NotificationData(WebCore::NotificationData *this, const WebCore::NotificationData *a2)
{
  int v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *(void *)this = v4;
  long long v5 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + ++*(_DWORD *)(this + 8) = v5;
  unsigned int v6 = (_DWORD *)*((void *)a2 + 5);
  if (v6) {
    *v6 += 2;
  }
  *((void *)this + 5) = v6;
  uint64_t v7 = (_DWORD *)*((void *)a2 + 6);
  if (v7) {
    *v7 += 2;
  }
  *((void *)this + 6) = v7;
  uint64_t v8 = (_DWORD *)*((void *)a2 + 7);
  if (v8) {
    *v8 += 2;
  }
  *((void *)this + 7) = v8;
  long long v9 = (_DWORD *)*((void *)a2 + 8);
  if (v9) {
    *v9 += 2;
  }
  *((void *)this + ++*(_DWORD *)(this + 8) = v9;
  long long v10 = (_DWORD *)*((void *)a2 + 9);
  if (v10) {
    *v10 += 2;
  }
  *((void *)this + 9) = v10;
  *((unsigned char *)this + 80) = *((unsigned char *)a2 + 80);
  uint64_t v11 = (_DWORD *)*((void *)a2 + 11);
  if (v11) {
    *v11 += 2;
  }
  *((void *)this + 1objc_destroyWeak(this + 1) = v11;
  uint64_t v12 = (_DWORD *)*((void *)a2 + 12);
  if (v12) {
    *v12 += 2;
  }
  *((void *)this + 1objc_destroyWeak(this + 2) = v12;
  long long v13 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)this + 104) = v13;
  long long v14 = *((_OWORD *)a2 + 13);
  long long v16 = *((_OWORD *)a2 + 10);
  long long v15 = *((_OWORD *)a2 + 11);
  *((_OWORD *)this + 1objc_destroyWeak(this + 2) = *((_OWORD *)a2 + 12);
  *((_OWORD *)this + 13) = v14;
  *((_OWORD *)this + 10) = v16;
  *((_OWORD *)this + 1objc_destroyWeak(this + 1) = v15;
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  int v17 = (WTF *)*((unsigned int *)a2 + 59);
  *((void *)this + 2++*(_DWORD *)(this + 8) = 0;
  *((void *)this + 29) = 0;
  *((_DWORD *)this + 59) = v17;
  if (v17)
  {
    unsigned int v18 = (void *)WTF::fastMalloc(v17);
    *((_DWORD *)this + 5++*(_DWORD *)(this + 8) = v17;
    *((void *)this + 2++*(_DWORD *)(this + 8) = v18;
    memcpy(v18, *((const void **)a2 + 28), *((unsigned int *)a2 + 59));
  }
  *((_WORD *)this + 120) = *((_WORD *)a2 + 120);
  return this;
}

void sub_198BCFB44(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  int v4 = v2[12];
  v2[12] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  long long v5 = v2[11];
  v2[11] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unsigned int v6 = v2[9];
  v2[9] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = v2[8];
  v2[8] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = v2[7];
  v2[7] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  long long v9 = v2[6];
  v2[6] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  long long v10 = v2[5];
  v2[5] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = *v2;
  *uint64_t v2 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(BOOL)>,void,BOOL>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C6C20;
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(BOOL)>,void,BOOL>::~CallableWrapper(const void **a1)
{
  *a1 = &unk_1EE9C6C20;
  _Block_release(a1[1]);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(BOOL)>,void,BOOL>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,NSString *&>(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  MEMORY[0x19972EAD0](*(void *)a1 + 8 * *(unsigned int *)(a1 + 12), *a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((unsigned int *)a2 + 3);
  *(void *)uint64_t result = 0;
  *(void *)(result + ++*(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 28))
  {
    unint64_t v5 = (void *)WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(v2 + ++*(_DWORD *)(this + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *((unsigned int *)a2 + 3);
    if (v6)
    {
      uint64_t v7 = *a2;
      uint64_t v8 = *a2 + 16 * v6;
      do
      {
        long long v9 = *(_DWORD **)v7;
        if (*(void *)v7) {
          *v9 += 2;
        }
        *unint64_t v5 = v9;
        long long v10 = *(_DWORD **)(v7 + 8);
        if (v10) {
          *v10 += 2;
        }
        v5[1] = v10;
        v7 += 16;
        v5 += 2;
      }
      while (v7 != v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WebKit::WebsiteDataRecord **)a1;
    uint64_t v5 = 80 * v3;
    do
    {
      WebKit::WebsiteDataRecord::~WebsiteDataRecord(v4, a2);
      uint64_t v4 = (WebKit::WebsiteDataRecord *)(v6 + 80);
      v5 -= 80;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_198BD0EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  CFRelease(*(CFTypeRef *)(v2 + 8));
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v4);
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

void sub_198BD11DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, WTF::StringImpl *a12)
{
  CFRelease(*(CFTypeRef *)(v12 + 8));
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v14);
  _Unwind_Resume(a1);
}

void sub_198BD1944(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::ObjectImpl<(API::Object::Type)96>::type()
{
  return 96;
}

void WebsiteDataStoreClient::requestStorageSpace(uint64_t a1, WebCore::SecurityOriginData *a2, WebCore::SecurityOriginData *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  if (*(unsigned char *)(a1 + 24) && (long long v13 = (id *)(a1 + 16), (WeakRetained = objc_loadWeakRetained((id *)(a1 + 16))) != 0))
  {
    CFRelease(WeakRetained);
    Weak = (WebKit::CompletionHandlerCallChecker *)objc_loadWeak(v13);
    WebKit::CompletionHandlerCallChecker::create(Weak, (objc_object *)sel_requestStorageSpace_frameOrigin_quota_currentSize_spaceRequired_decisionHandler_, &v31);
    uint64_t v16 = *a7;
    *a7 = 0;
    uint64_t v17 = v31;
    unsigned int v18 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *unsigned int v18 = MEMORY[0x1E4F14398];
    v18[1] = 50331650;
    uint64_t v18[2] = WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebsiteDataStoreClient::requestStorageSpace(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(unsigned long long)#1}>(WebsiteDataStoreClient::requestStorageSpace(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(unsigned long long)#1})::{lambda(void *,unsigned long long)#1}::__invoke;
    v18[3] = &WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebsiteDataStoreClient::requestStorageSpace(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(unsigned long long)#1}>(WebsiteDataStoreClient::requestStorageSpace(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(unsigned long long)#1})::descriptor;
    v18[4] = v16;
    v18[5] = v17;
    WebCore::SecurityOriginData::toString((uint64_t *)v29, a2);
    MEMORY[0x19972E890](&v30, v29, 0);
    long long v20 = v29[0];
    v29[0] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v19);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    WebCore::SecurityOriginData::toString((uint64_t *)&v28, a3);
    MEMORY[0x19972E890](v29, &v28, 0);
    int8x16_t v22 = v28;
    uint64_t v28 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v21);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    id v23 = objc_loadWeak(v13);
    uint64_t v24 = WTF::URL::operator NSURL *();
    objc_msgSend(v23, "requestStorageSpace:frameOrigin:quota:currentSize:spaceRequired:decisionHandler:", v24, WTF::URL::operator NSURL *(), a4, a5, a6, v18, v28);
    long long v26 = v29[0];
    v29[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v25);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    __int16 v27 = v30;
    long long v30 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, v25);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    _Block_release(v18);
  }
  else
  {
    WTF::CompletionHandler<void ()(std::optional<unsigned long long>)>::operator()(a7);
  }
}

void sub_198BD211C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  _Block_release(v15);
  _Unwind_Resume(a1);
}

void WebsiteDataStoreClient::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 25) && (uint64_t v3 = (id *)(a1 + 16), (WeakRetained = objc_loadWeakRetained((id *)(a1 + 16))) != 0))
  {
    CFRelease(WeakRetained);
    uint64_t v5 = *(void *)(*a2 + 8);
    Weak = (WebKit::CompletionHandlerCallChecker *)objc_loadWeak(v3);
    WebKit::CompletionHandlerCallChecker::create(Weak, (objc_object *)sel_didReceiveAuthenticationChallenge_completionHandler_, (uint64_t *)&v15);
    uint64_t v7 = *a2;
    *a2 = 0;
    uint64_t v8 = v15;
    uint64_t v9 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v9 = MEMORY[0x1E4F14398];
    v9[1] = 50331650;
    v9[2] = WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebsiteDataStoreClient::didReceiveAuthenticationChallenge(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(WebsiteDataStoreClient::didReceiveAuthenticationChallenge(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke;
    v9[3] = &WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebsiteDataStoreClient::didReceiveAuthenticationChallenge(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(WebsiteDataStoreClient::didReceiveAuthenticationChallenge(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::descriptor;
    v9[4] = v7;
    v9[5] = v8;
    [objc_loadWeak(v3) didReceiveAuthenticationChallenge:v5 completionHandler:v9];
    _Block_release(v9);
  }
  else
  {
    uint64_t v10 = *(void *)(*a2 + 464);
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v15);
    CFTypeRef cf = 0;
    WebKit::AuthenticationDecisionListener::completeChallenge(v10);
    CFTypeRef v12 = cf;
    CFTypeRef cf = 0;
    if (v12) {
      CFRelease(v12);
    }
    long long v13 = v16;
    uint64_t v16 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v11);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    long long v14 = v15;
    long long v15 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v11);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
}

void sub_198BD2370(_Unwind_Exception *exception_object)
{
  if (v1) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v1);
  }
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WebsiteDataStoreClient::openWindowFromServiceWorker(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t *a4)
{
  if (*(unsigned char *)(a1 + 26)
    && (uint64_t v7 = (id *)(a1 + 16), (WeakRetained = objc_loadWeakRetained((id *)(a1 + 16))) != 0)
    && (CFRelease(WeakRetained), uint64_t v9 = (id *)(a1 + 8), (v10 = objc_loadWeakRetained(v9)) != 0))
  {
    CFRelease(v10);
    Weak = (WebKit::CompletionHandlerCallChecker *)objc_loadWeak(v7);
    WebKit::CompletionHandlerCallChecker::create(Weak, (objc_object *)sel_websiteDataStore_openWindow_fromServiceWorkerOrigin_completionHandler_, &v22);
    uint64_t v12 = *a4;
    *a4 = 0;
    uint64_t v13 = v22;
    long long v14 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *long long v14 = MEMORY[0x1E4F14398];
    v14[1] = 50331650;
    uint64_t v14[2] = WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebsiteDataStoreClient::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::{lambda(WKWebView *)#1}>(WebsiteDataStoreClient::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::{lambda(WKWebView *)#1})::{lambda(void *,WKWebView *)#1}::__invoke;
    v14[3] = &WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebsiteDataStoreClient::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::{lambda(WKWebView *)#1}>(WebsiteDataStoreClient::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::{lambda(WKWebView *)#1})::descriptor;
    v14[4] = v12;
    void v14[5] = v13;
    WTF::URL::URL((uint64_t)v21, a2);
    uint64_t v16 = WTF::URL::operator NSURL *();
    uint64_t v17 = v21[0];
    v21[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v15);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    API::SecurityOrigin::create(v21);
    id v18 = objc_loadWeak(v7);
    id v19 = objc_loadWeak(v9);
    [v18 websiteDataStore:v19 openWindow:v16 fromServiceWorkerOrigin:*((void *)v21[0] + 1) completionHandler:v14];
    long long v20 = v21[0];
    v21[0] = 0;
    if (v20) {
      CFRelease(*((CFTypeRef *)v20 + 1));
    }
    _Block_release(v14);
  }
  else
  {
    WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)>::operator()(a4);
  }
}

void sub_198BD2570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  _Block_release(v9);
  _Unwind_Resume(a1);
}

void WebsiteDataStoreClient::reportServiceWorkerConsoleMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v8 = (id *)(a1 + 16);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  char v10 = objc_opt_respondsToSelector();
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  if (v10)
  {
    id Weak = objc_loadWeak(v8);
    id v12 = objc_loadWeak((id *)(a1 + 8));
    if (*a6) {
      uint64_t v13 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v13 = &stru_1EEA10550;
    }
    [Weak websiteDataStore:v12 reportServiceWorkerConsoleMessage:v13];
  }
}

void sub_198BD26D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebsiteDataStoreClient::showNotification(WebsiteDataStoreClient *this, const WebCore::NotificationData *a2)
{
  if (!*((unsigned char *)this + 27)) {
    return 0;
  }
  uint64_t v4 = (id *)((char *)this + 16);
  uint64_t result = (uint64_t)objc_loadWeakRetained((id *)this + 2);
  if (result)
  {
    CFRelease((CFTypeRef)result);
    uint64_t v6 = (id *)((char *)this + 8);
    uint64_t result = (uint64_t)objc_loadWeakRetained(v6);
    if (result)
    {
      CFRelease((CFTypeRef)result);
      id v7 = [[_WKNotificationData alloc] _initWithCoreData:a2];
      id Weak = objc_loadWeak(v4);
      [Weak websiteDataStore:objc_loadWeak(v6) showNotification:v7];
      if (v7) {
        CFRelease(v7);
      }
      return 1;
    }
  }
  return result;
}

void sub_198BD279C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

id *WebsiteDataStoreClient::notificationPermissions@<X0>(id *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 28)
    || (uint64_t v3 = this, v4 = this + 2, (this = (id *)objc_loadWeakRetained(this + 2)) == 0)
    || (CFRelease(this), uint64_t v5 = v3 + 1, (this = (id *)objc_loadWeakRetained(v5)) == 0))
  {
    *a2 = 0;
    return this;
  }
  CFRelease(this);
  *a2 = 0;
  id Weak = objc_loadWeak(v4);
  id v7 = (void *)[Weak notificationPermissionsForWebsiteDataStore:objc_loadWeak(v5)];
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  this = (id *)[v7 countByEnumeratingWithState:&v42 objects:v49 count:16];
  uint64_t v8 = this;
  if (!this) {
    return this;
  }
  uint64_t v9 = *(void *)v43;
  uint64_t v37 = *(void *)v43;
  long long v38 = a2;
  do
  {
    char v10 = 0;
    do
    {
      if (*(void *)v43 != v9) {
        objc_enumerationMutation(v7);
      }
      uint64_t v11 = *(void *)(*((void *)&v42 + 1) + 8 * (void)v10);
      id v12 = (void *)[v7 objectForKeyedSubscript:v11];
      MEMORY[0x19972EAD0](&v39, v11);
      MEMORY[0x19972E890](buf, &v39, 0);
      WebCore::SecurityOriginData::fromURL(v47, (WebCore::SecurityOriginData *)buf, v13);
      WebCore::SecurityOriginData::toString((uint64_t *)&v41, (WebCore::SecurityOriginData *)v47);
      if (v48 != -1) {
        ((void (*)(char *, uint64_t *))off_1EE9C6980[v48])(&v46, v47);
      }
      int v48 = -1;
      long long v15 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v14);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      uint64_t v16 = v39;
      long long v39 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v14);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      if (!v41 || !*((_DWORD *)v41 + 1))
      {
        id v23 = qword_1EB3583C0;
        if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1985F2000, v23, OS_LOG_TYPE_DEFAULT, "[WKWebsiteDataStoreDelegate notificationPermissionsForWebsiteDataStore:] returned a URL string that could not be parsed into a security origin. Skipping.", buf, 2u);
        }
        goto LABEL_47;
      }
      char v18 = [v12 BOOLValue];
      uint64_t v19 = *a2;
      if (*a2
        || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (uint64_t v19 = *a2) != 0))
      {
        int v20 = *(_DWORD *)(v19 - 8);
      }
      else
      {
        int v20 = 0;
      }
      unsigned int v21 = *((_DWORD *)v41 + 4);
      if (v21 >= 0x100) {
        unsigned int v22 = v21 >> 8;
      }
      else {
        unsigned int v22 = WTF::StringImpl::hashSlowCase(v41);
      }
      long long v25 = 0;
      for (int i = 1; ; ++i)
      {
        uint64_t v27 = v22 & v20;
        uint64_t v28 = (WTF **)(v19 + 16 * v27);
        long long v29 = *v28;
        if (*v28 == (WTF *)-1)
        {
          long long v25 = (WTF **)(v19 + 16 * v27);
          goto LABEL_35;
        }
        if (!v29) {
          break;
        }
        if (WTF::equal(v29, v41, v17))
        {
          *(unsigned char *)(v19 + 16 * v27 + ++*(_DWORD *)(this + 8) = v18;
          uint64_t v9 = v37;
          a2 = v38;
          goto LABEL_47;
        }
LABEL_35:
        unsigned int v22 = i + v27;
      }
      a2 = v38;
      if (v25)
      {
        *long long v25 = 0;
        v25[1] = 0;
        --*(_DWORD *)(*v38 - 16);
        uint64_t v28 = v25;
      }
      WTF::String::operator=((uint64_t *)v28, &v41);
      uint64_t v9 = v37;
      *((unsigned char *)v28 + ++*(_DWORD *)(this + 8) = v18;
      uint64_t v30 = *v38;
      if (*v38) {
        int v31 = *(_DWORD *)(v30 - 12) + 1;
      }
      else {
        int v31 = 1;
      }
      *(_DWORD *)(v30 - 1objc_destroyWeak(this + 2) = v31;
      uint64_t v32 = *v38;
      if (*v38) {
        int v33 = *(_DWORD *)(v32 - 12);
      }
      else {
        int v33 = 0;
      }
      uint64_t v34 = (*(_DWORD *)(v32 - 16) + v33);
      unint64_t v35 = *(unsigned int *)(v32 - 4);
      if (v35 > 0x400)
      {
        if (v35 <= 2 * v34) {
LABEL_46:
        }
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v38, v28);
      }
      else if (3 * v35 <= 4 * v34)
      {
        goto LABEL_46;
      }
LABEL_47:
      int8x16x2_t v36 = v41;
      long long v41 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2) {
          WTF::StringImpl::destroy(v36, v24);
        }
        else {
          *(_DWORD *)v36 -= 2;
        }
      }
      char v10 = (id *)((char *)v10 + 1);
    }
    while (v10 != v8);
    this = (id *)[v7 countByEnumeratingWithState:&v42 objects:v49 count:16];
    uint64_t v8 = this;
  }
  while (this);
  return this;
}

void sub_198BD2B80(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35)
{
  if (*v35) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*v35, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebsiteDataStoreClient::hasGetDisplayedNotifications(WebsiteDataStoreClient *this)
{
  return *((unsigned __int8 *)this + 31);
}

void WebsiteDataStoreClient::getDisplayedNotifications(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 31)
    && (uint64_t v5 = (id *)(a1 + 16), (WeakRetained = objc_loadWeakRetained((id *)(a1 + 16))) != 0)
    && (CFRelease(WeakRetained), id v7 = (id *)(a1 + 8), (v8 = objc_loadWeakRetained(v7)) != 0))
  {
    CFRelease(v8);
    API::SecurityOrigin::create(v15);
    uint64_t v9 = *a3;
    *a3 = 0;
    char v10 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
    void *v10 = MEMORY[0x1E4F14398];
    v10[1] = 50331650;
    v10[2] = WTF::BlockPtr<void ()(NSArray<NSDictionary *> *)>::fromCallable<WebsiteDataStoreClient::getDisplayedNotifications(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(NSArray<NSDictionary *> *)#1}>(WebsiteDataStoreClient::getDisplayedNotifications(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(NSArray<NSDictionary *> *)#1})::{lambda(void *,NSArray<NSDictionary *> *)#1}::__invoke;
    v10[3] = &WTF::BlockPtr<void ()(NSArray<NSDictionary *> *)>::fromCallable<WebsiteDataStoreClient::getDisplayedNotifications(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(NSArray<NSDictionary *> *)#1}>(WebsiteDataStoreClient::getDisplayedNotifications(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(NSArray<NSDictionary *> *)#1})::descriptor;
    v10[4] = v9;
    id Weak = objc_loadWeak(v5);
    id v12 = objc_loadWeak(v7);
    [Weak websiteDataStore:v12 getDisplayedNotificationsForWorkerOrigin:*(void *)(v15[0] + 8) completionHandler:v10];
    _Block_release(v10);
    uint64_t v13 = v15[0];
    v15[0] = 0;
    if (v13) {
      CFRelease(*(CFTypeRef *)(v13 + 8));
    }
  }
  else
  {
    v15[0] = 0;
    v15[1] = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a3);
    WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v14);
  }
}

void sub_198BD2DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  if (a9) {
    CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WebsiteDataStoreClient::workerUpdatedAppBadge(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (*(unsigned char *)(a1 + 29))
  {
    id v7 = (id *)(a1 + 16);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
      uint64_t v9 = (id *)(a1 + 8);
      id v10 = objc_loadWeakRetained(v9);
      if (v10)
      {
        CFRelease(v10);
        API::SecurityOrigin::create(&v15);
        if (a4) {
          uint64_t v11 = [NSNumber numberWithUnsignedLongLong:a3];
        }
        else {
          uint64_t v11 = 0;
        }
        id Weak = objc_loadWeak(v7);
        id v13 = objc_loadWeak(v9);
        [Weak websiteDataStore:v13 workerOrigin:*(void *)(v15 + 8) updatedAppBadge:v11];
        uint64_t v14 = v15;
        uint64_t v15 = 0;
        if (v14) {
          CFRelease(*(CFTypeRef *)(v14 + 8));
        }
      }
    }
  }
}

void sub_198BD2EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

id *WebsiteDataStoreClient::navigationToNotificationActionURL(id *this, const WTF::URL *a2)
{
  if (*((unsigned char *)this + 30))
  {
    uint64_t v2 = this;
    uint64_t v3 = this + 2;
    this = (id *)objc_loadWeakRetained(this + 2);
    if (this)
    {
      CFRelease(this);
      uint64_t v4 = v2 + 1;
      this = (id *)objc_loadWeakRetained(v4);
      if (this)
      {
        CFRelease(this);
        id Weak = objc_loadWeak(v3);
        id v6 = objc_loadWeak(v4);
        uint64_t v7 = WTF::URL::operator NSURL *();
        return (id *)[Weak websiteDataStore:v6 navigateToNotificationActionURL:v7];
      }
    }
  }
  return this;
}

void WebsiteDataStoreClient::requestBackgroundFetchPermission(uint64_t a1, WebCore::SecurityOriginData *a2, WebCore::SecurityOriginData *a3, uint64_t *a4)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v7 = (id *)(a1 + 16);
    id Weak = (WebKit::CompletionHandlerCallChecker *)objc_loadWeak((id *)(a1 + 16));
    WebKit::CompletionHandlerCallChecker::create(Weak, (objc_object *)sel_requestBackgroundFetchPermission_frameOrigin_decisionHandler_, &v24);
    uint64_t v9 = *a4;
    *a4 = 0;
    uint64_t v10 = v24;
    uint64_t v11 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v11 = MEMORY[0x1E4F14398];
    v11[1] = 50331650;
    v11[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebsiteDataStoreClient::requestBackgroundFetchPermission(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebsiteDataStoreClient::requestBackgroundFetchPermission(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::__invoke;
    v11[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebsiteDataStoreClient::requestBackgroundFetchPermission(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebsiteDataStoreClient::requestBackgroundFetchPermission(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::descriptor;
    void v11[4] = v9;
    v11[5] = v10;
    WebCore::SecurityOriginData::toString((uint64_t *)v22, a2);
    MEMORY[0x19972E890](&v23, v22, 0);
    id v13 = v22[0];
    v22[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    WebCore::SecurityOriginData::toString((uint64_t *)&v21, a3);
    MEMORY[0x19972E890](v22, &v21, 0);
    uint64_t v15 = v21;
    unsigned int v21 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    id v16 = objc_loadWeak(v7);
    uint64_t v17 = WTF::URL::operator NSURL *();
    objc_msgSend(v16, "requestBackgroundFetchPermission:frameOrigin:decisionHandler:", v17, WTF::URL::operator NSURL *(), v11, v21);
    uint64_t v19 = v22[0];
    v22[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v18);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    int v20 = v23;
    id v23 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v18);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    _Block_release(v11);
  }
  else
  {
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
  }
}

void sub_198BD31C4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  _Block_release(v15);
  _Unwind_Resume(a1);
}

uint64_t WebsiteDataStoreClient::notifyBackgroundFetchChange(uint64_t result, void *a2, int a3)
{
  if (*(unsigned char *)(result + 33))
  {
    if (a3 == 2) {
      uint64_t v4 = 2;
    }
    else {
      uint64_t v4 = a3 == 1;
    }
    id Weak = objc_loadWeak((id *)(result + 16));
    if (*a2) {
      id v6 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      id v6 = &stru_1EEA10550;
    }
    return [Weak notifyBackgroundFetchChange:v6 change:v4];
  }
  return result;
}

uint64_t WebsiteDataStoreClient::didAccessWindowProxyProperty(uint64_t result, void *a2, void *a3, int a4, uint64_t a5)
{
  if (*(unsigned char *)(result + 34))
  {
    uint64_t v8 = result;
    uint64_t v9 = 2;
    if (a4 != 2) {
      uint64_t v9 = 3;
    }
    if (a4 == 4) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v9;
    }
    id Weak = objc_loadWeak((id *)(result + 16));
    id v12 = objc_loadWeak((id *)(v8 + 8));
    if (*a2) {
      id v13 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      id v13 = &stru_1EEA10550;
    }
    if (*a3) {
      uint64_t v14 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v14 = &stru_1EEA10550;
    }
    return [Weak websiteDataStore:v12 domain:v13 didOpenDomainViaWindowOpen:v14 withProperty:v10 directly:a5];
  }
  return result;
}

uint64_t WebsiteDataStoreClient::didAllowPrivateTokenUsageByThirdPartyForTesting(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 35))
  {
    uint64_t v3 = result;
    id Weak = objc_loadWeak((id *)(result + 16));
    id v5 = objc_loadWeak((id *)(v3 + 8));
    uint64_t v6 = WTF::URL::operator NSURL *();
    return [Weak websiteDataStore:v5 didAllowPrivateTokenUsageByThirdPartyForTesting:a2 forResourceURL:v6];
  }
  return result;
}

uint64_t WebsiteDataStoreClient::didExceedMemoryFootprintThreshold(uint64_t result, uint64_t a2, void *a3, unsigned int a4, uint64_t a5, uint64_t a6, char a7, double a8)
{
  if (*(unsigned char *)(result + 36))
  {
    uint64_t v15 = result;
    id Weak = objc_loadWeak((id *)(result + 16));
    id v17 = objc_loadWeak((id *)(v15 + 8));
    if (*a3) {
      char v18 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      char v18 = &stru_1EEA10550;
    }
    LOBYTE(v19) = a7;
    return [Weak websiteDataStore:v17 domain:v18 didExceedMemoryFootprintThreshold:a2 withPageCount:a4 processLifetime:a5 inForeground:a6 wasPrivateRelayed:a8 canSuspend:v19];
  }
  return result;
}

void WebsiteDataStoreClient::webCryptoMasterKey(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 37) && (uint64_t v3 = (id *)(a1 + 16), (WeakRetained = objc_loadWeakRetained((id *)(a1 + 16))) != 0))
  {
    CFRelease(WeakRetained);
    id Weak = (WebKit::CompletionHandlerCallChecker *)objc_loadWeak(v3);
    WebKit::CompletionHandlerCallChecker::create(Weak, (objc_object *)sel_webCryptoMasterKey_, (uint64_t *)&v10);
    id v6 = objc_loadWeak(v3);
    uint64_t v7 = *a2;
    *a2 = 0;
    uint64_t v8 = v10;
    uint64_t v9 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v9 = MEMORY[0x1E4F14398];
    v9[1] = 50331650;
    v9[2] = WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebsiteDataStoreClient::webCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::{lambda(NSData *)#1}>(WebsiteDataStoreClient::webCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::{lambda(NSData *)#1})::{lambda(void *,NSData *)#1}::__invoke;
    v9[3] = &WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebsiteDataStoreClient::webCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::{lambda(NSData *)#1}>(WebsiteDataStoreClient::webCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::{lambda(NSData *)#1})::descriptor;
    v9[4] = v7;
    v9[5] = v8;
    [v6 webCryptoMasterKey:v9];
    _Block_release(v9);
  }
  else
  {
    WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>::operator()(a2);
  }
}

void sub_198BD3680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  uint64_t v14 = v13;
  _Block_release(v14);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<unsigned long long>)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198BD3794(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198BD3848(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198BD38FC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WebCore::NotificationData **)a1;
    uint64_t v5 = v3 << 8;
    do
    {
      WebCore::NotificationData::~NotificationData(v4, a2);
      uint64_t v4 = (WebCore::NotificationData *)(v6 + 256);
      v5 -= 256;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198BD3A08(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebsiteDataStoreClient::requestStorageSpace(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(unsigned long long)#1}>(WebsiteDataStoreClient::requestStorageSpace(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(unsigned long long)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this - 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebsiteDataStoreClient::requestStorageSpace(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(unsigned long long)#1}>(WebsiteDataStoreClient::requestStorageSpace(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(unsigned long long)#1})::{lambda(void *,unsigned long long)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    return WTF::CompletionHandler<void ()(std::optional<unsigned long long>)>::operator()((uint64_t *)(a1 + 32));
  }
  return result;
}

void WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebsiteDataStoreClient::didReceiveAuthenticationChallenge(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(WebsiteDataStoreClient::didReceiveAuthenticationChallenge(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this - 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (v3)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebsiteDataStoreClient::didReceiveAuthenticationChallenge(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(WebsiteDataStoreClient::didReceiveAuthenticationChallenge(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result = (WTF::StringImpl *)WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 464);
    WebKit::toAuthenticationChallengeDisposition(a2, v7);
    MEMORY[0x19972F4E0](&v12, a3);
    WebKit::AuthenticationDecisionListener::completeChallenge(v8);
    CFTypeRef v10 = cf;
    CFTypeRef cf = 0;
    if (v10) {
      CFRelease(v10);
    }
    uint64_t v11 = v13;
    id v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t result = v12;
    id v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebsiteDataStoreClient::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::{lambda(WKWebView *)#1}>(WebsiteDataStoreClient::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::{lambda(WKWebView *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this - 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebsiteDataStoreClient::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::{lambda(WKWebView *)#1}>(WebsiteDataStoreClient::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::{lambda(WKWebView *)#1})::{lambda(void *,WKWebView *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    if (a2) {
      [a2 _page];
    }
    return WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)>::operator()((uint64_t *)(a1 + 32));
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSArray<NSDictionary *> *)>::fromCallable<WebsiteDataStoreClient::getDisplayedNotifications(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(NSArray<NSDictionary *> *)#1}>(WebsiteDataStoreClient::getDisplayedNotifications(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(NSArray<NSDictionary *> *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSArray<NSDictionary *> *)>::fromCallable<WebsiteDataStoreClient::getDisplayedNotifications(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(NSArray<NSDictionary *> *)#1}>(WebsiteDataStoreClient::getDisplayedNotifications(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(NSArray<NSDictionary *> *)#1})::{lambda(void *,NSArray<NSDictionary *> *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v5 = [a2 countByEnumeratingWithState:&v10 objects:v18 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(a2);
        }
        WebCore::NotificationData::fromDictionary(v16, *(WebCore::NotificationData **)(*((void *)&v10 + 1) + 8 * i), v4);
        if (!v17)
        {
          __break(0xC471u);
          JUMPOUT(0x198BD3EE4);
        }
        if (HIDWORD(v15) == v15)
        {
          WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NotificationData&>((uint64_t)&v14, (unint64_t)v16);
        }
        else
        {
          WebCore::NotificationData::NotificationData((WebCore::NotificationData *)(v14 + ((unint64_t)HIDWORD(v15) << 8)), (const WebCore::NotificationData *)v16);
          ++HIDWORD(v15);
        }
        if (v17) {
          WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v16, v4);
        }
      }
      uint64_t v5 = [a2 countByEnumeratingWithState:&v10 objects:v18 count:16];
    }
    while (v5);
  }
  WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()((uint64_t *)(a1 + 32));
  return WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v8);
}

void sub_198BD3EEC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NotificationData&>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (const WebCore::NotificationData *)WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WebCore::NotificationData::NotificationData((WebCore::NotificationData *)(*(void *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 8)), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + ((unint64_t)*(unsigned int *)(a1 + 12) << 8) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 24)
    {
      __break(0xC471u);
      JUMPOUT(0x198BD40ACLL);
    }
    uint64_t v4 = *(WebCore::NotificationData **)a1;
    uint64_t v5 = (WebCore::NotificationData *)(*(void *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 8));
    uint64_t v6 = WTF::fastMalloc((WTF *)(a2 << 8));
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::NotificationData>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WebCore::NotificationData **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebCore::NotificationData>::move(WebCore::NotificationData *a1, WebCore::NotificationData *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      WebCore::NotificationData::NotificationData(a3, (uint64_t)v5);
      WebCore::NotificationData::~NotificationData(v5, v6);
      a3 += 256;
      uint64_t v5 = (WebCore::NotificationData *)((char *)v5 + 256);
    }
    while (v5 != a2);
  }
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebsiteDataStoreClient::requestBackgroundFetchPermission(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebsiteDataStoreClient::requestBackgroundFetchPermission(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  int v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this - 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebsiteDataStoreClient::requestBackgroundFetchPermission(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebsiteDataStoreClient::requestBackgroundFetchPermission(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 32));
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebsiteDataStoreClient::webCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::{lambda(NSData *)#1}>(WebsiteDataStoreClient::webCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::{lambda(NSData *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  int v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this - 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

unint64_t WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebsiteDataStoreClient::webCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::{lambda(NSData *)#1}>(WebsiteDataStoreClient::webCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::{lambda(NSData *)#1})::{lambda(void *,NSData *)#1}::__invoke(uint64_t a1, void *a2)
{
  unint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    uint64_t v5 = (uint64_t *)(a1 + 32);
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    if (a2)
    {
      uint64_t v6 = [a2 bytes];
      unint64_t result = [a2 length];
      unint64_t v7 = result;
      if (result)
      {
        if (HIDWORD(result))
        {
          __break(0xC471u);
          return result;
        }
        unint64_t result = WTF::fastMalloc((WTF *)result);
        uint64_t v8 = 0;
        do
        {
          *(unsigned char *)(result + v++*(_DWORD *)(this + 8) = *(unsigned char *)(v6 + v8);
          ++v8;
        }
        while (v7 != v8);
      }
      unint64_t v10 = (WTF *)result;
      char v11 = 1;
      unint64_t result = WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>::operator()(v5);
    }
    else
    {
      LOBYTE(v10) = 0;
      char v11 = 0;
      unint64_t result = WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>::operator()((uint64_t *)(a1 + 32));
    }
    if (v11)
    {
      unint64_t result = (unint64_t)v10;
      if (v10) {
        return WTF::fastFree(v10, v9);
      }
    }
  }
  return result;
}

void sub_198BD4354(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  if (a13)
  {
    if (a10) {
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198BD4554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CFRelease(*(CFTypeRef *)(v2 + 8));
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v4);
  _Unwind_Resume(a1);
}

void sub_198BD478C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CFRelease(*(CFTypeRef *)(v2 + 8));
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v4);
  _Unwind_Resume(a1);
}

void sub_198BD4ACC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BD4CA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198BD5288(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_198BD5418(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebKit::BackgroundFetchState,WebKit::BackgroundFetchState,WebKit::BackgroundFetchState*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor(result, a2);
    WTF::URL::URL(v4 + 32, (uint64_t *)(a2 + 32));
    uint64_t v5 = *(void *)(a2 + 72);
    *(void *)(a2 + 7objc_destroyWeak(this + 2) = 0;
    *(void *)(v3 + 80) = 0;
    *(void *)(v3 + 8++*(_DWORD *)(this + 8) = 0;
    *(void *)(v3 + 7objc_destroyWeak(this + 2) = v5;
    uint64_t v6 = *(void *)(a2 + 80);
    *(void *)(a2 + 80) = 0;
    *(void *)(v3 + 80) = v6;
    LODWORD(v6) = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a2 + 8++*(_DWORD *)(this + 8) = 0;
    *(_DWORD *)(v3 + 8++*(_DWORD *)(this + 8) = v6;
    LODWORD(v6) = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(a2 + 9objc_destroyWeak(this + 2) = 0;
    *(_DWORD *)(v3 + 9objc_destroyWeak(this + 2) = v6;
    uint64_t v7 = *(void *)(a2 + 96);
    uint64_t v8 = *(void *)(a2 + 104);
    *(void *)(a2 + 96) = 0;
    *(void *)(v3 + 96) = v7;
    *(void *)(v3 + 104) = v8;
    long long v9 = *(_OWORD *)(a2 + 112);
    long long v10 = *(_OWORD *)(a2 + 128);
    *(_DWORD *)(v3 + 143) = *(_DWORD *)(a2 + 143);
    *(_OWORD *)(v3 + 11objc_destroyWeak(this + 2) = v9;
    *(_OWORD *)(v3 + 12++*(_DWORD *)(this + 8) = v10;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_198BD54C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 24);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9C6980[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 24) = -1;
  _Unwind_Resume(exception_object);
}

void sub_198BD5A50(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198BD5CE4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)unint64_t result = 0;
  *(void *)(result + ++*(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0x2AAAAAB)
  {
    int v5 = 96 * v3;
    uint64_t v6 = (_OWORD *)WTF::fastMalloc((WTF *)(96 * v3));
    *(_DWORD *)(v2 + ++*(_DWORD *)(this + 8) = (v5 & 0xFFFFFFE0) / 0x60;
    *(void *)uint64_t v2 = v6;
    uint64_t v7 = *(unsigned int *)(a2 + 12);
    if (v7)
    {
      uint64_t v8 = *(_OWORD **)a2;
      uint64_t v9 = 96 * v7;
      do
      {
        long long v10 = v8[1];
        *uint64_t v6 = *v8;
        v6[1] = v10;
        long long v11 = v8[2];
        long long v12 = v8[3];
        long long v13 = v8[5];
        v6[4] = v8[4];
        v6[5] = v13;
        void v6[2] = v11;
        _OWORD v6[3] = v12;
        v6 += 6;
        v8 += 6;
        v9 -= 96;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

char *WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>(WTF::StringBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + 8);
  BOOL v5 = v4 != 0;
  unint64_t v6 = v4 - 1;
  if (!v5) {
    unint64_t v6 = 0;
  }
  long long v13 = *(int8x16_t **)a2;
  if (v6 >> 31) {
    goto LABEL_8;
  }
  int v14 = v6;
  uint64_t v12 = *a3;
  uint64_t v7 = *(void *)(a4 + 8);
  BOOL v5 = v7 != 0;
  unint64_t v8 = v7 - 1;
  if (!v5) {
    unint64_t v8 = 0;
  }
  long long v10 = *(int8x16_t **)a4;
  if (v8 >> 31)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x198BD5F6CLL);
  }
  int v11 = v8;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a1, &v13, &v12, &v10);
}

WTF::StringBuilder *WTF::StringBuilder::toString@<X0>(WTF::StringBuilder *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(_DWORD **)this;
  if (*(void *)this
    || (uint64_t v4 = this,
        WTF::StringBuilder::shrinkToFit(this),
        this = (WTF::StringBuilder *)WTF::StringBuilder::reifyString(v4),
        (uint64_t v3 = *(_DWORD **)v4) != 0))
  {
    *v3 += 2;
  }
  *a2 = v3;
  return this;
}

unint64_t WebKit::OperatingDate::fromWallTime(WTF *a1, double a2)
{
  double v2 = a2 * 1000.0;
  uint64_t v3 = (WTF *)WTF::msToYear(a1, a2 * 1000.0);
  unsigned int v4 = v3;
  HIDWORD(v6) = -1030792151 * v3 + 85899344;
  LODWORD(v6) = HIDWORD(v6);
  unsigned int v5 = v6 >> 4;
  LODWORD(v6) = HIDWORD(v6);
  BOOL v7 = (v6 >> 2) > 0x28F5C28;
  int v8 = v5 < 0xA3D70B || v7;
  if ((v3 & 3) != 0) {
    int v9 = 0;
  }
  else {
    int v9 = v8;
  }
  long long v10 = (WTF *)WTF::dayInYear(v3, v2);
  uint64_t v11 = WTF::monthFromDayInYear(v10, v9);
  WTF::dayInMonthFromDayInYear(v10, v9);
  return v4 | (unint64_t)(v11 << 32);
}

uint64_t WTF::msToYear(WTF *this, double a2)
{
  uint64_t result = (int)(floor(a2 / 3.1556952e10) + 1970.0);
  double v3 = 365.0;
  double v4 = (floor(((double)(int)result + -1.0) / 400.0)
      + -4.0
      + floor(((double)(int)result + -1.0) * 0.25)
      + -492.0
      + ((double)(int)result + -1970.0) * 365.0
      - (floor(((double)(int)result + -1.0) / 100.0)
       + -19.0))
     * 86400000.0;
  if (v4 > a2) {
    return (result - 1);
  }
  if ((result & 3) == 0)
  {
    HIDWORD(v6) = -1030792151 * result + 85899344;
    LODWORD(v6) = HIDWORD(v6);
    unsigned int v5 = v6 >> 4;
    LODWORD(v6) = HIDWORD(v6);
    BOOL v7 = (v6 >> 2) <= 0x28F5C28 && v5 >= 0xA3D70B;
    double v3 = 365.0;
    if (!v7) {
      double v3 = 366.0;
    }
  }
  if (v4 + v3 * 86400000.0 <= a2) {
    return (result + 1);
  }
  return result;
}

uint64_t WTF::dayInYear(WTF *this, double a2)
{
  return (int)(floor(a2 / 86400000.0)
                           - (floor(((double)(int)this + -1.0) / 400.0)
                            + -4.0
                            + floor(((double)(int)this + -1.0) * 0.25)
                            + -492.0
                            + ((double)(int)this + -1970.0) * 365.0
                            - (floor(((double)(int)this + -1.0) / 100.0)
                             + -19.0)));
}

uint64_t WTF::monthFromDayInYear(WTF *this, int a2)
{
  if ((int)this < 31) {
    return 0;
  }
  if (a2) {
    unsigned int v2 = 60;
  }
  else {
    unsigned int v2 = 59;
  }
  if (v2 > this) {
    return 1;
  }
  if (v2 + 31 > this) {
    return 2;
  }
  if (v2 + 61 > this) {
    return 3;
  }
  if (v2 + 92 > this) {
    return 4;
  }
  if (v2 + 122 > this) {
    return 5;
  }
  if (v2 + 153 > this) {
    return 6;
  }
  if (v2 + 184 > this) {
    return 7;
  }
  if (v2 + 214 > this) {
    return 8;
  }
  if (v2 + 245 > this) {
    return 9;
  }
  if (v2 + 275 > this) {
    return 10;
  }
  return 11;
}

uint64_t WTF::dayInMonthFromDayInYear(WTF *this, int a2)
{
  if ((int)this <= 30) {
    return (this + 1);
  }
  if (a2) {
    unsigned int v2 = 59;
  }
  else {
    unsigned int v2 = 58;
  }
  if (v2 >= this)
  {
    unsigned int v2 = 30;
  }
  else if (v2 + 31 < this)
  {
    if (v2 + 61 >= this)
    {
      v2 += 31;
    }
    else if (v2 + 92 >= this)
    {
      v2 += 61;
    }
    else
    {
      unsigned int v3 = v2 + 122;
      if (v2 + 122 >= this)
      {
        v2 += 92;
      }
      else
      {
        unsigned int v4 = v2 + 153;
        unsigned int v5 = v2 + 184;
        unsigned int v6 = v2 + 214;
        unsigned int v7 = v2 + 245;
        v2 += 275;
        if (v2 >= this) {
          unsigned int v2 = v7;
        }
        if (v7 >= this) {
          unsigned int v2 = v6;
        }
        if (v6 >= this) {
          unsigned int v2 = v5;
        }
        if (v5 >= this) {
          unsigned int v2 = v4;
        }
        if (v4 >= this) {
          unsigned int v2 = v3;
        }
      }
    }
  }
  return this - v2;
}

unint64_t WebKit::OperatingDate::today(WTF::WallTime *a1, double a2)
{
  unsigned int v3 = (WTF *)WTF::WallTime::now(a1);
  return WebKit::OperatingDate::fromWallTime(v3, a2 + v4);
}

double WebKit::OperatingDate::secondsSinceEpoch(WebKit::OperatingDate *this)
{
  int v1 = *((_DWORD *)this + 1);
  int v2 = v1 / 12 + *(_DWORD *)this;
  int v3 = v1 % 12;
  int v4 = v2 + (v3 >> 31);
  HIDWORD(v6) = -1030792151 * v4 + 85899344;
  LODWORD(v6) = HIDWORD(v6);
  unsigned int v5 = v6 >> 4;
  LODWORD(v6) = HIDWORD(v6);
  BOOL v7 = (v6 >> 2) > 0x28F5C28;
  if (v5 < 0xA3D70B) {
    BOOL v7 = 1;
  }
  double v8 = (double)v4;
  BOOL v9 = (v4 & 3) == 0 && v7;
  return (floor(floor((v8 + -1.0) / 400.0)+ -4.0+ floor((v8 + -1.0) * 0.25)+ -492.0+ (v8 + -1970.0) * 365.0- (floor((v8 + -1.0) / 100.0)+ -19.0))+ (double)(*((_DWORD *)this + 2)+ *(_DWORD *)(MEMORY[0x1E4F30988] + 48 * v9 + 4 * (v3 + (v3 < 0 ? 0xC : 0)))- 1))* 86400.0;
}

void WebKit::ResourceLoadStatisticsStore::includeTodayAsOperatingDateIfNecessary(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unint64_t v15 = WebKit::OperatingDate::today(this, *((double *)this + 81));
  int v16 = v2;
  if (*((_DWORD *)this + 166))
  {
    double v8 = WebKit::OperatingDate::secondsSinceEpoch((WebKit::OperatingDate *)&v15);
    if (v8 <= WebKit::OperatingDate::secondsSinceEpoch((WebKit::ResourceLoadStatisticsStore *)((char *)this + 700))) {
      return;
    }
  }
  WebKit::DatabaseUtilities::beginTransactionIfNecessary(this, (uint64_t)v14);
  if (*((_DWORD *)this + 166) - 29 >= 1)
  {
    WebCore::SQLiteDatabase::prepareStatement();
    if (v13 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v12)) {
      goto LABEL_21;
    }
    if (v13) {
      goto LABEL_28;
    }
    if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v12) != 101)
    {
LABEL_21:
      int v3 = qword_1EB358460;
      if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
        goto LABEL_12;
      }
      uint64_t v9 = *((void *)this + 82);
      int Error = WebCore::SQLiteDatabase::lastError((WebKit::ResourceLoadStatisticsStore *)((char *)this + 16));
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebKit::ResourceLoadStatisticsStore *)((char *)this + 16));
      *(_DWORD *)long long buf = 134218755;
      char v18 = this;
      __int16 v19 = 2048;
      uint64_t v20 = v9;
      __int16 v21 = 1024;
      int v22 = Error;
      __int16 v23 = 2081;
      uint64_t v24 = ErrorMsg;
      BOOL v7 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::includeTodayAsOperatingDa"
           "teIfNecessary: failed to step deleteLeastRecentOperatingDateStatement";
      goto LABEL_17;
    }
    if (v13 != -1) {
      (*(&off_1EE9C7600 + v13))((int)buf, (WebCore::SQLiteStatement *)v12);
    }
  }
  WebCore::SQLiteDatabase::prepareStatement();
  if (v13 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v12)) {
    goto LABEL_15;
  }
  if (v13) {
    goto LABEL_28;
  }
  if (WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v12)) {
    goto LABEL_15;
  }
  if (v13) {
    goto LABEL_28;
  }
  if (WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v12))
  {
LABEL_15:
    int v3 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    uint64_t v4 = *((void *)this + 82);
    int v5 = WebCore::SQLiteDatabase::lastError((WebKit::ResourceLoadStatisticsStore *)((char *)this + 16));
    uint64_t v6 = WebCore::SQLiteDatabase::lastErrorMsg((WebKit::ResourceLoadStatisticsStore *)((char *)this + 16));
    *(_DWORD *)long long buf = 134218755;
    char v18 = this;
    __int16 v19 = 2048;
    uint64_t v20 = v4;
    __int16 v21 = 1024;
    int v22 = v5;
    __int16 v23 = 2081;
    uint64_t v24 = v6;
    BOOL v7 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::includeTodayAsOperatingDate"
         "IfNecessary: failed to step insertOperatingDateStatement";
LABEL_17:
    _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, v7, buf, 0x26u);
    goto LABEL_12;
  }
  if (v13) {
LABEL_28:
  }
    std::__throw_bad_variant_access[abi:sn180100]();
  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v12) != 101) {
    goto LABEL_15;
  }
  WebKit::ResourceLoadStatisticsStore::updateOperatingDatesParameters(this);
LABEL_12:
  if (v13 != -1) {
    (*(&off_1EE9C7600 + v13))((int)buf, (WebCore::SQLiteStatement *)v12);
  }
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v14);
}

unsigned int *WTF::WeakHashSet<WebKit::ResourceLoadStatisticsStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::ResourceLoadStatisticsStore>(uint64_t a1, unsigned int *a2)
{
  if (++dword_1EB359888 > dword_1EB35988C)
  {
    _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit27ResourceLoadStatisticsStoreES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(a1, a2);
    dword_1EB359888 = 0;
    unsigned int v4 = qword_1EB359880;
    if (qword_1EB359880)
    {
      unsigned int v4 = *(_DWORD *)(qword_1EB359880 - 12);
      if (v4 > 0x7FFFFFFE) {
        unsigned int v4 = 0x7FFFFFFF;
      }
    }
    dword_1EB35988C = 2 * v4;
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 24, (uint64_t)a2);
  int v5 = (atomic_uint *)*((void *)a2 + 12);
  atomic_fetch_add(v5, 1u);
  atomic_fetch_add(v5, 1u);
  double v8 = (WTF *)v5;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(&qword_1EB359880, &v8, a1);
  uint64_t result = (unsigned int *)v8;
  double v8 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
  }
  if (v5)
  {
    if (atomic_fetch_add(v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v5);
      return (unsigned int *)WTF::fastFree((WTF *)v5, v6);
    }
  }
  return result;
}

void WebKit::ResourceLoadStatisticsStore::~ResourceLoadStatisticsStore(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t v2 = WebKit::DatabaseUtilities::close(this);
  if (byte_1EB359872 == 1)
  {
    int v5 = dword_1EB359888;
    unsigned int v4 = dword_1EB35988C;
  }
  else
  {
    unsigned int v4 = 0;
    int v5 = 0;
    *(void *)&dword_1EB359888 = 0;
    qword_1EB359880 = 0;
    byte_1EB359872 = 1;
  }
  dword_1EB359888 = v5 + 1;
  if (v5 + 1 > v4)
  {
    _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit27ResourceLoadStatisticsStoreES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(v2, v3);
    dword_1EB359888 = 0;
    unsigned int v6 = qword_1EB359880;
    if (qword_1EB359880)
    {
      unsigned int v6 = *(_DWORD *)(qword_1EB359880 - 12);
      if (v6 > 0x7FFFFFFE) {
        unsigned int v6 = 0x7FFFFFFF;
      }
    }
    dword_1EB35988C = 2 * v6;
  }
  uint64_t v7 = *((void *)this + 12);
  if (v7 && *(void *)(v7 + 8))
  {
    uint64_t v62 = *((void *)this + 12);
    double v8 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(&qword_1EB359880, &v62);
    int v3 = v8;
    if (qword_1EB359880)
    {
      uint64_t v9 = qword_1EB359880 + 8 * *(unsigned int *)(qword_1EB359880 - 4);
      if ((unsigned int **)v9 == v8) {
        goto LABEL_17;
      }
    }
    else
    {
      if (!v8) {
        goto LABEL_17;
      }
      uint64_t v9 = 0;
    }
    if ((unsigned int **)v9 != v8) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(&qword_1EB359880, v8);
    }
  }
LABEL_17:
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 632, v3);
  uint64_t v11 = (WebCore::SQLiteStatement *)*((void *)this + 78);
  *((void *)this + 7++*(_DWORD *)(this + 8) = 0;
  if (v11) {
    WebCore::SQLiteStatement::operator delete(v11, 0x18uLL);
  }
  uint64_t v12 = (WebCore::SQLiteStatement *)*((void *)this + 77);
  *((void *)this + 77) = 0;
  if (v12) {
    WebCore::SQLiteStatement::operator delete(v12, 0x18uLL);
  }
  unsigned int v13 = (WebCore::SQLiteStatement *)*((void *)this + 76);
  *((void *)this + 76) = 0;
  if (v13) {
    WebCore::SQLiteStatement::operator delete(v13, 0x18uLL);
  }
  int v14 = (WebCore::SQLiteStatement *)*((void *)this + 75);
  *((void *)this + 75) = 0;
  if (v14) {
    WebCore::SQLiteStatement::operator delete(v14, 0x18uLL);
  }
  unint64_t v15 = (WebCore::SQLiteStatement *)*((void *)this + 74);
  *((void *)this + 74) = 0;
  if (v15) {
    WebCore::SQLiteStatement::operator delete(v15, 0x18uLL);
  }
  int v16 = (WebCore::SQLiteStatement *)*((void *)this + 73);
  *((void *)this + 73) = 0;
  if (v16) {
    WebCore::SQLiteStatement::operator delete(v16, 0x18uLL);
  }
  char v17 = (WebCore::SQLiteStatement *)*((void *)this + 72);
  *((void *)this + 7objc_destroyWeak(this + 2) = 0;
  if (v17) {
    WebCore::SQLiteStatement::operator delete(v17, 0x18uLL);
  }
  char v18 = (WebCore::SQLiteStatement *)*((void *)this + 71);
  *((void *)this + 7objc_destroyWeak(this + 1) = 0;
  if (v18) {
    WebCore::SQLiteStatement::operator delete(v18, 0x18uLL);
  }
  __int16 v19 = (WebCore::SQLiteStatement *)*((void *)this + 70);
  *((void *)this + 70) = 0;
  if (v19) {
    WebCore::SQLiteStatement::operator delete(v19, 0x18uLL);
  }
  uint64_t v20 = (WebCore::SQLiteStatement *)*((void *)this + 69);
  *((void *)this + 69) = 0;
  if (v20) {
    WebCore::SQLiteStatement::operator delete(v20, 0x18uLL);
  }
  __int16 v21 = (WebCore::SQLiteStatement *)*((void *)this + 68);
  *((void *)this + 6++*(_DWORD *)(this + 8) = 0;
  if (v21) {
    WebCore::SQLiteStatement::operator delete(v21, 0x18uLL);
  }
  int v22 = (WebCore::SQLiteStatement *)*((void *)this + 67);
  *((void *)this + 67) = 0;
  if (v22) {
    WebCore::SQLiteStatement::operator delete(v22, 0x18uLL);
  }
  __int16 v23 = (WebCore::SQLiteStatement *)*((void *)this + 66);
  *((void *)this + 66) = 0;
  if (v23) {
    WebCore::SQLiteStatement::operator delete(v23, 0x18uLL);
  }
  uint64_t v24 = (WebCore::SQLiteStatement *)*((void *)this + 65);
  *((void *)this + 65) = 0;
  if (v24) {
    WebCore::SQLiteStatement::operator delete(v24, 0x18uLL);
  }
  uint64_t v25 = (WebCore::SQLiteStatement *)*((void *)this + 64);
  *((void *)this + 64) = 0;
  if (v25) {
    WebCore::SQLiteStatement::operator delete(v25, 0x18uLL);
  }
  long long v26 = (WebCore::SQLiteStatement *)*((void *)this + 63);
  *((void *)this + 63) = 0;
  if (v26) {
    WebCore::SQLiteStatement::operator delete(v26, 0x18uLL);
  }
  uint64_t v27 = (WebCore::SQLiteStatement *)*((void *)this + 62);
  *((void *)this + 6objc_destroyWeak(this + 2) = 0;
  if (v27) {
    WebCore::SQLiteStatement::operator delete(v27, 0x18uLL);
  }
  uint64_t v28 = (WebCore::SQLiteStatement *)*((void *)this + 61);
  *((void *)this + 6objc_destroyWeak(this + 1) = 0;
  if (v28) {
    WebCore::SQLiteStatement::operator delete(v28, 0x18uLL);
  }
  long long v29 = (WebCore::SQLiteStatement *)*((void *)this + 60);
  *((void *)this + 60) = 0;
  if (v29) {
    WebCore::SQLiteStatement::operator delete(v29, 0x18uLL);
  }
  uint64_t v30 = (WebCore::SQLiteStatement *)*((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v30) {
    WebCore::SQLiteStatement::operator delete(v30, 0x18uLL);
  }
  int v31 = (WebCore::SQLiteStatement *)*((void *)this + 58);
  *((void *)this + 5++*(_DWORD *)(this + 8) = 0;
  if (v31) {
    WebCore::SQLiteStatement::operator delete(v31, 0x18uLL);
  }
  uint64_t v32 = (WebCore::SQLiteStatement *)*((void *)this + 57);
  *((void *)this + 57) = 0;
  if (v32) {
    WebCore::SQLiteStatement::operator delete(v32, 0x18uLL);
  }
  int v33 = (WebCore::SQLiteStatement *)*((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v33) {
    WebCore::SQLiteStatement::operator delete(v33, 0x18uLL);
  }
  uint64_t v34 = (WebCore::SQLiteStatement *)*((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v34) {
    WebCore::SQLiteStatement::operator delete(v34, 0x18uLL);
  }
  unint64_t v35 = (WebCore::SQLiteStatement *)*((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v35) {
    WebCore::SQLiteStatement::operator delete(v35, 0x18uLL);
  }
  int8x16x2_t v36 = (WebCore::SQLiteStatement *)*((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v36) {
    WebCore::SQLiteStatement::operator delete(v36, 0x18uLL);
  }
  uint64_t v37 = (WebCore::SQLiteStatement *)*((void *)this + 52);
  *((void *)this + 5objc_destroyWeak(this + 2) = 0;
  if (v37) {
    WebCore::SQLiteStatement::operator delete(v37, 0x18uLL);
  }
  long long v38 = (WebCore::SQLiteStatement *)*((void *)this + 51);
  *((void *)this + 5objc_destroyWeak(this + 1) = 0;
  if (v38) {
    WebCore::SQLiteStatement::operator delete(v38, 0x18uLL);
  }
  long long v39 = (WebCore::SQLiteStatement *)*((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v39) {
    WebCore::SQLiteStatement::operator delete(v39, 0x18uLL);
  }
  long long v40 = (WebCore::SQLiteStatement *)*((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v40) {
    WebCore::SQLiteStatement::operator delete(v40, 0x18uLL);
  }
  long long v41 = (WebCore::SQLiteStatement *)*((void *)this + 48);
  *((void *)this + 4++*(_DWORD *)(this + 8) = 0;
  if (v41) {
    WebCore::SQLiteStatement::operator delete(v41, 0x18uLL);
  }
  long long v42 = (WebCore::SQLiteStatement *)*((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v42) {
    WebCore::SQLiteStatement::operator delete(v42, 0x18uLL);
  }
  long long v43 = (WebCore::SQLiteStatement *)*((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v43) {
    WebCore::SQLiteStatement::operator delete(v43, 0x18uLL);
  }
  long long v44 = (WebCore::SQLiteStatement *)*((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v44) {
    WebCore::SQLiteStatement::operator delete(v44, 0x18uLL);
  }
  long long v45 = (WebCore::SQLiteStatement *)*((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v45) {
    WebCore::SQLiteStatement::operator delete(v45, 0x18uLL);
  }
  char v46 = (WebCore::SQLiteStatement *)*((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v46) {
    WebCore::SQLiteStatement::operator delete(v46, 0x18uLL);
  }
  long long v47 = (WebCore::SQLiteStatement *)*((void *)this + 42);
  *((void *)this + 4objc_destroyWeak(this + 2) = 0;
  if (v47) {
    WebCore::SQLiteStatement::operator delete(v47, 0x18uLL);
  }
  int v48 = (WebCore::SQLiteStatement *)*((void *)this + 41);
  *((void *)this + 4objc_destroyWeak(this + 1) = 0;
  if (v48) {
    WebCore::SQLiteStatement::operator delete(v48, 0x18uLL);
  }
  long long v49 = (WebCore::SQLiteStatement *)*((void *)this + 40);
  *((void *)this + ++*(_DWORD *)(this - 40) = 0;
  if (v49) {
    WebCore::SQLiteStatement::operator delete(v49, 0x18uLL);
  }
  uint64_t v50 = (WTF::StringImpl **)*((void *)this + 39);
  if (v50) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v50, v10);
  }
  long long v51 = (WTF::StringImpl **)*((void *)this + 38);
  if (v51) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v51, v10);
  }
  long long v52 = (WTF::StringImpl **)*((void *)this + 37);
  if (v52) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v52, v10);
  }
  long long v53 = (WTF::StringImpl *)*((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2) {
      WTF::StringImpl::destroy(v53, v10);
    }
    else {
      *(_DWORD *)v53 -= 2;
    }
  }
  long long v54 = (WTF::StringImpl *)*((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2) {
      WTF::StringImpl::destroy(v54, v10);
    }
    else {
      *(_DWORD *)v54 -= 2;
    }
  }
  long long v55 = (WTF::StringImpl *)*((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2) {
      WTF::StringImpl::destroy(v55, v10);
    }
    else {
      *(_DWORD *)v55 -= 2;
    }
  }
  long long v56 = (WTF::WorkQueue *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v56) {
    WTF::WorkQueue::deref(v56);
  }
  uint64_t v57 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v57)
  {
    long long v58 = (unsigned int *)(v57 + 8);
    if (!atomic_load(v58))
    {
      __break(0xC471u);
      JUMPOUT(0x198BD6F34);
    }
    atomic_fetch_add((atomic_uint *volatile)v58, 0xFFFFFFFF);
  }
  uint64_t v60 = *((void *)this + 12);
  if (v60)
  {
    *(void *)(v60 + ++*(_DWORD *)(this + 8) = 0;
    long long v61 = (unsigned int *)*((void *)this + 12);
    *((void *)this + 1objc_destroyWeak(this + 2) = 0;
    if (v61 && atomic_fetch_add((atomic_uint *volatile)v61, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v61);
      WTF::fastFree((WTF *)v61, v10);
    }
  }
  else
  {
    *((void *)this + 1objc_destroyWeak(this + 2) = 0;
  }

  WebKit::DatabaseUtilities::~DatabaseUtilities(this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::ResourceLoadStatisticsStore::~ResourceLoadStatisticsStore(this);

  WTF::fastFree(v1, v2);
}

void WebKit::ResourceLoadStatisticsStore::removeDataRecords(uint64_t a1, uint64_t *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (WebKit::ResourceLoadStatisticsStore::shouldRemoveDataRecords((WebKit::ResourceLoadStatisticsStore *)a1))
  {
    unsigned int v4 = (WTF::StringImpl *)WebKit::ResourceLoadStatisticsStore::registrableDomainsToDeleteOrRestrictWebsiteDataFor((WebKit::ResourceLoadStatisticsStore *)&v30, a1);
    if (v31) {
      BOOL v5 = 0;
    }
    else {
      BOOL v5 = v32 == 0;
    }
    if (v5 && v33 == 0 && v34 == 0)
    {
      uint64_t v8 = *a2;
      *a2 = 0;
      (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    else
    {
      if (*(unsigned char *)(a1 + 716))
      {
        uint64_t v20 = qword_1EB357E70;
        if (os_log_type_enabled((os_log_t)qword_1EB357E70, OS_LOG_TYPE_INFO))
        {
          WebKit::domainsToString((WebKit *)&v28, &v30);
          WTF::String::utf8();
          if (v29) {
            __int16 v21 = (char *)v29 + 16;
          }
          else {
            __int16 v21 = 0;
          }
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = v21;
          _os_log_impl(&dword_1985F2000, v20, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: About to remove data records for %{public}s.", buf, 0xCu);
          __int16 v23 = v29;
          long long v29 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1) {
              WTF::fastFree(v23, v22);
            }
            else {
              --*(_DWORD *)v23;
            }
          }
          uint64_t v24 = v28;
          uint64_t v28 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v22);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
        }
        WebKit::domainsToString((WebKit *)&v27, &v30);
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[ITP] About to remove data records for: [", 42, (uint64_t *)&v27, (uint64_t)"].", 3, buf);
        WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(a1, 13, 4, (uint64_t)buf);
        long long v26 = *(WTF::StringImpl **)buf;
        *(void *)long long buf = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2) {
            WTF::StringImpl::destroy(v26, v25);
          }
          else {
            *(_DWORD *)v26 -= 2;
          }
        }
        unsigned int v4 = v27;
        uint64_t v27 = 0;
        if (v4)
        {
          if (*(_DWORD *)v4 == 2) {
            unsigned int v4 = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v25);
          }
          else {
            *(_DWORD *)v4 -= 2;
          }
        }
      }
      *(unsigned char *)(a1 + 71++*(_DWORD *)(this + 8) = 1;
      long long v10 = (WTF::RunLoop *)WTF::MonotonicTime::now(v4);
      *(void *)(a1 + 24++*(_DWORD *)(this + 8) = v11;
      WTF::RunLoop::main(v10);
      uint64_t v12 = *(atomic_uchar *volatile **)(a1 + 104);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v12);
      *(void *)long long buf = v12;
      WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor::isolatedCopy((uint64_t)&buf[8], (uint64_t)&v30);
      uint64_t v13 = *a2;
      *a2 = 0;
      uint64_t v36 = v13;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 96), a1);
      int v14 = *(atomic_uint **)(a1 + 96);
      if (v14) {
        atomic_fetch_add(v14, 1u);
      }
      uint64_t v37 = v14;
      unint64_t v15 = *(WTF::WorkQueue **)(a1 + 112);
      WTF::WorkQueue::ref(v15);
      long long v38 = v15;
      WTF::Function<void ()(void)>::Function<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>((uint64_t *)&v29, (uint64_t *)buf);
      WTF::RunLoop::dispatch();
      char v17 = v29;
      long long v29 = 0;
      if (v17) {
        (*(void (**)(WTF *))(*(void *)v17 + 8))(v17);
      }
      WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)buf, v16);
    }
    WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor::~RegistrableDomainsToDeleteOrRestrictWebsiteDataFor((WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor *)&v30, v9);
  }
  else
  {
    uint64_t v18 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
    __int16 v19 = *(void (**)(uint64_t))(*(void *)v18 + 8);
    v19(v18);
  }
}

BOOL WebKit::ResourceLoadStatisticsStore::shouldRemoveDataRecords(WebKit::ResourceLoadStatisticsStore *this)
{
  if (*((unsigned char *)this + 718)) {
    return 0;
  }
  if (*((double *)this + 31) == 0.0) {
    return 1;
  }
  WTF::MonotonicTime::now(this);
  if (v3 >= *((double *)this + 21) + *((double *)this + 31)) {
    return 1;
  }
  return *((unsigned char *)this + 225) != 0;
}

unsigned char *WebKit::ResourceLoadStatisticsStore::registrableDomainsToDeleteOrRestrictWebsiteDataFor(WebKit::ResourceLoadStatisticsStore *this, uint64_t a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  double v4 = *(double *)(a2 + 648);
  WTF::WallTime::now(this);
  double v6 = v4 + v5;
  double v7 = *(double *)(a2 + 232);
  BOOL v8 = v7 > v6 || v7 == 0.0;
  if (!v8) {
    *(void *)(a2 + 23objc_destroyWeak(this + 2) = 0;
  }
  *((_OWORD *)this + objc_destroyWeak(this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + objc_destroyWeak(this + 1) = 0u;
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)a2, (uint64_t)v49);
  WebKit::ResourceLoadStatisticsStore::domains((WebKit::ResourceLoadStatisticsStore *)&v47);
  long long v45 = 0;
  uint64_t v46 = 0;
  double v9 = v6;
  if (v48)
  {
    unint64_t v13 = v47;
    uint64_t v14 = 40 * v48;
    double v9 = v6;
    do
    {
      unint64_t v15 = (WTF::StringImpl **)(v13 + 8);
      if ((WebKit::ResourceLoadStatisticsStore::shouldExemptFromWebsiteDataDeletion((WebKit::ResourceLoadStatisticsStore *)a2, (WTF::ASCIICaseInsensitiveHash **)(v13 + 8)) & 1) == 0&& (*(double *)(v13 + 24) == 0.0|| ((uint64_t (*)(uint64_t, void))WebKit::ResourceLoadStatisticsStore::hasStatisticsExpired)(a2, 0)))
      {
        double v16 = *(double *)(v13 + 16);
        if (v16 <= 0.0) {
          double v17 = 0.0;
        }
        else {
          double v17 = *(double *)(v13 + 16);
        }
        if (v9 > v17 && v16 > 0.0) {
          double v9 = v17;
        }
        if (WebKit::ResourceLoadStatisticsStore::shouldRemoveAllWebsiteDataFor((WebKit::ResourceLoadStatisticsStore *)a2, v13, v7 > v6))
        {
          uint64_t v19 = *((unsigned int *)this + 3);
          if (v19 == *((_DWORD *)this + 2))
          {
            WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)this, v13 + 8);
          }
          else
          {
            uint64_t v22 = *(void *)this;
            __int16 v23 = *v15;
            if (*v15) {
              *(_DWORD *)v23 += 2;
            }
            *(void *)(v22 + 8 * v19) = v23;
            *((_DWORD *)this + 3) = v19 + 1;
          }
          uint64_t v20 = (uint64_t *)((char *)this + 32);
          uint64_t v21 = *((unsigned int *)this + 11);
          if (v21 == *((_DWORD *)this + 10))
          {
            WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)v20, v13 + 8);
          }
          else
          {
            uint64_t v24 = *v20;
            uint64_t v25 = *v15;
            if (*v15) {
              *(_DWORD *)v25 += 2;
            }
            *(void *)(v24 + 8 * vWebKit::NetworkResourceLoader::startRequest((WebKit::NetworkResourceLoader *)this, this + 21) = v25;
            *((_DWORD *)this + 1objc_destroyWeak(this + 1) = v21 + 1;
          }
        }
        else
        {
          if (WebKit::ResourceLoadStatisticsStore::shouldRemoveAllButCookiesFor(a2, v13, v7 > v6))
          {
            long long v26 = (uint64_t *)((char *)this + 32);
            uint64_t v27 = *((unsigned int *)this + 11);
            if (v27 == *((_DWORD *)this + 10))
            {
              WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)v26, v13 + 8);
            }
            else
            {
              uint64_t v30 = *v26;
              int v31 = *v15;
              if (*v15) {
                *(_DWORD *)v31 += 2;
              }
              *(void *)(v30 + 8 * v27) = v31;
              *((_DWORD *)this + 1objc_destroyWeak(this + 1) = v27 + 1;
            }
            WebKit::ResourceLoadStatisticsStore::setIsScheduledForAllScriptWrittenStorageRemoval(a2, (const WebCore::RegistrableDomain *)(v13 + 8));
          }
          if (WebKit::ResourceLoadStatisticsStore::shouldEnforceSameSiteStrictFor(a2, v13, v7 > v6))
          {
            uint64_t v28 = (uint64_t *)((char *)this + 48);
            uint64_t v29 = *((unsigned int *)this + 15);
            if (v29 == *((_DWORD *)this + 14))
            {
              WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)v28, v13 + 8);
            }
            else
            {
              uint64_t v32 = *v28;
              int v33 = *v15;
              if (*v15) {
                *(_DWORD *)v33 += 2;
              }
              *(void *)(v32 + 8 * v29) = v33;
              *((_DWORD *)this + 15) = v29 + 1;
            }
            if (*(unsigned char *)(a2 + 716))
            {
              BOOL v42 = v8;
              int v34 = qword_1EB357E70;
              if (os_log_type_enabled((os_log_t)qword_1EB357E70, OS_LOG_TYPE_INFO))
              {
                WTF::String::utf8();
                unint64_t v35 = v44 ? (char *)v44 + 16 : 0;
                *(_DWORD *)long long buf = 136446210;
                *(void *)&uint8_t buf[4] = v35;
                _os_log_impl(&dword_1985F2000, v34, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: Scheduled %{public}s to have its cookies set to SameSite=strict.", buf, 0xCu);
                uint64_t v37 = v44;
                long long v44 = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 1) {
                    WTF::fastFree(v37, v36);
                  }
                  else {
                    --*(_DWORD *)v37;
                  }
                }
              }
              long long v38 = *v15;
              if (*v15) {
                *(_DWORD *)v38 += 2;
              }
              long long v43 = v38;
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Scheduled '", 12, (uint64_t *)&v43, (uint64_t)"' to have its cookies set to SameSite=strict'.", 47, buf);
              WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(a2, 13, 4, (uint64_t)buf);
              long long v40 = *(WTF::StringImpl **)buf;
              *(void *)long long buf = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2) {
                  WTF::StringImpl::destroy(v40, v39);
                }
                else {
                  *(_DWORD *)v40 -= 2;
                }
              }
              long long v41 = v43;
              long long v43 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2) {
                  WTF::StringImpl::destroy(v41, v39);
                }
                else {
                  *(_DWORD *)v41 -= 2;
                }
              }
              BOOL v8 = v42;
            }
          }
        }
        if (!v8 && *(unsigned char *)(v13 + 33))
        {
          if (HIDWORD(v46) == v46)
          {
            WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)&v45, v13);
          }
          else
          {
            *((_DWORD *)v45 + HIDWORD(v46)) = *(_DWORD *)v13;
            ++HIDWORD(v46);
          }
        }
      }
      v13 += 40;
      v14 -= 40;
    }
    while (v14);
  }
  if (!*(unsigned char *)(a2 + 225) && v6 - v9 < *(double *)(a2 + 168)) {
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 32, 0);
  }
  WebKit::ResourceLoadStatisticsStore::clearGrandfathering(a2, (unsigned int *)v45, HIDWORD(v46));
  uint64_t v11 = v45;
  if (v45)
  {
    long long v45 = 0;
    LODWORD(v46) = 0;
    WTF::fastFree(v11, v10);
  }
  WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v10);
  return WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v49);
}

WTF::StringImpl *WebKit::domainsToString(WebKit *this, uint64_t **a2)
{
  uint64_t v37 = 0;
  long long v38 = 0;
  int v39 = 0;
  char v40 = 1;
  uint64_t v4 = *((unsigned int *)a2 + 3);
  if (v4)
  {
    int64x2_t v5 = vdupq_n_s64(3uLL);
    double v6 = *a2;
    v5.i64[0] = (uint64_t)", ";
    int8x16_t v31 = (int8x16_t)v5;
    int64x2_t v7 = vdupq_n_s64(1uLL);
    uint64_t v8 = 8 * v4;
    v7.i64[0] = (uint64_t)"";
    int8x16_t v28 = (int8x16_t)v7;
    do
    {
      int32x2_t v9 = vdup_n_s32(v39 == 0);
      v10.i64[0] = v9.u32[0];
      v10.i64[1] = v9.u32[1];
      int8x16_t v36 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v10, 0x3FuLL)), v28, v31);
      int v34 = "(all data)";
      uint64_t v35 = 11;
      WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)&v37, (uint64_t)&v36, v6++, (uint64_t)&v34);
      v8 -= 8;
    }
    while (v8);
  }
  uint64_t v11 = *((unsigned int *)a2 + 7);
  if (v11)
  {
    int64x2_t v12 = vdupq_n_s64(3uLL);
    unint64_t v13 = a2[2];
    v12.i64[0] = (uint64_t)", ";
    int8x16_t v32 = (int8x16_t)v12;
    int64x2_t v14 = vdupq_n_s64(1uLL);
    uint64_t v15 = 8 * v11;
    v14.i64[0] = (uint64_t)"";
    int8x16_t v29 = (int8x16_t)v14;
    do
    {
      int32x2_t v16 = vdup_n_s32(v39 == 0);
      v17.i64[0] = v16.u32[0];
      v17.i64[1] = v16.u32[1];
      int8x16_t v36 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v17, 0x3FuLL)), v29, v32);
      int v34 = "(all but HttpOnly cookies)";
      uint64_t v35 = 27;
      WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)&v37, (uint64_t)&v36, v13++, (uint64_t)&v34);
      v15 -= 8;
    }
    while (v15);
  }
  uint64_t v18 = *((unsigned int *)a2 + 11);
  if (v18)
  {
    int64x2_t v19 = vdupq_n_s64(3uLL);
    uint64_t v20 = a2[4];
    v19.i64[0] = (uint64_t)", ";
    int8x16_t v33 = (int8x16_t)v19;
    int64x2_t v21 = vdupq_n_s64(1uLL);
    uint64_t v22 = 8 * v18;
    v21.i64[0] = (uint64_t)"";
    int8x16_t v30 = (int8x16_t)v21;
    do
    {
      int32x2_t v23 = vdup_n_s32(v39 == 0);
      v24.i64[0] = v23.u32[0];
      v24.i64[1] = v23.u32[1];
      int8x16_t v36 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v24, 0x3FuLL)), v30, v33);
      int v34 = "(all but cookies)";
      uint64_t v35 = 18;
      WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)&v37, (uint64_t)&v36, v20++, (uint64_t)&v34);
      v22 -= 8;
    }
    while (v22);
  }
  uint64_t v25 = v37;
  if (v37
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v37),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v37),
        (uint64_t v25 = v37) != 0))
  {
    *(_DWORD *)v25 += 2;
  }
  *(void *)this = v25;
  long long v26 = v38;
  long long v38 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  uint64_t result = v37;
  uint64_t v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::RunLoop *WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v8 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  uint64_t result = (WTF::RunLoop *)WTF::RunLoop::isCurrent(v8);
  if (result)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 104) + 16);
    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 8);
      if (v11)
      {
        uint64_t v13 = *(void *)(v11 + 24);
        uint64_t v12 = *(void *)(v11 + 32);
        return (WTF::RunLoop *)WebKit::NetworkProcess::broadcastConsoleMessage(v12, v13, a2, a3, a4);
      }
    }
  }
  else
  {
    WTF::RunLoop::main(result);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 96), a1);
    int64x2_t v14 = *(atomic_uint **)(a1 + 96);
    if (v14) {
      atomic_fetch_add(v14, 1u);
    }
    int32x2_t v16 = (WTF *)v14;
    LOBYTE(v17) = a2;
    HIBYTE(v17) = a3;
    WTF::String::isolatedCopy();
    v18[1] = (WTF::StringImpl *)a1;
    uint64_t v15 = WTF::fastMalloc((WTF *)0x28);
    *(void *)uint64_t v15 = &unk_1EE9C7990;
    *(void *)(v15 + ++*(_DWORD *)(this + 8) = v16;
    *(_WORD *)(v15 + 16) = v17;
    *(_OWORD *)(v15 + 24) = *(_OWORD *)v18;
    uint64_t v19 = v15;
    WTF::RunLoop::dispatch();
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    return 0;
  }
  return result;
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x68);
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)uint64_t v4 = &unk_1EE9C7648;
  *(void *)(v4 + ++*(_DWORD *)(this + 8) = v5;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  uint64_t v6 = a2[1];
  a2[1] = 0;
  *(void *)(v4 + 16) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(v4 + 24) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(v4 + 2++*(_DWORD *)(this + 8) = v6;
  *(void *)(v4 + 3objc_destroyWeak(this + 2) = 0;
  *(void *)(v4 + ++*(_DWORD *)(this - 40) = 0;
  uint64_t v7 = a2[3];
  a2[3] = 0;
  *(void *)(v4 + 3objc_destroyWeak(this + 2) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + ++*(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(v4 + ++*(_DWORD *)(this - 40) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(v4 + 44) = v7;
  *(void *)(v4 + 4++*(_DWORD *)(this + 8) = 0;
  *(void *)(v4 + 56) = 0;
  uint64_t v8 = a2[5];
  a2[5] = 0;
  *(void *)(v4 + 4++*(_DWORD *)(this + 8) = v8;
  LODWORD(v++*(_DWORD *)(this + 8) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 1objc_destroyWeak(this + 2) = 0;
  *(_DWORD *)(v4 + 56) = v8;
  LODWORD(v++*(_DWORD *)(this + 8) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = 0;
  *(_DWORD *)(v4 + 60) = v8;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 7objc_destroyWeak(this + 2) = 0;
  uint64_t v9 = a2[7];
  a2[7] = 0;
  *(void *)(v4 + 64) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = 0;
  *(_DWORD *)(v4 + 7objc_destroyWeak(this + 2) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = 0;
  *(_DWORD *)(v4 + 76) = v9;
  uint64_t v10 = a2[9];
  a2[9] = 0;
  *(void *)(v4 + 80) = v10;
  uint64_t v11 = a2[10];
  a2[10] = 0;
  *(void *)(v4 + 8++*(_DWORD *)(this + 8) = v11;
  uint64_t v12 = a2[11];
  a2[11] = 0;
  *(void *)(v4 + 96) = v12;
  *a1 = v4;
  return a1;
}

uint64_t WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t a1, void *a2)
{
  double v3 = *(WTF::WorkQueue **)(a1 + 88);
  *(void *)(a1 + 8++*(_DWORD *)(this + 8) = 0;
  if (v3) {
    WTF::WorkQueue::deref(v3);
  }
  uint64_t v4 = *(unsigned int **)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  uint64_t v5 = *(void *)(a1 + 72);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, v6);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, v7);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, v8);
  uint64_t v9 = *(atomic_uchar ***)a1;
  *(void *)a1 = 0;
  if (v9) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v9);
  }
  return a1;
}

void WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor::~RegistrableDomainsToDeleteOrRestrictWebsiteDataFor(WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor *this, void *a2)
{
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 48, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, v3);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, v4);

  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this, v5);
}

void *WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords(WebKit::ResourceLoadStatisticsStore *this)
{
  if (*((unsigned char *)this + 224)) {
    WebKit::ResourceLoadStatisticsStore::classifyPrevalentResources(this);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 24, (uint64_t)this);
  uint64_t v2 = (atomic_uint *)*((void *)this + 12);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  double v3 = (void *)WTF::fastMalloc((WTF *)0x18);
  *double v3 = &unk_1EE9C76C0;
  v3[1] = this;
  uint64_t v3[2] = v2;
  uint64_t v6 = v3;
  WebKit::ResourceLoadStatisticsStore::removeDataRecords((uint64_t)this, (uint64_t *)&v6);
  uint64_t result = v6;
  if (v6)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*v6 + 8);
    return (void *)v5();
  }
  return result;
}

_DWORD *WebKit::ResourceLoadStatisticsStore::classifyPrevalentResources(WebKit::ResourceLoadStatisticsStore *this)
{
  WebKit::ResourceLoadStatisticsStore::ensurePrevalentResourcesForDebugMode(v4, this);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
  WebKit::ResourceLoadStatisticsStore::markAsPrevalentIfHasRedirectedToPrevalent(this);
  return WebKit::ResourceLoadStatisticsStore::reclassifyResources(this);
}

uint64_t WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(uint64_t a1, uint64_t *a2)
{
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 96), a1);
  uint64_t v4 = *(atomic_uint **)(a1 + 96);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = *(WTF::WorkQueue **)(a1 + 112);
  WTF::WorkQueue::ref(v6);
  uint64_t v7 = *(atomic_uchar *volatile **)(a1 + 104);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v7);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v8 = &unk_1EE9C76E8;
  v8[1] = v4;
  void v8[2] = v5;
  v8[3] = v6;
  v8[4] = v7;
  uint64_t v10 = v8;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v10;
  if (v10) {
    return (*(uint64_t (**)(void *))(*v10 + 8))(v10);
  }
  return result;
}

uint64_t *WebKit::ResourceLoadStatisticsStore::ensurePrevalentResourcesForDebugMode(uint64_t *this, unsigned char *a2)
{
  uint64_t v2 = this;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a2[717])
  {
    uint64_t v29 = 2;
    uint64_t v28 = WTF::fastMalloc((WTF *)0x10);
    WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)a2, (uint64_t)v27);
    uint64_t v4 = (_DWORD **)(a2 + 280);
    WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)a2, (const WebCore::RegistrableDomain *)(a2 + 280), (uint64_t)"ensurePrevalentResourcesForDebugMode");
    if (v5)
    {
      WebKit::ResourceLoadStatisticsStore::setPrevalentResource((WebCore::SQLiteStatement **)a2, (const WebCore::RegistrableDomain *)(a2 + 280), 2);
      uint64_t v6 = HIDWORD(v29);
      if (HIDWORD(v29) == v29)
      {
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)&v28, (unint64_t)(a2 + 280));
      }
      else
      {
        uint64_t v7 = v28;
        uint64_t v8 = *v4;
        if (*v4) {
          *v8 += 2;
        }
        *(void *)(v7 + 8 * v6) = v8;
        HIDWORD(v29) = v6 + 1;
      }
      uint64_t v10 = (WTF::StringImpl **)(a2 + 240);
      uint64_t v9 = *((void *)a2 + 30);
      if (!v9 || !*(_DWORD *)(v9 + 4) || (MEMORY[0x19972E990]() & 1) != 0) {
        goto LABEL_13;
      }
      WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)a2, (const WebCore::RegistrableDomain *)(a2 + 240), (uint64_t)"ensurePrevalentResourcesForDebugMode");
      if (v13)
      {
        WebKit::ResourceLoadStatisticsStore::setPrevalentResource((WebCore::SQLiteStatement **)a2, (const WebCore::RegistrableDomain *)(a2 + 240), 2);
        uint64_t v14 = HIDWORD(v29);
        if (HIDWORD(v29) == v29)
        {
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)&v28, (unint64_t)(a2 + 240));
        }
        else
        {
          uint64_t v15 = v28;
          int32x2_t v16 = *v10;
          if (*v10) {
            *(_DWORD *)v16 += 2;
          }
          *(void *)(v15 + 8 * v14) = v16;
          HIDWORD(v29) = v14 + 1;
        }
        if (a2[716])
        {
          __int16 v17 = qword_1EB357E70;
          if (os_log_type_enabled((os_log_t)qword_1EB357E70, OS_LOG_TYPE_INFO))
          {
            WTF::String::utf8();
            uint64_t v18 = v26 ? (char *)v26 + 16 : 0;
            *(_DWORD *)long long buf = 136380675;
            *(void *)&uint8_t buf[4] = v18;
            _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: Did set %{private}s as prevalent resource for the purposes of ITP Debug Mode.", buf, 0xCu);
            uint64_t v20 = v26;
            long long v26 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 1) {
                WTF::fastFree(v20, v19);
              }
              else {
                --*(_DWORD *)v20;
              }
            }
          }
          int64x2_t v21 = *v10;
          if (*v10) {
            *(_DWORD *)v21 += 2;
          }
          uint64_t v25 = v21;
          WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[ITP] Did set '", 16, (uint64_t *)&v25, (uint64_t)"' as prevalent resource for the purposes of ITP Debug Mode.", 60, buf);
          WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage((uint64_t)a2, 13, 4, (uint64_t)buf);
          int32x2_t v23 = *(WTF::StringImpl **)buf;
          *(void *)long long buf = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v22);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          int64x2_t v24 = v25;
          uint64_t v25 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, v22);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
        }
LABEL_13:
        *uint64_t v2 = v28;
        uint64_t v11 = v29;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        v2[1] = v11;
LABEL_14:
        WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v27);
        return (uint64_t *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v12);
      }
    }
    *uint64_t v2 = 0;
    v2[1] = 0;
    goto LABEL_14;
  }
  *this = 0;
  this[1] = 0;
  return this;
}

uint64_t WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(uint64_t a1, uint64_t *a2)
{
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  WebCore::SQLiteDatabase::prepareStatement();
  unsigned int v4 = v24;
  if (!v24)
  {
    do
    {
      if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v22) != 100)
      {
        unsigned int v4 = v24;
        goto LABEL_4;
      }
      if (v24) {
        break;
      }
      WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v22);
      WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v34, v27);
      int v18 = HIDWORD(v37);
      if (HIDWORD(v37) == v37)
      {
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain>((uint64_t)&v36, (unint64_t)v27);
      }
      else
      {
        uint64_t v19 = v27[0];
        v27[0] = 0;
        *(void *)(v36 + 8 * HIDWORD(v37)) = v19;
        HIDWORD(v37) = v18 + 1;
      }
      uint64_t v20 = v27[0];
      v27[0] = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v17);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      int64x2_t v21 = v34;
      int v34 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v17);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
    }
    while (!v24);
    uint64_t v15 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_33:
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    goto LABEL_19;
  }
LABEL_4:
  if (v4 != -1) {
    (*(&off_1EE9C7600 + v4))((int)v27, (WebCore::SQLiteStatement *)v22);
  }
  WebKit::ResourceLoadStatisticsStore::domainsToBlockButKeepCookiesFor((WebKit::ResourceLoadStatisticsStore *)&v34);
  WebKit::ResourceLoadStatisticsStore::domainsWithUserInteractionAsFirstParty((WebKit::ResourceLoadStatisticsStore *)v32);
  WebKit::ResourceLoadStatisticsStore::domainsWithStorageAccess((WebKit::ResourceLoadStatisticsStore *)&v31);
  if (!HIDWORD(v37) && !v35 && !v33 && (!v31 || !*(_DWORD *)(v31 - 12)))
  {
    uint64_t v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    goto LABEL_12;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v27, (uint64_t)&v36);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v28, (uint64_t)&v34);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v29, (uint64_t)v32);
  uint64_t v10 = (WTF::RunLoop *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(&v30, &v31);
  if (*(unsigned char *)(a1 + 716) && HIDWORD(v37) | v35) {
    uint64_t v10 = (WTF::RunLoop *)WebKit::ResourceLoadStatisticsStore::debugLogDomainsInBatches(a1, (uint64_t)v27);
  }
  WTF::RunLoop::main(v10);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 96), a1);
  uint64_t v11 = *(atomic_uint **)(a1 + 96);
  if (v11) {
    atomic_fetch_add(v11, 1u);
  }
  v22[0] = (uint64_t)v11;
  uint64_t v12 = *(atomic_uchar *volatile **)(a1 + 104);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v12);
  v22[1] = (uint64_t)v12;
  WebKit::RegistrableDomainsToBlockCookiesFor::isolatedCopy(&v23, (uint64_t)v27);
  uint64_t v13 = *a2;
  *a2 = 0;
  uint64_t v25 = v13;
  WTF::Function<void ()(void)>::Function<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>(&v26, v22);
  WTF::RunLoop::dispatch();
  uint64_t v15 = v26;
  uint64_t v26 = 0;
  if (v15) {
    goto LABEL_33;
  }
LABEL_19:
  WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)v22, v14);
  WebKit::RegistrableDomainsToBlockCookiesFor::~RegistrableDomainsToBlockCookiesFor((WebKit::RegistrableDomainsToBlockCookiesFor *)v27, v16);
LABEL_12:
  if (v31) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v31, v6);
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v32, v6);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v7);
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v8);
}

unsigned int *WebKit::ResourceLoadStatisticsStore::scheduleStatisticsProcessingRequestIfNecessary(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t v2 = *((void *)this + 32) + 1;
  *((void *)this + 3objc_destroyWeak(this + 2) = v2;
  *((void *)this + 33) = v2;
  *((unsigned char *)this + 27objc_destroyWeak(this + 2) = 1;
  uint64_t result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 24, (uint64_t)this);
  unsigned int v4 = (atomic_uint *)*((void *)this + 12);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  if (*((unsigned char *)this + 272))
  {
    uint64_t v5 = *((void *)this + 33);
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v6 = &unk_1EE9C7788;
    v6[1] = this;
    void v6[2] = v4;
    _OWORD v6[3] = v5;
    uint64_t v7 = (uint64_t)v6;
    WTF::SuspendableWorkQueue::dispatchAfter();
    uint64_t result = (unsigned int *)v7;
    if (v7) {
      return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::updateCacheMaxAgeCap(atomic_uchar *volatile **this)
{
  WTF::RunLoop::main((WTF::RunLoop *)this);
  uint64_t v2 = this[13];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v2);
  double v3 = this[23];
  unsigned int v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v4 = &unk_1EE9C77D8;
  v4[1] = v2;
  uint64_t v4[2] = v3;
  uint64_t v6 = (uint64_t)v4;
  WTF::RunLoop::dispatch();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::updateClientSideCookiesAgeCap(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t v2 = *((void *)this + 25);
  WTF::RunLoop::main(this);
  double v3 = (atomic_uchar *volatile *)*((void *)this + 13);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3);
  unsigned int v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v4 = &unk_1EE9C7828;
  v4[1] = v3;
  uint64_t v4[2] = v2;
  uint64_t v6 = (uint64_t)v4;
  WTF::RunLoop::dispatch();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::logTestingEvent(WTF::RunLoop *a1)
{
  WTF::RunLoop::main(a1);
  uint64_t v2 = (atomic_uchar *volatile *)*((void *)a1 + 13);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v2);
  uint64_t v8 = v2;
  WTF::String::isolatedCopy();
  double v3 = (void *)WTF::fastMalloc((WTF *)0x18);
  *double v3 = &unk_1EE9C78C8;
  v3[1] = v8;
  uint64_t v4 = v9;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v3[2] = v4;
  uint64_t v10 = v3;
  WTF::RunLoop::dispatch();
  uint64_t v6 = v10;
  uint64_t v10 = 0;
  if (v6) {
    (*(void (**)(void *))(*v6 + 8))(v6);
  }
  return WebKit::ResourceLoadStatisticsStore::logTestingEvent(WTF::String &&)::$_0::~$_0((uint64_t)&v8, v5);
}

uint64_t WebKit::ResourceLoadStatisticsStore::logTestingEvent(WTF::String &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  double v3 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(atomic_uchar ***)a1;
  *(void *)a1 = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }
  return a1;
}

uint64_t WebKit::ResourceLoadStatisticsStore::didCreateNetworkProcess(atomic_uchar *volatile **this)
{
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v2 = &unk_1EE9C7968;
  uint64_t v4 = v2;
  WebKit::ResourceLoadStatisticsStore::updateCookieBlocking((uint64_t)this, (uint64_t *)&v4);
  if (v4) {
    (*(void (**)(void *))(*v4 + 8))(v4);
  }
  WebKit::ResourceLoadStatisticsStore::updateCacheMaxAgeCap(this);

  return WebKit::ResourceLoadStatisticsStore::updateClientSideCookiesAgeCap((WebKit::ResourceLoadStatisticsStore *)this);
}

uint64_t WebKit::ResourceLoadStatisticsStore::debugLogDomainsInBatches(uint64_t a1, uint64_t a2)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  long long v71 = 0;
  uint64_t v72 = 0;
  unint64_t v4 = *(unsigned int *)(a2 + 12);
  if (v4)
  {
    uint64_t v5 = *(_DWORD ***)a2;
    if (v4 <= 0x10) {
      unint64_t v6 = 16;
    }
    else {
      unint64_t v6 = *(unsigned int *)(a2 + 12);
    }
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v71, v6);
    if (v4 < HIDWORD(v72))
    {
      __break(0xC471u);
      JUMPOUT(0x198BD9204);
    }
    uint64_t v7 = v71;
    uint64_t v8 = HIDWORD(v72);
    uint64_t v9 = 8 * v4;
    do
    {
      uint64_t v10 = *v5;
      if (*v5) {
        *v10 += 2;
      }
      v7[v8] = (uint64_t)v10;
      ++v5;
      ++v8;
      v9 -= 8;
    }
    while (v9);
    HIDWORD(v7objc_destroyWeak(this + 2) = v4;
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v11 = *(unsigned int *)(a2 + 28);
  if (v11)
  {
    uint64_t v12 = *(_DWORD ***)(a2 + 16);
    unint64_t v13 = v11 + v4;
    if (v11 + v4 > v72)
    {
      unint64_t v14 = v72 + ((unint64_t)v72 >> 2);
      if (v14 >= 0x10) {
        unint64_t v15 = v14 + 1;
      }
      else {
        unint64_t v15 = 16;
      }
      if (v15 <= v13) {
        unint64_t v16 = v11 + v4;
      }
      else {
        unint64_t v16 = v15;
      }
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v71, v16);
      unint64_t v4 = HIDWORD(v72);
      if (v13 < HIDWORD(v72))
      {
        __break(0xC471u);
LABEL_117:
        JUMPOUT(0x198BD91FCLL);
      }
      uint64_t v7 = v71;
    }
    uint64_t v17 = v4;
    uint64_t v18 = 8 * v11;
    do
    {
      uint64_t v19 = *v12;
      if (*v12) {
        *v19 += 2;
      }
      v7[v17] = (uint64_t)v19;
      ++v12;
      ++v17;
      v18 -= 8;
    }
    while (v18);
    HIDWORD(v7objc_destroyWeak(this + 2) = v13;
    LODWORD(v4) = v13;
  }
  if (!v4) {
    return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v7);
  }
  WebKit::domainsToString(&v70, v7, v4);
  uint64_t v20 = v70;
  if (v70)
  {
    int v21 = *((_DWORD *)v70 + 1);
    if (v21 < 0) {
      goto LABEL_114;
    }
  }
  else
  {
    int v21 = 0;
  }
  BOOL v22 = __OFADD__(v21, 2);
  int v23 = v21 + 2;
  if (v22) {
    goto LABEL_114;
  }
  BOOL v22 = __OFADD__(v23, 6);
  int v24 = v23 + 6;
  if (v22) {
    goto LABEL_114;
  }
  BOOL v22 = __OFADD__(v24, 41);
  int v25 = v24 + 41;
  if (v22) {
    goto LABEL_114;
  }
  uint64_t v26 = (v25 + 6);
  if (__OFADD__(v25, 6)) {
    goto LABEL_114;
  }
  if (!v70 || (*((unsigned char *)v70 + 16) & 4) != 0)
  {
    WTF::tryFastCompactMalloc((WTF *)(v26 + 20));
    uint64_t v27 = *(void *)buf;
    if (*(void *)buf)
    {
      *(_OWORD *)(*(void *)buf + 26) = *(_OWORD *)"Applying cross-site tracking restrictions";
      *(_DWORD *)uint64_t v27 = 2;
      *(_DWORD *)(v27 + 4) = v26;
      *(void *)(v27 + ++*(_DWORD *)(this + 8) = v27 + 20;
      *(void *)(v27 + 16) = 0x5054495B00000004;
      *(_WORD *)(v27 + 24) = 8285;
      qmemcpy((void *)(v27 + 42), "ite tracking restrictions to: [", 31);
      *(void *)long long buf = v20;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)buf, (char *)(v27 + 73));
      uint64_t v36 = *(void *)buf;
      if (*(void *)buf) {
        uint64_t v36 = *(unsigned int *)(*(void *)buf + 4);
      }
      *(_WORD *)(v27 + 73 + v36) = 11869;
      goto LABEL_51;
    }
    goto LABEL_114;
  }
  if (v26 > 0x7FFFFFEF
    || (WTF::tryFastCompactMalloc((WTF *)(2 * (v25 + 6) + 20)), (uint64_t v27 = *(void *)buf) == 0))
  {
LABEL_114:
    __break(0xC471u);
    goto LABEL_117;
  }
  **(_DWORD **)long long buf = 2;
  *(_DWORD *)(v27 + 4) = v26;
  *(void *)(v27 + ++*(_DWORD *)(this + 8) = v27 + 20;
  *(_DWORD *)(v27 + 16) = 0;
  uint64_t v28 = "[ITP] ";
  for (uint64_t i = 20; i != 32; i += 2)
  {
    __int16 v30 = *(unsigned __int8 *)v28++;
    *(_WORD *)(v27 + i) = v30;
  }
  uint64_t v31 = "Applying cross-site tracking restrictions";
  do
  {
    __int16 v32 = *(unsigned __int8 *)v31++;
    *(_WORD *)(v27 + i) = v32;
    i += 2;
  }
  while (i != 114);
  int v33 = " to: [";
  do
  {
    __int16 v34 = *(unsigned __int8 *)v33++;
    *(_WORD *)(v27 + i) = v34;
    i += 2;
  }
  while (i != 126);
  *(void *)long long buf = v20;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)buf, (char *)(v27 + 126));
  uint64_t v35 = *(void *)buf;
  if (*(void *)buf) {
    uint64_t v35 = *(unsigned int *)(*(void *)buf + 4);
  }
  *(_DWORD *)(v27 + 126 + 2 * v35) = 3014749;
LABEL_51:
  *(void *)long long buf = v27;
  WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(a1, 13, 4, (uint64_t)buf);
  long long v38 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, v37);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  long long v70 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v37);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  unsigned int v39 = HIDWORD(v72);
  if (HIDWORD(v72) > 0x32)
  {
    uint64_t v68 = 50;
    uint64_t v67 = (WTF *)WTF::fastMalloc((WTF *)0x190);
    unsigned int v44 = vcvtps_u32_f32((float)HIDWORD(v72) / 50.0);
    if (HIDWORD(v72))
    {
      long long v45 = v71;
      uint64_t v46 = 8 * HIDWORD(v72);
      int v47 = 1;
      do
      {
        unsigned int v48 = HIDWORD(v68);
        if (HIDWORD(v68) == 50)
        {
          long long v49 = qword_1EB357E70;
          BOOL v50 = os_log_type_enabled((os_log_t)qword_1EB357E70, OS_LOG_TYPE_INFO);
          uint64_t v51 = v67;
          if (v50)
          {
            WebKit::domainsToString(&v66, (uint64_t *)v67, 0x32u);
            WTF::String::utf8();
            if (v69) {
              long long v52 = (char *)v69 + 16;
            }
            else {
              long long v52 = 0;
            }
            *(_DWORD *)long long buf = 136446978;
            *(void *)&uint8_t buf[4] = "Applying cross-site tracking restrictions";
            __int16 v74 = 1024;
            *(_DWORD *)int8x16x2_t v75 = v47;
            *(_WORD *)&v75[4] = 1024;
            *(_DWORD *)&v75[6] = v44;
            __int16 v76 = 2082;
            int8x16x2_t v77 = v52;
            _os_log_impl(&dword_1985F2000, v49, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: %{public}s to (%d of %u): %{public}s.", buf, 0x22u);
            long long v54 = v69;
            long long v69 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 1) {
                WTF::fastFree(v54, v53);
              }
              else {
                --*(_DWORD *)v54;
              }
            }
            long long v56 = v66;
            long long v66 = 0;
            if (v56)
            {
              if (*(_DWORD *)v56 == 2) {
                WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v53);
              }
              else {
                *(_DWORD *)v56 -= 2;
              }
            }
            uint64_t v55 = HIDWORD(v68);
            uint64_t v51 = v67;
          }
          else
          {
            uint64_t v55 = 50;
          }
          WTF::VectorDestructor<true,WTF::String>::destruct(v51, (WTF::StringImpl *)((char *)v51 + 8 * v55));
          unsigned int v48 = 0;
          HIDWORD(v6++*(_DWORD *)(this + 8) = 0;
          ++v47;
        }
        if (v48 == v68)
        {
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)&v67, (unint64_t)v45);
        }
        else
        {
          uint64_t v57 = v67;
          long long v58 = (_DWORD *)*v45;
          if (*v45) {
            *v58 += 2;
          }
          *((void *)v57 + v4++*(_DWORD *)(this + 8) = v58;
          HIDWORD(v6++*(_DWORD *)(this + 8) = v48 + 1;
        }
        ++v45;
        v46 -= 8;
      }
      while (v46);
    }
    else
    {
      int v47 = 1;
    }
    unsigned int v59 = HIDWORD(v68);
    if (HIDWORD(v68))
    {
      uint64_t v60 = qword_1EB357E70;
      if (os_log_type_enabled((os_log_t)qword_1EB357E70, OS_LOG_TYPE_INFO))
      {
        WebKit::domainsToString(&v66, (uint64_t *)v67, v59);
        WTF::String::utf8();
        if (v69) {
          long long v61 = (char *)v69 + 16;
        }
        else {
          long long v61 = 0;
        }
        *(_DWORD *)long long buf = 136446978;
        *(void *)&uint8_t buf[4] = "Applying cross-site tracking restrictions";
        __int16 v74 = 1024;
        *(_DWORD *)int8x16x2_t v75 = v47;
        *(_WORD *)&v75[4] = 1024;
        *(_DWORD *)&v75[6] = v44;
        __int16 v76 = 2082;
        int8x16x2_t v77 = v61;
        _os_log_impl(&dword_1985F2000, v60, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: %{public}s to (%d of %u): %{public}s.", buf, 0x22u);
        uint64_t v62 = v69;
        long long v69 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 1) {
            WTF::fastFree(v62, v43);
          }
          else {
            --*(_DWORD *)v62;
          }
        }
        long long v64 = v66;
        long long v66 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2) {
            WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v43);
          }
          else {
            *(_DWORD *)v64 -= 2;
          }
        }
      }
    }
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v67, v43);
  }
  else
  {
    char v40 = qword_1EB357E70;
    if (os_log_type_enabled((os_log_t)qword_1EB357E70, OS_LOG_TYPE_INFO))
    {
      WebKit::domainsToString(&v69, v71, v39);
      WTF::String::utf8();
      if (v67) {
        long long v41 = (char *)v67 + 16;
      }
      else {
        long long v41 = 0;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "Applying cross-site tracking restrictions";
      __int16 v74 = 2082;
      *(void *)int8x16x2_t v75 = v41;
      _os_log_impl(&dword_1985F2000, v40, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: %{public}s to: %{public}s.", buf, 0x16u);
      BOOL v42 = v67;
      uint64_t v67 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 1) {
          WTF::fastFree(v42, v7);
        }
        else {
          --*(_DWORD *)v42;
        }
      }
      long long v63 = v69;
      long long v69 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2) {
          WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v7);
        }
        else {
          *(_DWORD *)v63 -= 2;
        }
      }
    }
  }
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v7);
}

WTF::StringImpl *WebKit::domainsToString(WTF::StringImpl **a1, uint64_t *a2, unsigned int a3)
{
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  char v19 = 1;
  if (a3)
  {
    int64x2_t v5 = vdupq_n_s64(3uLL);
    uint64_t v6 = 8 * a3;
    v5.i64[0] = (uint64_t)", ";
    int8x16_t v14 = (int8x16_t)v5;
    int64x2_t v7 = vdupq_n_s64(1uLL);
    v7.i64[0] = (uint64_t)"";
    int8x16_t v13 = (int8x16_t)v7;
    do
    {
      int32x2_t v8 = vdup_n_s32(v18 == 0);
      v9.i64[0] = v8.u32[0];
      v9.i64[1] = v8.u32[1];
      int8x16_t v15 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v9, 0x3FuLL)), v13, v14);
      WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String>((WTF::StringBuilder *)&v16, (uint64_t)&v15, a2++);
      v6 -= 8;
    }
    while (v6);
    uint64_t result = v16;
    if (v16) {
      goto LABEL_6;
    }
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v16);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v16);
  uint64_t result = v16;
  if (v16) {
LABEL_6:
  }
    *(_DWORD *)result += 2;
  *a1 = result;
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v10);
      uint64_t result = v16;
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  unint64_t v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::shouldExemptFromWebsiteDataDeletion(WebKit::ResourceLoadStatisticsStore *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  if (!*a2 || !*((_DWORD *)*a2 + 1) || (MEMORY[0x19972E990]() & 1) != 0) {
    return 0;
  }
  WebKit::ResourceLoadStatisticsStore::domainsExemptFromWebsiteDataDeletion((WebKit::ResourceLoadStatisticsStore *)&v7, (uint64_t)this);
  uint64_t v4 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)&v7, a2);
  if (v7) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v7, v5);
  }
  return v4;
}

uint64_t WebKit::ResourceLoadStatisticsStore::domainsExemptFromWebsiteDataDeletion(WebKit::ResourceLoadStatisticsStore *this, uint64_t a2)
{
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)this, (uint64_t *)(a2 + 296));
  uint64_t v6 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(a2 + 304), v4, v5);
  int32x2_t v8 = (WTF::StringImpl **)v6;
  uint64_t v9 = *(void *)(a2 + 304);
  if (v9) {
    uint64_t v10 = (WTF::StringImpl **)(v9 + 8 * *(unsigned int *)(v9 - 4));
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v28 = (WTF::StringImpl **)v6;
  for (i = v7; v28 != v10; int32x2_t v8 = v28)
  {
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)this, v8, (uint64_t)v27);
    ++v28;
    WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v28, v11, v12);
  }
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)&v26, (uint64_t *)this);
  uint64_t v15 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(a2 + 312), v13, v14);
  uint64_t v17 = (WTF::StringImpl **)v15;
  uint64_t v18 = *(void *)(a2 + 312);
  if (v18) {
    char v19 = (WTF::StringImpl **)(v18 + 8 * *(unsigned int *)(v18 - 4));
  }
  else {
    char v19 = 0;
  }
  uint64_t v28 = (WTF::StringImpl **)v15;
  for (i = v16; v28 != v19; uint64_t v17 = v28)
  {
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v26, v17, (uint64_t)v27);
    ++v28;
    WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v28, v20, v21);
  }
  BOOL v22 = v26;
  uint64_t v26 = 0;
  int v23 = *(WTF::StringImpl ***)this;
  *(void *)this = v22;
  if (v23)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v23, v16);
    if (v26) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v26, v25);
    }
  }
  uint64_t result = *(void *)(a2 + 288);
  if (result && *(_DWORD *)(result + 4))
  {
    uint64_t result = MEMORY[0x19972E990]();
    if ((result & 1) == 0) {
      return (uint64_t)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)this, (WTF::StringImpl **)(a2 + 288), (uint64_t)v27);
    }
  }
  return result;
}

void WebKit::ResourceLoadStatisticsStore::deleteTable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if ((a3 & 0x80000000) != 0) {
    goto LABEL_21;
  }
  uint64_t v4 = (a3 + 11);
  if (__OFADD__(a3, 11)) {
    goto LABEL_21;
  }
  if ((a3 & 0xFF00000000) != 0)
  {
    WTF::tryFastCompactMalloc((WTF *)(v4 + 20));
    uint64_t v7 = *(void *)buf;
    if (*(void *)buf)
    {
      **(_DWORD **)long long buf = 2;
      *(_DWORD *)(v7 + 4) = v4;
      *(void *)(v7 + 20) = *(void *)"DROP TABLE ";
      *(void *)(v7 + ++*(_DWORD *)(this + 8) = v7 + 20;
      *(_DWORD *)(v7 + 16) = 4;
      *(_DWORD *)(v7 + 27) = 541412418;
      *(void *)long long buf = a2;
      *(void *)&buf[8] = a3;
      WTF::StringView::getCharacters<unsigned char>(buf, (char *)(v7 + 31));
      goto LABEL_11;
    }
LABEL_21:
    __break(0xC471u);
    return;
  }
  if (v4 > 0x7FFFFFEF) {
    goto LABEL_21;
  }
  WTF::tryFastCompactMalloc((WTF *)(2 * v4 + 20));
  uint64_t v7 = *(void *)buf;
  if (!*(void *)buf) {
    goto LABEL_21;
  }
  **(_DWORD **)long long buf = 2;
  *(_DWORD *)(v7 + 4) = v4;
  *(void *)(v7 + ++*(_DWORD *)(this + 8) = v7 + 20;
  *(_DWORD *)(v7 + 16) = 0;
  int32x2_t v8 = "DROP TABLE ";
  for (uint64_t i = 20; i != 42; i += 2)
  {
    __int16 v10 = *(unsigned __int8 *)v8++;
    *(_WORD *)(v7 + i) = v10;
  }
  *(void *)long long buf = a2;
  *(void *)&buf[8] = a3;
  WTF::StringTypeAdapter<WTF::StringView,void>::writeTo<char16_t>(buf, (char *)(v7 + 42));
LABEL_11:
  WebCore::SQLiteDatabase::prepareStatementSlow();
  if (*(_DWORD *)v7 == 2) {
    WTF::StringImpl::destroy((WTF::StringImpl *)v7, v11);
  }
  else {
    *(_DWORD *)v7 -= 2;
  }
  if (v17 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v16) != 101)
  {
    uint64_t v12 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 656);
      int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      *(_DWORD *)long long buf = 134218755;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v13;
      __int16 v19 = 1024;
      int v20 = Error;
      __int16 v21 = 2081;
      uint64_t v22 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v12, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::deleteTable: failed to step statement", buf, 0x26u);
    }
  }
  if (v17 != -1) {
    (*(&off_1EE9C7600 + v17))((int)buf, (WebCore::SQLiteStatement *)v16);
  }
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary(void)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x30);
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)uint64_t v4 = &unk_1EE9C79B8;
  *(void *)(v4 + ++*(_DWORD *)(this + 8) = v5;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  uint64_t v6 = a2[1];
  a2[1] = 0;
  *(void *)(v4 + 16) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(v4 + 24) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(v4 + 2++*(_DWORD *)(this + 8) = v6;
  *(void *)(v4 + 3objc_destroyWeak(this + 2) = 0;
  *(void *)(v4 + ++*(_DWORD *)(this - 40) = 0;
  uint64_t v7 = a2[3];
  a2[3] = 0;
  *(void *)(v4 + 3objc_destroyWeak(this + 2) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + ++*(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(v4 + ++*(_DWORD *)(this - 40) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(v4 + 44) = v7;
  *a1 = v4;
  return a1;
}

atomic_uchar ***WebKit::ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary(void)::$_0::~$_0(atomic_uchar ***a1, WTF::StringImpl *a2)
{
  WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), v3);
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }
  return a1;
}

void *WebKit::ResourceLoadStatisticsStore::interruptAllDatabases(WebKit::ResourceLoadStatisticsStore *this)
{
  if ((byte_1EB359872 & 1) == 0)
  {
    *(void *)&dword_1EB359888 = 0;
    qword_1EB359880 = 0;
    byte_1EB359872 = 1;
  }
  int8x16_t v14 = &qword_1EB359880;
  uint64_t v15 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)&qword_1EB359880);
  unint64_t v16 = v1;
  uint64_t v2 = qword_1EB359880;
  if (qword_1EB359880)
  {
    uint64_t v3 = *(unsigned int *)(qword_1EB359880 - 4);
    uint64_t v4 = qword_1EB359880 + 8 * v3;
    uint64_t v17 = v4;
    uint64_t v18 = v4;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  uint64_t v9 = &qword_1EB359880;
  uint64_t v10 = v4;
  uint64_t v11 = v4;
  uint64_t v12 = v4;
  uint64_t v13 = v2 + 8 * v3;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  uint64_t v6 = v15;
  uint64_t v7 = (void *)v10;
  while (v6 != v7)
  {
    if (*(void *)(*(void *)(*v6 + 8) + 24)) {
      WebCore::SQLiteDatabase::interrupt();
    }
    int32x2_t v8 = v6 + 1;
    uint64_t v15 = v6 + 1;
    if (v6 + 1 != v16)
    {
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        if (++v8 == v16)
        {
          int32x2_t v8 = v16;
          break;
        }
      }
      uint64_t v15 = v8;
    }
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
    uint64_t v6 = v15;
    ++*((_DWORD *)v14 + 2);
  }
  return result;
}

void WebKit::ResourceLoadStatisticsStore::destroyStatements(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t v2 = (WebCore::SQLiteStatement *)*((void *)this + 40);
  *((void *)this + ++*(_DWORD *)(this - 40) = 0;
  if (v2) {
    WebCore::SQLiteStatement::operator delete(v2, 0x18uLL);
  }
  uint64_t v3 = (WebCore::SQLiteStatement *)*((void *)this + 41);
  *((void *)this + 4objc_destroyWeak(this + 1) = 0;
  if (v3) {
    WebCore::SQLiteStatement::operator delete(v3, 0x18uLL);
  }
  uint64_t v4 = (WebCore::SQLiteStatement *)*((void *)this + 42);
  *((void *)this + 4objc_destroyWeak(this + 2) = 0;
  if (v4) {
    WebCore::SQLiteStatement::operator delete(v4, 0x18uLL);
  }
  uint64_t v5 = (WebCore::SQLiteStatement *)*((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v5) {
    WebCore::SQLiteStatement::operator delete(v5, 0x18uLL);
  }
  uint64_t v6 = (WebCore::SQLiteStatement *)*((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v6) {
    WebCore::SQLiteStatement::operator delete(v6, 0x18uLL);
  }
  uint64_t v7 = (WebCore::SQLiteStatement *)*((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v7) {
    WebCore::SQLiteStatement::operator delete(v7, 0x18uLL);
  }
  int32x2_t v8 = (WebCore::SQLiteStatement *)*((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v8) {
    WebCore::SQLiteStatement::operator delete(v8, 0x18uLL);
  }
  uint64_t v9 = (WebCore::SQLiteStatement *)*((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v9) {
    WebCore::SQLiteStatement::operator delete(v9, 0x18uLL);
  }
  uint64_t v10 = (WebCore::SQLiteStatement *)*((void *)this + 48);
  *((void *)this + 4++*(_DWORD *)(this + 8) = 0;
  if (v10) {
    WebCore::SQLiteStatement::operator delete(v10, 0x18uLL);
  }
  uint64_t v11 = (WebCore::SQLiteStatement *)*((void *)this + 51);
  *((void *)this + 5objc_destroyWeak(this + 1) = 0;
  if (v11) {
    WebCore::SQLiteStatement::operator delete(v11, 0x18uLL);
  }
  uint64_t v12 = (WebCore::SQLiteStatement *)*((void *)this + 52);
  *((void *)this + 5objc_destroyWeak(this + 2) = 0;
  if (v12) {
    WebCore::SQLiteStatement::operator delete(v12, 0x18uLL);
  }
  uint64_t v13 = (WebCore::SQLiteStatement *)*((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v13) {
    WebCore::SQLiteStatement::operator delete(v13, 0x18uLL);
  }
  int8x16_t v14 = (WebCore::SQLiteStatement *)*((void *)this + 58);
  *((void *)this + 5++*(_DWORD *)(this + 8) = 0;
  if (v14) {
    WebCore::SQLiteStatement::operator delete(v14, 0x18uLL);
  }
  uint64_t v15 = (WebCore::SQLiteStatement *)*((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v15) {
    WebCore::SQLiteStatement::operator delete(v15, 0x18uLL);
  }
  unint64_t v16 = (WebCore::SQLiteStatement *)*((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v16) {
    WebCore::SQLiteStatement::operator delete(v16, 0x18uLL);
  }
  uint64_t v17 = (WebCore::SQLiteStatement *)*((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v17) {
    WebCore::SQLiteStatement::operator delete(v17, 0x18uLL);
  }
  uint64_t v18 = (WebCore::SQLiteStatement *)*((void *)this + 57);
  *((void *)this + 57) = 0;
  if (v18) {
    WebCore::SQLiteStatement::operator delete(v18, 0x18uLL);
  }
  __int16 v19 = (WebCore::SQLiteStatement *)*((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v19) {
    WebCore::SQLiteStatement::operator delete(v19, 0x18uLL);
  }
  int v20 = (WebCore::SQLiteStatement *)*((void *)this + 61);
  *((void *)this + 6objc_destroyWeak(this + 1) = 0;
  if (v20) {
    WebCore::SQLiteStatement::operator delete(v20, 0x18uLL);
  }
  __int16 v21 = (WebCore::SQLiteStatement *)*((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v21) {
    WebCore::SQLiteStatement::operator delete(v21, 0x18uLL);
  }
  uint64_t v22 = (WebCore::SQLiteStatement *)*((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v22) {
    WebCore::SQLiteStatement::operator delete(v22, 0x18uLL);
  }
  uint64_t v23 = (WebCore::SQLiteStatement *)*((void *)this + 62);
  *((void *)this + 6objc_destroyWeak(this + 2) = 0;
  if (v23) {
    WebCore::SQLiteStatement::operator delete(v23, 0x18uLL);
  }
  int v24 = (WebCore::SQLiteStatement *)*((void *)this + 63);
  *((void *)this + 63) = 0;
  if (v24) {
    WebCore::SQLiteStatement::operator delete(v24, 0x18uLL);
  }
  int v25 = (WebCore::SQLiteStatement *)*((void *)this + 64);
  *((void *)this + 64) = 0;
  if (v25) {
    WebCore::SQLiteStatement::operator delete(v25, 0x18uLL);
  }
  uint64_t v26 = (WebCore::SQLiteStatement *)*((void *)this + 65);
  *((void *)this + 65) = 0;
  if (v26) {
    WebCore::SQLiteStatement::operator delete(v26, 0x18uLL);
  }
  uint64_t v27 = (WebCore::SQLiteStatement *)*((void *)this + 66);
  *((void *)this + 66) = 0;
  if (v27) {
    WebCore::SQLiteStatement::operator delete(v27, 0x18uLL);
  }
  uint64_t v28 = (WebCore::SQLiteStatement *)*((void *)this + 67);
  *((void *)this + 67) = 0;
  if (v28) {
    WebCore::SQLiteStatement::operator delete(v28, 0x18uLL);
  }
  uint64_t v29 = (WebCore::SQLiteStatement *)*((void *)this + 68);
  *((void *)this + 6++*(_DWORD *)(this + 8) = 0;
  if (v29) {
    WebCore::SQLiteStatement::operator delete(v29, 0x18uLL);
  }
  __int16 v30 = (WebCore::SQLiteStatement *)*((void *)this + 69);
  *((void *)this + 69) = 0;
  if (v30) {
    WebCore::SQLiteStatement::operator delete(v30, 0x18uLL);
  }
  uint64_t v31 = (WebCore::SQLiteStatement *)*((void *)this + 70);
  *((void *)this + 70) = 0;
  if (v31) {
    WebCore::SQLiteStatement::operator delete(v31, 0x18uLL);
  }
  __int16 v32 = (WebCore::SQLiteStatement *)*((void *)this + 71);
  *((void *)this + 7objc_destroyWeak(this + 1) = 0;
  if (v32) {
    WebCore::SQLiteStatement::operator delete(v32, 0x18uLL);
  }
  int v33 = (WebCore::SQLiteStatement *)*((void *)this + 72);
  *((void *)this + 7objc_destroyWeak(this + 2) = 0;
  if (v33) {
    WebCore::SQLiteStatement::operator delete(v33, 0x18uLL);
  }
  __int16 v34 = (WebCore::SQLiteStatement *)*((void *)this + 73);
  *((void *)this + 73) = 0;
  if (v34) {
    WebCore::SQLiteStatement::operator delete(v34, 0x18uLL);
  }
  uint64_t v35 = (WebCore::SQLiteStatement *)*((void *)this + 74);
  *((void *)this + 74) = 0;
  if (v35) {
    WebCore::SQLiteStatement::operator delete(v35, 0x18uLL);
  }
  uint64_t v36 = (WebCore::SQLiteStatement *)*((void *)this + 75);
  *((void *)this + 75) = 0;
  if (v36) {
    WebCore::SQLiteStatement::operator delete(v36, 0x18uLL);
  }
  uint64_t v37 = (WebCore::SQLiteStatement *)*((void *)this + 76);
  *((void *)this + 76) = 0;
  if (v37) {
    WebCore::SQLiteStatement::operator delete(v37, 0x18uLL);
  }
  long long v38 = (WebCore::SQLiteStatement *)*((void *)this + 77);
  *((void *)this + 77) = 0;
  if (v38) {
    WebCore::SQLiteStatement::operator delete(v38, 0x18uLL);
  }
  unsigned int v39 = (WebCore::SQLiteStatement *)*((void *)this + 78);
  *((void *)this + 7++*(_DWORD *)(this + 8) = 0;
  if (v39) {
    WebCore::SQLiteStatement::operator delete(v39, 0x18uLL);
  }
  char v40 = (WebCore::SQLiteStatement *)*((void *)this + 60);
  *((void *)this + 60) = 0;
  if (v40)
  {
    WebCore::SQLiteStatement::operator delete(v40, 0x18uLL);
  }
}

uint64_t WebKit::ResourceLoadStatisticsStore::insertObservedDomain(WebCore::SQLiteStatement **this, const WebCore::ResourceLoadStatistics *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID(this, a2) >> 32))
  {
    WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 41, (uint64_t)"insertObservedDomain", (WebCore::SQLiteStatementAutoResetScope *)&v17);
    if (!v17
      || WebCore::SQLiteStatement::bindText()
      || WebCore::SQLiteStatement::bindDouble(v17, *((double *)a2 + 1))
      || WebCore::SQLiteStatement::bindInt(v17)
      || WebCore::SQLiteStatement::bindDouble(v17, *((double *)a2 + 3))
      || WebCore::SQLiteStatement::bindInt(v17)
      || WebCore::SQLiteStatement::bindInt(v17)
      || WebCore::SQLiteStatement::bindInt(v17)
      || WebCore::SQLiteStatement::bindInt(v17)
      || WebCore::SQLiteStatement::bindInt(v17)
      || WebCore::SQLiteStatement::bindInt(v17))
    {
      goto LABEL_20;
    }
    uint64_t v4 = v17;
    if (!*((unsigned char *)a2 + 80)) {
      WebCore::SQLiteStatement::bindDouble(v17, 0.0);
    }
    if (WebCore::SQLiteStatement::bindInt(v4))
    {
LABEL_20:
      int32x2_t v8 = qword_1EB358460;
      if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      uint64_t v10 = this[82];
      int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
      *(_DWORD *)long long buf = 134218755;
      __int16 v19 = this;
      __int16 v20 = 2048;
      __int16 v21 = v10;
      __int16 v22 = 1024;
      int v23 = Error;
      __int16 v24 = 2081;
      uint64_t v25 = ErrorMsg;
      uint64_t v13 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::insertObservedDomain: fa"
            "iled to bind parameters";
    }
    else
    {
      if (WebCore::SQLiteStatement::step(v17) == 101)
      {
        uint64_t v6 = 1;
        goto LABEL_22;
      }
      int32x2_t v8 = qword_1EB358460;
      if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
      {
LABEL_21:
        uint64_t v6 = 0;
LABEL_22:
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v17);
        return v6;
      }
      int8x16_t v14 = this[82];
      int v15 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
      uint64_t v16 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
      *(_DWORD *)long long buf = 134218755;
      __int16 v19 = this;
      __int16 v20 = 2048;
      __int16 v21 = v14;
      __int16 v22 = 1024;
      int v23 = v15;
      __int16 v24 = 2081;
      uint64_t v25 = v16;
      uint64_t v13 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::insertObservedDomain: fa"
            "iled to step statement";
    }
    _os_log_error_impl(&dword_1985F2000, v8, OS_LOG_TYPE_ERROR, v13, buf, 0x26u);
    goto LABEL_21;
  }
  uint64_t v5 = qword_1EB358460;
  if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = this[82];
    *(_DWORD *)long long buf = 134218240;
    __int16 v19 = this;
    __int16 v20 = 2048;
    __int16 v21 = v7;
    _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] - ResourceLoadStatisticsStore::insertObservedDomain: failed to find domain", buf, 0x16u);
  }
  return 0;
}

uint64_t WebKit::ResourceLoadStatisticsStore::domainID(WebCore::SQLiteStatement **this, const WebCore::RegistrableDomain *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 42, (uint64_t)"domainID", (WebCore::SQLiteStatementAutoResetScope *)&v16);
  if (!v16 || WebCore::SQLiteStatement::bindText())
  {
    uint64_t v3 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
      goto LABEL_4;
    }
    uint64_t v13 = this[82];
    int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
    *(_DWORD *)long long buf = 134218755;
    uint64_t v18 = this;
    __int16 v19 = 2048;
    __int16 v20 = v13;
    __int16 v21 = 1024;
    int v22 = Error;
    __int16 v23 = 2081;
    uint64_t v24 = ErrorMsg;
    uint64_t v12 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::domainID: failed to bind parameter";
LABEL_11:
    _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, v12, buf, 0x26u);
    goto LABEL_4;
  }
  if (WebCore::SQLiteStatement::step(v16) == 100)
  {
    int v8 = WebCore::SQLiteStatement::columnInt(v16);
    unsigned int v6 = v8 & 0xFFFFFF00;
    int v5 = v8;
    uint64_t v4 = 0x100000000;
    goto LABEL_5;
  }
  uint64_t v3 = qword_1EB358460;
  if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = this[82];
    int v10 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
    uint64_t v11 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
    *(_DWORD *)long long buf = 134218755;
    uint64_t v18 = this;
    __int16 v19 = 2048;
    __int16 v20 = v9;
    __int16 v21 = 1024;
    int v22 = v10;
    __int16 v23 = 2081;
    uint64_t v24 = v11;
    uint64_t v12 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::domainID: failed to step statement";
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v4 = 0;
  int v5 = 0;
  unsigned int v6 = 0;
LABEL_5:
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v16);
  return v4 | v6 | v5;
}

BOOL WebKit::ResourceLoadStatisticsStore::relationshipExists(uint64_t a1, WebCore::SQLiteStatement **a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if ((a3 & 0xFF00000000) == 0) {
    return 0;
  }
  if (*a2
    && !WebCore::SQLiteStatement::bindInt(*a2)
    && !WebCore::SQLiteStatement::bindText()
    && WebCore::SQLiteStatement::step(*a2) == 100)
  {
    return WebCore::SQLiteStatement::columnInt(*a2) != 0;
  }
  unsigned int v6 = qword_1EB358460;
  BOOL result = os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v7 = *(void *)(a1 + 656);
    int v8 = 134218755;
    uint64_t v9 = a1;
    __int16 v10 = 2048;
    uint64_t v11 = v7;
    __int16 v12 = 1024;
    int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
    __int16 v14 = 2081;
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
    _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::relationshipExists: failed to step statement", (uint8_t *)&v8, 0x26u);
    return 0;
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(uint64_t a1, const WebCore::RegistrableDomain *a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  WebKit::DatabaseUtilities::scopedStatement(a1, (WebCore::SQLiteStatement **)(a1 + 336), (uint64_t)"ensureResourceStatisticsForRegistrableDomain", (WebCore::SQLiteStatementAutoResetScope *)v21);
  if (!*(void *)v21 || WebCore::SQLiteStatement::bindText())
  {
    unsigned int v6 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 656);
      int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      *(_DWORD *)long long buf = 134219011;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v16;
      __int16 v27 = 1024;
      *(_DWORD *)uint64_t v28 = Error;
      *(_WORD *)&v28[4] = 2081;
      *(void *)&void v28[6] = ErrorMsg;
      __int16 v29 = 2082;
      *(void *)&long long v30 = a3;
      _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain: reason %{public}s, failed to bind parameter", buf, 0x30u);
    }
    unsigned __int8 v7 = 0;
    unsigned int v8 = 0;
    goto LABEL_6;
  }
  if (WebCore::SQLiteStatement::step(*(WebCore::SQLiteStatement **)v21) == 100)
  {
    int v11 = WebCore::SQLiteStatement::columnInt(*(WebCore::SQLiteStatement **)v21);
    unsigned __int8 v7 = v11;
    unsigned int v8 = v11 & 0xFFFFFF00;
LABEL_6:
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)v21);
    unsigned int v9 = 0;
    return v9 | ((unint64_t)(v8 & 0xFFFFFF00 | v7) << 32);
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)v21);
  __int16 v12 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v12 += 2;
  }
  *(void *)long long buf = v12;
  *(void *)&buf[8] = 0;
  buf[16] = 0;
  *(void *)uint64_t v28 = 0xBFF0000000000000;
  v28[8] = 0;
  long long v30 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v32 = 0u;
  memset(v33, 0, sizeof(v33));
  long long v34 = 0u;
  memset(v35, 0, sizeof(v35));
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  if ((WebKit::ResourceLoadStatisticsStore::insertObservedDomain((WebCore::SQLiteStatement **)a1, (const WebCore::ResourceLoadStatistics *)buf) & 1) == 0)
  {
    int v15 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)(a1 + 656);
      *(_DWORD *)__int16 v21 = 134218498;
      *(void *)&v21[4] = a1;
      __int16 v22 = 2048;
      uint64_t v23 = v19;
      __int16 v24 = 2082;
      uint64_t v25 = a3;
      _os_log_error_impl(&dword_1985F2000, v15, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] - ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain: reason %{public}s, failed to insert observed domain", v21, 0x20u);
    }
    unsigned int v9 = 0;
    unsigned __int8 v7 = 0;
    unsigned int v8 = 0;
    goto LABEL_18;
  }
  unint64_t v13 = WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)a1, a2);
  if (HIDWORD(v13))
  {
    unsigned __int8 v7 = v13;
    unsigned int v8 = v13 & 0xFFFFFF00;
    unsigned int v9 = 1;
LABEL_18:
    WebCore::ResourceLoadStatistics::~ResourceLoadStatistics((WebCore::ResourceLoadStatistics *)buf, v14);
    return v9 | ((unint64_t)(v8 & 0xFFFFFF00 | v7) << 32);
  }
  uint64_t v20 = std::__throw_bad_optional_access[abi:sn180100]();
  return WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(v20);
}

void WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  if (*a2) {
    *(_DWORD *)v5 += 2;
  }
  memset(buf, 0, 20);
  buf[20] = 1;
  uint64_t v6 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a3, (uint64_t)a2, (const WTF::StringImpl *)a3);
  unsigned __int8 v7 = (const WebCore::RegistrableDomain *)v6;
  v72[0] = v6;
  v72[1] = v8;
  if (*a3) {
    uint64_t v9 = *a3 + 8 * *(unsigned int *)(*a3 - 4);
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 != v6)
  {
    do
    {
      WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(a1, v7, (uint64_t)"ensureAndMakeDomainList");
      if ((_BYTE)v10)
      {
        int v12 = *(_DWORD *)&buf[16];
        BOOL v13 = *(_DWORD *)&buf[16] != 0;
        uint64_t v14 = *(void *)v7;
        if (*(_DWORD *)&buf[16]) {
          int v15 = ", ";
        }
        else {
          int v15 = "";
        }
        if (v14)
        {
          unsigned int v16 = *(_DWORD *)(v14 + 4);
          if (v16 >= 0xFFFFFFFE) {
            int v17 = -1;
          }
          else {
            int v17 = v16 + 2;
          }
        }
        else
        {
          int v17 = 2;
        }
        size_t v18 = 2 * (*(_DWORD *)&buf[16] != 0);
        BOOL v19 = __CFADD__(v17, 2 * v13);
        int v20 = v17 + 2 * v13;
        if (v19) {
          int v20 = -1;
        }
        BOOL v19 = __CFADD__(v20, *(_DWORD *)&buf[16]);
        unsigned int v21 = v20 + *(_DWORD *)&buf[16];
        if (v19) {
          uint64_t v22 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v22 = v21;
        }
        uint64_t v23 = *(void *)&buf[8];
        if ((*(void *)&buf[8] || (uint64_t v23 = *(void *)buf) != 0) && (*(unsigned char *)(v23 + 16) & 4) == 0
          || v14 && (*(unsigned char *)(v14 + 16) & 4) == 0)
        {
          uint64_t v24 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)buf);
          if (v24)
          {
            if (v12)
            {
              uint64_t v25 = 2 * v18;
              uint64_t v26 = (_WORD *)v24;
              __int16 v27 = ", ";
              do
              {
                __int16 v28 = *(unsigned __int8 *)v27++;
                *v26++ = v28;
                v25 -= 2;
              }
              while (v25);
            }
            __int16 v29 = (_WORD *)(v24 + 2 * v18);
            _WORD *v29 = 34;
            long long v30 = (char *)(v29 + 1);
            uint64_t v74 = v14;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v74, v30);
            uint64_t v31 = v74;
            if (v74) {
              uint64_t v31 = *(unsigned int *)(v74 + 4);
            }
            *(_WORD *)&v30[2 * v31] = 34;
          }
        }
        else
        {
          long long v32 = (char *)MEMORY[0x19972DE60](buf, v22);
          if (v32)
          {
            int v33 = v32;
            if (v18) {
              memcpy(v32, v15, v18);
            }
            long long v34 = &v33[v18];
            *long long v34 = 34;
            uint64_t v35 = v34 + 1;
            uint64_t v74 = v14;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v74, v35);
            uint64_t v36 = v74;
            if (v74) {
              uint64_t v36 = *(unsigned int *)(v74 + 4);
            }
            v35[v36] = 34;
          }
        }
      }
      v72[0] += 8;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v72, v10, v11);
      unsigned __int8 v7 = (const WebCore::RegistrableDomain *)v72[0];
    }
    while (v72[0] != v9);
    uint64_t v38 = *(void *)buf;
    if (*(void *)buf) {
      goto LABEL_44;
    }
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)buf);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)buf);
  uint64_t v38 = *(void *)buf;
  if (*(void *)buf) {
LABEL_44:
  }
    *(_DWORD *)v38 += 2;
  unsigned int v39 = *(WTF::StringImpl **)&buf[8];
  *(void *)&buf[8] = 0;
  char v40 = (WTF::StringImpl *)v38;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::destroy(v39, v37);
      char v40 = *(WTF::StringImpl **)buf;
    }
    else
    {
      *(_DWORD *)v39 -= 2;
      char v40 = (WTF::StringImpl *)v38;
    }
  }
  *(void *)long long buf = 0;
  if (!v40)
  {
LABEL_52:
    if (v5) {
      goto LABEL_53;
    }
    goto LABEL_73;
  }
  if (*(_DWORD *)v40 != 2)
  {
    *(_DWORD *)v40 -= 2;
    goto LABEL_52;
  }
  WTF::StringImpl::destroy(v40, v37);
  if (v5)
  {
LABEL_53:
    int v41 = *(_DWORD *)(v5 + 4);
    if (v38) {
      goto LABEL_54;
    }
LABEL_74:
    int v42 = 0;
    goto LABEL_55;
  }
LABEL_73:
  int v41 = 0;
  if (!v38) {
    goto LABEL_74;
  }
LABEL_54:
  int v42 = *(_DWORD *)(v38 + 4);
  if (v42 < 0) {
    goto LABEL_114;
  }
LABEL_55:
  BOOL v43 = __OFADD__(v42, 3);
  int v44 = v42 + 3;
  char v45 = v43;
  if (v41 < 0) {
    goto LABEL_114;
  }
  if (v45) {
    goto LABEL_114;
  }
  uint64_t v46 = (v41 + v44);
  if (__OFADD__(v41, v44)) {
    goto LABEL_114;
  }
  if (v5 && (*(unsigned char *)(v5 + 16) & 4) == 0 || v38 && (*(unsigned char *)(v38 + 16) & 4) == 0)
  {
    if (v46 <= 0x7FFFFFEF)
    {
      WTF::tryFastCompactMalloc((WTF *)(2 * (v41 + v44) + 20));
      uint64_t v47 = *(void *)buf;
      if (*(void *)buf)
      {
        **(_DWORD **)long long buf = 2;
        *(_DWORD *)(v47 + 4) = v46;
        *(void *)(v47 + ++*(_DWORD *)(this + 8) = v47 + 20;
        *(_DWORD *)(v47 + 16) = 0;
        v72[0] = v5;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(v72, (char *)(v47 + 20));
        uint64_t v48 = v72[0];
        if (v72[0]) {
          uint64_t v48 = *(unsigned int *)(v72[0] + 4);
        }
        long long v49 = (char *)(v47 + 20 + 2 * v48);
        *(void *)long long buf = v38;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)buf, v49);
        uint64_t v50 = *(void *)buf;
        if (*(void *)buf) {
          uint64_t v50 = *(unsigned int *)(*(void *)buf + 4);
        }
        uint64_t v51 = &v49[2 * v50];
        *(_DWORD *)uint64_t v51 = 2687008;
        *((_WORD *)v51 + objc_destroyWeak(this + 2) = 59;
        goto LABEL_82;
      }
    }
LABEL_114:
    __break(0xC471u);
    return;
  }
  if ((v46 & 0x80000000) != 0) {
    goto LABEL_114;
  }
  WTF::tryFastCompactMalloc((WTF *)(v46 + 20));
  uint64_t v47 = *(void *)buf;
  if (!*(void *)buf) {
    goto LABEL_114;
  }
  **(_DWORD **)long long buf = 2;
  *(_DWORD *)(v47 + 4) = v46;
  *(void *)(v47 + ++*(_DWORD *)(this + 8) = v47 + 20;
  *(_DWORD *)(v47 + 16) = 4;
  v72[0] = v5;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(v72, (char *)(v47 + 20));
  uint64_t v52 = v72[0];
  if (v72[0]) {
    uint64_t v52 = *(unsigned int *)(v72[0] + 4);
  }
  long long v53 = (char *)(v47 + 20 + v52);
  *(void *)long long buf = v38;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)buf, v53);
  uint64_t v54 = *(void *)buf;
  if (*(void *)buf) {
    uint64_t v54 = *(unsigned int *)(*(void *)buf + 4);
  }
  uint64_t v55 = &v53[v54];
  v55[2] = 59;
  *(_WORD *)uint64_t v55 = 10528;
LABEL_82:
  WebCore::SQLiteDatabase::prepareStatementSlow();
  if (*(_DWORD *)v47 == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v47, v56);
    if (!v38) {
      goto LABEL_88;
    }
  }
  else
  {
    *(_DWORD *)v47 -= 2;
    if (!v38) {
      goto LABEL_88;
    }
  }
  if (*(_DWORD *)v38 == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v38, v56);
    if (!v5) {
      goto LABEL_94;
    }
LABEL_91:
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)v5, v56);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
    goto LABEL_94;
  }
  *(_DWORD *)v38 -= 2;
LABEL_88:
  if (v5) {
    goto LABEL_91;
  }
LABEL_94:
  if (v73 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v72))
  {
    uint64_t v57 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
      goto LABEL_97;
    }
    uint64_t v68 = *(void *)(a1 + 656);
    int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
    *(_DWORD *)long long buf = 134218755;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v68;
    __int16 v76 = 1024;
    int v77 = Error;
    __int16 v78 = 2081;
    uint64_t v79 = ErrorMsg;
    long long v64 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::insertDomainRelationshipLi"
          "st: failed to bind first parameter";
    goto LABEL_111;
  }
  if (!*a2) {
    goto LABEL_106;
  }
  long long v58 = (WTF::WallTime *)WTF::StringImpl::find();
  if (v58 == (WTF::WallTime *)-1) {
    goto LABEL_106;
  }
  if (v73) {
    goto LABEL_113;
  }
  double v59 = *(double *)(a1 + 648);
  WTF::WallTime::now(v58);
  if (!WebCore::SQLiteStatement::bindDouble((WebCore::SQLiteStatement *)v72, v59 + v60))
  {
LABEL_106:
    if (!v73)
    {
      if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v72) == 101) {
        goto LABEL_97;
      }
      uint64_t v57 = qword_1EB358460;
      if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
        goto LABEL_97;
      }
      uint64_t v65 = *(void *)(a1 + 656);
      int v66 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
      uint64_t v67 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      *(_DWORD *)long long buf = 134218755;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v65;
      __int16 v76 = 1024;
      int v77 = v66;
      __int16 v78 = 2081;
      uint64_t v79 = v67;
      long long v64 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::insertDomainRelationship"
            "List: failed to step statement";
      goto LABEL_111;
    }
LABEL_113:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  uint64_t v57 = qword_1EB358460;
  if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
    goto LABEL_97;
  }
  uint64_t v61 = *(void *)(a1 + 656);
  int v62 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
  uint64_t v63 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
  *(_DWORD *)long long buf = 134218755;
  *(void *)&uint8_t buf[4] = a1;
  *(_WORD *)&unsigned char buf[12] = 2048;
  *(void *)&buf[14] = v61;
  __int16 v76 = 1024;
  int v77 = v62;
  __int16 v78 = 2081;
  uint64_t v79 = v63;
  long long v64 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::insertDomainRelationshipList"
        ": failed to bind second parameter";
LABEL_111:
  _os_log_error_impl(&dword_1985F2000, v57, OS_LOG_TYPE_ERROR, v64, buf, 0x26u);
LABEL_97:
  if (v73 != -1) {
    (*(&off_1EE9C7600 + v73))((int)buf, (WebCore::SQLiteStatement *)v72);
  }
}

unsigned char *WebKit::ResourceLoadStatisticsStore::insertDomainRelationships(WebKit::ResourceLoadStatisticsStore *this, const WebCore::ResourceLoadStatistics *a2)
{
  WebKit::DatabaseUtilities::beginTransactionIfNecessary(this, (uint64_t)v26);
  if ((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)this, a2) >> 32)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v4 = (WTF::StringImpl *)v27;
    uint64_t v25 = v27;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 5);
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v5);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v6 = (WTF::StringImpl *)v27;
    uint64_t v25 = v27;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 6);
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v7);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v8 = (WTF::StringImpl *)v27;
    uint64_t v25 = v27;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 7);
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v9);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v10 = (WTF::StringImpl *)v27;
    uint64_t v25 = v27;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 8);
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v11);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v12 = (WTF::StringImpl *)v27;
    uint64_t v25 = v27;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 12);
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v13);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v14 = (WTF::StringImpl *)v27;
    uint64_t v25 = v27;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 13);
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v15);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unsigned int v16 = (WTF::StringImpl *)v27;
    uint64_t v25 = v27;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 14);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v17);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    size_t v18 = (WTF::StringImpl *)v27;
    uint64_t v25 = v27;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 15);
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v19);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v20 = (WTF::StringImpl *)v27;
    uint64_t v25 = v27;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 9);
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v21);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v22 = (WTF::StringImpl *)v27;
    uint64_t v25 = v27;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 11);
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v23);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  return WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v26);
}

void WebKit::ResourceLoadStatisticsStore::updateLastSeen(uint64_t a1, double a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  WebKit::DatabaseUtilities::scopedStatement(a1, (WebCore::SQLiteStatement **)(a1 + 392), (uint64_t)"updateLastSeen", (WebCore::SQLiteStatementAutoResetScope *)&v8);
  if (!v8
    || WebCore::SQLiteStatement::bindDouble(v8, a2)
    || WebCore::SQLiteStatement::bindText()
    || WebCore::SQLiteStatement::step(v8) != 101)
  {
    uint64_t v4 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 656);
      int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      *(_DWORD *)long long buf = 134218755;
      uint64_t v10 = a1;
      __int16 v11 = 2048;
      uint64_t v12 = v5;
      __int16 v13 = 1024;
      int v14 = Error;
      __int16 v15 = 2081;
      uint64_t v16 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::updateLastSeen: failed to step statement", buf, 0x26u);
    }
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v8);
}

void WebKit::ResourceLoadStatisticsStore::setUserInteraction(uint64_t a1, double a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  WebKit::DatabaseUtilities::scopedStatement(a1, (WebCore::SQLiteStatement **)(a1 + 384), (uint64_t)"setUserInteraction", (WebCore::SQLiteStatementAutoResetScope *)&v8);
  if (!v8
    || WebCore::SQLiteStatement::bindInt(v8)
    || WebCore::SQLiteStatement::bindDouble(v8, a2)
    || WebCore::SQLiteStatement::bindText()
    || WebCore::SQLiteStatement::step(v8) != 101)
  {
    uint64_t v4 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 656);
      int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      *(_DWORD *)long long buf = 134218755;
      uint64_t v10 = a1;
      __int16 v11 = 2048;
      uint64_t v12 = v5;
      __int16 v13 = 1024;
      int v14 = Error;
      __int16 v15 = 2081;
      uint64_t v16 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::setUserInteraction: failed to step statement", buf, 0x26u);
    }
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v8);
}

unsigned char *WebKit::ResourceLoadStatisticsStore::setGrandfathered(WebCore::SQLiteStatement **this, const WebCore::RegistrableDomain *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)this, (uint64_t)v11);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)this, a2, (uint64_t)"setGrandfathered");
  if (v4)
  {
    WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 57, (uint64_t)"setGrandfathered", (WebCore::SQLiteStatementAutoResetScope *)&v10);
    if (!v10
      || WebCore::SQLiteStatement::bindInt(v10)
      || WebCore::SQLiteStatement::bindText()
      || WebCore::SQLiteStatement::step(v10) != 101)
    {
      uint64_t v5 = qword_1EB358460;
      if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
      {
        unsigned __int8 v7 = this[82];
        int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
        uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
        *(_DWORD *)long long buf = 134218755;
        __int16 v13 = this;
        __int16 v14 = 2048;
        __int16 v15 = v7;
        __int16 v16 = 1024;
        int v17 = Error;
        __int16 v18 = 2081;
        uint64_t v19 = ErrorMsg;
        _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::setGrandfathered: failed to step statement", buf, 0x26u);
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v10);
  }
  return WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v11);
}

uint64_t WebKit::ResourceLoadStatisticsStore::setPrevalentResource(WebKit::ResourceLoadStatisticsStore *this, const WebCore::RegistrableDomain *a2)
{
  if (*((unsigned char *)this + 225)
    || *((unsigned char *)this + 715)
    || (uint64_t result = MEMORY[0x19972E990](*(void *)a2, "localhost", 9), (result & 1) == 0))
  {
    WebKit::DatabaseUtilities::beginTransactionIfNecessary(this, (uint64_t)v6);
    WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)this, a2, (uint64_t)"setPrevalentResource");
    if (v5) {
      WebKit::ResourceLoadStatisticsStore::setPrevalentResource((WebCore::SQLiteStatement **)this, a2, 2);
    }
    return (uint64_t)WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v6);
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::setVeryPrevalentResource(WebKit::ResourceLoadStatisticsStore *this, const WebCore::RegistrableDomain *a2)
{
  if (*((unsigned char *)this + 225)
    || *((unsigned char *)this + 715)
    || (uint64_t result = MEMORY[0x19972E990](*(void *)a2, "localhost", 9), (result & 1) == 0))
  {
    WebKit::DatabaseUtilities::beginTransactionIfNecessary(this, (uint64_t)v6);
    WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)this, a2, (uint64_t)"setVeryPrevalentResource");
    if (v5) {
      WebKit::ResourceLoadStatisticsStore::setPrevalentResource((WebCore::SQLiteStatement **)this, a2, 4);
    }
    return (uint64_t)WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v6);
  }
  return result;
}

unsigned char *WebKit::ResourceLoadStatisticsStore::setIsScheduledForAllScriptWrittenStorageRemoval(uint64_t a1, const WebCore::RegistrableDomain *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)a1, (uint64_t)v11);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(a1, a2, (uint64_t)"setIsScheduledForAllScriptWrittenStorageRemoval");
  if (v4)
  {
    WebKit::DatabaseUtilities::scopedStatement(a1, (WebCore::SQLiteStatement **)(a1 + 472), (uint64_t)"setIsScheduledForAllScriptWrittenStorageRemoval", (WebCore::SQLiteStatementAutoResetScope *)&v10);
    if (!v10
      || WebCore::SQLiteStatement::bindInt(v10)
      || WebCore::SQLiteStatement::bindText()
      || WebCore::SQLiteStatement::step(v10) != 101)
    {
      char v5 = qword_1EB358460;
      if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = *(void *)(a1 + 656);
        int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
        uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
        *(_DWORD *)long long buf = 134218755;
        uint64_t v13 = a1;
        __int16 v14 = 2048;
        uint64_t v15 = v7;
        __int16 v16 = 1024;
        int v17 = Error;
        __int16 v18 = 2081;
        uint64_t v19 = ErrorMsg;
        _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::setIsScheduledForAllScriptWrittenStorageRemoval: failed to step statement", buf, 0x26u);
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v10);
  }
  return WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v11);
}

unsigned char *WebKit::ResourceLoadStatisticsStore::mergeStatistic(WebCore::SQLiteStatement **this, const WebCore::ResourceLoadStatistics *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)this, (uint64_t)v29);
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 65, (uint64_t)"mergeStatistic", (WebCore::SQLiteStatementAutoResetScope *)&v28);
  if (v28
    && !WebCore::SQLiteStatement::bindText()
    && WebCore::SQLiteStatement::step(v28) == 100)
  {
    char v4 = v28;
    WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)this, (uint64_t)v31);
    WebCore::SQLiteStatement::columnText(v4);
    WebCore::SQLiteStatement::columnDouble(v4);
    double v6 = v5;
    WebCore::SQLiteStatement::columnDouble(v4);
    double v8 = v7;
    int v9 = WebCore::SQLiteStatement::columnInt(v4);
    int v10 = WebCore::SQLiteStatement::columnInt(v4);
    int v11 = WebCore::SQLiteStatement::columnInt(v4);
    unsigned int v12 = WebCore::SQLiteStatement::columnInt(v4);
    int v14 = WebCore::SQLiteStatement::columnInt(v4);
    double v15 = *((double *)a2 + 1);
    if (v6 < v15) {
      WebKit::ResourceLoadStatisticsStore::updateLastSeen((uint64_t)this, v15);
    }
    double v16 = *((double *)a2 + 3);
    if (*((unsigned char *)a2 + 16))
    {
      if (v8 >= v16) {
        double v16 = v8;
      }
      int v17 = (WebKit::ResourceLoadStatisticsStore *)this;
    }
    else
    {
      if (v16 != 0.0)
      {
LABEL_15:
        if (*((unsigned char *)a2 + 32) && !v9) {
          WebKit::ResourceLoadStatisticsStore::setGrandfathered(this, a2);
        }
        if (*((unsigned char *)a2 + 128) && !v10) {
          WebKit::ResourceLoadStatisticsStore::setPrevalentResource((WebKit::ResourceLoadStatisticsStore *)this, a2);
        }
        if (*((unsigned char *)a2 + 129) && !v11) {
          WebKit::ResourceLoadStatisticsStore::setVeryPrevalentResource((WebKit::ResourceLoadStatisticsStore *)this, a2);
        }
        if (*((_DWORD *)a2 + 33) > v12)
        {
          WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 50, (uint64_t)"updateDataRecordsRemoved", (WebCore::SQLiteStatementAutoResetScope *)&v32);
          if (!v32
            || WebCore::SQLiteStatement::bindInt(v32)
            || WebCore::SQLiteStatement::bindText()
            || WebCore::SQLiteStatement::step(v32) != 101)
          {
            uint64_t v23 = qword_1EB358460;
            if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
            {
              uint64_t v25 = this[82];
              int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
              uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
              *(_DWORD *)long long buf = 134218755;
              long long v34 = this;
              __int16 v35 = 2048;
              uint64_t v36 = v25;
              __int16 v37 = 1024;
              int v38 = Error;
              __int16 v39 = 2081;
              uint64_t v40 = ErrorMsg;
              _os_log_error_impl(&dword_1985F2000, v23, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::updateDataRecordsRemoved: failed to step statement", buf, 0x26u);
            }
          }
          WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v32);
        }
        if (*((unsigned char *)a2 + 80) && !v14) {
          WebKit::ResourceLoadStatisticsStore::setIsScheduledForAllScriptWrittenStorageRemoval((uint64_t)this, a2);
        }
        uint64_t v24 = v30;
        long long v30 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2) {
            WTF::StringImpl::destroy(v24, v13);
          }
          else {
            *(_DWORD *)v24 -= 2;
          }
        }
        WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v31);
        goto LABEL_13;
      }
      double v16 = 0.0;
      int v17 = (WebKit::ResourceLoadStatisticsStore *)this;
    }
    WebKit::ResourceLoadStatisticsStore::setUserInteraction((uint64_t)v17, v16);
    goto LABEL_15;
  }
  __int16 v18 = qword_1EB358460;
  if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
  {
    uint64_t v20 = this[82];
    int v21 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
    uint64_t v22 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
    *(_DWORD *)long long buf = 134218755;
    long long v34 = this;
    __int16 v35 = 2048;
    uint64_t v36 = v20;
    __int16 v37 = 1024;
    int v38 = v21;
    __int16 v39 = 2081;
    uint64_t v40 = v22;
    _os_log_error_impl(&dword_1985F2000, v18, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::mergeStatistic: failed to step statement", buf, 0x26u);
  }
LABEL_13:
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v28);
  return WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v29);
}

WebKit::DatabaseUtilities *WebKit::ResourceLoadStatisticsStore::mergeStatistics(WebKit::DatabaseUtilities *result, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 12))
  {
    uint64_t v3 = result;
    WebKit::DatabaseUtilities::beginTransactionIfNecessary(result, (uint64_t)v13);
    unsigned int v4 = *(_DWORD *)(a2 + 12);
    if (v4)
    {
      double v5 = *(const WebCore::ResourceLoadStatistics **)a2;
      uint64_t v6 = 200 * v4;
      do
      {
        if ((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)v3, v5) >> 32)
        {
          WebKit::ResourceLoadStatisticsStore::mergeStatistic((WebCore::SQLiteStatement **)v3, v5);
        }
        else if ((WebKit::ResourceLoadStatisticsStore::insertObservedDomain((WebCore::SQLiteStatement **)v3, v5) & 1) == 0)
        {
          int v10 = qword_1EB358460;
          if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
          {
            uint64_t v12 = *((void *)v3 + 82);
            *(_DWORD *)long long buf = 134218240;
            double v15 = v3;
            __int16 v16 = 2048;
            uint64_t v17 = v12;
            _os_log_error_impl(&dword_1985F2000, v10, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] - ResourceLoadStatisticsStore::mergeStatistics: failed to insert observed domain", buf, 0x16u);
          }
          return (WebKit::DatabaseUtilities *)WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v13);
        }
        double v5 = (const WebCore::ResourceLoadStatistics *)((char *)v5 + 200);
        v6 -= 200;
      }
      while (v6);
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7)
      {
        double v8 = *(const WebCore::ResourceLoadStatistics **)a2;
        uint64_t v9 = 200 * v7;
        do
        {
          WebKit::ResourceLoadStatisticsStore::insertDomainRelationships(v3, v8);
          double v8 = (const WebCore::ResourceLoadStatistics *)((char *)v8 + 200);
          v9 -= 200;
        }
        while (v9);
      }
    }
    return (WebKit::DatabaseUtilities *)WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v13);
  }
  return result;
}

void WebKit::ResourceLoadStatisticsStore::getDomainStringFromDomainID(WebCore::SQLiteStatement **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *(_DWORD *)v4 += 2;
  }
  *a2 = v4;
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 67, (uint64_t)"getDomainStringFromDomainID", (WebCore::SQLiteStatementAutoResetScope *)&v13);
  if (v13 && !WebCore::SQLiteStatement::bindInt(v13))
  {
    if (WebCore::SQLiteStatement::step(v13) == 100)
    {
      WebCore::SQLiteStatement::columnText(this[67]);
      unsigned int v7 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      *a2 = v7;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
        {
          WTF::StringImpl::destroy(v4, v6);
          uint64_t v12 = *(WTF::StringImpl **)buf;
          *(void *)long long buf = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2) {
              WTF::StringImpl::destroy(v12, v11);
            }
            else {
              *(_DWORD *)v12 -= 2;
            }
          }
        }
        else
        {
          *(_DWORD *)v4 -= 2;
        }
      }
    }
  }
  else
  {
    double v5 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      double v8 = this[82];
      int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
      *(_DWORD *)long long buf = 134218755;
      *(void *)&uint8_t buf[4] = this;
      __int16 v15 = 2048;
      __int16 v16 = v8;
      __int16 v17 = 1024;
      int v18 = Error;
      __int16 v19 = 2081;
      uint64_t v20 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::getDomainStringFromDomainID: failed to bind parameter", buf, 0x26u);
    }
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v13);
}

void WebKit::ResourceLoadStatisticsStore::aggregatedThirdPartyData(WebKit::ResourceLoadStatisticsStore *this, uint64_t a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  unsigned int v4 = (WebCore::SQLiteDatabase *)(a2 + 16);
  WebCore::SQLiteDatabase::prepareStatement();
  if (v58 || WebCore::SQLiteStatement::bindText() || WebCore::SQLiteStatement::bindText())
  {
    double v5 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a2 + 656);
      *(_DWORD *)long long buf = 134218755;
      *(void *)&uint8_t buf[4] = a2;
      __int16 v66 = 2048;
      uint64_t v67 = v6;
      __int16 v68 = 1024;
      int Error = WebCore::SQLiteDatabase::lastError(v4);
      __int16 v70 = 2081;
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v4);
      _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::aggregatedThirdPartyData: failed to bind parameters", buf, 0x26u);
    }
  }
  else
  {
    while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v57) == 100)
    {
      if (v58) {
        goto LABEL_86;
      }
      if (WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v57))
      {
        if (v58) {
          goto LABEL_86;
        }
        WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v57);
        WebKit::ResourceLoadStatisticsStore::getDomainStringFromDomainID((WebCore::SQLiteStatement **)a2, (WTF::StringImpl **)buf);
        WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString((WTF::StringImpl **)buf, &v56);
        double v8 = *(WTF::StringImpl **)buf;
        *(void *)long long buf = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v7);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
        uint64_t v9 = v56;
        if (v56) {
          *(_DWORD *)v56 += 2;
        }
        long long v53 = v9;
        WebKit::DatabaseUtilities::scopedStatement(a2, (WebCore::SQLiteStatement **)(a2 + 544), (uint64_t)"getThirdPartyDataForSpecificFirstPartyDomains", (WebCore::SQLiteStatementAutoResetScope *)&v63);
        if (!v63
          || WebCore::SQLiteStatement::bindInt(v63)
          || WebCore::SQLiteStatement::bindInt(v63)
          || WebCore::SQLiteStatement::bindInt(v63))
        {
          int v10 = qword_1EB358460;
          if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
          {
            uint64_t v19 = *(void *)(a2 + 656);
            int v20 = WebCore::SQLiteDatabase::lastError(v4);
            uint64_t v21 = WebCore::SQLiteDatabase::lastErrorMsg(v4);
            *(_DWORD *)long long buf = 134218755;
            *(void *)&uint8_t buf[4] = a2;
            __int16 v66 = 2048;
            uint64_t v67 = v19;
            __int16 v68 = 1024;
            int Error = v20;
            __int16 v70 = 2081;
            uint64_t ErrorMsg = v21;
            _os_log_error_impl(&dword_1985F2000, v10, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::getThirdPartyDataForSpecificFirstPartyDomains: failed to bind parameters", buf, 0x26u);
          }
          uint64_t v54 = 0;
          uint64_t v55 = 0;
        }
        else
        {
          uint64_t v54 = 0;
          uint64_t v55 = 0;
          while (WebCore::SQLiteStatement::step(v63) == 100)
          {
            WebCore::SQLiteStatement::columnInt(*(WebCore::SQLiteStatement **)(a2 + 544));
            WebKit::ResourceLoadStatisticsStore::getDomainStringFromDomainID((WebCore::SQLiteStatement **)a2, (WTF::StringImpl **)buf);
            WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString((WTF::StringImpl **)buf, &v62);
            uint64_t v23 = *(WTF::StringImpl **)buf;
            *(void *)long long buf = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2) {
                WTF::StringImpl::destroy(v23, v22);
              }
              else {
                *(_DWORD *)v23 -= 2;
              }
            }
            uint64_t v24 = v62;
            if (v62) {
              *(_DWORD *)v62 += 2;
            }
            double v59 = v24;
            WebKit::DatabaseUtilities::scopedStatement(a2, (WebCore::SQLiteStatement **)(a2 + 552), (uint64_t)"hasStorageAccess", (WebCore::SQLiteStatementAutoResetScope *)buf);
            uint64_t v25 = WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)a2, (const WebCore::RegistrableDomain *)&v56);
            BOOL v26 = WebKit::ResourceLoadStatisticsStore::relationshipExists(a2, (WebCore::SQLiteStatement **)buf, v25);
            WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)buf);
            BOOL v60 = v26;
            unint64_t v27 = WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)a2, (const WebCore::RegistrableDomain *)&v56);
            unint64_t v28 = WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)a2, (const WebCore::RegistrableDomain *)&v62);
            double v31 = -1.0;
            if (HIDWORD(v27) && HIDWORD(v28))
            {
              WebKit::DatabaseUtilities::scopedStatement(a2, (WebCore::SQLiteStatement **)(a2 + 560), (uint64_t)"getMostRecentlyUpdatedTimestamp", (WebCore::SQLiteStatementAutoResetScope *)&v64);
              if (!v64
                || WebCore::SQLiteStatement::bindInt(v64)
                || WebCore::SQLiteStatement::bindInt(v64)
                || WebCore::SQLiteStatement::bindInt(v64)
                || WebCore::SQLiteStatement::bindInt(v64)
                || WebCore::SQLiteStatement::bindInt(v64)
                || WebCore::SQLiteStatement::bindInt(v64)
                || WebCore::SQLiteStatement::bindInt(v64)
                || WebCore::SQLiteStatement::bindInt(v64))
              {
                long long v32 = qword_1EB358460;
                if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v49 = *(void *)(a2 + 656);
                  int v50 = WebCore::SQLiteDatabase::lastError(v4);
                  uint64_t v51 = WebCore::SQLiteDatabase::lastErrorMsg(v4);
                  *(_DWORD *)long long buf = 134218755;
                  *(void *)&uint8_t buf[4] = a2;
                  __int16 v66 = 2048;
                  uint64_t v67 = v49;
                  __int16 v68 = 1024;
                  int Error = v50;
                  __int16 v70 = 2081;
                  uint64_t ErrorMsg = v51;
                  _os_log_error_impl(&dword_1985F2000, v32, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::getMostRecentlyUpdatedTimestamp: failed to step statement", buf, 0x26u);
                }
              }
              else if (WebCore::SQLiteStatement::step(v64) == 100)
              {
                WebCore::SQLiteStatement::columnDouble(v64);
                double v31 = v52;
              }
              WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v64);
            }
            double v61 = v31;
            if (HIDWORD(v55))
            {
              uint64_t v33 = 0;
              unint64_t v34 = 0;
              while (1)
              {
                uint64_t v35 = v54;
                if (WTF::equal(*(WTF **)(v54 + v33), v59, v30))
                {
                  if (*(unsigned char *)(v35 + v33 + 8) == v60) {
                    break;
                  }
                }
                ++v34;
                uint64_t v36 = HIDWORD(v55);
                v33 += 24;
                if (v34 >= HIDWORD(v55)) {
                  goto LABEL_68;
                }
              }
            }
            else
            {
              uint64_t v36 = 0;
LABEL_68:
              if (v36 == v55)
              {
                __int16 v37 = (void *)WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v54, v36 + 1, (unint64_t)&v59);
                uint64_t v40 = (_DWORD *)*v37;
                int v38 = (BOOL *)(v37 + 1);
                __int16 v39 = v40;
                unsigned int v41 = HIDWORD(v55);
                uint64_t v42 = v54;
                if (v40) {
                  *v39 += 2;
                }
                BOOL v43 = (void *)(v42 + 24 * v41);
                *BOOL v43 = v39;
                int v44 = v43 + 1;
              }
              else
              {
                uint64_t v45 = v54;
                uint64_t v46 = v59;
                if (v59) {
                  *(_DWORD *)v59 += 2;
                }
                *(void *)(v45 + 24 * v36) = v46;
                int v44 = (_OWORD *)(v45 + 24 * v36 + 8);
                int v38 = &v60;
              }
              *int v44 = *(_OWORD *)v38;
              ++HIDWORD(v55);
            }
            uint64_t v47 = v59;
            double v59 = 0;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2) {
                WTF::StringImpl::destroy(v47, v29);
              }
              else {
                *(_DWORD *)v47 -= 2;
              }
            }
            uint64_t v48 = v62;
            int v62 = 0;
            if (v48)
            {
              if (*(_DWORD *)v48 == 2) {
                WTF::StringImpl::destroy(v48, v29);
              }
              else {
                *(_DWORD *)v48 -= 2;
              }
            }
          }
        }
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v63);
        unsigned int v12 = *((_DWORD *)this + 3);
        if (v12 == *((_DWORD *)this + 2))
        {
          WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ITPThirdPartyData>((uint64_t)this, (unint64_t)&v53);
        }
        else
        {
          uint64_t v13 = *(void *)this + 24 * v12;
          int v14 = v53;
          long long v53 = 0;
          *(void *)(v13 + ++*(_DWORD *)(this + 8) = 0;
          *(void *)(v13 + 16) = 0;
          *(void *)uint64_t v13 = v14;
          uint64_t v15 = v54;
          uint64_t v54 = 0;
          *(void *)(v13 + ++*(_DWORD *)(this + 8) = v15;
          LODWORD(v15) = v55;
          LODWORD(v55) = 0;
          *(_DWORD *)(v13 + 16) = v15;
          LODWORD(v15) = HIDWORD(v55);
          HIDWORD(v55) = 0;
          *(_DWORD *)(v13 + 20) = v15;
          ++*((_DWORD *)this + 3);
        }
        WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v11);
        __int16 v17 = v53;
        long long v53 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy(v17, v16);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
        int v18 = v56;
        long long v56 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v16);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
      }
      if (v58) {
LABEL_86:
      }
        std::__throw_bad_variant_access[abi:sn180100]();
    }
  }
  if (v58 != -1) {
    (*(&off_1EE9C7600 + v58))((int)buf, (WebCore::SQLiteStatement *)v57);
  }
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String,char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  v8[0] = a1;
  v8[1] = a2;
  char v7 = a4;
  uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,char>(v8, a3, &v7, a5);
  if (!*a5) {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::buildList<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(WTF::StringImpl **a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  __int16 v39 = 0;
  uint64_t v40 = 0;
  int v41 = 0;
  char v42 = 1;
  double v5 = (uint64_t *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, (uint64_t)a2, a3);
  v38[0] = v5;
  v38[1] = v6;
  if (*a2) {
    uint64_t v7 = *a2 + 8 * *(unsigned int *)(*a2 - 4);
  }
  else {
    uint64_t v7 = 0;
  }
  if ((uint64_t *)v7 != v5)
  {
    do
    {
      int v8 = v41;
      BOOL v9 = v41 != 0;
      uint64_t v10 = *v5;
      if (v41) {
        int v11 = ", ";
      }
      else {
        int v11 = "";
      }
      if (v10)
      {
        unsigned int v12 = *(_DWORD *)(v10 + 4);
        if (v12 >= 0xFFFFFFFE) {
          int v13 = -1;
        }
        else {
          int v13 = v12 + 2;
        }
      }
      else
      {
        int v13 = 2;
      }
      size_t v14 = 2 * (v41 != 0);
      BOOL v15 = __CFADD__(v13, 2 * v9);
      int v16 = v13 + 2 * v9;
      if (v15) {
        int v16 = -1;
      }
      BOOL v15 = __CFADD__(v16, v41);
      unsigned int v17 = v16 + v41;
      if (v15) {
        uint64_t v18 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v18 = v17;
      }
      uint64_t v19 = v40;
      if ((v40 || (uint64_t v19 = v39) != 0) && (*((unsigned char *)v19 + 16) & 4) == 0 || v10 && (*(unsigned char *)(v10 + 16) & 4) == 0)
      {
        uint64_t v20 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v39);
        if (v20)
        {
          if (v8)
          {
            uint64_t v23 = 2 * v14;
            uint64_t v24 = (_WORD *)v20;
            uint64_t v25 = ", ";
            do
            {
              __int16 v26 = *(unsigned __int8 *)v25++;
              *v24++ = v26;
              v23 -= 2;
            }
            while (v23);
          }
          unint64_t v27 = (_WORD *)(v20 + 2 * v14);
          _WORD *v27 = 34;
          unint64_t v28 = (char *)(v27 + 1);
          uint64_t v43 = v10;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v43, v28);
          uint64_t v29 = v43;
          if (v43) {
            uint64_t v29 = *(unsigned int *)(v43 + 4);
          }
          *(_WORD *)&v28[2 * v29] = 34;
        }
      }
      else
      {
        long long v30 = (char *)MEMORY[0x19972DE60](&v39, v18);
        if (v30)
        {
          double v31 = v30;
          if (v14) {
            memcpy(v30, v11, v14);
          }
          long long v32 = &v31[v14];
          *long long v32 = 34;
          uint64_t v33 = v32 + 1;
          uint64_t v43 = v10;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v43, v33);
          uint64_t v34 = v43;
          if (v43) {
            uint64_t v34 = *(unsigned int *)(v43 + 4);
          }
          v33[v34] = 34;
        }
      }
      v38[0] += 8;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v38, v21, v22);
      double v5 = (uint64_t *)v38[0];
    }
    while (v38[0] != v7);
    uint64_t result = v39;
    if (v39) {
      goto LABEL_41;
    }
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v39);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v39);
  uint64_t result = v39;
  if (v39) {
LABEL_41:
  }
    *(_DWORD *)result += 2;
  *a1 = result;
  __int16 v37 = v40;
  uint64_t v40 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::destroy(v37, v35);
      uint64_t result = v39;
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  __int16 v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v35);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::recursivelyFindNonPrevalentDomainsThatRedirectedToThisDomain(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t NonPrevalentDomainsThatRedirectedToThisDomain = a4;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a4 < 0x32)
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    unint64_t v28 = &v29;
    BOOL v9 = (WebCore::SQLiteDatabase *)(a1 + 16);
    WebCore::SQLiteDatabase::prepareStatement();
    if (v27 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v26))
    {
      uint64_t v10 = qword_1EB358460;
      if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
      {
        uint64_t v18 = *(void *)(a1 + 656);
        int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
        uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
        *(_DWORD *)long long buf = 134218755;
        uint64_t v32 = a1;
        __int16 v33 = 2048;
        uint64_t v34 = v18;
        __int16 v35 = 1024;
        int v36 = Error;
        __int16 v37 = 2081;
        uint64_t v38 = ErrorMsg;
        _os_log_error_impl(&dword_1985F2000, v10, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::recursivelyFindNonPrevalentDomainsThatRedirectedToThisDomain: failed to bind parameter for findSubresources", buf, 0x26u);
      }
      uint64_t NonPrevalentDomainsThatRedirectedToThisDomain = 0;
    }
    else
    {
      if (!v27)
      {
        uint64_t NonPrevalentDomainsThatRedirectedToThisDomain = (NonPrevalentDomainsThatRedirectedToThisDomain + 1);
        do
        {
          if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v26) != 100) {
            goto LABEL_21;
          }
          if (v27) {
            break;
          }
          unsigned int v12 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v26);
          *(_DWORD *)long long buf = v12;
          if (std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(a3, v12, buf))
          {
            *(_DWORD *)long long buf = v12;
            std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&v28, v12, buf);
          }
        }
        while (!v27);
      }
LABEL_20:
      while (1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_21:
        WebCore::SQLiteDatabase::prepareStatement();
        if (v25 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v24)) {
          break;
        }
        while (!v25)
        {
          if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v24) != 100)
          {
            size_t v14 = (uint64_t *)v28;
            if (v30) {
              BOOL v15 = v28 == &v29;
            }
            else {
              BOOL v15 = 1;
            }
            if (!v15)
            {
              do
              {
                uint64_t NonPrevalentDomainsThatRedirectedToThisDomain = WebKit::ResourceLoadStatisticsStore::recursivelyFindNonPrevalentDomainsThatRedirectedToThisDomain(a1, *((unsigned int *)v14 + 7), a3, NonPrevalentDomainsThatRedirectedToThisDomain);
                int v16 = (WTF *)v14[1];
                if (v16)
                {
                  do
                  {
                    unsigned int v17 = (WTF **)v16;
                    int v16 = *(WTF **)v16;
                  }
                  while (v16);
                }
                else
                {
                  do
                  {
                    unsigned int v17 = (WTF **)v14[2];
                    BOOL v15 = *v17 == (WTF *)v14;
                    size_t v14 = (uint64_t *)v17;
                  }
                  while (!v15);
                }
                size_t v14 = (uint64_t *)v17;
              }
              while (v17 != &v29);
            }
            goto LABEL_26;
          }
          if (v25) {
            goto LABEL_20;
          }
          BOOL v9 = (WebCore::SQLiteDatabase *)WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v24);
          *(_DWORD *)long long buf = v9;
          if (std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(a3, v9, buf))
          {
            *(_DWORD *)long long buf = v9;
            std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&v28, v9, buf);
          }
        }
      }
      int v13 = qword_1EB358460;
      if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = *(void *)(a1 + 656);
        int v22 = WebCore::SQLiteDatabase::lastError(v9);
        uint64_t v23 = WebCore::SQLiteDatabase::lastErrorMsg(v9);
        *(_DWORD *)long long buf = 134218755;
        uint64_t v32 = a1;
        __int16 v33 = 2048;
        uint64_t v34 = v21;
        __int16 v35 = 1024;
        int v36 = v22;
        __int16 v37 = 2081;
        uint64_t v38 = v23;
        _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::recursivelyFindNonPrevalentDomainsThatRedirectedToThisDomain: failed to bind parameter for findTopFrames", buf, 0x26u);
      }
      uint64_t NonPrevalentDomainsThatRedirectedToThisDomain = 0;
LABEL_26:
      if (v25 != -1) {
        (*(&off_1EE9C7600 + v25))((int)buf, (WebCore::SQLiteStatement *)v24);
      }
    }
    if (v27 != -1) {
      (*(&off_1EE9C7600 + v27))((int)buf, (WebCore::SQLiteStatement *)v26);
    }
    std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::destroy(v29);
  }
  else
  {
    uint64_t v6 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 656);
      *(_DWORD *)long long buf = 134218496;
      uint64_t v32 = a1;
      __int16 v33 = 2048;
      uint64_t v34 = v7;
      __int16 v35 = 1024;
      int v36 = 50;
      _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] - ResourceLoadStatisticsStore::recursivelyFindNonPrevalentDomainsThatRedirectedToThisDomain: hit %u recursive calls in redirect backtrace", buf, 0x1Cu);
    }
  }
  return NonPrevalentDomainsThatRedirectedToThisDomain;
}

WTF *WebKit::ResourceLoadStatisticsStore::markAsPrevalentIfHasRedirectedToPrevalent(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v19[0] = 0;
  v19[1] = 0;
  uint64_t v18 = v19;
  uint64_t v2 = (WebKit::ResourceLoadStatisticsStore *)((char *)this + 16);
  WebCore::SQLiteDatabase::prepareStatement();
  if (!v17)
  {
    while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v16) == 100)
    {
      if (!v17)
      {
        *(_DWORD *)long long buf = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v16);
        std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&v18, *(unsigned int *)buf, buf);
        if (!v17) {
          continue;
        }
      }
LABEL_10:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_11;
    }
  }
  WebCore::SQLiteDatabase::prepareStatement();
  if (!v15)
  {
    while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v14) == 100)
    {
      if (!v15)
      {
        *(_DWORD *)long long buf = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v14);
        std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&v18, *(unsigned int *)buf, buf);
        if (!v15) {
          continue;
        }
      }
      goto LABEL_10;
    }
  }
LABEL_11:
  WebKit::buildList<std::set<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>>(&v11, &v18);
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"UPDATE ObservedDomains SET isPrevalent = 1 WHERE domainID IN (", 63, (uint64_t *)&v11, 41, buf);
  WebCore::SQLiteDatabase::prepareStatementSlow();
  unsigned int v4 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  double v5 = v11;
  int v11 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  if (v13 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v12) != 101)
  {
    uint64_t v7 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *((void *)this + 82);
      int Error = WebCore::SQLiteDatabase::lastError(v2);
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
      *(_DWORD *)long long buf = 134218755;
      *(void *)&uint8_t buf[4] = this;
      __int16 v21 = 2048;
      uint64_t v22 = v8;
      __int16 v23 = 1024;
      int v24 = Error;
      __int16 v25 = 2081;
      uint64_t v26 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::markAsPrevalentIfHasRedirectedToPrevalent: failed to step statement", buf, 0x26u);
    }
  }
  if (v13 != -1) {
    (*(&off_1EE9C7600 + v13))((int)buf, (WebCore::SQLiteStatement *)v12);
  }
  if (v15 != -1) {
    (*(&off_1EE9C7600 + v15))((int)buf, (WebCore::SQLiteStatement *)v14);
  }
  if (v17 != -1) {
    (*(&off_1EE9C7600 + v17))((int)buf, (WebCore::SQLiteStatement *)v16);
  }
  return std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::destroy(v19[0]);
}

WTF::StringImpl **WebKit::buildList<std::set<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>>(void *a1, void *a2)
{
  v12[0] = 0;
  v12[1] = 0;
  int v13 = 0;
  char v14 = 1;
  uint64_t v3 = a2 + 1;
  unsigned int v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      if (v13) {
        uint64_t v7 = (int8x16_t *)", ";
      }
      else {
        uint64_t v7 = (int8x16_t *)"";
      }
      if (v13) {
        uint64_t v8 = 3;
      }
      else {
        uint64_t v8 = 1;
      }
      WTF::StringBuilder::append<WTF::ASCIILiteral,unsigned int>((WTF::StringBuilder *)v12, v7, v8, *((_DWORD *)v4 + 7));
      BOOL v9 = (void *)v4[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          BOOL v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v4[2];
          BOOL v11 = *v10 == (void)v4;
          unsigned int v4 = v10;
        }
        while (!v11);
      }
      unsigned int v4 = v10;
    }
    while (v10 != v3);
  }
  WTF::StringBuilder::toString((WTF::StringBuilder *)v12, a1);
  return WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v12, v5);
}

WTF::StringImpl *WebKit::ResourceLoadStatisticsStore::findNotVeryPrevalentResources(WebKit::ResourceLoadStatisticsStore *this)
{
  *(void *)this = 0;
  WebCore::SQLiteDatabase::prepareStatement();
  if (v67)
  {
    uint64_t v3 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::begin(0);
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    unsigned int v6 = 0;
  }
  else
  {
    while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v66) == 100)
    {
      if (v67) {
        goto LABEL_127;
      }
      LODWORD(v56[0]) = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v66);
      if (LODWORD(v56[0]))
      {
        if (v67
          || (WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v66),
              WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(v59, &v62),
              v67))
        {
LABEL_127:
          uint64_t v47 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
          return WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::add<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>(v47, v48, v49, v50);
        }
        if (WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v66)) {
          int v31 = 2;
        }
        else {
          int v31 = 1;
        }
        *(_DWORD *)uint64_t v63 = v31;
        *(_OWORD *)&v63[4] = 0uLL;
        uint64_t v32 = v59[0];
        v59[0] = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2) {
            WTF::StringImpl::destroy(v32, v30);
          }
          else {
            *(_DWORD *)v32 -= 2;
          }
        }
        WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::add<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>((WTF::StringImpl *)v59, (uint64_t *)this, (int *)v56, (uint64_t *)&v62);
        uint64_t v34 = v62;
        int v62 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2) {
            WTF::StringImpl::destroy(v34, v33);
          }
          else {
            *(_DWORD *)v34 -= 2;
          }
        }
      }
      if (v67) {
        goto LABEL_127;
      }
    }
    uint64_t v2 = *(void *)this;
    uint64_t v3 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::begin(*(_DWORD **)this);
    if (!v2) {
      goto LABEL_8;
    }
    unsigned int v6 = *(_DWORD *)(v2 - 4);
    uint64_t v5 = v2 + 40 * v6;
  }
  int v62 = this;
  *(void *)uint64_t v63 = v3;
  *(void *)&v63[8] = v4;
  *(void *)&v63[16] = v5;
  uint64_t v64 = v2 + 40 * v6;
  WebKit::buildList<WTF::SizedIteratorRange<WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>,unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>>(&v65, &v62);
  uint64_t v7 = v65;
  if (v65) {
    *(_DWORD *)v65 += 2;
  }
  double v61 = v7;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"SELECT subresourceDomainID, COUNT(topFrameDomainID) FROM SubresourceUnderTopFrameDomains WHERE subresourceDomainID IN (", 120, (uint64_t *)&v61, (uint64_t)") GROUP BY subresourceDomainID", 31, v59);
  WebCore::SQLiteDatabase::prepareStatementSlow();
  BOOL v9 = v59[0];
  v59[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = v61;
  double v61 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  if (!*(_DWORD *)&v63[16])
  {
    while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)&v62) == 100)
    {
      if (*(_DWORD *)&v63[16]) {
        goto LABEL_127;
      }
      int v11 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)&v62);
      if (v11)
      {
        uint64_t v35 = *(void *)this;
        int v36 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(*(void *)this, v11);
        uint64_t v37 = v35 ? v35 + 40 * *(unsigned int *)(v35 - 4) : 0;
        if ((int *)v37 != v36)
        {
          if (*(_DWORD *)&v63[16]) {
            goto LABEL_127;
          }
          v36[5] = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)&v62);
        }
      }
      if (*(_DWORD *)&v63[16]) {
        goto LABEL_127;
      }
    }
  }
  unsigned int v12 = v65;
  if (v65) {
    *(_DWORD *)v65 += 2;
  }
  unsigned int v58 = v12;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"SELECT subresourceDomainID, COUNT(toDomainID) FROM SubresourceUniqueRedirectsTo WHERE subresourceDomainID IN (", 111, (uint64_t *)&v58, (uint64_t)") GROUP BY subresourceDomainID", 31, v56);
  WebCore::SQLiteDatabase::prepareStatementSlow();
  char v14 = v56[0];
  v56[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  unsigned int v15 = v58;
  unsigned int v58 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v13);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  if (!v60)
  {
    while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v59) == 100)
    {
      if (v60) {
        goto LABEL_127;
      }
      int v16 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v59);
      if (v16)
      {
        uint64_t v38 = *(void *)this;
        uint64_t v39 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(*(void *)this, v16);
        uint64_t v40 = v38 ? v38 + 40 * *(unsigned int *)(v38 - 4) : 0;
        if ((int *)v40 != v39)
        {
          if (v60) {
            goto LABEL_127;
          }
          v39[6] = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v59);
        }
      }
      if (v60) {
        goto LABEL_127;
      }
    }
  }
  unsigned int v17 = v65;
  if (v65) {
    *(_DWORD *)v65 += 2;
  }
  uint64_t v55 = v17;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"SELECT subframeDomainID, COUNT(topFrameDomainID) FROM SubframeUnderTopFrameDomains WHERE subframeDomainID IN (", 111, (uint64_t *)&v55, (uint64_t)") GROUP BY subframeDomainID", 28, v53);
  WebCore::SQLiteDatabase::prepareStatementSlow();
  uint64_t v19 = v53[0];
  v53[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v18);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t v20 = v55;
  uint64_t v55 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v18);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  if (!v57)
  {
    while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v56) == 100)
    {
      if (v57) {
        goto LABEL_127;
      }
      int v21 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v56);
      if (v21)
      {
        uint64_t v41 = *(void *)this;
        char v42 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(*(void *)this, v21);
        uint64_t v43 = v41 ? v41 + 40 * *(unsigned int *)(v41 - 4) : 0;
        if ((int *)v43 != v42)
        {
          if (v57) {
            goto LABEL_127;
          }
          v42[7] = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v56);
        }
      }
      if (v57) {
        goto LABEL_127;
      }
    }
  }
  uint64_t v22 = v65;
  if (v65) {
    *(_DWORD *)v65 += 2;
  }
  uint64_t v51 = v22;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"SELECT sourceDomainID, COUNT(toDomainID) FROM TopFrameUniqueRedirectsTo WHERE sourceDomainID IN (", 98, (uint64_t *)&v51, (uint64_t)") GROUP BY sourceDomainID", 26, &v52);
  WebCore::SQLiteDatabase::prepareStatementSlow();
  int v24 = v52;
  double v52 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  __int16 v25 = v51;
  uint64_t v51 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v23);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  unsigned int v26 = v54;
  if (!v54)
  {
    while (1)
    {
      int v27 = WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v53);
      unsigned int v26 = v54;
      if (v27 != 100) {
        break;
      }
      if (v54) {
        goto LABEL_127;
      }
      int v28 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v53);
      if (v28)
      {
        uint64_t v44 = *(void *)this;
        uint64_t v45 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(*(void *)this, v28);
        uint64_t v46 = v44 ? v44 + 40 * *(unsigned int *)(v44 - 4) : 0;
        if ((int *)v46 != v45)
        {
          if (v54) {
            goto LABEL_127;
          }
          long long v45[8] = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v53);
        }
      }
      if (v54) {
        goto LABEL_127;
      }
    }
  }
  if (v26 != -1) {
    (*(&off_1EE9C7600 + v26))((int)&v52, (WebCore::SQLiteStatement *)v53);
  }
  if (v57 != -1) {
    (*(&off_1EE9C7600 + v57))((int)v53, (WebCore::SQLiteStatement *)v56);
  }
  if (v60 != -1) {
    (*(&off_1EE9C7600 + v60))((int)v56, (WebCore::SQLiteStatement *)v59);
  }
  if (*(_DWORD *)&v63[16] != -1) {
    (*(&off_1EE9C7600 + *(unsigned int *)&v63[16]))((int)v59, (WebCore::SQLiteStatement *)&v62);
  }
  uint64_t result = v65;
  uint64_t v65 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v67 != -1) {
    return (WTF::StringImpl *)(*(&off_1EE9C7600 + v67))((int)&v62, (WebCore::SQLiteStatement *)v66);
  }
  return result;
}

WTF::StringImpl *WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::add<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>(WTF::StringImpl *result, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (result = (WTF::StringImpl *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  int v11 = *a3;
  unsigned int v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  unsigned int v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  unsigned int v14 = (v13 ^ HIWORD(v13)) & v10;
  unsigned int v15 = (WTF::StringImpl *)(v8 + 40 * v14);
  int v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15)
  {
    unsigned int v17 = 0;
    int v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if (v9) {
          unsigned int v20 = 0;
        }
        else {
          unsigned int v20 = *(_DWORD *)(v8 - 4);
        }
        char v21 = 0;
        uint64_t v22 = v8 + 40 * v20;
        goto LABEL_28;
      }
      if (v16 == -1) {
        unsigned int v17 = v15;
      }
      unsigned int v14 = (v14 + v18) & v10;
      unsigned int v15 = (WTF::StringImpl *)(v8 + 40 * v14);
      int v16 = *(_DWORD *)v15;
      ++v18;
    }
    while (*(_DWORD *)v15);
    if (v17)
    {
      *(_DWORD *)unsigned int v17 = 0;
      *(_OWORD *)((char *)v17 + ++*(_DWORD *)(this + 8) = 0u;
      *(_OWORD *)((char *)v17 + 24) = 0u;
      --*(_DWORD *)(*a2 - 16);
      int v11 = *a3;
      unsigned int v15 = v17;
    }
  }
  *(_DWORD *)unsigned int v15 = v11;
  uint64_t v19 = *a4;
  *a4 = 0;
  long long v29 = *(_OWORD *)(a4 + 1);
  int v30 = *((_DWORD *)a4 + 6);
  uint64_t result = (WTF::StringImpl *)*((void *)v15 + 1);
  *((void *)v15 + objc_destroyWeak(this + 1) = v19;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  *((_OWORD *)v15 + objc_destroyWeak(this + 1) = v29;
  *((_DWORD *)v15 + ++*(_DWORD *)(this + 8) = v30;
  uint64_t v23 = *a2;
  if (*a2) {
    int v24 = *(_DWORD *)(v23 - 12) + 1;
  }
  else {
    int v24 = 1;
  }
  *(_DWORD *)(v23 - 1objc_destroyWeak(this + 2) = v24;
  uint64_t v25 = *a2;
  if (*a2) {
    int v26 = *(_DWORD *)(v25 - 12);
  }
  else {
    int v26 = 0;
  }
  uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
  unint64_t v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_25:
      uint64_t result = (WTF::StringImpl *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(a2, (int *)v15);
      unsigned int v15 = result;
      uint64_t v25 = *a2;
      if (*a2) {
        LODWORD(v2++*(_DWORD *)(this + 8) = *(_DWORD *)(v25 - 4);
      }
      else {
        LODWORD(v2++*(_DWORD *)(this + 8) = 0;
      }
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_25;
  }
  uint64_t v22 = v25 + 40 * v28;
  char v21 = 1;
LABEL_28:
  *(void *)uint64_t v7 = v15;
  *((void *)v7 + objc_destroyWeak(this + 1) = v22;
  *((unsigned char *)v7 + 16) = v21;
  return result;
}

WTF::StringImpl **WebKit::buildList<WTF::SizedIteratorRange<WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>,unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>>(void *a1, void *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  int v12 = 0;
  char v13 = 1;
  uint64_t v3 = (unsigned int *)a2[1];
  uint64_t v4 = (unsigned int *)a2[3];
  if (v3 != v4)
  {
    uint64_t v7 = (unsigned int *)a2[2];
    do
    {
      if (v12) {
        uint64_t v8 = (int8x16_t *)", ";
      }
      else {
        uint64_t v8 = (int8x16_t *)"";
      }
      if (v12) {
        uint64_t v9 = 3;
      }
      else {
        uint64_t v9 = 1;
      }
      unsigned int v10 = *v3;
      v3 += 10;
      WTF::StringBuilder::append<WTF::ASCIILiteral,unsigned int>((WTF::StringBuilder *)v11, v8, v9, v10);
      while (v3 != v7)
      {
        if (*v3 + 1 > 1) {
          goto LABEL_15;
        }
        v3 += 10;
      }
      uint64_t v3 = v7;
LABEL_15:
      ;
    }
    while (v3 != v4);
  }
  WTF::StringBuilder::toString((WTF::StringBuilder *)v11, a1);
  return WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v11, v5);
}

_DWORD *WebKit::ResourceLoadStatisticsStore::reclassifyResources(WebKit::ResourceLoadStatisticsStore *this)
{
  WebKit::ResourceLoadStatisticsStore::findNotVeryPrevalentResources((WebKit::ResourceLoadStatisticsStore *)&v12);
  uint64_t result = v12;
  if (v12)
  {
    if (!*(v12 - 3)) {
      return (_DWORD *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable((uint64_t)result, v2);
    }
    WebKit::DatabaseUtilities::beginTransactionIfNecessary(this, (uint64_t)v11);
    uint64_t v4 = v12;
    uint64_t v5 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::begin(v12);
    unsigned int v6 = v5;
    uint64_t v8 = v7;
    if (v4) {
      uint64_t v9 = &v4[10 * *(v4 - 1)];
    }
    else {
      uint64_t v9 = 0;
    }
    if (v9 != v5)
    {
      do
      {
        if (*((unsigned char *)this + 225)
          || *((unsigned char *)this + 715)
          || (MEMORY[0x19972E990](*((void *)v6 + 1), "localhost", 9) & 1) == 0)
        {
          int v10 = WebKit::ResourceLoadStatisticsClassifier::calculateResourcePrevalence((uint64_t)this + 120, v6[5], v6[6], v6[7], v6[8], v6[4]);
          if (v10 != v6[4]) {
            WebKit::ResourceLoadStatisticsStore::setPrevalentResource((WebCore::SQLiteStatement **)this, (const WebCore::RegistrableDomain *)(v6 + 2), v10);
          }
        }
        while (1)
        {
          v6 += 10;
          if (v6 == v8) {
            break;
          }
          if ((*v6 + 1) > 1) {
            goto LABEL_14;
          }
        }
        unsigned int v6 = v8;
LABEL_14:
        ;
      }
      while (v6 != v9);
    }
    WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v11);
    uint64_t result = v12;
    if (v12) {
      return (_DWORD *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable((uint64_t)result, v2);
    }
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::setPrevalentResource(WebCore::SQLiteStatement **this, const WebCore::RegistrableDomain *a2, int a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 225)
    || *((unsigned char *)this + 715)
    || (uint64_t result = MEMORY[0x19972E990](*(void *)a2, "localhost", 9), (result & 1) == 0))
  {
    WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)this, (uint64_t)v30);
    unint64_t v7 = WebKit::ResourceLoadStatisticsStore::domainID(this, a2);
    if (HIDWORD(v7))
    {
      uint64_t v10 = v7;
      WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 51, (uint64_t)"setPrevalentResource", (WebCore::SQLiteStatementAutoResetScope *)&v29);
      if (!v29
        || WebCore::SQLiteStatement::bindInt(v29)
        || WebCore::SQLiteStatement::bindText()
        || WebCore::SQLiteStatement::step(v29) != 101)
      {
        char v13 = qword_1EB358460;
        if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
        {
          unsigned int v14 = this[82];
          int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
          uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
          *(_DWORD *)long long buf = 134218755;
          *(void *)&uint8_t buf[4] = this;
          __int16 v35 = 2048;
          int v36 = v14;
          __int16 v37 = 1024;
          int v38 = Error;
          __int16 v39 = 2081;
          uint64_t v40 = ErrorMsg;
          _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::setPrevalentResource: failed at to step scopedUpdatePrevalentResourceStatement", buf, 0x26u);
        }
      }
      else
      {
        WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 53, (uint64_t)"setPrevalentResource updateVeryPrevalentResource", (WebCore::SQLiteStatementAutoResetScope *)&v28);
        if (a3 == 4
          && (!v28
           || WebCore::SQLiteStatement::bindInt(v28)
           || WebCore::SQLiteStatement::bindText()
           || WebCore::SQLiteStatement::step(v28) != 101))
        {
          unsigned int v17 = qword_1EB358460;
          if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
          {
            int v18 = this[82];
            int v19 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
            uint64_t v20 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
            *(_DWORD *)long long buf = 134218755;
            *(void *)&uint8_t buf[4] = this;
            __int16 v35 = 2048;
            int v36 = v18;
            __int16 v37 = 1024;
            int v38 = v19;
            __int16 v39 = 2081;
            uint64_t v40 = v20;
            _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::setPrevalentResource: failed at to step scopedUpdateVeryPrevalentResourceStatement", buf, 0x26u);
          }
        }
        else
        {
          v27[0] = 0;
          v27[1] = 0;
          int v26 = v27;
          WebKit::ResourceLoadStatisticsStore::recursivelyFindNonPrevalentDomainsThatRedirectedToThisDomain((uint64_t)this, v10, (uint64_t **)&v26, 0);
          WebKit::buildList<std::set<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>>(&v31, &v26);
          WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"UPDATE ObservedDomains SET isPrevalent = 1 WHERE domainID IN (", 63, (uint64_t *)&v31, 41, buf);
          WebCore::SQLiteDatabase::prepareStatementSlow();
          int v12 = *(WTF::StringImpl **)buf;
          *(void *)long long buf = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2) {
              WTF::StringImpl::destroy(v12, v11);
            }
            else {
              *(_DWORD *)v12 -= 2;
            }
          }
          char v21 = v31;
          int v31 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2) {
              WTF::StringImpl::destroy(v21, v11);
            }
            else {
              *(_DWORD *)v21 -= 2;
            }
          }
          if (v33 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v32) != 101)
          {
            uint64_t v22 = qword_1EB358460;
            if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
            {
              uint64_t v23 = this[82];
              int v24 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
              uint64_t v25 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
              *(_DWORD *)long long buf = 134218755;
              *(void *)&uint8_t buf[4] = this;
              __int16 v35 = 2048;
              int v36 = v23;
              __int16 v37 = 1024;
              int v38 = v24;
              __int16 v39 = 2081;
              uint64_t v40 = v25;
              _os_log_error_impl(&dword_1985F2000, v22, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::setDomainsAsPrevalent: failed to step statement", buf, 0x26u);
            }
          }
          if (v33 != -1) {
            (*(&off_1EE9C7600 + v33))((int)buf, (WebCore::SQLiteStatement *)v32);
          }
          std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::destroy(v27[0]);
        }
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v28);
      }
      WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v29);
    }
    else
    {
      uint64_t v8 = qword_1EB358460;
      if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = this[82];
        *(_DWORD *)long long buf = 134218240;
        *(void *)&uint8_t buf[4] = this;
        __int16 v35 = 2048;
        int v36 = v9;
        _os_log_error_impl(&dword_1985F2000, v8, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] - ResourceLoadStatisticsStore::setPrevalentResource: failed to find domain", buf, 0x16u);
      }
    }
    return (uint64_t)WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v30);
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::cookieAccess(uint64_t a1, uint64_t a2, const WebCore::RegistrableDomain *a3, int a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = (WebCore::SQLiteDatabase *)(a1 + 16);
  WebCore::SQLiteDatabase::prepareStatement();
  if (!v16 && !WebCore::SQLiteStatement::bindText())
  {
    if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v15) == 100)
    {
      if (v16 || (int v11 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v15), v16)) {
        std::__throw_bad_variant_access[abi:sn180100]();
      }
      BOOL v12 = v11 != 0;
      BOOL v13 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v15) != 0;
    }
    else
    {
      BOOL v12 = 0;
      BOOL v13 = 0;
    }
    if (!*(unsigned char *)(a1 + 712)) {
      goto LABEL_17;
    }
    if (*(unsigned char *)(a1 + 712) == 3)
    {
      if ((WebKit::ResourceLoadStatisticsStore::hasHadUserInteraction(a1, a3) ^ 1 | v12)) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
LABEL_17:
      if (a4 | v13) {
        uint64_t v9 = 2;
      }
      else {
        uint64_t v9 = 0;
      }
      goto LABEL_6;
    }
    uint64_t v9 = 1;
    goto LABEL_6;
  }
  uint64_t v8 = qword_1EB358460;
  if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = *(void *)(a1 + 656);
    *(_DWORD *)long long buf = 134218755;
    uint64_t v18 = a1;
    __int16 v19 = 2048;
    uint64_t v20 = v14;
    __int16 v21 = 1024;
    int Error = WebCore::SQLiteDatabase::lastError(v7);
    __int16 v23 = 2081;
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v7);
    _os_log_error_impl(&dword_1985F2000, v8, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::cookieAccess: failed to bind parameter", buf, 0x26u);
  }
  uint64_t v9 = 0;
LABEL_6:
  if (v16 != -1) {
    (*(&off_1EE9C7600 + v16))((int)buf, (WebCore::SQLiteStatement *)v15);
  }
  return v9;
}

WTF::StringImpl *WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(uint64_t a1, WTF **a2, const WTF::StringImpl **a3, long long *a4, uint64_t a5, int a6, char a7, uint64_t *a8)
{
  uint64_t v14 = (WTF::RunLoop *)WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3);
  if (v14)
  {
    uint64_t v15 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, 1);
    unsigned int v16 = *(uint64_t (**)(uint64_t))(*(void *)v15 + 8);
    return (WTF::StringImpl *)v16(v15);
  }
  else
  {
    if (a6)
    {
      uint64_t v18 = (WTF::WallTime *)WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)a1, (uint64_t)&v32);
      double v19 = *(double *)(a1 + 648);
      WTF::WallTime::now(v18);
      WebKit::ResourceLoadStatisticsStore::setUserInteraction(a1, v19 + v20);
      uint64_t v14 = (WTF::RunLoop *)WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(&v32);
    }
    WTF::RunLoop::main(v14);
    WebCore::RegistrableDomain::isolatedCopy(&v32);
    WebCore::RegistrableDomain::isolatedCopy(&v33);
    long long v34 = *a4;
    LOBYTE(v35) = *((unsigned char *)a4 + 16);
    *((void *)&v35 + objc_destroyWeak(this + 1) = a5;
    __int16 v21 = *(atomic_uchar *volatile **)(a1 + 104);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v21);
    int v36 = (atomic_uchar **)v21;
    char v37 = a7;
    uint64_t v22 = *a8;
    *a8 = 0;
    uint64_t v38 = v22;
    uint64_t v23 = WTF::fastMalloc((WTF *)0x50);
    *(void *)uint64_t v23 = &unk_1EE9C7B98;
    *(void *)(v23 + ++*(_DWORD *)(this + 8) = v32;
    int v24 = v33;
    uint64_t v32 = 0;
    unsigned int v33 = 0;
    *(void *)(v23 + 16) = v24;
    long long v25 = v34;
    *(_OWORD *)(v23 + ++*(_DWORD *)(this - 40) = v35;
    *(_OWORD *)(v23 + 24) = v25;
    *(void *)(v23 + 56) = v36;
    *(unsigned char *)(v23 + 64) = v37;
    uint64_t v26 = v38;
    int v36 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = v23;
    *(void *)(v23 + 7objc_destroyWeak(this + 2) = v26;
    WTF::RunLoop::dispatch();
    uint64_t v28 = v39;
    uint64_t v39 = 0;
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
    uint64_t v29 = v38;
    uint64_t v38 = 0;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
    int v30 = v36;
    int v36 = 0;
    if (v30) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v30);
    }
    int v31 = v33;
    unsigned int v33 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v27);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
    uint64_t result = v32;
    uint64_t v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1::~$_1(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(atomic_uchar ***)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }
  uint64_t v5 = *(WTF::WorkQueue **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v5) {
    WTF::WorkQueue::deref(v5);
  }
  unsigned int v6 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  unint64_t v7 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = *(unsigned int **)a1;
  *(void *)a1 = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, a2);
  }
  return a1;
}

BOOL WebKit::ResourceLoadStatisticsStore::isPrevalentResource(WebKit::ResourceLoadStatisticsStore *this, const WebCore::RegistrableDomain **a2)
{
  if (!*((unsigned char *)this + 225) && !*((unsigned char *)this + 715) && (MEMORY[0x19972E990](*a2, "localhost", 9) & 1) != 0) {
    return 0;
  }
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, (WebCore::SQLiteStatement **)this + 52, (uint64_t)"isPrevalentResource", (WebCore::SQLiteStatementAutoResetScope *)&v6);
  BOOL v4 = WebKit::ResourceLoadStatisticsStore::predicateValueForDomain(this, &v6, *a2) != 0;
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v6);
  return v4;
}

uint64_t WebKit::ResourceLoadStatisticsStore::hasHadUserInteraction(uint64_t a1, const WebCore::RegistrableDomain *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)a1, (uint64_t)v12);
  WebKit::DatabaseUtilities::scopedStatement(a1, (WebCore::SQLiteStatement **)(a1 + 448), (uint64_t)"hasHadUserInteraction", (WebCore::SQLiteStatementAutoResetScope *)&v11);
  if (!v11
    || WebCore::SQLiteStatement::bindText()
    || WebCore::SQLiteStatement::step(v11) != 100)
  {
    unsigned int v6 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 656);
      int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      *(_DWORD *)long long buf = 134218755;
      *(void *)&uint8_t buf[4] = a1;
      __int16 v14 = 2048;
      uint64_t v15 = v8;
      __int16 v16 = 1024;
      int v17 = Error;
      __int16 v18 = 2081;
      uint64_t v19 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::hasHadUserInteraction: failed to step statement", buf, 0x26u);
    }
    goto LABEL_10;
  }
  if (!WebCore::SQLiteStatement::columnInt(v11))
  {
LABEL_10:
    uint64_t v4 = 0;
    goto LABEL_11;
  }
  uint64_t v4 = 1;
  WebCore::SQLiteStatement::columnDouble(v11);
  if (((uint64_t (*)(uint64_t, void))WebKit::ResourceLoadStatisticsStore::hasStatisticsExpired)(a1, 0))
  {
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v5 = &unk_1EE9C7C10;
    *(void *)long long buf = v5;
    WebKit::ResourceLoadStatisticsStore::clearUserInteraction((void *)a1, a2, (uint64_t *)buf);
    if (*(void *)buf) {
      (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
    }
    goto LABEL_10;
  }
LABEL_11:
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v11);
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v12);
  return v4;
}

unsigned char *WebKit::ResourceLoadStatisticsStore::clearUserInteraction(void *a1, const WebCore::RegistrableDomain *a2, uint64_t *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)a1, (uint64_t)v16);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)a1, a2, (uint64_t)"clearUserInteraction");
  if (v6)
  {
    WebKit::ResourceLoadStatisticsStore::setUserInteraction((uint64_t)a1, 0.0);
    WebCore::SQLiteDatabase::prepareStatement();
    if (v15 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v14)) {
      goto LABEL_7;
    }
    if (v15) {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v14) != 101)
    {
LABEL_7:
      unint64_t v7 = qword_1EB358460;
      if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = a1[82];
        int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 2));
        uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 2));
        *(_DWORD *)long long buf = 134218755;
        __int16 v18 = a1;
        __int16 v19 = 2048;
        uint64_t v20 = v11;
        __int16 v21 = 1024;
        int v22 = Error;
        __int16 v23 = 2081;
        uint64_t v24 = ErrorMsg;
        _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::clearUserInteraction: failed to step statement", buf, 0x26u);
      }
      uint64_t v8 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    else
    {
      WebKit::ResourceLoadStatisticsStore::updateCookieBlocking((uint64_t)a1, a3);
    }
    if (v15 != -1) {
      (*(&off_1EE9C7600 + v15))((int)buf, (WebCore::SQLiteStatement *)v14);
    }
  }
  else
  {
    uint64_t v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v16);
}

void WebKit::ResourceLoadStatisticsStore::dumpResourceLoadStatistics(uint64_t a1, uint64_t *a2)
{
  uint64_t v171 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 718))
  {
    WebKit::DatabaseUtilities::scopedStatement(a1, (WebCore::SQLiteStatement **)(a1 + 528), (uint64_t)"dumpResourceLoadStatistics", (WebCore::SQLiteStatementAutoResetScope *)&v159);
    BOOL v12 = v159;
    if (v159)
    {
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      while (WebCore::SQLiteStatement::step(v12) == 100)
      {
        WebCore::SQLiteStatement::columnText(v159);
        LODWORD(v14) = HIDWORD(v158);
        if (HIDWORD(v158) == v158)
        {
          int v17 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v157, HIDWORD(v158) + 1, (unint64_t)buf);
          uint64_t v14 = HIDWORD(v158);
          uint64_t v18 = (uint64_t)v157;
          uint64_t v19 = *v17;
          *int v17 = 0;
          *(void *)(v18 + 8 * v14) = v19;
        }
        else
        {
          uint64_t v15 = *(void *)buf;
          *(void *)long long buf = 0;
          v157[HIDWORD(v158)] = v15;
        }
        HIDWORD(v15++*(_DWORD *)(this + 8) = v14 + 1;
        __int16 v16 = *(WTF::StringImpl **)buf;
        *(void *)long long buf = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            WTF::StringImpl::destroy(v16, v13);
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
        BOOL v12 = v159;
      }
      int8x16x2_t v143 = a2;
      *(void *)long long buf = WTF::codePointCompareLessThan;
      unint64_t v20 = 126 - 2 * __clz(HIDWORD(v158));
      if (HIDWORD(v158)) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,false>((uint64_t)v157, (char *)&v157[HIDWORD(v158)], (uint64_t (**)(uint64_t *, uint64_t *))buf, v21, 1);
      uint64_t v153 = 0;
      char v154 = 0;
      unsigned int v155 = 0;
      char v156 = 1;
      WTF::StringBuilder::append();
      if (HIDWORD(v158))
      {
        int v22 = v157;
        __int16 v23 = &v157[HIDWORD(v158)];
        uint64_t v24 = (WebCore::SQLiteStatement **)(a1 + 520);
        uint64_t v145 = (WebCore::SQLiteDatabase *)(a1 + 16);
        uint64_t v25 = "Registrable domain: ";
        int8x16x2_t v142 = v23;
        do
        {
          WebKit::DatabaseUtilities::scopedStatement(a1, v24, (uint64_t)"resourceToString", (WebCore::SQLiteStatementAutoResetScope *)&v147);
          if (v147
            && !WebCore::SQLiteStatement::bindText()
            && WebCore::SQLiteStatement::step(v147) == 100)
          {
            *(void *)long long buf = v25;
            *(void *)&buf[8] = 21;
            LOBYTE(v163) = 10;
            WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char>((WTF::StringBuilder *)&v153, (uint64_t)buf, v22, (char *)&v163);
            BOOL v26 = WebCore::SQLiteStatement::columnInt(*v24) != 0;
            WebKit::appendBoolean((WTF::StringBuilder *)&v153, (int8x16_t *)"hadUserInteraction", 19, v26);
            buf[0] = 10;
            if (!v154 || (uint64_t v27 = v155, v155 >= *((_DWORD *)v154 + 1)) || v153)
            {
              WTF::StringBuilder::append();
            }
            else
            {
              int v28 = *((_DWORD *)v154 + 4);
              uint64_t v29 = *((void *)v154 + 1);
              ++v155;
              if ((v28 & 4) != 0) {
                *(unsigned char *)(v29 + v27) = 10;
              }
              else {
                *(_WORD *)(v29 + 2 * v27) = 10;
              }
            }
            WTF::StringBuilder::append();
            int v30 = (WTF::WallTime *)WebCore::SQLiteStatement::columnDouble(*(WebCore::SQLiteStatement **)(a1 + 520));
            WTF::WallTime::now(v30);
            WTF::StringBuilder::append();
            buf[0] = 10;
            if (!v154 || (uint64_t v31 = v155, v155 >= *((_DWORD *)v154 + 1)) || v153)
            {
              WTF::StringBuilder::append();
            }
            else
            {
              int v32 = *((_DWORD *)v154 + 4);
              uint64_t v33 = *((void *)v154 + 1);
              ++v155;
              if ((v32 & 4) != 0) {
                *(unsigned char *)(v33 + v3objc_destroyWeak(this + 1) = 10;
              }
              else {
                *(_WORD *)(v33 + 2 * v3objc_destroyWeak(this + 1) = 10;
              }
            }
            BOOL v34 = WebCore::SQLiteStatement::columnInt(*v24) != 0;
            WebKit::appendBoolean((WTF::StringBuilder *)&v153, (int8x16_t *)"grandfathered", 14, v34);
            buf[0] = 10;
            if (!v154 || (uint64_t v35 = v155, v155 >= *((_DWORD *)v154 + 1)) || v153)
            {
              WTF::StringBuilder::append();
            }
            else
            {
              int v36 = *((_DWORD *)v154 + 4);
              uint64_t v37 = *((void *)v154 + 1);
              ++v155;
              if ((v36 & 4) != 0) {
                *(unsigned char *)(v37 + v35) = 10;
              }
              else {
                *(_WORD *)(v37 + 2 * v35) = 10;
              }
            }
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "StorageAccessUnderTopFrameDomains", 34, (WebCore::RegistrableDomain *)v22);
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "TopFrameUniqueRedirectsTo", 26, (WebCore::RegistrableDomain *)v22);
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "TopFrameUniqueRedirectsToSinceSameSiteStrictEnforcement", 56, (WebCore::RegistrableDomain *)v22);
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "TopFrameUniqueRedirectsFrom", 28, (WebCore::RegistrableDomain *)v22);
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "TopFrameLinkDecorationsFrom", 28, (WebCore::RegistrableDomain *)v22);
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "TopFrameLoadedThirdPartyScripts", 32, (WebCore::RegistrableDomain *)v22);
            WebCore::SQLiteStatement::columnInt(*(WebCore::SQLiteStatement **)(a1 + 520));
            *(void *)long long buf = "    DataRemovalFrequency: ";
            *(void *)&buf[8] = 27;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            LOBYTE(v16objc_destroyWeak(this + 1) = 10;
            WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char>((WTF::StringBuilder *)&v153, (uint64_t)buf, (uint64_t *)&v163, (char *)&v161);
            uint64_t v39 = v163;
            uint64_t v163 = 0;
            if (v39)
            {
              if (*(_DWORD *)v39 == 2) {
                WTF::StringImpl::destroy(v39, v38);
              }
              else {
                *(_DWORD *)v39 -= 2;
              }
            }
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "SubframeUnderTopFrameDomains", 29, (WebCore::RegistrableDomain *)v22);
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "SubresourceUnderTopFrameDomains", 32, (WebCore::RegistrableDomain *)v22);
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "SubresourceUniqueRedirectsTo", 29, (WebCore::RegistrableDomain *)v22);
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "SubresourceUniqueRedirectsFrom", 31, (WebCore::RegistrableDomain *)v22);
            BOOL v45 = WebCore::SQLiteStatement::columnInt(*(WebCore::SQLiteStatement **)(a1 + 520)) != 0;
            WebKit::appendBoolean((WTF::StringBuilder *)&v153, (int8x16_t *)"isPrevalentResource", 20, v45);
            buf[0] = 10;
            if (!v154 || (uint64_t v46 = v155, v155 >= *((_DWORD *)v154 + 1)) || v153)
            {
              WTF::StringBuilder::append();
            }
            else
            {
              int v47 = *((_DWORD *)v154 + 4);
              uint64_t v48 = *((void *)v154 + 1);
              ++v155;
              if ((v47 & 4) != 0) {
                *(unsigned char *)(v48 + v46) = 10;
              }
              else {
                *(_WORD *)(v48 + 2 * v46) = 10;
              }
            }
            BOOL v49 = WebCore::SQLiteStatement::columnInt(*v24) != 0;
            WebKit::appendBoolean((WTF::StringBuilder *)&v153, (int8x16_t *)"isVeryPrevalentResource", 24, v49);
            buf[0] = 10;
            if (!v154 || (uint64_t v50 = v155, v155 >= *((_DWORD *)v154 + 1)) || v153)
            {
              WTF::StringBuilder::append();
            }
            else
            {
              int v51 = *((_DWORD *)v154 + 4);
              uint64_t v52 = *((void *)v154 + 1);
              ++v155;
              if ((v51 & 4) != 0) {
                *(unsigned char *)(v52 + v50) = 10;
              }
              else {
                *(_WORD *)(v52 + 2 * v50) = 10;
              }
            }
            uint64_t v53 = WebCore::SQLiteStatement::columnInt(*v24);
            uint64_t v54 = v53;
            if ((v53 & 0x80000000) != 0)
            {
              unsigned int v63 = -(int)v53;
              unsigned int v55 = 1;
              do
              {
                ++v55;
                BOOL v64 = v63 >= 0xA;
                v63 /= 0xAu;
              }
              while (v64);
            }
            else
            {
              unsigned int v55 = 0;
              unsigned int v56 = v53;
              do
              {
                ++v55;
                BOOL v57 = v56 > 9;
                v56 /= 0xAu;
              }
              while (v57);
            }
            if (v55 >= 0xFFFFFFE8) {
              int v58 = -1;
            }
            else {
              int v58 = v55 + 24;
            }
            if (__CFADD__(v58, v155)) {
              uint64_t v59 = 0xFFFFFFFFLL;
            }
            else {
              uint64_t v59 = v58 + v155;
            }
            unsigned int v60 = v154;
            if ((v154 || (unsigned int v60 = v153) != 0) && (*((unsigned char *)v60 + 16) & 4) == 0)
            {
              uint64_t v61 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v153);
              if (v61)
              {
                for (uint64_t i = 0; i != 24; ++i)
                  *(_WORD *)(v61 + 2 * i) = aDatarecordsrem_0[i];
                *(_DWORD *)long long buf = v54;
                WTF::StringTypeAdapter<int,void>::writeTo<char16_t>((unsigned int *)buf, (_WORD *)(v61 + 48));
              }
            }
            else
            {
              uint64_t v65 = MEMORY[0x19972DE60](&v153, v59);
              if (v65)
              {
                qmemcpy((void *)v65, "    dataRecordsRemoved: ", 24);
                WTF::writeIntegerToBuffer<unsigned char,int>(v54, (void *)(v65 + 24));
              }
            }
            buf[0] = 10;
            if (v154 && ((uint64_t v66 = v155, v155 < *((_DWORD *)v154 + 1)) ? (v67 = v153 == 0) : (v67 = 0), v67))
            {
              int v68 = *((_DWORD *)v154 + 4);
              uint64_t v69 = *((void *)v154 + 1);
              ++v155;
              if ((v68 & 4) != 0) {
                *(unsigned char *)(v69 + v66) = 10;
              }
              else {
                *(_WORD *)(v69 + 2 * v66) = 10;
              }
            }
            else
            {
              WTF::StringBuilder::append();
            }
          }
          else
          {
            uint64_t v40 = qword_1EB358460;
            if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
            {
              uint64_t v41 = *(void *)(a1 + 656);
              char v42 = v25;
              int Error = WebCore::SQLiteDatabase::lastError(v145);
              uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v145);
              *(_DWORD *)long long buf = 134218755;
              *(void *)&uint8_t buf[4] = a1;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v41;
              __int16 v23 = v142;
              uint64_t v24 = (WebCore::SQLiteStatement **)(a1 + 520);
              __int16 v167 = 1024;
              int v168 = Error;
              uint64_t v25 = v42;
              __int16 v169 = 2081;
              uint64_t v170 = ErrorMsg;
              _os_log_error_impl(&dword_1985F2000, v40, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::resourceToString: failed to step statement", buf, 0x26u);
            }
          }
          WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v147);
          ++v22;
        }
        while (v22 != v23);
      }
      WebKit::ResourceLoadStatisticsStore::aggregatedThirdPartyData((WebKit::ResourceLoadStatisticsStore *)&v151, a1);
      if (v152)
      {
        WTF::StringBuilder::append();
        if (v152)
        {
          __int16 v70 = v151;
          long long v144 = (WebCore::SQLiteDatabase *)&v151[24 * v152];
          while (1)
          {
            long long v71 = *(WTF::StringImpl **)v70;
            if (*(void *)v70) {
              *(_DWORD *)v71 += 2;
            }
            v147 = v71;
            uint64_t v72 = *((unsigned int *)v70 + 5);
            uint64_t v148 = 0;
            unsigned int v149 = 0;
            unsigned int v150 = v72;
            if (v72)
            {
              if (v72 >= 0xAAAAAAB)
              {
LABEL_247:
                __break(0xC471u);
                JUMPOUT(0x198BE0350);
              }
              int v73 = 24 * v72;
              uint64_t v74 = WTF::fastMalloc((WTF *)(24 * v72));
              unsigned int v149 = (v73 & 0xFFFFFFF8) / 0x18;
              uint64_t v148 = v74;
              unsigned int v75 = *((_DWORD *)v70 + 5);
              if (v75)
              {
                uint64_t v76 = *((void *)v70 + 1);
                uint64_t v77 = v76 + 24 * v75;
                do
                {
                  __int16 v78 = *(_DWORD **)v76;
                  if (*(void *)v76) {
                    *v78 += 2;
                  }
                  *(void *)uint64_t v74 = v78;
                  *(_OWORD *)(v74 + ++*(_DWORD *)(this + 8) = *(_OWORD *)(v76 + 8);
                  v76 += 24;
                  v74 += 24;
                }
                while (v76 != v77);
              }
            }
            v146 = (WebCore::SQLiteDatabase *)v70;
            memset(buf, 0, 20);
            buf[20] = 1;
            uint64_t v163 = (WTF::StringImpl *)"Third Party Registrable Domain: ";
            uint64_t v164 = 33;
            BOOL v161 = "\n    {";
            uint64_t v162 = 7;
            uint64_t v79 = (WTF::WallTime *)WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)buf, (uint64_t)&v163, (uint64_t *)&v147, (uint64_t)&v161);
            if (v150) {
              break;
            }
LABEL_184:
            LOBYTE(v163) = 125;
            if (!*(void *)&buf[8]
              || (uint64_t v116 = *(unsigned int *)&buf[16], *(_DWORD *)&buf[16] >= *(_DWORD *)(*(void *)&buf[8] + 4))
              || *(void *)buf)
            {
              WTF::StringBuilder::append();
            }
            else
            {
              int v117 = *(_DWORD *)(*(void *)&buf[8] + 16);
              uint64_t v118 = *(void *)(*(void *)&buf[8] + 8);
              ++*(_DWORD *)&buf[16];
              if ((v117 & 4) != 0) {
                *(unsigned char *)(v118 + v116) = 125;
              }
              else {
                *(_WORD *)(v118 + 2 * v116) = 125;
              }
            }
            long long v119 = *(WTF::StringImpl **)buf;
            if (*(void *)buf
              || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)buf),
                  WTF::StringBuilder::reifyString((WTF::StringBuilder *)buf),
                  (long long v119 = *(WTF::StringImpl **)buf) != 0))
            {
              *(_DWORD *)v119 += 2;
            }
            long long v120 = *(WTF::StringImpl **)&buf[8];
            *(void *)&buf[8] = 0;
            if (v120)
            {
              if (*(_DWORD *)v120 == 2) {
                WTF::StringImpl::destroy(v120, v80);
              }
              else {
                *(_DWORD *)v120 -= 2;
              }
            }
            long long v121 = *(WTF::StringImpl **)buf;
            *(void *)long long buf = 0;
            if (v121)
            {
              if (*(_DWORD *)v121 == 2) {
                WTF::StringImpl::destroy(v121, v80);
              }
              else {
                *(_DWORD *)v121 -= 2;
              }
            }
            long long v122 = v154;
            if ((v154 || (long long v122 = v153) != 0) && (*((unsigned char *)v122 + 16) & 4) == 0
              || v119 && (*((unsigned char *)v119 + 16) & 4) == 0)
            {
              long long v123 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v153);
              if (v123)
              {
                long long v125 = v123;
                *(void *)long long buf = v119;
                WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)buf, v123);
                uint64_t v126 = *(void *)buf;
                if (*(void *)buf) {
                  uint64_t v126 = *(unsigned int *)(*(void *)buf + 4);
                }
                *(_WORD *)&v125[2 * v126] = 10;
              }
            }
            else
            {
              long long v127 = (char *)MEMORY[0x19972DE60](&v153);
              if (v127)
              {
                long long v128 = v127;
                *(void *)long long buf = v119;
                WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)buf, v127);
                uint64_t v129 = *(void *)buf;
                if (*(void *)buf) {
                  uint64_t v129 = *(unsigned int *)(*(void *)buf + 4);
                }
                v128[v129] = 10;
              }
            }
            if (v119)
            {
              if (*(_DWORD *)v119 == 2) {
                WTF::StringImpl::destroy(v119, v124);
              }
              else {
                *(_DWORD *)v119 -= 2;
              }
            }
            WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v148, v124);
            uint64_t v131 = v147;
            v147 = 0;
            if (v131)
            {
              if (*(_DWORD *)v131 == 2) {
                WTF::StringImpl::destroy(v131, v130);
              }
              else {
                *(_DWORD *)v131 -= 2;
              }
            }
            __int16 v70 = (char *)v146 + 24;
            if ((WebCore::SQLiteDatabase *)((char *)v146 + 24) == v144) {
              goto LABEL_226;
            }
          }
          uint64_t v81 = v148;
          uint64_t v82 = v148 + 24 * v150;
          while (1)
          {
            uint64_t v83 = *(void *)v81;
            if (*(void *)v81)
            {
              *(_DWORD *)v83 += 2;
              int v84 = *(unsigned __int8 *)(v81 + 8);
              double v85 = *(double *)(v81 + 16);
              uint64_t v163 = (WTF::StringImpl *)"{ ";
              uint64_t v164 = 3;
              if (v84) {
                unsigned __int8 v86 = 49;
              }
              else {
                unsigned __int8 v86 = 48;
              }
              *(_DWORD *)v83 += 4;
            }
            else
            {
              int v115 = *(unsigned __int8 *)(v81 + 8);
              double v85 = *(double *)(v81 + 16);
              uint64_t v163 = (WTF::StringImpl *)"{ ";
              uint64_t v164 = 3;
              if (v115) {
                unsigned __int8 v86 = 49;
              }
              else {
                unsigned __int8 v86 = 48;
              }
            }
            WTF::WallTime::now(v79);
            if (v88 - v85 >= 86400.0) {
              __int16 v89 = 48;
            }
            else {
              __int16 v89 = 49;
            }
            if (v83)
            {
              int v90 = *(_DWORD *)(v83 + 4);
              if (v90 < 0) {
                goto LABEL_247;
              }
            }
            else
            {
              int v90 = 0;
            }
            if (__OFADD__(v90, 24)) {
              goto LABEL_247;
            }
            if (__OFADD__(v90 + 24, 22)) {
              goto LABEL_247;
            }
            if (__OFADD__(v90 + 46, 1)) {
              goto LABEL_247;
            }
            int v91 = v90 + 49;
            if (__OFADD__(v90 + 47, 2)) {
              goto LABEL_247;
            }
            BOOL v92 = __OFADD__(v90, v91);
            int v93 = v90 + v91;
            if (v92) {
              goto LABEL_247;
            }
            uint64_t v94 = (v93 + 38);
            if (__OFADD__(v93, 38)) {
              goto LABEL_247;
            }
            if (!v83 || (*(unsigned char *)(v83 + 16) & 4) != 0) {
              break;
            }
            if (v93 != -38)
            {
              if (v94 > 0x7FFFFFEF) {
                goto LABEL_247;
              }
              WTF::tryFastCompactMalloc((WTF *)(2 * v94 + 20));
              uint64_t v95 = (uint64_t)v161;
              if (!v161) {
                goto LABEL_247;
              }
              *(_DWORD *)BOOL v161 = 2;
              *(_DWORD *)(v95 + 4) = v94;
              *(void *)(v95 + ++*(_DWORD *)(this + 8) = v95 + 20;
              *(_DWORD *)(v95 + 16) = 0;
              uint64_t v96 = 20;
              long long v97 = "Has been granted storage access under ";
              do
              {
                __int16 v98 = *(unsigned __int8 *)v97++;
                *(_WORD *)(v95 + v96) = v98;
                v96 += 2;
              }
              while (v96 != 96);
              uint64_t v165 = v83;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v165, (char *)(v95 + 96));
              if (v165) {
                uint64_t v99 = *(unsigned int *)(v165 + 4);
              }
              else {
                uint64_t v99 = 0;
              }
              uint64_t v100 = 0;
              uint64_t v101 = v95 + 96 + 2 * v99;
              *(_DWORD *)uint64_t v101 = 2097210;
              *(_WORD *)(v101 + 4) = v86;
              do
              {
                *(_WORD *)(v95 + 2 * v99 + 102 + 2 * v100) = aHasBeenSeenUnd[v100];
                ++v100;
              }
              while (v100 != 22);
              uint64_t v102 = v101 + 50;
              BOOL v161 = (char *)v83;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v161, (char *)(v101 + 50));
              if (v161) {
                uint64_t v103 = *((unsigned int *)v161 + 1);
              }
              else {
                uint64_t v103 = 0;
              }
              uint64_t v104 = 0;
              uint64_t v105 = v102 + 2 * v103;
              uint64_t v106 = v95 + 2 * v99 + 2 * v103 + 146;
              do
              {
                *(_WORD *)(v106 + 2 * v104) = aInTheLast24Hou[v104];
                ++v104;
              }
              while (v104 != 23);
              *(_WORD *)(v105 + 46) = v89;
              goto LABEL_158;
            }
            long long v114 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
            *MEMORY[0x1E4F30960] += 2;
            uint64_t v160 = v114;
LABEL_159:
            int v112 = *(_DWORD *)v83 - 2;
            if (*(_DWORD *)v83 == 2)
            {
              WTF::StringImpl::destroy((WTF::StringImpl *)v83, v87);
              int v112 = *(_DWORD *)v83;
            }
            else
            {
              *(_DWORD *)uint64_t v83 = v112;
            }
            int v113 = v112 - 2;
            if (v113) {
              *(_DWORD *)uint64_t v83 = v113;
            }
            else {
              WTF::StringImpl::destroy((WTF::StringImpl *)v83, v87);
            }
LABEL_165:
            BOOL v161 = " },";
            uint64_t v162 = 4;
            WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)buf, (uint64_t)&v163, (uint64_t *)&v160, (uint64_t)&v161);
            uint64_t v79 = v160;
            uint64_t v160 = 0;
            if (!v79) {
              goto LABEL_168;
            }
            if (*(_DWORD *)v79 != 2)
            {
              *(_DWORD *)v79 -= 2;
LABEL_168:
              if (v83) {
                goto LABEL_171;
              }
              goto LABEL_174;
            }
            uint64_t v79 = (WTF::WallTime *)WTF::StringImpl::destroy(v79, v80);
            if (v83)
            {
LABEL_171:
              if (*(_DWORD *)v83 == 2) {
                uint64_t v79 = (WTF::WallTime *)WTF::StringImpl::destroy((WTF::StringImpl *)v83, v80);
              }
              else {
                *(_DWORD *)v83 -= 2;
              }
            }
LABEL_174:
            v81 += 24;
            if (v81 == v82) {
              goto LABEL_184;
            }
          }
          if (v93 == -38)
          {
            uint64_t v95 = MEMORY[0x1E4F30960];
            *MEMORY[0x1E4F30960] += 2;
          }
          else
          {
            if ((v94 & 0x80000000) != 0) {
              goto LABEL_247;
            }
            WTF::tryFastCompactMalloc((WTF *)(v94 + 20));
            uint64_t v95 = (uint64_t)v161;
            if (!v161) {
              goto LABEL_247;
            }
            *(_DWORD *)BOOL v161 = 2;
            *(_DWORD *)(v95 + 4) = v94;
            *(void *)(v95 + ++*(_DWORD *)(this + 8) = v95 + 20;
            *(_DWORD *)(v95 + 16) = 4;
            qmemcpy((void *)(v95 + 20), "Has been granted storage access under ", 38);
            uint64_t v165 = v83;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v165, (char *)(v95 + 58));
            uint64_t v107 = v165;
            if (v165) {
              uint64_t v107 = *(unsigned int *)(v165 + 4);
            }
            uint64_t v108 = v95 + 58 + v107;
            *(_WORD *)uint64_t v108 = 8250;
            *(unsigned char *)(v108 + objc_destroyWeak(this + 2) = v86;
            qmemcpy((void *)(v108 + 3), "; Has been seen under ", 22);
            uint64_t v109 = v108 + 25;
            BOOL v161 = (char *)v83;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v161, (char *)(v108 + 25));
            long long v110 = v161;
            if (v161) {
              long long v110 = (char *)*((unsigned int *)v161 + 1);
            }
            long long v111 = &v110[v109];
            qmemcpy(v111, " in the last 24 hours: ", 23);
            v111[23] = v89;
          }
LABEL_158:
          uint64_t v160 = (WTF::StringImpl *)v95;
          if (!v83) {
            goto LABEL_165;
          }
          goto LABEL_159;
        }
      }
LABEL_226:
      int8x16x2_t v132 = v153;
      if (v153
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v153),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v153),
            (int8x16x2_t v132 = v153) != 0))
      {
        *(_DWORD *)v132 += 2;
      }
      *(void *)long long buf = v132;
      uint64_t v133 = *v143;
      uint64_t *v143 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v133 + 16))(v133, buf);
      (*(void (**)(uint64_t))(*(void *)v133 + 8))(v133);
      int8x16x2_t v135 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v135)
      {
        if (*(_DWORD *)v135 == 2) {
          WTF::StringImpl::destroy(v135, v134);
        }
        else {
          *(_DWORD *)v135 -= 2;
        }
      }
      WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v151, v134);
      int8x16x2_t v140 = v154;
      char v154 = 0;
      if (v140)
      {
        if (*(_DWORD *)v140 == 2) {
          WTF::StringImpl::destroy(v140, v139);
        }
        else {
          *(_DWORD *)v140 -= 2;
        }
      }
      int8x16x2_t v141 = v153;
      uint64_t v153 = 0;
      if (v141)
      {
        if (*(_DWORD *)v141 == 2) {
          WTF::StringImpl::destroy(v141, v139);
        }
        else {
          *(_DWORD *)v141 -= 2;
        }
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v157, v139);
    }
    else
    {
      *(void *)long long buf = 0;
      uint64_t v136 = *a2;
      *a2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v136 + 16))(v136, buf);
      (*(void (**)(uint64_t))(*(void *)v136 + 8))(v136);
      int8x16x2_t v138 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v138)
      {
        if (*(_DWORD *)v138 == 2) {
          WTF::StringImpl::destroy(v138, v137);
        }
        else {
          *(_DWORD *)v138 -= 2;
        }
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v159);
    return;
  }
  uint64_t v4 = *a2;
  *a2 = 0;
  unint64_t v5 = *(unsigned int *)(a1 + 644);
  if (v5 == *(_DWORD *)(a1 + 640))
  {
    uint64_t v6 = a1 + 632;
    unint64_t v7 = v5 + (v5 >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 <= v5 + 1) {
      unint64_t v9 = v5 + 1;
    }
    else {
      unint64_t v9 = v8;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v6, v9);
    unint64_t v5 = *(unsigned int *)(a1 + 644);
  }
  uint64_t v10 = *(void *)(a1 + 632);
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v11 = &unk_1EE9C7C38;
  v11[1] = a1;
  v11[2] = v4;
  *(void *)(v10 + 8 * v5) = v11;
  ++*(_DWORD *)(a1 + 644);
}

uint64_t WTF::codePointCompareLessThan(WTF **this, const WTF::StringImpl **a2, const WTF::String *a3)
{
  return WTF::codePointCompare(*this, *a2, a3) >> 31;
}

uint64_t WebKit::ResourceLoadStatisticsStore::predicateValueForDomain(WebKit::ResourceLoadStatisticsStore *this, WebCore::SQLiteStatement **a2, const WebCore::RegistrableDomain *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*a2
    && !WebCore::SQLiteStatement::bindText()
    && WebCore::SQLiteStatement::step(*a2) == 100)
  {
    unint64_t v5 = *a2;
    return WebCore::SQLiteStatement::columnInt(v5);
  }
  else
  {
    unint64_t v7 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *((void *)this + 82);
      int v9 = 134218755;
      uint64_t v10 = this;
      __int16 v11 = 2048;
      uint64_t v12 = v8;
      __int16 v13 = 1024;
      int Error = WebCore::SQLiteDatabase::lastError((WebKit::ResourceLoadStatisticsStore *)((char *)this + 16));
      __int16 v15 = 2081;
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebKit::ResourceLoadStatisticsStore *)((char *)this + 16));
      _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::predicateValueForDomain: failed to step statement", (uint8_t *)&v9, 0x26u);
    }
    return 0;
  }
}

uint64_t WebKit::ResourceLoadStatisticsStore::domains(WebKit::ResourceLoadStatisticsStore *this)
{
  *(void *)this = 0;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  uint64_t result = WebCore::SQLiteDatabase::prepareStatement();
  unsigned int v3 = v22;
  if (!v22)
  {
    while (1)
    {
      uint64_t result = WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v21);
      if (result != 100) {
        break;
      }
      if (!v22)
      {
        int v17 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v21);
        if (!v22)
        {
          WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v21);
          WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v16, &v18);
          if (!v22)
          {
            WebCore::SQLiteStatement::columnDouble((WebCore::SQLiteStatement *)v21);
            *(void *)&long long v19 = v4;
            if (!v22)
            {
              WebCore::SQLiteStatement::columnDouble((WebCore::SQLiteStatement *)v21);
              *((void *)&v19 + objc_destroyWeak(this + 1) = v5;
              if (!v22)
              {
                LOBYTE(v20) = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v21) != 0;
                if (!v22)
                {
                  BYTE1(v20) = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v21) != 0;
                  if (!v22)
                  {
                    unsigned int v6 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v21);
                    char v7 = v6 >= 3 ? 1 : v6;
                    BYTE2(v20) = v7;
                    if (!v22)
                    {
                      HIDWORD(v20) = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v21);
                      unsigned int v9 = *((_DWORD *)this + 3);
                      if (v9 == *((_DWORD *)this + 2))
                      {
                        WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ResourceLoadStatisticsStore::DomainData>((unsigned int *)this, (unint64_t)&v17);
                      }
                      else
                      {
                        unsigned int v12 = v9 + 1;
                        uint64_t v13 = *(void *)this + 40 * v9;
                        *(_DWORD *)uint64_t v13 = v17;
                        uint64_t v14 = v18;
                        uint64_t v18 = 0;
                        *(void *)(v13 + ++*(_DWORD *)(this + 8) = v14;
                        uint64_t v15 = v20;
                        *(_OWORD *)(v13 + 16) = v19;
                        *(void *)(v13 + 3objc_destroyWeak(this + 2) = v15;
                        *((_DWORD *)this + 3) = v12;
                      }
                      uint64_t v10 = v18;
                      uint64_t v18 = 0;
                      if (v10)
                      {
                        if (*(_DWORD *)v10 == 2) {
                          WTF::StringImpl::destroy(v10, v8);
                        }
                        else {
                          *(_DWORD *)v10 -= 2;
                        }
                      }
                      __int16 v11 = v16;
                      __int16 v16 = 0;
                      if (v11)
                      {
                        if (*(_DWORD *)v11 == 2) {
                          WTF::StringImpl::destroy(v11, v8);
                        }
                        else {
                          *(_DWORD *)v11 -= 2;
                        }
                      }
                      if (!v22) {
                        continue;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
      break;
    }
    unsigned int v3 = v22;
  }
  if (v3 != -1) {
    return (*(&off_1EE9C7600 + v3))((int)&v17, (WebCore::SQLiteStatement *)v21);
  }
  return result;
}

void WebKit::RegistrableDomainsToBlockCookiesFor::~RegistrableDomainsToBlockCookiesFor(WebKit::RegistrableDomainsToBlockCookiesFor *this, void *a2)
{
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v3, a2);
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, v4);

  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this, v5);
}

uint64_t WebKit::ResourceLoadStatisticsStore::domainsToBlockButKeepCookiesFor(WebKit::ResourceLoadStatisticsStore *this)
{
  *(void *)this = 0;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  uint64_t result = WebCore::SQLiteDatabase::prepareStatement();
  unsigned int v3 = v13;
  if (!v13)
  {
    while (1)
    {
      uint64_t result = WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v12);
      if (result != 100) {
        break;
      }
      if (!v13)
      {
        WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v12);
        WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v10, &v11);
        uint64_t v5 = *((unsigned int *)this + 3);
        if (v5 == *((_DWORD *)this + 2))
        {
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain>((uint64_t)this, (unint64_t)&v11);
        }
        else
        {
          uint64_t v6 = *(void *)this;
          char v7 = v11;
          __int16 v11 = 0;
          *(void *)(v6 + 8 * v5) = v7;
          *((_DWORD *)this + 3) = v5 + 1;
        }
        uint64_t v8 = v11;
        __int16 v11 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 != 2)
          {
            *(_DWORD *)v8 -= 2;
            goto LABEL_13;
          }
          goto LABEL_18;
        }
        goto LABEL_13;
      }
      do
      {
        uint64_t v8 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
        WTF::StringImpl::destroy(v8, v4);
LABEL_13:
        unsigned int v9 = v10;
        uint64_t v10 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2) {
            WTF::StringImpl::destroy(v9, v4);
          }
          else {
            *(_DWORD *)v9 -= 2;
          }
        }
      }
      while (v13);
    }
    unsigned int v3 = v13;
  }
  if (v3 != -1) {
    return (*(&off_1EE9C7600 + v3))((int)&v11, (WebCore::SQLiteStatement *)v12);
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::domainsWithUserInteractionAsFirstParty(WebKit::ResourceLoadStatisticsStore *this)
{
  *(void *)this = 0;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  uint64_t result = WebCore::SQLiteDatabase::prepareStatement();
  unsigned int v3 = v13;
  if (!v13)
  {
    while (1)
    {
      uint64_t result = WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v12);
      if (result != 100) {
        break;
      }
      if (!v13)
      {
        WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v12);
        WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v10, &v11);
        uint64_t v5 = *((unsigned int *)this + 3);
        if (v5 == *((_DWORD *)this + 2))
        {
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain>((uint64_t)this, (unint64_t)&v11);
        }
        else
        {
          uint64_t v6 = *(void *)this;
          char v7 = v11;
          __int16 v11 = 0;
          *(void *)(v6 + 8 * v5) = v7;
          *((_DWORD *)this + 3) = v5 + 1;
        }
        uint64_t v8 = v11;
        __int16 v11 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 != 2)
          {
            *(_DWORD *)v8 -= 2;
            goto LABEL_13;
          }
          goto LABEL_18;
        }
        goto LABEL_13;
      }
      do
      {
        uint64_t v8 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
        WTF::StringImpl::destroy(v8, v4);
LABEL_13:
        unsigned int v9 = v10;
        uint64_t v10 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2) {
            WTF::StringImpl::destroy(v9, v4);
          }
          else {
            *(_DWORD *)v9 -= 2;
          }
        }
      }
      while (v13);
    }
    unsigned int v3 = v13;
  }
  if (v3 != -1) {
    return (*(&off_1EE9C7600 + v3))((int)&v11, (WebCore::SQLiteStatement *)v12);
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::domainsWithStorageAccess(WebKit::ResourceLoadStatisticsStore *this)
{
  *(void *)this = 0;
  uint64_t result = WebCore::SQLiteDatabase::prepareStatement();
  unsigned int v3 = v21;
  if (!v21)
  {
    while (1)
    {
      uint64_t result = WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v20);
      if (result != 100) {
        break;
      }
      if (!v21)
      {
        WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v20);
        WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v17, &v18);
        v16[0] = 0;
        v16[1] = 0;
        WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)this, &v18, v16, (uint64_t)v19);
        if (!v21)
        {
          uint64_t v4 = v19[0];
          WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v20);
          WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v14, &v15);
          uint64_t v6 = *(unsigned int *)(v4 + 20);
          if (v6 == *(_DWORD *)(v4 + 16))
          {
            WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain>(v4 + 8, (unint64_t)&v15);
          }
          else
          {
            uint64_t v7 = *(void *)(v4 + 8);
            uint64_t v8 = v15;
            uint64_t v15 = 0;
            *(void *)(v7 + 8 * v6) = v8;
            *(_DWORD *)(v4 + 20) = v6 + 1;
          }
          unsigned int v9 = v15;
          uint64_t v15 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 != 2)
            {
              *(_DWORD *)v9 -= 2;
              goto LABEL_14;
            }
            goto LABEL_25;
          }
          goto LABEL_14;
        }
      }
      do
      {
        unsigned int v9 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
        WTF::StringImpl::destroy(v9, v5);
LABEL_14:
        uint64_t v10 = v14;
        uint64_t v14 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            WTF::StringImpl::destroy(v10, v5);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v5);
        unsigned int v12 = v18;
        uint64_t v18 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v11);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
        unsigned int v13 = v17;
        int v17 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, v11);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
      }
      while (v21);
    }
    unsigned int v3 = v21;
  }
  if (v3 != -1) {
    return (*(&off_1EE9C7600 + v3))((int)v19, (WebCore::SQLiteStatement *)v20);
  }
  return result;
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x58);
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)uint64_t v4 = &unk_1EE9C7CB0;
  *(void *)(v4 + ++*(_DWORD *)(this + 8) = v5;
  uint64_t v6 = a2[1];
  a2[1] = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 3objc_destroyWeak(this + 2) = 0;
  *(void *)(v4 + 16) = v6;
  uint64_t v7 = a2[2];
  a2[2] = 0;
  *(void *)(v4 + 24) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *(_DWORD *)(v4 + 3objc_destroyWeak(this + 2) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_DWORD *)(v4 + 36) = v7;
  *(void *)(v4 + ++*(_DWORD *)(this - 40) = 0;
  *(void *)(v4 + 4++*(_DWORD *)(this + 8) = 0;
  uint64_t v8 = a2[4];
  a2[4] = 0;
  *(void *)(v4 + ++*(_DWORD *)(this - 40) = v8;
  LODWORD(v++*(_DWORD *)(this + 8) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = 0;
  *(_DWORD *)(v4 + 4++*(_DWORD *)(this + 8) = v8;
  LODWORD(v++*(_DWORD *)(this + 8) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 1objc_destroyWeak(this + 1) = 0;
  *(_DWORD *)(v4 + 5objc_destroyWeak(this + 2) = v8;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = 0;
  uint64_t v9 = a2[6];
  a2[6] = 0;
  *(void *)(v4 + 56) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = 0;
  *(_DWORD *)(v4 + 64) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = 0;
  *(_DWORD *)(v4 + 6++*(_DWORD *)(this + 8) = v9;
  *(void *)(v4 + 7objc_destroyWeak(this + 2) = 0;
  uint64_t v10 = a2[8];
  a2[8] = 0;
  *(void *)(v4 + 7objc_destroyWeak(this + 2) = v10;
  uint64_t v11 = a2[9];
  a2[9] = 0;
  *(void *)(v4 + 80) = v11;
  *a1 = v4;
  return a1;
}

uint64_t WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 72);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, a2);
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 48, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 32, v5);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, v6);
  uint64_t v8 = *(atomic_uchar ***)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  if (v8) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v8);
  }
  uint64_t v9 = *(unsigned int **)a1;
  *(void *)a1 = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v7);
  }
  return a1;
}

void WebKit::ResourceLoadStatisticsStore::clearGrandfathering(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    WebKit::buildList<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v16, a2, a3);
    uint64_t v4 = v16;
    if (v16) {
      *(_DWORD *)v16 += 2;
    }
    unsigned int v13 = v4;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"UPDATE ObservedDomains SET grandfathered = 0 WHERE domainID IN (", 65, (uint64_t *)&v13, 41, buf);
    WebCore::SQLiteDatabase::prepareStatementSlow();
    uint64_t v6 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t v7 = v13;
    unsigned int v13 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v5);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    unsigned int v8 = v15;
    if (!v15)
    {
      if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v14) != 101)
      {
        uint64_t v9 = qword_1EB358460;
        if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
        {
          uint64_t v10 = *(void *)(a1 + 656);
          int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
          uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
          *(_DWORD *)long long buf = 134218755;
          *(void *)&uint8_t buf[4] = a1;
          __int16 v18 = 2048;
          uint64_t v19 = v10;
          __int16 v20 = 1024;
          int v21 = Error;
          __int16 v22 = 2081;
          uint64_t v23 = ErrorMsg;
          _os_log_error_impl(&dword_1985F2000, v9, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::clearGrandfathering: failed to step statement", buf, 0x26u);
        }
      }
      unsigned int v8 = v15;
    }
    if (v8 != -1) {
      (*(&off_1EE9C7600 + v8))((int)buf, (WebCore::SQLiteStatement *)v14);
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v5);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
}

WTF::StringImpl *WebKit::buildList<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::StringImpl **a1, unsigned int *a2, unsigned int a3)
{
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  int v14 = 0;
  char v15 = 1;
  if (a3)
  {
    uint64_t v5 = 4 * a3;
    do
    {
      if (v14) {
        uint64_t v6 = (int8x16_t *)", ";
      }
      else {
        uint64_t v6 = (int8x16_t *)"";
      }
      if (v14) {
        uint64_t v7 = 3;
      }
      else {
        uint64_t v7 = 1;
      }
      unsigned int v8 = *a2++;
      WTF::StringBuilder::append<WTF::ASCIILiteral,unsigned int>((WTF::StringBuilder *)&v12, v6, v7, v8);
      v5 -= 4;
    }
    while (v5);
    uint64_t result = v12;
    if (v12) {
      goto LABEL_12;
    }
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v12);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v12);
  uint64_t result = v12;
  if (v12) {
LABEL_12:
  }
    *(_DWORD *)result += 2;
  *a1 = result;
  uint64_t v11 = v13;
  unsigned int v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v9);
      uint64_t result = v12;
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  unsigned int v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

BOOL WebKit::ResourceLoadStatisticsStore::hasHadUnexpiredRecentUserInteraction(void *a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a2 + 32)) {
    return 0;
  }
  int v3 = a3;
  if (((uint64_t (*)(void *, uint64_t, double))WebKit::ResourceLoadStatisticsStore::hasStatisticsExpired)(a1, a3, *(double *)(a2 + 16)))
  {
    if (!v3)
    {
      uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v6 = &unk_1EE9C7D28;
      unsigned int v8 = v6;
      WebKit::ResourceLoadStatisticsStore::clearUserInteraction(a1, (const WebCore::RegistrableDomain *)(a2 + 8), (uint64_t *)&v8);
      if (v8) {
        (*(void (**)(void *))(*v8 + 8))(v8);
      }
    }
    return 0;
  }
  return *(unsigned char *)(a2 + 32) != 0;
}

BOOL WebKit::ResourceLoadStatisticsStore::shouldRemoveAllWebsiteDataFor(WebKit::ResourceLoadStatisticsStore *a1, uint64_t a2, int a3)
{
  BOOL result = WebKit::ResourceLoadStatisticsStore::isPrevalentResource(a1, (const WebCore::RegistrableDomain **)(a2 + 8));
  if (result)
  {
    BOOL hasHadUnexpiredRecentUserInteraction = WebKit::ResourceLoadStatisticsStore::hasHadUnexpiredRecentUserInteraction(a1, a2, 0);
    BOOL v8 = hasHadUnexpiredRecentUserInteraction;
    BOOL result = !hasHadUnexpiredRecentUserInteraction;
    if (!v8)
    {
      if (a3) {
        return *(unsigned char *)(a2 + 33) == 0;
      }
    }
  }
  return result;
}

BOOL WebKit::ResourceLoadStatisticsStore::shouldRemoveAllButCookiesFor(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3 = *(unsigned __int8 *)(a1 + 714);
  int v4 = *(unsigned __int8 *)(a2 + 34);
  BOOL v6 = v3 == 1 && v4 == 0;
  if (*(unsigned char *)(a2 + 33)) {
    int v7 = a3;
  }
  else {
    int v7 = 0;
  }
  BOOL v8 = v4 == 1;
  if (v3 == 3) {
    int v9 = 3;
  }
  else {
    int v9 = 0;
  }
  BOOL v10 = v3 >= 2;
  if (v3 == 2) {
    unsigned int v11 = 2;
  }
  else {
    unsigned int v11 = v9;
  }
  if (v10) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = v8;
  }
  return ((v6 | v7) & 1) == 0
      && !WebKit::ResourceLoadStatisticsStore::hasHadUnexpiredRecentUserInteraction((void *)a1, a2, v12);
}

uint64_t WebKit::ResourceLoadStatisticsStore::shouldEnforceSameSiteStrictFor(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 713)
    || a3 && *(unsigned char *)(a2 + 33)
    || *(void *)(a1 + 216) >= (unint64_t)*(unsigned int *)(a2 + 36))
  {
    return 0;
  }
  int v4 = (const WebCore::RegistrableDomain *)(a2 + 8);
  uint64_t v5 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v5 = &unk_1EE9C7D50;
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)a1, (uint64_t)v14);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(a1, v4, (uint64_t)"clearTopFrameUniqueRedirectsToSinceSameSiteStrictEnforcement");
  if (v6)
  {
    WebCore::SQLiteDatabase::prepareStatement();
    if (v13 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v12)) {
      goto LABEL_10;
    }
    if (v13) {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v12) != 101)
    {
LABEL_10:
      int v7 = qword_1EB358460;
      if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = *(void *)(a1 + 656);
        int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
        uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
        *(_DWORD *)long long buf = 134218755;
        uint64_t v16 = a1;
        __int16 v17 = 2048;
        uint64_t v18 = v9;
        __int16 v19 = 1024;
        int v20 = Error;
        __int16 v21 = 2081;
        uint64_t v22 = ErrorMsg;
        _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::clearTopFrameUniqueRedirectsToSinceSameSiteStrictEnforcement: failed to step statement", buf, 0x26u);
      }
    }
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    if (v13 != -1) {
      (*(&off_1EE9C7600 + v13))((int)buf, (WebCore::SQLiteStatement *)v12);
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v14);
  return 1;
}

void WebKit::ResourceLoadStatisticsStore::pruneStatisticsIfNeeded(WebCore::SQLiteStatement **this)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 40, (uint64_t)"pruneStatisticsIfNeeded", (WebCore::SQLiteStatementAutoResetScope *)&v26);
  if (v26)
  {
    if (WebCore::SQLiteStatement::step(v26) == 100)
    {
      uint64_t v2 = WebCore::SQLiteStatement::columnInt(v26);
      if ((unint64_t)this[18] < v2)
      {
        unsigned int v3 = (WTF::StringImpl *)v2;
        int v4 = this[17];
        WebCore::SQLiteDatabase::prepareStatement();
        if (!v25 && !WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v24))
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          while (!v25)
          {
            if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v24) != 100)
            {
              WebKit::buildList<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v21, (unsigned int *)v22, HIDWORD(v23));
              unsigned int v3 = v21;
              if (v21) {
                *(_DWORD *)v21 += 2;
              }
              uint64_t v18 = v3;
              WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"DELETE from ObservedDomains WHERE domainID IN (", 48, (uint64_t *)&v18, 41, buf);
              WebCore::SQLiteDatabase::prepareStatementSlow();
              BOOL v8 = *(WTF::StringImpl **)buf;
              *(void *)long long buf = 0;
              if (v8)
              {
                if (*(_DWORD *)v8 == 2) {
                  WTF::StringImpl::destroy(v8, v7);
                }
                else {
                  *(_DWORD *)v8 -= 2;
                }
              }
              uint64_t v9 = v18;
              uint64_t v18 = 0;
              if (v9)
              {
                if (*(_DWORD *)v9 == 2) {
                  WTF::StringImpl::destroy(v9, v7);
                }
                else {
                  *(_DWORD *)v9 -= 2;
                }
              }
              if (!v20 && WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v19) == 101
                || (int v4 = qword_1EB358460, !os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)))
              {
LABEL_28:
                if (v20 != -1) {
                  (*(&off_1EE9C7600 + v20))((int)buf, (WebCore::SQLiteStatement *)v19);
                }
                if (v3)
                {
                  if (*(_DWORD *)v3 == 2) {
                    WTF::StringImpl::destroy(v3, v10);
                  }
                  else {
                    *(_DWORD *)v3 -= 2;
                  }
                }
                unsigned int v11 = v22;
                if (v22)
                {
                  uint64_t v22 = 0;
                  LODWORD(v23) = 0;
                  WTF::fastFree(v11, v10);
                }
                goto LABEL_8;
              }
LABEL_41:
              char v15 = this[82];
              int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
              uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
              *(_DWORD *)long long buf = 134218755;
              *(void *)&uint8_t buf[4] = this;
              __int16 v28 = 2048;
              uint64_t v29 = v15;
              __int16 v30 = 1024;
              int v31 = Error;
              __int16 v32 = 2081;
              uint64_t v33 = ErrorMsg;
              _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::pruneStatisticsIfNeeded: failed to step statement", buf, 0x26u);
              goto LABEL_28;
            }
            if (v25) {
              break;
            }
            int v6 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v24);
            *(_DWORD *)long long buf = v6;
            if (HIDWORD(v23) == v23)
            {
              WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)&v22, buf);
            }
            else
            {
              *((_DWORD *)v22 + HIDWORD(v23)) = v6;
              ++HIDWORD(v23);
            }
          }
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_41;
        }
        uint64_t v5 = qword_1EB358460;
        if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
        {
          uint64_t v12 = this[82];
          int v13 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
          uint64_t v14 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
          *(_DWORD *)long long buf = 134218755;
          *(void *)&uint8_t buf[4] = this;
          __int16 v28 = 2048;
          uint64_t v29 = v12;
          __int16 v30 = 1024;
          int v31 = v13;
          __int16 v32 = 2081;
          uint64_t v33 = v14;
          _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::pruneStatisticsIfNeeded: failed to bind parameter", buf, 0x26u);
        }
LABEL_8:
        if (v25 != -1) {
          (*(&off_1EE9C7600 + v25))((int)buf, (WebCore::SQLiteStatement *)v24);
        }
      }
    }
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v26);
}

void WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(uint64_t a1, WTF::StringBuilder *a2, const char *a3, uint64_t a4, WebCore::RegistrableDomain *a5)
{
  int v7 = (int8x16_t *)a3;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    if ("StorageAccessUnderTopFrameDomains")
    {
      if (!"TopFrameUniqueRedirectsTo") {
        goto LABEL_25;
      }
      if ("TopFrameUniqueRedirectsFrom")
      {
        if ("TopFrameLinkDecorationsFrom")
        {
          if ("TopFrameLoadedThirdPartyScripts")
          {
            if ("SubframeUnderTopFrameDomains")
            {
              if ("SubresourceUnderTopFrameDomains")
              {
                if ("SubresourceUniqueRedirectsTo")
                {
                  if ("SubresourceUniqueRedirectsFrom")
                  {
LABEL_11:
                    unint64_t v10 = 1;
                    goto LABEL_26;
                  }
                  goto LABEL_21;
                }
                goto LABEL_22;
              }
              goto LABEL_57;
            }
LABEL_56:
            unint64_t v10 = 85;
            goto LABEL_26;
          }
          goto LABEL_57;
        }
LABEL_25:
        unint64_t v10 = 74;
        goto LABEL_26;
      }
LABEL_24:
      unint64_t v10 = 78;
      goto LABEL_26;
    }
LABEL_22:
    unint64_t v10 = 82;
    goto LABEL_26;
  }
  if (!strcmp(a3, "StorageAccessUnderTopFrameDomains")) {
    goto LABEL_22;
  }
  if (!strcmp(v7->i8, "TopFrameUniqueRedirectsTo")) {
    goto LABEL_25;
  }
  if (!strcmp(v7->i8, "TopFrameUniqueRedirectsFrom")) {
    goto LABEL_24;
  }
  if (!strcmp(v7->i8, "TopFrameLinkDecorationsFrom")) {
    goto LABEL_25;
  }
  if (strcmp(v7->i8, "TopFrameLoadedThirdPartyScripts"))
  {
    if (!strcmp(v7->i8, "SubframeUnderTopFrameDomains")) {
      goto LABEL_56;
    }
    if (strcmp(v7->i8, "SubresourceUnderTopFrameDomains"))
    {
      if (strcmp(v7->i8, "SubresourceUniqueRedirectsTo"))
      {
        if (strcmp(v7->i8, "SubresourceUniqueRedirectsFrom")) {
          goto LABEL_11;
        }
LABEL_21:
        unint64_t v10 = 86;
        goto LABEL_26;
      }
      goto LABEL_22;
    }
  }
LABEL_57:
  unint64_t v10 = 91;
LABEL_26:
  if (v10 < 2) {
    return;
  }
  WebCore::SQLiteDatabase::prepareStatement();
  if (v44) {
    goto LABEL_33;
  }
  WebCore::RegistrableDomain::uncheckedCreateFromHost(a5, (WTF::StringImpl **)buf);
  if (!((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)a1, (const WebCore::RegistrableDomain *)buf) >> 32))
  {
    uint64_t v38 = (WTF::StringBuilder *)std::__throw_bad_optional_access[abi:sn180100]();
    WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char>(v38, v39, v40, v41);
    return;
  }
  int v12 = WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v43);
  int v13 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (!v13)
  {
LABEL_32:
    if (v12) {
      goto LABEL_33;
    }
    goto LABEL_40;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_32;
  }
  WTF::StringImpl::destroy(v13, v11);
  if (v12)
  {
LABEL_33:
    uint64_t v14 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = *(void *)(a1 + 656);
      int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      *(_DWORD *)long long buf = 134218755;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v29;
      __int16 v47 = 1024;
      int v48 = Error;
      __int16 v49 = 2081;
      uint64_t v50 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v14, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::appendSubStatisticList: failed to bind parameter", buf, 0x26u);
    }
    goto LABEL_35;
  }
LABEL_40:
  if (v44) {
    goto LABEL_74;
  }
  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v43) == 100)
  {
    if (a4) {
      size_t v15 = a4 - 1;
    }
    else {
      size_t v15 = 0;
    }
    if (v15 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198BE1E6CLL);
    }
    uint64_t v16 = *((void *)a2 + 1);
    if ((v16 || (uint64_t v16 = *(void *)a2) != 0) && (*(unsigned char *)(v16 + 16) & 4) == 0)
    {
      __int16 v17 = (void *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a2);
      if (v17)
      {
        *__int16 v17 = 0x20002000200020;
        uint64_t v18 = (char *)(v17 + 1);
        __int16 v19 = &v18[2 * v15];
        if ((v15 & 0xFFFFFFC0) != 0)
        {
          unsigned int v20 = &v18[2 * (v15 & 0xFFFFFFC0)];
          long long v21 = 0uLL;
          do
          {
            v52.val[0] = *v7;
            int8x16_t v22 = v7[1];
            v53.val[0] = v7[2];
            int8x16_t v23 = v7[3];
            v7 += 4;
            int8x16_t v24 = v23;
            v53.val[1] = 0uLL;
            v54.val[0] = v22;
            v52.val[1] = 0uLL;
            unsigned int v25 = v18;
            vst2q_s8(v25, v52);
            v25 += 32;
            v54.val[1] = 0uLL;
            vst2q_s8(v25, v54);
            BOOL v26 = v18 + 64;
            vst2q_s8(v26, v53);
            uint64_t v27 = v18 + 96;
            vst2q_s8(v27, *(int8x16x2_t *)(&v21 - 1));
            v18 += 128;
          }
          while (v18 != v20);
          uint64_t v18 = v20;
        }
        while (v18 != v19)
        {
          __int16 v28 = v7->u8[0];
          int v7 = (int8x16_t *)((char *)v7 + 1);
          *(_WORD *)uint64_t v18 = v28;
          v18 += 2;
        }
        *(_DWORD *)__int16 v19 = 655418;
      }
    }
    else
    {
      __int16 v32 = (_DWORD *)MEMORY[0x19972DE60](a2);
      if (v32)
      {
        *__int16 v32 = 538976288;
        uint64_t v33 = v32 + 1;
        if (v15)
        {
          if (v15 == 1) {
            *uint64_t v33 = v7->i8[0];
          }
          else {
            memcpy(v32 + 1, v7, v15);
          }
        }
        *(_WORD *)&v33[v15] = 2618;
      }
    }
    if (!v44)
    {
      WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v43);
      WebKit::ResourceLoadStatisticsStore::getDomainStringFromDomainID((WebCore::SQLiteStatement **)a1, &v42);
      *(void *)long long buf = "        ";
      *(void *)&buf[8] = 9;
      char v45 = 10;
      WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char>(a2, (uint64_t)buf, (uint64_t *)&v42, &v45);
      if (!v44)
      {
        while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v43) == 100)
        {
          if (!v44)
          {
            WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v43);
            WebKit::ResourceLoadStatisticsStore::getDomainStringFromDomainID((WebCore::SQLiteStatement **)a1, (WTF::StringImpl **)buf);
            int v36 = v42;
            char v42 = *(WTF::StringImpl **)buf;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2) {
                WTF::StringImpl::destroy(v36, v35);
              }
              else {
                *(_DWORD *)v36 -= 2;
              }
            }
            *(void *)long long buf = "        ";
            *(void *)&buf[8] = 9;
            char v45 = 10;
            WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char>(a2, (uint64_t)buf, (uint64_t *)&v42, &v45);
            if (!v44) {
              continue;
            }
          }
          goto LABEL_74;
        }
        goto LABEL_75;
      }
    }
LABEL_74:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_75:
    uint64_t v37 = v42;
    char v42 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v34);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
  }
LABEL_35:
  if (v44 != -1) {
    (*(&off_1EE9C7600 + v44))((int)buf, (WebCore::SQLiteStatement *)v43);
  }
}

uint64_t WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char>(WTF::StringBuilder *a1, uint64_t a2, uint64_t *a3, char *a4)
{
  uint64_t v4 = *(void *)(a2 + 8);
  BOOL v5 = v4 != 0;
  unint64_t v6 = v4 - 1;
  if (!v5) {
    unint64_t v6 = 0;
  }
  unint64_t v10 = *(int8x16_t **)a2;
  if (v6 >> 31)
  {
    uint64_t result = 124;
    __break(0xC471u);
  }
  else
  {
    int v11 = v6;
    uint64_t v9 = *a3;
    char v8 = *a4;
    return (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(a1, &v10, &v9, &v8);
  }
  return result;
}

void *WebKit::appendBoolean(WTF::StringBuilder *a1, int8x16_t *a2, uint64_t a3, int a4)
{
  if (a3) {
    size_t v4 = a3 - 1;
  }
  else {
    size_t v4 = 0;
  }
  if (v4 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198BE20BCLL);
  }
  if (a4) {
    unint64_t v6 = "Yes";
  }
  else {
    unint64_t v6 = "No";
  }
  if (a4) {
    size_t v7 = 3;
  }
  else {
    size_t v7 = 2;
  }
  uint64_t v8 = *((void *)a1 + 1);
  if ((v8 || (uint64_t v8 = *(void *)a1) != 0) && (*(unsigned char *)(v8 + 16) & 4) == 0)
  {
    uint64_t result = (void *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      *result++ = 0x20002000200020;
      unint64_t v10 = (_DWORD *)((char *)result + 2 * v4);
      if ((v4 & 0xFFFFFFC0) != 0)
      {
        int v11 = (void *)((char *)result + 2 * (v4 & 0xFFFFFFC0));
        long long v12 = 0uLL;
        do
        {
          v25.val[0] = *a2;
          int8x16_t v13 = a2[1];
          v26.val[0] = a2[2];
          int8x16_t v14 = a2[3];
          a2 += 4;
          int8x16_t v15 = v14;
          v26.val[1] = 0uLL;
          v27.val[0] = v13;
          v25.val[1] = 0uLL;
          uint64_t v16 = (char *)result;
          vst2q_s8(v16, v25);
          v16 += 32;
          v27.val[1] = 0uLL;
          vst2q_s8(v16, v27);
          __int16 v17 = (char *)(result + 8);
          vst2q_s8(v17, v26);
          uint64_t v18 = (char *)(result + 12);
          vst2q_s8(v18, *(int8x16x2_t *)(&v12 - 1));
          result += 16;
        }
        while (result != v11);
        uint64_t result = v11;
      }
      while (result != (void *)v10)
      {
        __int16 v19 = a2->u8[0];
        a2 = (int8x16_t *)((char *)a2 + 1);
        *(_WORD *)uint64_t result = v19;
        uint64_t result = (void *)((char *)result + 2);
      }
      _DWORD *v10 = 2097210;
      unsigned int v20 = v10 + 1;
      uint64_t v21 = 2 * v7;
      do
      {
        __int16 v22 = *(unsigned __int8 *)v6++;
        *v20++ = v22;
        v21 -= 2;
      }
      while (v21);
    }
  }
  else
  {
    uint64_t result = (void *)MEMORY[0x19972DE60]();
    if (result)
    {
      *(_DWORD *)uint64_t result = 538976288;
      int8x16_t v23 = (char *)result + 4;
      if (v4)
      {
        if (v4 == 1) {
          *int8x16_t v23 = a2->i8[0];
        }
        else {
          memcpy((char *)result + 4, a2, v4);
        }
      }
      *(_WORD *)&v23[v4] = 8250;
      return memcpy(&v23[v4 + 2], v6, v7);
    }
  }
  return result;
}

void WebKit::ResourceLoadStatisticsStore::updateOperatingDatesParameters(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (WebKit::ResourceLoadStatisticsStore *)((char *)this + 16);
  WebCore::SQLiteDatabase::prepareStatement();
  WebCore::SQLiteDatabase::prepareStatement();
  WebCore::SQLiteDatabase::prepareStatement();
  if (v24 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v23) != 100)
  {
    uint64_t v8 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
      goto LABEL_11;
    }
    uint64_t v9 = *((void *)this + 82);
    int Error = WebCore::SQLiteDatabase::lastError(v2);
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    *(_DWORD *)long long buf = 134218755;
    *(void *)&uint8_t buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v9;
    __int16 v26 = 1024;
    int v27 = Error;
    __int16 v28 = 2081;
    uint64_t v29 = ErrorMsg;
    long long v12 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::updateOperatingDatesParame"
          "ters: failed to step countOperatingDatesStatement";
    goto LABEL_20;
  }
  if (v24) {
    goto LABEL_25;
  }
  *((_DWORD *)this + 166) = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v23);
  if (!v22 && WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v21) == 100)
  {
    if (!v22)
    {
      int v3 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v21);
      if (!v22)
      {
        int v4 = v3;
        int v5 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v21);
        if (!v22)
        {
          int v6 = v5;
          int v7 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v21);
          *((_DWORD *)this + 175) = v4;
          *((_DWORD *)this + 176) = v6;
          *((_DWORD *)this + 177) = v7;
          if (!v20)
          {
            *(void *)long long buf = this;
            *(void *)&buf[8] = v19;
            WebKit::ResourceLoadStatisticsStore::updateOperatingDatesParameters(void)::$_0::operator()<std::optional<WebKit::OperatingDate>,unsigned int>(buf, (uint64_t)this + 684, 7);
            WebKit::ResourceLoadStatisticsStore::updateOperatingDatesParameters(void)::$_0::operator()<std::optional<WebKit::OperatingDate>,unsigned int>(buf, (uint64_t)this + 668, 30);
            goto LABEL_11;
          }
          uint64_t v8 = qword_1EB358460;
          if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
          {
            uint64_t v16 = *((void *)this + 82);
            int v17 = WebCore::SQLiteDatabase::lastError(v2);
            uint64_t v18 = WebCore::SQLiteDatabase::lastErrorMsg(v2);
            *(_DWORD *)long long buf = 134218755;
            *(void *)&uint8_t buf[4] = this;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v16;
            __int16 v26 = 1024;
            int v27 = v17;
            __int16 v28 = 2081;
            uint64_t v29 = v18;
            long long v12 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::updateOperatingDat"
                  "esParameters: failed to prepare getOperatingDateWindowStatement";
            goto LABEL_20;
          }
          goto LABEL_11;
        }
      }
    }
LABEL_25:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  uint64_t v8 = qword_1EB358460;
  if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
  {
    uint64_t v13 = *((void *)this + 82);
    int v14 = WebCore::SQLiteDatabase::lastError(v2);
    uint64_t v15 = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    *(_DWORD *)long long buf = 134218755;
    *(void *)&uint8_t buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v13;
    __int16 v26 = 1024;
    int v27 = v14;
    __int16 v28 = 2081;
    uint64_t v29 = v15;
    long long v12 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::updateOperatingDatesParame"
          "ters: failed to step getMostRecentOperatingDateStatement";
LABEL_20:
    _os_log_error_impl(&dword_1985F2000, v8, OS_LOG_TYPE_ERROR, v12, buf, 0x26u);
  }
LABEL_11:
  if (v20 != -1) {
    (*(&off_1EE9C7600 + v20))((int)buf, (WebCore::SQLiteStatement *)v19);
  }
  if (v22 != -1) {
    (*(&off_1EE9C7600 + v22))((int)buf, (WebCore::SQLiteStatement *)v21);
  }
  if (v24 != -1) {
    (*(&off_1EE9C7600 + v24))((int)buf, (WebCore::SQLiteStatement *)v23);
  }
}

void WebKit::ResourceLoadStatisticsStore::updateOperatingDatesParameters(void)::$_0::operator()<std::optional<WebKit::OperatingDate>,unsigned int>(void *a1, uint64_t a2, int a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  if (*(_DWORD *)(*a1 + 664) <= (a3 - 1))
  {
    if (*(unsigned char *)(a2 + 12)) {
      *(unsigned char *)(a2 + 1objc_destroyWeak(this + 2) = 0;
    }
    return;
  }
  int v6 = (WebCore::SQLiteStatement *)a1[1];
  if (*((_DWORD *)v6 + 6)) {
    goto LABEL_17;
  }
  WebCore::SQLiteStatement::reset(v6);
  int v7 = (WebCore::SQLiteStatement *)a1[1];
  if (*((_DWORD *)v7 + 6)) {
    goto LABEL_17;
  }
  if (WebCore::SQLiteStatement::bindInt(v7)) {
    goto LABEL_8;
  }
  unint64_t v10 = (WebCore::SQLiteStatement *)a1[1];
  if (*((_DWORD *)v10 + 6)) {
    goto LABEL_17;
  }
  if (WebCore::SQLiteStatement::step(v10) != 100)
  {
LABEL_8:
    uint64_t v8 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(v4 + 656);
      int v18 = 134218755;
      uint64_t v19 = v4;
      __int16 v20 = 2048;
      uint64_t v21 = v9;
      __int16 v22 = 1024;
      int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v4 + 16));
      __int16 v24 = 2081;
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v4 + 16));
      _os_log_error_impl(&dword_1985F2000, v8, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::updateOperatingDatesParameters: failed to step getOperatingDateWindowStatement", (uint8_t *)&v18, 0x26u);
    }
    return;
  }
  int v11 = (WebCore::SQLiteStatement *)a1[1];
  if (*((_DWORD *)v11 + 6)
    || (v12 = WebCore::SQLiteStatement::columnInt(v11), uint64_t v13 = (WebCore::SQLiteStatement *)a1[1], *((_DWORD *)v13 + 6))
    || (int v14 = WebCore::SQLiteStatement::columnInt(v13), v15 = (WebCore::SQLiteStatement *)a1[1], *((_DWORD *)v15 + 6)))
  {
LABEL_17:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  int v16 = WebCore::SQLiteStatement::columnInt(v15);
  int v17 = *(unsigned __int8 *)(a2 + 12);
  *(_DWORD *)a2 = v12;
  *(_DWORD *)(a2 + 4) = v14;
  *(_DWORD *)(a2 + ++*(_DWORD *)(this + 8) = v16;
  if (!v17) {
    *(unsigned char *)(a2 + 1objc_destroyWeak(this + 2) = 1;
  }
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setIsRunningTest(uint64_t a1, char a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return v4(v3);
  }
  else
  {
    uint64_t v8 = *a3;
    *a3 = 0;
    uint64_t v9 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v9 = &unk_1EE9C7D78;
    *(void *)(v9 + ++*(_DWORD *)(this + 8) = a1;
    *(unsigned char *)(v9 + 16) = a2;
    *(void *)(v9 + 24) = v8;
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t result = 172;
      __break(0xC471u);
    }
    else
    {
      uint64_t v10 = v9;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
      int v11 = (void *)WTF::fastMalloc((WTF *)0x18);
      *int v11 = &unk_1EE9C7620;
      v11[1] = a1;
      v11[2] = v10;
      int v12 = v11;
      WTF::SuspendableWorkQueue::dispatch();
      uint64_t result = (uint64_t)v12;
      if (v12) {
        return (*(uint64_t (**)(void *))(*v12 + 8))(v12);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setShouldClassifyResourcesBeforeDataRecordsRemoval(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v6 = &unk_1EE9C7DA0;
  *(void *)(v6 + ++*(_DWORD *)(this + 8) = a1;
  *(unsigned char *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = v5;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v7 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v8 = &unk_1EE9C7620;
    v8[1] = a1;
    uint64_t v8[2] = v7;
    uint64_t v10 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = (uint64_t)v10;
    if (v10) {
      return (*(uint64_t (**)(void *))(*v10 + 8))(v10);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::performDailyTasks(atomic_uchar *volatile *this)
{
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v2 = &unk_1EE9C8430;
  v2[1] = this;
  if (*((unsigned char *)this + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v3 = v2;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this);
    uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v4 = &unk_1EE9C7620;
    v4[1] = this;
    uint64_t v4[2] = v3;
    uint64_t v6 = (uint64_t)v4;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = v6;
    if (v6) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  return result;
}

void WebKit::WebResourceLoadStatisticsStore::~WebResourceLoadStatisticsStore(WebKit::ResourceLoadStatisticsStore **this)
{
  uint64_t v2 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)this);
  if ((WTF::RunLoop::isCurrent(v2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198BE2B5CLL);
  }
  if (this[4])
  {
    __break(0xC471u);
    JUMPOUT(0x198BE2B7CLL);
  }
  uint64_t v4 = this[15];
  if (v4)
  {
    uint64_t v5 = *((unsigned int *)v4 - 1);
    if (v5)
    {
      uint64_t v6 = (WTF::StringImpl **)((char *)v4 + 16);
      do
      {
        if (*(v6 - 1) != (WTF::StringImpl *)-1)
        {
          uint64_t v7 = *v6;
          *uint64_t v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2) {
              WTF::StringImpl::destroy(v7, v3);
            }
            else {
              *(_DWORD *)v7 -= 2;
            }
          }
        }
        v6 += 6;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WebKit::ResourceLoadStatisticsStore *)((char *)v4 - 16), v3);
  }
  uint64_t v8 = this[13];
  if (v8)
  {
    uint64_t v9 = *((unsigned int *)v8 - 1);
    if (v9)
    {
      uint64_t v10 = (uint64_t)v8 + 16;
      do
      {
        if (*(void *)(v10 - 16) != -1)
        {
          std::__optional_destruct_base<WebCore::LoginStatus,false>::~__optional_destruct_base[abi:sn180100](v10, v3);
          int v11 = *(WTF::StringImpl **)(v10 - 16);
          *(void *)(v10 - 16) = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, v3);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
        }
        v10 += 64;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WebKit::ResourceLoadStatisticsStore *)((char *)v8 - 16), v3);
  }
  uint64_t v12 = (uint64_t)this[12];
  if (v12) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v12, v3);
  }
  uint64_t v13 = (WTF::StringImpl **)this[11];
  if (v13) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v3);
  }
  int v14 = (WTF::StringImpl **)this[10];
  if (v14) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, v3);
  }
  this[5] = (WebKit::ResourceLoadStatisticsStore *)&unk_1EE9B3390;
  uint64_t v15 = this[8];
  this[8] = 0;
  if (v15) {
    (*(void (**)(WebKit::ResourceLoadStatisticsStore *))(*(void *)v15 + 8))(v15);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(this + 5));
  std::unique_ptr<WebKit::ResourceLoadStatisticsStore>::reset[abi:sn180100](this + 4, 0);
  int v17 = this[3];
  this[3] = 0;
  if (v17) {
    WTF::WorkQueue::deref(v17);
  }
  int v18 = (unsigned int *)this[2];
  this[2] = 0;
  if (v18)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v16);
    }
  }
}

unsigned int *WebKit::WebResourceLoadStatisticsStore::didDestroyNetworkSession(WTF::RunLoop *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9C7E18;
  v4[1] = v3;
  uint64_t v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v6 = 1;
  *(void *)(v6 + ++*(_DWORD *)(this + 8) = v4;
  uint64_t v7 = (unsigned int *)*((void *)a1 + 2);
  *((void *)a1 + objc_destroyWeak(this + 2) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v5);
  }
  atomic_fetch_add((atomic_uint *volatile)v6, 1u);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v8 = &unk_1EE9C7E40;
  v8[1] = v6;
  uint64_t v10 = v8;
  WebKit::WebResourceLoadStatisticsStore::destroyResourceLoadStatisticsStore(a1, (uint64_t *)&v10);
  if (v10) {
    (*(void (**)(void *))(*v10 + 8))(v10);
  }

  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v6);
}

uint64_t WebKit::WebResourceLoadStatisticsStore::destroyResourceLoadStatisticsStore(WTF::RunLoop *a1, uint64_t *a2)
{
  uint64_t v4 = (WTF::RunLoop *)WTF::RunLoop::main(a1);
  if ((WTF::RunLoop::isCurrent(v4) & 1) == 0) {
    goto LABEL_10;
  }
  if (*((unsigned char *)a1 + 72))
  {
    uint64_t v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
  uint64_t v8 = *a2;
  *a2 = 0;
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v9 = &unk_1EE9C7E68;
  v9[1] = a1;
  v9[2] = a1;
  v9[3] = v8;
  if (*((unsigned char *)a1 + 72))
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x198BE2E40);
  }
  uint64_t v10 = v9;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
  int v11 = (void *)WTF::fastMalloc((WTF *)0x18);
  *int v11 = &unk_1EE9C7620;
  v11[1] = a1;
  v11[2] = v10;
  uint64_t v12 = v11;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = (uint64_t)v12;
  if (v12) {
    return (*(uint64_t (**)(void *))(*v12 + 8))(v12);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setResourceLoadStatisticsDebugMode(uint64_t a1, char a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return v5(v4);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 8);
      if (v10)
      {
        uint64_t v11 = *(void *)(v10 + 32);
        int v17 = *(void **)(v10 + 24);
        uint64_t v12 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v11 + 232), &v17);
        if (v12) {
          WebCore::NetworkStorageSession::setTrackingPreventionDebugLoggingEnabled(v12);
        }
      }
    }
    uint64_t v13 = *a3;
    *a3 = 0;
    uint64_t v14 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v14 = &unk_1EE9C7F08;
    *(void *)(v14 + ++*(_DWORD *)(this + 8) = a1;
    *(unsigned char *)(v14 + 16) = a2;
    *(void *)(v14 + 24) = v13;
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t result = 172;
      __break(0xC471u);
    }
    else
    {
      uint64_t v15 = v14;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
      int v16 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v16 = &unk_1EE9C7620;
      v16[1] = a1;
      uint64_t v16[2] = v15;
      int v17 = v16;
      WTF::SuspendableWorkQueue::dispatch();
      uint64_t result = (uint64_t)v17;
      int v17 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setPrevalentResourceForDebugMode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return v5(v4);
  }
  else
  {
    WebCore::RegistrableDomain::isolatedCopy(&v17);
    uint64_t v8 = *a3;
    *a3 = 0;
    uint64_t v18 = v8;
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v9 = &unk_1EE9C7F30;
    v9[1] = a1;
    v9[2] = v17;
    uint64_t v10 = v18;
    int v17 = 0;
    uint64_t v18 = 0;
    v9[3] = v10;
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t result = 172;
      __break(0xC471u);
    }
    else
    {
      uint64_t v11 = v9;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
      uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v12 = &unk_1EE9C7620;
      v12[1] = a1;
      uint64_t v12[2] = v11;
      uint64_t v19 = v12;
      WTF::SuspendableWorkQueue::dispatch();
      uint64_t v14 = v19;
      uint64_t v19 = 0;
      if (v14) {
        (*(void (**)(void *))(*v14 + 8))(v14);
      }
      uint64_t v15 = v18;
      uint64_t v18 = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      uint64_t result = (uint64_t)v17;
      int v17 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::scheduleStatisticsAndDataRecordsProcessing(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v4 = &unk_1EE9C7F58;
  v4[1] = a1;
  uint64_t v4[2] = v3;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v5 = v4;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v6 = &unk_1EE9C7620;
    v6[1] = a1;
    void v6[2] = v5;
    uint64_t v8 = v6;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = (uint64_t)v8;
    if (v8) {
      return (*(uint64_t (**)(void *))(*v8 + 8))(v8);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::statisticsDatabaseHasAllTables(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v4 = &unk_1EE9C7F80;
  v4[1] = a1;
  uint64_t v4[2] = v3;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v5 = v4;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v6 = &unk_1EE9C7620;
    v6[1] = a1;
    void v6[2] = v5;
    uint64_t v8 = v6;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = (uint64_t)v8;
    if (v8) {
      return (*(uint64_t (**)(void *))(*v8 + 8))(v8);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t *a3)
{
  v12[0] = (uint64_t)a1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a1);
  uint64_t v6 = *a2;
  v12[1] = (uint64_t)a1;
  uint64_t v12[2] = v6;
  uint64_t v7 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v12[3] = v7;
  uint64_t v8 = *a3;
  *a3 = 0;
  v12[4] = v8;
  WTF::Function<void ()(void)>::Function<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>(&v13, v12);
  WebKit::WebResourceLoadStatisticsStore::postTask((uint64_t)a1, &v13);
  uint64_t v10 = v13;
  uint64_t v13 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)v12, v9);
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x30);
  uint64_t v5 = *a2;
  *(void *)uint64_t v4 = &unk_1EE9C7FD0;
  *(void *)(v4 + ++*(_DWORD *)(this + 8) = v5;
  uint64_t v6 = a2[1];
  a2[1] = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 3objc_destroyWeak(this + 2) = 0;
  *(void *)(v4 + 16) = v6;
  uint64_t v7 = a2[2];
  a2[2] = 0;
  *(void *)(v4 + 24) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *(_DWORD *)(v4 + 3objc_destroyWeak(this + 2) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_DWORD *)(v4 + 36) = v7;
  uint64_t v8 = a2[4];
  a2[4] = 0;
  *(void *)(v4 + ++*(_DWORD *)(this - 40) = v8;
  *a1 = v4;
  return a1;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
  uint64_t v4 = *(atomic_uchar ***)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }
  return a1;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t *a6)
{
  if (*(unsigned char *)(a1 + 72))
  {
    long long v38 = *a4;
    uint64_t v39 = (WTF::StringImpl *)*((void *)a4 + 2);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10
      && (uint64_t v11 = *(void *)(v10 + 8)) != 0
      && (uint64_t v12 = *(void *)(v11 + 32),
          v32[0] = *(WTF::StringImpl **)(v11 + 24),
          WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v12 + 232), v32)))
    {
      *(_OWORD *)__int16 v32 = v38;
      uint64_t v33 = v39;
      uint64_t hasStorageAccess = WebCore::NetworkStorageSession::hasStorageAccess();
      uint64_t v14 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, hasStorageAccess);
    }
    else
    {
      uint64_t v14 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v14 + 16))(v14, 0);
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16
      && (uint64_t v17 = *(void *)(v16 + 8)) != 0
      && (uint64_t v18 = *(void *)(v17 + 32),
          v32[0] = *(WTF::StringImpl **)(v17 + 24),
          WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v18 + 232), v32)))
    {
      char canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction = WebCore::NetworkStorageSession::canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction();
    }
    else
    {
      char canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction = 0;
    }
    v32[0] = (WTF::StringImpl *)a1;
    WebCore::RegistrableDomain::isolatedCopy(&v32[1]);
    WebCore::RegistrableDomain::isolatedCopy(&v33);
    long long v34 = *a4;
    LOBYTE(v35) = *((unsigned char *)a4 + 16);
    *((void *)&v35 + objc_destroyWeak(this + 1) = a5;
    char v36 = canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction;
    uint64_t v20 = *a6;
    *a6 = 0;
    uint64_t v37 = v20;
    uint64_t v21 = WTF::fastMalloc((WTF *)0x50);
    *(void *)uint64_t v21 = &unk_1EE9C8048;
    *(WTF::StringImpl **)(v21 + ++*(_DWORD *)(this + 8) = v32[0];
    *(WTF::StringImpl **)(v21 + 16) = v32[1];
    __int16 v22 = v33;
    v32[1] = 0;
    uint64_t v33 = 0;
    *(void *)(v21 + 24) = v22;
    long long v23 = v34;
    long long v24 = v35;
    *(unsigned char *)(v21 + 64) = v36;
    *(_OWORD *)(v21 + 3objc_destroyWeak(this + 2) = v23;
    *(_OWORD *)(v21 + 4++*(_DWORD *)(this + 8) = v24;
    uint64_t v25 = v37;
    uint64_t v37 = 0;
    *(void *)(v21 + 7objc_destroyWeak(this + 2) = v25;
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t result = 172;
      __break(0xC471u);
    }
    else
    {
      uint64_t v26 = v21;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
      int v27 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v27 = &unk_1EE9C7620;
      v27[1] = a1;
      v27[2] = v26;
      uint64_t v40 = v27;
      WTF::SuspendableWorkQueue::dispatch();
      uint64_t v29 = v40;
      uint64_t v40 = 0;
      if (v29) {
        (*(void (**)(void *))(*v29 + 8))(v29);
      }
      uint64_t v30 = v37;
      uint64_t v37 = 0;
      if (v30) {
        (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
      }
      int v31 = v33;
      uint64_t v33 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2) {
          WTF::StringImpl::destroy(v31, v28);
        }
        else {
          *(_DWORD *)v31 -= 2;
        }
      }
      uint64_t result = (uint64_t)v32[1];
      v32[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v28);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(uint64_t a1, WTF **a2, const WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, char a8, uint64_t *a9)
{
  if (WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3))
  {
    __int16 v86 = 1;
    char v87 = a8;
    uint64_t v17 = *a3;
    *a3 = 0;
    uint64_t v18 = *a2;
    *a2 = 0;
    double v88 = v17;
    __int16 v89 = v18;
    WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(a9, (uint64_t)&v86);
    uint64_t v20 = v89;
    __int16 v89 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v19);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    uint64_t result = (uint64_t)v88;
    double v88 = 0;
    if (!result) {
      return result;
    }
LABEL_76:
    if (*(_DWORD *)result == 2) {
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
    }
    *(_DWORD *)result -= 2;
    return result;
  }
  LOBYTE(v8objc_destroyWeak(this + 2) = 0;
  char v85 = 0;
  uint64_t v21 = *(void *)(a1 + 16);
  if (v21
    && (uint64_t v22 = *(void *)(v21 + 8)) != 0
    && (uint64_t v23 = *(void *)(v22 + 32),
        *(void *)uint64_t v61 = *(void *)(v22 + 24),
        WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v23 + 232), v61)))
  {
    int canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction = WebCore::NetworkStorageSession::canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction();
    WebCore::NetworkStorageSession::storageAccessQuirkForDomainPair();
    std::__optional_storage_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::OrganizationStorageAccessPromptQuirk,false>>((WTF *)&v82, (uint64_t)v61);
    if (v62[8])
    {
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61[16], v25);
      if (*(void *)&v61[8]) {
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(*(uint64_t *)&v61[8], v26);
      }
      int v27 = *(WTF::StringImpl **)v61;
      *(void *)uint64_t v61 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v26);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
    }
  }
  else
  {
    int canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction = 0;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    *(void *)&long long v72 = a4;
    *((void *)&v72 + objc_destroyWeak(this + 1) = a5;
    int v91 = a7;
    uint64_t v28 = *(void *)(a1 + 16);
    if (v28
      && *(void *)(v28 + 8)
      && ((canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction | WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 80), a2)) & 1) != 0)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
      uint64_t v29 = *a2;
      if (*a2) {
        *(_DWORD *)v29 += 2;
      }
      uint64_t v30 = *a3;
      if (*a3) {
        *(_DWORD *)v30 += 2;
      }
      *(_OWORD *)uint64_t v61 = v72;
      uint64_t v31 = *a9;
      *a9 = 0;
      uint64_t v32 = WTF::fastMalloc((WTF *)0x50);
      *(void *)uint64_t v32 = &unk_1EE9C81D8;
      *(void *)(v32 + ++*(_DWORD *)(this + 8) = a1;
      *(void *)(v32 + 16) = a1;
      if (v29) {
        *(_DWORD *)v29 += 2;
      }
      *(void *)(v32 + 24) = v29;
      if (v30) {
        *(_DWORD *)v30 += 2;
      }
      *(void *)(v32 + 3objc_destroyWeak(this + 2) = v30;
      *(_OWORD *)(v32 + ++*(_DWORD *)(this - 40) = *(_OWORD *)v61;
      *(void *)(v32 + 56) = a6;
      *(unsigned char *)(v32 + 64) = a8;
      *(void *)(v32 + 7objc_destroyWeak(this + 2) = v31;
      uint64_t v90 = v32;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
        {
          WTF::StringImpl::destroy(v30, v33);
          if (!v29) {
            goto LABEL_70;
          }
LABEL_67:
          if (*(_DWORD *)v29 == 2) {
            WTF::StringImpl::destroy(v29, v33);
          }
          else {
            *(_DWORD *)v29 -= 2;
          }
LABEL_70:
          unsigned int v60 = *(os_unfair_lock_s **)(*(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 32) + 40);
          *(void *)uint64_t v61 = &v91;
          *(void *)&v61[8] = &v72;
          *(void *)&v61[16] = a2;
          *(void *)int v62 = a3;
          *(void *)&v62[8] = &v82;
          IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::RequestStorageAccessConfirm,WTF::CompletionHandler<void ()(BOOL)>>(v60, (uint64_t)v61, &v90);
          uint64_t result = v90;
          if (v90) {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v90 + 8))(v90);
          }
          goto LABEL_72;
        }
        *(_DWORD *)v30 -= 2;
      }
      if (!v29) {
        goto LABEL_70;
      }
      goto LABEL_67;
    }
    *(_WORD *)uint64_t v61 = 0;
    _OWORD v61[2] = a8;
    long long v34 = *a3;
    if (*a3) {
      *(_DWORD *)v34 += 2;
    }
    *(void *)&v61[8] = v34;
    long long v35 = *a2;
    if (*a2) {
      *(_DWORD *)v35 += 2;
    }
    *(void *)&v61[16] = v35;
    WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(a9, (uint64_t)v61);
    uint64_t v37 = *(WTF::StringImpl **)&v61[16];
    *(void *)&v61[16] = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v36);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
    uint64_t result = *(void *)&v61[8];
    *(void *)&v61[8] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v36);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *(void *)&long long v72 = a1;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    *((void *)&v72 + objc_destroyWeak(this + 1) = a1;
    WebCore::RegistrableDomain::isolatedCopy(&v73);
    WebCore::RegistrableDomain::isolatedCopy((void *)&v73 + 1);
    *(void *)&long long v74 = a4;
    *((void *)&v74 + objc_destroyWeak(this + 1) = a5;
    *(void *)&long long v75 = a6;
    *((void *)&v75 + objc_destroyWeak(this + 1) = a7;
    char v76 = a8;
    LOBYTE(v77) = 0;
    char v80 = 0;
    if (v85)
    {
      long long v38 = v82;
      long long v82 = 0uLL;
      long long v77 = v38;
      uint64_t v78 = v83;
      *(void *)&long long v38 = v84;
      uint64_t v83 = 0;
      uint64_t v84 = 0;
      uint64_t v79 = v38;
      char v80 = 1;
    }
    uint64_t v39 = *a9;
    *a9 = 0;
    uint64_t v81 = v39;
    *(void *)uint64_t v61 = a1;
    WebCore::RegistrableDomain::isolatedCopy((WTF::StringImpl **)&v61[8]);
    WebCore::RegistrableDomain::isolatedCopy((WTF::StringImpl **)&v61[16]);
    *(_OWORD *)unsigned int v63 = v72;
    *(_OWORD *)&v63[16] = v73;
    long long v64 = v74;
    *(void *)int v62 = a4;
    *(void *)&v62[8] = a5;
    *(void *)&v62[16] = a6;
    v62[24] = a8;
    v62[25] = canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction;
    *((void *)&v72 + objc_destroyWeak(this + 1) = 0;
    long long v73 = 0uLL;
    long long v65 = v75;
    char v66 = v76;
    LOBYTE(v67) = 0;
    char v70 = 0;
    if (v80)
    {
      long long v40 = v77;
      long long v77 = 0uLL;
      long long v67 = v40;
      uint64_t v68 = v78;
      *(void *)&long long v40 = v79;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v69 = v40;
      char v70 = 1;
    }
    uint64_t v41 = v81;
    uint64_t v81 = 0;
    uint64_t v71 = v41;
    uint64_t v42 = WTF::fastMalloc((WTF *)0xB8);
    uint64_t v43 = v42;
    *(void *)uint64_t v42 = &unk_1EE9C8110;
    *(void *)(v42 + ++*(_DWORD *)(this + 8) = *(void *)v61;
    *(void *)(v42 + 16) = *(void *)&v61[8];
    uint64_t v44 = *(void *)&v61[16];
    *(_OWORD *)&v61[8] = 0u;
    *(void *)(v42 + 24) = v44;
    long long v45 = *(_OWORD *)v62;
    *(_OWORD *)(v42 + 4objc_destroyWeak(this + 2) = *(_OWORD *)&v62[10];
    *(_OWORD *)(v42 + 3objc_destroyWeak(this + 2) = v45;
    *(_OWORD *)(v42 + 64) = *(_OWORD *)v63;
    uint64_t v46 = *(void *)&v63[16];
    *(_OWORD *)&v63[8] = 0u;
    *(void *)(v42 + 80) = v46;
    uint64_t v47 = *(void *)&v63[24];
    *(void *)&unsigned char v63[24] = 0;
    *(void *)(v42 + 8++*(_DWORD *)(this + 8) = v47;
    long long v48 = v64;
    long long v49 = v65;
    *(unsigned char *)(v42 + 12++*(_DWORD *)(this + 8) = v66;
    *(_OWORD *)(v42 + 96) = v48;
    *(_OWORD *)(v42 + 11objc_destroyWeak(this + 2) = v49;
    *(unsigned char *)(v42 + 136) = 0;
    *(unsigned char *)(v42 + 16++*(_DWORD *)(this + 8) = 0;
    if (v70)
    {
      *(void *)(v42 + 136) = v67;
      uint64_t v50 = *((void *)&v67 + 1);
      long long v67 = 0uLL;
      *(void *)(v42 + 144) = v50;
      *(void *)(v42 + 15objc_destroyWeak(this + 2) = v68;
      uint64_t v51 = v69;
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      *(void *)(v42 + 160) = v51;
      *(unsigned char *)(v42 + 16++*(_DWORD *)(this + 8) = 1;
    }
    uint64_t v52 = v71;
    uint64_t v71 = 0;
    *(void *)(v42 + 176) = v52;
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t result = 172;
      __break(0xC471u);
      return result;
    }
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    int8x16x2_t v53 = (void *)WTF::fastMalloc((WTF *)0x18);
    *int8x16x2_t v53 = &unk_1EE9C7620;
    v53[1] = a1;
    v53[2] = v43;
    int v91 = v53;
    WTF::SuspendableWorkQueue::dispatch();
    unsigned int v55 = v91;
    int v91 = 0;
    if (v55) {
      (*(void (**)(void *))(*v55 + 8))(v55);
    }
    WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::~$_0((uint64_t)v63, v54);
    BOOL v57 = *(WTF::StringImpl **)&v61[16];
    *(void *)&v61[16] = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2) {
        WTF::StringImpl::destroy(v57, v56);
      }
      else {
        *(_DWORD *)v57 -= 2;
      }
    }
    uint64_t v59 = *(WTF::StringImpl **)&v61[8];
    *(void *)&v61[8] = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2) {
        WTF::StringImpl::destroy(v59, v56);
      }
      else {
        *(_DWORD *)v59 -= 2;
      }
    }
    uint64_t result = WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::~$_0((uint64_t)&v72, v56);
  }
LABEL_72:
  if (v85)
  {
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83, v36);
    if (*((void *)&v82 + 1)) {
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(*((uint64_t *)&v82 + 1), v19);
    }
    uint64_t result = v82;
    *(void *)&long long v82 = 0;
    if (result) {
      goto LABEL_76;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::RegistrableDomain::isolatedCopy@<X0>(void *a1@<X8>)
{
  WTF::String::isolatedCopy();
  WebCore::RegistrableDomain::RegistrableDomain(a1, (uint64_t *)&v4);
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 112);
  *(void *)(a1 + 11objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(unsigned char *)(a1 + 104))
  {
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 88, a2);
    uint64_t v4 = *(void *)(a1 + 80);
    if (v4) {
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, a2);
    }
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 72);
    *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  uint64_t v6 = *(WTF::StringImpl **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = *(atomic_uchar ***)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  if (v8) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v8);
  }
  return a1;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setLoginStatus(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, int a3, WebCore::LoginStatus *this, uint64_t *a5)
{
  if (a3 == 1)
  {
    if (*((unsigned char *)this + 40) && (WebCore::LoginStatus::hasExpired(this) & 1) == 0)
    {
      int v35 = *((unsigned __int8 *)this + 40);
      LOBYTE(v56) = 0;
      char v59 = 0;
      if (v35)
      {
        long long v36 = *(_OWORD *)this;
        long long v37 = *((_OWORD *)this + 1);
        *(void *)this = 0;
        *((void *)this + objc_destroyWeak(this + 1) = 0;
        long long v56 = v36;
        long long v57 = v37;
        uint64_t v58 = *((void *)this + 4);
        char v59 = 1;
        WebCore::LoginStatus::setTimeToLive();
        LOBYTE(v5objc_destroyWeak(this + 2) = 0;
        char v55 = 0;
        uint64_t v38 = v56;
        if ((void)v56) {
          *(_DWORD *)v56 += 2;
        }
        *(void *)&long long v52 = v38;
        uint64_t v39 = *((void *)&v56 + 1);
        if (*((void *)&v56 + 1)) {
          **((_DWORD **)&v56 + 1) += 2;
        }
        *((void *)&v52 + objc_destroyWeak(this + 1) = v39;
        long long v53 = v57;
        uint64_t v54 = v58;
        char v55 = 1;
LABEL_6:
        uint64_t v11 = *(void *)(a1 + 104);
        uint64_t v9 = (uint64_t *)(a1 + 104);
        uint64_t v10 = v11;
        if (v11
          || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v9),
              (uint64_t v10 = *v9) != 0))
        {
          unsigned int v12 = *(_DWORD *)(v10 - 8);
        }
        else
        {
          unsigned int v12 = 0;
        }
        uint64_t v13 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v12;
        uint64_t v14 = v10 + (v13 << 6);
        if ((WTF::equal(*(WTF **)v14, 0, v15) & 1) == 0)
        {
          uint64_t v17 = 0;
          int v18 = 1;
          do
          {
            uint64_t v19 = v14;
            if (*(void *)v14 != -1)
            {
              uint64_t v19 = v17;
              if (WTF::equalIgnoringASCIICase(*(WTF **)v14, *a2, v16))
              {
                uint64_t v44 = v10 + (v13 << 6);
                *(unsigned char *)(v44 + ++*(_DWORD *)(this + 8) = 1;
                std::__optional_storage_base<WebCore::LoginStatus,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::LoginStatus,false>>((uint64_t *)(v44 + 16), (uint64_t)&v52);
                goto LABEL_43;
              }
            }
            uint64_t v13 = (v13 + v18) & v12;
            uint64_t v14 = v10 + (v13 << 6);
            ++v18;
            uint64_t v17 = v19;
          }
          while (!WTF::equal(*(WTF **)v14, 0, v16));
          if (v19)
          {
            *(void *)uint64_t v19 = 0;
            v60[0] = 0;
            LOBYTE(v6objc_destroyWeak(this + 2) = 0;
            *(unsigned char *)(v19 + ++*(_DWORD *)(this + 8) = 0;
            *(unsigned char *)(v19 + 16) = 0;
            *(unsigned char *)(v19 + 56) = 0;
            std::__optional_destruct_base<WebCore::LoginStatus,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v60, v20);
            --*(_DWORD *)(*v9 - 16);
            uint64_t v14 = v19;
          }
        }
        WTF::String::operator=((uint64_t *)v14, a2);
        v60[0] = 1;
        LOBYTE(v61[0]) = 0;
        char v63 = 0;
        if (v55)
        {
          long long v21 = v52;
          long long v52 = 0uLL;
          v61[0] = v21;
          v61[1] = v53;
          uint64_t v62 = v54;
          char v63 = 1;
        }
        *(unsigned char *)(v14 + ++*(_DWORD *)(this + 8) = 1;
        std::__optional_storage_base<WebCore::LoginStatus,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::LoginStatus,false>>((uint64_t *)(v14 + 16), (uint64_t)v61);
        std::__optional_destruct_base<WebCore::LoginStatus,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v61, v22);
        uint64_t v24 = *v9;
        if (*v9) {
          int v25 = *(_DWORD *)(v24 - 12) + 1;
        }
        else {
          int v25 = 1;
        }
        *(_DWORD *)(v24 - 1objc_destroyWeak(this + 2) = v25;
        uint64_t v40 = *v9;
        if (*v9) {
          int v41 = *(_DWORD *)(v40 - 12);
        }
        else {
          int v41 = 0;
        }
        uint64_t v42 = (*(_DWORD *)(v40 - 16) + v41);
        unint64_t v43 = *(unsigned int *)(v40 - 4);
        if (v43 > 0x400)
        {
          if (v43 > 2 * v42) {
            goto LABEL_43;
          }
        }
        else if (3 * v43 > 4 * v42)
        {
LABEL_43:
          std::__optional_destruct_base<WebCore::LoginStatus,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52, v23);
          std::__optional_destruct_base<WebCore::LoginStatus,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56, v45);
          goto LABEL_44;
        }
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v9);
        goto LABEL_43;
      }
    }
    else
    {
      LOBYTE(v56) = 0;
      char v59 = 0;
    }
    LOBYTE(v5objc_destroyWeak(this + 2) = 0;
    char v55 = 0;
    goto LABEL_6;
  }
  uint64_t v26 = (uint64_t *)(a1 + 104);
  int v27 = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 104), a2);
  uint64_t v29 = v27;
  uint64_t v30 = *(void *)(a1 + 104);
  if (v30)
  {
    uint64_t v31 = (WTF::StringImpl **)(v30 + ((unint64_t)*(unsigned int *)(v30 - 4) << 6));
    if (v31 == v27) {
      goto LABEL_44;
    }
  }
  else
  {
    if (!v27) {
      goto LABEL_44;
    }
    uint64_t v31 = 0;
  }
  if (v31 != v27)
  {
    WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>(v27, v28);
    std::__optional_destruct_base<WebCore::LoginStatus,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v29 + 2), v32);
    ++*(_DWORD *)(*v26 - 16);
    uint64_t v33 = *v26;
    int v34 = *v26 ? *(_DWORD *)(v33 - 12) - 1 : -1;
    *(_DWORD *)(v33 - 1objc_destroyWeak(this + 2) = v34;
    uint64_t v48 = *v26;
    if (*v26)
    {
      unsigned int v49 = 6 * *(_DWORD *)(v48 - 12);
      unsigned int v50 = *(_DWORD *)(v48 - 4);
      if (v49 < v50 && v50 >= 9) {
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash((uint64_t *)(a1 + 104), v50 >> 1);
      }
    }
  }
LABEL_44:
  uint64_t v46 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(void *)v46 + 16))(v46);
  return (*(uint64_t (**)(uint64_t))(*(void *)v46 + 8))(v46);
}

uint64_t WebKit::WebResourceLoadStatisticsStore::isLoggedIn(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, uint64_t *a3)
{
  unint64_t v5 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 104), a2);
  uint64_t v6 = *(void *)(a1 + 104);
  if (v6) {
    v6 += (unint64_t)*(unsigned int *)(v6 - 4) << 6;
  }
  BOOL v7 = v6 != v5 && *(unsigned __int8 *)(v5 + 8) == 1;
  uint64_t v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, BOOL))(*(void *)v8 + 16))(v8, v7);
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);

  return v9(v8);
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::RequestStorageAccessConfirm,WTF::CompletionHandler<void ()(BOOL)>>(os_unfair_lock_s *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v6 = &unk_1EE9C80E8;
  v6[1] = v5;
  uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 347;
  *((void *)v8 + objc_destroyWeak(this + 1) = 0;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v20 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *(uint64_t **)(a2 + 24));
  uint64_t v9 = *(void *)(a2 + 32);
  int v10 = *(unsigned __int8 *)(v9 + 32);
  uint64_t v11 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
  if (v10)
  {
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x198BE4818);
    }
    *uint64_t v11 = 1;
    if (!*(unsigned char *)(v9 + 32))
    {
      uint64_t v18 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)WebKit::WebResourceLoadStatisticsStore::requestStorageAccessUnderOpener(v18);
    }
    IPC::ArgumentCoder<WebCore::OrganizationStorageAccessPromptQuirk,void>::encode(v8, (uint64_t *)v9);
  }
  else
  {
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x198BE4838);
    }
    *uint64_t v11 = 0;
  }
  v19[0] = (uint64_t)v6;
  v19[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v20, v19, 0, 0);
  uint64_t v14 = v19[0];
  v19[0] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::requestStorageAccessUnderOpener(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  if (*(unsigned char *)(a1 + 72))
  {
    return WebKit::WebResourceLoadStatisticsStore::requestStorageAccessUnderOpenerEphemeral(a1);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9
      && (uint64_t v10 = *(void *)(v9 + 8)) != 0
      && (uint64_t v11 = *(void *)(v10 + 32),
          uint64_t v18 = *(void **)(v10 + 24),
          WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v11 + 232), &v18)))
    {
      char canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction = WebCore::NetworkStorageSession::canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction();
    }
    else
    {
      char canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction = 0;
    }
    uint64_t v13 = *a2;
    *a2 = 0;
    uint64_t v14 = *a4;
    *a4 = 0;
    uint64_t v15 = WTF::fastMalloc((WTF *)0x30);
    *(void *)uint64_t v15 = &unk_1EE9C8200;
    *(void *)(v15 + ++*(_DWORD *)(this + 8) = a1;
    *(void *)(v15 + 16) = v13;
    *(void *)(v15 + 24) = a3;
    *(void *)(v15 + 3objc_destroyWeak(this + 2) = v14;
    *(unsigned char *)(v15 + ++*(_DWORD *)(this - 40) = canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction;
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t result = 172;
      __break(0xC471u);
    }
    else
    {
      uint64_t v16 = v15;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
      uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v17 = &unk_1EE9C7620;
      v17[1] = a1;
      void v17[2] = v16;
      uint64_t v18 = v17;
      WTF::SuspendableWorkQueue::dispatch();
      uint64_t result = (uint64_t)v18;
      uint64_t v18 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::requestStorageAccessUnderOpenerEphemeral(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 32);
      uint64_t v4 = *(void *)(v2 + 24);
      uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v3 + 232), &v4);
      if (result) {
        return WebCore::NetworkStorageSession::grantStorageAccess();
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::storageAccessWasGrantedValueForFrame(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, WTF::StringImpl *this)
{
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  if (this) {
    *(_DWORD *)this += 2;
  }
  uint64_t v19 = this;
  uint64_t v5 = *(void *)(a1 + 120);
  if (!v5)
  {
    uint64_t v15 = 1;
    goto LABEL_25;
  }
  unsigned int v6 = *(_DWORD *)(v5 - 8);
  int v7 = WTF::PairHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>::hash((uint64_t)&v17);
  for (i = 0; ; int v7 = i + v10)
  {
    int v10 = v7 & v6;
    uint64_t v11 = v5 + 48 * (v7 & v6);
    uint64_t v12 = *(void *)(v11 + 8);
    if (*(_OWORD *)v11 == 0) {
      break;
    }
LABEL_8:
    if (v12 != -1)
    {
      BOOL v13 = *(WTF::StringImpl **)v11 == v17 && v12 == v18;
      if (v13 && (WTF::equalIgnoringASCIICase(*(WTF **)(v11 + 16), v19, v8) & 1) != 0)
      {
        uint64_t v14 = *(void *)(a1 + 120);
        if (!v14) {
          goto LABEL_20;
        }
        goto LABEL_31;
      }
    }
    ++i;
  }
  if ((WTF::equal(*(WTF **)(v11 + 16), 0, v8) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v11 + 8);
    goto LABEL_8;
  }
  uint64_t v14 = *(void *)(a1 + 120);
  if (!v14) {
    goto LABEL_17;
  }
  uint64_t v11 = v14 + 48 * *(unsigned int *)(v14 - 4);
LABEL_31:
  v14 += 48 * *(unsigned int *)(v14 - 4);
LABEL_20:
  if (v14 == v11)
  {
LABEL_17:
    uint64_t v15 = 1;
    goto LABEL_24;
  }
  if (*(double *)(v11 + 32) < *(double *)(v11 + 40)) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = 2;
  }
LABEL_24:
  this = v19;
LABEL_25:
  uint64_t v19 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2) {
      WTF::StringImpl::destroy(this, a2);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
  return v15;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setAppBoundDomains(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  if (!*(unsigned char *)(a1 + 72) && *a2 && *(_DWORD *)(*a2 - 12))
  {
    WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy(a2, (uint64_t)a2, a3, (uint64_t *)&v18);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 32);
        uint64_t v19 = *(void **)(v9 + 24);
        if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v10 + 232), &v19))
        {
          WebCore::NetworkStorageSession::setAppBoundDomains();
          WebCore::NetworkStorageSession::setThirdPartyCookieBlockingMode();
        }
      }
    }
    uint64_t v11 = v18;
    uint64_t v18 = 0;
    uint64_t v12 = *(void *)a3;
    *(void *)a3 = 0;
    BOOL v13 = (void *)WTF::fastMalloc((WTF *)0x20);
    *BOOL v13 = &unk_1EE9C83E0;
    v13[1] = a1;
    uint64_t v13[2] = v11;
    v13[3] = v12;
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t result = 172;
      __break(0xC471u);
    }
    else
    {
      uint64_t v14 = v13;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
      uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v15 = &unk_1EE9C7620;
      v15[1] = a1;
      void v15[2] = v14;
      uint64_t v19 = v15;
      WTF::SuspendableWorkQueue::dispatch();
      uint64_t v17 = v19;
      uint64_t v19 = 0;
      if (v17) {
        (*(void (**)(void *))(*v17 + 8))(v17);
      }
      uint64_t result = (uint64_t)v18;
      if (v18) {
        return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v18, v16);
      }
    }
  }
  else
  {
    uint64_t v4 = *(void *)a3;
    *(void *)a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return v5(v4);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setManagedDomains(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  if (!*(unsigned char *)(a1 + 72) && *a2 && *(_DWORD *)(*a2 - 12))
  {
    WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy(a2, (uint64_t)a2, a3, (uint64_t *)&v18);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 32);
        uint64_t v19 = *(void **)(v9 + 24);
        if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v10 + 232), &v19))
        {
          WebCore::NetworkStorageSession::setManagedDomains();
          WebCore::NetworkStorageSession::setThirdPartyCookieBlockingMode();
        }
      }
    }
    uint64_t v11 = v18;
    uint64_t v18 = 0;
    uint64_t v12 = *(void *)a3;
    *(void *)a3 = 0;
    BOOL v13 = (void *)WTF::fastMalloc((WTF *)0x20);
    *BOOL v13 = &unk_1EE9C8408;
    v13[1] = a1;
    uint64_t v13[2] = v11;
    v13[3] = v12;
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t result = 172;
      __break(0xC471u);
    }
    else
    {
      uint64_t v14 = v13;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
      uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v15 = &unk_1EE9C7620;
      v15[1] = a1;
      void v15[2] = v14;
      uint64_t v19 = v15;
      WTF::SuspendableWorkQueue::dispatch();
      uint64_t v17 = v19;
      uint64_t v19 = 0;
      if (v17) {
        (*(void (**)(void *))(*v17 + 8))(v17);
      }
      uint64_t result = (uint64_t)v18;
      if (v18) {
        return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v18, v16);
      }
    }
  }
  else
  {
    uint64_t v4 = *(void *)a3;
    *(void *)a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return v5(v4);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::logFrameNavigation(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8)
{
  WebCore::RegistrableDomain::isolatedCopy(&v25);
  WebCore::RegistrableDomain::isolatedCopy(&v26);
  WebCore::RegistrableDomain::isolatedCopy(&v27);
  LOBYTE(v2++*(_DWORD *)(this + 8) = a6;
  BYTE1(v2++*(_DWORD *)(this + 8) = a7;
  *((double *)&v28 + objc_destroyWeak(this + 1) = a2;
  char v29 = a8;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x40);
  *(void *)uint64_t v13 = &unk_1EE9C8458;
  *(void *)(v13 + ++*(_DWORD *)(this + 8) = a1;
  *(void *)(v13 + 16) = v25;
  uint64_t v14 = v26;
  int v25 = 0;
  uint64_t v26 = 0;
  *(void *)(v13 + 24) = v14;
  uint64_t v15 = v27;
  int v27 = 0;
  *(void *)(v13 + 3objc_destroyWeak(this + 2) = v15;
  long long v16 = v28;
  *(unsigned char *)(v13 + 56) = v29;
  *(_OWORD *)(v13 + ++*(_DWORD *)(this - 40) = v16;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v17 = v13;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v18 = &unk_1EE9C7620;
    v18[1] = a1;
    uint64_t v18[2] = v17;
    uint64_t v30 = v18;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v20 = v30;
    uint64_t v30 = 0;
    if (v20) {
      (*(void (**)(void *))(*v20 + 8))(v20);
    }
    long long v21 = v27;
    int v27 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v19);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    uint64_t v22 = v26;
    uint64_t v26 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v19);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    uint64_t result = (uint64_t)v25;
    int v25 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::logUserInteraction(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 72))
  {
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(a1 + 80), a2, (uint64_t)&v15);
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  else
  {
    uint64_t v15 = a1;
    WebCore::RegistrableDomain::isolatedCopy(&v16);
    uint64_t v7 = *a3;
    *a3 = 0;
    uint64_t v17 = v7;
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v8 = &unk_1EE9C8480;
    v8[1] = v15;
    uint64_t v8[2] = v16;
    uint64_t v9 = v17;
    long long v16 = 0;
    uint64_t v17 = 0;
    v8[3] = v9;
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t result = 172;
      __break(0xC471u);
    }
    else
    {
      uint64_t v10 = v8;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
      uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v11 = &unk_1EE9C7620;
      v11[1] = a1;
      v11[2] = v10;
      uint64_t v14 = v11;
      WTF::SuspendableWorkQueue::dispatch();
      if (v14) {
        (*(void (**)(void *))(*v14 + 8))(v14);
      }
      uint64_t v13 = v17;
      uint64_t v17 = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      uint64_t result = (uint64_t)v16;
      long long v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::logCrossSiteLoadWithLinkDecoration(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  WebCore::RegistrableDomain::isolatedCopy(&v20);
  WebCore::RegistrableDomain::isolatedCopy(&v21);
  char v22 = a4;
  uint64_t v8 = *a5;
  *a5 = 0;
  uint64_t v23 = v8;
  uint64_t v9 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v9 = &unk_1EE9C84D0;
  *(void *)(v9 + ++*(_DWORD *)(this + 8) = a1;
  *(void *)(v9 + 16) = v20;
  uint64_t v10 = v21;
  uint64_t v20 = 0;
  long long v21 = 0;
  *(void *)(v9 + 24) = v10;
  *(unsigned char *)(v9 + 3objc_destroyWeak(this + 2) = v22;
  uint64_t v11 = v23;
  uint64_t v23 = 0;
  *(void *)(v9 + ++*(_DWORD *)(this - 40) = v11;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v12 = v9;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v13 = &unk_1EE9C7620;
    v13[1] = a1;
    uint64_t v13[2] = v12;
    uint64_t v24 = v13;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v15 = v24;
    uint64_t v24 = 0;
    if (v15) {
      (*(void (**)(void *))(*v15 + 8))(v15);
    }
    uint64_t v16 = v23;
    uint64_t v23 = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t v17 = v21;
    long long v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v14);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t result = (uint64_t)v20;
    uint64_t v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::clearUserInteraction(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v5 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 80), a2);
    uint64_t v6 = *(void *)(a1 + 80);
    if (v6)
    {
      uint64_t v7 = (WTF::StringImpl **)(v6 + 8 * *(unsigned int *)(v6 - 4));
      if (v7 != v5) {
        goto LABEL_4;
      }
    }
    else if (v5)
    {
      uint64_t v7 = 0;
LABEL_4:
      if (v7 != v5) {
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::remove((uint64_t *)(a1 + 80), v5);
      }
    }
    uint64_t v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
    return v9(v8);
  }
  WebCore::RegistrableDomain::isolatedCopy(&v20);
  uint64_t v11 = *a3;
  *a3 = 0;
  uint64_t v21 = v11;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v12 = &unk_1EE9C84F8;
  v12[1] = a1;
  uint64_t v12[2] = v20;
  uint64_t v13 = v21;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  v12[3] = v13;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v14 = v12;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v15 = &unk_1EE9C7620;
    v15[1] = a1;
    void v15[2] = v14;
    char v22 = v15;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v17 = v22;
    char v22 = 0;
    if (v17) {
      (*(void (**)(void *))(*v17 + 8))(v17);
    }
    uint64_t v18 = v21;
    uint64_t v21 = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    uint64_t result = (uint64_t)v20;
    uint64_t v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setTimeAdvanceForTesting(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v6 = &unk_1EE9C8548;
  *(void *)(v6 + ++*(_DWORD *)(this + 8) = a1;
  *(double *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = v5;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v7 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v8 = &unk_1EE9C7620;
    v8[1] = a1;
    uint64_t v8[2] = v7;
    uint64_t v10 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = (uint64_t)v10;
    if (v10) {
      return (*(uint64_t (**)(void *))(*v10 + 8))(v10);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::hasHadUserInteraction(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v5 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 80), a2);
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
  else
  {
    WebCore::RegistrableDomain::isolatedCopy(&v18);
    uint64_t v9 = *a3;
    *a3 = 0;
    uint64_t v19 = v9;
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v10 = &unk_1EE9C8570;
    v10[1] = a1;
    v10[2] = v18;
    uint64_t v11 = v19;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    v10[3] = v11;
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t result = 172;
      __break(0xC471u);
    }
    else
    {
      uint64_t v12 = v10;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
      uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v13 = &unk_1EE9C7620;
      v13[1] = a1;
      uint64_t v13[2] = v12;
      uint64_t v20 = v13;
      WTF::SuspendableWorkQueue::dispatch();
      uint64_t v15 = v20;
      uint64_t v20 = 0;
      if (v15) {
        (*(void (**)(void *))(*v15 + 8))(v15);
      }
      uint64_t v16 = v19;
      uint64_t v19 = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
      uint64_t result = (uint64_t)v18;
      uint64_t v18 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setLastSeen(uint64_t a1, double a2, uint64_t a3, uint64_t *a4)
{
  WebCore::RegistrableDomain::isolatedCopy(&v17);
  double v18 = a2;
  uint64_t v7 = *a4;
  *a4 = 0;
  uint64_t v19 = v7;
  uint64_t v8 = (double *)WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v8 = &unk_1EE9C85C0;
  *((void *)v8 + objc_destroyWeak(this + 1) = a1;
  *((void *)v8 + objc_destroyWeak(this + 2) = v17;
  v8[3] = v18;
  uint64_t v9 = v19;
  uint64_t v17 = 0;
  uint64_t v19 = 0;
  *((void *)v8 + 4) = v9;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v10 = v8;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v11 = &unk_1EE9C7620;
    v11[1] = a1;
    v11[2] = v10;
    uint64_t v20 = v11;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v13 = v20;
    uint64_t v20 = 0;
    if (v13) {
      (*(void (**)(void *))(*v13 + 8))(v13);
    }
    uint64_t v14 = v19;
    uint64_t v19 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    uint64_t result = (uint64_t)v17;
    uint64_t v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::mergeStatisticForTesting(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, char a10, int a11, uint64_t *a12)
{
  WebCore::RegistrableDomain::isolatedCopy(&v33);
  WebCore::RegistrableDomain::isolatedCopy(&v34);
  WebCore::RegistrableDomain::isolatedCopy(&v35);
  *(double *)&long long v36 = a2;
  BYTE8(v36) = a7;
  *(double *)&long long v37 = a3;
  BYTE8(v37) = a8;
  BYTE9(v37) = a9;
  BYTE10(v37) = a10;
  HIDWORD(v37) = a11;
  uint64_t v19 = *a12;
  *a12 = 0;
  uint64_t v38 = v19;
  uint64_t v20 = WTF::fastMalloc((WTF *)0x50);
  *(void *)uint64_t v20 = &unk_1EE9C85E8;
  *(void *)(v20 + ++*(_DWORD *)(this + 8) = a1;
  *(void *)(v20 + 16) = v33;
  uint64_t v21 = v34;
  uint64_t v33 = 0;
  int v34 = 0;
  *(void *)(v20 + 24) = v21;
  *(void *)(v20 + 3objc_destroyWeak(this + 2) = v35;
  long long v22 = v37;
  *(_OWORD *)(v20 + ++*(_DWORD *)(this - 40) = v36;
  *(_OWORD *)(v20 + 56) = v22;
  uint64_t v23 = v38;
  int v35 = 0;
  uint64_t v38 = 0;
  *(void *)(v20 + 7objc_destroyWeak(this + 2) = v23;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v24 = v20;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    int v25 = (void *)WTF::fastMalloc((WTF *)0x18);
    *int v25 = &unk_1EE9C7620;
    v25[1] = a1;
    v25[2] = v24;
    uint64_t v39 = v25;
    WTF::SuspendableWorkQueue::dispatch();
    int v27 = v39;
    uint64_t v39 = 0;
    if (v27) {
      (*(void (**)(void *))(*v27 + 8))(v27);
    }
    uint64_t v28 = v38;
    uint64_t v38 = 0;
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
    char v29 = v35;
    int v35 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v26);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    uint64_t v30 = v34;
    int v34 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v26);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
    uint64_t result = (uint64_t)v33;
    uint64_t v33 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  uint64_t v6 = *a4;
  *a4 = 0;
  uint64_t v20 = v6;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v7 = &unk_1EE9C8610;
  v7[1] = a1;
  v7[2] = v18;
  uint64_t v8 = v19;
  double v18 = 0;
  uint64_t v19 = 0;
  void v7[3] = v8;
  uint64_t v9 = v20;
  uint64_t v20 = 0;
  v7[4] = v9;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v10 = v7;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v11 = &unk_1EE9C7620;
    v11[1] = a1;
    v11[2] = v10;
    uint64_t v21 = v11;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v13 = v21;
    uint64_t v21 = 0;
    if (v13) {
      (*(void (**)(void *))(*v13 + 8))(v13);
    }
    uint64_t v14 = v20;
    uint64_t v20 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    uint64_t v15 = v19;
    uint64_t v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v12);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t result = (uint64_t)v18;
    double v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::RegistrableDomain::isolatedCopy(&v15);
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v16 = v5;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v6 = &unk_1EE9C8660;
  v6[1] = a1;
  void v6[2] = v15;
  uint64_t v7 = v16;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  _OWORD v6[3] = v7;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v8 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v9 = &unk_1EE9C7620;
    v9[1] = a1;
    v9[2] = v8;
    uint64_t v17 = v9;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v11 = v17;
    uint64_t v17 = 0;
    if (v11) {
      (*(void (**)(void *))(*v11 + 8))(v11);
    }
    uint64_t v12 = v16;
    uint64_t v16 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    uint64_t result = (uint64_t)v15;
    uint64_t v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setVeryPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::RegistrableDomain::isolatedCopy(&v15);
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v16 = v5;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v6 = &unk_1EE9C8688;
  v6[1] = a1;
  void v6[2] = v15;
  uint64_t v7 = v16;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  _OWORD v6[3] = v7;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v8 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v9 = &unk_1EE9C7620;
    v9[1] = a1;
    v9[2] = v8;
    uint64_t v17 = v9;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v11 = v17;
    uint64_t v17 = 0;
    if (v11) {
      (*(void (**)(void *))(*v11 + 8))(v11);
    }
    uint64_t v12 = v16;
    uint64_t v16 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    uint64_t result = (uint64_t)v15;
    uint64_t v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setMostRecentWebPushInteractionTime(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v14 = v4;
  WebCore::RegistrableDomain::isolatedCopy(&v15);
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v5 = &unk_1EE9C86B0;
  v5[1] = a1;
  v5[2] = v14;
  uint64_t v6 = v15;
  uint64_t v15 = 0;
  v5[3] = v6;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v7 = v5;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v8 = &unk_1EE9C7620;
    v8[1] = a1;
    uint64_t v8[2] = v7;
    uint64_t v16 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v10 = v16;
    uint64_t v16 = 0;
    if (v10) {
      (*(void (**)(void *))(*v10 + 8))(v10);
    }
    uint64_t v11 = v15;
    uint64_t v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v4 = &unk_1EE9C86D8;
  v4[1] = a1;
  uint64_t v4[2] = v3;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v5 = v4;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v6 = &unk_1EE9C7620;
    v6[1] = a1;
    void v6[2] = v5;
    uint64_t v8 = v6;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = (uint64_t)v8;
    if (v8) {
      return (*(uint64_t (**)(void *))(*v8 + 8))(v8);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::isPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return v5(v4);
  }
  else
  {
    WebCore::RegistrableDomain::isolatedCopy(&v17);
    uint64_t v8 = *a3;
    *a3 = 0;
    uint64_t v18 = v8;
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v9 = &unk_1EE9C8750;
    v9[1] = a1;
    v9[2] = v17;
    uint64_t v10 = v18;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    v9[3] = v10;
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t result = 172;
      __break(0xC471u);
    }
    else
    {
      uint64_t v11 = v9;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
      uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v12 = &unk_1EE9C7620;
      v12[1] = a1;
      uint64_t v12[2] = v11;
      uint64_t v19 = v12;
      WTF::SuspendableWorkQueue::dispatch();
      uint64_t v14 = v19;
      uint64_t v19 = 0;
      if (v14) {
        (*(void (**)(void *))(*v14 + 8))(v14);
      }
      uint64_t v15 = v18;
      uint64_t v18 = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      uint64_t result = (uint64_t)v17;
      uint64_t v17 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::isVeryPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::RegistrableDomain::isolatedCopy(&v15);
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v16 = v5;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v6 = &unk_1EE9C87A0;
  v6[1] = a1;
  void v6[2] = v15;
  uint64_t v7 = v16;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  _OWORD v6[3] = v7;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v8 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v9 = &unk_1EE9C7620;
    v9[1] = a1;
    v9[2] = v8;
    uint64_t v17 = v9;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v11 = v17;
    uint64_t v17 = 0;
    if (v11) {
      (*(void (**)(void *))(*v11 + 8))(v11);
    }
    uint64_t v12 = v16;
    uint64_t v16 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    uint64_t result = (uint64_t)v15;
    uint64_t v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubresourceUnder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  uint64_t v6 = *a4;
  *a4 = 0;
  uint64_t v20 = v6;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v7 = &unk_1EE9C87F0;
  v7[1] = a1;
  v7[2] = v18;
  uint64_t v8 = v19;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  void v7[3] = v8;
  uint64_t v9 = v20;
  uint64_t v20 = 0;
  v7[4] = v9;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v10 = v7;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v11 = &unk_1EE9C7620;
    v11[1] = a1;
    v11[2] = v10;
    uint64_t v21 = v11;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v13 = v21;
    uint64_t v21 = 0;
    if (v13) {
      (*(void (**)(void *))(*v13 + 8))(v13);
    }
    uint64_t v14 = v20;
    uint64_t v20 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    uint64_t v15 = v19;
    uint64_t v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v12);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t result = (uint64_t)v18;
    uint64_t v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubFrameUnder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  uint64_t v6 = *a4;
  *a4 = 0;
  uint64_t v20 = v6;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v7 = &unk_1EE9C8840;
  v7[1] = a1;
  v7[2] = v18;
  uint64_t v8 = v19;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  void v7[3] = v8;
  uint64_t v9 = v20;
  uint64_t v20 = 0;
  v7[4] = v9;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v10 = v7;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v11 = &unk_1EE9C7620;
    v11[1] = a1;
    v11[2] = v10;
    uint64_t v21 = v11;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v13 = v21;
    uint64_t v21 = 0;
    if (v13) {
      (*(void (**)(void *))(*v13 + 8))(v13);
    }
    uint64_t v14 = v20;
    uint64_t v20 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    uint64_t v15 = v19;
    uint64_t v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v12);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t result = (uint64_t)v18;
    uint64_t v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::isRegisteredAsRedirectingTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  uint64_t v6 = *a4;
  *a4 = 0;
  uint64_t v20 = v6;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v7 = &unk_1EE9C8890;
  v7[1] = a1;
  v7[2] = v18;
  uint64_t v8 = v19;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  void v7[3] = v8;
  uint64_t v9 = v20;
  uint64_t v20 = 0;
  v7[4] = v9;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v10 = v7;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v11 = &unk_1EE9C7620;
    v11[1] = a1;
    v11[2] = v10;
    uint64_t v21 = v11;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v13 = v21;
    uint64_t v21 = 0;
    if (v13) {
      (*(void (**)(void *))(*v13 + 8))(v13);
    }
    uint64_t v14 = v20;
    uint64_t v20 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    uint64_t v15 = v19;
    uint64_t v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v12);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t result = (uint64_t)v18;
    uint64_t v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::clearPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::RegistrableDomain::isolatedCopy(&v15);
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v16 = v5;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v6 = &unk_1EE9C88E0;
  v6[1] = a1;
  void v6[2] = v15;
  uint64_t v7 = v16;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  _OWORD v6[3] = v7;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v8 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v9 = &unk_1EE9C7620;
    v9[1] = a1;
    v9[2] = v8;
    uint64_t v17 = v9;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v11 = v17;
    uint64_t v17 = 0;
    if (v11) {
      (*(void (**)(void *))(*v11 + 8))(v11);
    }
    uint64_t v12 = v16;
    uint64_t v16 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    uint64_t result = (uint64_t)v15;
    uint64_t v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setGrandfathered(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  WebCore::RegistrableDomain::isolatedCopy(&v17);
  char v18 = a3;
  uint64_t v7 = *a4;
  *a4 = 0;
  uint64_t v19 = v7;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v8 = &unk_1EE9C8908;
  *(void *)(v8 + ++*(_DWORD *)(this + 8) = a1;
  *(void *)(v8 + 16) = v17;
  *(unsigned char *)(v8 + 24) = v18;
  uint64_t v9 = v19;
  uint64_t v17 = 0;
  uint64_t v19 = 0;
  *(void *)(v8 + 3objc_destroyWeak(this + 2) = v9;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v10 = v8;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v11 = &unk_1EE9C7620;
    v11[1] = a1;
    v11[2] = v10;
    uint64_t v20 = v11;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v13 = v20;
    uint64_t v20 = 0;
    if (v13) {
      (*(void (**)(void *))(*v13 + 8))(v13);
    }
    uint64_t v14 = v19;
    uint64_t v19 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    uint64_t result = (uint64_t)v17;
    uint64_t v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::isGrandfathered(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v14 = v4;
  WebCore::RegistrableDomain::isolatedCopy(&v15);
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v5 = &unk_1EE9C8930;
  v5[1] = a1;
  v5[2] = v14;
  uint64_t v6 = v15;
  uint64_t v15 = 0;
  v5[3] = v6;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v7 = v5;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v8 = &unk_1EE9C7620;
    v8[1] = a1;
    uint64_t v8[2] = v7;
    uint64_t v16 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v10 = v16;
    uint64_t v16 = 0;
    if (v10) {
      (*(void (**)(void *))(*v10 + 8))(v10);
    }
    uint64_t v11 = v15;
    uint64_t v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setSubframeUnderTopFrameDomain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  *a4 = 0;
  uint64_t v17 = v5;
  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v6 = &unk_1EE9C8980;
  v6[1] = a1;
  void v6[2] = v17;
  uint64_t v7 = v18;
  char v18 = 0;
  _OWORD v6[3] = v7;
  uint64_t v8 = v19;
  uint64_t v19 = 0;
  v6[4] = v8;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v9 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v10 = &unk_1EE9C7620;
    v10[1] = a1;
    v10[2] = v9;
    uint64_t v20 = v10;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v12 = v20;
    uint64_t v20 = 0;
    if (v12) {
      (*(void (**)(void *))(*v12 + 8))(v12);
    }
    uint64_t v13 = v19;
    uint64_t v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v11);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = v18;
    char v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v11);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setSubresourceUnderTopFrameDomain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  *a4 = 0;
  uint64_t v17 = v5;
  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v6 = &unk_1EE9C89A8;
  v6[1] = a1;
  void v6[2] = v17;
  uint64_t v7 = v18;
  char v18 = 0;
  _OWORD v6[3] = v7;
  uint64_t v8 = v19;
  uint64_t v19 = 0;
  v6[4] = v8;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v9 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v10 = &unk_1EE9C7620;
    v10[1] = a1;
    v10[2] = v9;
    uint64_t v20 = v10;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v12 = v20;
    uint64_t v20 = 0;
    if (v12) {
      (*(void (**)(void *))(*v12 + 8))(v12);
    }
    uint64_t v13 = v19;
    uint64_t v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v11);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = v18;
    char v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v11);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  *a4 = 0;
  uint64_t v17 = v5;
  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v6 = &unk_1EE9C89D0;
  v6[1] = a1;
  void v6[2] = v17;
  uint64_t v7 = v18;
  char v18 = 0;
  _OWORD v6[3] = v7;
  uint64_t v8 = v19;
  uint64_t v19 = 0;
  v6[4] = v8;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v9 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v10 = &unk_1EE9C7620;
    v10[1] = a1;
    v10[2] = v9;
    uint64_t v20 = v10;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v12 = v20;
    uint64_t v20 = 0;
    if (v12) {
      (*(void (**)(void *))(*v12 + 8))(v12);
    }
    uint64_t v13 = v19;
    uint64_t v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v11);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = v18;
    char v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v11);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectFrom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  *a4 = 0;
  uint64_t v17 = v5;
  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v6 = &unk_1EE9C89F8;
  v6[1] = a1;
  void v6[2] = v17;
  uint64_t v7 = v18;
  char v18 = 0;
  _OWORD v6[3] = v7;
  uint64_t v8 = v19;
  uint64_t v19 = 0;
  v6[4] = v8;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v9 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v10 = &unk_1EE9C7620;
    v10[1] = a1;
    v10[2] = v9;
    uint64_t v20 = v10;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v12 = v20;
    uint64_t v20 = 0;
    if (v12) {
      (*(void (**)(void *))(*v12 + 8))(v12);
    }
    uint64_t v13 = v19;
    uint64_t v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v11);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = v18;
    char v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v11);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  *a4 = 0;
  uint64_t v17 = v5;
  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v6 = &unk_1EE9C8A20;
  v6[1] = a1;
  void v6[2] = v17;
  uint64_t v7 = v18;
  char v18 = 0;
  _OWORD v6[3] = v7;
  uint64_t v8 = v19;
  uint64_t v19 = 0;
  v6[4] = v8;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v9 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v10 = &unk_1EE9C7620;
    v10[1] = a1;
    v10[2] = v9;
    uint64_t v20 = v10;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v12 = v20;
    uint64_t v20 = 0;
    if (v12) {
      (*(void (**)(void *))(*v12 + 8))(v12);
    }
    uint64_t v13 = v19;
    uint64_t v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v11);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = v18;
    char v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v11);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectFrom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  *a4 = 0;
  uint64_t v17 = v5;
  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v6 = &unk_1EE9C8A48;
  v6[1] = a1;
  void v6[2] = v17;
  uint64_t v7 = v18;
  char v18 = 0;
  _OWORD v6[3] = v7;
  uint64_t v8 = v19;
  uint64_t v19 = 0;
  v6[4] = v8;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v9 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v10 = &unk_1EE9C7620;
    v10[1] = a1;
    v10[2] = v9;
    uint64_t v20 = v10;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v12 = v20;
    uint64_t v20 = 0;
    if (v12) {
      (*(void (**)(void *))(*v12 + 8))(v12);
    }
    uint64_t v13 = v19;
    uint64_t v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v11);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = v18;
    char v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v11);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::scheduleCookieBlockingUpdate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v4 = &unk_1EE9C8A70;
  v4[1] = a1;
  uint64_t v4[2] = v3;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v5 = v4;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v6 = &unk_1EE9C7620;
    v6[1] = a1;
    void v6[2] = v5;
    uint64_t v8 = v6;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = (uint64_t)v8;
    if (v8) {
      return (*(uint64_t (**)(void *))(*v8 + 8))(v8);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(uint64_t a1, char a2, WTF::StringImpl *a3)
{
  if (*(unsigned char *)(a1 + 72))
  {
    return WebKit::WebResourceLoadStatisticsStore::clearInMemoryEphemeral(a1, a3);
  }
  else
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v7 = *(void *)a3;
    *(void *)a3 = 0;
    uint64_t v8 = WTF::fastMalloc((WTF *)0x28);
    *(void *)uint64_t v8 = &unk_1EE9C8AC0;
    *(void *)(v8 + ++*(_DWORD *)(this + 8) = a1;
    *(void *)(v8 + 16) = a1;
    *(unsigned char *)(v8 + 24) = a2;
    *(void *)(v8 + 3objc_destroyWeak(this + 2) = v7;
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t result = 172;
      __break(0xC471u);
    }
    else
    {
      uint64_t v9 = v8;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v10 = &unk_1EE9C7620;
      v10[1] = a1;
      v10[2] = v9;
      uint64_t v11 = v10;
      WTF::SuspendableWorkQueue::dispatch();
      uint64_t result = (uint64_t)v11;
      if (v11) {
        return (*(uint64_t (**)(void *))(*v11 + 8))(v11);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::clearInMemoryEphemeral(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4 = *(WTF::StringImpl ***)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 80) = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 32);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 24);
  uint64_t v6 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 232), &v10);
  if (v6) {
    WebCore::NetworkStorageSession::removeAllStorageAccess(v6);
  }
  uint64_t v7 = *(void *)a2;
  *(void *)a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v8(v7);
}

uint64_t WebKit::WebResourceLoadStatisticsStore::domainIDExistsInDatabase(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v6 = &unk_1EE9C8B60;
  *(void *)(v6 + ++*(_DWORD *)(this + 8) = a1;
  *(_DWORD *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = v5;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v7 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v8 = &unk_1EE9C7620;
    v8[1] = a1;
    uint64_t v8[2] = v7;
    uint64_t v10 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = (uint64_t)v10;
    if (v10) {
      return (*(uint64_t (**)(void *))(*v10 + 8))(v10);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setTimeToLiveUserInteraction(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v6 = &unk_1EE9C8BB0;
  *(void *)(v6 + ++*(_DWORD *)(this + 8) = a1;
  *(double *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = v5;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v7 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v8 = &unk_1EE9C7620;
    v8[1] = a1;
    uint64_t v8[2] = v7;
    uint64_t v10 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = (uint64_t)v10;
    if (v10) {
      return (*(uint64_t (**)(void *))(*v10 + 8))(v10);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setMinimumTimeBetweenDataRecordsRemoval(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v6 = &unk_1EE9C8BD8;
  *(void *)(v6 + ++*(_DWORD *)(this + 8) = a1;
  *(double *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = v5;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v7 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v8 = &unk_1EE9C7620;
    v8[1] = a1;
    uint64_t v8[2] = v7;
    uint64_t v10 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = (uint64_t)v10;
    if (v10) {
      return (*(uint64_t (**)(void *))(*v10 + 8))(v10);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setGrandfatheringTime(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v6 = &unk_1EE9C8C00;
  *(void *)(v6 + ++*(_DWORD *)(this + 8) = a1;
  *(double *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = v5;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v7 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v8 = &unk_1EE9C7620;
    v8[1] = a1;
    uint64_t v8[2] = v7;
    uint64_t v10 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = (uint64_t)v10;
    if (v10) {
      return (*(uint64_t (**)(void *))(*v10 + 8))(v10);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setCacheMaxAgeCap(uint64_t a1, uint64_t *a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 32);
      uint64_t v8 = *(void *)(v3 + 24);
      if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 232), &v8))
      {
        WebCore::NetworkStorageSession::setCacheMaxAgeCapForPrevalentResources();
      }
    }
  }
  uint64_t v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

uint64_t WebKit::WebResourceLoadStatisticsStore::callUpdatePrevalentDomainsToBlockCookiesForHandler(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1[2];
  if (!v3) {
    goto LABEL_132;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    goto LABEL_132;
  }
  uint64_t v95 = a3;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v102 = *(IPC::Encoder **)(v4 + 24);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 232), &v102))
  {
    WebCore::NetworkStorageSession::setPrevalentDomainsToBlockAndDeleteCookiesFor();
    WebCore::NetworkStorageSession::setPrevalentDomainsToBlockButKeepCookiesFor();
    WebCore::NetworkStorageSession::setDomainsWithUserInteractionAsFirstParty();
  }
  uint64_t v100 = 0;
  uint64_t v9 = *(unsigned int *)(a2 + 44);
  if (v9)
  {
    uint64_t v10 = 8 * v9;
    uint64_t v11 = *(WTF::StringImpl ***)(a2 + 32);
    do
    {
      if ((byte_1EB359871 & 1) == 0)
      {
        uint64_t v101 = 0;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v104, v99);
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(&v101, v99, (uint64_t)&v102);
        uint64_t v13 = v99[0];
        v99[0] = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, v12);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
        uint64_t v14 = v104;
        uint64_t v104 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, v12);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v104, v99);
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(&v101, v99, (uint64_t)&v102);
        uint64_t v16 = v99[0];
        v99[0] = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            WTF::StringImpl::destroy(v16, v15);
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
        uint64_t v17 = v104;
        uint64_t v104 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy(v17, v15);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
        qword_1EB359878 = v101;
        byte_1EB359871 = 1;
      }
      if (WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(&qword_1EB359878, v11))WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v100, v11, (uint64_t)&v102); {
      ++v11;
      }
      v10 -= 8;
    }
    while (v10);
  }
  uint64_t v19 = (WTF::StringImpl ***)(a1 + 11);
  uint64_t v18 = a1[11];
  if (v18) {
    LODWORD(v1++*(_DWORD *)(this + 8) = *(_DWORD *)(v18 - 12);
  }
  int v20 = (int)v100;
  if (v100) {
    int v20 = *((_DWORD *)v100 - 3);
  }
  if (v18 != v20)
  {
LABEL_40:
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::operator=(v19, (uint64_t *)&v100);
    uint64_t v28 = *(void *)(*(void *)(*(void *)(a1[2] + 8) + 32) + 40);
    char v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v29 = 354;
    *((void *)v29 + objc_destroyWeak(this + 1) = 0;
    *((void *)v29 + 66) = (char *)v29 + 16;
    *((void *)v29 + 67) = 512;
    *((void *)v29 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v29 + 70) = 0;
    *((void *)v29 + 69) = 0;
    IPC::Encoder::encodeHeader(v29);
    uint64_t v102 = v29;
    IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v29, (uint64_t *)&v100);
    IPC::Connection::sendMessageImpl(v28, (uint64_t *)&v102, 0, 0);
    uint64_t v30 = v102;
    uint64_t v102 = 0;
    if (v30)
    {
      IPC::Encoder::~Encoder(v30, v22);
      WTF::fastFree(v91, v92);
    }
    goto LABEL_42;
  }
  uint64_t v21 = (IPC::Encoder *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)&v100, v7, v8);
  uint64_t v24 = (WTF::ASCIICaseInsensitiveHash **)v21;
  uint64_t v102 = v21;
  uint64_t v103 = (uint64_t)v22;
  if (v100) {
    int v25 = (IPC::Encoder *)&v100[*((unsigned int *)v100 - 1)];
  }
  else {
    int v25 = 0;
  }
  if (v25 != v21)
  {
    while (WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)v19, v24))
    {
      uint64_t v102 = (IPC::Encoder *)((char *)v102 + 8);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v102, v26, v27);
      uint64_t v24 = (WTF::ASCIICaseInsensitiveHash **)v102;
      if (v102 == v25) {
        goto LABEL_42;
      }
    }
    goto LABEL_40;
  }
LABEL_42:
  uint64_t v101 = 0;
  uint64_t v31 = (IPC::Encoder *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(a2 + 48), (uint64_t)v22, v23);
  int v34 = v31;
  int v35 = 0;
  uint64_t v102 = v31;
  uint64_t v103 = (uint64_t)v32;
  uint64_t v36 = *(void *)(a2 + 48);
  if (v36) {
    int v35 = (IPC::Encoder *)(v36 + 24 * *(unsigned int *)(v36 - 4));
  }
  if (v35 == v31) {
    goto LABEL_82;
  }
  long long v97 = v35;
  do
  {
    uint64_t v37 = *((unsigned int *)v34 + 5);
    if (!v37) {
      goto LABEL_81;
    }
    uint64_t v38 = (void *)*((void *)v34 + 1);
    uint64_t v39 = &v38[v37];
    do
    {
      if (!WebCore::NetworkStorageSession::loginDomainMatchesRequestingDomain()) {
        goto LABEL_76;
      }
      v99[0] = 0;
      v99[1] = 0;
      uint64_t v104 = (WTF::StringImpl *)v99;
      uint64_t v40 = v101;
      if (v101
        || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(&v101, 0), (uint64_t v40 = v101) != 0))
      {
        int v41 = *(_DWORD *)(v40 - 8);
      }
      else
      {
        int v41 = 0;
      }
      unsigned int v42 = WTF::ASCIICaseInsensitiveHash::hash(*(WTF::ASCIICaseInsensitiveHash **)v34, v32) & v41;
      uint64_t v43 = v40 + 24 * v42;
      if ((WTF::equal(*(WTF **)v43, 0, v44) & 1) == 0)
      {
        uint64_t v46 = 0;
        int v47 = 1;
        do
        {
          if (*(void *)v43 == -1)
          {
            uint64_t v46 = (void *)v43;
          }
          else if (WTF::equalIgnoringASCIICase(*(WTF **)v43, *(const WTF::StringImpl **)v34, v45))
          {
            goto LABEL_70;
          }
          unsigned int v42 = (v42 + v47) & v41;
          uint64_t v43 = v40 + 24 * v42;
          ++v47;
        }
        while (!WTF::equal(*(WTF **)v43, 0, v45));
        if (v46)
        {
          v46[1] = 0;
          v46[2] = 0;
          void *v46 = 0;
          --*(_DWORD *)(v101 - 16);
          uint64_t v43 = (uint64_t)v46;
        }
      }
      WTF::HashMapTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>::translate<WebCore::RegistrableDomain const&,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>> WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineAdd<WebCore::RegistrableDomain const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WebCore::RegistrableDomain const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1}>((uint64_t *)v43, (WTF::StringImpl **)v34, (uint64_t **)&v104);
      if (v101) {
        int v49 = *(_DWORD *)(v101 - 12) + 1;
      }
      else {
        int v49 = 1;
      }
      *(_DWORD *)(v101 - 1objc_destroyWeak(this + 2) = v49;
      if (v101) {
        int v50 = *(_DWORD *)(v101 - 12);
      }
      else {
        int v50 = 0;
      }
      uint64_t v51 = (*(_DWORD *)(v101 - 16) + v50);
      unint64_t v52 = *(unsigned int *)(v101 - 4);
      if (v52 > 0x400)
      {
        if (v52 > 2 * v51) {
          goto LABEL_70;
        }
LABEL_69:
        uint64_t v43 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(&v101, (WTF::StringImpl **)v43);
        goto LABEL_70;
      }
      if (3 * v52 <= 4 * v51) {
        goto LABEL_69;
      }
LABEL_70:
      long long v53 = (uint64_t *)(v43 + 8);
      uint64_t v54 = *(unsigned int *)(v43 + 20);
      if (v54 == *(_DWORD *)(v43 + 16))
      {
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)v53, (unint64_t)v38);
      }
      else
      {
        uint64_t v55 = *v53;
        long long v56 = (_DWORD *)*v38;
        if (*v38) {
          *v56 += 2;
        }
        *(void *)(v55 + 8 * v54) = v56;
        *(_DWORD *)(v43 + 20) = v54 + 1;
      }
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v99, v48);
LABEL_76:
      ++v38;
    }
    while (v38 != v39);
    int v34 = v102;
    int v35 = v97;
LABEL_81:
    uint64_t v102 = (IPC::Encoder *)((char *)v34 + 24);
    WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v102, (uint64_t)v32, v33);
    int v34 = v102;
  }
  while (v102 != v35);
LABEL_82:
  long long v57 = (WTF::StringImpl *)a1;
  uint64_t v58 = a1[12];
  if (v58) {
    int v59 = *(_DWORD *)(v58 - 12);
  }
  else {
    int v59 = 0;
  }
  if (v101) {
    int v60 = *(_DWORD *)(v101 - 12);
  }
  else {
    int v60 = 0;
  }
  if (v59 != v60) {
    goto LABEL_117;
  }
  if (v58)
  {
    uint64_t v61 = (IPC::Encoder *)(v58 + 24 * *(unsigned int *)(v58 - 4));
    if (v101) {
      goto LABEL_91;
    }
LABEL_93:
    uint64_t v62 = 0;
  }
  else
  {
    uint64_t v61 = 0;
    if (!v101) {
      goto LABEL_93;
    }
LABEL_91:
    uint64_t v62 = v101 + 24 * *(unsigned int *)(v101 - 4);
  }
  char v63 = (IPC::Encoder *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a1 + 12, (uint64_t)v32, v33);
  uint64_t v102 = v63;
  uint64_t v103 = (uint64_t)v32;
  if (v61 == v63) {
    goto LABEL_127;
  }
  long long v65 = (WTF::ASCIICaseInsensitiveHash **)v63;
  while (2)
  {
    uint64_t v66 = v101;
    if (!v101) {
      goto LABEL_104;
    }
    int v67 = *(_DWORD *)(v101 - 8);
    unsigned int v68 = WTF::ASCIICaseInsensitiveHash::hash(*v65, v32) & v67;
    uint64_t v69 = v66 + 24 * v68;
    if (WTF::equal(*(WTF **)v69, 0, v70))
    {
LABEL_102:
      if (v101)
      {
        uint64_t v69 = v101 + 24 * *(unsigned int *)(v101 - 4);
        goto LABEL_105;
      }
LABEL_104:
      uint64_t v69 = 0;
      goto LABEL_105;
    }
    int v71 = 1;
    while (*(void *)v69 == -1 || (WTF::equalIgnoringASCIICase(*(WTF **)v69, *v65, v64) & 1) == 0)
    {
      unsigned int v68 = (v68 + v71) & v67;
      uint64_t v69 = v66 + 24 * v68;
      ++v71;
      if (WTF::equal(*(WTF **)v69, 0, v64)) {
        goto LABEL_102;
      }
    }
LABEL_105:
    if (v62 != v69)
    {
      long long v72 = v102;
      unint64_t v73 = *((unsigned int *)v102 + 5);
      if (v73 == *(_DWORD *)(v69 + 20))
      {
        if (v73)
        {
          long long v74 = (WTF **)*((void *)v102 + 1);
          long long v75 = *(const WTF::StringImpl ***)(v69 + 8);
          if (!WTF::equal(*v74, *v75, v64)) {
            break;
          }
          unint64_t v76 = 0;
          long long v77 = v75 + 1;
          uint64_t v78 = v74 + 1;
          while (v73 - 1 != v76)
          {
            char v79 = WTF::equal(v78[v76], v77[v76], v64);
            ++v76;
            if ((v79 & 1) == 0)
            {
              if (v76 < v73) {
                goto LABEL_116;
              }
              break;
            }
          }
          long long v72 = v102;
        }
        uint64_t v102 = (IPC::Encoder *)((char *)v72 + 24);
        WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v102, (uint64_t)v32, v64);
        long long v65 = (WTF::ASCIICaseInsensitiveHash **)v102;
        if (v102 == v61) {
          goto LABEL_127;
        }
        continue;
      }
    }
    break;
  }
LABEL_116:
  long long v57 = (WTF::StringImpl *)a1;
LABEL_117:
  uint64_t v80 = *((void *)v57 + 2);
  if (v80)
  {
    uint64_t v81 = *(void *)(v80 + 8);
    if (v81)
    {
      uint64_t v82 = *(void *)(v81 + 32);
      uint64_t v102 = *(IPC::Encoder **)(v81 + 24);
      if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v82 + 232), &v102))
      {
        WebCore::NetworkStorageSession::setDomainsWithCrossPageStorageAccess();
      }
      uint64_t v83 = *(os_unfair_lock_s **)(*(void *)(*(void *)(*((void *)v57 + 2) + 8) + 32) + 40);
      v99[0] = v57;
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)&v99[1], &v101);
      long long v98 = *(_OWORD *)v99;
      v99[1] = 0;
      uint64_t v84 = WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v84 = &unk_1EE9C8C28;
      *(_OWORD *)(v84 + ++*(_DWORD *)(this + 8) = v98;
      uint64_t v85 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      __int16 v86 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)__int16 v86 = 353;
      *((void *)v86 + objc_destroyWeak(this + 1) = 0;
      *((void *)v86 + 66) = (char *)v86 + 16;
      *((void *)v86 + 67) = 512;
      *((void *)v86 + 6++*(_DWORD *)(this + 8) = 0;
      *((void *)v86 + 70) = 0;
      *((void *)v86 + 69) = 0;
      IPC::Encoder::encodeHeader(v86);
      uint64_t v104 = v86;
      IPC::ArgumentCoder<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&>(v86, &v101);
      uint64_t v102 = (IPC::Encoder *)v84;
      uint64_t v103 = v85;
      IPC::Connection::sendMessageWithAsyncReply(v83, &v104, (uint64_t *)&v102, 0, 0);
      char v87 = v102;
      uint64_t v102 = 0;
      if (v87) {
        (*(void (**)(IPC::Encoder *))(*(void *)v87 + 8))(v87);
      }
      double v88 = v104;
      uint64_t v104 = 0;
      if (v88)
      {
        IPC::Encoder::~Encoder(v88, v32);
        WTF::fastFree(v93, v94);
      }
      if (v99[1]) {
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable((uint64_t)v99[1], v32);
      }
    }
  }
LABEL_127:
  if (v101) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v101, v32);
  }
  if (v100) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v100, v32);
  }
  a3 = v95;
LABEL_132:
  uint64_t v89 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v89 + 16))(v89);
  return (*(uint64_t (**)(uint64_t))(*(void *)v89 + 8))(v89);
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setMaxStatisticsEntries(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v6 = &unk_1EE9C8C50;
  v6[1] = a1;
  void v6[2] = a2;
  _OWORD v6[3] = v5;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v7 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v8 = &unk_1EE9C7620;
    v8[1] = a1;
    uint64_t v8[2] = v7;
    uint64_t v10 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = (uint64_t)v10;
    if (v10) {
      return (*(uint64_t (**)(void *))(*v10 + 8))(v10);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setPruneEntriesDownTo(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v6 = &unk_1EE9C8C78;
  v6[1] = a1;
  void v6[2] = a2;
  _OWORD v6[3] = v5;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v7 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v8 = &unk_1EE9C7620;
    v8[1] = a1;
    uint64_t v8[2] = v7;
    uint64_t v10 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = (uint64_t)v10;
    if (v10) {
      return (*(uint64_t (**)(void *))(*v10 + 8))(v10);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::resetParametersToDefaultValues(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return v4(v3);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8)
      {
        uint64_t v9 = *(void *)(v8 + 32);
        uint64_t v19 = *(void **)(v8 + 24);
        uint64_t v10 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 232), &v19);
        if (v10) {
          WebCore::NetworkStorageSession::resetAppBoundDomains(v10);
        }
      }
      uint64_t v11 = *(void *)(a1 + 16);
      if (v11)
      {
        uint64_t v12 = *(void *)(v11 + 8);
        if (v12)
        {
          uint64_t v13 = *(void *)(v12 + 32);
          uint64_t v19 = *(void **)(v12 + 24);
          uint64_t v14 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v13 + 232), &v19);
          if (v14) {
            WebCore::NetworkStorageSession::resetManagedDomains(v14);
          }
        }
      }
    }
    uint64_t v15 = *a2;
    *a2 = 0;
    uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v16 = &unk_1EE9C8CA0;
    v16[1] = a1;
    uint64_t v16[2] = v15;
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t result = 172;
      __break(0xC471u);
    }
    else
    {
      uint64_t v17 = v16;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
      uint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v18 = &unk_1EE9C7620;
      v18[1] = a1;
      uint64_t v18[2] = v17;
      uint64_t v19 = v18;
      WTF::SuspendableWorkQueue::dispatch();
      uint64_t result = (uint64_t)v19;
      uint64_t v19 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebResourceLoadStatisticsStore::logTestingEvent(IPC::Encoder *this, const WTF::String *a2)
{
  if (this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2)
    {
      if (*(unsigned char *)(v2 + 96))
      {
        uint64_t v3 = *(void *)(*(void *)(v2 + 32) + 40);
        uint64_t v4 = *(void *)(v2 + 24);
        v5[0] = &v4;
        v5[1] = (uint64_t *)a2;
        return IPC::Connection::send<Messages::NetworkProcessProxy::LogTestingEvent>(v3, v5);
      }
    }
  }
  return this;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkProcessProxy::LogTestingEvent>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 336;
  *((void *)v4 + objc_destroyWeak(this + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, a2[1]);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::removeDataForDomain(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v6 = &unk_1EE9C8CC8;
  v6[1] = a1;
  void v6[2] = v4;
  _OWORD v6[3] = v5;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v7 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v8 = &unk_1EE9C7620;
    v8[1] = a1;
    uint64_t v8[2] = v7;
    uint64_t v10 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = (uint64_t)v10;
    if (v10) {
      return (*(uint64_t (**)(void *))(*v10 + 8))(v10);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::registrableDomains(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    v10[0] = 0;
    v10[1] = 0;
    uint64_t v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, v10);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v3);
  }
  else
  {
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v7 = &unk_1EE9C8CF0;
    v7[1] = a1;
    v7[2] = v6;
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t result = 172;
      __break(0xC471u);
    }
    else
    {
      uint64_t v8 = v7;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
      uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v9 = &unk_1EE9C7620;
      v9[1] = a1;
      v9[2] = v8;
      v10[0] = v9;
      WTF::SuspendableWorkQueue::dispatch();
      uint64_t result = v10[0];
      v10[0] = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::registrableDomainsWithLastAccessedTime(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    LOBYTE(v9) = 0;
    char v10 = 0;
    uint64_t result = WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)>::operator()(a2, (uint64_t)&v9);
    if (v10)
    {
      uint64_t result = (uint64_t)v9;
      if (v9) {
        return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v3);
      }
    }
  }
  else
  {
    uint64_t v5 = *a2;
    *a2 = 0;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v6 = &unk_1EE9C8D40;
    v6[1] = a1;
    void v6[2] = v5;
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t result = 172;
      __break(0xC471u);
    }
    else
    {
      uint64_t v7 = v6;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
      uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v8 = &unk_1EE9C7620;
      v8[1] = a1;
      uint64_t v8[2] = v7;
      uint64_t v11 = v8;
      WTF::SuspendableWorkQueue::dispatch();
      uint64_t result = (uint64_t)v11;
      uint64_t v11 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::registrableDomainsExemptFromWebsiteDataDeletion(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    char v10 = 0;
    uint64_t v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl ***))(*(void *)v2 + 16))(v2, &v10);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t result = (uint64_t)v10;
    if (v10) {
      return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v3);
    }
  }
  else
  {
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v7 = &unk_1EE9C8D90;
    v7[1] = a1;
    v7[2] = v6;
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t result = 172;
      __break(0xC471u);
    }
    else
    {
      uint64_t v8 = v7;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
      uint64_t v9 = WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v9 = &unk_1EE9C7620;
      *(void *)(v9 + ++*(_DWORD *)(this + 8) = a1;
      *(void *)(v9 + 16) = v8;
      char v10 = (WTF::StringImpl **)v9;
      WTF::SuspendableWorkQueue::dispatch();
      uint64_t result = (uint64_t)v10;
      char v10 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::suspend()
{
  WebKit::sharedStatisticsQueue(&v4);
  v0 = v4;
  uint64_t v1 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v1 = &unk_1EE9BF650;
  v1[1] = WebKit::ResourceLoadStatisticsStore::interruptAllDatabases;
  uint64_t v3 = v1;
  WTF::SuspendableWorkQueue::suspend();
  uint64_t result = (uint64_t)v3;
  if (!v3)
  {
    if (!v0) {
      return result;
    }
    return WTF::WorkQueue::deref(v0);
  }
  uint64_t result = (*(uint64_t (**)(void *))(*v3 + 8))(v3);
  if (v0) {
    return WTF::WorkQueue::deref(v0);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::resume(WebKit::WebResourceLoadStatisticsStore *this)
{
  WebKit::sharedStatisticsQueue(&v3);
  uint64_t v1 = v3;
  uint64_t result = WTF::SuspendableWorkQueue::resume(v3);
  if (v1)
  {
    return WTF::WorkQueue::deref(v1);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::insertExpiredStatisticForTesting(uint64_t a1, uint64_t a2, int a3, char a4, char a5, char a6, uint64_t *a7)
{
  WebCore::RegistrableDomain::isolatedCopy(&v23);
  *(_DWORD *)uint64_t v24 = a3;
  v24[4] = a4;
  v24[5] = a5;
  v24[6] = a6;
  uint64_t v13 = *a7;
  *a7 = 0;
  uint64_t v25 = v13;
  uint64_t v14 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v14 = &unk_1EE9C8E58;
  *(void *)(v14 + ++*(_DWORD *)(this + 8) = a1;
  *(void *)(v14 + 16) = v23;
  *(_DWORD *)(v14 + 27) = *(_DWORD *)&v24[3];
  *(_DWORD *)(v14 + 24) = *(_DWORD *)v24;
  uint64_t v15 = v25;
  uint64_t v23 = 0;
  uint64_t v25 = 0;
  *(void *)(v14 + 3objc_destroyWeak(this + 2) = v15;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v16 = v14;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v17 = &unk_1EE9C7620;
    v17[1] = a1;
    void v17[2] = v16;
    uint64_t v26 = v17;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v19 = v26;
    uint64_t v26 = 0;
    if (v19) {
      (*(void (**)(void *))(*v19 + 8))(v19);
    }
    uint64_t v20 = v25;
    uint64_t v25 = 0;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    uint64_t result = (uint64_t)v23;
    uint64_t v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebResourceLoadStatisticsStore::recordFrameLoadForStorageAccess(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
  WTF::WallTime::now((WTF::WallTime *)a1);
  uint64_t v11 = v10;
  *(void *)&long long v33 = a3;
  *((void *)&v33 + objc_destroyWeak(this + 1) = a4;
  uint64_t v12 = *a5;
  if (*a5) {
    *(_DWORD *)v12 += 2;
  }
  int v34 = v12;
  uint64_t v15 = a1[15];
  uint64_t v13 = a1 + 15;
  uint64_t v14 = v15;
  if (v15
    || (WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>>::expand(v13, 0), (uint64_t v14 = *v13) != 0))
  {
    int v16 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    int v16 = 0;
  }
  unsigned int v17 = WTF::PairHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>::hash((uint64_t)&v33);
  uint64_t v19 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v21 = v17 & v16;
    uint64_t v22 = v14 + 48 * (v17 & v16);
    uint64_t v23 = *(void *)(v22 + 8);
    if (*(_OWORD *)v22 != 0) {
      goto LABEL_10;
    }
    if (WTF::equal(*(WTF **)(v22 + 16), 0, v18)) {
      break;
    }
    uint64_t v23 = *(void *)(v22 + 8);
LABEL_10:
    if (v23 == -1)
    {
      uint64_t v19 = (_OWORD *)(v14 + 48 * v21);
    }
    else
    {
      BOOL v24 = *(void *)v22 == (void)v33 && v23 == *((void *)&v33 + 1);
      if (v24 && (WTF::equalIgnoringASCIICase(*(WTF **)(v22 + 16), v34, v18) & 1) != 0) {
        goto LABEL_29;
      }
    }
    unsigned int v17 = i + v21;
  }
  if (v19)
  {
    *uint64_t v19 = 0u;
    v19[1] = 0u;
    uint64_t v19[2] = xmmword_1994F6440;
    --*(_DWORD *)(*v13 - 16);
    uint64_t v22 = (uint64_t)v19;
  }
  *(_OWORD *)uint64_t v22 = v33;
  WTF::String::operator=((uint64_t *)(v22 + 16), &v34);
  *(void *)(v22 + 24) = a2;
  *(void *)(v22 + 3objc_destroyWeak(this + 2) = 0x7FF8000000000000;
  *(void *)(v22 + ++*(_DWORD *)(this - 40) = v11;
  uint64_t v26 = *v13;
  if (*v13) {
    int v27 = *(_DWORD *)(v26 - 12) + 1;
  }
  else {
    int v27 = 1;
  }
  *(_DWORD *)(v26 - 1objc_destroyWeak(this + 2) = v27;
  uint64_t v28 = *v13;
  if (*v13) {
    int v29 = *(_DWORD *)(v28 - 12);
  }
  else {
    int v29 = 0;
  }
  uint64_t v30 = (*(_DWORD *)(v28 - 16) + v29);
  unint64_t v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30) {
LABEL_28:
    }
      uint64_t v22 = WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>>::expand(v13, v22);
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_28;
  }
LABEL_29:
  *(void *)(v22 + ++*(_DWORD *)(this - 40) = v11;
  uint64_t result = v34;
  int v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebResourceLoadStatisticsStore::clearFrameLoadRecordsForStorageAccess(WTF::StringImpl *result, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = (uint64_t *)((char *)result + 120);
  uint64_t v4 = *((void *)result + 15);
  if (v4)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    if (v5)
    {
      int v8 = 0;
      unsigned int v9 = v5 - 1;
      do
      {
        uint64_t v10 = v9;
        uint64_t v11 = (WTF::StringImpl **)(v4 + 48 * v9);
        uint64_t result = (WTF::StringImpl *)WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>>::isEmptyOrDeletedBucket((uint64_t)v11, (uint64_t)a2, a3);
        if ((result & 1) == 0 && *v11 == a2 && v11[1] == a3)
        {
          uint64_t result = WTF::hashTraitsDeleteBucket<WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>((void *)(v4 + 48 * v9), a2);
          ++v8;
        }
        --v9;
      }
      while (v10);
      uint64_t v13 = *v3;
      if (v8)
      {
        *(_DWORD *)(v13 - 16) += v8;
        uint64_t v14 = *v3;
        if (*v3) {
          int v15 = *(_DWORD *)(v14 - 12);
        }
        else {
          int v15 = 0;
        }
        *(_DWORD *)(v14 - 1objc_destroyWeak(this + 2) = v15 - v8;
        uint64_t v13 = *v3;
      }
      if (v13)
      {
        unsigned int v16 = *(_DWORD *)(v13 - 4);
        unsigned int v17 = 6 * *(_DWORD *)(v13 - 12);
        if (v16 >= 9 && v17 < v16)
        {
          return (WTF::StringImpl *)WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>>::shrinkToBestSize(v3);
        }
      }
    }
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t vars8;

  uint64_t v3 = (uint64_t *)((char *)result + 120);
  uint64_t v4 = *((void *)result + 15);
  if (v4)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    if (v5)
    {
      uint64_t v7 = 0;
      int v8 = v5 - 1;
      do
      {
        unsigned int v9 = v8;
        uint64_t result = (WTF::StringImpl *)WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>>::isEmptyOrDeletedBucket(v4 + 48 * v8, (uint64_t)a2, a3);
        if ((result & 1) == 0 && *(WTF::StringImpl **)(v4 + 48 * v8 + 24) == a2)
        {
          uint64_t result = WTF::hashTraitsDeleteBucket<WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>((void *)(v4 + 48 * v8), a2);
          ++v7;
        }
        --v8;
      }
      while (v9);
      uint64_t v10 = *v3;
      if (v7)
      {
        *(_DWORD *)(v10 - 16) += v7;
        uint64_t v11 = *v3;
        if (*v3) {
          uint64_t v12 = *(_DWORD *)(v11 - 12);
        }
        else {
          uint64_t v12 = 0;
        }
        *(_DWORD *)(v11 - 1objc_destroyWeak(this + 2) = v12 - v7;
        uint64_t v10 = *v3;
      }
      if (v10)
      {
        uint64_t v13 = *(_DWORD *)(v10 - 4);
        uint64_t v14 = 6 * *(_DWORD *)(v10 - 12);
        if (v13 >= 9 && v14 < v13)
        {
          return (WTF::StringImpl *)WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>>::shrinkToBestSize(v3);
        }
      }
    }
  }
  return result;
}

void WebKit::WebCookieManager::~WebCookieManager(WebKit::WebCookieManager *this, void *a2)
{
  *(void *)this = &unk_1EE9C74E0;
  *((void *)this + objc_destroyWeak(this + 1) = &unk_1EE9C7518;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  *((void *)this + objc_destroyWeak(this + 1) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebCookieManager::~WebCookieManager(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::WebCookieManager::~WebCookieManager(WebKit::WebCookieManager *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebCookieManager::~WebCookieManager((WebKit::WebCookieManager *)((char *)this - 8), a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebCookieManager::protectedProcess@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)(this + 24) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 128), 1u);
  *a2 = v2;
  return this;
}

WTF::StringImpl **WebKit::WebCookieManager::getHostnamesWithCookies(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v12 = 0;
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 128), 1u);
  v11[0] = a2;
  uint64_t v5 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 232), v11);
  uint64_t v6 = v5;
  if (!v4 || atomic_fetch_add((atomic_uint *volatile)(v4 + 128), 0xFFFFFFFF) != 1)
  {
    if (!v5) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  atomic_store(1u, (unsigned int *)(v4 + 128));
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  if (v6) {
LABEL_4:
  }
    WebCore::NetworkStorageSession::getHostnamesWithCookies();
LABEL_5:
  v11[0] = 0;
  v11[1] = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map(v11, (uint64_t **)&v12);
  uint64_t v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 16))(v7, v11);
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v8);
  uint64_t result = v12;
  if (v12) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v9);
  }
  return result;
}

uint64_t WebKit::WebCookieManager::deleteCookiesForHostnames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v5 + 128), 1u);
  uint64_t v11 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 232), &v11);
  uint64_t v7 = v6;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)(v5 + 128), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v5 + 128));
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    if (v7) {
      goto LABEL_4;
    }
  }
  else if (v6)
  {
LABEL_4:
    return WebCore::NetworkStorageSession::deleteCookiesForHostnames();
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);

  return v10(v9);
}

uint64_t WebKit::WebCookieManager::deleteAllCookies(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 128), 1u);
  uint64_t v10 = a2;
  uint64_t v5 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 232), &v10);
  uint64_t v6 = v5;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)(v4 + 128), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v4 + 128));
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    if (v6) {
      goto LABEL_4;
    }
  }
  else if (v5)
  {
LABEL_4:
    return MEMORY[0x1F41700C8](v6, a3);
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  int v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v8(v7);
}

uint64_t WebKit::WebCookieManager::deleteCookie(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v5 + 128), 1u);
  uint64_t v11 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 232), &v11);
  uint64_t v7 = v6;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)(v5 + 128), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v5 + 128));
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    if (v7) {
      goto LABEL_4;
    }
  }
  else if (v6)
  {
LABEL_4:
    return WebCore::NetworkStorageSession::deleteCookie();
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);

  return v10(v9);
}

uint64_t WebKit::WebCookieManager::deleteAllCookiesModifiedSince(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 128), 1u);
  uint64_t v10 = a2;
  uint64_t v5 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 232), &v10);
  uint64_t v6 = v5;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)(v4 + 128), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v4 + 128));
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    if (v6) {
      goto LABEL_4;
    }
  }
  else if (v5)
  {
LABEL_4:
    return WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince();
  }
  uint64_t v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);

  return v9(v8);
}

uint64_t WebKit::WebCookieManager::getAllCookies(uint64_t a1, WTF *a2, uint64_t *a3)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 128), 1u);
  unsigned int v16 = a2;
  uint64_t v5 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 232), &v16);
  uint64_t v6 = (WebCore::NetworkStorageSession *)v5;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)(v4 + 128), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v4 + 128));
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    if (!v6) {
      goto LABEL_10;
    }
  }
  else if (!v5)
  {
    goto LABEL_10;
  }
  WebCore::NetworkStorageSession::getAllCookies((uint64_t *)&v16, v6);
  uint64_t v8 = v18;
  if (HIDWORD(v19))
  {
    uint64_t v9 = 136 * HIDWORD(v19);
    uint64_t v10 = v18;
    do
    {
      WebCore::Cookie::~Cookie(v10, v7);
      uint64_t v10 = (WTF *)(v11 + 136);
      v9 -= 136;
    }
    while (v9);
  }
  if (v8) {
    WTF::fastFree(v8, v7);
  }
  uint64_t v18 = v16;
  uint64_t v12 = v17;
  unsigned int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v19 = v12;
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v7);
LABEL_10:
  uint64_t v13 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v13 + 16))(v13, &v18);
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v14);
}

uint64_t WebKit::WebCookieManager::getCookies(uint64_t a1, WTF *a2, const WTF::URL *a3, uint64_t *a4)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 128), 1u);
  uint64_t v18 = a2;
  uint64_t v7 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 232), &v18);
  uint64_t v8 = (WebCore::NetworkStorageSession *)v7;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 128), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v6 + 128));
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    if (!v8) {
      goto LABEL_10;
    }
  }
  else if (!v7)
  {
    goto LABEL_10;
  }
  WebCore::NetworkStorageSession::getCookies((uint64_t *)&v18, v8, a3);
  uint64_t v10 = v20;
  if (HIDWORD(v21))
  {
    uint64_t v11 = 136 * HIDWORD(v21);
    uint64_t v12 = v20;
    do
    {
      WebCore::Cookie::~Cookie(v12, v9);
      uint64_t v12 = (WTF *)(v13 + 136);
      v11 -= 136;
    }
    while (v11);
  }
  if (v10) {
    WTF::fastFree(v10, v9);
  }
  uint64_t v20 = v18;
  uint64_t v14 = v19;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v21 = v14;
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v9);
LABEL_10:
  uint64_t v15 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v15 + 16))(v15, &v20);
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v16);
}

uint64_t WebKit::WebCookieManager::setCookie(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 128), 1u);
  uint64_t v15 = a2;
  uint64_t v7 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 232), &v15);
  uint64_t v8 = v7;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 128), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v6 + 128));
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    if (!v8) {
      goto LABEL_7;
    }
  }
  else if (!v7)
  {
    goto LABEL_7;
  }
  uint64_t v9 = *((unsigned int *)a3 + 3);
  if (v9)
  {
    uint64_t v10 = *a3;
    uint64_t v11 = 136 * v9;
    do
    {
      WebCore::NetworkStorageSession::setCookie();
      v10 += 136;
      v11 -= 136;
    }
    while (v11);
  }
LABEL_7:
  uint64_t v12 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
  uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);

  return v13(v12);
}

uint64_t WebKit::WebCookieManager::setCookies(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 24) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v7 + 128), 1u);
  uint64_t v13 = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v7 + 232), &v13);
  uint64_t v9 = v8;
  if (!v7 || atomic_fetch_add((atomic_uint *volatile)(v7 + 128), 0xFFFFFFFF) != 1)
  {
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  atomic_store(1u, (unsigned int *)(v7 + 128));
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  if (v9) {
LABEL_4:
  }
    WebCore::NetworkStorageSession::setCookies();
LABEL_5:
  uint64_t v10 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
  uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);

  return v11(v10);
}

uint64_t WebKit::WebCookieManager::stopObservingCookieChanges(WebKit::WebCookieManager *this, SessionID a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 3) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 128), 1u);
  unint64_t m_identifier = a2.m_identifier;
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v2 + 232), &m_identifier);
  uint64_t v4 = result;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 128), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v2 + 128));
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (v4)
  {
    return MEMORY[0x1F41717E8](v4);
  }
  return result;
}

uint64_t WebKit::WebCookieManager::setHTTPCookieAcceptPolicy(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    int v16 = a3;
    LOWORD(v17) = 2048;
    *(void *)((char *)&v17 + objc_destroyWeak(this + 2) = a2;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "WebCookieManager::setHTTPCookieAcceptPolicy set policy %d for session %llu", buf, 0x12u);
  }
  buf[0] = a3;
  uint64_t v9 = *(void *)(*(void *)(a1 + 24) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v9 + 128), 1u);
  uint64_t v10 = *a4;
  *a4 = 0;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v11 = &unk_1EE9C8EA8;
  *(unsigned char *)(v11 + ++*(_DWORD *)(this + 8) = buf[0];
  *(void *)(v11 + 16) = v9;
  *(void *)(v11 + 24) = v10;
  long long v17 = 0uLL;
  uint64_t v14 = v11;
  WebKit::WebCookieManager::platformSetHTTPCookieAcceptPolicy(a1, a2, a3, &v14);
  uint64_t v12 = v14;
  uint64_t v14 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return WebKit::WebCookieManager::setHTTPCookieAcceptPolicy(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)buf);
}

uint64_t WebKit::WebCookieManager::setHTTPCookieAcceptPolicy(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 32);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WebKit::WebCookieManager::getHTTPCookieAcceptPolicy(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 128), 1u);
  uint64_t v11 = a2;
  uint64_t v5 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 232), &v11);
  uint64_t v6 = (WebCore::NetworkStorageSession *)v5;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)(v4 + 128), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v4 + 128));
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    if (v6) {
      goto LABEL_4;
    }
  }
  else if (v5)
  {
LABEL_4:
    uint64_t v7 = WebCore::NetworkStorageSession::cookieAcceptPolicy(v6);
    uint64_t v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v7);
    goto LABEL_7;
  }
  uint64_t v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, 1);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);

  return v9(v8);
}

uint64_t WebKit::LegacyCustomProtocolManager::addCustomProtocol(uint64_t a1, uint64_t *a2)
{
  char v4 = 0;
  uint64_t v5 = (atomic_uchar *)(a1 + 40);
  int v6 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 40), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 40);
  }
  uint64_t IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocol>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocol>>,WTF::HashTableTraits>::add<WTF::RetainPtr<WKCustomProtocol>>((uint64_t *)(a1 + 32), &IdentifierInternal, a2, (uint64_t)&v8);
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return IdentifierInternal;
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<WKCustomProtocol>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocol>>,WTF::HashTableTraits>::add<WTF::RetainPtr<WKCustomProtocol>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  int v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = *(unsigned int *)(v8 - 4);
        }
        char v29 = 0;
        uint64_t v30 = v8 + 16 * v24;
        goto LABEL_31;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      int v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v11 = *a2;
      int v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  uint64_t v20 = *a3;
  *a3 = 0;
  uint64_t v21 = (const void *)v16[1];
  v16[1] = v20;
  if (v21) {
    CFRelease(v21);
  }
  uint64_t v22 = *a1;
  if (*a1) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 1objc_destroyWeak(this + 2) = v23;
  uint64_t v25 = *a1;
  if (*a1) {
    int v26 = *(_DWORD *)(v25 - 12);
  }
  else {
    int v26 = 0;
  }
  uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
  unint64_t v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_24:
      int v16 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, v16);
      uint64_t v25 = *a1;
      if (*a1) {
        unint64_t v28 = *(unsigned int *)(v25 - 4);
      }
      else {
        unint64_t v28 = 0;
      }
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_24;
  }
  uint64_t v30 = v25 + 16 * v28;
  char v29 = 1;
LABEL_31:
  *(void *)a4 = v16;
  *(void *)(a4 + ++*(_DWORD *)(this + 8) = v30;
  *(unsigned char *)(a4 + 16) = v29;
}

void WebKit::LegacyCustomProtocolManager::removeCustomProtocol(uint64_t a1, uint64_t a2)
{
  char v3 = 0;
  uint64_t v9 = a2;
  char v4 = (atomic_uchar *)(a1 + 40);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 40), (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x19972E8D0](a1 + 40);
  }
  uint64_t v5 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), &v9);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    uint64_t v7 = (void *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    if (v7 == v5) {
      goto LABEL_10;
    }
  }
  else
  {
    if (!v5) {
      goto LABEL_10;
    }
    uint64_t v7 = 0;
  }
  if (v7 != v5) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove((uint64_t *)(a1 + 32), v5);
  }
LABEL_10:
  int v8 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
}

IPC::Encoder *WebKit::LegacyCustomProtocolManager::startLoading(uint64_t a1, uint64_t a2, WebCore::ResourceRequest *a3)
{
  uint64_t v11 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 128), 1u);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(v4 + 24) + 56))(v4 + 24);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 109;
  *((void *)v6 + objc_destroyWeak(this + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v12 = v6;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v11);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v6, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v4 + 24) + 32))(v4 + 24, &v12, 0);
  uint64_t result = v12;
  unint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v4 + 128), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v4 + 128));
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return result;
}

IPC::Encoder *WebKit::LegacyCustomProtocolManager::stopLoading(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v2 = *(void *)(*(void *)(a1 + 24) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 128), 1u);
  char v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v3 = 110;
  *((void *)v3 + objc_destroyWeak(this + 1) = 0;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v9 = v3;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v3, &v8);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v2 + 24) + 32))(v2 + 24, &v9, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v2 + 128), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v2 + 128));
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return result;
}

uint64_t WebKit::Download::Download(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE9C75C0;
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  ++*(_DWORD *)a2;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = a3;
  uint64_t v8 = *(void *)(a2 + 8);
  (*(void (**)(uint64_t))(*(void *)v8 + 96))(v8);
  *(void *)(a1 + ++*(_DWORD *)(this - 40) = v8;
  *(void *)(a1 + 4++*(_DWORD *)(this + 8) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a4 + 8));
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = a4;
  *(unsigned char *)(a1 + 12++*(_DWORD *)(this + 8) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 15objc_destroyWeak(this + 2) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 105) = 0u;
  *(void *)(a1 + 160) = *(void *)(a5 + 24);
  *(_WORD *)(a1 + 16++*(_DWORD *)(this + 8) = 0;
  WebKit::DownloadMonitor::DownloadMonitor((WebKit::DownloadMonitor *)(a1 + 176), (WebKit::Download *)a1);
  *(_DWORD *)(a1 + 4++*(_DWORD *)(this - 40) = *(_DWORD *)(a5 + 720);
  *(void *)(a1 + 44++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(void))(**(void **)(*(void *)(a1 + 24) + 8) + 48))(*(void *)(*(void *)(a1 + 24)
                                                                                                + 8));
  return a1;
}

uint64_t WebKit::Download::Download(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE9C75C0;
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  ++*(_DWORD *)a2;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = a3;
  uint64_t v8 = *(void *)(a2 + 8);
  (*(void (**)(uint64_t))(*(void *)v8 + 96))(v8);
  *(void *)(a1 + ++*(_DWORD *)(this - 40) = v8;
  long long v9 = 0uLL;
  *(_OWORD *)(a1 + 4++*(_DWORD *)(this + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = a4;
  if (a4)
  {
    CFRetain(a4);
    long long v9 = 0uLL;
  }
  *(unsigned char *)(a1 + 12++*(_DWORD *)(this + 8) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 15objc_destroyWeak(this + 2) = 0;
  *(_OWORD *)(a1 + 8++*(_DWORD *)(this + 8) = v9;
  *(_OWORD *)(a1 + 104) = v9;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 160) = *(void *)(a5 + 24);
  *(_WORD *)(a1 + 16++*(_DWORD *)(this + 8) = 0;
  WebKit::DownloadMonitor::DownloadMonitor((WebKit::DownloadMonitor *)(a1 + 176), (WebKit::Download *)a1);
  *(_DWORD *)(a1 + 4++*(_DWORD *)(this - 40) = *(_DWORD *)(a5 + 720);
  *(void *)(a1 + 44++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(void))(**(void **)(*(void *)(a1 + 24) + 8) + 48))(*(void *)(*(void *)(a1 + 24)
                                                                                                + 8));
  return a1;
}

void WebKit::Download::~Download(WebKit::Download *this)
{
  *(void *)this = &unk_1EE9C75C0;
  WebKit::Download::platformDestroyDownload(this);
  (*(void (**)(void))(**(void **)(*((void *)this + 3) + 8) + 56))(*(void *)(*((void *)this + 3)
                                                                                                 + 8));
  uint64_t v2 = *((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 47) = &unk_1EE9BA5F0;
  uint64_t v3 = *((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebCore::TimerBase::~TimerBase((WebKit::Download *)((char *)this + 376));
  uint64_t v5 = (WTF *)*((void *)this + 25);
  if ((WebKit::Download *)((char *)this + 216) != v5 && v5 != 0)
  {
    *((void *)this + 25) = 0;
    *((_DWORD *)this + 5objc_destroyWeak(this + 2) = 0;
    WTF::fastFree(v5, v4);
  }
  uint64_t v7 = *((void *)this + 22);
  *((void *)this + 2objc_destroyWeak(this + 2) = 0;
  if (v7)
  {
    int v8 = *(_DWORD *)(v7 + 16);
    if (!v8) {
      goto LABEL_38;
    }
    *(_DWORD *)(v7 + 16) = v8 - 1;
  }
  long long v9 = (const void *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v9) {
    CFRelease(v9);
  }
  int v10 = (const void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = (const void *)*((void *)this + 12);
  *((void *)this + 1objc_destroyWeak(this + 2) = 0;
  if (v11) {
    CFRelease(v11);
  }
  unint64_t v12 = (const void *)*((void *)this + 11);
  *((void *)this + 1objc_destroyWeak(this + 1) = 0;
  if (v12) {
    CFRelease(v12);
  }
  unint64_t v13 = (const void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v14) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v14 + 8));
  }
  unsigned int v15 = (const char ***)*((void *)this + 8);
  *((void *)this + ++*(_DWORD *)(this + 8) = 0;
  if (v15) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v15);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 48, v4);
  uint64_t v17 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 104))(v17);
  }
  uint64_t v18 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v18)
  {
    if (*v18)
    {
      --*v18;
      goto LABEL_32;
    }
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x198BEBD7CLL);
  }
LABEL_32:
  uint64_t v19 = *((void *)this + 1);
  if (v19)
  {
    *(void *)(v19 + ++*(_DWORD *)(this + 8) = 0;
    uint64_t v20 = (unsigned int *)*((void *)this + 1);
    *((void *)this + objc_destroyWeak(this + 1) = 0;
    if (v20)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v16);
      }
    }
  }
  else
  {
    *((void *)this + objc_destroyWeak(this + 1) = 0;
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t vars8;

  WebKit::Download::~Download(this);
  if (*(_DWORD *)(v1 + 16))
  {
    *(void *)(v1 + 44++*(_DWORD *)(this + 8) = 0;
    *(_OWORD *)(v1 + 416) = 0u;
    *(_OWORD *)(v1 + 43objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v1 + 384) = 0u;
    *(_OWORD *)(v1 + 400) = 0u;
    *(_OWORD *)(v1 + 35objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v1 + 36++*(_DWORD *)(this + 8) = 0u;
    *(_OWORD *)(v1 + 320) = 0u;
    *(_OWORD *)(v1 + 336) = 0u;
    *(_OWORD *)(v1 + 28++*(_DWORD *)(this + 8) = 0u;
    *(_OWORD *)(v1 + 304) = 0u;
    *(_OWORD *)(v1 + 256) = 0u;
    *(_OWORD *)(v1 + 27objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v1 + 224) = 0u;
    *(_OWORD *)(v1 + 2++*(_DWORD *)(this - 40) = 0u;
    *(_OWORD *)(v1 + 19objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v1 + 20++*(_DWORD *)(this + 8) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    *(_OWORD *)(v1 + 176) = 0u;
    *(_OWORD *)(v1 + 12++*(_DWORD *)(this + 8) = 0u;
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 11objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 3objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v1 + 4++*(_DWORD *)(this + 8) = 0u;
    *(_OWORD *)uint64_t v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

unsigned int *WebKit::Download::cancel(uint64_t a1, uint64_t *a2, char a3)
{
  if ((WTF::isMainRunLoop((WTF *)a1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198BEBFA8);
  }
  *(unsigned char *)(a1 + 169) = a3;
  uint64_t v15 = a1;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v6 = *(atomic_uint **)(a1 + 8);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  uint64_t v7 = *a2;
  *a2 = 0;
  int v16 = (WTF *)v6;
  uint64_t v17 = v7;
  uint64_t v8 = *(void *)(a1 + 72);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    WebKit::Download::cancel(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&,WebKit::Download::IgnoreDidFailCallback)::$_0::operator()(&v15);
    uint64_t v10 = v17;
    uint64_t v17 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  else
  {
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x20);
    uint64_t v12 = v15;
    *uint64_t v11 = &unk_1EE9C8ED0;
    v11[1] = v12;
    int v16 = 0;
    uint64_t v11[2] = v6;
    v11[3] = v7;
    uint64_t v14 = v11;
    WebKit::Download::platformCancelNetworkLoad(a1, (uint64_t *)&v14);
    if (v14) {
      (*(void (**)(void *))(*v14 + 8))(v14);
    }
    uint64_t v17 = 0;
  }
  uint64_t result = (unsigned int *)v16;
  int v16 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, v9);
  }
  return result;
}

uint64_t WebKit::Download::cancel(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&,WebKit::Download::IgnoreDidFailCallback)::$_0::operator()(uint64_t *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  uint64_t v5 = a1[1];
  if (v5 && *(void *)(v5 + 8) && *(unsigned char *)(v2 + 169))
  {
    uint64_t v6 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(v2 + 32);
      int v10 = 134218240;
      uint64_t v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = v7;
      _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - Download::didCancel: (id = %llu)", (uint8_t *)&v10, 0x16u);
    }
    uint64_t v8 = *(void *)(v2 + 64);
    *(void *)(v2 + 64) = 0;
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 16) - 1;
      *(void *)(v8 + 16) = v9;
      if (!v9)
      {
        *(void *)(*(void *)(v8 + 8) + ++*(_DWORD *)(this + 8) = 0;
        sandbox_extension_release();
      }
      WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v8);
    }
    return WebKit::DownloadMap::remove((uint64_t *)(*(void *)(v2 + 24) + 32), *(void *)(v2 + 32));
  }
  return result;
}

uint64_t WebKit::Download::didReceiveChallenge(uint64_t a1, WebCore::AuthenticationChallengeBase *this, uint64_t *a3)
{
  uint64_t v6 = (WebCore::ProtectionSpaceBase *)WebCore::AuthenticationChallengeBase::protectionSpace(this);
  if (!WebCore::ProtectionSpaceBase::isPasswordBased(v6)
    || (uint64_t v7 = (WebCore::Credential *)WebCore::AuthenticationChallengeBase::proposedCredential(this),
        (WebCore::Credential::isEmpty(v7) & 1) != 0)
    || WebCore::AuthenticationChallengeBase::previousFailureCount(this))
  {
    uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 80))(*(void *)(a1 + 40));
    return WebKit::AuthenticationManager::didReceiveAuthenticationChallenge(v8, a1, this, a3);
  }
  else
  {
    uint64_t v10 = WebCore::AuthenticationChallengeBase::proposedCredential(this);
    uint64_t v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v11 + 16))(v11, 0, v10);
    __int16 v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);
    return v12(v11);
  }
}

IPC::Encoder *WebKit::Download::didCreateDestination(WebKit::Download *this, const WTF::String *a2)
{
  uint64_t v4 = (*(uint64_t (**)(WebKit::Download *))(*(void *)this + 56))(this);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 11;
  *((void *)v5 + objc_destroyWeak(this + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
  (*(void (**)(WebKit::Download *, IPC::Encoder **, void))(*(void *)this + 32))(this, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::Download::didReceiveData(WebKit::Download *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 168))
  {
    uint64_t v8 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *((void *)this + 4);
      *(_DWORD *)uint64_t v22 = 134218496;
      *(void *)&v22[4] = this;
      __int16 v23 = 2048;
      uint64_t v24 = v9;
      __int16 v25 = 2048;
      uint64_t v26 = a4;
      _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - Download::didReceiveData: Started receiving data (id = %llu, expected length = %llu)", v22, 0x20u);
    }
    *((unsigned char *)this + 16++*(_DWORD *)(this + 8) = 1;
  }
  WebKit::DownloadMonitor::downloadReceivedBytes((WebKit::Download *)((char *)this + 176), a2);
  WebKit::Download::updateProgress((uint64_t)this, a3, a4);
  uint64_t v10 = (*(uint64_t (**)(WebKit::Download *))(*(void *)this + 56))(this);
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 15;
  *((void *)v11 + objc_destroyWeak(this + 1) = v10;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  *(void *)uint64_t v22 = v11;
  __int16 v12 = (void *)IPC::Encoder::grow(v11, 8uLL, 8);
  if (v13 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x198BEC56CLL);
  }
  void *v12 = a2;
  uint64_t v14 = (void *)IPC::Encoder::grow(v11, 8uLL, 8);
  if (v15 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x198BEC58CLL);
  }
  *uint64_t v14 = a3;
  int v16 = (void *)IPC::Encoder::grow(v11, 8uLL, 8);
  if (v17 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x198BEC5ACLL);
  }
  void *v16 = a4;
  (*(void (**)(WebKit::Download *, unsigned char *, void))(*(void *)this + 32))(this, v22, 0);
  uint64_t result = *(IPC::Encoder **)v22;
  *(void *)uint64_t v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v18);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t WebKit::Download::didFinish(WebKit::Download *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 4);
    *(_DWORD *)uint64_t v7 = 134218240;
    *(void *)&v7[4] = this;
    __int16 v8 = 2048;
    uint64_t v9 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - Download::didFinish: (id = %llu)", v7, 0x16u);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v4 = (atomic_uint *)*((void *)this + 1);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v5 = &unk_1EE9C8EF8;
  v5[1] = v4;
  v5[2] = this;
  *(void *)uint64_t v7 = v5;
  WebKit::Download::platformDidFinish((uint64_t)this, (uint64_t *)v7);
  uint64_t result = *(void *)v7;
  *(void *)uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

unsigned char *WebKit::Download::didFail(unsigned char *result, uint64_t a2, char *a3, WTF *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!result[169])
  {
    uint64_t v7 = result;
    __int16 v8 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = v7[4];
      int v10 = *(unsigned __int8 *)(a2 + 60);
      BOOL v11 = v10 == 4;
      BOOL v12 = v10 == 3;
      MEMORY[0x19973EC60](a2);
      int v13 = *(_DWORD *)(a2 + 56);
      *(_DWORD *)long long buf = 134219008;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)uint64_t v27 = 2048;
      *(void *)&v27[2] = v9;
      __int16 v28 = 1024;
      BOOL v29 = v11;
      __int16 v30 = 1024;
      BOOL v31 = v12;
      __int16 v32 = 1024;
      int v33 = v13;
      _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - Download::didFail: (id = %llu, isTimeout = %d, isCancellation = %d, errCode = %d)", buf, 0x28u);
    }
    WebKit::Download::updateResumeDataWithPlaceholderURL((void *)v7[12], a3, a4, (uint64_t)buf);
    uint64_t v14 = *(const void **)buf;
    size_t v15 = *(unsigned int *)v27;
    uint64_t v16 = (*(uint64_t (**)(void *))(*v7 + 56))(v7);
    unint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v17 = 12;
    *((void *)v17 + objc_destroyWeak(this + 1) = v16;
    *((void *)v17 + 66) = (char *)v17 + 16;
    *((void *)v17 + 67) = 512;
    *((void *)v17 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v17 + 70) = 0;
    *((void *)v17 + 69) = 0;
    IPC::Encoder::encodeHeader(v17);
    __int16 v25 = v17;
    IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v17, (WebCore::ResourceError *)a2);
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v17, v14, v15);
    (*(void (**)(void *, IPC::Encoder **, void))(*v7 + 32))(v7, &v25, 0);
    uint64_t v19 = v25;
    __int16 v25 = 0;
    if (v19)
    {
      IPC::Encoder::~Encoder(v19, v18);
      WTF::fastFree(v23, v24);
    }
    uint64_t v20 = v7[8];
    if (!v20) {
      goto LABEL_10;
    }
    uint64_t v21 = *(void *)(v20 + 16) - 1;
    *(void *)(v20 + 16) = v21;
    if (v21)
    {
      v7[8] = 0;
    }
    else
    {
      *(void *)(*(void *)(v20 + 8) + ++*(_DWORD *)(this + 8) = 0;
      sandbox_extension_release();
      uint64_t v20 = v7[8];
      v7[8] = 0;
      if (!v20) {
        goto LABEL_10;
      }
    }
    WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v20);
LABEL_10:
    WebKit::DownloadMap::remove((uint64_t *)(v7[3] + 32), v7[4]);
    uint64_t result = *(unsigned char **)buf;
    if (*(void *)buf)
    {
      memset(buf, 0, sizeof(buf));
      return (unsigned char *)WTF::fastFree((WTF *)result, v22);
    }
  }
  return result;
}

uint64_t WebKit::Download::messageSenderConnection(WebKit::Download *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 3) + 8) + 64))();
}

uint64_t WebKit::Download::messageSenderDestinationID(WebKit::Download *this)
{
  return *((void *)this + 4);
}

void WebKit::DownloadManager::~DownloadManager(WebKit::DownloadManager *this, void *a2)
{
  WebKit::DownloadMap::~DownloadMap((WebKit::DownloadManager *)((char *)this + 32), a2);
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v4, v3);
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v5, v3);
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
}

WTF *WebKit::DownloadManager::startDownload(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4, WebCore::SecurityOriginData *a5, __int16 a6, WTF::StringImpl **a7, char a8, long long *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v45 = a3;
  uint64_t result = (WTF *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8));
  if (!result) {
    return result;
  }
  uint64_t v21 = result;
  WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)v46);
  if (*((unsigned char *)a9 + 16)) {
    long long v48 = *a9;
  }
  if (a11) {
    uint64_t v47 = a10;
  }
  WebCore::ResourceRequestBase::operator=((uint64_t)v51, (uint64_t)a4);
  CFTypeRef v22 = a4[24];
  if (v22) {
    CFRetain(a4[24]);
  }
  CFTypeRef v23 = cf;
  CFTypeRef cf = v22;
  if (v23) {
    CFRelease(v23);
  }
  char v54 = 1;
  __int16 v60 = a6;
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a4);
  if (WTF::URL::protocolIs())
  {
    if (*((unsigned char *)a5 + 32))
    {
      WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v42, a5);
      __int16 v25 = (WTF *)v42;
      if (v42) {
        atomic_fetch_add(v42, 1u);
      }
      uint64_t v26 = v49;
      int v49 = v25;
      if (v26) {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v26, v24);
      }
      uint64_t v27 = (WTF *)v42;
      unsigned int v42 = 0;
      if (!v27) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v27 = v49;
      int v49 = 0;
      if (!v27)
      {
LABEL_17:
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8), a2);
        WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a4);
        WebCore::BlobRegistryImpl::filesInBlob();
        if (HIDWORD(v57)) {
          WTF::VectorDestructor<true,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>::destruct(v56, (_DWORD **)v56 + HIDWORD(v57));
        }
        BOOL v29 = v56;
        if (v56)
        {
          long long v56 = 0;
          LODWORD(v57) = 0;
          WTF::fastFree(v29, v28);
        }
        long long v56 = (WTF *)v42;
        uint64_t v30 = v43;
        unsigned int v42 = 0;
        uint64_t v43 = 0;
        uint64_t v57 = v30;
        WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v28);
        goto LABEL_22;
      }
    }
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v27, v24);
    goto LABEL_17;
  }
LABEL_22:
  BOOL v31 = (a2 & 0x8000000000000000) == 0 || a2 == -1;
  BOOL v53 = v31;
  __int16 v32 = (uint64_t *)(a1 + 16);
  int v33 = (atomic_uchar *volatile *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8));
  uint64_t v34 = WTF::fastMalloc((WTF *)0x90);
  uint64_t v44 = WebKit::PendingDownload::PendingDownload(v34, v33, (uint64_t)v46, v45, v21, a7, a8, v35, a12, a13);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::PendingDownload>>(v32, &v45, &v44, (uint64_t)&v42);
  uint64_t v37 = v44;
  uint64_t v44 = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  if (v59)
  {
    CFTypeRef v41 = v58;
    CFTypeRef v58 = 0;
    if (v41) {
      CFRelease(v41);
    }
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v36);
  if (v55[2576]) {
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v55);
  }
  CFTypeRef v38 = cf;
  CFTypeRef cf = 0;
  if (v38) {
    CFRelease(v38);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v51);
  uint64_t v40 = v50;
  int v50 = 0;
  if (v40) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v40, v39);
  }
  uint64_t result = v49;
  int v49 = 0;
  if (result) {
    return (WTF *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v39);
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::PendingDownload>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = *(unsigned int *)(v8 - 4);
        }
        char v28 = 0;
        uint64_t v29 = v8 + 16 * v23;
        goto LABEL_31;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  uint64_t v20 = *a3;
  *a3 = 0;
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  uint64_t v21 = *v6;
  if (*v6) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 1objc_destroyWeak(this + 2) = v22;
  uint64_t v24 = *v6;
  if (*v6) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_24:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v24 = *v6;
      if (*v6) {
        unint64_t v27 = *(unsigned int *)(v24 - 4);
      }
      else {
        unint64_t v27 = 0;
      }
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_24;
  }
  uint64_t v29 = v24 + 16 * v27;
  char v28 = 1;
LABEL_31:
  *(void *)a4 = v16;
  *(void *)(a4 + ++*(_DWORD *)(this + 8) = v29;
  *(unsigned char *)(a4 + 16) = v28;
  return result;
}

void WebKit::DownloadManager::dataTaskBecameDownloadTask(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v12 = a2;
  uint64_t v5 = a1 + 2;
  uint64_t v6 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 2, &v12);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::take(v5, v6, v11);
  if (v11[0])
  {
    WebKit::PendingDownload::didBecomeDownload(v11[0], a3);
    uint64_t v7 = v11[0];
    v11[0] = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  uint64_t v8 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 3, &v12);
  uint64_t v9 = a1[3];
  if (v9)
  {
    int v10 = (void *)(v9 + 16 * *(unsigned int *)(v9 - 4));
    if (v10 == v8) {
      goto LABEL_11;
    }
  }
  else
  {
    if (!v8) {
      goto LABEL_11;
    }
    int v10 = 0;
  }
  if (v10 != v8) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(a1 + 3, v8);
  }
LABEL_11:
  WebKit::DownloadMap::add(a1 + 4, v12, a3, (uint64_t)v11);
}

uint64_t WebKit::DownloadManager::convertNetworkLoadToDownload(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, WebCore::ResourceRequest *a6, WebCore::ResourceResponseBase *a7)
{
  uint64_t v18 = a2;
  uint64_t v12 = (uint64_t *)(a1 + 16);
  unint64_t v13 = (atomic_uchar *volatile *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8));
  uint64_t v14 = WTF::fastMalloc((WTF *)0x90);
  uint64_t v17 = WebKit::PendingDownload::PendingDownload(v14, v13, a3, a4, a2, a6, a7);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::PendingDownload>>(v12, &v18, &v17, (uint64_t)v16);
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::DownloadManager::resumeDownload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, WTF::FileSystemImpl *a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8));
  if (result)
  {
    uint64_t v18 = result;
    uint64_t v19 = WTF::fastMalloc((WTF *)0x1C8);
    uint64_t v28 = a3;
    uint64_t v32 = WebKit::Download::Download(v19, a1, a3, 0, v18);
    WebKit::Download::resume(v32, a4, a5, a6, a7, a9, a10);
    if (a8)
    {
      WebCore::ResourceRequest::ResourceRequest((StringImpl *)v30);
      uint64_t v29 = 0;
      uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 56))(v19);
      uint64_t v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v21 = 18;
      *((void *)v21 + objc_destroyWeak(this + 1) = v20;
      *((void *)v21 + 66) = (char *)v21 + 16;
      *((void *)v21 + 67) = 512;
      *((void *)v21 + 6++*(_DWORD *)(this + 8) = 0;
      *((void *)v21 + 70) = 0;
      *((void *)v21 + 69) = 0;
      IPC::Encoder::encodeHeader(v21);
      int v33 = v21;
      IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v21, (WebCore::ResourceRequest *)v30);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v21, (uint64_t *)&v29);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v19 + 32))(v19, &v33, 0);
      uint64_t v23 = v33;
      int v33 = 0;
      if (v23)
      {
        IPC::Encoder::~Encoder(v23, v22);
        WTF::fastFree(v26, v27);
      }
      uint64_t v24 = v29;
      uint64_t v29 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v22);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      CFTypeRef v25 = cf;
      CFTypeRef cf = 0;
      if (v25) {
        CFRelease(v25);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v30);
    }
    WebKit::DownloadMap::add((uint64_t *)(a1 + 32), v28, &v32, (uint64_t)v30);
    uint64_t result = v32;
    uint64_t v32 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *WebKit::DownloadManager::cancelDownload(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = a2;
  uint64_t v11 = (unsigned int *)a2;
  uint64_t v5 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), &v11);
  if (v5)
  {
    return WebKit::Download::cancel(v5, a3, 1);
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 16);
    uint64_t v8 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v7, &v10);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::take(v7, v8, &v11);
    if (v11)
    {
      WebKit::PendingDownload::cancel((uint64_t)v11, a3);
      uint64_t result = v11;
      uint64_t v11 = 0;
      if (result) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
    else
    {
      uint64_t v9 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, void, void))(*(void *)v9 + 16))(v9, 0, 0);
      return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  return result;
}

void WebKit::DownloadManager::publishDownloadProgress(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF *a5, uint64_t a6, uint64_t a7, WTF *a8)
{
  uint64_t v17 = a2;
  uint64_t v18 = a2;
  uint64_t v15 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), &v18);
  if (v15)
  {
    WebKit::Download::publishProgress(v15, a3, a4, (uint64_t)a5, a6, a7, (uint64_t)a8);
  }
  else
  {
    uint64_t v16 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 16), &v17);
    if (v16) {
      WebKit::PendingDownload::publishProgress(v16, a3, a4, a5, a6, a7, a8);
    }
  }
}

void *WebKit::DownloadManager::applicationDidEnterBackground(WebKit::DownloadManager *this)
{
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 4);
  uint64_t v3 = result;
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)this + 4);
  if (v6) {
    uint64_t v7 = (void *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != result)
  {
    do
    {
      uint64_t result = (void *)WebKit::DownloadMonitor::applicationDidEnterBackground((WebKit::DownloadMonitor *)(v3[1] + 176));
      while (1)
      {
        v3 += 2;
        if (v3 == v5) {
          break;
        }
        if ((unint64_t)(*v3 + 1) > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v3 = v5;
LABEL_10:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

void WebKit::DownloadManager::applicationWillEnterForeground(WebKit::DownloadManager *this)
{
  uint64_t v2 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 4);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)this + 4);
  if (v6) {
    uint64_t v7 = (void *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != v2)
  {
    do
    {
      WebKit::DownloadMonitor::applicationWillEnterForeground((WebKit::DownloadMonitor *)(v3[1] + 176));
      while (1)
      {
        v3 += 2;
        if (v3 == v5) {
          break;
        }
        if ((unint64_t)(*v3 + 1) > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v3 = v5;
LABEL_10:
      ;
    }
    while (v3 != v7);
  }
}

void WebKit::LegacyCustomProtocolManager::~LegacyCustomProtocolManager(WebKit::LegacyCustomProtocolManager *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C7550;
  *((void *)this + objc_destroyWeak(this + 1) = &unk_1EE9C7588;
  uint64_t v3 = (WTF::StringImpl **)*((void *)this + 6);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  *((void *)this + objc_destroyWeak(this + 1) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

{
  WTF::StringImpl **v3;
  uint64_t v4;
  unsigned int *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE9C7550;
  *((void *)this + objc_destroyWeak(this + 1) = &unk_1EE9C7588;
  uint64_t v3 = (WTF::StringImpl **)*((void *)this + 6);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  *((void *)this + objc_destroyWeak(this + 1) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);

  WTF::fastFree(this, v6);
}

void non-virtual thunk to'WebKit::LegacyCustomProtocolManager::~LegacyCustomProtocolManager(WebKit::LegacyCustomProtocolManager *this, WTF::StringImpl *a2)
{
  *((void *)this - objc_destroyWeak(this + 1) = &unk_1EE9C7550;
  *(void *)this = &unk_1EE9C7588;
  uint64_t v3 = (WTF::StringImpl **)*((void *)this + 5);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  *(void *)this = &unk_1EE9B71B0;

  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  unsigned int *v6;
  void *v7;
  uint64_t vars8;

  uint64_t v3 = (WebKit::LegacyCustomProtocolManager *)((char *)this - 8);
  *((void *)this - objc_destroyWeak(this + 1) = &unk_1EE9C7550;
  *(void *)this = &unk_1EE9C7588;
  uint64_t v4 = (WTF::StringImpl **)*((void *)this + 5);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v5, a2);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);

  WTF::fastFree(v3, v7);
}

void *WebCore::RegistrableDomain::RegistrableDomain(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2 && *(_DWORD *)(v3 + 4))
  {
    *a2 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v3 = v5;
  }
  *a1 = v3;
  return a1;
}

WTF::StringImpl *WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor::isolatedCopy(uint64_t a1, uint64_t a2)
{
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)a1, a2);
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)(a1 + 16), a2 + 16);
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)(a1 + 32), a2 + 32);

  return WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)(a1 + 48), a2 + 48);
}

WTF::StringImpl *WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(WTF::StringImpl ***)a2;
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = &v4[v5];
    while (1)
    {
      WebCore::RegistrableDomain::isolatedCopy(&v12);
      uint64_t v8 = v12;
      uint64_t v12 = 0;
      uint64_t result = *v4;
      void *v4 = v8;
      if (result)
      {
        int v9 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result != 2) {
          goto LABEL_7;
        }
        WTF::StringImpl::destroy(result, v7);
        uint64_t result = v12;
        uint64_t v12 = 0;
        if (result) {
          break;
        }
      }
LABEL_8:
      if (++v4 >= v6)
      {
        uint64_t v4 = *(WTF::StringImpl ***)a2;
        LODWORD(v5) = *(_DWORD *)(a2 + 12);
        goto LABEL_11;
      }
    }
    int v9 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
    {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      goto LABEL_8;
    }
LABEL_7:
    *(_DWORD *)uint64_t result = v9;
    goto LABEL_8;
  }
LABEL_11:
  *(void *)uint64_t v3 = v4;
  int v11 = *(_DWORD *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 8) = 0;
  *((_DWORD *)v3 + objc_destroyWeak(this + 2) = v11;
  *((_DWORD *)v3 + 3) = v5;
  return result;
}

uint64_t WebKit::RegistrableDomainsToBlockCookiesFor::isolatedCopy(void *a1, uint64_t a2)
{
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)a1, a2);
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)(a1 + 2), a2 + 16);
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)(a1 + 4), a2 + 32);
  uint64_t v4 = (uint64_t *)(a2 + 48);
  uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(a2 + 48), v5, v6);
  v19[0] = result;
  v19[1] = v8;
  uint64_t v9 = *(void *)(a2 + 48);
  if (v9) {
    uint64_t v10 = v9 + 24 * *(unsigned int *)(v9 - 4);
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10 != result)
  {
    do
    {
      WebCore::RegistrableDomain::isolatedCopy(v18);
      uint64_t v12 = v18[0];
      v18[0] = 0;
      unint64_t v13 = *(WTF::StringImpl **)v19[0];
      *(void *)v19[0] = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v11);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      uint64_t v14 = v18[0];
      v18[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v11);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)v18, v19[0] + 8);
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v19[0] + 8, v18);
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v15);
      v19[0] += 24;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v19, v16, v17);
      uint64_t result = v19[0];
    }
    while (v19[0] != v10);
    uint64_t v9 = *v4;
  }
  uint64_t *v4 = 0;
  a1[6] = v9;
  return result;
}

uint64_t WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String>(WTF::StringBuilder *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL v4 = v3 != 0;
  unint64_t v5 = v3 - 1;
  if (!v4) {
    unint64_t v5 = 0;
  }
  uint64_t v8 = *(int8x16_t **)a2;
  if (v5 >> 31)
  {
    uint64_t result = 124;
    __break(0xC471u);
  }
  else
  {
    int v9 = v5;
    uint64_t v7 = *a3;
    return (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(a1, &v8, &v7);
  }
  return result;
}

uint64_t *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(WTF::StringBuilder *a1, int8x16_t **a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = *((void *)a1 + 1);
  if ((v6 || (uint64_t v6 = *(void *)a1) != 0) && (*(unsigned char *)(v6 + 16) & 4) == 0 || v5 && (*(unsigned char *)(v5 + 16) & 4) == 0)
  {
    uint64_t result = (uint64_t *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      uint64_t v8 = *a2;
      uint64_t v9 = *a3;
      uint64_t v10 = (char *)result + 2 * a2[1];
      uint64_t v11 = (unint64_t)a2[1] & 0xFFFFFFC0;
      if (v11)
      {
        uint64_t v12 = (uint64_t *)((char *)result + 2 * v11);
        long long v13 = 0uLL;
        do
        {
          v27.val[0] = *v8;
          int8x16_t v14 = v8[1];
          v28.val[0] = v8[2];
          int8x16_t v15 = v8[3];
          v8 += 4;
          int8x16_t v16 = v15;
          v28.val[1] = 0uLL;
          v29.val[0] = v14;
          v27.val[1] = 0uLL;
          uint64_t v17 = (char *)result;
          vst2q_s8(v17, v27);
          v17 += 32;
          v29.val[1] = 0uLL;
          vst2q_s8(v17, v29);
          uint64_t v18 = (char *)(result + 8);
          vst2q_s8(v18, v28);
          uint64_t v19 = (char *)(result + 12);
          vst2q_s8(v19, *(int8x16x2_t *)(&v13 - 1));
          result += 16;
        }
        while (result != v12);
        uint64_t result = v12;
      }
      while (result != (uint64_t *)v10)
      {
        __int16 v20 = v8->u8[0];
        uint64_t v8 = (int8x16_t *)((char *)v8 + 1);
        *(_WORD *)uint64_t result = v20;
        uint64_t result = (uint64_t *)((char *)result + 2);
      }
      uint64_t v26 = v9;
      return WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v26, v10);
    }
  }
  else
  {
    uint64_t result = (uint64_t *)MEMORY[0x19972DE60]();
    if (result)
    {
      uint64_t v21 = result;
      int v22 = a2[1];
      uint64_t v23 = v22;
      uint64_t v24 = *a3;
      if (v22)
      {
        CFTypeRef v25 = *a2;
        if (v22 == 1) {
          *(unsigned char *)uint64_t result = v25->i8[0];
        }
        else {
          memcpy(result, v25, a2[1]);
        }
      }
      uint64_t v26 = v24;
      return WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v26, (char *)v21 + v23);
    }
  }
  return result;
}

unsigned char *WTF::StringView::getCharacters<unsigned char>(unsigned char *result, char *__dst)
{
  uint64_t v2 = *(char **)result;
  size_t v3 = *((unsigned int *)result + 2);
  if (result[12])
  {
    if (v3)
    {
      if (v3 == 1) {
        *__dst = *v2;
      }
      else {
        return memcpy(__dst, v2, v3);
      }
    }
  }
  else
  {
    BOOL v4 = &__dst[v3];
    if (v3 >= 0x10)
    {
      uint64_t v5 = &__dst[v3 & 0xFFFFFFF0];
      do
      {
        unsigned long long v6 = (unsigned __int128)vld2q_s8(v2);
        v2 += 32;
        *(_OWORD *)__dst = v6;
        __dst += 16;
      }
      while (__dst != v5);
      __dst = v5;
    }
    while (__dst != v4)
    {
      char v7 = *v2;
      v2 += 2;
      *__dst++ = v7;
    }
  }
  return result;
}

void WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *(void *)a1;
  unsigned int v5 = *(_DWORD *)(a1 + 12);
  if (v5)
  {
    unint64_t v7 = v4 + 312 * v5;
    do
    {
      WebCore::PrivateClickMeasurement::isolatedCopy();
      WebCore::PrivateClickMeasurement::operator=(v4, (uint64_t)v9);
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v9, v8);
      v4 += 312;
    }
    while (v4 < v7);
    unint64_t v4 = *(void *)a1;
    unsigned int v5 = *(_DWORD *)(a1 + 12);
  }
  *(void *)a2 = v4;
  int v6 = *(_DWORD *)(a1 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(a2 + ++*(_DWORD *)(this + 8) = v6;
  *(_DWORD *)(a2 + 1objc_destroyWeak(this + 2) = v5;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    unint64_t v4 = (WTF::StringImpl **)(a1 + 8);
    do
    {
      if (*((_DWORD *)v4 - 2) != -1)
      {
        unsigned int v5 = *v4;
        char *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 5;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,false>(uint64_t result, char *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
LABEL_2:
  uint64_t v11 = (uint64_t *)(a2 - 8);
  uint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = a2 - (char *)v12;
    unint64_t v16 = (a2 - (char *)v12) >> 3;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*a3)((uint64_t *)a2 - 1, v12);
          if (result)
          {
            uint64_t v23 = *v12;
            uint64_t *v12 = *v11;
            *uint64_t v11 = v23;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v12, v12 + 1, (uint64_t *)a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v12, v12 + 1, v12 + 2, (uint64_t *)a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v12, v12 + 1, v12 + 2, v12 + 3, (uint64_t *)a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 191) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (uint64_t *)a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,WTF::String*>((WTF::StringImpl *)v12, a2, (uint64_t *)a2, a3);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = &v12[v16 >> 1];
    if ((unint64_t)v15 >= 0x401)
    {
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v12, &v12[v16 >> 1], (uint64_t *)a2 - 1, a3);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v12 + 1, v18 - 1, (uint64_t *)a2 - 2, a3);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v12 + 2, &v12[v17 + 1], (uint64_t *)a2 - 3, a3);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v18 - 1, v18, &v12[v17 + 1], a3);
      uint64_t v19 = *v12;
      uint64_t *v12 = *v18;
      *uint64_t v18 = v19;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(&v12[v16 >> 1], v12, (uint64_t *)a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)(v12 - 1, v12) & 1) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::String *,BOOL (*&)(WTF::String const&,WTF::String const&)>(v12, (uint64_t *)a2, (uint64_t (**)(WTF::StringImpl **, uint64_t *))a3);
      uint64_t v12 = (uint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    __int16 v20 = std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::String *,BOOL (*&)(WTF::String const&,WTF::String const&)>(v12, (WTF::StringImpl *)a2, (uint64_t *)a3);
    if ((v21 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v12, v20, a3);
    uint64_t v12 = v20 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v20 + 1, (uint64_t *)a2, a3);
    if (result)
    {
      a4 = -v14;
      a2 = (char *)v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v22)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,false>(v10, v20, a3, -v14, a5 & 1);
      uint64_t v12 = v20 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>((WTF::StringImpl *)v12, (WTF::StringImpl **)a2, (uint64_t (**)(WTF::StringImpl **, WTF::StringImpl **))a3);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>((WTF::StringImpl *)v12, (WTF::StringImpl **)a2, (uint64_t (**)(WTF::StringImpl **, char *))a3);
  }
}

WTF::StringImpl *std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(WTF::StringImpl *result, WTF::StringImpl **a2, uint64_t (**a3)(WTF::StringImpl **, WTF::StringImpl **))
{
  if (result != (WTF::StringImpl *)a2)
  {
    v17[7] = v3;
    v17[8] = v4;
    char v6 = (WTF::StringImpl **)result;
    unint64_t v7 = (WTF::StringImpl **)((char *)result + 8);
    if ((WTF::StringImpl **)((char *)result + 8) != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (WTF::StringImpl **)result;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        uint64_t result = (WTF::StringImpl *)(*a3)(v7, v11);
        if (result)
        {
          uint64_t v12 = *v10;
          uint64_t *v10 = 0;
          v17[0] = v12;
          uint64_t v13 = v9;
          while (1)
          {
            WTF::String::operator=((uint64_t *)((char *)v6 + v13 + 8), (uint64_t *)((char *)v6 + v13));
            if (!v13) {
              break;
            }
            v13 -= 8;
            if (((*a3)(v17, (WTF::StringImpl **)((char *)v6 + v13)) & 1) == 0)
            {
              uint64_t v15 = (WTF::StringImpl **)((char *)v6 + v13 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v15 = v6;
LABEL_10:
          unint64_t v16 = v17[0];
          v17[0] = 0;
          uint64_t result = *v15;
          *uint64_t v15 = v16;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              WTF::StringImpl::destroy(result, v14);
            }
            else {
              *(_DWORD *)result -= 2;
            }
            uint64_t result = v17[0];
            v17[0] = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2) {
                uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
              }
              else {
                *(_DWORD *)result -= 2;
              }
            }
          }
        }
        unint64_t v7 = v10 + 1;
        v9 += 8;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

WTF::StringImpl *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(WTF::StringImpl *result, WTF::StringImpl **a2, uint64_t (**a3)(WTF::StringImpl **, char *))
{
  if (result != (WTF::StringImpl *)a2)
  {
    unint64_t v4 = result;
    char v5 = (WTF::StringImpl **)((char *)result + 8);
    if ((WTF::StringImpl **)((char *)result + 8) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (char *)result - 8;
      uint64_t v9 = -1;
      uint64_t v10 = 1;
      do
      {
        uint64_t v11 = (char *)v4 + 8 * v7;
        uint64_t v7 = v10;
        uint64_t result = (WTF::StringImpl *)(*a3)(v5, v11);
        if (result)
        {
          uint64_t v12 = *v5;
          *char v5 = 0;
          __int16 v20 = v12;
          uint64_t v13 = v9;
          uint64_t v14 = (uint64_t *)v8;
          do
          {
            uint64_t result = (WTF::StringImpl *)WTF::String::operator=(v14 + 2, v14 + 1);
            if (!v13)
            {
              __break(1u);
              return result;
            }
            char v15 = (*a3)(&v20, (char *)v14--);
            ++v13;
          }
          while ((v15 & 1) != 0);
          unint64_t v17 = v20;
          __int16 v20 = 0;
          uint64_t result = (WTF::StringImpl *)v14[2];
          uint64_t v14[2] = (uint64_t)v17;
          if (!result) {
            goto LABEL_13;
          }
          int v18 = *(_DWORD *)result - 2;
          if (*(_DWORD *)result != 2) {
            goto LABEL_12;
          }
          WTF::StringImpl::destroy(result, v16);
          uint64_t result = v20;
          __int16 v20 = 0;
          if (!result) {
            goto LABEL_13;
          }
          int v18 = *(_DWORD *)result - 2;
          if (*(_DWORD *)result == 2) {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
          }
          else {
LABEL_12:
          }
            *(_DWORD *)uint64_t result = v18;
        }
LABEL_13:
        uint64_t v10 = v7 + 1;
        char v5 = (WTF::StringImpl **)((char *)v4 + 8 * v7 + 8);
        v8 += 8;
        --v9;
      }
      while (v5 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    uint64_t v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  uint64_t v10 = *a1;
  if (!result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(a3, a2)) {
      return 1;
    }
    uint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::String *,BOOL (*&)(WTF::String const&,WTF::String const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(WTF::StringImpl **, uint64_t *))
{
  char v6 = (WTF::StringImpl *)*a1;
  *a1 = 0;
  unint64_t v17 = v6;
  uint64_t v7 = (*a3)(&v17, a2 - 1);
  if (v7)
  {
    uint64_t v9 = a1;
    while (1)
    {
      if (++v9 == a2) {
        goto LABEL_25;
      }
      uint64_t v7 = (*a3)(&v17, v9);
      if (v7) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v10 = a1 + 1;
  do
  {
    uint64_t v9 = v10;
    if (v10 >= a2) {
      break;
    }
    uint64_t v7 = (*a3)(&v17, v10);
    uint64_t v10 = v9 + 1;
  }
  while (!v7);
LABEL_9:
  uint64_t v11 = a2;
  if (v9 < a2)
  {
    uint64_t v11 = a2;
    while (v11 != a1)
    {
      uint64_t v7 = (*a3)(&v17, --v11);
      if ((v7 & 1) == 0) {
        goto LABEL_19;
      }
    }
    goto LABEL_25;
  }
LABEL_19:
  if (v9 < v11)
  {
    uint64_t v12 = *v9;
    *uint64_t v9 = *v11;
    *uint64_t v11 = v12;
    while (++v9 != a2)
    {
      uint64_t v7 = (*a3)(&v17, v9);
      if (v7)
      {
        while (v11 != a1)
        {
          uint64_t v7 = (*a3)(&v17, --v11);
          if ((v7 & 1) == 0) {
            goto LABEL_19;
          }
        }
        break;
      }
    }
LABEL_25:
    __break(1u);
LABEL_26:
    WTF::StringImpl::destroy((WTF::StringImpl *)v7, v8);
    goto LABEL_27;
  }
  uint64_t v13 = v9 - 1;
  if (v9 - 1 != a1) {
    WTF::String::operator=(a1, v9 - 1);
  }
  uint64_t v14 = v17;
  unint64_t v17 = 0;
  uint64_t v7 = *v13;
  *uint64_t v13 = (uint64_t)v14;
  if (v7)
  {
    if (*(_DWORD *)v7 != 2)
    {
      *(_DWORD *)v7 -= 2;
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_27:
  char v15 = v17;
  unint64_t v17 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v8);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  return v9;
}

uint64_t *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::String *,BOOL (*&)(WTF::String const&,WTF::String const&)>(uint64_t *a1, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = (WTF::StringImpl *)*a1;
  *a1 = 0;
  unint64_t v17 = v7;
  do
  {
    uint64_t v8 = (uint64_t)&a1[v6 + 1];
    if ((WTF::StringImpl *)v8 == a2) {
      goto LABEL_27;
    }
    uint64_t v8 = ((uint64_t (*)(uint64_t, WTF::StringImpl **))*a3)(v8, &v17);
    ++v6;
  }
  while ((v8 & 1) != 0);
  uint64_t v9 = &a1[v6];
  if (v6 != 1)
  {
    uint64_t v10 = (uint64_t *)a2;
    while (v10 != a1)
    {
      uint64_t v8 = ((uint64_t (*)(uint64_t *, WTF::StringImpl **))*a3)(--v10, &v17);
      if (v8) {
        goto LABEL_12;
      }
    }
    goto LABEL_27;
  }
  uint64_t v10 = (uint64_t *)a2;
  do
  {
    if (v9 >= v10) {
      break;
    }
    uint64_t v8 = ((uint64_t (*)(uint64_t *, WTF::StringImpl **))*a3)(--v10, &v17);
  }
  while ((v8 & 1) == 0);
LABEL_12:
  if (v9 < v10)
  {
    uint64_t v11 = v9;
    uint64_t v12 = v10;
LABEL_14:
    uint64_t v13 = *v11;
    *uint64_t v11 = *v12;
    uint64_t *v12 = v13;
    while (++v11 != (uint64_t *)a2)
    {
      uint64_t v8 = ((uint64_t (*)(uint64_t *, WTF::StringImpl **))*a3)(v11, &v17);
      if ((v8 & 1) == 0)
      {
        while (v12 != a1)
        {
          uint64_t v8 = ((uint64_t (*)(uint64_t *, WTF::StringImpl **))*a3)(--v12, &v17);
          if (v8)
          {
            if (v11 < v12) {
              goto LABEL_14;
            }
            a3 = v11 - 1;
            goto LABEL_22;
          }
        }
        break;
      }
    }
LABEL_27:
    __break(1u);
LABEL_28:
    WTF::StringImpl::destroy((WTF::StringImpl *)v8, a2);
    goto LABEL_29;
  }
  a3 = v9 - 1;
LABEL_22:
  if (a3 != a1) {
    WTF::String::operator=(a1, a3);
  }
  uint64_t v14 = v17;
  unint64_t v17 = 0;
  uint64_t v8 = *a3;
  *a3 = (uint64_t)v14;
  if (v8)
  {
    if (*(_DWORD *)v8 != 2)
    {
      *(_DWORD *)v8 -= 2;
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_29:
  char v15 = v17;
  unint64_t v17 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, a2);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  return a3;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        uint64_t v9 = *a1;
        *a1 = *v8;
        *uint64_t v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = (WTF::StringImpl **)(a1 + 3);
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((uint64_t *)v11, v10))
    {
      uint64_t v14 = *v11;
      *uint64_t v11 = 0;
      BOOL v22 = v14;
      uint64_t v15 = v12;
      while (1)
      {
        WTF::String::operator=((uint64_t *)((char *)a1 + v15 + 24), (uint64_t *)((char *)a1 + v15 + 16));
        if (v15 == -16) {
          break;
        }
        char v17 = (*a3)((uint64_t *)&v22, (uint64_t *)((char *)a1 + v15 + 8));
        v15 -= 8;
        if ((v17 & 1) == 0)
        {
          int v18 = (WTF::StringImpl **)((char *)a1 + v15 + 24);
          goto LABEL_12;
        }
      }
      int v18 = (WTF::StringImpl **)a1;
LABEL_12:
      uint64_t v19 = v22;
      BOOL v22 = 0;
      __int16 v20 = *v18;
      *int v18 = v19;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v16);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      char v21 = v22;
      BOOL v22 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v16);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      if (++v13 == 8) {
        return v11 + 1 == (WTF::StringImpl **)a2;
      }
    }
    uint64_t v10 = (uint64_t *)v11;
    v12 += 8;
    if (++v11 == (WTF::StringImpl **)a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, a2, a3, a5);
  uint64_t result = (*a5)(a4, a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = (*a5)(a3, a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = (*a5)(a2, a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)(a5, a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = (*a6)(a4, a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = (*a6)(a3, a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = (*a6)(a2, a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,WTF::String*>(WTF::StringImpl *a1, char *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  if (a1 != (WTF::StringImpl *)a2)
  {
    uint64_t v8 = a2 - (char *)a1;
    uint64_t v9 = (a2 - (char *)a1) >> 3;
    if (a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t *)((char *)a1 + 8 * v10);
      do
      {
        std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = (uint64_t *)a2;
    if (a2 != (char *)a3)
    {
      uint64_t v14 = (uint64_t *)a2;
      do
      {
        if ((*a4)(v14, (uint64_t *)a1))
        {
          uint64_t v15 = *v14;
          *uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, a4, v9, (uint64_t *)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      char v17 = (uint64_t *)(a2 - 8);
      do
      {
        uint64_t v18 = *(void *)a1;
        *(void *)a1 = 0;
        uint64_t v19 = std::__floyd_sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>((uint64_t *)a1, (unsigned int (**)(uint64_t, uint64_t))a4, v16);
        char v21 = v19;
        if (v17 == v19)
        {
          uint64_t v24 = (WTF::StringImpl *)*v19;
          *char v21 = v18;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, v20);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
        }
        else
        {
          WTF::String::operator=(v19, v17);
          uint64_t v23 = (WTF::StringImpl *)*v17;
          *char v17 = v18;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v22);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          std::__sift_up[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, (uint64_t)(v21 + 1), (uint64_t (**)(uint64_t *, uint64_t))a4, ((char *)(v21 + 1) - (char *)a1) >> 3);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

WTF::StringImpl *std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(WTF::StringImpl *result, uint64_t (**a2)(uint64_t *, uint64_t *), uint64_t a3, uint64_t *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    v23[11] = v4;
    v23[12] = v5;
    uint64_t v7 = a4;
    uint64_t v8 = result;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((char *)a4 - (char *)result) >> 3)
    {
      uint64_t v12 = ((char *)a4 - (char *)result) >> 2;
      uint64_t v13 = v12 + 1;
      uint64_t v14 = (uint64_t *)((char *)result + 8 * v12 + 8);
      uint64_t v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 1))
      {
        ++v14;
        uint64_t v13 = v15;
      }
      uint64_t result = (WTF::StringImpl *)(*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        uint64_t v16 = (WTF::StringImpl *)*v7;
        *uint64_t v7 = 0;
        v23[0] = v16;
        do
        {
          char v17 = (WTF::StringImpl **)v14;
          WTF::String::operator=(v7, v14);
          if (v9 < v13) {
            break;
          }
          uint64_t v19 = (2 * v13) | 1;
          uint64_t v14 = (uint64_t *)((char *)v8 + 8 * v19);
          uint64_t v20 = 2 * v13 + 2;
          if (v20 < a3 && (*a2)((uint64_t *)v8 + v19, v14 + 1))
          {
            ++v14;
            uint64_t v19 = v20;
          }
          uint64_t v7 = (uint64_t *)v17;
          uint64_t v13 = v19;
        }
        while (!(*a2)(v14, (uint64_t *)v23));
        char v21 = v23[0];
        v23[0] = 0;
        BOOL v22 = *v17;
        *char v17 = v21;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, v18);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
        uint64_t result = v23[0];
        v23[0] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

uint64_t *std::__floyd_sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(uint64_t *a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    int64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)((uint64_t)&a1[v6 + 1], (uint64_t)&a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    WTF::String::operator=(a1, v9);
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

WTF::StringImpl *std::__sift_up[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(WTF::StringImpl *result, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    v18[7] = v4;
    v18[8] = v5;
    uint64_t v8 = result;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = (uint64_t *)((char *)result + 8 * (v6 >> 1));
    uint64_t v11 = (uint64_t *)(a2 - 8);
    uint64_t result = (WTF::StringImpl *)(*a3)(v10, a2 - 8);
    if (result)
    {
      uint64_t v12 = (WTF::StringImpl *)*v11;
      *uint64_t v11 = 0;
      v18[0] = v12;
      do
      {
        uint64_t v13 = (WTF::StringImpl **)v10;
        WTF::String::operator=(v11, v10);
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (uint64_t *)((char *)v8 + 8 * v9);
        uint64_t v11 = (uint64_t *)v13;
      }
      while (((*a3)(v10, (uint64_t)v18) & 1) != 0);
      uint64_t v15 = v18[0];
      v18[0] = 0;
      uint64_t result = *v13;
      *uint64_t v13 = v15;
      if (result)
      {
        int v16 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result == 2)
        {
          WTF::StringImpl::destroy(result, v14);
          uint64_t result = v18[0];
          v18[0] = 0;
          if (!result) {
            return result;
          }
          int v16 = *(_DWORD *)result - 2;
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          }
        }
        *(_DWORD *)uint64_t result = v16;
      }
    }
  }
  return result;
}

uint64_t WTF::codePointCompare(WTF *this, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  if (!this)
  {
    if (!a2) {
      return 0;
    }
    if (*((_DWORD *)a2 + 1)) {
      return 0xFFFFFFFFLL;
    }
    return 0;
  }
  if (!a2) {
    return *((_DWORD *)this + 1) != 0;
  }
  int v3 = *((_DWORD *)a2 + 4);
  unsigned int v4 = *((_DWORD *)this + 1);
  unsigned int v5 = *((_DWORD *)a2 + 1);
  if (v5 >= v4) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v5;
  }
  if ((*((unsigned char *)this + 16) & 4) == 0)
  {
    if ((v3 & 4) != 0)
    {
      if (v6)
      {
        char v17 = (unsigned __int8 *)*((void *)a2 + 1);
        uint64_t v18 = (unsigned __int16 *)*((void *)this + 1);
        while (1)
        {
          unsigned int v19 = *v18;
          unsigned int v20 = *v17;
          BOOL v11 = v19 > v20;
          if (v19 != v20) {
            goto LABEL_40;
          }
          ++v18;
          ++v17;
          if (!--v6) {
            goto LABEL_34;
          }
        }
      }
    }
    else if (v6)
    {
      uint64_t v7 = (unsigned __int16 *)*((void *)a2 + 1);
      uint64_t v8 = (unsigned __int16 *)*((void *)this + 1);
      while (1)
      {
        unsigned int v9 = *v8;
        unsigned int v10 = *v7;
        BOOL v11 = v9 > v10;
        if (v9 != v10) {
          break;
        }
        ++v8;
        ++v7;
        if (!--v6) {
          goto LABEL_34;
        }
      }
LABEL_40:
      if (v11) {
        return 1;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
    goto LABEL_34;
  }
  if ((v3 & 4) != 0)
  {
    if (v6)
    {
      char v21 = (unsigned __int8 *)*((void *)a2 + 1);
      BOOL v22 = (unsigned __int8 *)*((void *)this + 1);
      while (1)
      {
        unsigned int v23 = *v22;
        unsigned int v24 = *v21;
        BOOL v11 = v23 > v24;
        if (v23 != v24) {
          goto LABEL_40;
        }
        ++v22;
        ++v21;
        if (!--v6) {
          goto LABEL_34;
        }
      }
    }
    goto LABEL_34;
  }
  if (!v6)
  {
LABEL_34:
    if (v5 < v4) {
      unsigned int v25 = 1;
    }
    else {
      unsigned int v25 = -1;
    }
    if (v4 == v5) {
      return 0;
    }
    else {
      return v25;
    }
  }
  uint64_t v13 = (unsigned __int16 *)*((void *)a2 + 1);
  uint64_t v14 = (unsigned __int8 *)*((void *)this + 1);
  while (1)
  {
    unsigned int v15 = *v14;
    unsigned int v16 = *v13;
    if (v16 != v15) {
      break;
    }
    ++v14;
    ++v13;
    if (!--v6) {
      goto LABEL_34;
    }
  }
  if (v16 < v15) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

WebKit::ResourceLoadStatisticsStore *std::unique_ptr<WebKit::ResourceLoadStatisticsStore>::reset[abi:sn180100](WebKit::ResourceLoadStatisticsStore **a1, WebKit::ResourceLoadStatisticsStore *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::ResourceLoadStatisticsStore::~ResourceLoadStatisticsStore(result);
    return (WebKit::ResourceLoadStatisticsStore *)WTF::fastFree(v4, v5);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::postTask(WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7620;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = (atomic_uchar **)a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::postTask(WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7620;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (atomic_uchar **)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }

  return WTF::fastFree(this, a2);
}

WTF *std::__optional_storage_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::OrganizationStorageAccessPromptQuirk,false>>(WTF *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*((unsigned __int8 *)result + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*((unsigned char *)result + 32))
    {
      WTF::String::operator=((uint64_t *)result, (uint64_t *)a2);
      uint64_t v5 = *(void *)(a2 + 8);
      *(void *)(a2 + ++*(_DWORD *)(this + 8) = 0;
      uint64_t v6 = *((void *)v3 + 1);
      *((void *)v3 + objc_destroyWeak(this + 1) = v5;
      if (v6) {
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v6, v4);
      }
      uint64_t v7 = (WTF::StringImpl ***)((char *)v3 + 16);
      uint64_t v8 = *((unsigned int *)v3 + 7);
      if (v8)
      {
        unsigned int v9 = *v7;
        uint64_t v10 = 40 * v8;
        do
        {
          BOOL v11 = *v9;
          *unsigned int v9 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v4);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
          v9 += 5;
          v10 -= 40;
        }
        while (v10);
      }
      return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)v7, (_DWORD *)(a2 + 16));
    }
  }
  else if (*((unsigned char *)result + 32))
  {
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result + 16, (WTF::StringImpl *)a2);
    uint64_t v13 = *((void *)v3 + 1);
    if (v13) {
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v13, v12);
    }
    uint64_t result = *(WTF **)v3;
    *(void *)uint64_t v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    *((unsigned char *)v3 + 3objc_destroyWeak(this + 2) = 0;
  }
  else
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)uint64_t result = v14;
    *((void *)result + objc_destroyWeak(this + 1) = 0;
    uint64_t v15 = *(void *)(a2 + 8);
    *(void *)(a2 + ++*(_DWORD *)(this + 8) = 0;
    *((void *)result + objc_destroyWeak(this + 2) = 0;
    *((void *)result + 3) = 0;
    *((void *)result + objc_destroyWeak(this + 1) = v15;
    uint64_t v16 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *((void *)result + objc_destroyWeak(this + 2) = v16;
    LODWORD(v16) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    *((_DWORD *)result + 6) = v16;
    LODWORD(v16) = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 2++*(_DWORD *)(this + 8) = 0;
    *((_DWORD *)result + 7) = v16;
    *((unsigned char *)result + 3objc_destroyWeak(this + 2) = 1;
  }
  return result;
}

uint64_t WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a1, a2, a3);
  v14[0] = result;
  v14[1] = v7;
  if (*a1) {
    uint64_t v8 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != result)
  {
    do
    {
      WebCore::RegistrableDomain::isolatedCopy(&v13);
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(a4, &v13, (uint64_t)&v12);
      BOOL v11 = v13;
      uint64_t v13 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v9);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      v14[0] += 8;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v14, (uint64_t)v9, v10);
      uint64_t result = v14[0];
    }
    while (v14[0] != v8);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    unsigned int v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v5 + 8));
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    unsigned int v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, int8x16_t **a2, uint64_t *a3, int8x16_t **a4)
{
  uint64_t v7 = *a3;
  uint64_t v8 = *((void *)a1 + 1);
  if ((v8 || (uint64_t v8 = *(void *)a1) != 0) && (*(unsigned char *)(v8 + 16) & 4) == 0 || v7 && (*(unsigned char *)(v7 + 16) & 4) == 0)
  {
    uint64_t result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      uint64_t v10 = *a2;
      BOOL v11 = a2[1];
      uint64_t v12 = *a3;
      uint64_t v13 = *a4;
      uint64_t v14 = *((unsigned int *)a4 + 2);
      uint64_t v15 = &result[2 * v11];
      uint64_t v16 = v11 & 0xFFFFFFC0;
      if (v16)
      {
        char v17 = &result[2 * v16];
        long long v18 = 0uLL;
        do
        {
          v47.val[0] = *v10;
          int8x16_t v19 = v10[1];
          v49.val[0] = v10[2];
          int8x16_t v20 = v10[3];
          v10 += 4;
          int8x16_t v21 = v20;
          v49.val[1] = 0uLL;
          v51.val[0] = v19;
          v47.val[1] = 0uLL;
          BOOL v22 = result;
          vst2q_s8(v22, v47);
          v22 += 32;
          v51.val[1] = 0uLL;
          vst2q_s8(v22, v51);
          unsigned int v23 = result + 64;
          vst2q_s8(v23, v49);
          unsigned int v24 = result + 96;
          vst2q_s8(v24, *(int8x16x2_t *)(&v18 - 1));
          result += 128;
        }
        while (result != v17);
        uint64_t result = v17;
      }
      while (result != v15)
      {
        __int16 v25 = v10->u8[0];
        uint64_t v10 = (int8x16_t *)((char *)v10 + 1);
        *(_WORD *)uint64_t result = v25;
        result += 2;
      }
      uint64_t v46 = v12;
      uint64_t result = (char *)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v46, v15);
      uint64_t v26 = v46;
      if (v46) {
        uint64_t v26 = *(unsigned int *)(v46 + 4);
      }
      int8x16x2_t v27 = &v15[2 * v26];
      int8x16x2_t v28 = &v27[2 * v14];
      if ((v14 & 0xFFFFFFC0) != 0)
      {
        int8x16x2_t v29 = &v27[2 * (v14 & 0xFFFFFFC0)];
        long long v30 = 0uLL;
        do
        {
          v48.val[0] = *v13;
          int8x16_t v31 = v13[1];
          v50.val[0] = v13[2];
          int8x16_t v32 = v13[3];
          v13 += 4;
          int8x16_t v33 = v32;
          v50.val[1] = 0uLL;
          v52.val[0] = v31;
          v48.val[1] = 0uLL;
          uint64_t v34 = v27;
          vst2q_s8(v34, v48);
          v34 += 32;
          v52.val[1] = 0uLL;
          vst2q_s8(v34, v52);
          uint64_t v35 = v27 + 64;
          vst2q_s8(v35, v50);
          uint64_t v36 = v27 + 96;
          vst2q_s8(v36, *(int8x16x2_t *)(&v30 - 1));
          v27 += 128;
        }
        while (v27 != v29);
        int8x16x2_t v27 = v29;
      }
      while (v27 != v28)
      {
        __int16 v37 = v13->u8[0];
        uint64_t v13 = (int8x16_t *)((char *)v13 + 1);
        *(_WORD *)int8x16x2_t v27 = v37;
        v27 += 2;
      }
    }
  }
  else
  {
    uint64_t result = (char *)MEMORY[0x19972DE60]();
    if (result)
    {
      CFTypeRef v38 = result;
      uint64_t v39 = a2[1];
      uint64_t v40 = v39;
      uint64_t v41 = *a3;
      unsigned int v42 = *a4;
      size_t v43 = *((unsigned int *)a4 + 2);
      if (v39)
      {
        uint64_t v44 = *a2;
        if (v39 == 1) {
          *uint64_t result = v44->i8[0];
        }
        else {
          memcpy(result, v44, a2[1]);
        }
      }
      uint64_t v46 = v41;
      uint64_t result = (char *)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v46, &v38[v40]);
      uint64_t v45 = v46;
      if (v46) {
        uint64_t v45 = *(unsigned int *)(v46 + 4);
      }
      if (v43)
      {
        uint64_t result = &v38[v40 + v45];
        if (v43 == 1) {
          *uint64_t result = v42->i8[0];
        }
        else {
          return (char *)memcpy(result, v42, v43);
        }
      }
    }
  }
  return result;
}

void _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit27ResourceLoadStatisticsStoreES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(uint64_t a1, void *a2)
{
  uint64_t v2 = qword_1EB359880;
  if (qword_1EB359880)
  {
    int v3 = *(_DWORD *)(qword_1EB359880 - 4);
    if (v3)
    {
      int v4 = 0;
      unsigned int v5 = v3 - 1;
      do
      {
        uint64_t v6 = (unsigned int **)(v2 + 8 * v5);
        if ((unint64_t)*v6 + 1 >= 2 && !*((void *)*v6 + 1))
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v6, a2);
          ++v4;
        }
      }
      while ((unint64_t)v5--);
      uint64_t v8 = qword_1EB359880;
      if (v4)
      {
        *(_DWORD *)(qword_1EB359880 - 16) += v4;
        if (qword_1EB359880) {
          int v9 = *(_DWORD *)(qword_1EB359880 - 12);
        }
        else {
          int v9 = 0;
        }
        *(_DWORD *)(qword_1EB359880 - 1objc_destroyWeak(this + 2) = v9 - v4;
        uint64_t v8 = qword_1EB359880;
      }
      if (v8)
      {
        unsigned int v10 = *(_DWORD *)(v8 - 4);
        if (6 * *(_DWORD *)(v8 - 12) < v10 && v10 >= 9)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&qword_1EB359880);
        }
      }
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C7648;
  WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9C7648;
  WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  {
    int v3 = WebKit::WebResourceLoadStatisticsStore::monitoredDataTypes(void)::dataTypes;
  }
  else
  {
    int v3 = 574905;
    WebKit::WebResourceLoadStatisticsStore::monitoredDataTypes(void)::dataTypes = 574905;
  }
  int v4 = *(WTF::WorkQueue **)(a1 + 96);
  long long v10 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8++*(_DWORD *)(this + 8) = 0;
  WTF::WorkQueue::ref(v4);
  uint64_t v5 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v5 = &unk_1EE9C7670;
  *(_OWORD *)(v5 + ++*(_DWORD *)(this + 8) = v10;
  *(void *)(v5 + 24) = v4;
  BOOL v11 = (WTF::StringImpl **)v5;
  uint64_t v6 = *(void *)(v2 + 16);
  if (v6 && (uint64_t v7 = *(void *)(v6 + 8)) != 0)
  {
    WebKit::NetworkSession::deleteAndRestrictWebsiteDataForRegistrableDomains(v7, v3, a1 + 16, (uint64_t *)&v11);
    uint64_t result = v11;
    BOOL v11 = 0;
    if (result) {
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 1))(result);
    }
  }
  else
  {
    uint64_t v12 = 0;
    WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1},void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::call(v5, (uint64_t *)&v12);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t result = v12;
    if (v12) {
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v9);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1},void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C7670;
  int v3 = (WTF::WorkQueue *)a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::WorkQueue::deref(v3);
  }
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1},void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7670;
  int v3 = (WTF::WorkQueue *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::WorkQueue::deref(v3);
  }
  int v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1},void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::call(uint64_t a1, uint64_t *a2)
{
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy(a2, (uint64_t *)v12);
  long long v3 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0u;
  *(_OWORD *)&v12[8] = v3;
  int v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v4 = &unk_1EE9C7698;
  v4[1] = *(void *)v12;
  uint64_t v5 = *(void *)&v12[8];
  *(_OWORD *)uint64_t v12 = 0u;
  uint64_t v4[2] = v5;
  uint64_t v6 = *(void *)&v12[16];
  *(void *)&unsigned char v12[16] = 0;
  uint64_t v13 = v4;
  v4[3] = v6;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t v8 = v13;
  uint64_t v13 = 0;
  if (v8) {
    (*(void (**)(void *))(*v8 + 8))(v8);
  }
  int v9 = *(unsigned int **)&v12[16];
  *(void *)&unsigned char v12[16] = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v7);
  }
  uint64_t v10 = *(void *)&v12[8];
  *(void *)&v12[8] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = *(void *)v12;
  if (*(void *)v12) {
    return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v12, (WTF::StringImpl *)v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1}::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C7698;
  long long v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (WTF::StringImpl **)a1[1];
  if (v5) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, (WTF::StringImpl *)a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1}::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7698;
  long long v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (WTF::StringImpl **)*((void *)this + 1);
  if (v5) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, (WTF::StringImpl *)a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1}::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>)::{lambda(void)#1},void>::call(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[3];
  if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0)
  {
    WebKit::buildList<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(&v28, a1 + 1, a3);
    WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"UPDATE ObservedDomains SET dataRecordsRemoved = dataRecordsRemoved + 1 WHERE registrableDomain IN (", 100, (uint64_t *)&v28, 41, buf);
    WebCore::SQLiteDatabase::prepareStatementSlow();
    uint64_t v7 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    BOOL v11 = v28;
    int8x16x2_t v28 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v6);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    if (v30 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v29) != 101)
    {
      uint64_t v12 = qword_1EB358460;
      if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = *(void *)(v5 + 656);
        int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v5 + 16));
        uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v5 + 16));
        *(_DWORD *)long long buf = 134218755;
        *(void *)&uint8_t buf[4] = v5;
        *(_WORD *)int8x16_t v32 = 2048;
        *(void *)&v32[2] = v22;
        __int16 v33 = 1024;
        int v34 = Error;
        __int16 v35 = 2081;
        uint64_t v36 = ErrorMsg;
        _os_log_error_impl(&dword_1985F2000, v12, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::incrementRecordsDeletedCountForDomains: failed to step statement", buf, 0x26u);
      }
    }
    if (v30 != -1) {
      (*(&off_1EE9C7600 + v30))((int)buf, (WebCore::SQLiteStatement *)v29);
    }
    uint64_t v13 = *(void *)(a1[3] + 8);
    *(unsigned char *)(v13 + 71++*(_DWORD *)(this + 8) = 0;
    uint64_t v14 = *(uint64_t **)(v13 + 632);
    *(void *)(v13 + 63objc_destroyWeak(this + 2) = 0;
    *(void *)long long buf = v14;
    int v15 = *(_DWORD *)(v13 + 640);
    uint64_t v16 = *(unsigned int *)(v13 + 644);
    *(void *)(v13 + 6++*(_DWORD *)(this - 40) = 0;
    *(_DWORD *)&buf[8] = v15;
    *(_DWORD *)int8x16_t v32 = v16;
    uint64_t v17 = a1[2];
    a1[2] = 0;
    (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    if (v16)
    {
      uint64_t v19 = 8 * v16;
      do
      {
        uint64_t v20 = *v14;
        *v14++ = 0;
        (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
        v19 -= 8;
      }
      while (v19);
    }
    uint64_t v21 = *(void *)(a1[3] + 8);
    if (*(unsigned char *)(v21 + 716))
    {
      __int16 v25 = qword_1EB357E70;
      if (os_log_type_enabled((os_log_t)qword_1EB357E70, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)int8x16x2_t v29 = 0;
        _os_log_impl(&dword_1985F2000, v25, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: Done removing data records.", v29, 2u);
        uint64_t v26 = a1[3];
        if (v26) {
          uint64_t v21 = *(void *)(v26 + 8);
        }
        else {
          uint64_t v21 = 0;
        }
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(v21, 13, 4, (uint64_t)v29);
      int8x16x2_t v27 = *(WTF::StringImpl **)v29;
      *(void *)int8x16x2_t v29 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v18);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
    }
    return WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v18);
  }
  else
  {
    uint64_t v8 = a1[2];
    a1[2] = 0;
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    int v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
    return v9(v8);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C76C0;
  long long v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C76C0;
  long long v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebCore::SQLiteStatement **WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords(void)::$_0,void>::call(uint64_t a1)
{
  return WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords(void)::$_0::operator()(*(WebCore::SQLiteStatement ***)(a1 + 8), *(void *)(a1 + 16));
}

WebCore::SQLiteStatement **WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords(void)::$_0::operator()(WebCore::SQLiteStatement **result, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)(a2 + 8))
    {
      uint64_t v2 = (WTF::RunLoop *)result;
      WebKit::ResourceLoadStatisticsStore::pruneStatisticsIfNeeded(result);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebKit::ResourceLoadStatisticsStore::logTestingEvent(v2);
      uint64_t result = (WebCore::SQLiteStatement **)v4;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          return (WebCore::SQLiteStatement **)WTF::StringImpl::destroy(v4, v3);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C76E8;
  long long v3 = (atomic_uchar **)a1[4];
  a1[4] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
  uint64_t v4 = (WTF::WorkQueue *)a1[3];
  a1[3] = 0;
  if (v4) {
    WTF::WorkQueue::deref(v4);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C76E8;
  long long v3 = (atomic_uchar **)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
  uint64_t v4 = (WTF::WorkQueue *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::WorkQueue::deref(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  {
    int v2 = WebKit::WebResourceLoadStatisticsStore::monitoredDataTypes(void)::dataTypes;
  }
  else
  {
    int v2 = 574905;
    WebKit::WebResourceLoadStatisticsStore::monitoredDataTypes(void)::dataTypes = 574905;
  }
  long long v3 = *(WTF::WorkQueue **)(a1 + 24);
  long long v10 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  WTF::WorkQueue::ref(v3);
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
  uint64_t v5 = v4;
  *(void *)uint64_t v4 = &unk_1EE9C7710;
  *(_OWORD *)(v4 + ++*(_DWORD *)(this + 8) = v10;
  *(void *)(v4 + 24) = v3;
  BOOL v11 = (WTF::StringImpl **)v4;
  uint64_t v6 = *(void *)(v1 + 16);
  if (v6 && (uint64_t v7 = *(void *)(v6 + 8)) != 0)
  {
    WebKit::NetworkProcess::registrableDomainsWithWebsiteData(*(void *)(v7 + 32), *(WTF::StringImpl ***)(v7 + 24), v2, (uint64_t *)&v11);
    uint64_t result = v11;
    BOOL v11 = 0;
    if (result) {
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 1))(result);
    }
  }
  else
  {
    uint64_t v12 = 0;
    WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1},void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::call(v4, (uint64_t *)&v12);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t result = v12;
    if (v12) {
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v9);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1},void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C7710;
  long long v3 = (WTF::WorkQueue *)a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::WorkQueue::deref(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1},void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7710;
  long long v3 = (WTF::WorkQueue *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::WorkQueue::deref(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1},void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::call(uint64_t a1, uint64_t *a2)
{
  long long v3 = *(WTF **)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  uint64_t v12 = v3;
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy(a2, (uint64_t *)&v13);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v14 = v4;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v5 = &unk_1EE9C7738;
  v5[1] = v12;
  uint64_t v6 = v13;
  uint64_t v13 = 0;
  v5[2] = v6;
  uint64_t v7 = v14;
  uint64_t v14 = 0;
  int v15 = v5;
  v5[3] = v7;
  WTF::SuspendableWorkQueue::dispatch();
  int v9 = v15;
  int v15 = 0;
  if (v9) {
    (*(void (**)(void *))(*v9 + 8))(v9);
  }
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (v13) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v8);
  }
  return 0;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1}::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C7738;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl **)a1[2];
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1}::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C7738;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl **)*((void *)this + 2);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1}::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>)::{lambda(void)#1},void>::call(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[1];
  if (v2 && (uint64_t v3 = *(void *)(v2 + 8)) != 0)
  {
    uint64_t v5 = a1 + 2;
    uint64_t v4 = a1[2];
    if (v4 && *(_DWORD *)(v4 - 12))
    {
      WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)v3, (uint64_t)v34);
      uint64_t v8 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(v1 + 2, v6, v7);
      uint64_t v10 = (const WebCore::RegistrableDomain *)v8;
      *(void *)long long buf = v8;
      *(void *)&buf[8] = v11;
      if (*v5) {
        uint64_t v12 = *v5 + 8 * *(unsigned int *)(*v5 - 4);
      }
      else {
        uint64_t v12 = 0;
      }
      if (v12 != v8)
      {
        do
        {
          WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v3, v10, (uint64_t)"grandfatherDataForDomains");
          *(void *)buf += 8;
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)buf, v13, v14);
          uint64_t v10 = *(const WebCore::RegistrableDomain **)buf;
        }
        while (*(void *)buf != v12);
      }
      WebKit::buildList<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(&v31, v1 + 2, v9);
      WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"UPDATE ObservedDomains SET grandfathered = 1 WHERE registrableDomain IN (", 74, (uint64_t *)&v31, 41, buf);
      WebCore::SQLiteDatabase::prepareStatementSlow();
      uint64_t v16 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v15);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      uint64_t v20 = v31;
      int8x16_t v31 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v15);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      if (v33 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v32) != 101)
      {
        uint64_t v21 = qword_1EB358460;
        if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
        {
          uint64_t v28 = *(void *)(v3 + 656);
          int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v3 + 16));
          uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v3 + 16));
          *(_DWORD *)long long buf = 134218755;
          *(void *)&uint8_t buf[4] = v3;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v28;
          __int16 v36 = 1024;
          int v37 = Error;
          __int16 v38 = 2081;
          uint64_t v39 = ErrorMsg;
          _os_log_error_impl(&dword_1985F2000, v21, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::grandfatherDataForDomains: failed to step statement", buf, 0x26u);
        }
      }
      if (v33 != -1) {
        (*(&off_1EE9C7600 + v33))((int)buf, (WebCore::SQLiteStatement *)v32);
      }
      a1 = WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v34);
      uint64_t v3 = *(void *)(v1[1] + 8);
    }
    double v22 = *(double *)(v3 + 648);
    WTF::WallTime::now((WTF::WallTime *)a1);
    *(double *)(*(void *)(v1[1] + 8) + 23objc_destroyWeak(this + 2) = *(double *)(*(void *)(v1[1] + 8) + 176) + v22 + v23;
    uint64_t v24 = v1[3];
    v1[3] = 0;
    (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    uint64_t v25 = v1[1];
    if (v25) {
      uint64_t v26 = *(WTF::RunLoop **)(v25 + 8);
    }
    else {
      uint64_t v26 = 0;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::ResourceLoadStatisticsStore::logTestingEvent(v26);
    uint64_t result = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    uint64_t v17 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
    long long v18 = *(uint64_t (**)(uint64_t))(*(void *)v17 + 8);
    return (WTF::StringImpl *)v18(v17);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::scheduleStatisticsProcessingRequestIfNecessary(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C7788;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::scheduleStatisticsProcessingRequestIfNecessary(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7788;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::scheduleStatisticsProcessingRequestIfNecessary(void)::$_0,void>::call(void *result)
{
  uint64_t v1 = result[2];
  if (v1)
  {
    if (*(void *)(v1 + 8))
    {
      uint64_t v2 = result[1];
      if (*(unsigned char *)(v2 + 272))
      {
        if (*(void *)(v2 + 264) == result[3])
        {
          uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
          *uint64_t v3 = &unk_1EE9C77B0;
          uint64_t v4 = v3;
          WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(v2, (uint64_t *)&v4);
          if (v4) {
            (*(void (**)(void *))(*v4 + 8))(v4);
          }
          return WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords((WebKit::ResourceLoadStatisticsStore *)v2);
        }
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCacheMaxAgeCap(void)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (atomic_uchar **)a1[1];
  *a1 = &unk_1EE9C77D8;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCacheMaxAgeCap(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar **)*((void *)this + 1);
  *(void *)this = &unk_1EE9C77D8;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCacheMaxAgeCap(void)::$_0,void>::call(uint64_t a1)
{
  return WebKit::ResourceLoadStatisticsStore::updateCacheMaxAgeCap(void)::$_0::operator()(*(void *)(a1 + 8));
}

uint64_t WebKit::ResourceLoadStatisticsStore::updateCacheMaxAgeCap(void)::$_0::operator()(uint64_t a1)
{
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v2 = &unk_1EE9C7800;
  uint64_t v5 = v2;
  WebKit::WebResourceLoadStatisticsStore::setCacheMaxAgeCap(*(void *)(a1 + 16), (uint64_t *)&v5);
  uint64_t result = (uint64_t)v5;
  if (v5)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*v5 + 8);
    return v4();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateClientSideCookiesAgeCap(void)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (atomic_uchar **)a1[1];
  *a1 = &unk_1EE9C7828;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateClientSideCookiesAgeCap(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar **)*((void *)this + 1);
  *(void *)this = &unk_1EE9C7828;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateClientSideCookiesAgeCap(void)::$_0,void>::call(uint64_t a1)
{
  return WebKit::ResourceLoadStatisticsStore::updateClientSideCookiesAgeCap(void)::$_0::operator()(a1 + 8);
}

uint64_t WebKit::ResourceLoadStatisticsStore::updateClientSideCookiesAgeCap(void)::$_0::operator()(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 32);
      uint64_t v4 = *(void *)(v2 + 24);
      uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v3 + 232), &v4);
      if (result)
      {
        return MEMORY[0x1F4170160]();
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains(WebKit::RegistrableDomainsToBlockCookiesFor &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C7850;
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[8];
  if (v4) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, a2);
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 6), a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), v5);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), v6);
  uint64_t v7 = (atomic_uchar **)a1[1];
  a1[1] = 0;
  if (v7) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v7);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains(WebKit::RegistrableDomainsToBlockCookiesFor &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9C7850;
  uint64_t v3 = *((void *)a1 + 9);
  *((void *)a1 + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)a1 + 8);
  if (v4) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, a2);
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 48, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, v5);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, v6);
  uint64_t v8 = (atomic_uchar **)*((void *)a1 + 1);
  *((void *)a1 + objc_destroyWeak(this + 1) = 0;
  if (v8) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v8);
  }

  return WTF::fastFree(a1, v7);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains(WebKit::RegistrableDomainsToBlockCookiesFor &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(atomic_uchar *volatile **)(a1 + 8);
  uint64_t v3 = a1 + 16;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v2);
  uint64_t v4 = *(void *)(a1 + 72);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v5 = &unk_1EE9C7878;
  v5[1] = v2;
  v5[2] = v4;
  uint64_t v8 = v5;
  WebKit::WebResourceLoadStatisticsStore::callUpdatePrevalentDomainsToBlockCookiesForHandler(v2, v3, &v8);
  uint64_t result = (uint64_t)v8;
  if (v8)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*v8 + 8);
    return v7();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains(WebKit::RegistrableDomainsToBlockCookiesFor &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7878;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uchar **)a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains(WebKit::RegistrableDomainsToBlockCookiesFor &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7878;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uchar **)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains(WebKit::RegistrableDomainsToBlockCookiesFor &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v2 = &unk_1EE9C78A0;
  v2[1] = v1;
  uint64_t v4 = v2;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = (uint64_t)v4;
  if (v4) {
    return (*(uint64_t (**)(void *))(*v4 + 8))(v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains(WebKit::RegistrableDomainsToBlockCookiesFor &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C78A0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains(WebKit::RegistrableDomainsToBlockCookiesFor &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C78A0;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains(WebKit::RegistrableDomainsToBlockCookiesFor &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::logTestingEvent(WTF::String &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C78C8;
  uint64_t v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (atomic_uchar **)a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::logTestingEvent(WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C78C8;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (atomic_uchar **)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::logTestingEvent(WTF::String &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebResourceLoadStatisticsStore::logTestingEvent(*(IPC::Encoder **)(*(void *)(a1 + 8) + 16), (const WTF::String *)(a1 + 16));
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeAllStorageAccess(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C78F0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uchar **)a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeAllStorageAccess(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C78F0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uchar **)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeAllStorageAccess(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)v2);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v4 = &unk_1EE9C7918;
  v4[1] = v2;
  uint64_t v4[2] = v3;
  uint64_t v5 = *(void *)(v2 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 32);
      uint64_t v10 = *(void *)(v6 + 24);
      uint64_t v8 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v7 + 232), &v10);
      if (v8) {
        WebCore::NetworkStorageSession::removeAllStorageAccess(v8);
      }
    }
  }
  (*(void (**)(void *))(*v4 + 16))(v4);
  return (*(uint64_t (**)(void *))(*v4 + 8))(v4);
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeAllStorageAccess(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7918;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uchar **)a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeAllStorageAccess(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7918;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uchar **)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeAllStorageAccess(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v2 = &unk_1EE9C7940;
  v2[1] = v1;
  uint64_t v4 = v2;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = (uint64_t)v4;
  if (v4) {
    return (*(uint64_t (**)(void *))(*v4 + 8))(v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeAllStorageAccess(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C7940;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeAllStorageAccess(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C7940;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeAllStorageAccess(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(JSC::MessageSource,JSC::MessageLevel,WTF::String const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C7990;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(JSC::MessageSource,JSC::MessageLevel,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C7990;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::RunLoop *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(JSC::MessageSource,JSC::MessageLevel,WTF::String const&)::$_0,void>::call(WTF::RunLoop *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    if (*(void *)(v1 + 8)) {
      return WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(*((void *)result + 4), *((unsigned char *)result + 16), *((unsigned char *)result + 17), (uint64_t)result + 24);
    }
  }
  return result;
}

WTF **WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v4 = *(_DWORD *)(v2 - 8);
  unsigned int v5 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v4;
  uint64_t v6 = (WTF **)(v2 + 8 * v5);
  if (WTF::equal(*v6, 0, v7)) {
    return 0;
  }
  int v9 = 1;
  do
  {
    if (*v6 != (WTF *)-1)
    {
      char v10 = WTF::equalIgnoringASCIICase(*v6, *a2, v8);
      uint64_t result = v6;
      if (v10) {
        break;
      }
    }
    unsigned int v5 = (v5 + v9) & v4;
    uint64_t v6 = (WTF **)(v2 + 8 * v5);
    int v12 = WTF::equal(*v6, 0, v8);
    uint64_t result = 0;
    ++v9;
  }
  while (!v12);
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unsigned int v5 = *(WTF **)a1;
  uint64_t result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::allocateTable(a2);
  *(void *)a1 = result;
  *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = a2;
  unint64_t v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v10 >> 31) ^ v10;
  *(unsigned char *)(a1 + 20) = 0;
  uint64_t v29 = v4;
  if (v4)
  {
    uint64_t v11 = 0;
    uint64_t v28 = v5;
    do
    {
      int v12 = (uint64_t *)((char *)v5 + 32 * v11);
      uint64_t v13 = (WTF::StringImpl *)*v12;
      if (*v12)
      {
        int v14 = *(_DWORD *)(a1 + 8);
        int v15 = *(_DWORD *)(a1 + 16);
        unsigned int v16 = *((_DWORD *)v13 + 4);
        if (v16 >= 0x100) {
          unsigned int v17 = v16 >> 8;
        }
        else {
          unsigned int v17 = WTF::StringImpl::hashSlowCase(v13);
        }
        unsigned int v18 = v14 - 1;
        uint64_t v19 = (v17 ^ v15) & (v14 - 1);
        uint64_t v20 = (uint64_t *)(*(void *)a1 + 32 * v19);
        uint64_t v21 = (WTF::StringImpl *)*v20;
        if (*v20)
        {
          unsigned int v22 = 0;
          do
          {
            unsigned int v23 = *((_DWORD *)v21 + 4);
            if (v23 >= 0x100) {
              unsigned int v24 = v23 >> 8;
            }
            else {
              unsigned int v24 = WTF::StringImpl::hashSlowCase(v21);
            }
            unsigned int v25 = (v19 + v14 - ((v24 ^ v15) & v18)) & v18;
            if (v22 > v25)
            {
              std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>((uint64_t)v12, v20);
              unsigned int v22 = v25;
            }
            uint64_t v19 = (v19 + 1) & v18;
            ++v22;
            uint64_t v20 = (uint64_t *)(*(void *)a1 + 32 * v19);
            uint64_t v21 = (WTF::StringImpl *)*v20;
          }
          while (*v20);
        }
        WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>::assignToEmpty<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>(v20, v12);
        unsigned int v5 = v28;
      }
      std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v12 + 2));
      uint64_t v26 = (WTF::StringImpl *)v12[1];
      v12[1] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, v7);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
      int8x16x2_t v27 = (WTF::StringImpl *)*v12;
      uint64_t *v12 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v7);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
      ++v11;
    }
    while (v11 != v29);
  }
  else if (!v5)
  {
    return result;
  }

  return WTF::fastFree(v5, v7);
}

uint64_t WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>::assignToEmpty<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>(uint64_t *a1, uint64_t *a2)
{
  WTF::String::operator=(a1, a2);
  WTF::String::operator=(a1 + 1, a2 + 1);

  return std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
}

uint64_t std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)a1;
  unsigned int v5 = (uint64_t *)(a1 + 8);
  uint64_t v6 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  *(void *)a1 = 0;
  LOBYTE(v15) = 0;
  char v16 = 0;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v7 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    int v15 = v7;
    char v16 = 1;
  }
  WTF::String::operator=((uint64_t *)a1, a2);
  unint64_t v8 = (WTF::StringImpl **)(a2 + 1);
  WTF::String::operator=(v5, a2 + 1);
  std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>(a1 + 16, (uint64_t)(a2 + 2));
  unint64_t v10 = (WTF::StringImpl *)*a2;
  *a2 = v4;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = *v8;
  *unint64_t v8 = v6;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>((uint64_t)(a2 + 2), (uint64_t)&v15);
  if (v16)
  {
    uint64_t v13 = v15;
    int v15 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  return 0;
}

unsigned char *WTF::StringTypeAdapter<WTF::StringView,void>::writeTo<char16_t>(unsigned char *result, char *__dst)
{
  uint64_t v2 = *(int8x16_t **)result;
  uint64_t v3 = *((unsigned int *)result + 2);
  if (result[12])
  {
    uint64_t v4 = &__dst[2 * v3];
    if (v3 >= 0x40)
    {
      unsigned int v5 = &__dst[2 * (v3 & 0xFFFFFFC0)];
      long long v6 = 0uLL;
      do
      {
        v14.val[0] = *v2;
        int8x16_t v7 = v2[1];
        v15.val[0] = v2[2];
        int8x16_t v8 = v2[3];
        v2 += 4;
        int8x16_t v9 = v8;
        v15.val[1] = 0uLL;
        v16.val[0] = v7;
        v14.val[1] = 0uLL;
        unint64_t v10 = __dst;
        vst2q_s8(v10, v14);
        v10 += 32;
        v16.val[1] = 0uLL;
        vst2q_s8(v10, v16);
        uint64_t v11 = __dst + 64;
        vst2q_s8(v11, v15);
        int v12 = __dst + 96;
        vst2q_s8(v12, *(int8x16x2_t *)(&v6 - 1));
        __dst += 128;
      }
      while (__dst != v5);
      __dst = v5;
    }
    while (__dst != v4)
    {
      __int16 v13 = v2->u8[0];
      uint64_t v2 = (int8x16_t *)((char *)v2 + 1);
      *(_WORD *)__dst = v13;
      __dst += 2;
    }
  }
  else if (v3)
  {
    if (v3 == 1) {
      *(_WORD *)__dst = v2->i16[0];
    }
    else {
      return memcpy(__dst, v2, 2 * v3);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    long long v6 = *(WebCore::PrivateClickMeasurement **)a1;
    uint64_t v7 = 312 * v3;
    do
    {
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(v6, a2);
      long long v6 = (WebCore::PrivateClickMeasurement *)(v8 + 312);
      v7 -= 312;
    }
    while (v7);
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PrivateClickMeasurement>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)a1 + 312 * v4;
  *(unsigned char *)uint64_t v6 = *(unsigned char *)v3;
  uint64_t v7 = *(void *)(v3 + 8);
  *(void *)(v3 + ++*(_DWORD *)(this + 8) = 0;
  *(void *)(v6 + ++*(_DWORD *)(this + 8) = v7;
  uint64_t v8 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  *(void *)(v6 + 16) = v8;
  long long v9 = *(_OWORD *)(v3 + 24);
  long long v10 = *(_OWORD *)(v3 + 33);
  *(unsigned char *)(v6 + 56) = 0;
  uint64_t v11 = v6 + 56;
  *(_OWORD *)(v11 - 23) = v10;
  *(_OWORD *)(v11 - 3objc_destroyWeak(this + 2) = v9;
  *(unsigned char *)(v11 + 12++*(_DWORD *)(this + 8) = 0;
  int v12 = (unsigned char *)(v11 + 128);
  if (*(unsigned char *)(v3 + 184))
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v11, v3 + 56);
    unsigned char *v12 = 1;
  }
  uint64_t v13 = v5 + 312 * v4;
  long long v14 = *(_OWORD *)(v3 + 192);
  long long v15 = *(_OWORD *)(v3 + 208);
  *(unsigned char *)(v13 + 224) = 0;
  uint64_t v16 = v13 + 224;
  *(_OWORD *)(v16 - 3objc_destroyWeak(this + 2) = v14;
  *(_OWORD *)(v16 - 16) = v15;
  *(unsigned char *)(v16 + ++*(_DWORD *)(this + 8) = 0;
  if (*(unsigned char *)(v3 + 232))
  {
    uint64_t v17 = *(void *)(v3 + 224);
    *(void *)(v3 + 224) = 0;
    *(void *)uint64_t v16 = v17;
    *(unsigned char *)(v16 + ++*(_DWORD *)(this + 8) = 1;
  }
  uint64_t v18 = v5 + 312 * v4;
  uint64_t v19 = *(void *)(v3 + 240);
  *(void *)(v3 + 2++*(_DWORD *)(this - 40) = 0;
  *(void *)(v18 + 2++*(_DWORD *)(this - 40) = v19;
  uint64_t v20 = *(void *)(v3 + 248);
  *(void *)(v3 + 24++*(_DWORD *)(this + 8) = 0;
  *(void *)(v18 + 24++*(_DWORD *)(this + 8) = v20;
  uint64_t v21 = *(void *)(v3 + 256);
  *(void *)(v3 + 256) = 0;
  *(void *)(v18 + 256) = v21;
  uint64_t v22 = *(void *)(v3 + 264);
  *(void *)(v3 + 264) = 0;
  *(void *)(v18 + 264) = v22;
  *(unsigned char *)(v18 + 27objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(v18 + 296) = 0;
  if (*(unsigned char *)(v3 + 296))
  {
    uint64_t v23 = *(void *)(v3 + 272);
    *(void *)(v3 + 27objc_destroyWeak(this + 2) = 0;
    *(void *)(v18 + 27objc_destroyWeak(this + 2) = v23;
    uint64_t v24 = v5 + 312 * v4;
    uint64_t v25 = *(void *)(v3 + 280);
    *(void *)(v3 + 280) = 0;
    *(void *)(v24 + 280) = v25;
    uint64_t v26 = *(void *)(v3 + 288);
    *(void *)(v3 + 28++*(_DWORD *)(this + 8) = 0;
    *(void *)(v24 + 28++*(_DWORD *)(this + 8) = v26;
    *(unsigned char *)(v18 + 296) = 1;
  }
  uint64_t v27 = *(void *)(v3 + 304);
  *(void *)(v3 + 304) = 0;
  *(void *)(v5 + 312 * v4 + 304) = v27;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 312 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xD20D21)
    {
      __break(0xC471u);
      JUMPOUT(0x198BF2DC8);
    }
    unint64_t v3 = *(WTF::StringImpl **)a1;
    unsigned int v4 = (WTF::StringImpl *)(*(void *)a1 + 312 * *(unsigned int *)(a1 + 12));
    unsigned int v5 = 312 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(312 * a2));
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = v5 / 0x138;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::PrivateClickMeasurement>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebCore::PrivateClickMeasurement>::move(WTF::StringImpl *a1, WTF::StringImpl *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      unint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = a3 + v6;
      *(unsigned char *)uint64_t v8 = *((unsigned char *)a1 + v6);
      uint64_t v9 = *(void *)((char *)a1 + v6 + 8);
      *((void *)v7 + objc_destroyWeak(this + 1) = 0;
      *(void *)(v8 + ++*(_DWORD *)(this + 8) = v9;
      uint64_t v10 = *(void *)((char *)a1 + v6 + 16);
      *((void *)v7 + objc_destroyWeak(this + 2) = 0;
      *(void *)(v8 + 16) = v10;
      long long v11 = *(_OWORD *)((char *)a1 + v6 + 24);
      *(_OWORD *)(v8 + 33) = *(_OWORD *)((char *)a1 + v6 + 33);
      *(_OWORD *)(v8 + 24) = v11;
      *(unsigned char *)(a3 + v6 + 56) = 0;
      *(unsigned char *)(v8 + 184) = 0;
      if (*((unsigned char *)a1 + v6 + 184))
      {
        std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(a3 + v6 + 56, (uint64_t)(v7 + 56));
        *(unsigned char *)(v8 + 184) = 1;
      }
      long long v12 = *((_OWORD *)v7 + 13);
      *(_OWORD *)(v8 + 19objc_destroyWeak(this + 2) = *((_OWORD *)v7 + 12);
      *(_OWORD *)(v8 + 20++*(_DWORD *)(this + 8) = v12;
      *(unsigned char *)(v8 + 224) = 0;
      *(unsigned char *)(v8 + 23objc_destroyWeak(this + 2) = 0;
      if (v7[232])
      {
        uint64_t v13 = *(void *)((char *)a1 + v6 + 224);
        *(void *)((char *)a1 + v6 + 224) = 0;
        *(void *)(v8 + 224) = v13;
        *(unsigned char *)(v8 + 23objc_destroyWeak(this + 2) = 1;
      }
      uint64_t v14 = a3 + v6;
      uint64_t v15 = *((void *)v7 + 30);
      *((void *)v7 + 30) = 0;
      *(void *)(v14 + 2++*(_DWORD *)(this - 40) = v15;
      uint64_t v16 = *((void *)v7 + 31);
      *((void *)v7 + 3objc_destroyWeak(this + 1) = 0;
      *(void *)(v14 + 24++*(_DWORD *)(this + 8) = v16;
      uint64_t v17 = *((void *)v7 + 32);
      *((void *)v7 + 3objc_destroyWeak(this + 2) = 0;
      *(void *)(v14 + 256) = v17;
      uint64_t v18 = *((void *)v7 + 33);
      *((void *)v7 + 33) = 0;
      *(void *)(v14 + 264) = v18;
      *(unsigned char *)(v14 + 27objc_destroyWeak(this + 2) = 0;
      *(unsigned char *)(v14 + 296) = 0;
      if (v7[296])
      {
        uint64_t v19 = (void *)((char *)a1 + v6);
        uint64_t v20 = *(void *)((char *)a1 + v6 + 272);
        v19[34] = 0;
        *(void *)(v14 + 27objc_destroyWeak(this + 2) = v20;
        uint64_t v21 = *(void *)((char *)a1 + v6 + 280);
        v19[35] = 0;
        *(void *)(v14 + 280) = v21;
        uint64_t v22 = *(void *)((char *)a1 + v6 + 288);
        v19[36] = 0;
        *(void *)(v14 + 28++*(_DWORD *)(this + 8) = v22;
        *(unsigned char *)(v14 + 296) = 1;
      }
      uint64_t v23 = *((void *)v7 + 38);
      *((void *)v7 + 3++*(_DWORD *)(this + 8) = 0;
      *(void *)(v14 + 304) = v23;
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WTF::StringImpl *)((char *)a1 + v6), a2);
      v6 += 312;
    }
    while (v7 + 312 != (char *)a2);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary(void)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C79B8;
  WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), v3);
  unsigned int v4 = (atomic_uchar **)a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary(void)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C79B8;
  WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, a2);
  WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, v3);
  unsigned int v5 = (atomic_uchar **)*((void *)a1 + 1);
  *((void *)a1 + objc_destroyWeak(this + 1) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v5);
  }

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 8) + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = result;
      uint64_t v4 = *(void *)(v2 + 160);
      unsigned int v5 = *(_DWORD *)(result + 44);
      if (v5)
      {
        uint64_t v6 = *(void *)(result + 32);
        uint64_t v7 = 312 * v5;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v6, 1);
          v6 += 312;
          v7 -= 312;
        }
        while (v7);
      }
      unsigned int v8 = *(_DWORD *)(v3 + 28);
      if (v8)
      {
        uint64_t v9 = *(void *)(v3 + 16);
        uint64_t v10 = 312 * v8;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v4 + 48))(v4, v9, 0);
          v9 += 312;
          v10 -= 312;
        }
        while (v10);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ITPThirdPartyData>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)(v4 + ++*(_DWORD *)(this + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = v5;
  uint64_t v6 = *(void *)(v3 + 8);
  *(void *)(v3 + ++*(_DWORD *)(this + 8) = 0;
  *(void *)(v4 + ++*(_DWORD *)(this + 8) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 16);
  *(_DWORD *)(v3 + 16) = 0;
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 20);
  *(_DWORD *)(v3 + 20) = 0;
  *(_DWORD *)(v4 + 20) = v6;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x198BF32C4);
    }
    unint64_t v3 = *(WTF::StringImpl **)a1;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)a1 + 24 * *(unsigned int *)(a1 + 12));
    int v5 = 24 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::ITPThirdPartyData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::ITPThirdPartyData>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = (uint64_t)result + 8;
    do
    {
      uint64_t v7 = v5 - 8;
      uint64_t v6 = *(void *)(v5 - 8);
      *(void *)(v5 - ++*(_DWORD *)(this + 8) = 0;
      *(void *)(a3 + ++*(_DWORD *)(this + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = v6;
      uint64_t v8 = *(void *)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)(a3 + ++*(_DWORD *)(this + 8) = v8;
      LODWORD(v++*(_DWORD *)(this + 8) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + ++*(_DWORD *)(this + 8) = 0;
      *(_DWORD *)(a3 + 16) = v8;
      LODWORD(v++*(_DWORD *)(this + 8) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 1objc_destroyWeak(this + 2) = 0;
      *(_DWORD *)(a3 + 20) = v8;
      WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      uint64_t result = *(WTF::StringImpl **)(v5 - 8);
      *(void *)(v5 - ++*(_DWORD *)(this + 8) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v5 += 24;
      a3 += 24;
    }
    while ((WTF::StringImpl *)(v7 + 24) != a2);
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,char>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a1[1];
  BOOL v5 = v4 != 0;
  unint64_t v6 = v4 - 1;
  if (!v5) {
    unint64_t v6 = 0;
  }
  uint64_t v10 = *a1;
  if (v6 >> 31)
  {
    uint64_t result = 124;
    __break(0xC471u);
  }
  else
  {
    int v11 = v6;
    uint64_t v9 = *a2;
    char v8 = *a3;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v10, &v9, &v8, a4);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  int v4 = *(_DWORD *)(result + 8);
  uint64_t v5 = *a2;
  if (*a2)
  {
    int v6 = *(_DWORD *)(v5 + 4);
    if (v6 < 0)
    {
LABEL_14:
      *a4 = 0;
      return result;
    }
  }
  else
  {
    int v6 = 0;
  }
  BOOL v7 = __OFADD__(v6, 1);
  int v8 = v6 + 1;
  char v9 = v7;
  if (v4 < 0) {
    goto LABEL_14;
  }
  if (v9) {
    goto LABEL_14;
  }
  BOOL v7 = __OFADD__(v4, v8);
  uint64_t v10 = (v4 + v8);
  if (v7) {
    goto LABEL_14;
  }
  BOOL v11 = !v5 || (*(unsigned char *)(v5 + 16) & 4) != 0;
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v10, v11, *(int8x16_t **)result, *(void *)(result + 8), v5, *a3, a4);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, void *a7@<X8>)
{
  int v11 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        uint64_t v13 = v14;
        if (v14)
        {
          *(_DWORD *)uint64_t v14 = 2;
          *(_DWORD *)(v14 + 4) = v11;
          *(void *)(v14 + ++*(_DWORD *)(this + 8) = v14 + 20;
          *(_DWORD *)(v14 + 16) = 4;
          uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((char *)(v14 + 20), a3->i8, a4, a5, a6);
        }
        goto LABEL_6;
      }
LABEL_9:
      uint64_t v13 = 0;
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v13 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_6;
  }
  if (!result) {
    goto LABEL_10;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_9;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  uint64_t v13 = v14;
  if (v14)
  {
    *(_DWORD *)uint64_t v14 = 2;
    *(_DWORD *)(v14 + 4) = v11;
    *(void *)(v14 + ++*(_DWORD *)(this + 8) = v14 + 20;
    *(_DWORD *)(v14 + 16) = 0;
    uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((char *)(v14 + 20), a3, a4, a5, a6);
  }
LABEL_6:
  *a7 = v13;
  return result;
}

uint64_t *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(char *__dst, char *a2, unsigned int a3, uint64_t a4, char a5)
{
  if (a3)
  {
    if (a3 == 1) {
      *__dst = *a2;
    }
    else {
      memcpy(__dst, a2, a3);
    }
  }
  char v9 = &__dst[a3];
  uint64_t v12 = a4;
  uint64_t result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v12, v9);
  uint64_t v11 = v12;
  if (v12) {
    uint64_t v11 = *(unsigned int *)(v12 + 4);
  }
  v9[v11] = a5;
  return result;
}

uint64_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, char a5)
{
  int v6 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    BOOL v7 = &a1[2 * (a3 & 0xFFFFFFC0)];
    long long v8 = 0uLL;
    do
    {
      v19.val[0] = *a2;
      int8x16_t v9 = a2[1];
      v20.val[0] = a2[2];
      int8x16_t v10 = a2[3];
      a2 += 4;
      int8x16_t v11 = v10;
      v20.val[1] = 0uLL;
      v21.val[0] = v9;
      v19.val[1] = 0uLL;
      uint64_t v12 = a1;
      vst2q_s8(v12, v19);
      v12 += 32;
      v21.val[1] = 0uLL;
      vst2q_s8(v12, v21);
      uint64_t v13 = a1 + 64;
      vst2q_s8(v13, v20);
      uint64_t v14 = a1 + 96;
      vst2q_s8(v14, *(int8x16x2_t *)(&v8 - 1));
      a1 += 128;
    }
    while (a1 != v7);
    a1 = v7;
  }
  while (a1 != v6)
  {
    __int16 v15 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v15;
    a1 += 2;
  }
  uint64_t v18 = a4;
  uint64_t result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v18, v6);
  uint64_t v17 = v18;
  if (v18) {
    uint64_t v17 = *(unsigned int *)(v18 + 4);
  }
  *(_WORD *)&v6[2 * v17] = a5;
  return result;
}

WTF *std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::destroy(WTF *result)
{
  if (result)
  {
    uint64_t v2 = result;
    std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::destroy(*(void *)result);
    std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::destroy(*((void *)v2 + 1));
    return (WTF *)WTF::fastFree(v2, v3);
  }
  return result;
}

uint64_t std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  int v6 = (uint64_t *)(a1 + 1);
  uint64_t v5 = (uint64_t)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        BOOL v7 = (uint64_t *)v5;
        unsigned int v8 = *(_DWORD *)(v5 + 28);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        return 0;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    BOOL v7 = (uint64_t *)(a1 + 1);
LABEL_9:
    uint64_t v9 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v9 + 2++*(_DWORD *)(this + 8) = *a3;
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + ++*(_DWORD *)(this + 8) = 0;
    *(void *)(v9 + 16) = v7;
    *int v6 = v9;
    int8x16_t v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      int8x16_t v11 = (uint64_t *)*v6;
    }
    else
    {
      int8x16_t v11 = (uint64_t *)v9;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return 1;
  }
}

char *WTF::StringBuilder::append<WTF::ASCIILiteral,unsigned int>(WTF::StringBuilder *a1, int8x16_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a3) {
    unint64_t v4 = a3 - 1;
  }
  else {
    unint64_t v4 = 0;
  }
  if (v4 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198BF3A20);
  }
  unsigned int v5 = a4;
  int v7 = v4;
  unsigned int v8 = a4;
  do
  {
    ++v7;
    BOOL v9 = v8 > 9;
    v8 /= 0xAu;
  }
  while (v9);
  uint64_t v10 = *((void *)a1 + 1);
  if ((v10 || (uint64_t v10 = *(void *)a1) != 0) && (*(unsigned char *)(v10 + 16) & 4) == 0)
  {
    uint64_t result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      uint64_t v12 = &result[2 * v4];
      if ((v4 & 0xFFFFFFC0) != 0)
      {
        uint64_t v13 = &result[2 * (v4 & 0xFFFFFFC0)];
        long long v14 = 0uLL;
        do
        {
          v28.val[0] = *a2;
          int8x16_t v15 = a2[1];
          v29.val[0] = a2[2];
          int8x16_t v16 = a2[3];
          a2 += 4;
          int8x16_t v17 = v16;
          v29.val[1] = 0uLL;
          v30.val[0] = v15;
          v28.val[1] = 0uLL;
          uint64_t v18 = result;
          vst2q_s8(v18, v28);
          v18 += 32;
          v30.val[1] = 0uLL;
          vst2q_s8(v18, v30);
          int8x16x2_t v19 = result + 64;
          vst2q_s8(v19, v29);
          int8x16x2_t v20 = result + 96;
          vst2q_s8(v20, *(int8x16x2_t *)(&v14 - 1));
          result += 128;
        }
        while (result != v13);
        uint64_t result = v13;
      }
      while (result != v12)
      {
        __int16 v21 = a2->u8[0];
        a2 = (int8x16_t *)((char *)a2 + 1);
        *(_WORD *)uint64_t result = v21;
        result += 2;
      }
      uint64_t v22 = 0;
      do
      {
        v26[v22-- + 12] = (v5 % 0xA) | 0x30;
        BOOL v9 = v5 > 9;
        v5 /= 0xAu;
      }
      while (v9);
      if (v22 + 14 <= 13)
      {
        do
        {
          *(_WORD *)uint64_t v12 = *((unsigned __int8 *)&v27 + v22);
          v12 += 2;
        }
        while (!__CFADD__(v22++, 1));
      }
    }
  }
  else
  {
    uint64_t result = (char *)MEMORY[0x19972DE60]();
    if (result)
    {
      uint64_t v24 = result;
      if (v4)
      {
        if (v4 == 1) {
          *uint64_t result = a2->i8[0];
        }
        else {
          uint64_t result = (char *)memcpy(result, a2, v4);
        }
      }
      uint64_t v25 = 0;
      do
      {
        v26[v25-- + 12] = (v5 % 0xA) | 0x30;
        BOOL v9 = v5 > 9;
        v5 /= 0xAu;
      }
      while (v9);
      if (v25 + 14 <= 13) {
        return (char *)memcpy(&v24[v4], &v26[v25 + 13], -v25);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1, int *a2)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
    int v3 = 0;
    int v4 = 0;
LABEL_3:
    unsigned int v5 = 8;
    goto LABEL_4;
  }
  int v3 = *(_DWORD *)(v2 - 4);
  int v4 = *(_DWORD *)(v2 - 12);
  if (!v3) {
    goto LABEL_3;
  }
  unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
LABEL_4:
  uint64_t v6 = WTF::fastMalloc((WTF *)(40 * v5 + 16));
  if (v5)
  {
    uint64_t v8 = v5;
    BOOL v9 = (_OWORD *)(v6 + 24);
    do
    {
      *((_DWORD *)v9 - objc_destroyWeak(this + 2) = 0;
      *BOOL v9 = 0uLL;
      v9[1] = 0uLL;
      BOOL v9 = (_OWORD *)((char *)v9 + 40);
      --v8;
    }
    while (v8);
  }
  *a1 = v6 + 16;
  *(_DWORD *)(v6 + 1objc_destroyWeak(this + 2) = v5;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = (int *)(v2 + 40 * v10);
      int v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          int v18 = 0;
          unsigned int v19 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
          unsigned int v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
          do
          {
            unsigned int v21 = v20 & v17;
            uint64_t v22 = (int *)(v16 + 40 * (v20 & v17));
            unsigned int v20 = ++v18 + (v20 & v17);
          }
          while (*v22);
          uint64_t v23 = v16 + 40 * v21;
          uint64_t v26 = *(WTF::StringImpl **)(v23 + 8);
          uint64_t v25 = (void *)(v23 + 8);
          uint64_t v24 = v26;
          *uint64_t v25 = 0;
          if (v26)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, v7);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
          *uint64_t v22 = *v12;
          uint64_t v27 = v2 + 40 * v10;
          uint64_t v28 = *(void *)(v27 + 8);
          *(void *)(v27 + ++*(_DWORD *)(this + 8) = 0;
          *uint64_t v25 = v28;
          uint64_t v29 = v16 + 40 * v21;
          long long v30 = *(_OWORD *)(v27 + 16);
          *(_DWORD *)(v29 + 3objc_destroyWeak(this + 2) = *(_DWORD *)(v27 + 32);
          *(_OWORD *)(v29 + 16) = v30;
          int8x16_t v31 = *(WTF::StringImpl **)(v27 + 8);
          *(void *)(v27 + ++*(_DWORD *)(this + 8) = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2) {
              WTF::StringImpl::destroy(v31, v7);
            }
            else {
              *(_DWORD *)v31 -= 2;
            }
          }
          if (v12 == a2) {
            uint64_t v11 = v16 + 40 * v21;
          }
        }
        else
        {
          uint64_t v14 = v2 + 40 * v10;
          int8x16_t v15 = *(WTF::StringImpl **)(v14 + 8);
          *(void *)(v14 + ++*(_DWORD *)(this + 8) = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v7);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
        }
      }
      ++v10;
    }
    while (v10 != v3);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v2) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v11;
}

_DWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::begin(_DWORD *result)
{
  if (!result) {
    return 0;
  }
  uint64_t v2 = *(result - 1);
  int v3 = &result[10 * v2];
  if (!*(result - 3)) {
    return &result[10 * v2];
  }
  if (v2)
  {
    uint64_t v4 = 40 * v2;
    while ((*result + 1) <= 1)
    {
      result += 10;
      v4 -= 40;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

int *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 - 8);
  unsigned int v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  unsigned int v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
  unsigned int v5 = v2 & (v4 ^ HIWORD(v4));
  uint64_t v6 = (int *)(a1 + 40 * v5);
  int v7 = *v6;
  if (*v6 != a2)
  {
    int v8 = 1;
    while (v7)
    {
      unsigned int v5 = (v5 + v8) & v2;
      uint64_t v6 = (int *)(a1 + 40 * v5);
      int v7 = *v6;
      ++v8;
      if (*v6 == a2) {
        return v6;
      }
    }
    return (int *)(a1 + 40 * *(unsigned int *)(a1 - 4));
  }
  return v6;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C79E0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unsigned int v5 = (atomic_uchar **)a1[1];
  a1[1] = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C79E0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unsigned int v5 = (atomic_uchar **)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)v2);
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  unsigned int v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  unsigned int v5 = &unk_1EE9C7A08;
  void *v4 = &unk_1EE9C7A08;
  v4[1] = v2;
  uint64_t v4[2] = v3;
  uint64_t v6 = *(void *)(v2 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 32);
      uint64_t v10 = *(void *)(v7 + 24);
      if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v8 + 232), &v10))
      {
        uint64_t result = WebCore::NetworkStorageSession::hasCookies();
        if (!v4) {
          return result;
        }
        return (*(uint64_t (**)(void *))(*v4 + 8))(v4);
      }
      unsigned int v5 = (void *)*v4;
    }
  }
  (*((void (**)(void *, void))v5 + 2))(v4, 0);
  return (*(uint64_t (**)(void *))(*v4 + 8))(v4);
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7A08;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uchar **)a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7A08;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (atomic_uchar **)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9C7A30;
  *(void *)(v4 + ++*(_DWORD *)(this + 8) = v3;
  *(unsigned char *)(v4 + 16) = a2;
  uint64_t v6 = v4;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C7A30;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C7A30;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C7A58;
  uint64_t v3 = a1[8];
  a1[8] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unsigned int v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (atomic_uchar **)a1[1];
  a1[1] = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v6);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C7A58;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + ++*(_DWORD *)(this + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unsigned int v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (atomic_uchar **)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v6);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::call(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)v2);
    uint64_t v5 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = 0;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    uint64_t v7 = (void (**)(void *, uint64_t))&unk_1EE9C7A80;
    *uint64_t v6 = &unk_1EE9C7A80;
    v6[1] = v2;
    void v6[2] = v5;
    uint64_t v8 = *(void *)(v2 + 16);
    if (v8 && (uint64_t v9 = *(void *)(v8 + 8)) != 0)
    {
      uint64_t v10 = *(void *)(v9 + 32);
      v14[0] = *(void *)(v9 + 24);
      if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v10 + 232), v14))
      {
        v14[0] = v3;
        v14[1] = v4;
        char v15 = 1;
        uint64_t hasStorageAccess = WebCore::NetworkStorageSession::hasStorageAccess();
      }
      else
      {
        uint64_t hasStorageAccess = 0;
      }
      uint64_t v7 = (void (**)(void *, uint64_t))*v6;
    }
    else
    {
      uint64_t hasStorageAccess = 0;
    }
    v7[2](v6, hasStorageAccess);
    return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
  }
  else
  {
    uint64_t v13 = std::__throw_bad_optional_access[abi:sn180100]();
    return WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(v13);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7A80;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uchar **)a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7A80;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uchar **)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9C7AA8;
  *(void *)(v4 + ++*(_DWORD *)(this + 8) = v3;
  *(unsigned char *)(v4 + 16) = a2;
  uint64_t v6 = v4;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C7AA8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C7AA8;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebKit::StorageAccessStatus)> &&)::$_0,void,WebCore::StorageAccessWasGranted>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C7AD0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebKit::StorageAccessStatus)> &&)::$_0,void,WebCore::StorageAccessWasGranted>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C7AD0;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebKit::StorageAccessStatus)> &&)::$_0,void,WebCore::StorageAccessWasGranted>::call(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, 2 * (a2 == 1));
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C7B20;
  WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1::~$_1((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C7B20;
  WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1::~$_1((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1,void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  LOBYTE(v40[0]) = 0;
  char v43 = 0;
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 16);
  if (v3
    && (uint64_t v4 = *(void *)(v3 + 8)) != 0
    && (uint64_t v5 = *(void *)(v4 + 32),
        long long v30 = *(WTF::StringImpl **)(v4 + 24),
        WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 232), &v30)))
  {
    WebCore::NetworkStorageSession::storageAccessQuirkForDomainPair();
    std::__optional_storage_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::OrganizationStorageAccessPromptQuirk,false>>((WTF *)v40, (uint64_t)&v30);
    if ((_BYTE)v33)
    {
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31 + 8, v6);
      if ((void)v31) {
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v31, v7);
      }
      uint64_t v8 = v30;
      long long v30 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
    }
    char canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction = WebCore::NetworkStorageSession::canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction();
  }
  else
  {
    char canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction = 0;
  }
  uint64_t v10 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  long long v30 = v10;
  if (v43)
  {
    uint64_t v11 = v41;
    uint64_t v41 = 0;
    long long v44 = 0u;
    long long v12 = *(_OWORD *)v40;
    *(_OWORD *)uint64_t v40 = 0u;
    long long v31 = v12;
    v45[0] = 0;
    uint64_t v32 = v11;
    v45[1] = 0;
    *(void *)&long long v12 = v42;
    uint64_t v42 = 0;
    uint64_t v33 = v12;
    char v34 = 1;
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, a2);
    if (*((void *)&v44 + 1)) {
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(*((uint64_t *)&v44 + 1), v13);
    }
    uint64_t v14 = (WTF::StringImpl *)v44;
    *(void *)&long long v44 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  else
  {
    LOBYTE(v3objc_destroyWeak(this + 1) = 0;
    char v34 = 0;
  }
  WebCore::RegistrableDomain::isolatedCopy(&v35);
  WebCore::RegistrableDomain::isolatedCopy(&v36);
  long long v15 = *(_OWORD *)(a1 + 64);
  long long v37 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)__int16 v38 = v15;
  uint64_t v16 = *(void *)(a1 + 88);
  *(void *)&v38[16] = *(void *)(a1 + 80);
  v38[24] = canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction;
  *(void *)(a1 + 8++*(_DWORD *)(this + 8) = 0;
  uint64_t v39 = v16;
  uint64_t v17 = WTF::fastMalloc((WTF *)0x80);
  *(void *)uint64_t v17 = &unk_1EE9C7B48;
  int v18 = v30;
  long long v30 = 0;
  *(void *)(v17 + ++*(_DWORD *)(this + 8) = v18;
  *(unsigned char *)(v17 + 16) = 0;
  *(unsigned char *)(v17 + 4++*(_DWORD *)(this + 8) = 0;
  if (v34)
  {
    *(void *)(v17 + 16) = v31;
    uint64_t v19 = *((void *)&v31 + 1);
    long long v31 = 0uLL;
    *(void *)(v17 + 24) = v19;
    *(void *)(v17 + 3objc_destroyWeak(this + 2) = v32;
    uint64_t v20 = v33;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    *(void *)(v17 + ++*(_DWORD *)(this - 40) = v20;
    *(unsigned char *)(v17 + 4++*(_DWORD *)(this + 8) = 1;
  }
  *(void *)(v17 + 56) = v35;
  unsigned int v21 = v36;
  __int16 v35 = 0;
  __int16 v36 = 0;
  *(void *)(v17 + 64) = v21;
  long long v22 = v37;
  long long v23 = *(_OWORD *)v38;
  *(_OWORD *)(v17 + 97) = *(_OWORD *)&v38[9];
  *(_OWORD *)(v17 + 8++*(_DWORD *)(this + 8) = v23;
  *(_OWORD *)(v17 + 7objc_destroyWeak(this + 2) = v22;
  uint64_t v24 = v39;
  uint64_t v39 = 0;
  *(void *)(v17 + 120) = v24;
  *(void *)&long long v44 = v17;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t v26 = v44;
  *(void *)&long long v44 = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t result = (WTF::StringImpl *)WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1::operator()(void)::{lambda(void)#1}::~((uint64_t)&v30, v25);
  if (v43)
  {
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v28);
    if (v40[1]) {
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable((uint64_t)v40[1], v29);
    }
    uint64_t result = v40[0];
    v40[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v29);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1::operator()(void)::{lambda(void)#1}::~(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 112);
  *(void *)(a1 + 11objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 48);
  *(void *)(a1 + 4++*(_DWORD *)(this + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  if (*(unsigned char *)(a1 + 40))
  {
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6) {
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v6, a2);
    }
    uint64_t v7 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, a2);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  uint64_t v8 = *(unsigned int **)a1;
  *(void *)a1 = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C7B48;
  WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1::operator()(void)::{lambda(void)#1}::~((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C7B48;
  WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1::operator()(void)::{lambda(void)#1}::~((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 && *(void *)(v4 + 8))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      uint64_t v5 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(a1 + 24), a2, a3);
      uint64_t v8 = v5;
      v26[0] = v5;
      v26[1] = v6;
      uint64_t v9 = *(void *)(a1 + 24);
      uint64_t v10 = v9 ? v9 + 24 * *(unsigned int *)(v9 - 4) : 0;
      if (v10 != v5)
      {
        do
        {
          uint64_t v14 = *(unsigned int *)(v8 + 20);
          if (v14)
          {
            long long v15 = *(WTF ***)(v8 + 8);
            uint64_t v16 = 8 * v14;
            do
            {
              if (!WTF::equal(*(WTF **)v8, *(const WTF::StringImpl **)(a1 + 64), v7)
                || (WTF::equal(*v15, *(const WTF::StringImpl **)(a1 + 56), v17) & 1) == 0)
              {
                int v18 = *v15;
                if (*v15) {
                  *(_DWORD *)v18 += 2;
                }
                uint64_t v25 = v18;
                uint64_t v19 = *(WTF::StringImpl **)v8;
                if (*(void *)v8) {
                  *(_DWORD *)v19 += 2;
                }
                uint64_t v24 = v19;
                uint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x10);
                *uint64_t v20 = &unk_1EE9C7B70;
                long long v23 = v20;
                WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(a1 + 72, &v25, &v24, (uint64_t *)&v23);
                if (v23) {
                  (*(void (**)(void *))(*v23 + 8))(v23);
                }
                unsigned int v21 = v24;
                uint64_t v24 = 0;
                if (v21)
                {
                  if (*(_DWORD *)v21 == 2) {
                    WTF::StringImpl::destroy(v21, v6);
                  }
                  else {
                    *(_DWORD *)v21 -= 2;
                  }
                }
                long long v22 = v25;
                uint64_t v25 = 0;
                if (v22)
                {
                  if (*(_DWORD *)v22 == 2) {
                    WTF::StringImpl::destroy(v22, v6);
                  }
                  else {
                    *(_DWORD *)v22 -= 2;
                  }
                }
              }
              ++v15;
              v16 -= 8;
            }
            while (v16);
            uint64_t v8 = v26[0];
          }
          v26[0] = v8 + 24;
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v26, (uint64_t)v6, v7);
          uint64_t v8 = v26[0];
        }
        while (v26[0] != v10);
      }
    }
    return WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(a1 + 72, (WTF **)(a1 + 56), (const WTF::StringImpl **)(a1 + 64), (uint64_t *)(a1 + 120));
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 120);
    *(void *)(a1 + 120) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v11 + 16))(v11, 0);
    long long v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);
    return (WTF::StringImpl *)v12(v11);
  }
}

WTF::StringImpl *WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(uint64_t a1, WTF **a2, const WTF::StringImpl **a3, uint64_t *a4)
{
  v23[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(a1 + 24))
  {
    BOOL v14 = 0;
LABEL_21:
    long long v18 = *(_OWORD *)a1;
    char v19 = 1;
    return WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(v8, a2, a3, &v18, *(void *)(a1 + 16), v14, *(unsigned char *)(a1 + 25), a4);
  }
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(*(void *)(a1 + 32), (const WebCore::RegistrableDomain *)a2, (uint64_t)"grantStorageAccess");
  if (v9)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v10 = (WTF::StringImpl *)v22[0];
    uint64_t v21 = v22[0];
    uint64_t v11 = *a3;
    if (*a3) {
      *(_DWORD *)v11 += 2;
    }
    v23[0] = v11;
    uint64_t v20 = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v20, v23, (uint64_t)v22);
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(v8, &v21, (uint64_t *)&v20);
    if (v20) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v20, v12);
    }
    uint64_t v13 = v23[0];
    v23[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v12);
        if (!v10)
        {
LABEL_20:
          BOOL v14 = *(unsigned char *)(a1 + 24) != 0;
          goto LABEL_21;
        }
LABEL_17:
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v12);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
        goto LABEL_20;
      }
      *(_DWORD *)v13 -= 2;
    }
    if (!v10) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  uint64_t v15 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v15 + 16))(v15, 0);
  uint64_t v16 = *(uint64_t (**)(uint64_t))(*(void *)v15 + 8);

  return (WTF::StringImpl *)v16(v15);
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C7B98;
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uchar **)a1[7];
  a1[7] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }
  uint64_t v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C7B98;
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uchar **)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(WTF::StringImpl **)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(a1 + 40);
  *(_DWORD *)BOOL v14 = *(_DWORD *)(a1 + 41);
  *(_DWORD *)&v14[3] = *(_DWORD *)(a1 + 44);
  uint64_t v5 = *(void *)(a1 + 56);
  int v6 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)v5);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v8 = &unk_1EE9C7BC0;
  v8[1] = v7;
  uint64_t v8[2] = v5;
  uint64_t v9 = *(void *)(v5 + 16);
  if (v9
    && (uint64_t v10 = *(void *)(v9 + 8)) != 0
    && (uint64_t v11 = *(void *)(v10 + 32),
        v15[0] = *(void *)(v10 + 24),
        WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v11 + 232), v15)))
  {
    if (v6)
    {
      LOBYTE(v15[0]) = 0;
      char v16 = 0;
    }
    else
    {
      v15[0] = v2;
      v15[1] = v3;
      char v16 = v4;
      *(_DWORD *)uint64_t v17 = *(_DWORD *)v14;
      *(_DWORD *)&void v17[3] = *(_DWORD *)&v14[3];
    }
    WebCore::NetworkStorageSession::grantStorageAccess();
    if (v4) {
      uint64_t v12 = WebKit::WebResourceLoadStatisticsStore::storageAccessWasGrantedValueForFrame(v5, v2, v3, *(WTF::StringImpl **)(a1 + 8));
    }
    else {
      uint64_t v12 = 1;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  (*(void (**)(void *, uint64_t))(*v8 + 16))(v8, v12);
  return (*(uint64_t (**)(void *))(*v8 + 8))(v8);
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(void)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7BC0;
  uint64_t v2 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(void)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7BC0;
  uint64_t v3 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(void)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::call(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9C7BE8;
  *(unsigned char *)(v4 + ++*(_DWORD *)(this + 8) = a2;
  *(void *)(v4 + 16) = v3;
  uint64_t v6 = v4;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(void)::{lambda(WTF::CompletionHandler)#1}::operator()(WTF::CompletionHandler)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7BE8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(void)::{lambda(WTF::CompletionHandler)#1}::operator()(WTF::CompletionHandler)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7BE8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(void)::{lambda(WTF::CompletionHandler)#1}::operator()(WTF::CompletionHandler)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7C38;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7C38;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>::call(uint64_t a1)
{
}

uint64_t WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 29))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(WTF **)result;
    uint64_t v5 = *(unsigned int *)(result + 12);
    uint64_t v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + ++*(_DWORD *)(this + 8) = v2;
    *(void *)uint64_t v3 = v6;
    if (v5)
    {
      uint64_t v8 = (void *)v6;
      uint64_t v9 = 8 * v5;
      uint64_t v10 = v4;
      do
      {
        uint64_t v11 = *(void *)v10;
        *(void *)uint64_t v10 = 0;
        *uint64_t v8 = v11;
        uint64_t v12 = *(void *)v10;
        *(void *)uint64_t v10 = 0;
        if (v12) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
        ++v8;
        uint64_t v10 = (WTF *)((char *)v10 + 8);
        v9 -= 8;
      }
      while (v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + ++*(_DWORD *)(this + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::ResourceLoadStatisticsStore::DomainData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 40 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::ResourceLoadStatisticsStore::DomainData>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    unsigned int v3 = (WTF::StringImpl **)result;
    do
    {
      uint64_t result = v3[1];
      v3[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 5;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v12 = v9;
  uint64_t v13 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v13;
  *(_DWORD *)(v12 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v8;
  uint64_t v14 = 0;
  if (v7)
  {
    uint64_t v15 = v7;
    uint64_t v16 = v6;
    do
    {
      if (*(void *)v16 != -1)
      {
        if (WTF::equal(*(WTF **)v16, 0, v11))
        {
          uint64_t v17 = *(WTF::StringImpl **)v16;
          *(void *)uint64_t v16 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v10);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
        }
        else
        {
          uint64_t v18 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::lookupForReinsert(a1, (WTF::ASCIICaseInsensitiveHash **)v16);
          char v19 = *(WTF::StringImpl **)v18;
          *(void *)uint64_t v18 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, v10);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
          uint64_t v20 = *(WTF::ASCIICaseInsensitiveHash **)v16;
          *(void *)uint64_t v16 = 0;
          *(void *)uint64_t v18 = v20;
          *(void *)(v18 + ++*(_DWORD *)(this + 8) = *(void *)(v16 + 8);
          uint64_t v21 = *(WTF::StringImpl **)v16;
          *(void *)uint64_t v16 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2) {
              WTF::StringImpl::destroy(v21, v10);
            }
            else {
              *(_DWORD *)v21 -= 2;
            }
          }
          if (v16 == a3) {
            uint64_t v14 = v18;
          }
        }
      }
      v16 += 16;
      --v15;
    }
    while (v15);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::clear(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  int v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C7C60;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::clear(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C7C60;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::clear(WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(void *a1)
{
  int v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C7C88;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::clear(WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C7C88;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C7CB0;
  uint64_t v3 = a1[10];
  a1[10] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[9];
  if (v4) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, a2);
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 7), a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 5), v5);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), v6);
  int v8 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v8) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v8);
  }
  uint64_t v9 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v7);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  int v2 = (WTF *)WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(a1, a2);

  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v4 = a1[1];
  uint64_t v3 = (atomic_uchar *volatile *)a1[2];
  a1[1] = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3);
  uint64_t v5 = a1[10];
  a1[10] = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v6 = &unk_1EE9C7CD8;
  v6[1] = v4;
  void v6[2] = v3;
  _OWORD v6[3] = v5;
  uint64_t v9 = v6;
  WebKit::WebResourceLoadStatisticsStore::callUpdatePrevalentDomainsToBlockCookiesForHandler(v3, v2, &v9);
  uint64_t result = (uint64_t)v9;
  if (v9)
  {
    int v8 = *(uint64_t (**)(void))(*v9 + 8);
    return v8();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C7CD8;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }
  uint64_t v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7CD8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v3 = &unk_1EE9C7D00;
  v3[1] = v1;
  uint64_t v3[2] = v2;
  uint64_t v5 = v3;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = (uint64_t)v5;
  if (v5) {
    return (*(uint64_t (**)(void *))(*v5 + 8))(v5);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C7D00;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7D00;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      if (*(unsigned char *)(v5 + 716))
      {
        uint64_t v6 = qword_1EB357E70;
        if (os_log_type_enabled((os_log_t)qword_1EB357E70, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: Done applying cross-site tracking restrictions.", buf, 2u);
          uint64_t v7 = *(void *)(a1 + 8);
          if (v7) {
            uint64_t v5 = *(void *)(v7 + 8);
          }
          else {
            uint64_t v5 = 0;
          }
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(v5, 13, 4, (uint64_t)&v9);
        uint64_t result = v9;
        uint64_t v9 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

__n128 WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ResourceLoadStatisticsStore::DomainData>(unsigned int *a1, unint64_t a2)
{
  uint64_t v3 = (__n128 *)WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = (__n128 *)(*(void *)a1 + 40 * a1[3]);
  v4->n128_u32[0] = v3->n128_u32[0];
  unint64_t v5 = v3->n128_u64[1];
  v3->n128_u64[1] = 0;
  v4->n128_u64[1] = v5;
  unint64_t v6 = v3[2].n128_u64[0];
  __n128 result = v3[1];
  v4[1] = result;
  v4[2].n128_u64[0] = v6;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = *(WTF **)result;
      unsigned int v4 = result[3];
      int v5 = 40 * a2;
      __n128 result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        unint64_t v7 = result;
        unint64_t v8 = (WTF *)((char *)v3 + 40 * v4);
        unint64_t v9 = v3;
        do
        {
          *unint64_t v7 = *(_DWORD *)v9;
          uint64_t v10 = *((void *)v9 + 1);
          *((void *)v9 + objc_destroyWeak(this + 1) = 0;
          *((void *)v7 + objc_destroyWeak(this + 1) = v10;
          long long v11 = *((_OWORD *)v9 + 1);
          *((void *)v7 + 4) = *((void *)v9 + 4);
          *((_OWORD *)v7 + objc_destroyWeak(this + 1) = v11;
          __n128 result = (unsigned int *)*((void *)v9 + 1);
          *((void *)v9 + objc_destroyWeak(this + 1) = 0;
          if (result)
          {
            if (*result == 2) {
              __n128 result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            }
            else {
              *result -= 2;
            }
          }
          unint64_t v9 = (WTF *)((char *)v9 + 40);
          v7 += 10;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_DWORD *WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(uint64_t a1, unint64_t a2)
{
  __n128 result = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(void *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

unint64_t WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 4 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, int8x16_t **a2, uint64_t *a3, char *a4)
{
  uint64_t v7 = *a3;
  uint64_t v8 = *((void *)a1 + 1);
  if ((v8 || (uint64_t v8 = *(void *)a1) != 0) && (*(unsigned char *)(v8 + 16) & 4) == 0 || v7 && (*(unsigned char *)(v7 + 16) & 4) == 0)
  {
    __n128 result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      unint64_t v10 = *a2;
      uint64_t v11 = *a3;
      __int16 v12 = *a4;
      uint64_t v13 = &result[2 * a2[1]];
      uint64_t v14 = (unint64_t)a2[1] & 0xFFFFFFC0;
      if (v14)
      {
        uint64_t v15 = &result[2 * v14];
        long long v16 = 0uLL;
        do
        {
          v31.val[0] = *v10;
          int8x16_t v17 = v10[1];
          v32.val[0] = v10[2];
          int8x16_t v18 = v10[3];
          v10 += 4;
          int8x16_t v19 = v18;
          v32.val[1] = 0uLL;
          v33.val[0] = v17;
          v31.val[1] = 0uLL;
          uint64_t v20 = result;
          vst2q_s8(v20, v31);
          v20 += 32;
          v33.val[1] = 0uLL;
          vst2q_s8(v20, v33);
          uint64_t v21 = result + 64;
          vst2q_s8(v21, v32);
          long long v22 = result + 96;
          vst2q_s8(v22, *(int8x16x2_t *)(&v16 - 1));
          result += 128;
        }
        while (result != v15);
        __n128 result = v15;
      }
      while (result != v13)
      {
        __int16 v23 = v10->u8[0];
        unint64_t v10 = (int8x16_t *)((char *)v10 + 1);
        *(_WORD *)__n128 result = v23;
        result += 2;
      }
      uint64_t v29 = v11;
      __n128 result = (char *)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v29, v13);
      uint64_t v24 = v29;
      if (v29) {
        uint64_t v24 = *(unsigned int *)(v29 + 4);
      }
      *(_WORD *)&v13[2 * v24] = v12;
    }
  }
  else
  {
    __n128 result = (char *)MEMORY[0x19972DE60]();
    if (result)
    {
      uint64_t v25 = (char *)*a2;
      uint64_t v26 = a2[1];
      uint64_t v27 = *a3;
      char v28 = *a4;
      return (char *)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(result, v25, v26, v27, v28);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setIsRunningTest(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7D78;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setIsRunningTest(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7D78;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setIsRunningTest(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 32);
  if (v1) {
    *(unsigned char *)(v1 + 225) = *(unsigned char *)(a1 + 16);
  }
  uint64_t v2 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v4, (uint64_t *)(a1 + 24));
  WTF::RunLoop::main(v2);
  WTF::RunLoop::dispatch();
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setShouldClassifyResourcesBeforeDataRecordsRemoval(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7DA0;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setShouldClassifyResourcesBeforeDataRecordsRemoval(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7DA0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setShouldClassifyResourcesBeforeDataRecordsRemoval(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 32);
  if (v1) {
    *(unsigned char *)(v1 + 224) = *(unsigned char *)(a1 + 16);
  }
  uint64_t v2 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v4, (uint64_t *)(a1 + 24));
  WTF::RunLoop::main(v2);
  WTF::RunLoop::dispatch();
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebResourceLoadStatisticsStore::*&)(void),WebKit::WebResourceLoadStatisticsStore*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::WebResourceLoadStatisticsStore(WebKit::NetworkSession &,WTF::String const&,WebKit::ShouldIncludeLocalhost,WebCore::ResourceLoadStatistics::IsEphemeral)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C7DF0;
  uint64_t v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::WebResourceLoadStatisticsStore(WebKit::NetworkSession &,WTF::String const&,WebKit::ShouldIncludeLocalhost,WebCore::ResourceLoadStatistics::IsEphemeral)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C7DF0;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::didDestroyNetworkSession(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C7E18;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::didDestroyNetworkSession(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C7E18;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::didDestroyNetworkSession(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::didDestroyNetworkSession(WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C7E40;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::didDestroyNetworkSession(WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C7E40;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::destroyResourceLoadStatisticsStore(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7E68;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::destroyResourceLoadStatisticsStore(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7E68;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::destroyResourceLoadStatisticsStore(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  std::unique_ptr<WebKit::ResourceLoadStatisticsStore>::reset[abi:sn180100]((WebKit::ResourceLoadStatisticsStore **)(*(void *)(a1 + 8) + 32), 0);
  uint64_t v2 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v4, (uint64_t *)(a1 + 24));
  WTF::RunLoop::main(v2);
  WTF::RunLoop::dispatch();
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7E90;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7E90;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 32);
  if (v2)
  {
    if (*(unsigned char *)(v2 + 719))
    {
      long long v9 = *(_OWORD *)(a1 + 1);
      *(_OWORD *)(a1 + objc_destroyWeak(this + 1) = 0u;
      uint64_t v7 = WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v7 = &unk_1EE9C7EB8;
      *(_OWORD *)(v7 + ++*(_DWORD *)(this + 8) = v9;
      *(_OWORD *)unint64_t v10 = 0u;
      uint64_t v11 = v7;
      WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(v2, &v11);
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      uint64_t result = WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::~((uint64_t)v10);
      *(unsigned char *)(*(void *)(v1 + 32) + 719) = 0;
    }
    else
    {
      *(void *)unint64_t v10 = *a1;
      long long v8 = *(_OWORD *)(a1 + 1);
      *(_OWORD *)(a1 + objc_destroyWeak(this + 1) = 0u;
      uint64_t v3 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v3 = &unk_1EE9C7EE0;
      *(void *)(v3 + ++*(_DWORD *)(this + 8) = v1;
      *(_OWORD *)(v3 + 16) = v8;
      *(_OWORD *)&v10[8] = 0u;
      uint64_t v11 = v3;
      WTF::RunLoop::main((WTF::RunLoop *)v3);
      WTF::RunLoop::dispatch();
      uint64_t v4 = v11;
      uint64_t v11 = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      return WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)v10);
    }
  }
  else
  {
    uint64_t v6 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v10, a1 + 2);
    WTF::RunLoop::main(v6);
    WTF::RunLoop::dispatch();
    uint64_t result = *(void *)v10;
    *(void *)unint64_t v10 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::~(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(atomic_uchar ***)a1;
  *(void *)a1 = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7EB8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uchar **)a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7EB8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uchar **)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v3, (uint64_t *)(a1 + 16));
  WTF::RunLoop::main(v1);
  WTF::RunLoop::dispatch();
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7EE0;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7EE0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::call(uint64_t a1)
{
  return WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#2}::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#2}::operator()(uint64_t *a1)
{
  uint64_t v2 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::WebResourceLoadStatisticsStore::logTestingEvent(*(IPC::Encoder **)(v2 + 16), (const WTF::String *)&v7);
  uint64_t v4 = v7;
  uint64_t v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setResourceLoadStatisticsDebugMode(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7F08;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setResourceLoadStatisticsDebugMode(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7F08;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setResourceLoadStatisticsDebugMode(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(*(void *)(a1 + 8) + 32);
  if (v2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 16);
    if (v2[717] != v3)
    {
      v2[717] = v3;
      v2[716] = v3;
      uint64_t v4 = qword_1EB357E70;
      BOOL v5 = os_log_type_enabled((os_log_t)qword_1EB357E70, OS_LOG_TYPE_INFO);
      if (v3)
      {
        if (v5)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: Turned ITP Debug Mode on.", buf, 2u);
        }
      }
      else if (v5)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: Turned ITP Debug Mode off.", buf, 2u);
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage((uint64_t)v2, 13, 4, (uint64_t)buf);
      uint64_t v7 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v6);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
      WebKit::ResourceLoadStatisticsStore::ensurePrevalentResourcesForDebugMode((uint64_t *)buf, v2);
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v8);
      if (v3)
      {
        long long v9 = (void *)WTF::fastMalloc((WTF *)0x10);
        *long long v9 = &unk_1EE9C7760;
        __int16 v12 = v9;
        WebKit::ResourceLoadStatisticsStore::updateCookieBlocking((uint64_t)v2, (uint64_t *)&v12);
        if (v12) {
          (*(void (**)(void *))(*v12 + 8))(v12);
        }
      }
    }
  }
  unint64_t v10 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(buf, (uint64_t *)(a1 + 24));
  WTF::RunLoop::main(v10);
  WTF::RunLoop::dispatch();
  uint64_t result = *(void *)buf;
  *(void *)long long buf = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPrevalentResourceForDebugMode(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C7F30;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPrevalentResourceForDebugMode(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C7F30;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPrevalentResourceForDebugMode(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 32);
  if (v2) {
    WTF::String::operator=((uint64_t *)(v2 + 240), (WTF::StringImpl **)(a1 + 16));
  }
  uint64_t v3 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v5, (uint64_t *)(a1 + 24));
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleStatisticsAndDataRecordsProcessing(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7F58;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleStatisticsAndDataRecordsProcessing(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7F58;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleStatisticsAndDataRecordsProcessing(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(WebKit::ResourceLoadStatisticsStore **)(*(void *)(a1 + 8) + 32);
  if (v2) {
    WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords(v2);
  }
  uint64_t v3 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v5, (uint64_t *)(a1 + 16));
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::statisticsDatabaseHasAllTables(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7F80;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::statisticsDatabaseHasAllTables(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7F80;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::statisticsDatabaseHasAllTables(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(WebKit::ResourceLoadStatisticsStore **)(*(void *)(a1 + 8) + 32);
  if (v2)
  {
    WebKit::ResourceLoadStatisticsStore::checkForMissingTablesInSchema((WebKit::ResourceLoadStatisticsStore *)v12, v2);
    int v3 = v13;
    char v4 = v13 ^ 1;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    uint64_t v6 = WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v6 = &unk_1EE9C7FA8;
    *(unsigned char *)(v6 + ++*(_DWORD *)(this + 8) = v4;
    *(void *)(v6 + 16) = v5;
    uint64_t v11 = v6;
    WTF::RunLoop::main((WTF::RunLoop *)v6);
    WTF::RunLoop::dispatch();
    uint64_t result = v11;
    if (v11)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
      if (!v3) {
        return result;
      }
    }
    else if (!v3)
    {
      return result;
    }
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v7);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    unint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);
    return v10(v9);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::statisticsDatabaseHasAllTables(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7FA8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::statisticsDatabaseHasAllTables(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7FA8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::statisticsDatabaseHasAllTables(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C7FD0;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  char v4 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C7FD0;
  uint64_t v3 = *((void *)a1 + 5);
  *((void *)a1 + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  uint64_t v5 = (atomic_uchar **)*((void *)a1 + 2);
  *((void *)a1 + objc_destroyWeak(this + 2) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v5);
  }

  return WTF::fastFree(a1, v4);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()((uint64_t *)(a1 + 8));
}

void *WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(WebKit::DatabaseUtilities **)(*a1 + 32);
  if (v3)
  {
    WebKit::ResourceLoadStatisticsStore::mergeStatistics(v3, (uint64_t)(a1 + 2));
    char v4 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v11, a1 + 4);
    WTF::RunLoop::main(v4);
    WTF::RunLoop::dispatch();
    uint64_t v5 = (uint64_t)v11;
    uint64_t v11 = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *(void *)(v2 + 32);
    if (*(unsigned char *)(v6 + 272)) {
      *(unsigned char *)(v6 + 27objc_destroyWeak(this + 2) = 0;
    }
    uint64_t v7 = (atomic_uchar *volatile *)a1[1];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v7);
    long long v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    *long long v8 = &unk_1EE9C7FF8;
    v8[1] = v2;
    uint64_t v8[2] = v7;
    uint64_t v11 = v8;
    WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(v6, (uint64_t *)&v11);
    if (v11) {
      (*(void (**)(void *))(*v11 + 8))(v11);
    }
    return WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords(*(WebKit::ResourceLoadStatisticsStore **)(v2 + 32));
  }
  else
  {
    unint64_t v10 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v11, a1 + 4);
    WTF::RunLoop::main(v10);
    WTF::RunLoop::dispatch();
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C7FF8;
  uint64_t v2 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C7FF8;
  uint64_t v3 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(*(void *)(a1 + 8), *(atomic_uchar *volatile **)(a1 + 16));
}

uint64_t WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(uint64_t a1, atomic_uchar *volatile *a2)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a2);
  char v4 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
  *(void *)char v4 = &unk_1EE9C8020;
  *((void *)v4 + objc_destroyWeak(this + 1) = a1;
  *((void *)v4 + objc_destroyWeak(this + 2) = a2;
  uint64_t v6 = v4;
  WTF::RunLoop::main(v4);
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(WTF::RunLoop *))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8020;
  uint64_t v2 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8020;
  uint64_t v3 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()(*(void *)(a1 + 8));
}

WTF::StringImpl *WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()(uint64_t a1)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::WebResourceLoadStatisticsStore::logTestingEvent(*(IPC::Encoder **)(a1 + 16), (const WTF::String *)&v4);
  uint64_t result = v4;
  char v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8048;
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8048;
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 32);
  if (v2)
  {
    uint64_t v3 = a1 + 16;
    long long v29 = *(_OWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v30 = *(void *)(a1 + 48);
    int v5 = *(unsigned __int8 *)(a1 + 64);
    uint64_t v6 = *(void *)(a1 + 72);
    *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
    uint64_t v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v7 = &unk_1EE9C8098;
    *((void *)v7 + objc_destroyWeak(this + 1) = v6;
    WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v2, (const WebCore::RegistrableDomain *)(a1 + 16), (uint64_t)"hasStorageAccess");
    if (!v8)
    {
LABEL_6:
      unint64_t v10 = *(uint64_t (**)(WTF::StringImpl *))(*(void *)v7 + 8);
      return (WTF::StringImpl *)v10(v7);
    }
    uint64_t v9 = (WTF::RunLoop *)WebKit::ResourceLoadStatisticsStore::cookieAccess(v2, v3, (const WebCore::RegistrableDomain *)(a1 + 24), v5 != 0);
    if (v9 == 1)
    {
      WTF::RunLoop::main(v9);
      uint64_t v14 = *(atomic_uchar *volatile **)(v2 + 104);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v14);
      WebCore::RegistrableDomain::isolatedCopy(&v32);
      int8x16x2_t v33 = v7;
      uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x20);
      *uint64_t v15 = &unk_1EE9C79E0;
      v15[1] = v14;
      long long v16 = v32;
      int8x16x2_t v32 = 0;
      void v15[2] = v16;
      int8x16_t v17 = v33;
      int8x16x2_t v33 = 0;
      uint64_t v15[3] = v17;
      long long v37 = v15;
      WTF::RunLoop::dispatch();
      int8x16_t v19 = v37;
      long long v37 = 0;
      if (v19) {
        (*(void (**)(void *))(*v19 + 8))(v19);
      }
      uint64_t v20 = v33;
      int8x16x2_t v33 = 0;
      if (v20) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v20 + 8))(v20);
      }
    }
    else
    {
      if (!v9)
      {
        (*(void (**)(WTF::StringImpl *, void))(*(void *)v7 + 16))(v7, 0);
        goto LABEL_6;
      }
      WTF::RunLoop::main(v9);
      uint64_t v21 = *(atomic_uchar *volatile **)(v2 + 104);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v21);
      WebCore::RegistrableDomain::isolatedCopy(&v32);
      WebCore::RegistrableDomain::isolatedCopy(&v33);
      long long v34 = v29;
      LOBYTE(v35) = v30;
      *((void *)&v35 + objc_destroyWeak(this + 1) = v4;
      __int16 v36 = v7;
      uint64_t v22 = WTF::fastMalloc((WTF *)0x48);
      *(void *)uint64_t v22 = &unk_1EE9C7A58;
      *(void *)(v22 + ++*(_DWORD *)(this + 8) = v21;
      __int16 v23 = v32;
      int8x16x2_t v32 = 0;
      *(void *)(v22 + 16) = v23;
      *(void *)(v22 + 24) = v33;
      long long v24 = v35;
      *(_OWORD *)(v22 + 3objc_destroyWeak(this + 2) = v34;
      *(_OWORD *)(v22 + 4++*(_DWORD *)(this + 8) = v24;
      uint64_t v25 = v36;
      int8x16x2_t v33 = 0;
      __int16 v36 = 0;
      *(void *)(v22 + 64) = v25;
      long long v37 = (void *)v22;
      WTF::RunLoop::dispatch();
      uint64_t v26 = v37;
      long long v37 = 0;
      if (v26) {
        (*(void (**)(void *))(*v26 + 8))(v26);
      }
      uint64_t v27 = v36;
      __int16 v36 = 0;
      if (v27) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v27 + 8))(v27);
      }
      char v28 = v33;
      int8x16x2_t v33 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2) {
          WTF::StringImpl::destroy(v28, v18);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
      }
    }
    uint64_t result = v32;
    int8x16x2_t v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 72);
    *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
    unsigned __int8 v13 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
    *(void *)unsigned __int8 v13 = &unk_1EE9C8070;
    *((void *)v13 + objc_destroyWeak(this + 1) = v12;
    int8x16x2_t v31 = v13;
    WTF::RunLoop::main(v13);
    WTF::RunLoop::dispatch();
    uint64_t result = v31;
    if (v31) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)v31 + 8))(v31);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C8070;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C8070;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C8098;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C8098;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9C80C0;
  *(void *)(v4 + ++*(_DWORD *)(this + 8) = v3;
  *(unsigned char *)(v4 + 16) = a2;
  uint64_t v6 = v4;
  WTF::RunLoop::main((WTF::RunLoop *)v4);
  WTF::RunLoop::dispatch();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C80C0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C80C0;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::RequestStorageAccessConfirm,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C80E8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::RequestStorageAccessConfirm,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C80E8;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::RequestStorageAccessConfirm,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8110;
  WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::~$_0((uint64_t)(a1 + 8), a2);
  unsigned __int16 v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C8110;
  WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::~$_0((uint64_t)a1 + 64, a2);
  unsigned __int16 v4 = (WTF::StringImpl *)*((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)a1 + 2);
  *((void *)a1 + objc_destroyWeak(this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(*(void *)(a1 + 8) + 32))
  {
    long long v89 = *(_OWORD *)(a1 + 80);
    long long v92 = *(_OWORD *)(a1 + 64);
    uint64_t v93 = *(void *)(a1 + 64);
    *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 8++*(_DWORD *)(this + 8) = 0;
    long long v12 = *(_OWORD *)(a1 + 112);
    long long v97 = *(_OWORD *)(a1 + 96);
    long long v98 = v12;
    char v99 = *(unsigned char *)(a1 + 128);
    LOBYTE(v100) = 0;
    char v104 = 0;
    int v13 = *(unsigned __int8 *)(a1 + 168);
    if (*(unsigned char *)(a1 + 168))
    {
      uint64_t v14 = *(void *)(a1 + 136);
      uint64_t v1 = *(void *)(a1 + 144);
      *(void *)(a1 + 136) = 0;
      *(void *)(a1 + 144) = 0;
      uint64_t v100 = v14;
      uint64_t v101 = v1;
      uint64_t v4 = *(void *)(a1 + 152);
      uint64_t v102 = v4;
      unsigned int v2 = *(_DWORD *)(a1 + 160);
      unsigned int v3 = *(_DWORD *)(a1 + 164);
      *(void *)(a1 + 15objc_destroyWeak(this + 2) = 0;
      *(void *)(a1 + 160) = 0;
      unint64_t v103 = __PAIR64__(v3, v2);
      char v104 = 1;
    }
    uint64_t v25 = *(void *)(a1 + 176);
    *(void *)(a1 + 176) = 0;
    uint64_t v26 = WTF::fastMalloc((WTF *)0x80);
    *(void *)uint64_t v26 = &unk_1EE9C8138;
    *(_OWORD *)(v26 + ++*(_DWORD *)(this + 8) = v92;
    uint64_t v94 = 0;
    uint64_t v95 = 0;
    *(_OWORD *)(v26 + 24) = v89;
    uint64_t v96 = 0;
    char v27 = v99;
    long long v28 = v98;
    *(_OWORD *)(v26 + ++*(_DWORD *)(this - 40) = v97;
    *(unsigned char *)(v26 + 7objc_destroyWeak(this + 2) = v27;
    *(_OWORD *)(v26 + 56) = v28;
    *(unsigned char *)(v26 + 80) = 0;
    *(unsigned char *)(v26 + 11objc_destroyWeak(this + 2) = 0;
    if (v13)
    {
      *(void *)(v26 + 80) = v100;
      *(void *)(v26 + 8++*(_DWORD *)(this + 8) = v1;
      uint64_t v100 = 0;
      uint64_t v101 = 0;
      *(void *)(v26 + 96) = v4;
      uint64_t v102 = 0;
      unint64_t v103 = 0;
      *(_DWORD *)(v26 + 104) = v2;
      *(_DWORD *)(v26 + 10++*(_DWORD *)(this + 8) = v3;
      *(unsigned char *)(v26 + 11objc_destroyWeak(this + 2) = 1;
    }
    uint64_t v105 = 0;
    *(void *)(v26 + 120) = v25;
    *(void *)long long buf = v26;
    WTF::RunLoop::main((WTF::RunLoop *)v26);
    WTF::RunLoop::dispatch();
    uint64_t v30 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
    return WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::~$_0((uint64_t)&v93, v29);
  }
  uint64_t v91 = *(void *)(*(void *)(a1 + 8) + 32);
  long long v85 = *(_OWORD *)(a1 + 32);
  uint64_t v86 = *(void *)(a1 + 48);
  int v84 = *(unsigned __int8 *)(a1 + 56);
  int v8 = *(unsigned __int8 *)(a1 + 57);
  long long v87 = *(_OWORD *)(a1 + 80);
  long long v88 = *(_OWORD *)(a1 + 64);
  uint64_t v93 = *(void *)(a1 + 64);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8++*(_DWORD *)(this + 8) = 0;
  long long v9 = *(_OWORD *)(a1 + 112);
  long long v97 = *(_OWORD *)(a1 + 96);
  long long v98 = v9;
  char v99 = *(unsigned char *)(a1 + 128);
  LOBYTE(v100) = 0;
  char v104 = 0;
  int v10 = *(unsigned __int8 *)(a1 + 168);
  if (*(unsigned char *)(a1 + 168))
  {
    uint64_t v11 = *(void *)(a1 + 136);
    uint64_t v5 = *(void *)(a1 + 144);
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    uint64_t v100 = v11;
    uint64_t v101 = v5;
    uint64_t v1 = *(void *)(a1 + 152);
    uint64_t v102 = v1;
    unsigned int v2 = *(_DWORD *)(a1 + 160);
    unsigned int v6 = *(_DWORD *)(a1 + 164);
    *(void *)(a1 + 15objc_destroyWeak(this + 2) = 0;
    *(void *)(a1 + 160) = 0;
    unint64_t v103 = __PAIR64__(v6, v2);
    char v104 = 1;
  }
  uint64_t v90 = (const WebCore::RegistrableDomain *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  uint64_t v16 = WTF::fastMalloc((WTF *)0x80);
  uint64_t v17 = v16;
  *(void *)uint64_t v16 = &unk_1EE9C8188;
  *(_OWORD *)(v16 + ++*(_DWORD *)(this + 8) = v88;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  *(_OWORD *)(v16 + 24) = v87;
  uint64_t v96 = 0;
  char v18 = v99;
  long long v19 = v98;
  *(_OWORD *)(v16 + ++*(_DWORD *)(this - 40) = v97;
  *(unsigned char *)(v16 + 7objc_destroyWeak(this + 2) = v18;
  *(_OWORD *)(v16 + 56) = v19;
  *(unsigned char *)(v16 + 80) = 0;
  *(unsigned char *)(v16 + 11objc_destroyWeak(this + 2) = 0;
  if (v10)
  {
    *(void *)(v16 + 80) = v100;
    *(void *)(v16 + 8++*(_DWORD *)(this + 8) = v5;
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    *(void *)(v16 + 96) = v1;
    uint64_t v102 = 0;
    unint64_t v103 = 0;
    *(_DWORD *)(v16 + 104) = v2;
    *(_DWORD *)(v16 + 10++*(_DWORD *)(this + 8) = v6;
    *(unsigned char *)(v16 + 11objc_destroyWeak(this + 2) = 1;
  }
  uint64_t v105 = 0;
  *(void *)(v16 + 120) = v15;
  uint64_t v20 = (WebKit::DatabaseUtilities *)v91;
  uint64_t v21 = (WTF **)v90;
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v91, v90, (uint64_t)"requestStorageAccess");
  if (!v22) {
    goto LABEL_12;
  }
  __int16 v23 = (const WebCore::RegistrableDomain *)(a1 + 24);
  int v24 = WebKit::ResourceLoadStatisticsStore::cookieAccess(v91, (uint64_t)v90, v23, v8 != 0);
  if (v24 == 1)
  {
    if (*(unsigned char *)(v91 + 716))
    {
      int8x16x2_t v48 = qword_1EB357E70;
      if (os_log_type_enabled((os_log_t)qword_1EB357E70, OS_LOG_TYPE_INFO))
      {
        WTF::String::utf8();
        if (v107[0]) {
          uint64_t v49 = v107[0] + 16;
        }
        else {
          uint64_t v49 = 0;
        }
        *(_DWORD *)long long buf = 136380675;
        *(void *)&uint8_t buf[4] = v49;
        _os_log_impl(&dword_1985F2000, v48, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: No need to grant storage access to %{private}s since its cookies are not blocked in third-party contexts. Note that the underlying cookie policy may still block this third-party from setting cookies.", buf, 0xCu);
        int8x16x2_t v51 = (WTF *)v107[0];
        v107[0] = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 1) {
            WTF::fastFree(v51, v50);
          }
          else {
            --*(_DWORD *)v51;
          }
        }
        uint64_t v21 = (WTF **)v90;
      }
      uint64_t v66 = *v21;
      if (*v21) {
        *(_DWORD *)v66 += 2;
      }
      v107[0] = (uint64_t)v66;
      WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[ITP] No need to grant storage access to '", 43, v107, (uint64_t)"' since its cookies are not blocked in third-party contexts. Note that the underlying cookie policy may still block this third-party from setting cookies.", 155, buf);
      WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(v91, 13, 4, (uint64_t)buf);
      unsigned int v68 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v68)
      {
        if (*(_DWORD *)v68 == 2) {
          WTF::StringImpl::destroy(v68, v67);
        }
        else {
          *(_DWORD *)v68 -= 2;
        }
      }
      uint64_t v69 = (WTF::StringImpl *)v107[0];
      v107[0] = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2) {
          WTF::StringImpl::destroy(v69, v67);
        }
        else {
          *(_DWORD *)v69 -= 2;
        }
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, 2);
    goto LABEL_44;
  }
  if (!v24)
  {
    if (*(unsigned char *)(v91 + 716))
    {
      long long v44 = qword_1EB357E70;
      if (os_log_type_enabled((os_log_t)qword_1EB357E70, OS_LOG_TYPE_INFO))
      {
        WTF::String::utf8();
        if (v107[0]) {
          uint64_t v45 = v107[0] + 16;
        }
        else {
          uint64_t v45 = 0;
        }
        *(_DWORD *)long long buf = 136380675;
        *(void *)&uint8_t buf[4] = v45;
        _os_log_impl(&dword_1985F2000, v44, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: Cannot grant storage access to %{private}s since its cookies are blocked in third-party contexts and it has not received user interaction as first-party.", buf, 0xCu);
        int8x16x2_t v47 = (WTF *)v107[0];
        v107[0] = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 1) {
            WTF::fastFree(v47, v46);
          }
          else {
            --*(_DWORD *)v47;
          }
        }
        uint64_t v21 = (WTF **)v90;
      }
      uint64_t v62 = *v21;
      if (*v21) {
        *(_DWORD *)v62 += 2;
      }
      v107[0] = (uint64_t)v62;
      WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[ITP] Cannot grant storage access to '", 39, v107, (uint64_t)"' since its cookies are blocked in third-party contexts and it has not received user interaction as first-party.", 113, buf);
      WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(v91, 13, 2, (uint64_t)buf);
      long long v64 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2) {
          WTF::StringImpl::destroy(v64, v63);
        }
        else {
          *(_DWORD *)v64 -= 2;
        }
      }
      long long v65 = (WTF::StringImpl *)v107[0];
      v107[0] = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2) {
          WTF::StringImpl::destroy(v65, v63);
        }
        else {
          *(_DWORD *)v65 -= 2;
        }
      }
    }
LABEL_12:
    (*(void (**)(uint64_t, void))(*(void *)v17 + 16))(v17, 0);
LABEL_44:
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    return WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::~$_0((uint64_t)&v93, v29);
  }
  uint64_t v31 = WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v91, v23, (uint64_t)"hasUserGrantedStorageAccessThroughPrompt");
  if (!v32)
  {
    int v37 = *(unsigned __int8 *)(v91 + 716);
LABEL_42:
    if (v37)
    {
      int8x16x2_t v52 = qword_1EB357E70;
      if (os_log_type_enabled((os_log_t)qword_1EB357E70, OS_LOG_TYPE_INFO))
      {
        WTF::String::utf8();
        if (v107[0]) {
          uint64_t v53 = v107[0] + 16;
        }
        else {
          uint64_t v53 = 0;
        }
        WTF::String::utf8();
        if (v109[0]) {
          uint64_t v54 = v109[0] + 16;
        }
        else {
          uint64_t v54 = 0;
        }
        *(_DWORD *)long long buf = 136380931;
        *(void *)&uint8_t buf[4] = v53;
        *(_WORD *)&unsigned char buf[12] = 2081;
        *(void *)&buf[14] = v54;
        _os_log_impl(&dword_1985F2000, v52, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: About to ask the user whether they want to grant storage access to %{private}s under %{private}s or not.", buf, 0x16u);
        long long v56 = (WTF *)v109[0];
        v109[0] = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 1) {
            WTF::fastFree(v56, v55);
          }
          else {
            --*(_DWORD *)v56;
          }
        }
        char v70 = (WTF *)v107[0];
        v107[0] = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 1) {
            WTF::fastFree(v70, v55);
          }
          else {
            --*(_DWORD *)v70;
          }
        }
      }
      int v71 = *(WTF::StringImpl **)v90;
      if (*(void *)v90) {
        *(_DWORD *)v71 += 2;
      }
      v107[0] = (uint64_t)v71;
      long long v72 = *(WTF::StringImpl **)v23;
      if (*(void *)v23) {
        *(_DWORD *)v72 += 2;
      }
      v109[0] = (uint64_t)v72;
      WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[ITP] About to ask the user whether they want to grant storage access to '", 75, v107, (uint64_t)"' under '", 10, v109, (uint64_t)"' or not.", 10, buf);
      WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(v91, 13, 4, (uint64_t)buf);
      long long v74 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2) {
          WTF::StringImpl::destroy(v74, v73);
        }
        else {
          *(_DWORD *)v74 -= 2;
        }
      }
      long long v75 = (WTF::StringImpl *)v109[0];
      v109[0] = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2) {
          WTF::StringImpl::destroy(v75, v73);
        }
        else {
          *(_DWORD *)v75 -= 2;
        }
      }
      unint64_t v76 = (WTF::StringImpl *)v107[0];
      v107[0] = 0;
      if (v76)
      {
        if (*(_DWORD *)v76 == 2) {
          WTF::StringImpl::destroy(v76, v73);
        }
        else {
          *(_DWORD *)v76 -= 2;
        }
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, 1);
    goto LABEL_44;
  }
  int8x16x2_t v33 = (uint64_t (**)(int, WebCore::SQLiteStatement *))v31;
  long long v34 = (WebCore::SQLiteDatabase *)(v91 + 16);
  WebCore::SQLiteDatabase::prepareStatement();
  unsigned int v35 = v114;
  if (v114)
  {
    BOOL v36 = 0;
  }
  else
  {
    if (WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)buf)) {
      goto LABEL_30;
    }
    if (v114) {
      goto LABEL_76;
    }
    if (WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)buf)) {
      goto LABEL_30;
    }
    if (v114) {
      goto LABEL_76;
    }
    if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)buf) != 100)
    {
LABEL_30:
      BOOL v36 = 0;
    }
    else
    {
      if (v114) {
        goto LABEL_76;
      }
      BOOL v36 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)buf) != 0;
    }
    unsigned int v35 = v114;
  }
  int8x16x2_t v33 = &off_1EE9C7600;
  if (v35 != -1) {
    (*(&off_1EE9C7600 + v35))((int)v107, (WebCore::SQLiteStatement *)buf);
  }
  int v37 = *(unsigned __int8 *)(v91 + 716);
  if (!v36) {
    goto LABEL_42;
  }
  if (*(unsigned char *)(v91 + 716)) {
    goto LABEL_77;
  }
  while (1)
  {
    WebKit::DatabaseUtilities::beginTransactionIfNecessary(v20, (uint64_t)v109);
    WebCore::SQLiteDatabase::prepareStatement();
    if (v108 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v107)) {
      break;
    }
    if (!v108)
    {
      if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v107) == 101)
      {
        *(_OWORD *)long long buf = v85;
        uint8_t buf[16] = 1;
        __int16 v38 = (void *)WTF::fastMalloc((WTF *)0x10);
        *__int16 v38 = &unk_1EE9C7AD0;
        v38[1] = v17;
        uint64_t v106 = v38;
        WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal((uint64_t)v20, v21, (const WTF::StringImpl **)v23, (long long *)buf, v86, 1, v84 != 0, (uint64_t *)&v106);
        if (v106) {
          (*(void (**)(void *))(*v106 + 8))(v106);
        }
        goto LABEL_49;
      }
      break;
    }
LABEL_76:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_77:
    uint64_t v57 = qword_1EB357E70;
    if (os_log_type_enabled((os_log_t)qword_1EB357E70, OS_LOG_TYPE_INFO))
    {
      WTF::String::utf8();
      if (v107[0]) {
        uint64_t v58 = v107[0] + 16;
      }
      else {
        uint64_t v58 = 0;
      }
      WTF::String::utf8();
      if (v109[0]) {
        uint64_t v59 = v109[0] + 16;
      }
      else {
        uint64_t v59 = 0;
      }
      *(_DWORD *)long long buf = 136380931;
      *(void *)&uint8_t buf[4] = v58;
      *(_WORD *)&unsigned char buf[12] = 2081;
      *(void *)&buf[14] = v59;
      _os_log_impl(&dword_1985F2000, v57, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: Storage access was granted to %{private}s under %{private}s.", buf, 0x16u);
      uint64_t v61 = (WTF *)v109[0];
      v109[0] = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 1) {
          WTF::fastFree(v61, v60);
        }
        else {
          --*(_DWORD *)v61;
        }
      }
      long long v77 = (WTF *)v107[0];
      v107[0] = 0;
      if (v77)
      {
        if (*(_DWORD *)v77 == 1) {
          WTF::fastFree(v77, v60);
        }
        else {
          --*(_DWORD *)v77;
        }
      }
    }
    uint64_t v78 = *(WTF::StringImpl **)v90;
    if (*(void *)v90) {
      *(_DWORD *)v78 += 2;
    }
    long long v111 = v78;
    char v79 = *(WTF::StringImpl **)v23;
    if (*(void *)v23) {
      *(_DWORD *)v79 += 2;
    }
    long long v110 = v79;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[ITP] Storage access was granted to '", 38, (uint64_t *)&v111, (uint64_t)"' under '", 10, (uint64_t *)&v110, (uint64_t)"'.", 3, buf);
    WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(v91, 13, 4, (uint64_t)buf);
    uint64_t v81 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2) {
        WTF::StringImpl::destroy(v81, v80);
      }
      else {
        *(_DWORD *)v81 -= 2;
      }
    }
    uint64_t v82 = v110;
    long long v110 = 0;
    if (v82)
    {
      if (*(_DWORD *)v82 == 2) {
        WTF::StringImpl::destroy(v82, v80);
      }
      else {
        *(_DWORD *)v82 -= 2;
      }
    }
    uint64_t v83 = v111;
    long long v111 = 0;
    if (v83)
    {
      if (*(_DWORD *)v83 == 2) {
        WTF::StringImpl::destroy(v83, v80);
      }
      else {
        *(_DWORD *)v83 -= 2;
      }
    }
    uint64_t v20 = (WebKit::DatabaseUtilities *)v91;
    uint64_t v21 = (WTF **)v90;
  }
  uint64_t v40 = qword_1EB358460;
  if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
  {
    uint64_t v41 = *((void *)v20 + 82);
    unsigned int Error = WebCore::SQLiteDatabase::lastError(v34);
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v34);
    *(_DWORD *)long long buf = 134218755;
    *(void *)&uint8_t buf[4] = v20;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v41;
    __int16 v113 = 1024;
    unsigned int v114 = Error;
    __int16 v115 = 2081;
    uint64_t v116 = ErrorMsg;
    _os_log_error_impl(&dword_1985F2000, v40, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::requestStorageAccess: failed to step statement", buf, 0x26u);
  }
  (*(void (**)(uint64_t, void))(*(void *)v17 + 16))(v17, 0);
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
LABEL_49:
  if (v108 != -1) {
    v33[v108]((int)&v106, (WebCore::SQLiteStatement *)v107);
  }
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v109);
  return WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::~$_0((uint64_t)&v93, v29);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8138;
  WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C8138;
  WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  unsigned int v2 = (uint64_t *)(a1 + 120);
  __int16 v8 = 0;
  char v9 = *(unsigned char *)(a1 + 72);
  unsigned int v3 = *(WTF::StringImpl **)(a1 + 32);
  if (v3) {
    *(_DWORD *)v3 += 2;
  }
  int v10 = v3;
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 24);
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  uint64_t v11 = v4;
  WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(v2, (uint64_t)&v8);
  unsigned int v6 = v11;
  uint64_t v11 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(WebKit::StorageAccessStatus)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8160;
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unsigned int v6 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v6);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(WebKit::StorageAccessStatus)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8160;
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unsigned int v6 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v6);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(WebKit::StorageAccessStatus)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    char v7 = *(unsigned char *)(a1 + 64);
    char v27 = v3;
    __int16 v8 = *(atomic_uchar **)v3;
    if (*(void *)v3) {
      __int16 v8 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v8);
    }
    v28[0] = (WTF::StringImpl *)v8;
    v28[1] = v3;
    WebCore::RegistrableDomain::isolatedCopy(v29);
    WebCore::RegistrableDomain::isolatedCopy(&v29[1]);
    *(void *)uint64_t v30 = v4;
    *(void *)&v30[8] = v5;
    *(void *)&unsigned char v30[16] = v6;
    v30[24] = 1;
    v30[25] = v7;
    uint64_t v9 = *(void *)(a1 + 72);
    *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
    uint64_t v31 = v9;
    uint64_t v10 = WTF::fastMalloc((WTF *)0x58);
    *(void *)uint64_t v10 = &unk_1EE9C8228;
    *(void *)(v10 + ++*(_DWORD *)(this + 8) = v27;
    *(WTF::StringImpl **)(v10 + 16) = v28[0];
    *(WTF::StringImpl **)(v10 + 24) = v28[1];
    *(WTF::StringImpl **)(v10 + 3objc_destroyWeak(this + 2) = v29[0];
    uint64_t v11 = v29[1];
    *(_OWORD *)long long v28 = 0u;
    *(_OWORD *)long long v29 = 0u;
    *(void *)(v10 + ++*(_DWORD *)(this - 40) = v11;
    long long v12 = *(_OWORD *)&v30[10];
    *(_OWORD *)(v10 + 4++*(_DWORD *)(this + 8) = *(_OWORD *)v30;
    *(_OWORD *)(v10 + 5++*(_DWORD *)(this + 8) = v12;
    uint64_t v13 = v31;
    uint64_t v31 = 0;
    *(void *)(v10 + 80) = v13;
    if (*((unsigned char *)v3 + 72))
    {
      uint64_t result = 172;
      __break(0xC471u);
    }
    else
    {
      uint64_t v14 = v10;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)v3);
      uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v15 = &unk_1EE9C7620;
      v15[1] = v3;
      void v15[2] = v14;
      char v32 = v15;
      WTF::SuspendableWorkQueue::dispatch();
      uint64_t v17 = v32;
      char v32 = 0;
      if (v17) {
        (*(void (**)(void *))(*v17 + 8))(v17);
      }
      uint64_t v18 = v31;
      uint64_t v31 = 0;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
      long long v19 = v29[1];
      v29[1] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v16);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      uint64_t v26 = v29[0];
      v29[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, v16);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
      uint64_t result = (uint64_t)v28[0];
      v28[0] = 0;
      if (result) {
        return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)result, v16);
      }
    }
  }
  else
  {
    uint64_t v20 = (uint64_t *)(a1 + 72);
    LOWORD(v27) = 256;
    BYTE2(v27) = *(unsigned char *)(a1 + 64);
    uint64_t v21 = *(WTF::StringImpl **)(a1 + 32);
    if (v21) {
      *(_DWORD *)v21 += 2;
    }
    v28[0] = v21;
    char v22 = *(WTF::StringImpl **)(a1 + 24);
    if (v22) {
      *(_DWORD *)v22 += 2;
    }
    v28[1] = v22;
    WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(v20, (uint64_t)&v27);
    int v24 = v28[1];
    v28[1] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v23);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    uint64_t result = (uint64_t)v28[0];
    v28[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(WebKit::StorageAccessStatus)#1},void,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8188;
  WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(WebKit::StorageAccessStatus)#1},void,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C8188;
  WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(WebKit::StorageAccessStatus)#1},void,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&>::call(uint64_t a1, char a2)
{
  long long v7 = *(_OWORD *)(a1 + 8);
  v21[0] = *(void *)(a1 + 8);
  long long v8 = *(_OWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  long long v9 = *(_OWORD *)(a1 + 56);
  long long v22 = *(_OWORD *)(a1 + 40);
  long long v23 = v9;
  char v24 = *(unsigned char *)(a1 + 72);
  LOBYTE(v25) = 0;
  char v29 = 0;
  int v10 = *(unsigned __int8 *)(a1 + 112);
  long long v19 = v8;
  long long v20 = v7;
  if (*(unsigned char *)(a1 + 112))
  {
    uint64_t v11 = *(void *)(a1 + 80);
    uint64_t v2 = *(void *)(a1 + 88);
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 8++*(_DWORD *)(this + 8) = 0;
    uint64_t v25 = v11;
    uint64_t v26 = v2;
    uint64_t v5 = *(void *)(a1 + 96);
    uint64_t v27 = v5;
    unsigned int v3 = *(_DWORD *)(a1 + 104);
    unsigned int v4 = *(_DWORD *)(a1 + 108);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    unint64_t v28 = __PAIR64__(v4, v3);
    char v29 = 1;
  }
  uint64_t v12 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  char v31 = a2;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x88);
  *(void *)uint64_t v13 = &unk_1EE9C81B0;
  *(_OWORD *)(v13 + ++*(_DWORD *)(this + 8) = v20;
  v21[1] = 0;
  void v21[2] = 0;
  *(_OWORD *)(v13 + 24) = v19;
  v21[3] = 0;
  char v14 = v24;
  long long v15 = v23;
  *(_OWORD *)(v13 + ++*(_DWORD *)(this - 40) = v22;
  *(unsigned char *)(v13 + 7objc_destroyWeak(this + 2) = v14;
  *(_OWORD *)(v13 + 56) = v15;
  *(unsigned char *)(v13 + 80) = 0;
  *(unsigned char *)(v13 + 11objc_destroyWeak(this + 2) = 0;
  if (v10)
  {
    *(void *)(v13 + 80) = v25;
    *(void *)(v13 + 8++*(_DWORD *)(this + 8) = v2;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    *(void *)(v13 + 96) = v5;
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    *(_DWORD *)(v13 + 104) = v3;
    *(_DWORD *)(v13 + 10++*(_DWORD *)(this + 8) = v4;
    *(unsigned char *)(v13 + 11objc_destroyWeak(this + 2) = 1;
  }
  uint64_t v30 = 0;
  *(void *)(v13 + 120) = v12;
  *(unsigned char *)(v13 + 12++*(_DWORD *)(this + 8) = a2;
  uint64_t v32 = v13;
  WTF::RunLoop::main((WTF::RunLoop *)v13);
  WTF::RunLoop::dispatch();
  uint64_t v17 = v32;
  uint64_t v32 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  return WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::~$_0((uint64_t)v21, v16);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(WebKit::StorageAccessStatus)#1}::operator()(WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C81B0;
  WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(WebKit::StorageAccessStatus)#1}::operator()(WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C81B0;
  WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(WebKit::StorageAccessStatus)#1}::operator()(WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::{lambda(void)#1},void>::call(WTF::StringImpl *result)
{
  uint64_t v1 = result;
  int v2 = *((unsigned __int8 *)result + 128);
  uint64_t v3 = *((void *)result + 1);
  if (v2 == 2)
  {
    LOWORD(v20[0]) = WebKit::WebResourceLoadStatisticsStore::storageAccessWasGrantedValueForFrame(*((void *)result + 1), *((WTF::StringImpl **)result + 5), *((void *)result + 6), *((WTF::StringImpl **)result + 3));
    BYTE2(v20[0]) = *((unsigned char *)v1 + 72);
    unsigned int v4 = (WTF::StringImpl *)*((void *)v1 + 4);
    if (v4) {
      *(_DWORD *)v4 += 2;
    }
    v20[1] = v4;
    uint64_t v5 = (WTF::StringImpl *)*((void *)v1 + 3);
    if (v5) {
      *(_DWORD *)v5 += 2;
    }
    uint64_t v21 = v5;
    uint64_t v6 = (uint64_t *)((char *)v1 + 120);
    goto LABEL_23;
  }
  if (v2 != 1)
  {
    if (*((unsigned char *)result + 128)) {
      return result;
    }
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  if (!v7 || !*(void *)(v7 + 8))
  {
LABEL_18:
    uint64_t v6 = (uint64_t *)((char *)result + 120);
    LOWORD(v20[0]) = 0;
    BYTE2(v20[0]) = *((unsigned char *)v1 + 72);
    uint64_t v16 = (WTF::StringImpl *)*((void *)v1 + 4);
    if (v16) {
      *(_DWORD *)v16 += 2;
    }
    v20[1] = v16;
    uint64_t v17 = (WTF::StringImpl *)*((void *)v1 + 3);
    if (v17) {
      *(_DWORD *)v17 += 2;
    }
    uint64_t v21 = v17;
LABEL_23:
    WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(v6, (uint64_t)v20);
    long long v19 = v21;
    uint64_t v21 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v18);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    uint64_t result = v20[1];
    v20[1] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  long long v8 = (atomic_uchar *volatile *)*((void *)result + 2);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v8);
  long long v9 = (_DWORD *)*((void *)v1 + 3);
  if (v9) {
    *v9 += 2;
  }
  int v10 = (_DWORD *)*((void *)v1 + 4);
  if (v10) {
    *v10 += 2;
  }
  *(_OWORD *)long long v20 = *(_OWORD *)((char *)v1 + 40);
  uint64_t v11 = *((void *)v1 + 7);
  char v12 = *((unsigned char *)v1 + 72);
  uint64_t v13 = *((void *)v1 + 15);
  *((void *)v1 + 15) = 0;
  uint64_t v14 = WTF::fastMalloc((WTF *)0x50);
  *(void *)uint64_t v14 = &unk_1EE9C8160;
  *(void *)(v14 + ++*(_DWORD *)(this + 8) = v3;
  *(void *)(v14 + 16) = v8;
  *(void *)(v14 + 24) = v9;
  *(void *)(v14 + 3objc_destroyWeak(this + 2) = v10;
  *(_OWORD *)(v14 + ++*(_DWORD *)(this - 40) = *(_OWORD *)v20;
  *(void *)(v14 + 56) = v11;
  *(unsigned char *)(v14 + 64) = v12;
  *(void *)(v14 + 7objc_destroyWeak(this + 2) = v13;
  char v24 = (WTF::StringImpl *)v14;
  long long v15 = *(os_unfair_lock_s **)(*(void *)(*(void *)(*(void *)(v3 + 16) + 8) + 32) + 40);
  v20[0] = (WTF::StringImpl *)((char *)v1 + 64);
  v20[1] = (WTF::StringImpl *)((char *)v1 + 40);
  uint64_t v21 = (WTF::StringImpl *)((char *)v1 + 24);
  long long v22 = (char *)v1 + 32;
  long long v23 = (char *)v1 + 80;
  IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::RequestStorageAccessConfirm,WTF::CompletionHandler<void ()(BOOL)>>(v15, (uint64_t)v20, (uint64_t *)&v24);
  uint64_t result = v24;
  if (v24) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)v24 + 8))(v24);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = a2;
  uint64_t result = WTF::fastMalloc((WTF *)(((unint64_t)a2 << 6) | 0x10));
  uint64_t v11 = result;
  uint64_t v12 = result + 16;
  if (a2)
  {
    uint64_t v13 = (unsigned char *)(result + 72);
    do
    {
      *((void *)v13 - 7) = 0;
      v38[0] = 0;
      v38[40] = 0;
      *(v13 - 4++*(_DWORD *)(this + 8) = 0;
      *(v13 - ++*(_DWORD *)(this - 40) = 0;
      *uint64_t v13 = 0;
      v13 += 64;
      uint64_t result = std::__optional_destruct_base<WebCore::LoginStatus,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v38, v9);
      --v7;
    }
    while (v7);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v5;
    while (1)
    {
      uint64_t v16 = (WTF::ASCIICaseInsensitiveHash **)(v4 + (v14 << 6));
      if (*v16 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v16, 0, v10))
        {
          std::__optional_destruct_base<WebCore::LoginStatus,false>::~__optional_destruct_base[abi:sn180100](v4 + (v14 << 6) + 16, v17);
          uint64_t v18 = *v16;
          WTF::StringImpl *v16 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              goto LABEL_29;
            }
            *(_DWORD *)v18 -= 2;
          }
        }
        else
        {
          uint64_t v19 = *a1;
          if (*a1) {
            unsigned int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            unsigned int v20 = 0;
          }
          int v21 = WTF::ASCIICaseInsensitiveHash::hash(*v16, v17);
          int v23 = 0;
          do
          {
            uint64_t v24 = v21 & v20;
            int v26 = WTF::equal(*(WTF **)(v19 + (v24 << 6)), 0, v22);
            int v21 = ++v23 + v24;
          }
          while (!v26);
          uint64_t v27 = v19 + (v24 << 6);
          unint64_t v28 = (unsigned char *)(v27 + 16);
          std::__optional_destruct_base<WebCore::LoginStatus,false>::~__optional_destruct_base[abi:sn180100](v27 + 16, v25);
          uint64_t v30 = *(WTF::StringImpl **)v27;
          *(void *)uint64_t v27 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2) {
              WTF::StringImpl::destroy(v30, v29);
            }
            else {
              *(_DWORD *)v30 -= 2;
            }
          }
          char v31 = *v16;
          WTF::StringImpl *v16 = 0;
          *(void *)uint64_t v27 = v31;
          uint64_t v32 = v4 + (v14 << 6);
          char v33 = *(unsigned char *)(v32 + 8);
          *(unsigned char *)(v27 + 56) = 0;
          *(unsigned char *)(v27 + ++*(_DWORD *)(this + 8) = v33;
          unsigned char *v28 = 0;
          if (*(unsigned char *)(v32 + 56))
          {
            uint64_t v34 = *(void *)(v32 + 16);
            *(void *)(v32 + 16) = 0;
            *(void *)unint64_t v28 = v34;
            uint64_t v35 = v19 + (v24 << 6);
            uint64_t v36 = *(void *)(v32 + 24);
            *(void *)(v32 + 24) = 0;
            *(void *)(v35 + 24) = v36;
            long long v37 = *(_OWORD *)(v32 + 32);
            *(void *)(v35 + 4++*(_DWORD *)(this + 8) = *(void *)(v32 + 48);
            *(_OWORD *)(v35 + 3objc_destroyWeak(this + 2) = v37;
            *(unsigned char *)(v27 + 56) = 1;
          }
          std::__optional_destruct_base<WebCore::LoginStatus,false>::~__optional_destruct_base[abi:sn180100](v32 + 16, v29);
          uint64_t v18 = *v16;
          WTF::StringImpl *v16 = 0;
          if (!v18) {
            goto LABEL_30;
          }
          if (*(_DWORD *)v18 == 2)
          {
LABEL_29:
            WTF::StringImpl::destroy(v18, v9);
            goto LABEL_30;
          }
          *(_DWORD *)v18 -= 2;
        }
      }
LABEL_30:
      if (++v14 == v15) {
        goto LABEL_33;
      }
    }
  }
  if (v4)
  {
LABEL_33:
    return WTF::fastFree((WTF *)(v4 - 16), v9);
  }
  return result;
}

uint64_t *std::__optional_storage_base<WebCore::LoginStatus,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::LoginStatus,false>>(uint64_t *result, uint64_t a2)
{
  unsigned int v3 = result;
  if (*((unsigned __int8 *)result + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (*((unsigned char *)result + 40))
    {
      WTF::String::operator=(result, (uint64_t *)a2);
      uint64_t result = WTF::String::operator=(v3 + 1, (uint64_t *)(a2 + 8));
      uint64_t v4 = *(void *)(a2 + 32);
      *((_OWORD *)v3 + objc_destroyWeak(this + 1) = *(_OWORD *)(a2 + 16);
      v3[4] = v4;
    }
  }
  else if (*((unsigned char *)result + 40))
  {
    unsigned int v5 = (WTF::StringImpl *)result[1];
    v3[1] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t result = (uint64_t *)*v3;
    *unsigned int v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    *((unsigned char *)v3 + ++*(_DWORD *)(this - 40) = 0;
  }
  else
  {
    uint64_t v6 = *(void *)a2;
    *(void *)a2 = 0;
    *uint64_t result = v6;
    uint64_t v7 = *(void *)(a2 + 8);
    *(void *)(a2 + ++*(_DWORD *)(this + 8) = 0;
    result[1] = v7;
    long long v8 = *(_OWORD *)(a2 + 16);
    result[4] = *(void *)(a2 + 32);
    *((_OWORD *)result + objc_destroyWeak(this + 1) = v8;
    *((unsigned char *)result + ++*(_DWORD *)(this - 40) = 1;
  }
  return result;
}

unint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::pair<WebCore::IsLoggedIn,std::optional<WebCore::LoginStatus>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  uint64_t v6 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v5;
  uint64_t v7 = (WTF **)(v2 + (v6 << 6));
  if (WTF::equal(*v7, 0, v8))
  {
LABEL_7:
    if (*a1) {
      return *a1 + ((unint64_t)*(unsigned int *)(*a1 - 4) << 6);
    }
    else {
      return 0;
    }
  }
  else
  {
    int v10 = 1;
    while (*v7 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v7, *a2, v9) & 1) == 0)
    {
      uint64_t v6 = (v6 + v10) & v5;
      uint64_t v7 = (WTF **)(v2 + (v6 << 6));
      ++v10;
      if (WTF::equal(*v7, 0, v9)) {
        goto LABEL_7;
      }
    }
  }
  return (unint64_t)v7;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccessEphemeral(WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C81D8;
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unsigned int v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v6);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccessEphemeral(WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C81D8;
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unsigned int v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v6);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccessEphemeral(WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    uint64_t v3 = (WTF::StringImpl **)(a1 + 24);
    uint64_t v4 = (WTF::StringImpl **)(a1 + 32);
    char v5 = *(unsigned char *)(a1 + 64);
    uint64_t v6 = (uint64_t *)(a1 + 72);
    uint64_t v7 = *(void *)(v2 + 16);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8)
      {
        long long v9 = *(WTF::StringImpl **)(a1 + 40);
        int v10 = *(WTF::StringImpl **)(a1 + 48);
        uint64_t v11 = *(void *)(v8 + 32);
        int v26 = *(WTF::StringImpl **)(v8 + 24);
        if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v11 + 232), &v26))
        {
          int v26 = v9;
          uint64_t v27 = v10;
          LOBYTE(v2++*(_DWORD *)(this + 8) = 1;
          WebCore::NetworkStorageSession::grantStorageAccess();
          v23[0] = WebKit::WebResourceLoadStatisticsStore::storageAccessWasGrantedValueForFrame(v2, v9, (uint64_t)v10, *v3);
          v23[1] = 1;
          v23[2] = v5;
          uint64_t v12 = *v4;
          if (*v4) {
            *(_DWORD *)v12 += 2;
          }
          uint64_t v24 = v12;
          uint64_t v13 = *v3;
          if (*v3) {
            *(_DWORD *)v13 += 2;
          }
          uint64_t v25 = v13;
          WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(v6, (uint64_t)v23);
          uint64_t v15 = v25;
          uint64_t v25 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v14);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
          uint64_t result = v24;
          uint64_t v24 = 0;
          if (!result) {
            return result;
          }
LABEL_27:
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
          }
          *(_DWORD *)result -= 2;
          return result;
        }
      }
    }
    LOWORD(v26) = 256;
    BYTE2(v26) = v5;
    uint64_t v19 = *v4;
    if (*v4) {
      *(_DWORD *)v19 += 2;
    }
    uint64_t v27 = v19;
    unsigned int v20 = *v3;
    if (*v3) {
      *(_DWORD *)v20 += 2;
    }
    unint64_t v28 = v20;
    uint64_t v18 = v6;
  }
  else
  {
    LOWORD(v26) = 256;
    BYTE2(v26) = *(unsigned char *)(a1 + 64);
    uint64_t v16 = *(WTF::StringImpl **)(a1 + 32);
    if (v16) {
      *(_DWORD *)v16 += 2;
    }
    uint64_t v27 = v16;
    uint64_t v17 = *(WTF::StringImpl **)(a1 + 24);
    if (v17) {
      *(_DWORD *)v17 += 2;
    }
    unint64_t v28 = v17;
    uint64_t v18 = (uint64_t *)(a1 + 72);
  }
  WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(v18, (uint64_t)&v26);
  int v21 = v28;
  unint64_t v28 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v14);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  uint64_t result = v27;
  uint64_t v27 = 0;
  if (result) {
    goto LABEL_27;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccessUnderOpener(WebCore::RegistrableDomain &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::RegistrableDomain &)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8200;
  uint64_t v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccessUnderOpener(WebCore::RegistrableDomain &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::RegistrableDomain &)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8200;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccessUnderOpener(WebCore::RegistrableDomain &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::RegistrableDomain &)::$_0,void>::call(uint64_t result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)(result + 8) + 32);
  if (v3)
  {
    uint64_t v4 = *(void *)(result + 24);
    char v5 = (WTF **)(result + 16);
    uint64_t v6 = (WTF::StringImpl **)(result + 32);
    uint64_t result = WTF::equal(*(WTF **)(result + 16), *(const WTF::StringImpl **)(result + 32), a3);
    if ((result & 1) == 0)
    {
      if (*(unsigned char *)(v3 + 716))
      {
        uint64_t v8 = qword_1EB357E70;
        if (os_log_type_enabled((os_log_t)qword_1EB357E70, OS_LOG_TYPE_INFO))
        {
          WTF::String::utf8();
          if (v22) {
            long long v9 = (char *)v22 + 16;
          }
          else {
            long long v9 = 0;
          }
          WTF::String::utf8();
          if (v21) {
            int v10 = (char *)v21 + 16;
          }
          else {
            int v10 = 0;
          }
          *(_DWORD *)long long buf = 136380931;
          *(void *)&uint8_t buf[4] = v9;
          __int16 v24 = 2081;
          uint64_t v25 = v10;
          _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: [Temporary combatibility fix] Storage access was granted for %{private}s under opener page from %{private}s, with user interaction in the opened window.", buf, 0x16u);
          uint64_t v12 = v21;
          int v21 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 1) {
              WTF::fastFree(v12, v11);
            }
            else {
              --*(_DWORD *)v12;
            }
          }
          uint64_t v13 = v22;
          long long v22 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 1) {
              WTF::fastFree(v13, v11);
            }
            else {
              --*(_DWORD *)v13;
            }
          }
        }
        uint64_t v14 = *v5;
        if (*v5) {
          *(_DWORD *)v14 += 2;
        }
        long long v22 = v14;
        uint64_t v15 = *v6;
        if (*v6) {
          *(_DWORD *)v15 += 2;
        }
        int v21 = v15;
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[ITP] Storage access was granted for '", 39, (uint64_t *)&v22, (uint64_t)"' under opener page from '", 27, (uint64_t *)&v21, (uint64_t)"', with user interaction in the opened window.", 47, buf);
        WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(v3, 13, 4, (uint64_t)buf);
        uint64_t v17 = *(WTF::StringImpl **)buf;
        *(void *)long long buf = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy(v17, v16);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
        uint64_t v18 = v21;
        int v21 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v16);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
        uint64_t v19 = v22;
        long long v22 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v16);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
      }
      buf[0] = 0;
      BYTE2(v25) = 0;
      uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v7 = &unk_1EE9C7AF8;
      unsigned int v20 = v7;
      WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(v3, v5, v5 + 2, (long long *)buf, v4, 0, 1, (uint64_t *)&v20);
      uint64_t result = (uint64_t)v20;
      if (v20) {
        return (*(uint64_t (**)(void *))(*v20 + 8))(v20);
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8228;
  uint64_t v3 = a1[10];
  a1[10] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  char v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (atomic_uchar *)a1[2];
  a1[2] = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8228;
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  char v5 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (atomic_uchar *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 64);
    char v6 = *(unsigned char *)(a1 + 72);
    char v41 = *(unsigned char *)(a1 + 73);
    long long v7 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)uint64_t v42 = v7;
    long long v44 = *(_OWORD *)(a1 + 48);
    WebCore::RegistrableDomain::isolatedCopy(v45);
    WebCore::RegistrableDomain::isolatedCopy(&v45[1]);
    __int16 v46 = *(_WORD *)(a1 + 72);
    uint64_t v8 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = 0;
    uint64_t v47 = v8;
    uint64_t v9 = WTF::fastMalloc((WTF *)0x48);
    *(void *)uint64_t v9 = &unk_1EE9C8278;
    *(_OWORD *)(v9 + ++*(_DWORD *)(this + 8) = *(_OWORD *)v42;
    *(_OWORD *)(v9 + 24) = v44;
    *(WTF::StringImpl **)(v9 + ++*(_DWORD *)(this - 40) = v45[0];
    int v10 = v45[1];
    *(_OWORD *)uint64_t v45 = 0u;
    *(void *)(v9 + 4++*(_DWORD *)(this + 8) = v10;
    *(_WORD *)(v9 + 56) = v46;
    uint64_t v11 = v47;
    uint64_t v47 = 0;
    *(void *)(v9 + 64) = v11;
    uint64_t v12 = (WTF::RunLoop *)WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)v2, (uint64_t)v58);
    WTF::RunLoop::main(v12);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v2 + 96), v2);
    uint64_t v13 = *(atomic_uint **)(v2 + 96);
    if (v13) {
      atomic_fetch_add(v13, 1u);
    }
    v48[0] = (WTF::StringImpl *)v13;
    WebCore::RegistrableDomain::isolatedCopy(&v48[1]);
    WebCore::RegistrableDomain::isolatedCopy(v49);
    uint64_t v14 = *(WTF::WorkQueue **)(v2 + 112);
    WTF::WorkQueue::ref(v14);
    v49[1] = v14;
    uint64_t v15 = *(atomic_uchar *volatile **)(v2 + 104);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v15);
    int8x16x2_t v50 = (atomic_uchar **)v15;
    *(void *)&long long v51 = v3;
    *((void *)&v51 + objc_destroyWeak(this + 1) = v4;
    *(void *)&long long v52 = v5;
    BYTE8(v5objc_destroyWeak(this + 2) = v6;
    BYTE9(v5objc_destroyWeak(this + 2) = v41;
    *(_DWORD *)((char *)&v52 + 10) = v56;
    HIWORD(v5objc_destroyWeak(this + 2) = v57;
    uint64_t v53 = v2;
    uint64_t v54 = v9;
    uint64_t v16 = WTF::fastMalloc((WTF *)0x60);
    *(void *)uint64_t v16 = &unk_1EE9C7B20;
    *(WTF::StringImpl **)(v16 + ++*(_DWORD *)(this + 8) = v48[0];
    *(WTF::StringImpl **)(v16 + 16) = v48[1];
    *(WTF::StringImpl **)(v16 + 24) = v49[0];
    uint64_t v17 = v49[1];
    *(_OWORD *)int8x16x2_t v48 = 0u;
    *(_OWORD *)uint64_t v49 = 0u;
    *(void *)(v16 + 3objc_destroyWeak(this + 2) = v17;
    *(void *)(v16 + ++*(_DWORD *)(this - 40) = v50;
    long long v18 = v51;
    long long v19 = v52;
    *(void *)(v16 + 80) = v53;
    *(_OWORD *)(v16 + 4++*(_DWORD *)(this + 8) = v18;
    *(_OWORD *)(v16 + 64) = v19;
    uint64_t v20 = v54;
    int8x16x2_t v50 = 0;
    uint64_t v54 = 0;
    *(void *)(v16 + 8++*(_DWORD *)(this + 8) = v20;
    uint64_t v55 = v16;
    WTF::RunLoop::dispatch();
    uint64_t v22 = v55;
    uint64_t v55 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    uint64_t v23 = v54;
    uint64_t v54 = 0;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
    __int16 v24 = v50;
    int8x16x2_t v50 = 0;
    if (v24) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v24);
    }
    uint64_t v25 = v49[1];
    v49[1] = 0;
    if (v25) {
      WTF::WorkQueue::deref(v25);
    }
    uint64_t v26 = v49[0];
    v49[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v21);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    uint64_t v34 = v48[1];
    v48[1] = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, v21);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
    uint64_t v35 = (unsigned int *)v48[0];
    v48[0] = 0;
    if (v35 && atomic_fetch_add((atomic_uint *volatile)v35, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v35);
      WTF::fastFree((WTF *)v35, v21);
    }
    WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v58);
    uint64_t v37 = v47;
    uint64_t v47 = 0;
    if (v37) {
      (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
    }
    __int16 v38 = v45[1];
    v45[1] = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, v36);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
    uint64_t v39 = v45[0];
    v45[0] = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, v36);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
    }
    return 0;
  }
  else
  {
    WebCore::RegistrableDomain::isolatedCopy(v48);
    WebCore::RegistrableDomain::isolatedCopy(&v48[1]);
    LOWORD(v49[0]) = *(_WORD *)(a1 + 72);
    uint64_t v27 = *(WTF::StringImpl **)(a1 + 80);
    *(void *)(a1 + 80) = 0;
    v49[1] = v27;
    uint64_t v28 = WTF::fastMalloc((WTF *)0x28);
    *(void *)uint64_t v28 = &unk_1EE9C8250;
    *(WTF::StringImpl **)(v28 + ++*(_DWORD *)(this + 8) = v48[0];
    char v29 = v48[1];
    v48[0] = 0;
    v48[1] = 0;
    *(void *)(v28 + 16) = v29;
    *(_WORD *)(v28 + 24) = v49[0];
    uint64_t v30 = v49[1];
    v49[1] = 0;
    *(void *)(v28 + 3objc_destroyWeak(this + 2) = v30;
    uint64_t v43 = v28;
    WTF::RunLoop::main((WTF::RunLoop *)v28);
    WTF::RunLoop::dispatch();
    if (v43) {
      (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
    }
    uint64_t v32 = v49[1];
    v49[1] = 0;
    if (v32) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v32 + 8))(v32);
    }
    char v33 = v48[1];
    v48[1] = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, v31);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
    uint64_t result = v48[0];
    v48[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8250;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8250;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 32);
  char v8 = 0;
  __int16 v9 = *(_WORD *)(a1 + 24);
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 16);
  if (v3) {
    *(_DWORD *)v3 += 2;
  }
  int v10 = v3;
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  uint64_t v11 = v4;
  WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(v2, (uint64_t)&v8);
  char v6 = v11;
  uint64_t v11 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(void)::{lambda(WebCore::StorageAccessWasGranted)#1},void,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8278;
  uint64_t v3 = a1[8];
  a1[8] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  char v6 = (atomic_uchar *)a1[1];
  a1[1] = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(void)::{lambda(WebCore::StorageAccessWasGranted)#1},void,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8278;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + ++*(_DWORD *)(this + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  char v6 = (atomic_uchar *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(void)::{lambda(WebCore::StorageAccessWasGranted)#1},void,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&>::call(uint64_t a1, char a2)
{
  long long v4 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0u;
  *(_OWORD *)uint64_t v15 = v4;
  long long v16 = *(_OWORD *)(a1 + 24);
  WebCore::RegistrableDomain::isolatedCopy(v17);
  WebCore::RegistrableDomain::isolatedCopy(&v17[1]);
  v18[0] = a2;
  *(_WORD *)&v18[1] = *(_WORD *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  uint64_t v19 = v5;
  uint64_t v6 = WTF::fastMalloc((WTF *)0x48);
  *(void *)uint64_t v6 = &unk_1EE9C82A0;
  *(_OWORD *)(v6 + ++*(_DWORD *)(this + 8) = *(_OWORD *)v15;
  *(_OWORD *)(v6 + 24) = v16;
  *(WTF::StringImpl **)(v6 + ++*(_DWORD *)(this - 40) = v17[0];
  long long v7 = v17[1];
  *(_OWORD *)uint64_t v17 = 0u;
  *(void *)(v6 + 4++*(_DWORD *)(this + 8) = v7;
  *(_WORD *)(v6 + 56) = *(_WORD *)v18;
  *(unsigned char *)(v6 + 5++*(_DWORD *)(this + 8) = v18[2];
  uint64_t v8 = v19;
  uint64_t v19 = 0;
  *(void *)(v6 + 64) = v8;
  uint64_t v20 = v6;
  WTF::RunLoop::main((WTF::RunLoop *)v6);
  WTF::RunLoop::dispatch();
  uint64_t v10 = v20;
  uint64_t v20 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v19;
  uint64_t v19 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = v17[1];
  v17[1] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v9);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = v17[0];
  v17[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v9);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  return 0;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(void)::{lambda(WebCore::StorageAccessWasGranted)#1}::operator()(WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C82A0;
  uint64_t v3 = a1[8];
  a1[8] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  long long v4 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (atomic_uchar *)a1[1];
  a1[1] = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(void)::{lambda(WebCore::StorageAccessWasGranted)#1}::operator()(WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C82A0;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + ++*(_DWORD *)(this + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  long long v4 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (atomic_uchar *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(void)::{lambda(WebCore::StorageAccessWasGranted)#1}::operator()(WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2)
  {
    long long v4 = 0;
    goto LABEL_24;
  }
  char v3 = 0;
  long long v4 = *(atomic_uchar ***)(a1 + 16);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x19972E8D0](v2);
  }
  if (*(void *)(v2 + 24)) {
    ++*(void *)(v2 + 8);
  }
  else {
    long long v4 = 0;
  }
  int v5 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (!v4) {
      goto LABEL_24;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (!v4)
    {
LABEL_24:
      char v16 = *(unsigned char *)(a1 + 56);
      __int16 v17 = *(_WORD *)(a1 + 57);
      uint64_t v11 = *(WTF::StringImpl **)(a1 + 48);
      if (v11) {
        *(_DWORD *)v11 += 2;
      }
      long long v18 = v11;
      uint64_t v12 = *(WTF::StringImpl **)(a1 + 40);
      if (v12) {
        *(_DWORD *)v12 += 2;
      }
      uint64_t v19 = v12;
      WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()((uint64_t *)(a1 + 64), (uint64_t)&v16);
      uint64_t v14 = v19;
      uint64_t v19 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      uint64_t result = (atomic_uchar *)v18;
      long long v18 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          uint64_t result = (atomic_uchar *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
          if (!v4) {
            return result;
          }
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
        }
        *(_DWORD *)result -= 2;
      }
      if (!v4) {
        return result;
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
    }
  }
  if (*(unsigned char *)(a1 + 56) != 1) {
    goto LABEL_24;
  }
  char v16 = WebKit::WebResourceLoadStatisticsStore::storageAccessWasGrantedValueForFrame((uint64_t)v4, *(WTF::StringImpl **)(a1 + 24), *(void *)(a1 + 32), *(WTF::StringImpl **)(a1 + 40));
  __int16 v17 = *(_WORD *)(a1 + 57);
  uint64_t v6 = *(WTF::StringImpl **)(a1 + 48);
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  long long v18 = v6;
  long long v7 = *(WTF::StringImpl **)(a1 + 40);
  if (v7) {
    *(_DWORD *)v7 += 2;
  }
  uint64_t v19 = v7;
  WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()((uint64_t *)(a1 + 64), (uint64_t)&v16);
  __int16 v9 = v19;
  uint64_t v19 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = v18;
  long long v18 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setThirdPartyCookieBlockingMode(WebCore::ThirdPartyCookieBlockingMode)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 8) + 32);
  if (v1) {
    *(unsigned char *)(v1 + 71objc_destroyWeak(this + 2) = *(unsigned char *)(result + 16);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSameSiteStrictEnforcementEnabled(WebCore::SameSiteStrictEnforcementEnabled)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 8) + 32);
  if (v1) {
    *(unsigned char *)(v1 + 713) = *(unsigned char *)(result + 16);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(WebCore::FirstPartyWebsiteDataRemovalMode,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8318;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(WebCore::FirstPartyWebsiteDataRemovalMode,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8318;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(WebCore::FirstPartyWebsiteDataRemovalMode,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(WebCore::FirstPartyWebsiteDataRemovalMode,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(a1 + 8);
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(WebCore::FirstPartyWebsiteDataRemovalMode,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 32);
  if (v1)
  {
    int v2 = *(unsigned __int8 *)(a1 + 8);
    *(unsigned char *)(v1 + 714) = v2;
    if (v2 == 3) {
      *(unsigned char *)(v1 + 225) = 1;
    }
  }
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  long long v4 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
  *(void *)long long v4 = &unk_1EE9C8340;
  *((void *)v4 + objc_destroyWeak(this + 1) = v3;
  uint64_t v6 = v4;
  WTF::RunLoop::main(v4);
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(WTF::RunLoop *))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(WebCore::FirstPartyWebsiteDataRemovalMode,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C8340;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(WebCore::FirstPartyWebsiteDataRemovalMode,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C8340;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(WebCore::FirstPartyWebsiteDataRemovalMode,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPersistedDomains(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8368;
  uint64_t v3 = (WTF::StringImpl **)a1[2];
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPersistedDomains(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8368;
  uint64_t v3 = (WTF::StringImpl **)*((void *)this + 2);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPersistedDomains(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)::$_0,void>::call(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 16);
    *(void *)(result + 16) = 0;
    uint64_t result = *(void *)(v2 + 312);
    *(void *)(v2 + 31objc_destroyWeak(this + 2) = v3;
    if (result) {
      return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, a2);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8390;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  long long v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8390;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  long long v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = *(void *)(a1[1] + 32);
  if (v2) {
    WTF::String::operator=((uint64_t *)(v2 + 288), a1 + 2);
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  long long v4 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
  *(void *)long long v4 = &unk_1EE9C83B8;
  *((void *)v4 + objc_destroyWeak(this + 1) = v3;
  uint64_t v6 = v4;
  WTF::RunLoop::main(v4);
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(WTF::RunLoop *))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C83B8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C83B8;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setAppBoundDomains(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C83E0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  long long v4 = (WTF::StringImpl **)a1[2];
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setAppBoundDomains(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C83E0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  long long v4 = (WTF::StringImpl **)*((void *)this + 2);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setAppBoundDomains(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = *(void *)(v3 + 32);
  if (v4)
  {
    uint64_t v5 = a1[2];
    a1[2] = 0;
    uint64_t v6 = *(WTF::StringImpl ***)(v4 + 296);
    *(void *)(v4 + 296) = v5;
    if (v6) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, a2);
    }
    *(unsigned char *)(*(void *)(v3 + 32) + 71objc_destroyWeak(this + 2) = 1;
  }
  long long v7 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v9, a1 + 3);
  WTF::RunLoop::main(v7);
  WTF::RunLoop::dispatch();
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setManagedDomains(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8408;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl **)a1[2];
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setManagedDomains(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8408;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl **)*((void *)this + 2);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setManagedDomains(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = *(void *)(v3 + 32);
  if (v4)
  {
    uint64_t v5 = a1[2];
    a1[2] = 0;
    uint64_t v6 = *(WTF::StringImpl ***)(v4 + 304);
    *(void *)(v4 + 304) = v5;
    if (v6) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, a2);
    }
    *(unsigned char *)(*(void *)(v3 + 32) + 71objc_destroyWeak(this + 2) = 2;
  }
  long long v7 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v9, a1 + 3);
  WTF::RunLoop::main(v7);
  WTF::RunLoop::dispatch();
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WebKit::ResourceLoadStatisticsStore *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::performDailyTasks(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t result = *(WebKit::ResourceLoadStatisticsStore **)(v1 + 32);
  if (result)
  {
    WebKit::ResourceLoadStatisticsStore::includeTodayAsOperatingDateIfNecessary(result);
    uint64_t v3 = *(void *)(v1 + 32) + 16;
    return (WebKit::ResourceLoadStatisticsStore *)MEMORY[0x1F416DCF0](v3);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logFrameNavigation(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::RegistrableDomain &,BOOL,BOOL,WTF::Seconds,BOOL)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8458;
  uint64_t v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logFrameNavigation(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::RegistrableDomain &,BOOL,BOOL,WTF::Seconds,BOOL)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8458;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

unsigned char *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logFrameNavigation(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::RegistrableDomain &,BOOL,BOOL,WTF::Seconds,BOOL)::$_0,void>::call(unsigned char *result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*((void *)result + 1) + 32);
  if (v3)
  {
    uint64_t v4 = (const WTF::StringImpl **)result;
    int v5 = result[40];
    int v6 = result[41];
    double v7 = *((double *)result + 6);
    int v8 = result[56];
    uint64_t v9 = (WTF **)(result + 16);
    char v10 = WTF::equal(*((WTF **)result + 2), *((const WTF::StringImpl **)result + 3), a3);
    uint64_t v11 = v4 + 4;
    unsigned __int8 v13 = WTF::equal(*v9, v4[4], v12);
    WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)v3, (uint64_t)v63);
    if (v6) {
      char v14 = 1;
    }
    else {
      char v14 = v10;
    }
    char v15 = v14 | v13;
    if (((v14 | v13) & 1) == 0)
    {
      char v41 = (WTF::WallTime *)WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v3, (const WebCore::RegistrableDomain *)v9, (uint64_t)"logFrameNavigation");
      if (!v42) {
        return WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v63);
      }
      WTF::WallTime::now(v41);
      WebCore::ResourceLoadStatistics::reduceTimeResolution();
      WebKit::ResourceLoadStatisticsStore::updateLastSeen(v3, v43);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      long long v44 = *(WTF::StringImpl **)buf;
      uint64_t v62 = *(WTF::StringImpl **)buf;
      uint64_t v45 = v4[3];
      if (v45) {
        *(_DWORD *)v45 += 2;
      }
      long long v65 = v45;
      uint64_t v61 = 0;
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v61, &v65, (uint64_t)buf);
      WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(v3, (uint64_t *)&v62, (uint64_t *)&v61);
      if (v61) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v61, v46);
      }
      uint64_t v47 = v65;
      long long v65 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2) {
          WTF::StringImpl::destroy(v47, v46);
        }
        else {
          *(_DWORD *)v47 -= 2;
        }
      }
      if (v44)
      {
        if (*(_DWORD *)v44 == 2) {
          WTF::StringImpl::destroy(v44, v46);
        }
        else {
          *(_DWORD *)v44 -= 2;
        }
      }
    }
    if ((v13 & 1) == 0)
    {
      if (!v6)
      {
        if (!v5) {
          goto LABEL_9;
        }
        WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v3, (const WebCore::RegistrableDomain *)(v4 + 4), (uint64_t)"logFrameNavigation");
        char v33 = v32;
        WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v3, (const WebCore::RegistrableDomain *)v9, (uint64_t)"logFrameNavigation");
        if (v34) {
          BOOL v35 = v33 == 0;
        }
        else {
          BOOL v35 = 1;
        }
        if (v35) {
          return WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v63);
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v36 = *(WTF::StringImpl **)buf;
        uint64_t v62 = *(WTF::StringImpl **)buf;
        uint64_t v37 = *v9;
        if (*v9) {
          *(_DWORD *)v37 += 2;
        }
        long long v65 = v37;
        uint64_t v61 = 0;
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v61, &v65, (uint64_t)buf);
        WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(v3, (uint64_t *)&v62, (uint64_t *)&v61);
        if (v61) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v61, v38);
        }
        uint64_t v39 = v65;
        long long v65 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2) {
            WTF::StringImpl::destroy(v39, v38);
          }
          else {
            *(_DWORD *)v39 -= 2;
          }
        }
        if (v36)
        {
          if (*(_DWORD *)v36 == 2) {
            WTF::StringImpl::destroy(v36, v38);
          }
          else {
            *(_DWORD *)v36 -= 2;
          }
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v28 = *(WTF::StringImpl **)buf;
        uint64_t v62 = *(WTF::StringImpl **)buf;
        uint64_t v40 = *v11;
        if (*v11) {
          *(_DWORD *)v40 += 2;
        }
        long long v65 = v40;
        uint64_t v61 = 0;
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v61, &v65, (uint64_t)buf);
        WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(v3, (uint64_t *)&v62, (uint64_t *)&v61);
        if (v61) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v61, v30);
        }
        char v31 = v65;
        long long v65 = 0;
        if (!v31)
        {
LABEL_67:
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v30);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          goto LABEL_70;
        }
LABEL_65:
        if (*(_DWORD *)v31 == 2) {
          WTF::StringImpl::destroy(v31, v30);
        }
        else {
          *(_DWORD *)v31 -= 2;
        }
        goto LABEL_67;
      }
      if (v8) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v7 < *(double *)(v3 + 208);
      }
      if (v5 || v16)
      {
        WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v3, (const WebCore::RegistrableDomain *)(v4 + 4), (uint64_t)"logFrameNavigation");
        char v18 = v17;
        WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v3, (const WebCore::RegistrableDomain *)v9, (uint64_t)"logFrameNavigation");
        if (!v19 || !v18) {
          return WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v63);
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v20 = *(WTF::StringImpl **)buf;
        uint64_t v62 = *(WTF::StringImpl **)buf;
        int v21 = *v9;
        if (*v9) {
          *(_DWORD *)v21 += 2;
        }
        long long v65 = v21;
        uint64_t v61 = 0;
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v61, &v65, (uint64_t)buf);
        WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(v3, (uint64_t *)&v62, (uint64_t *)&v61);
        if (v61) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v61, v22);
        }
        uint64_t v23 = v65;
        long long v65 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2) {
            WTF::StringImpl::destroy(v23, v22);
          }
          else {
            *(_DWORD *)v23 -= 2;
          }
        }
        if (v20)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, v22);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
        if (v5)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          __int16 v24 = *(WTF::StringImpl **)buf;
          uint64_t v62 = *(WTF::StringImpl **)buf;
          uint64_t v25 = *v9;
          if (*v9) {
            *(_DWORD *)v25 += 2;
          }
          long long v65 = v25;
          uint64_t v61 = 0;
          WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v61, &v65, (uint64_t)buf);
          WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(v3, (uint64_t *)&v62, (uint64_t *)&v61);
          if (v61) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v61, v26);
          }
          uint64_t v27 = v65;
          long long v65 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, v26);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, v26);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
          if (*(unsigned char *)(v3 + 716))
          {
            int8x16x2_t v48 = qword_1EB357E70;
            if (os_log_type_enabled((os_log_t)qword_1EB357E70, OS_LOG_TYPE_INFO))
            {
              WTF::String::utf8();
              if (v62) {
                uint64_t v49 = (char *)v62 + 16;
              }
              else {
                uint64_t v49 = 0;
              }
              WTF::String::utf8();
              if (v61) {
                int8x16x2_t v50 = (char *)v61 + 16;
              }
              else {
                int8x16x2_t v50 = 0;
              }
              *(_DWORD *)long long buf = 136446466;
              *(void *)&uint8_t buf[4] = v49;
              __int16 v67 = 2082;
              unsigned int v68 = v50;
              _os_log_impl(&dword_1985F2000, v48, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: Did set %{public}s as making a top frame redirect to %{public}s.", buf, 0x16u);
              long long v52 = v61;
              uint64_t v61 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 1) {
                  WTF::fastFree(v52, v51);
                }
                else {
                  --*(_DWORD *)v52;
                }
              }
              uint64_t v53 = v62;
              uint64_t v62 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 1) {
                  WTF::fastFree(v53, v51);
                }
                else {
                  --*(_DWORD *)v53;
                }
              }
            }
            uint64_t v54 = *v11;
            if (*v11) {
              *(_DWORD *)v54 += 2;
            }
            uint64_t v62 = v54;
            uint64_t v55 = *v9;
            if (*v9) {
              *(_DWORD *)v55 += 2;
            }
            uint64_t v61 = v55;
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Did set '", 10, (uint64_t *)&v62, (uint64_t)"' as making a top frame redirect to '", 38, (uint64_t *)&v61, (uint64_t)"'.", 3, buf);
            WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(v3, 13, 4, (uint64_t)buf);
            __int16 v57 = *(WTF::StringImpl **)buf;
            *(void *)long long buf = 0;
            if (v57)
            {
              if (*(_DWORD *)v57 == 2) {
                WTF::StringImpl::destroy(v57, v56);
              }
              else {
                *(_DWORD *)v57 -= 2;
              }
            }
            uint64_t v58 = v61;
            uint64_t v61 = 0;
            if (v58)
            {
              if (*(_DWORD *)v58 == 2) {
                WTF::StringImpl::destroy(v58, v56);
              }
              else {
                *(_DWORD *)v58 -= 2;
              }
            }
            uint64_t v59 = v62;
            uint64_t v62 = 0;
            if (v59)
            {
              if (*(_DWORD *)v59 == 2) {
                WTF::StringImpl::destroy(v59, v56);
              }
              else {
                *(_DWORD *)v59 -= 2;
              }
            }
          }
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v28 = *(WTF::StringImpl **)buf;
        long long v65 = *(WTF::StringImpl **)buf;
        char v29 = *v11;
        if (*v11) {
          *(_DWORD *)v29 += 2;
        }
        long long v64 = v29;
        __int16 v60 = 0;
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v60, &v64, (uint64_t)buf);
        WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(v3, (uint64_t *)&v65, (uint64_t *)&v60);
        if (v60) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v60, v30);
        }
        char v31 = v64;
        long long v64 = 0;
        if (!v31) {
          goto LABEL_67;
        }
        goto LABEL_65;
      }
    }
LABEL_9:
    if (v15) {
      return WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v63);
    }
LABEL_70:
    WebKit::ResourceLoadStatisticsStore::scheduleStatisticsProcessingRequestIfNecessary((WebKit::ResourceLoadStatisticsStore *)v3);
    return WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v63);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8480;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8480;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

unsigned char *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[3];
  a1[3] = 0;
  BOOL v16 = (unsigned char *)v2;
  uint64_t v3 = *(double **)(v1 + 32);
  if (v3)
  {
    uint64_t v4 = (const WebCore::RegistrableDomain *)(a1 + 2);
    int v5 = (void *)WTF::fastMalloc((WTF *)0x10);
    *int v5 = &unk_1EE9C84A8;
    v5[1] = v2;
    char v15 = v5;
    WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)v3, (uint64_t)v17);
    WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)v3, v4, (uint64_t)"logUserInteraction");
    if (v6
      && (hasHadUserInteraction = (WTF::WallTime *)WebKit::ResourceLoadStatisticsStore::hasHadUserInteraction((uint64_t)v3, v4), int v8 = (int)hasHadUserInteraction, v9 = v3[81], WTF::WallTime::now(hasHadUserInteraction), WebKit::ResourceLoadStatisticsStore::setUserInteraction((uint64_t)v3, v9 + v10), !v8))
    {
      WebKit::ResourceLoadStatisticsStore::updateCookieBlocking((uint64_t)v3, (uint64_t *)&v15);
      uint64_t v14 = (uint64_t)v15;
      uint64_t result = WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v17);
      if (v14) {
        return (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
    else
    {
      (*(void (**)(void *))(*v5 + 16))(v5);
      (*(void (**)(void *))(*v5 + 8))(v5);
      return WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v17);
    }
  }
  else
  {
    uint64_t v12 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v17, (uint64_t *)&v16);
    WTF::RunLoop::main(v12);
    WTF::RunLoop::dispatch();
    uint64_t v13 = v17[0];
    v17[0] = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    uint64_t result = v16;
    BOOL v16 = 0;
    if (result) {
      return (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C84A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C84A8;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v3, (uint64_t *)(a1 + 8));
  WTF::RunLoop::main(v1);
  WTF::RunLoop::dispatch();
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logCrossSiteLoadWithLinkDecoration(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::DidFilterKnownLinkDecoration,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C84D0;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logCrossSiteLoadWithLinkDecoration(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::DidFilterKnownLinkDecoration,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C84D0;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WebCore::SQLiteStatement *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logCrossSiteLoadWithLinkDecoration(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::DidFilterKnownLinkDecoration,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  v17[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 32);
  if (!v2) {
    goto LABEL_28;
  }
  uint64_t v3 = (const WebCore::RegistrableDomain **)(a1 + 24);
  int v4 = *(unsigned __int8 *)(a1 + 32);
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)v2, (uint64_t)v15);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v2, (const WebCore::RegistrableDomain *)(a1 + 24), (uint64_t)"logCrossSiteLoadWithLinkDecoration");
  if (!v5) {
    goto LABEL_27;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  char v6 = v16[0];
  uint64_t v14 = v16[0];
  double v7 = *(WTF::StringImpl **)(a1 + 16);
  if (v7) {
    *(_DWORD *)v7 += 2;
  }
  v17[0] = v7;
  uint64_t v13 = 0;
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v13, v17, (uint64_t)v16);
  WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(v2, (uint64_t *)&v14, (uint64_t *)&v13);
  if (v13) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v8);
  }
  double v9 = v17[0];
  v17[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v8);
      if (!v6) {
        goto LABEL_16;
      }
LABEL_13:
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v8);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
      goto LABEL_16;
    }
    *(_DWORD *)v9 -= 2;
  }
  if (v6) {
    goto LABEL_13;
  }
LABEL_16:
  if (!*(unsigned char *)(v2 + 225) && !*(unsigned char *)(v2 + 715) && MEMORY[0x19972E990](*v3, "localhost", 9))
  {
LABEL_24:
    if (WebKit::ResourceLoadStatisticsStore::isPrevalentResource((WebKit::ResourceLoadStatisticsStore *)v2, (const WebCore::RegistrableDomain **)(a1 + 16)))
    {
      WebKit::ResourceLoadStatisticsStore::setIsScheduledForAllScriptWrittenStorageRemoval(v2, (const WebCore::RegistrableDomain *)(a1 + 24));
    }
    goto LABEL_27;
  }
  WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 464), (uint64_t)"isScheduledForAllButCookieDataRemoval", (WebCore::SQLiteStatementAutoResetScope *)v16);
  int v10 = WebKit::ResourceLoadStatisticsStore::predicateValueForDomain((WebKit::ResourceLoadStatisticsStore *)v2, v16, *v3);
  if (v10 == 2)
  {
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)v16);
    if (!v4) {
      goto LABEL_24;
    }
  }
  else
  {
    if (!v10)
    {
      WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)v16);
      goto LABEL_24;
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)v16);
  }
LABEL_27:
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v15);
LABEL_28:
  uint64_t v11 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v16, (uint64_t *)(a1 + 40));
  WTF::RunLoop::main(v11);
  WTF::RunLoop::dispatch();
  uint64_t result = v16[0];
  v16[0] = 0;
  if (result) {
    return (WebCore::SQLiteStatement *)(*(uint64_t (**)(WebCore::SQLiteStatement *))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::clearUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C84F8;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::clearUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C84F8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::clearUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[3];
  a1[3] = 0;
  uint64_t v9 = v2;
  uint64_t v3 = *(void **)(v1 + 32);
  if (v3)
  {
    int v4 = (const WebCore::RegistrableDomain *)(a1 + 2);
    char v5 = (void *)WTF::fastMalloc((WTF *)0x10);
    *char v5 = &unk_1EE9C8520;
    v5[1] = v2;
    int v10 = v5;
    WebKit::ResourceLoadStatisticsStore::clearUserInteraction(v3, v4, (uint64_t *)&v10);
    uint64_t result = (uint64_t)v10;
    if (!v10) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  double v7 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v10, &v9);
  WTF::RunLoop::main(v7);
  WTF::RunLoop::dispatch();
  uint64_t v8 = (uint64_t)v10;
  int v10 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::clearUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C8520;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::clearUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C8520;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::clearUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v3, (uint64_t *)(a1 + 8));
  WTF::RunLoop::main(v1);
  WTF::RunLoop::dispatch();
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTimeAdvanceForTesting(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8548;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTimeAdvanceForTesting(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8548;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTimeAdvanceForTesting(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(double **)(*(void *)(a1 + 8) + 32);
  if (v2)
  {
    double v3 = *(double *)(a1 + 16);
    for (double i = v2[81]; i <= v3; double i = i + 86400.0)
    {
      v2[81] = i;
      WebKit::ResourceLoadStatisticsStore::includeTodayAsOperatingDateIfNecessary((WebKit::ResourceLoadStatisticsStore *)v2);
    }
  }
  char v5 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v7, (uint64_t *)(a1 + 24));
  WTF::RunLoop::main(v5);
  WTF::RunLoop::dispatch();
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF **WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  if (!*a1) {
    return 0;
  }
  uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(a1, a2);
  uint64_t v4 = *a1;
  if (!result)
  {
    if (v4) {
      return (WTF **)(v4 + 8 * *(unsigned int *)(v4 - 4));
    }
    else {
      return 0;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasHadUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8570;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasHadUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8570;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasHadUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = *(void *)(a1[1] + 32);
  if (v2) {
    char hasHadUserInteraction = WebKit::ResourceLoadStatisticsStore::hasHadUserInteraction(v2, (const WebCore::RegistrableDomain *)(a1 + 2));
  }
  else {
    char hasHadUserInteraction = 0;
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v5 = &unk_1EE9C8598;
  *(unsigned char *)(v5 + ++*(_DWORD *)(this + 8) = hasHadUserInteraction;
  *(void *)(v5 + 16) = v4;
  uint64_t v7 = v5;
  WTF::RunLoop::main((WTF::RunLoop *)v5);
  WTF::RunLoop::dispatch();
  uint64_t result = v7;
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasHadUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8598;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasHadUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8598;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasHadUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setLastSeen(WebCore::RegistrableDomain &&,WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C85C0;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setLastSeen(WebCore::RegistrableDomain &&,WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C85C0;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setLastSeen(WebCore::RegistrableDomain &&,WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = *(WebKit::DatabaseUtilities **)(a1[1] + 32);
  if (v2)
  {
    double v3 = *((double *)a1 + 3);
    WebKit::DatabaseUtilities::beginTransactionIfNecessary(v2, (uint64_t)v7);
    WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)v2, (const WebCore::RegistrableDomain *)(a1 + 2), (uint64_t)"setLastSeen");
    if (v4) {
      WebKit::ResourceLoadStatisticsStore::updateLastSeen((uint64_t)v2, v3);
    }
    WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v7);
  }
  uint64_t v5 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v7, a1 + 4);
  WTF::RunLoop::main(v5);
  WTF::RunLoop::dispatch();
  uint64_t result = v7[0];
  v7[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::mergeStatisticForTesting(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::RegistrableDomain &,WTF::Seconds,BOOL,WebCore::RegistrableDomain &&,BOOL,BOOL,BOOL,unsigned int,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C85E8;
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  char v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::mergeStatisticForTesting(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::RegistrableDomain &,WTF::Seconds,BOOL,WebCore::RegistrableDomain &&,BOOL,BOOL,BOOL,unsigned int,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C85E8;
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  char v6 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::mergeStatisticForTesting(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::RegistrableDomain &,WTF::Seconds,BOOL,WebCore::RegistrableDomain &&,BOOL,BOOL,BOOL,unsigned int,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(v2 + 32))
  {
    uint64_t v3 = *(_DWORD **)(a1 + 16);
    if (v3) {
      *v3 += 2;
    }
    v14[0] = (uint64_t)v3;
    long long v18 = 0u;
    memset(v19, 0, sizeof(v19));
    long long v20 = 0u;
    long long v21 = 0u;
    uint64_t v22 = 0;
    long long v25 = 0u;
    memset(v26, 0, sizeof(v26));
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    v14[1] = *(void *)(a1 + 40);
    char v15 = *(unsigned char *)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 56);
    char v17 = *(unsigned char *)(a1 + 64);
    __int16 v23 = *(_WORD *)(a1 + 65);
    int v24 = *(_DWORD *)(a1 + 68);
    uint64_t v13 = 0;
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4 && *(_DWORD *)(v4 + 4) && (MEMORY[0x19972E990]() & 1) == 0) {
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v13, (WTF::StringImpl **)(a1 + 24), (uint64_t)v12);
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5 && *(_DWORD *)(v5 + 4) && (MEMORY[0x19972E990]() & 1) == 0) {
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v13, (WTF::StringImpl **)(a1 + 32), (uint64_t)v12);
    }
    char v6 = v13;
    uint64_t v13 = 0;
    *((void *)&v20 + objc_destroyWeak(this + 1) = v6;
    uint64_t v7 = *(WebKit::DatabaseUtilities **)(v2 + 32);
    v12[0] = WTF::fastMalloc((WTF *)0xC8);
    v12[1] = 0x100000001;
    WebCore::ResourceLoadStatistics::ResourceLoadStatistics(v12[0], v14);
    WebKit::ResourceLoadStatisticsStore::mergeStatistics(v7, (uint64_t)v12);
    WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v8);
    if (v13) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v9);
    }
    WebCore::ResourceLoadStatistics::~ResourceLoadStatistics((WebCore::ResourceLoadStatistics *)v14, v9);
  }
  int v10 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v14, (uint64_t *)(a1 + 72));
  WTF::RunLoop::main(v10);
  WTF::RunLoop::dispatch();
  uint64_t result = v14[0];
  v14[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8610;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8610;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1[1] + 32);
  if (v2)
  {
    WebCore::SQLiteDatabase::prepareStatement();
    WebCore::SQLiteDatabase::prepareStatement();
    WebCore::SQLiteDatabase::prepareStatement();
    if (v24 || v22 || v20)
    {
      uint64_t v3 = qword_1EB358460;
      if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
      {
LABEL_6:
        BOOL v4 = 0;
LABEL_7:
        if (v20 != -1) {
          (*(&off_1EE9C7600 + v20))((int)buf, (WebCore::SQLiteStatement *)v19);
        }
        if (v22 != -1) {
          (*(&off_1EE9C7600 + v22))((int)buf, (WebCore::SQLiteStatement *)v21);
        }
        if (v24 != -1) {
          (*(&off_1EE9C7600 + v24))((int)buf, (WebCore::SQLiteStatement *)v23);
        }
        uint64_t v5 = a1[4];
        a1[4] = 0;
        uint64_t v6 = WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v6 = &unk_1EE9C8638;
        *(unsigned char *)(v6 + ++*(_DWORD *)(this + 8) = v4;
        *(void *)(v6 + 16) = v5;
        *(void *)long long buf = v6;
        WTF::RunLoop::main((WTF::RunLoop *)v6);
        WTF::RunLoop::dispatch();
        uint64_t result = *(void **)buf;
        *(void *)long long buf = 0;
        if (result) {
          return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
        }
        return result;
      }
      uint64_t v10 = *(void *)(v2 + 656);
      *(_DWORD *)long long buf = 134218755;
      *(void *)&uint8_t buf[4] = v2;
      __int16 v26 = 2048;
      uint64_t v27 = v10;
      __int16 v28 = 1024;
      int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
      __int16 v30 = 2081;
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
      uint64_t v11 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::isCorrectSubStatisticsCo"
            "unt: failed to prepare statement";
LABEL_20:
      _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, v11, buf, 0x26u);
      goto LABEL_6;
    }
    if (!((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)v2, (const WebCore::RegistrableDomain *)(a1 + 2)) >> 32))goto LABEL_53; {
    if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v23))
    }
    {
      if (v24) {
        goto LABEL_52;
      }
      if (!((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)v2, (const WebCore::RegistrableDomain *)(a1 + 3)) >> 32))goto LABEL_53; {
      if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v23))
      }
      {
        if (!((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)v2, (const WebCore::RegistrableDomain *)(a1 + 2)) >> 32))goto LABEL_53; {
        if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v21))
        }
        {
          if (v22) {
            goto LABEL_52;
          }
          if (!((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)v2, (const WebCore::RegistrableDomain *)(a1 + 3)) >> 32))goto LABEL_53; {
          if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v21))
          }
          {
            if (!((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)v2, (const WebCore::RegistrableDomain *)(a1 + 2)) >> 32))goto LABEL_53; {
            if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v19))
            }
            {
              if (v20) {
                goto LABEL_52;
              }
              if ((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)v2, (const WebCore::RegistrableDomain *)(a1 + 3)) >> 32)
              {
                if (WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v19)) {
                  goto LABEL_36;
                }
                if (!v24)
                {
                  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v23) != 100) {
                    goto LABEL_50;
                  }
                  if (v22) {
                    goto LABEL_52;
                  }
                  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v21) != 100) {
                    goto LABEL_50;
                  }
                  if (v20) {
                    goto LABEL_52;
                  }
                  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v19) != 100)
                  {
LABEL_50:
                    uint64_t v3 = qword_1EB358460;
                    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_6;
                    }
                    uint64_t v15 = *(void *)(v2 + 656);
                    int v16 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
                    uint64_t v17 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
                    *(_DWORD *)long long buf = 134218755;
                    *(void *)&uint8_t buf[4] = v2;
                    __int16 v26 = 2048;
                    uint64_t v27 = v15;
                    __int16 v28 = 1024;
                    int Error = v16;
                    __int16 v30 = 2081;
                    uint64_t ErrorMsg = v17;
                    uint64_t v11 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::isCorrectS"
                          "ubStatisticsCount: failed to step statement";
                    goto LABEL_20;
                  }
                  if (!v24)
                  {
                    BOOL v4 = 0;
                    if (WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v23) != 1) {
                      goto LABEL_7;
                    }
                    if (!v22)
                    {
                      BOOL v4 = 0;
                      if (WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v21) != 1) {
                        goto LABEL_7;
                      }
                      if (!v20)
                      {
                        BOOL v4 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v19) == 1;
                        goto LABEL_7;
                      }
                    }
                  }
                }
LABEL_52:
                std::__throw_bad_variant_access[abi:sn180100]();
              }
LABEL_53:
              long long v18 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
              return WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(v18);
            }
          }
        }
      }
    }
LABEL_36:
    uint64_t v3 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    uint64_t v12 = *(void *)(v2 + 656);
    int v13 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
    uint64_t v14 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
    *(_DWORD *)long long buf = 134218755;
    *(void *)&uint8_t buf[4] = v2;
    __int16 v26 = 2048;
    uint64_t v27 = v12;
    __int16 v28 = 1024;
    int Error = v13;
    __int16 v30 = 2081;
    uint64_t ErrorMsg = v14;
    uint64_t v11 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::isCorrectSubStatisticsCoun"
          "t: failed to bind parameters";
    goto LABEL_20;
  }
  uint64_t v8 = a1[4];
  a1[4] = 0;
  (*(void (**)(uint64_t, void))(*(void *)v8 + 16))(v8, 0);
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);

  return (void *)v9(v8);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8638;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8638;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8660;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  BOOL v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8660;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  BOOL v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = *(WebKit::ResourceLoadStatisticsStore **)(a1[1] + 32);
  if (v2) {
    WebKit::ResourceLoadStatisticsStore::setPrevalentResource(v2, (const WebCore::RegistrableDomain *)(a1 + 2));
  }
  uint64_t v3 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v5, a1 + 3);
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setVeryPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8688;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  BOOL v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setVeryPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8688;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  BOOL v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setVeryPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = *(WebKit::ResourceLoadStatisticsStore **)(a1[1] + 32);
  if (v2) {
    WebKit::ResourceLoadStatisticsStore::setVeryPrevalentResource(v2, (const WebCore::RegistrableDomain *)(a1 + 2));
  }
  uint64_t v3 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v5, a1 + 3);
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setMostRecentWebPushInteractionTime(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C86B0;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setMostRecentWebPushInteractionTime(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C86B0;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setMostRecentWebPushInteractionTime(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1[1] + 32);
  if (v2)
  {
    double v3 = *(double *)(v2 + 648);
    WTF::WallTime::now((WTF::WallTime *)a1);
    double v5 = v4;
    WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)v2, (uint64_t)v14);
    WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v2, (const WebCore::RegistrableDomain *)(a1 + 3), (uint64_t)"setMostRecentWebPushInteractionTime");
    if (v6)
    {
      WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 480), (uint64_t)"setMostRecentWebPushInteractionTime", (WebCore::SQLiteStatementAutoResetScope *)&v13);
      if (!v13
        || WebCore::SQLiteStatement::bindDouble(v13, v3 + v5)
        || WebCore::SQLiteStatement::bindText()
        || WebCore::SQLiteStatement::step(v13) != 101)
      {
        uint64_t v7 = qword_1EB358460;
        if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
        {
          uint64_t v10 = *(void *)(v2 + 656);
          int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
          uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
          *(_DWORD *)long long buf = 134218755;
          *(void *)&uint8_t buf[4] = v2;
          __int16 v16 = 2048;
          uint64_t v17 = v10;
          __int16 v18 = 1024;
          int v19 = Error;
          __int16 v20 = 2081;
          uint64_t v21 = ErrorMsg;
          _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::setMostRecentWebPushInteractionTime: failed to step statement", buf, 0x26u);
        }
      }
      WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v13);
    }
    WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v14);
  }
  uint64_t v8 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(buf, a1 + 2);
  WTF::RunLoop::main(v8);
  WTF::RunLoop::dispatch();
  uint64_t result = *(void *)buf;
  *(void *)long long buf = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C86D8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C86D8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v10 = (WTF::StringImpl *)v2;
  uint64_t v3 = *(void *)(v1 + 32);
  if (v3)
  {
    double v4 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)double v4 = &unk_1EE9C8728;
    *((void *)v4 + objc_destroyWeak(this + 1) = v2;
    uint64_t v9 = v4;
    WebKit::ResourceLoadStatisticsStore::dumpResourceLoadStatistics(v3, (uint64_t *)&v9);
    uint64_t result = v9;
    if (!v9) {
      return result;
    }
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  char v6 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v9 = v6;
  WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()((uint64_t *)&v10);
  uint64_t v8 = v9;
  uint64_t v9 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t result = v10;
  if (v10) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()(uint64_t *a1)
{
  WTF::String::isolatedCopy();
  uint64_t v2 = *a1;
  *a1 = 0;
  uint64_t v6 = v2;
  uint64_t v3 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v3 = &unk_1EE9C8700;
  *((void *)v3 + objc_destroyWeak(this + 1) = v5;
  *((void *)v3 + objc_destroyWeak(this + 2) = v6;
  uint64_t v7 = v3;
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  if (v7) {
    (*(void (**)(WTF::RunLoop *))(*(void *)v7 + 8))(v7);
  }
  return 0;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()(WTF::String &)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8700;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  double v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()(WTF::String &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8700;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  double v4 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()(WTF::String &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0::operator()(void)::{lambda(WTF::String &)#1},void,WTF::String &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C8728;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0::operator()(void)::{lambda(WTF::String &)#1},void,WTF::String &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C8728;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0::operator()(void)::{lambda(WTF::String &)#1},void,WTF::String &>::call(uint64_t a1)
{
  return WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()((uint64_t *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8750;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  double v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8750;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  double v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(WebKit::ResourceLoadStatisticsStore **)(*(void *)(a1 + 8) + 32);
  if (v2) {
    BOOL isPrevalentResource = WebKit::ResourceLoadStatisticsStore::isPrevalentResource(v2, (const WebCore::RegistrableDomain **)(a1 + 16));
  }
  else {
    BOOL isPrevalentResource = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v5 = &unk_1EE9C8778;
  *(unsigned char *)(v5 + ++*(_DWORD *)(this + 8) = isPrevalentResource;
  *(void *)(v5 + 16) = v4;
  uint64_t v7 = v5;
  WTF::RunLoop::main((WTF::RunLoop *)v5);
  WTF::RunLoop::dispatch();
  uint64_t result = v7;
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8778;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8778;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isVeryPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C87A0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isVeryPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C87A0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WebCore::SQLiteStatement *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isVeryPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 32);
  if (v2)
  {
    if (*(unsigned char *)(v2 + 225)
      || *(unsigned char *)(v2 + 715)
      || (MEMORY[0x19972E990](*(void *)(a1 + 16), "localhost", 9) & 1) == 0)
    {
      WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 432), (uint64_t)"isVeryPrevalentResource", (WebCore::SQLiteStatementAutoResetScope *)&v6);
      LOBYTE(vobjc_destroyWeak(this + 2) = WebKit::ResourceLoadStatisticsStore::predicateValueForDomain((WebKit::ResourceLoadStatisticsStore *)v2, &v6, *(const WebCore::RegistrableDomain **)(a1 + 16)) != 0;
      WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v6);
    }
    else
    {
      LOBYTE(vobjc_destroyWeak(this + 2) = 0;
    }
  }
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9C87C8;
  *(unsigned char *)(v4 + ++*(_DWORD *)(this + 8) = v2;
  *(void *)(v4 + 16) = v3;
  uint64_t v6 = (WebCore::SQLiteStatement *)v4;
  WTF::RunLoop::main((WTF::RunLoop *)v4);
  WTF::RunLoop::dispatch();
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (WebCore::SQLiteStatement *)(*(uint64_t (**)(WebCore::SQLiteStatement *))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isVeryPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C87C8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isVeryPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C87C8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isVeryPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubresourceUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C87F0;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubresourceUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C87F0;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WebCore::SQLiteStatement *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubresourceUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = *(WebCore::SQLiteStatement ***)(a1[1] + 32);
  if (v2)
  {
    WebKit::DatabaseUtilities::scopedStatement((uint64_t)v2, v2 + 46, (uint64_t)"isRegisteredAsSubresourceUnder", (WebCore::SQLiteStatementAutoResetScope *)&v7);
    uint64_t v3 = WebKit::ResourceLoadStatisticsStore::domainID(v2, (const WebCore::RegistrableDomain *)(a1 + 2));
    LOBYTE(vobjc_destroyWeak(this + 2) = WebKit::ResourceLoadStatisticsStore::relationshipExists((uint64_t)v2, &v7, v3);
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v7);
  }
  uint64_t v4 = a1[4];
  a1[4] = 0;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v5 = &unk_1EE9C8818;
  *(unsigned char *)(v5 + ++*(_DWORD *)(this + 8) = (_BYTE)v2;
  *(void *)(v5 + 16) = v4;
  uint64_t v7 = (WebCore::SQLiteStatement *)v5;
  WTF::RunLoop::main((WTF::RunLoop *)v5);
  WTF::RunLoop::dispatch();
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (WebCore::SQLiteStatement *)(*(uint64_t (**)(WebCore::SQLiteStatement *))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubresourceUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8818;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubresourceUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8818;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubresourceUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubFrameUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8840;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubFrameUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8840;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WebCore::SQLiteStatement *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubFrameUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = *(WebCore::SQLiteStatement ***)(a1[1] + 32);
  if (v2)
  {
    WebKit::DatabaseUtilities::scopedStatement((uint64_t)v2, v2 + 45, (uint64_t)"isRegisteredAsSubFrameUnder", (WebCore::SQLiteStatementAutoResetScope *)&v7);
    uint64_t v3 = WebKit::ResourceLoadStatisticsStore::domainID(v2, (const WebCore::RegistrableDomain *)(a1 + 2));
    LOBYTE(vobjc_destroyWeak(this + 2) = WebKit::ResourceLoadStatisticsStore::relationshipExists((uint64_t)v2, &v7, v3);
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v7);
  }
  uint64_t v4 = a1[4];
  a1[4] = 0;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v5 = &unk_1EE9C8868;
  *(unsigned char *)(v5 + ++*(_DWORD *)(this + 8) = (_BYTE)v2;
  *(void *)(v5 + 16) = v4;
  uint64_t v7 = (WebCore::SQLiteStatement *)v5;
  WTF::RunLoop::main((WTF::RunLoop *)v5);
  WTF::RunLoop::dispatch();
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (WebCore::SQLiteStatement *)(*(uint64_t (**)(WebCore::SQLiteStatement *))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubFrameUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8868;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubFrameUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8868;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubFrameUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsRedirectingTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8890;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsRedirectingTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8890;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WebCore::SQLiteStatement *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsRedirectingTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = *(WebCore::SQLiteStatement ***)(a1[1] + 32);
  if (v2)
  {
    WebKit::DatabaseUtilities::scopedStatement((uint64_t)v2, v2 + 47, (uint64_t)"isRegisteredAsRedirectingTo", (WebCore::SQLiteStatementAutoResetScope *)&v7);
    uint64_t v3 = WebKit::ResourceLoadStatisticsStore::domainID(v2, (const WebCore::RegistrableDomain *)(a1 + 2));
    LOBYTE(vobjc_destroyWeak(this + 2) = WebKit::ResourceLoadStatisticsStore::relationshipExists((uint64_t)v2, &v7, v3);
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v7);
  }
  uint64_t v4 = a1[4];
  a1[4] = 0;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v5 = &unk_1EE9C88B8;
  *(unsigned char *)(v5 + ++*(_DWORD *)(this + 8) = (_BYTE)v2;
  *(void *)(v5 + 16) = v4;
  uint64_t v7 = (WebCore::SQLiteStatement *)v5;
  WTF::RunLoop::main((WTF::RunLoop *)v5);
  WTF::RunLoop::dispatch();
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (WebCore::SQLiteStatement *)(*(uint64_t (**)(WebCore::SQLiteStatement *))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsRedirectingTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C88B8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsRedirectingTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C88B8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsRedirectingTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::clearPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C88E0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::clearPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C88E0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::clearPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1[1] + 32);
  if (v2)
  {
    WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)v2, (uint64_t)v11);
    WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v2, (const WebCore::RegistrableDomain *)(a1 + 2), (uint64_t)"clearPrevalentResource");
    if (v3)
    {
      WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 440), (uint64_t)"clearPrevalentResource", (WebCore::SQLiteStatementAutoResetScope *)&v10);
      if (!v10
        || WebCore::SQLiteStatement::bindText()
        || WebCore::SQLiteStatement::step(v10) != 101)
      {
        uint64_t v4 = qword_1EB358460;
        if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
        {
          uint64_t v7 = *(void *)(v2 + 656);
          int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
          uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
          *(_DWORD *)long long buf = 134218755;
          *(void *)&uint8_t buf[4] = v2;
          __int16 v13 = 2048;
          uint64_t v14 = v7;
          __int16 v15 = 1024;
          int v16 = Error;
          __int16 v17 = 2081;
          uint64_t v18 = ErrorMsg;
          _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::clearPrevalentResource: failed to step statement", buf, 0x26u);
        }
      }
      WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v10);
    }
    WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v11);
  }
  uint64_t v5 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(buf, a1 + 3);
  WTF::RunLoop::main(v5);
  WTF::RunLoop::dispatch();
  uint64_t result = *(void *)buf;
  *(void *)long long buf = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setGrandfathered(WebCore::RegistrableDomain &&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8908;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setGrandfathered(WebCore::RegistrableDomain &&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8908;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setGrandfathered(WebCore::RegistrableDomain &&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = *(WebCore::SQLiteStatement ***)(a1[1] + 32);
  if (v2) {
    WebKit::ResourceLoadStatisticsStore::setGrandfathered(v2, (const WebCore::RegistrableDomain *)(a1 + 2));
  }
  uint64_t v3 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v5, a1 + 4);
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isGrandfathered(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8930;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isGrandfathered(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8930;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

WebCore::SQLiteStatement *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isGrandfathered(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(WebCore::SQLiteStatement ***)(*(void *)(a1 + 8) + 32);
  if (v2)
  {
    WebKit::DatabaseUtilities::scopedStatement((uint64_t)v2, v2 + 61, (uint64_t)"isGrandfathered", (WebCore::SQLiteStatementAutoResetScope *)&v6);
    LOBYTE(vobjc_destroyWeak(this + 2) = WebKit::ResourceLoadStatisticsStore::predicateValueForDomain((WebKit::ResourceLoadStatisticsStore *)v2, &v6, *(const WebCore::RegistrableDomain **)(a1 + 24)) != 0;
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v6);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9C8958;
  *(unsigned char *)(v4 + ++*(_DWORD *)(this + 8) = (_BYTE)v2;
  *(void *)(v4 + 16) = v3;
  uint64_t v6 = (WebCore::SQLiteStatement *)v4;
  WTF::RunLoop::main((WTF::RunLoop *)v4);
  WTF::RunLoop::dispatch();
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (WebCore::SQLiteStatement *)(*(uint64_t (**)(WebCore::SQLiteStatement *))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isGrandfathered(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8958;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isGrandfathered(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8958;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isGrandfathered(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubframeUnderTopFrameDomain(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8980;
  uint64_t v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubframeUnderTopFrameDomain(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8980;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubframeUnderTopFrameDomain(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  v14[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(WebKit::DatabaseUtilities **)(a1[1] + 32);
  if (!v2) {
    goto LABEL_17;
  }
  WebKit::DatabaseUtilities::beginTransactionIfNecessary(v2, (uint64_t)v12);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)v2, (const WebCore::RegistrableDomain *)(a1 + 3), (uint64_t)"setSubframeUnderTopFrameDomain");
  if (v3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v4 = (WTF::StringImpl *)v13[0];
    uint64_t v11 = v13[0];
    uint64_t v5 = (WTF::StringImpl *)a1[4];
    if (v5) {
      *(_DWORD *)v5 += 2;
    }
    v14[0] = v5;
    uint64_t v10 = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v10, v14, (uint64_t)v13);
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)v2, &v11, (uint64_t *)&v10);
    if (v10) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v6);
    }
    uint64_t v7 = v14[0];
    v14[0] = 0;
    if (!v7)
    {
LABEL_10:
      if (!v4) {
        goto LABEL_16;
      }
LABEL_13:
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v6);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)v7 != 2)
    {
      *(_DWORD *)v7 -= 2;
      goto LABEL_10;
    }
    WTF::StringImpl::destroy(v7, v6);
    if (v4) {
      goto LABEL_13;
    }
  }
LABEL_16:
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v12);
LABEL_17:
  uint64_t v8 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v13, a1 + 2);
  WTF::RunLoop::main(v8);
  WTF::RunLoop::dispatch();
  uint64_t result = v13[0];
  v13[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubresourceUnderTopFrameDomain(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C89A8;
  char v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubresourceUnderTopFrameDomain(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C89A8;
  char v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubresourceUnderTopFrameDomain(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  v14[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(WebKit::DatabaseUtilities **)(a1[1] + 32);
  if (!v2) {
    goto LABEL_17;
  }
  WebKit::DatabaseUtilities::beginTransactionIfNecessary(v2, (uint64_t)v12);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)v2, (const WebCore::RegistrableDomain *)(a1 + 3), (uint64_t)"setSubresourceUnderTopFrameDomain");
  if (v3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v4 = (WTF::StringImpl *)v13[0];
    uint64_t v11 = v13[0];
    uint64_t v5 = (WTF::StringImpl *)a1[4];
    if (v5) {
      *(_DWORD *)v5 += 2;
    }
    v14[0] = v5;
    uint64_t v10 = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v10, v14, (uint64_t)v13);
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)v2, &v11, (uint64_t *)&v10);
    if (v10) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v6);
    }
    uint64_t v7 = v14[0];
    v14[0] = 0;
    if (!v7)
    {
LABEL_10:
      if (!v4) {
        goto LABEL_16;
      }
LABEL_13:
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v6);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)v7 != 2)
    {
      *(_DWORD *)v7 -= 2;
      goto LABEL_10;
    }
    WTF::StringImpl::destroy(v7, v6);
    if (v4) {
      goto LABEL_13;
    }
  }
LABEL_16:
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v12);
LABEL_17:
  uint64_t v8 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v13, a1 + 2);
  WTF::RunLoop::main(v8);
  WTF::RunLoop::dispatch();
  uint64_t result = v13[0];
  v13[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C89D0;
  char v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C89D0;
  char v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  v14[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(WebKit::DatabaseUtilities **)(a1[1] + 32);
  if (!v2) {
    goto LABEL_17;
  }
  WebKit::DatabaseUtilities::beginTransactionIfNecessary(v2, (uint64_t)v12);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)v2, (const WebCore::RegistrableDomain *)(a1 + 3), (uint64_t)"setSubresourceUniqueRedirectTo");
  if (v3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v4 = (WTF::StringImpl *)v13[0];
    uint64_t v11 = v13[0];
    uint64_t v5 = (WTF::StringImpl *)a1[4];
    if (v5) {
      *(_DWORD *)v5 += 2;
    }
    v14[0] = v5;
    uint64_t v10 = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v10, v14, (uint64_t)v13);
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)v2, &v11, (uint64_t *)&v10);
    if (v10) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v6);
    }
    uint64_t v7 = v14[0];
    v14[0] = 0;
    if (!v7)
    {
LABEL_10:
      if (!v4) {
        goto LABEL_16;
      }
LABEL_13:
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v6);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)v7 != 2)
    {
      *(_DWORD *)v7 -= 2;
      goto LABEL_10;
    }
    WTF::StringImpl::destroy(v7, v6);
    if (v4) {
      goto LABEL_13;
    }
  }
LABEL_16:
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v12);
LABEL_17:
  uint64_t v8 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v13, a1 + 2);
  WTF::RunLoop::main(v8);
  WTF::RunLoop::dispatch();
  uint64_t result = v13[0];
  v13[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectFrom(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C89F8;
  char v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectFrom(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C89F8;
  char v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectFrom(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  v14[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(WebKit::DatabaseUtilities **)(a1[1] + 32);
  if (!v2) {
    goto LABEL_17;
  }
  WebKit::DatabaseUtilities::beginTransactionIfNecessary(v2, (uint64_t)v12);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)v2, (const WebCore::RegistrableDomain *)(a1 + 3), (uint64_t)"setSubresourceUniqueRedirectFrom");
  if (v3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v4 = (WTF::StringImpl *)v13[0];
    uint64_t v11 = v13[0];
    uint64_t v5 = (WTF::StringImpl *)a1[4];
    if (v5) {
      *(_DWORD *)v5 += 2;
    }
    v14[0] = v5;
    uint64_t v10 = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v10, v14, (uint64_t)v13);
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)v2, &v11, (uint64_t *)&v10);
    if (v10) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v6);
    }
    uint64_t v7 = v14[0];
    v14[0] = 0;
    if (!v7)
    {
LABEL_10:
      if (!v4) {
        goto LABEL_16;
      }
LABEL_13:
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v6);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)v7 != 2)
    {
      *(_DWORD *)v7 -= 2;
      goto LABEL_10;
    }
    WTF::StringImpl::destroy(v7, v6);
    if (v4) {
      goto LABEL_13;
    }
  }
LABEL_16:
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v12);
LABEL_17:
  uint64_t v8 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v13, a1 + 2);
  WTF::RunLoop::main(v8);
  WTF::RunLoop::dispatch();
  uint64_t result = v13[0];
  v13[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8A20;
  char v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8A20;
  char v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  v18[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(WebKit::DatabaseUtilities **)(a1[1] + 32);
  if (!v2) {
    goto LABEL_30;
  }
  WebKit::DatabaseUtilities::beginTransactionIfNecessary(v2, (uint64_t)v16);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)v2, (const WebCore::RegistrableDomain *)(a1 + 3), (uint64_t)"setTopFrameUniqueRedirectTo");
  if (!v3) {
    goto LABEL_29;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v4 = (WTF::StringImpl *)v17[0];
  uint64_t v15 = v17[0];
  uint64_t v5 = (WTF::StringImpl *)a1[4];
  if (v5) {
    *(_DWORD *)v5 += 2;
  }
  v18[0] = v5;
  uint64_t v14 = 0;
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v14, v18, (uint64_t)v17);
  WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)v2, &v15, (uint64_t *)&v14);
  if (v14) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, v6);
  }
  uint64_t v7 = v18[0];
  v18[0] = 0;
  if (!v7)
  {
LABEL_10:
    if (!v4) {
      goto LABEL_16;
    }
LABEL_13:
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v6);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
    goto LABEL_16;
  }
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v7, v6);
  if (v4) {
    goto LABEL_13;
  }
LABEL_16:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v8 = (WTF::StringImpl *)v17[0];
  uint64_t v15 = v17[0];
  uint64_t v9 = (WTF::StringImpl *)a1[4];
  if (v9) {
    *(_DWORD *)v9 += 2;
  }
  v18[0] = v9;
  uint64_t v14 = 0;
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v14, v18, (uint64_t)v17);
  WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)v2, &v15, (uint64_t *)&v14);
  if (v14) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, v10);
  }
  uint64_t v11 = v18[0];
  v18[0] = 0;
  if (!v11)
  {
LABEL_23:
    if (!v8) {
      goto LABEL_29;
    }
LABEL_26:
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v10);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
    goto LABEL_29;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_23;
  }
  WTF::StringImpl::destroy(v11, v10);
  if (v8) {
    goto LABEL_26;
  }
LABEL_29:
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v16);
LABEL_30:
  uint64_t v12 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v17, a1 + 2);
  WTF::RunLoop::main(v12);
  WTF::RunLoop::dispatch();
  uint64_t result = v17[0];
  v17[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectFrom(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8A48;
  char v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectFrom(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8A48;
  char v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectFrom(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  v14[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(WebKit::DatabaseUtilities **)(a1[1] + 32);
  if (!v2) {
    goto LABEL_17;
  }
  WebKit::DatabaseUtilities::beginTransactionIfNecessary(v2, (uint64_t)v12);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)v2, (const WebCore::RegistrableDomain *)(a1 + 3), (uint64_t)"setTopFrameUniqueRedirectFrom");
  if (v3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v4 = (WTF::StringImpl *)v13[0];
    uint64_t v11 = v13[0];
    uint64_t v5 = (WTF::StringImpl *)a1[4];
    if (v5) {
      *(_DWORD *)v5 += 2;
    }
    v14[0] = v5;
    uint64_t v10 = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v10, v14, (uint64_t)v13);
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)v2, &v11, (uint64_t *)&v10);
    if (v10) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v6);
    }
    uint64_t v7 = v14[0];
    v14[0] = 0;
    if (!v7)
    {
LABEL_10:
      if (!v4) {
        goto LABEL_16;
      }
LABEL_13:
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v6);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)v7 != 2)
    {
      *(_DWORD *)v7 -= 2;
      goto LABEL_10;
    }
    WTF::StringImpl::destroy(v7, v6);
    if (v4) {
      goto LABEL_13;
    }
  }
LABEL_16:
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v12);
LABEL_17:
  uint64_t v8 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v13, a1 + 2);
  WTF::RunLoop::main(v8);
  WTF::RunLoop::dispatch();
  uint64_t result = v13[0];
  v13[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleCookieBlockingUpdate(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8A70;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleCookieBlockingUpdate(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8A70;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleCookieBlockingUpdate(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 32);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (v1)
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v4 = &unk_1EE9C8A98;
    v4[1] = v3;
    uint64_t v7 = v4;
    WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(v1, (uint64_t *)&v7);
    uint64_t result = (uint64_t)v7;
    if (!v7) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  uint64_t v6 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v7, v2);
  WTF::RunLoop::main(v6);
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleCookieBlockingUpdate(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C8A98;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleCookieBlockingUpdate(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C8A98;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleCookieBlockingUpdate(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v3, (uint64_t *)(a1 + 8));
  WTF::RunLoop::main(v1);
  WTF::RunLoop::dispatch();
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8AC0;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8AC0;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(v2 + 32))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
    uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v4 = &unk_1EE9C8AE8;
    v4[1] = v3;
    uint64_t v5 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v5 = 1;
    *(void *)(v5 + ++*(_DWORD *)(this + 8) = v4;
    uint64_t v6 = *(void **)(v2 + 32);
    uint64_t v7 = *(atomic_uchar *volatile **)(a1 + 16);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v7);
    char v8 = *(unsigned char *)(a1 + 24);
    atomic_fetch_add((atomic_uint *volatile)v5, 1u);
    uint64_t v9 = WTF::fastMalloc((WTF *)0x28);
    *(void *)uint64_t v9 = &unk_1EE9C8B10;
    *(void *)(v9 + ++*(_DWORD *)(this + 8) = v2;
    *(void *)(v9 + 16) = v7;
    *(unsigned char *)(v9 + 24) = v8;
    *(void *)(v9 + 3objc_destroyWeak(this + 2) = v5;
    WebCore::SQLiteDatabase::clearAllTables((WebCore::SQLiteDatabase *)(v6 + 2));
    if (!WebKit::ResourceLoadStatisticsStore::createSchema((WebKit::ResourceLoadStatisticsStore *)v6))
    {
      uint64_t v10 = qword_1EB358460;
      if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
      {
        uint64_t v39 = v6[82];
        *(_DWORD *)long long buf = 134218240;
        *(void *)&uint8_t buf[4] = v6;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v39;
        _os_log_error_impl(&dword_1985F2000, v10, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] - ResourceLoadStatisticsStore::clearDatabaseContents: failed to create schema", buf, 0x16u);
      }
    }
    uint64_t v11 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v11 = 1;
    *(void *)(v11 + ++*(_DWORD *)(this + 8) = v9;
    atomic_fetch_add((atomic_uint *volatile)v11, 1u);
    uint64_t v12 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v12 = &unk_1EE9C7C60;
    *((void *)v12 + objc_destroyWeak(this + 1) = v11;
    WTF::RunLoop::main(v12);
    __int16 v13 = (atomic_uchar *volatile *)v6[13];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v13);
    uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v14 = &unk_1EE9C78F0;
    v14[1] = v13;
    uint64_t v14[2] = v12;
    *(void *)long long buf = v14;
    WTF::RunLoop::dispatch();
    uint64_t v15 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    WebKit::ResourceLoadStatisticsStore::ensurePrevalentResourcesForDebugMode(v44, v6);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v40, (uint64_t)v44);
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    atomic_fetch_add((atomic_uint *volatile)v11, 1u);
    int v16 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
    *(void *)int v16 = &unk_1EE9C7C88;
    *((void *)v16 + objc_destroyWeak(this + 1) = v11;
    WTF::RunLoop::main(v16);
    __int16 v17 = (atomic_uchar *volatile *)v6[13];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v17);
    *(void *)long long buf = v17;
    WebKit::RegistrableDomainsToBlockCookiesFor::isolatedCopy(&buf[8], (uint64_t)v40);
    long long v52 = v16;
    uint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x50);
    *uint64_t v18 = &unk_1EE9C7850;
    v18[1] = *(void *)buf;
    uint64_t v19 = *(void *)&buf[8];
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v18[2] = v19;
    uint64_t v20 = *(void *)&buf[16];
    *(void *)&uint8_t buf[16] = 0;
    unsigned char v18[3] = v20;
    uint64_t v21 = v47;
    uint64_t v47 = 0;
    v18[4] = v21;
    uint64_t v22 = v48;
    uint64_t v48 = 0;
    v18[5] = v22;
    uint64_t v23 = v49;
    uint64_t v49 = 0;
    v18[6] = v23;
    uint64_t v24 = v50;
    uint64_t v50 = 0;
    v18[7] = v24;
    uint64_t v25 = v51;
    uint64_t v51 = 0;
    v18[8] = v25;
    v18[9] = v16;
    uint64_t v45 = v18;
    WTF::RunLoop::dispatch();
    uint64_t v27 = v45;
    uint64_t v45 = 0;
    if (v27) {
      (*(void (**)(void *))(*v27 + 8))(v27);
    }
    long long v52 = 0;
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v26);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v28);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf[8], v29);
    char v31 = *(atomic_uchar ***)buf;
    *(void *)long long buf = 0;
    if (v31) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v31);
    }
    if (v43) {
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v43, v30);
    }
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v30);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v32);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v33);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v34);
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v11);
    uint64_t v35 = *(void *)(v2 + 32);
    if (*(unsigned char *)(v35 + 272)) {
      *(unsigned char *)(v35 + 27objc_destroyWeak(this + 2) = 0;
    }
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v5);
  }
  else
  {
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v37 = qword_1EB358460;
      if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1985F2000, v37, OS_LOG_TYPE_DEFAULT, "WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent Before being cleared, m_statisticsStore is null when trying to grandfather data.", buf, 2u);
      }
    }
    __int16 v38 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(buf, (uint64_t *)(a1 + 32));
    WTF::RunLoop::main(v38);
    WTF::RunLoop::dispatch();
    uint64_t result = *(unsigned int **)buf;
    *(void *)long long buf = 0;
    if (result) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C8AE8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C8AE8;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v3, (uint64_t *)(a1 + 8));
  WTF::RunLoop::main(v1);
  WTF::RunLoop::dispatch();
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8B10;
  uint64_t v2 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t v3 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8B10;
  uint64_t v3 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }
  uint64_t v4 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::call(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v1 = *(void *)(a1 + 8);
    uint64_t v2 = *(void *)(v1 + 32);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
      uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v4 = &unk_1EE9C8B38;
      v4[1] = v3;
      uint64_t v7 = v4;
      WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(v2, (uint64_t *)&v7);
      if (v7) {
        (*(void (**)(void *))(*v7 + 8))(v7);
      }
      *(unsigned char *)(*(void *)(v1 + 32) + 719) = 1;
    }
    else
    {
      uint64_t v5 = qword_1EB358460;
      if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent After being cleared, m_statisticsStore is null when trying to grandfather data.", v6, 2u);
      }
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#2}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C8B38;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#2}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C8B38;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::domainIDExistsInDatabase(int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8B60;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::domainIDExistsInDatabase(int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8B60;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::domainIDExistsInDatabase(int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 32);
  if (v2)
  {
    uint64_t v3 = (WebCore::SQLiteStatement **)(v2 + 568);
    WebKit::DatabaseUtilities::scopedStatement(*(void *)(*(void *)(a1 + 8) + 32), (WebCore::SQLiteStatement **)(v2 + 568), (uint64_t)"domainIDExistsInDatabase", (WebCore::SQLiteStatementAutoResetScope *)&v28);
    uint64_t v4 = (WebCore::SQLiteStatement **)(v2 + 576);
    WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 576), (uint64_t)"domainIDExistsInDatabase linkDecorationExistsStatement", (WebCore::SQLiteStatementAutoResetScope *)&v27);
    uint64_t v5 = (WebCore::SQLiteStatement **)(v2 + 584);
    WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 584), (uint64_t)"domainIDExistsInDatabase subFrameExistsStatement", (WebCore::SQLiteStatementAutoResetScope *)&v26);
    uint64_t v6 = (WebCore::SQLiteStatement **)(v2 + 592);
    WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 592), (uint64_t)"domainIDExistsInDatabase subResourceExistsStatement", (WebCore::SQLiteStatementAutoResetScope *)&v25);
    uint64_t v7 = (WebCore::SQLiteStatement **)(v2 + 600);
    WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 600), (uint64_t)"domainIDExistsInDatabase uniqueRedirectExistsStatement", (WebCore::SQLiteStatementAutoResetScope *)&v24);
    char v8 = (WebCore::SQLiteStatement **)(v2 + 608);
    WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 608), (uint64_t)"domainIDExistsInDatabase observedDomainsExistsStatement", (WebCore::SQLiteStatementAutoResetScope *)&v23);
    if (!v28
      || !v27
      || !v26
      || !v25
      || !v24
      || !v23
      || WebCore::SQLiteStatement::bindInt(*v3)
      || WebCore::SQLiteStatement::bindInt(*v3)
      || WebCore::SQLiteStatement::bindInt(*v4)
      || WebCore::SQLiteStatement::bindInt(*v4)
      || WebCore::SQLiteStatement::bindInt(*v5)
      || WebCore::SQLiteStatement::bindInt(*v5)
      || WebCore::SQLiteStatement::bindInt(*v6)
      || WebCore::SQLiteStatement::bindInt(*v6)
      || WebCore::SQLiteStatement::bindInt(*v7)
      || WebCore::SQLiteStatement::bindInt(*v7)
      || WebCore::SQLiteStatement::bindInt(*v8))
    {
      uint64_t v9 = qword_1EB358460;
      if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
        goto LABEL_20;
      }
      uint64_t v16 = *(void *)(v2 + 656);
      int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
      *(_DWORD *)long long buf = 134218755;
      *(void *)&uint8_t buf[4] = v2;
      __int16 v30 = 2048;
      uint64_t v31 = v16;
      __int16 v32 = 1024;
      int v33 = Error;
      __int16 v34 = 2081;
      uint64_t v35 = ErrorMsg;
      uint64_t v19 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::domainIDExistsInDatabase"
            ": failed to bind parameters";
    }
    else
    {
      if (WebCore::SQLiteStatement::step(*v3) == 100
        && WebCore::SQLiteStatement::step(*v4) == 100
        && WebCore::SQLiteStatement::step(*v5) == 100
        && WebCore::SQLiteStatement::step(*v6) == 100
        && WebCore::SQLiteStatement::step(*v7) == 100
        && WebCore::SQLiteStatement::step(*v8) == 100)
      {
        BOOL v10 = WebCore::SQLiteStatement::columnInt(*v3)
           || WebCore::SQLiteStatement::columnInt(*v4)
           || WebCore::SQLiteStatement::columnInt(*v5)
           || WebCore::SQLiteStatement::columnInt(*v6)
           || WebCore::SQLiteStatement::columnInt(*v7)
           || WebCore::SQLiteStatement::columnInt(*v8) != 0;
        goto LABEL_21;
      }
      uint64_t v9 = qword_1EB358460;
      if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
      {
LABEL_20:
        BOOL v10 = 0;
LABEL_21:
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v23);
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v24);
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v25);
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v26);
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v27);
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v28);
        uint64_t v11 = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = 0;
        uint64_t v12 = WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v12 = &unk_1EE9C8B88;
        *(unsigned char *)(v12 + ++*(_DWORD *)(this + 8) = v10;
        *(void *)(v12 + 16) = v11;
        *(void *)long long buf = v12;
        WTF::RunLoop::main((WTF::RunLoop *)v12);
        WTF::RunLoop::dispatch();
        uint64_t result = *(void *)buf;
        *(void *)long long buf = 0;
        if (result) {
          return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
        return result;
      }
      uint64_t v20 = *(void *)(v2 + 656);
      int v21 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
      uint64_t v22 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
      *(_DWORD *)long long buf = 134218755;
      *(void *)&uint8_t buf[4] = v2;
      __int16 v30 = 2048;
      uint64_t v31 = v20;
      __int16 v32 = 1024;
      int v33 = v21;
      __int16 v34 = 2081;
      uint64_t v35 = v22;
      uint64_t v19 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::domainIDExistsInDatabase"
            ": failed to step statement";
    }
    _os_log_error_impl(&dword_1985F2000, v9, OS_LOG_TYPE_ERROR, v19, buf, 0x26u);
    goto LABEL_20;
  }
  uint64_t v14 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v14 + 16))(v14, 0);
  uint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 8);

  return v15(v14);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::domainIDExistsInDatabase(int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8B88;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::domainIDExistsInDatabase(int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8B88;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::domainIDExistsInDatabase(int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTimeToLiveUserInteraction(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8BB0;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTimeToLiveUserInteraction(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8BB0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTimeToLiveUserInteraction(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v1 = *(void *)(a1[1] + 32);
  if (v1)
  {
    uint64_t v2 = a1[2];
    if (!*(unsigned char *)(v1 + 160)) {
      *(unsigned char *)(v1 + 160) = 1;
    }
    *(void *)(v1 + 15objc_destroyWeak(this + 2) = v2;
  }
  uint64_t v3 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v5, a1 + 3);
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setMinimumTimeBetweenDataRecordsRemoval(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8BD8;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setMinimumTimeBetweenDataRecordsRemoval(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8BD8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setMinimumTimeBetweenDataRecordsRemoval(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v1 = *(void *)(a1[1] + 32);
  if (v1) {
    *(void *)(v1 + 16++*(_DWORD *)(this + 8) = a1[2];
  }
  uint64_t v2 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v4, a1 + 3);
  WTF::RunLoop::main(v2);
  WTF::RunLoop::dispatch();
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setGrandfatheringTime(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8C00;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setGrandfatheringTime(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8C00;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setGrandfatheringTime(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v1 = *(void *)(a1[1] + 32);
  if (v1) {
    *(void *)(v1 + 176) = a1[2];
  }
  uint64_t v2 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v4, a1 + 3);
  WTF::RunLoop::main(v2);
  WTF::RunLoop::dispatch();
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::HashMapTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>::translate<WebCore::RegistrableDomain const&,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>> WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineAdd<WebCore::RegistrableDomain const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WebCore::RegistrableDomain const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1}>(uint64_t *a1, WTF::StringImpl **a2, uint64_t **a3)
{
  WTF::String::operator=(a1, a2);
  uint64_t v5 = *a3;
  uint64_t v6 = **a3;
  *uint64_t v5 = 0;
  v10[0] = v6;
  uint64_t v7 = v5[1];
  v5[1] = 0;
  v10[1] = v7;
  WTF::GenericHashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)(a1 + 1), v10);
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v8);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::SetDomainsWithCrossPageStorageAccess,WebKit::WebResourceLoadStatisticsStore::callUpdatePrevalentDomainsToBlockCookiesForHandler(WebKit::RegistrableDomainsToBlockCookiesFor const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebResourceLoadStatisticsStore::callUpdatePrevalentDomainsToBlockCookiesForHandler(WebKit::RegistrableDomainsToBlockCookiesFor const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C8C28;
  uint64_t v3 = a1[2];
  if (v3) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::SetDomainsWithCrossPageStorageAccess,WebKit::WebResourceLoadStatisticsStore::callUpdatePrevalentDomainsToBlockCookiesForHandler(WebKit::RegistrableDomainsToBlockCookiesFor const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebResourceLoadStatisticsStore::callUpdatePrevalentDomainsToBlockCookiesForHandler(WebKit::RegistrableDomainsToBlockCookiesFor const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8C28;
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::SetDomainsWithCrossPageStorageAccess,WebKit::WebResourceLoadStatisticsStore::callUpdatePrevalentDomainsToBlockCookiesForHandler(WebKit::RegistrableDomainsToBlockCookiesFor const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebResourceLoadStatisticsStore::callUpdatePrevalentDomainsToBlockCookiesForHandler(WebKit::RegistrableDomainsToBlockCookiesFor const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::operator=((uint64_t *)(*(void *)(a1 + 8) + 96), (uint64_t *)(a1 + 16));
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setMaxStatisticsEntries(unsigned long,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8C50;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setMaxStatisticsEntries(unsigned long,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8C50;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setMaxStatisticsEntries(unsigned long,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v1 = *(void *)(a1[1] + 32);
  if (v1) {
    *(void *)(v1 + 144) = a1[2];
  }
  uint64_t v2 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v4, a1 + 3);
  WTF::RunLoop::main(v2);
  WTF::RunLoop::dispatch();
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPruneEntriesDownTo(unsigned long,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8C78;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPruneEntriesDownTo(unsigned long,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8C78;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPruneEntriesDownTo(unsigned long,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v1 = *(void *)(a1[1] + 32);
  if (v1) {
    *(void *)(v1 + 136) = a1[2];
  }
  uint64_t v2 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v4, a1 + 3);
  WTF::RunLoop::main(v2);
  WTF::RunLoop::dispatch();
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resetParametersToDefaultValues(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8CA0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resetParametersToDefaultValues(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8CA0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resetParametersToDefaultValues(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 32);
  if (v3)
  {
    *(_OWORD *)(v3 + 136) = xmmword_1994F6410;
    *(unsigned char *)(v3 + 15objc_destroyWeak(this + 2) = 0;
    *(unsigned char *)(v3 + 160) = 0;
    *(_OWORD *)(v3 + 16++*(_DWORD *)(this + 8) = xmmword_1994F6420;
    *(int64x2_t *)(v3 + 184) = vdupq_n_s64(0x4122750000000000uLL);
    *(_OWORD *)(v3 + 200) = xmmword_1994F6430;
    *(void *)(v3 + 216) = 10;
    *(_WORD *)(v3 + 224) = 1;
    uint64_t v4 = *(WTF::StringImpl ***)(v3 + 296);
    if (v4)
    {
      *(void *)(v3 + 296) = 0;
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
    }
    *(void *)(v3 + 64++*(_DWORD *)(this + 8) = 0;
    *(_DWORD *)(v3 + 664) = 0;
    if (*(unsigned char *)(v3 + 696)) {
      *(unsigned char *)(v3 + 696) = 0;
    }
    if (*(unsigned char *)(v3 + 680)) {
      *(unsigned char *)(v3 + 680) = 0;
    }
  }
  uint64_t v5 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v7, (uint64_t *)(a1 + 16));
  WTF::RunLoop::main(v5);
  WTF::RunLoop::dispatch();
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::removeDataForDomain(WebCore::RegistrableDomain,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8CC8;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::removeDataForDomain(WebCore::RegistrableDomain,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8CC8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::removeDataForDomain(WebCore::RegistrableDomain,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[1];
  uint64_t v3 = *(void *)(v2 + 32);
  if (v3
    && (unint64_t)WebKit::ResourceLoadStatisticsStore::domainID(*(WebCore::SQLiteStatement ***)(v2 + 32), (const WebCore::RegistrableDomain *)(a1 + 2)) >> 32)
  {
    WebKit::DatabaseUtilities::scopedStatement(v3, (WebCore::SQLiteStatement **)(v3 + 616), (uint64_t)"removeDataForDomain", (WebCore::SQLiteStatementAutoResetScope *)&v10);
    if (!v10
      || WebCore::SQLiteStatement::bindInt(v10)
      || WebCore::SQLiteStatement::step(v10) != 101)
    {
      uint64_t v4 = qword_1EB358460;
      if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = *(void *)(v3 + 656);
        int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v3 + 16));
        uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v3 + 16));
        *(_DWORD *)long long buf = 134218755;
        *(void *)&uint8_t buf[4] = v3;
        __int16 v12 = 2048;
        uint64_t v13 = v7;
        __int16 v14 = 1024;
        int v15 = Error;
        __int16 v16 = 2081;
        uint64_t v17 = ErrorMsg;
        _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::removeDataForDomain: failed to step statement", buf, 0x26u);
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v10);
  }
  uint64_t v5 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(buf, a1 + 3);
  WTF::RunLoop::main(v5);
  WTF::RunLoop::dispatch();
  uint64_t result = *(void *)buf;
  *(void *)long long buf = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomains(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8CF0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomains(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8CF0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomains(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 32);
  if (v2)
  {
    WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 528), (uint64_t)"allDomains", (WebCore::SQLiteStatementAutoResetScope *)&v19);
    uint64_t v3 = v19;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    if (v19)
    {
      while (WebCore::SQLiteStatement::step(v3) == 100)
      {
        WebCore::SQLiteStatement::columnText(v19);
        WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v24, &v25);
        LODWORD(v5) = HIDWORD(v23);
        if (HIDWORD(v23) == v23)
        {
          uint64_t v9 = (uint64_t *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v22, HIDWORD(v23) + 1, (unint64_t)&v25);
          uint64_t v5 = HIDWORD(v23);
          uint64_t v10 = v22;
          uint64_t v11 = *v9;
          *uint64_t v9 = 0;
          *(void *)(v10 + 8 * v5) = v11;
        }
        else
        {
          uint64_t v6 = v25;
          uint64_t v25 = 0;
          *(void *)(v22 + 8 * HIDWORD(v23)) = v6;
        }
        HIDWORD(v23) = v5 + 1;
        uint64_t v7 = v25;
        uint64_t v25 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2) {
            WTF::StringImpl::destroy(v7, v4);
          }
          else {
            *(_DWORD *)v7 -= 2;
          }
        }
        char v8 = v24;
        uint64_t v24 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v4);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
        uint64_t v3 = v19;
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v19);
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)&v19, (uint64_t)&v22);
  uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v21 = v12;
  uint64_t v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v13 = &unk_1EE9C8D18;
  *((void *)v13 + objc_destroyWeak(this + 1) = v19;
  uint64_t v14 = v20;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  *((void *)v13 + objc_destroyWeak(this + 2) = v14;
  *((void *)v13 + 3) = v12;
  uint64_t v25 = v13;
  WTF::RunLoop::main(v13);
  WTF::RunLoop::dispatch();
  __int16 v16 = v25;
  uint64_t v25 = 0;
  if (v16) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v16 + 8))(v16);
  }
  uint64_t v21 = 0;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v15);
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v17);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomains(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C8D18;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomains(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9C8D18;
  uint64_t v3 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomains(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsWithLastAccessedTime(WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8D40;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsWithLastAccessedTime(WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8D40;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsWithLastAccessedTime(WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  LOBYTE(v35) = 0;
  char v36 = 0;
  if (*(void *)(v1 + 32))
  {
    uint64_t v29 = a1;
    uint64_t v35 = 0;
    WebKit::ResourceLoadStatisticsStore::domains((WebKit::ResourceLoadStatisticsStore *)&v30);
    if (v32)
    {
      uint64_t v3 = v30;
      uint64_t v4 = &v30[5 * v32];
      while (1)
      {
        if (*((double *)v3 + 2) >= *((double *)v3 + 3)) {
          uint64_t v5 = v3[2];
        }
        else {
          uint64_t v5 = v3[3];
        }
        uint64_t v6 = v35;
        if (v35
          || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)&v35, 0), (uint64_t v6 = v35) != 0))
        {
          int v7 = *((_DWORD *)v6 - 2);
        }
        else
        {
          int v7 = 0;
        }
        unsigned int v8 = WTF::ASCIICaseInsensitiveHash::hash(v3[1], v2) & v7;
        uint64_t v9 = (uint64_t)&v6[2 * v8];
        if ((WTF::equal(*(WTF **)v9, 0, v10) & 1) == 0)
        {
          uint64_t v12 = 0;
          int v13 = 1;
          while (1)
          {
            uint64_t v14 = (void *)v9;
            if (*(void *)v9 != -1)
            {
              uint64_t v14 = v12;
              if (WTF::equalIgnoringASCIICase(*(WTF **)v9, v3[1], v11)) {
                goto LABEL_26;
              }
            }
            unsigned int v8 = (v8 + v13) & v7;
            uint64_t v9 = (uint64_t)&v6[2 * v8];
            ++v13;
            uint64_t v12 = v14;
            if (WTF::equal(*(WTF **)v9, 0, v11))
            {
              if (v14)
              {
                *uint64_t v14 = 0;
                v14[1] = 0;
                --*((_DWORD *)v35 - 4);
                uint64_t v9 = (uint64_t)v14;
              }
              break;
            }
          }
        }
        WTF::String::operator=((uint64_t *)v9, (uint64_t *)v3 + 1);
        *(void *)(v9 + ++*(_DWORD *)(this + 8) = v5;
        int v15 = v35 ? *((_DWORD *)v35 - 3) + 1 : 1;
        *((_DWORD *)v35 - 3) = v15;
        int v16 = v35 ? *((_DWORD *)v35 - 3) : 0;
        uint64_t v17 = (*((_DWORD *)v35 - 4) + v16);
        unint64_t v18 = *((unsigned int *)v35 - 1);
        if (v18 > 0x400) {
          break;
        }
        if (3 * v18 <= 4 * v17) {
          goto LABEL_25;
        }
LABEL_26:
        v3 += 5;
        if (v3 == v4) {
          goto LABEL_31;
        }
      }
      if (v18 > 2 * v17) {
        goto LABEL_26;
      }
LABEL_25:
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)&v35, v9);
      goto LABEL_26;
    }
LABEL_31:
    WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v2);
    char v19 = 1;
    char v36 = 1;
    WTF::CrossThreadCopierBase<false,false,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>::copy((uint64_t *)&v35, v20, v21, (uint64_t *)&v30);
    a1 = v29;
  }
  else
  {
    char v19 = 0;
    LOBYTE(v30) = 0;
  }
  char v31 = v19;
  uint64_t v22 = *(WTF::StringImpl ***)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  int v33 = v22;
  uint64_t v23 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v23 = &unk_1EE9C8D68;
  *(unsigned char *)(v23 + ++*(_DWORD *)(this + 8) = 0;
  *(unsigned char *)(v23 + 16) = 0;
  if (v31)
  {
    uint64_t v24 = v30;
    __int16 v30 = 0;
    *(void *)(v23 + ++*(_DWORD *)(this + 8) = v24;
    *(unsigned char *)(v23 + 16) = 1;
  }
  uint64_t v25 = v33;
  int v33 = 0;
  uint64_t v34 = v23;
  *(void *)(v23 + 24) = v25;
  WTF::RunLoop::main((WTF::RunLoop *)v23);
  WTF::RunLoop::dispatch();
  uint64_t v27 = v34;
  uint64_t v34 = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t result = v33;
  int v33 = 0;
  if (result) {
    uint64_t result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 1))(result);
  }
  if (v31)
  {
    uint64_t result = v30;
    if (v30) {
      uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v26);
    }
  }
  if (v36)
  {
    uint64_t result = v35;
    if (v35) {
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v35, v26);
    }
  }
  return result;
}

uint64_t WTF::CrossThreadCopierBase<false,false,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>::copy@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a1, a2, a3);
  v16[0] = result;
  v16[1] = v7;
  uint64_t v8 = *a1;
  if (*a1) {
    uint64_t v9 = v8 + 16 * *(unsigned int *)(v8 - 4);
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 != result)
  {
    do
    {
      WebCore::RegistrableDomain::isolatedCopy(&v15);
      uint64_t v12 = v15;
      int v15 = 0;
      int v13 = *(WTF::StringImpl **)v16[0];
      *(void *)v16[0] = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v10);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      uint64_t v14 = v15;
      int v15 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v10);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      v16[0] += 16;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v16, (uint64_t)v10, v11);
      uint64_t result = v16[0];
    }
    while (v16[0] != v9);
    uint64_t v8 = *a1;
  }
  *a1 = 0;
  *a4 = v8;
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  if (*(_DWORD *)(v3 - 12)) {
    return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeIterator(a1, v3, a3);
  }
  return v3 + 16 * *(unsigned int *)(v3 - 4);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeIterator(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (*a1) {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
  }
  else {
    uint64_t v4 = 0;
  }
  v6[0] = a2;
  v6[1] = v3 + 16 * v4;
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v6, a2, a3);
  return v6[0];
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsWithLastAccessedTime(WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C8D68;
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v4 = *(WTF::StringImpl ***)(a1 + 8);
    if (v4) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsWithLastAccessedTime(WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8D68;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((unsigned char *)this + 16))
  {
    uint64_t v4 = (WTF::StringImpl **)*((void *)this + 1);
    if (v4) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsWithLastAccessedTime(WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 24);
  LOBYTE(v6) = 0;
  char v7 = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v3 = *(WTF::StringImpl ***)(a1 + 8);
    *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    uint64_t v6 = v3;
    char v7 = 1;
  }
  uint64_t result = (WTF::StringImpl **)WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)>::operator()(v2, (uint64_t)&v6);
  if (v7)
  {
    uint64_t result = v6;
    if (v6) {
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v5);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsExemptFromWebsiteDataDeletion(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8D90;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsExemptFromWebsiteDataDeletion(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8D90;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsExemptFromWebsiteDataDeletion(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v14 = 0;
  uint64_t v3 = *(void *)(v2 + 32);
  if (v3) {
    WebKit::ResourceLoadStatisticsStore::domainsExemptFromWebsiteDataDeletion((WebKit::ResourceLoadStatisticsStore *)&v14, v3);
  }
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy((uint64_t *)&v14, (uint64_t *)&v11);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v12 = v4;
  uint64_t v5 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v5 = &unk_1EE9C8DB8;
  *((void *)v5 + objc_destroyWeak(this + 1) = v11;
  uint64_t v6 = v12;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  *((void *)v5 + objc_destroyWeak(this + 2) = v6;
  int v13 = v5;
  WTF::RunLoop::main(v5);
  WTF::RunLoop::dispatch();
  uint64_t v8 = v13;
  int v13 = 0;
  if (v8) {
    (*(void (**)(WTF::RunLoop *))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v12;
  uint64_t v12 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  if (v11) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v7);
  }
  uint64_t result = v14;
  if (v14) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsExemptFromWebsiteDataDeletion(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8DB8;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl **)a1[1];
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsExemptFromWebsiteDataDeletion(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8DB8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl **)*((void *)this + 1);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsExemptFromWebsiteDataDeletion(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8DE0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8DE0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 32);
  if (v2)
  {
    WebKit::ResourceLoadStatisticsStore::aggregatedThirdPartyData((WebKit::ResourceLoadStatisticsStore *)&v15, v2);
    uint64_t v3 = v15;
    uint64_t v15 = 0;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    uint64_t v5 = v16;
    uint64_t v16 = 0;
    uint64_t v6 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v6 = &unk_1EE9C8E30;
    *((void *)v6 + objc_destroyWeak(this + 1) = v3;
    v13[0] = 0;
    v13[1] = 0;
    *((void *)v6 + objc_destroyWeak(this + 2) = v5;
    *((void *)v6 + 3) = v4;
    uint64_t v14 = v6;
    WTF::RunLoop::main(v6);
    WTF::RunLoop::dispatch();
    uint64_t v8 = v14;
    uint64_t v14 = 0;
    if (v8) {
      (*(void (**)(WTF::RunLoop *))(*(void *)v8 + 8))(v8);
    }
    uint64_t v13[2] = 0;
    WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v7);
    return WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v9);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    uint64_t v12 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v12 = &unk_1EE9C8E08;
    *((void *)v12 + objc_destroyWeak(this + 1) = v11;
    v13[0] = v12;
    WTF::RunLoop::main(v12);
    WTF::RunLoop::dispatch();
    uint64_t result = v13[0];
    v13[0] = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C8E08;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C8E08;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C8E30;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9C8E30;
  uint64_t v3 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::insertExpiredStatisticForTesting(WebCore::RegistrableDomain &&,unsigned int,BOOL,BOOL,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C8E58;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::insertExpiredStatisticForTesting(WebCore::RegistrableDomain &&,unsigned int,BOOL,BOOL,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C8E58;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::insertExpiredStatisticForTesting(WebCore::RegistrableDomain &&,unsigned int,BOOL,BOOL,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 32);
  if (!v2) {
    goto LABEL_38;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 24);
  uint64_t v4 = (WTF::WallTime *)WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)v2, (uint64_t)v27);
  if (v3)
  {
    unsigned int v5 = 1;
    unsigned int v6 = 24;
    while (1)
    {
      double v7 = *(double *)(v2 + 648);
      uint64_t v8 = (WTF *)WTF::WallTime::now(v4);
      double v10 = v7 + v9 + (double)v6 * -3600.0;
      WebKit::OperatingDate::fromWallTime(v8, v10);
      WebCore::SQLiteDatabase::prepareStatement();
      if (v26 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v25)) {
        break;
      }
      if (v26) {
        goto LABEL_43;
      }
      if (WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v25)) {
        break;
      }
      if (v26) {
        goto LABEL_43;
      }
      if (WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v25)) {
        break;
      }
      if (v26) {
        goto LABEL_43;
      }
      if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v25) != 101) {
        break;
      }
      if (v26)
      {
LABEL_43:
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_23;
      }
      uint64_t v4 = (WTF::WallTime *)WebCore::SQLiteStatement::reset((WebCore::SQLiteStatement *)v25);
      if (v26 != -1) {
        uint64_t v4 = (WTF::WallTime *)(*(&off_1EE9C7600 + v26))((int)buf, (WebCore::SQLiteStatement *)v25);
      }
      ++v5;
      v6 += 24;
      if (v5 > v3)
      {
        double v10 = v10 + -86400.0;
        goto LABEL_22;
      }
    }
    uint64_t v11 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *(void *)(v2 + 656);
      int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
      *(_DWORD *)long long buf = 134218755;
      *(void *)&uint8_t buf[4] = v2;
      __int16 v29 = 2048;
      uint64_t v30 = v15;
      __int16 v31 = 1024;
      int v32 = Error;
      __int16 v33 = 2081;
      uint64_t v34 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v11, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::insertExpiredStatisticForTesting: failed to step insertOperatingDateStatement", buf, 0x26u);
    }
    if (v26 != -1) {
      (*(&off_1EE9C7600 + v26))((int)buf, (WebCore::SQLiteStatement *)v25);
    }
    goto LABEL_37;
  }
  double v10 = -86400.0;
LABEL_22:
  WebKit::ResourceLoadStatisticsStore::updateOperatingDatesParameters((WebKit::ResourceLoadStatisticsStore *)v2);
  WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 328), (uint64_t)"insertExpiredStatisticForTesting", (WebCore::SQLiteStatementAutoResetScope *)v25);
LABEL_23:
  if (!WebCore::SQLiteStatement::bindText()
    && !WebCore::SQLiteStatement::bindDouble(v25[0], v10)
    && !WebCore::SQLiteStatement::bindInt(v25[0])
    && !WebCore::SQLiteStatement::bindDouble(v25[0], v10)
    && !WebCore::SQLiteStatement::bindInt(v25[0])
    && !WebCore::SQLiteStatement::bindInt(v25[0])
    && !WebCore::SQLiteStatement::bindInt(v25[0])
    && !WebCore::SQLiteStatement::bindInt(v25[0])
    && !WebCore::SQLiteStatement::bindInt(v25[0])
    && !WebCore::SQLiteStatement::bindInt(v25[0])
    && !WebCore::SQLiteStatement::bindInt(v25[0])
    && !WebCore::SQLiteStatement::bindDouble(v25[0], 0.0))
  {
    if (WebCore::SQLiteStatement::step(v25[0]) == 101) {
      goto LABEL_36;
    }
    uint64_t v12 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
      goto LABEL_36;
    }
    uint64_t v22 = *(void *)(v2 + 656);
    int v23 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
    uint64_t v24 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
    *(_DWORD *)long long buf = 134218755;
    *(void *)&uint8_t buf[4] = v2;
    __int16 v29 = 2048;
    uint64_t v30 = v22;
    __int16 v31 = 1024;
    int v32 = v23;
    __int16 v33 = 2081;
    uint64_t v34 = v24;
    uint64_t v21 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::insertExpiredStatisticForT"
          "esting: failed to step statement";
    goto LABEL_42;
  }
  uint64_t v12 = qword_1EB358460;
  if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
  {
    uint64_t v18 = *(void *)(v2 + 656);
    int v19 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
    uint64_t v20 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
    *(_DWORD *)long long buf = 134218755;
    *(void *)&uint8_t buf[4] = v2;
    __int16 v29 = 2048;
    uint64_t v30 = v18;
    __int16 v31 = 1024;
    int v32 = v19;
    __int16 v33 = 2081;
    uint64_t v34 = v20;
    uint64_t v21 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::insertExpiredStatisticForT"
          "esting: failed to step scopedInsertObservedDomainStatement";
LABEL_42:
    _os_log_error_impl(&dword_1985F2000, v12, OS_LOG_TYPE_ERROR, v21, buf, 0x26u);
  }
LABEL_36:
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)v25);
LABEL_37:
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v27);
LABEL_38:
  int v13 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(buf, (uint64_t *)(a1 + 32));
  WTF::RunLoop::main(v13);
  WTF::RunLoop::dispatch();
  uint64_t result = *(void *)buf;
  *(void *)long long buf = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    uint64_t v10 = a2;
    uint64_t v11 = (_OWORD *)(v7 + 48);
    do
    {
      *(v11 - objc_destroyWeak(this + 2) = 0uLL;
      *(v11 - objc_destroyWeak(this + 1) = 0uLL;
      *uint64_t v11 = xmmword_1994F6440;
      v11 += 3;
      --v10;
    }
    while (v10);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = v5;
    uint64_t v30 = v5;
    do
    {
      uint64_t v15 = v4 + 48 * v12;
      if (*(void *)(v15 + 8) != -1)
      {
        if (*(_OWORD *)v15 == 0 && WTF::equal(*(WTF **)(v15 + 16), 0, v9))
        {
          uint64_t v16 = *(WTF::StringImpl **)(v15 + 16);
          *(void *)(v15 + 16) = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, v8);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
        }
        else
        {
          uint64_t v17 = *a1;
          if (*a1) {
            unsigned int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            unsigned int v18 = 0;
          }
          int v19 = WTF::PairHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>::hash(v4 + 48 * v12);
          for (i = 0; ; int v19 = i + v21)
          {
            unsigned int v21 = v19 & v18;
            uint64_t v22 = v17 + 48 * (v19 & v18);
            if (*(_OWORD *)v22 == 0 && (WTF::equal(*(WTF **)(v22 + 16), 0, v9) & 1) != 0) {
              break;
            }
            ++i;
          }
          int v23 = *(WTF::StringImpl **)(v22 + 16);
          *(void *)(v22 + 16) = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v8);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          *(_OWORD *)uint64_t v22 = *(_OWORD *)v15;
          uint64_t v24 = *(void *)(v15 + 16);
          *(void *)(v15 + 16) = 0;
          *(void *)(v22 + 16) = v24;
          uint64_t v25 = v17 + 48 * v21;
          uint64_t v26 = v4 + 48 * v12;
          long long v27 = *(_OWORD *)(v26 + 24);
          *(void *)(v25 + ++*(_DWORD *)(this - 40) = *(void *)(v26 + 40);
          *(_OWORD *)(v25 + 24) = v27;
          uint64_t v28 = *(WTF::StringImpl **)(v15 + 16);
          *(void *)(v15 + 16) = 0;
          uint64_t v14 = v30;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v8);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          if (v15 == a3) {
            uint64_t v13 = v22;
          }
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v13;
}

unint64_t WTF::PairHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>::hash(uint64_t a1)
{
  unsigned int v5 = -1640531527;
  __int16 v6 = 0;
  char v7 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v5, (void *)a1);
  int v2 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v5);
  return (0xD7862706ELL
        * (unint64_t)(277951225 * v2
                           + 95187966
                           * WTF::ASCIICaseInsensitiveHash::hash(*(WTF::ASCIICaseInsensitiveHash **)(a1 + 16), v3))) >> 4;
}

BOOL WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>>::isEmptyOrDeletedBucket(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(_OWORD *)a1 == 0)
  {
    if (WTF::equal(*(WTF **)(a1 + 16), 0, a3)) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  return v3 == -1;
}

uint64_t WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>>::shrinkToBestSize(uint64_t *a1)
{
  if (*a1) {
    unsigned int v2 = *(_DWORD *)(*a1 - 12);
  }
  else {
    unsigned int v2 = 0;
  }
  unsigned int v3 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(v2);
  if (v3 <= 8) {
    unsigned int v4 = 8;
  }
  else {
    unsigned int v4 = v3;
  }

  return WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>>::rehash(a1, v4, 0);
}

WTF::StringImpl *WTF::hashTraitsDeleteBucket<WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>,std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RegistrableDomain>>(void *a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  *a1 = -1;
  a1[1] = -1;
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebCookieManager::startObservingCookieChanges(PAL::SessionID)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 8) + 24) + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v1 + 128), 1u);
  unsigned int v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v2 = 315;
  *((void *)v2 + objc_destroyWeak(this + 1) = 0;
  *((void *)v2 + 66) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 69) = 0;
  IPC::Encoder::encodeHeader(v2);
  uint64_t v8 = v2;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v2, &v7);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v1 + 24) + 32))(v1 + 24, &v8, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v1 + 128), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v1 + 128));
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebCookieManager::setHTTPCookieAcceptPolicy(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C8EA8;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unsigned int v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 32);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebCookieManager::setHTTPCookieAcceptPolicy(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8EA8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 32);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebCookieManager::setHTTPCookieAcceptPolicy(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebCookieManager::setHTTPCookieAcceptPolicy(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(a1 + 8);
}

uint64_t WebKit::WebCookieManager::setHTTPCookieAcceptPolicy(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(uint64_t a1)
{
  WebKit::NetworkProcess::cookieAcceptPolicyChanged(*(void *)(a1 + 8), *(unsigned char *)a1);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::Download::cancel(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&,WebKit::Download::IgnoreDidFailCallback)::$_0,void,std::span<unsigned char const,18446744073709551615ul>>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C8ED0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::Download::cancel(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&,WebKit::Download::IgnoreDidFailCallback)::$_0,void,std::span<unsigned char const,18446744073709551615ul>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C8ED0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::Download::cancel(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&,WebKit::Download::IgnoreDidFailCallback)::$_0,void,std::span<unsigned char const,18446744073709551615ul>>::call(uint64_t a1)
{
  return WebKit::Download::cancel(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&,WebKit::Download::IgnoreDidFailCallback)::$_0::operator()((uint64_t *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::Download::didFinish(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C8EF8;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::Download::didFinish(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C8EF8;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::Download::didFinish(void)::$_0,void>::call(WTF *a1)
{
  uint64_t v2 = (void *)*((void *)a1 + 2);
  uint64_t result = WTF::isMainRunLoop(a1);
  if ((result & 1) == 0)
  {
    uint64_t result = 149;
    __break(0xC471u);
    return result;
  }
  uint64_t v4 = *((void *)a1 + 1);
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v5 = (*(uint64_t (**)(void *))(*v2 + 56))(v2);
    __int16 v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)__int16 v6 = 13;
    *((void *)v6 + objc_destroyWeak(this + 1) = v5;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    uint64_t v13 = v6;
    (*(void (**)(void *, IPC::Encoder **, void))(*v2 + 32))(v2, &v13, 0);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v11, v12);
    }
    uint64_t v9 = v2[8];
    if (!v9) {
      return WebKit::DownloadMap::remove((uint64_t *)(v2[3] + 32), v2[4]);
    }
    uint64_t v10 = *(void *)(v9 + 16) - 1;
    *(void *)(v9 + 16) = v10;
    if (v10)
    {
      v2[8] = 0;
    }
    else
    {
      *(void *)(*(void *)(v9 + 8) + ++*(_DWORD *)(this + 8) = 0;
      sandbox_extension_release();
      uint64_t v9 = v2[8];
      v2[8] = 0;
      if (!v9) {
        return WebKit::DownloadMap::remove((uint64_t *)(v2[3] + 32), v2[4]);
      }
    }
    WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v9);
    return WebKit::DownloadMap::remove((uint64_t *)(v2[3] + 32), v2[4]);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          uint64_t v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
          *uint64_t v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + ++*(_DWORD *)(this + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(void *)(v28 + 8);
          *(void *)(v28 + ++*(_DWORD *)(this + 8) = 0;
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          if (v13 == a3) {
            uint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(void *)(v15 + 8);
          *(void *)(v15 + ++*(_DWORD *)(this + 8) = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (void *)*a1;
  if (*a1) {
    v3 += 2 * *((unsigned int *)v3 - 1);
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  uint64_t v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    unsigned int v5 = (void *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    unsigned int v5 = 0;
  }
  if (v5 != a2) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(a1, a2);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1objc_destroyWeak(this + 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(uint64_t *result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3) {
    uint64_t result = (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }
  ++*(_DWORD *)(*v2 - 16);
  uint64_t v4 = *v2;
  if (*v2) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1objc_destroyWeak(this + 2) = v5;
  uint64_t v6 = *v2;
  if (*v2)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(v2, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          uint64_t v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v27 + 8));
          }
          *uint64_t v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + ++*(_DWORD *)(this + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(void *)(v28 + 8);
          *(void *)(v28 + ++*(_DWORD *)(this + 8) = 0;
          if (v30) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v30 + 8));
          }
          if (v13 == a3) {
            uint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(void *)(v15 + 8);
          *(void *)(v15 + ++*(_DWORD *)(this + 8) = 0;
          if (v16) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v16 + 8));
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::Ref<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    uint64_t *v16 = v11;
    uint64_t v20 = *a3;
    *a3 = 0;
    uint64_t v21 = v16[1];
    v16[1] = v20;
    if (v21) {
      uint64_t result = (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v21 + 8));
    }
    uint64_t v22 = *v6;
    if (*v6) {
      int v23 = *(_DWORD *)(v22 - 12) + 1;
    }
    else {
      int v23 = 1;
    }
    *(_DWORD *)(v22 - 1objc_destroyWeak(this + 2) = v23;
    uint64_t v25 = *v6;
    if (*v6) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_24:
        uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v6, v16);
        uint64_t v16 = result;
        uint64_t v25 = *v6;
        if (*v6) {
          unint64_t v28 = *(unsigned int *)(v25 - 4);
        }
        else {
          unint64_t v28 = 0;
        }
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_24;
    }
    *(void *)a4 = v16;
    *(void *)(a4 + ++*(_DWORD *)(this + 8) = v25 + 16 * v28;
    *(unsigned char *)(a4 + 16) = 1;
    return result;
  }
  int v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1) {
      int v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v10;
    uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *int v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        uint64_t v11 = *a2;
        uint64_t v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *(unsigned int *)(v8 - 4);
  }
  *(void *)a4 = v16;
  *(void *)(a4 + ++*(_DWORD *)(this + 8) = v8 + 16 * v24;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v29 = *a3;
  *a3 = 0;
  uint64_t v30 = v16[1];
  v16[1] = v29;
  if (v30)
  {
    __int16 v31 = *(atomic_uchar **)(v30 + 8);
    return (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(v31);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v5, a2);
}

void sub_198C0901C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C09454(_Unwind_Exception *a1)
{
  CFRelease(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void sub_198C0976C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  CFRelease(v54);
  _Unwind_Resume(a1);
}

void sub_198C0A0CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF::StringImpl *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,WTF::StringImpl *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,WTF::StringImpl *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,WTF::StringImpl *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,WTF::StringImpl *a63)
{
  WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a13, a2);
  WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a9, v72);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a11, v73);
  if ((a41 & 0x8000000000000) != 0)
  {
    unint64_t v76 = (unsigned int *)(a41 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a41 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v76);
      WTF::fastFree((WTF *)v76, v74);
    }
  }
  if ((a40 & 0x8000000000000) != 0)
  {
    long long v75 = (unsigned int *)(a40 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a40 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v75);
      WTF::fastFree((WTF *)v75, v74);
    }
  }
  if (a35)
  {
    if (*(_DWORD *)a35 == 2) {
      WTF::StringImpl::destroy(a35, (WTF::StringImpl *)v74);
    }
    else {
      *(_DWORD *)a35 -= 2;
    }
  }
  if (a30)
  {
    if (*(_DWORD *)a30 == 2) {
      WTF::StringImpl::destroy(a30, (WTF::StringImpl *)v74);
    }
    else {
      *(_DWORD *)a30 -= 2;
    }
  }
  if (a25)
  {
    if (*(_DWORD *)a25 == 2) {
      WTF::StringImpl::destroy(a25, (WTF::StringImpl *)v74);
    }
    else {
      *(_DWORD *)a25 -= 2;
    }
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, (WTF::StringImpl *)v74);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, (WTF::StringImpl *)v74);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, (WTF::StringImpl *)v74);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, (WTF::StringImpl *)v74);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, (WTF::StringImpl *)v74);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  if (a48)
  {
    if (*(_DWORD *)a48 == 2) {
      WTF::StringImpl::destroy(a48, (WTF::StringImpl *)v74);
    }
    else {
      *(_DWORD *)a48 -= 2;
    }
  }
  if (a53)
  {
    if (*(_DWORD *)a53 == 2) {
      WTF::StringImpl::destroy(a53, (WTF::StringImpl *)v74);
    }
    else {
      *(_DWORD *)a53 -= 2;
    }
  }
  if (a58)
  {
    if (*(_DWORD *)a58 == 2) {
      WTF::StringImpl::destroy(a58, (WTF::StringImpl *)v74);
    }
    else {
      *(_DWORD *)a58 -= 2;
    }
  }
  if (a63)
  {
    if (*(_DWORD *)a63 == 2) {
      WTF::StringImpl::destroy(a63, (WTF::StringImpl *)v74);
    }
    else {
      *(_DWORD *)a63 -= 2;
    }
  }
  if (a68)
  {
    if (*(_DWORD *)a68 == 2) {
      WTF::StringImpl::destroy(a68, (WTF::StringImpl *)v74);
    }
    else {
      *(_DWORD *)a68 -= 2;
    }
  }
  if (a69)
  {
    if (*(_DWORD *)a69 == 2) {
      WTF::StringImpl::destroy(a69, (WTF::StringImpl *)v74);
    }
    else {
      *(_DWORD *)a69 -= 2;
    }
  }
  if (a70)
  {
    if (*(_DWORD *)a70 == 2) {
      WTF::StringImpl::destroy(a70, (WTF::StringImpl *)v74);
    }
    else {
      *(_DWORD *)a70 -= 2;
    }
  }
  if (a71)
  {
    if (*(_DWORD *)a71 == 2) {
      WTF::StringImpl::destroy(a71, (WTF::StringImpl *)v74);
    }
    else {
      *(_DWORD *)a71 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

unint64_t WTF::makeVector<WebCore::ApplicationManifest::Icon>(uint64_t a1, void *a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  unint64_t result = [a2 count];
  if (result)
  {
    if (result >= 0x38E38E4)
    {
      __break(0xC471u);
      return result;
    }
    unsigned int v4 = 72 * result;
    uint64_t v5 = WTF::fastMalloc((WTF *)(72 * result));
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = v4 / 0x48;
    *(void *)a1 = v5;
  }
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v6 = [a2 countByEnumeratingWithState:&v32 objects:v44 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v33;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v33 != v7) {
          objc_enumerationMutation(a2);
        }
        char v9 = *(void **)(*((void *)&v32 + 1) + 8 * i);
        objc_opt_class();
        if (((v9 != 0) & objc_opt_isKindOfClass()) != 0)
        {
          MEMORY[0x19972E8A0](v36, [v9 src]);
          WTF::makeVector<WTF::String>((void *)[v9 sizes], (uint64_t)v37);
          MEMORY[0x19972EAD0](&v38, [v9 type]);
          uint64_t v11 = (void *)[v9 purposes];
          long long v40 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          int v12 = 0;
          uint64_t v13 = [v11 countByEnumeratingWithState:&v40 objects:v45 count:16];
          if (v13)
          {
            uint64_t v14 = *(void *)v41;
            do
            {
              for (uint64_t j = 0; j != v13; ++j)
              {
                if (*(void *)v41 != v14) {
                  objc_enumerationMutation(v11);
                }
                v12 |= [*(id *)(*((void *)&v40 + 1) + 8 * j) integerValue];
              }
              uint64_t v13 = [v11 countByEnumeratingWithState:&v40 objects:v45 count:16];
            }
            while (v13);
          }
          char v39 = v12;
          std::__optional_destruct_base<WebCore::ApplicationManifest::Icon,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplicationManifest::Icon>((uint64_t)v25, (uint64_t)v36);
          uint64_t v17 = v38;
          __int16 v38 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v16);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v16);
          int v18 = v36[0];
          v36[0] = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              WTF::StringImpl::destroy(v18, v10);
            }
            else {
              *(_DWORD *)v18 -= 2;
            }
          }
          if (v31)
          {
            unsigned int v19 = *(_DWORD *)(a1 + 12);
            if (v19 == *(_DWORD *)(a1 + 8))
            {
              WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplicationManifest::Icon>(a1, (unint64_t)v25);
            }
            else
            {
              uint64_t v20 = *(void *)a1;
              WTF::URL::URL(*(void *)a1 + 72 * v19, v25);
              uint64_t v21 = v20 + 72 * v19;
              *(void *)(v21 + ++*(_DWORD *)(this - 40) = 0;
              *(void *)(v21 + 4++*(_DWORD *)(this + 8) = 0;
              uint64_t v22 = v26;
              uint64_t v26 = 0;
              *(void *)(v21 + ++*(_DWORD *)(this - 40) = v22;
              LODWORD(v2objc_destroyWeak(this + 2) = v27;
              int v27 = 0;
              *(_DWORD *)(v21 + 4++*(_DWORD *)(this + 8) = v22;
              LODWORD(v2objc_destroyWeak(this + 2) = v28;
              int v28 = 0;
              *(_DWORD *)(v21 + 5objc_destroyWeak(this + 2) = v22;
              uint64_t v23 = v29;
              uint64_t v29 = 0;
              *(void *)(v21 + 56) = v23;
              *(unsigned char *)(v21 + 64) = v30;
              ++*(_DWORD *)(a1 + 12);
            }
          }
        }
        else
        {
          LOBYTE(v25[0]) = 0;
          char v31 = 0;
        }
        std::__optional_destruct_base<WebCore::ApplicationManifest::Icon,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v10);
      }
      uint64_t v6 = [a2 countByEnumeratingWithState:&v32 objects:v44 count:16];
    }
    while (v6);
  }
  return (unint64_t)WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a1, *(unsigned int *)(a1 + 12));
}

void sub_198C0A824(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,WTF::StringImpl *a39)
{
  WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v39, a2);
  _Unwind_Resume(a1);
}

void sub_198C0AC58(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,char a21)
{
  if (a15) {
    CFRelease(a15[1]);
  }
  WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)&a21, a2);
  _Unwind_Resume(a1);
}

void sub_198C0ADEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C0AE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C0AF6C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C0B034(_Unwind_Exception *a1)
{
  CFRelease(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void sub_198C0B108(_Unwind_Exception *a1)
{
  CFRelease(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void sub_198C0B528(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C0B5F0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_198C0B6B8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_198C0B788(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_198C0BB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  _Unwind_Resume(a1);
}

void sub_198C0BBE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C0BCA0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C0BD90(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C0BF68(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_198C0BFE4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198C0C070(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C0C35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::DownloadMap::~DownloadMap(WebKit::DownloadMap *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  if (*(void *)this) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(*(void *)this, a2);
  }
}

void WebKit::DownloadMap::add(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "Adding download %llu to NetworkProcess DownloadMap", buf, 0xCu);
  }
  uint64_t v9 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, 0), (uint64_t v9 = *a1) != 0))
  {
    char v10 = 0;
    int v11 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    int v11 = 0;
    char v10 = 1;
  }
  unint64_t v12 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v11 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v9 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    int v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == a2)
      {
        if (v10) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = *(unsigned int *)(v9 - 4);
        }
        char v30 = 0;
        uint64_t v29 = v9 + 16 * v24;
        goto LABEL_31;
      }
      if (v17 == -1) {
        int v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v11;
      uint64_t v16 = (uint64_t *)(v9 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *int v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v16 = v18;
    }
  }
  uint64_t *v16 = a2;
  uint64_t v20 = *a3;
  *a3 = 0;
  uint64_t v21 = v16[1];
  v16[1] = v20;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *a1;
  if (*a1) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 1objc_destroyWeak(this + 2) = v23;
  uint64_t v9 = *a1;
  if (*a1) {
    int v25 = *(_DWORD *)(v9 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v9 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v9 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26) {
      goto LABEL_28;
    }
  }
  else if (3 * v27 > 4 * v26)
  {
    goto LABEL_28;
  }
  int v28 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, v16);
  uint64_t v16 = v28;
  uint64_t v9 = *a1;
  if (!*a1)
  {
    *(void *)a4 = v28;
    *(void *)(a4 + ++*(_DWORD *)(this + 8) = 0;
    *(unsigned char *)(a4 + 16) = 1;
    return;
  }
  unint64_t v27 = *(unsigned int *)(v9 - 4);
LABEL_28:
  uint64_t v29 = v9 + 16 * v27;
  char v30 = 1;
LABEL_31:
  *(void *)a4 = v16;
  *(void *)(a4 + ++*(_DWORD *)(this + 8) = v29;
  *(unsigned char *)(a4 + 16) = v30;
  if (*(_DWORD *)(v9 - 12) == 1)
  {
    pid_t v31 = getpid();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v39 = 0;
    uint64_t v32 = WTF::fastMalloc((WTF *)0xB0);
    uint64_t v33 = WebKit::ProcessAssertion::ProcessAssertion(v32, v31, (_DWORD **)buf, 2, MEMORY[0x1E4F30980]);
    WebKit::ProcessAssertion::acquireAsync(v33, &v39);
    uint64_t v35 = a1[1];
    a1[1] = v32;
    if (v35) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v35 + 8), v34);
    }
    uint64_t v36 = v39;
    uint64_t v39 = 0;
    if (v36) {
      (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
    }
    uint64_t v37 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v34);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
    __int16 v38 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1985F2000, v38, OS_LOG_TYPE_DEFAULT, "Took 'WebKit downloads' assertion in NetworkProcess", buf, 2u);
    }
  }
}

BOOL WebKit::DownloadMap::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    int v25 = 134217984;
    uint64_t v26 = a2;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "Removing download %llu from NetworkProcess DownloadMap", (uint8_t *)&v25, 0xCu);
  }
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 8);
    unint64_t v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    uint64_t v11 = v7 & ((v10 >> 31) ^ v10);
    uint64_t v12 = *(void *)(v6 + 16 * v11);
    if (v12 != a2)
    {
      int v13 = 1;
      while (v12)
      {
        uint64_t v11 = (v11 + v13) & v7;
        uint64_t v12 = *(void *)(v6 + 16 * v11);
        ++v13;
        if (v12 == a2) {
          goto LABEL_11;
        }
      }
      uint64_t v11 = *(unsigned int *)(v6 - 4);
    }
LABEL_11:
    uint64_t v15 = *(unsigned int *)(v6 - 4);
    BOOL v14 = v11 != v15;
    if (v11 == v15) {
      goto LABEL_34;
    }
    uint64_t v16 = (void *)(v6 + 16 * v11);
    uint64_t v17 = v16[1];
    void *v16 = -1;
    v16[1] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    ++*(_DWORD *)(*a1 - 16);
    uint64_t v18 = *a1;
    int v19 = *a1 ? *(_DWORD *)(v18 - 12) - 1 : -1;
    *(_DWORD *)(v18 - 1objc_destroyWeak(this + 2) = v19;
    uint64_t v6 = *a1;
    if (*a1
      && ((unsigned int v20 = *(_DWORD *)(v6 - 4), 6 * *(_DWORD *)(v6 - 12) < v20) ? (v21 = v20 >= 9) : (v21 = 0),
          !v21
       || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v20 >> 1, 0), (uint64_t v6 = *a1) != 0)))
    {
LABEL_34:
      if (*(_DWORD *)(v6 - 12)) {
        return v14;
      }
    }
    else
    {
      BOOL v14 = 1;
    }
  }
  else
  {
    BOOL v14 = 0;
  }
  uint64_t v22 = a1[1];
  a1[1] = 0;
  if (v22) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v22 + 8), v5);
  }
  int v23 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v25) = 0;
    _os_log_impl(&dword_1985F2000, v23, OS_LOG_TYPE_DEFAULT, "Dropped 'WebKit downloads' assertion in NetworkProcess", (uint8_t *)&v25, 2u);
  }
  return v14;
}

void WebKit::DownloadMonitor::timerFired(WebKit::DownloadMonitor *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  WebKit::DownloadMonitor::downloadReceivedBytes(this, 0);
  unint64_t v2 = *((void *)this + 32);
  if (v2 >= 9)
  {
    __break(0xC471u);
    JUMPOUT(0x198C0CE10);
  }
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *((void *)this + 2);
  double v5 = 0.0;
  if (v3 != v4)
  {
    unint64_t v6 = 0;
    uint64_t v7 = *((void *)this + 3);
    unint64_t v8 = *((unsigned int *)this + 8);
    unint64_t v9 = *((void *)this + 1);
    do
    {
      uint64_t v10 = *(void *)(v7 + 16 * v9 + 8);
      v9 += v8 + 1;
      do
        v9 -= v8;
      while (v9 >= v8);
      v6 += v10;
    }
    while (v4 != v9);
    if (v6)
    {
      if (!v4) {
        uint64_t v4 = *((unsigned int *)this + 8);
      }
      double v11 = *(double *)(v7 + 16 * v4 - 16) - *(double *)(v7 + 16 * v3);
      if (v11 != 0.0) {
        double v5 = (double)v6 / v11;
      }
    }
  }
  if (v5 >= (double)WebKit::throughputIntervals[2 * v2 + 1])
  {
    uint64_t v17 = off_1EB358988;
    BOOL v18 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
    if (v2 + 1 > 8)
    {
      if (v18)
      {
        uint64_t v21 = *(void *)(*(void *)this + 32);
        *(_DWORD *)uint64_t v22 = 134218240;
        *(void *)&v22[4] = this;
        __int16 v23 = 2048;
        uint64_t v24 = v21;
        _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "%p - DownloadMonitor::timerFired: Download reached threshold to not be terminated (id = %llu)", v22, 0x16u);
      }
    }
    else
    {
      if (v18)
      {
        uint64_t v19 = *(void *)(*(void *)this + 32);
        *(_DWORD *)uint64_t v22 = 134218240;
        *(void *)&v22[4] = this;
        __int16 v23 = 2048;
        uint64_t v24 = v19;
        _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "%p - DownloadMonitor::timerFired: sufficient throughput rate (id = %llu)", v22, 0x16u);
        uint64_t v20 = *((void *)this + 32);
        *((void *)this + 3objc_destroyWeak(this + 2) = v20 + 1;
        if ((unint64_t)(v20 + 1) >= 9)
        {
          __break(0xC471u);
          JUMPOUT(0x198C0CD3CLL);
        }
      }
      else
      {
        *((void *)this + 3objc_destroyWeak(this + 2) = v2 + 1;
      }
      WebCore::TimerBase::start();
    }
  }
  else
  {
    uint64_t v12 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(*(void *)this + 32);
      *(_DWORD *)uint64_t v22 = 134218240;
      *(void *)&v22[4] = this;
      __int16 v23 = 2048;
      uint64_t v24 = v13;
      _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%p - DownloadMonitor::timerFired: cancelling download (id = %llu)", v22, 0x16u);
    }
    uint64_t v14 = *(void *)this;
    uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v15 = &unk_1EE9C91C0;
    *(void *)uint64_t v22 = v15;
    WebKit::Download::cancel(v14, (uint64_t *)v22, 0);
    uint64_t v16 = *(void *)v22;
    *(void *)uint64_t v22 = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
}

WebKit::DownloadMonitor *WebKit::DownloadMonitor::DownloadMonitor(WebKit::DownloadMonitor *this, WebKit::Download *a2)
{
  ++*((_DWORD *)a2 + 4);
  *(void *)this = a2;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  *((void *)this + 3) = (char *)this + 40;
  *((void *)this + 4) = 10;
  WebCore::TimerBase::TimerBase((WebKit::DownloadMonitor *)((char *)this + 200));
  *((void *)this + 25) = &unk_1EE9BA5F0;
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v3 = &unk_1EE9C9198;
  v3[1] = WebKit::DownloadMonitor::timerFired;
  uint64_t v3[2] = 0;
  v3[3] = this;
  *((void *)this + 3objc_destroyWeak(this + 1) = v3;
  *((void *)this + 3objc_destroyWeak(this + 2) = 0;
  return this;
}

uint64_t WebKit::DownloadMonitor::downloadReceivedBytes(WebKit::DownloadMonitor *this, uint64_t a2)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v4 = *((void *)this + 2);
  double v5 = (char *)this + 8;
  unint64_t v6 = v4;
  if (v3 > v4) {
    unint64_t v6 = v4 + *((unsigned int *)this + 8);
  }
  if (v6 - v3 < 0xA) {
    goto LABEL_9;
  }
  if (v3 != v4)
  {
    if (v3 == *((unsigned int *)this + 8) - 1) {
      unint64_t v7 = 0;
    }
    else {
      unint64_t v7 = v3 + 1;
    }
    *((void *)this + objc_destroyWeak(this + 1) = v7;
LABEL_9:
    WTF::MonotonicTime::now(this);
    *(void *)&long long v10 = v8;
    *((void *)&v10 + objc_destroyWeak(this + 1) = a2;
    return WTF::Deque<WebKit::DownloadMonitor::Timestamp,10ul>::append((uint64_t)v5, &v10);
  }
  uint64_t result = 512;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Deque<WebKit::DownloadMonitor::Timestamp,10ul>::append(uint64_t result, _OWORD *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (*(void *)result)
  {
    if (v4 + 1 != *(void *)result) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v5 = *(unsigned int *)(result + 24);
  if (!v4)
  {
    if (v5)
    {
      uint64_t v4 = 0;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v4 == v5 - 1)
  {
LABEL_9:
    uint64_t result = WTF::Deque<WebKit::DownloadMonitor::Timestamp,10ul>::expandCapacity(result);
    uint64_t v4 = *(void *)(v3 + 8);
  }
LABEL_10:
  *(_OWORD *)(*(void *)(v3 + 16) + 16 * v4) = *a2;
  uint64_t v6 = *(void *)(v3 + 8);
  if (v6 == *(unsigned int *)(v3 + 24) - 1) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6 + 1;
  }
  *(void *)(v3 + ++*(_DWORD *)(this + 8) = v7;
  return result;
}

void WebKit::DownloadMonitor::applicationWillEnterForeground(WebKit::DownloadMonitor *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)this + 32);
    int v4 = 134218240;
    uint64_t v5 = this;
    __int16 v6 = 2048;
    uint64_t v7 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - DownloadMonitor::applicationWillEnterForeground (id = %llu)", (uint8_t *)&v4, 0x16u);
  }
  if ((*((void *)this + 29) & 0xFFFFFFFFFFFFLL) != 0) {
    WebCore::TimerBase::stopSlowCase((WebKit::DownloadMonitor *)((char *)this + 200));
  }
  *((void *)this + 3objc_destroyWeak(this + 2) = 0;
}

uint64_t WebKit::DownloadMonitor::applicationDidEnterBackground(WebKit::DownloadMonitor *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)this + 32);
    int v5 = 134218240;
    __int16 v6 = this;
    __int16 v7 = 2048;
    uint64_t v8 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - DownloadMonitor::applicationDidEnterBackground (id = %llu)", (uint8_t *)&v5, 0x16u);
  }
  return WebCore::TimerBase::start();
}

uint64_t WebKit::PendingDownload::PendingDownload(uint64_t a1, atomic_uchar *volatile *a2, uint64_t a3, uint64_t a4, WebKit::NetworkSession *a5, WTF::StringImpl **a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16 = a1 + 8;
  *(void *)a1 = &unk_1EE9C8FC0;
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = &unk_1EE9C9050;
  *(void *)(a1 + 16) = 0;
  uint64_t v17 = WTF::fastMalloc((WTF *)0xCA0);
  *(void *)(a1 + 24) = WebKit::NetworkLoad::NetworkLoad(v17, a1, a3, a5);
  if (a2)
  {
    BOOL v18 = a6;
    char v19 = 0;
    atomic_uchar *volatile v20 = *a2;
    int v21 = 1;
    atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
    if (v19) {
      MEMORY[0x19972E8D0](v20);
    }
    ++*((void *)v20 + 1);
    atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
    BOOL v22 = v21 == 1;
    a6 = v18;
    if (!v22) {
      WTF::Lock::unlockSlow((WTF::Lock *)v20);
    }
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = a2;
  *(unsigned char *)(a1 + 4objc_destroyWeak(this + 1) = 0;
  *(unsigned char *)(a1 + 4objc_destroyWeak(this + 2) = a7;
  *(void *)(a1 + 4++*(_DWORD *)(this + 8) = a9;
  *(void *)(a1 + 56) = a10;
  WTF::URL::invalidate((WTF::URL *)(a1 + 64));
  *(unsigned char *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v23 = *(void *)(a1 + 24);
  uint64_t v24 = *(void *)(v23 + 3008);
  if (v24)
  {
    (*(void (**)(uint64_t))(*(void *)v24 + 24))(v24);
    uint64_t v23 = *(void *)(a1 + 24);
    uint64_t v25 = *(void *)(v23 + 3008);
    *(unsigned char *)(a1 + ++*(_DWORD *)(this - 40) = *(unsigned char *)(a3 + 291);
    if (v25)
    {
      *(void *)(v25 + ++*(_DWORD *)(this - 40) = a4;
      uint64_t v23 = *(void *)(a1 + 24);
      uint64_t v26 = *(WebKit::NetworkDataTask **)(v23 + 3008);
      if (v26)
      {
        WebKit::NetworkDataTask::setPendingDownload(v26, (WebKit::PendingDownload *)a1);
        uint64_t v23 = *(void *)(a1 + 24);
        uint64_t v27 = *(void *)(v23 + 3008);
        if (v27)
        {
          WTF::String::operator=((uint64_t *)(v27 + 536), a6);
          uint64_t v23 = *(void *)(a1 + 24);
        }
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + ++*(_DWORD *)(this - 40) = *(unsigned char *)(a3 + 291);
  }
  int v28 = (WebCore::ResourceRequest *)(v23 + 3024);
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 56))(v16);
  char v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v30 = 18;
  *((void *)v30 + objc_destroyWeak(this + 1) = v29;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v30 + 70) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  uint64_t v37 = v30;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v30, v28);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, (uint64_t *)a6);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v16 + 32))(v16, &v37, 0);
  uint64_t v32 = v37;
  uint64_t v37 = 0;
  if (v32)
  {
    IPC::Encoder::~Encoder(v32, v31);
    WTF::fastFree(v34, v35);
  }
  return a1;
}

uint64_t WebKit::PendingDownload::PendingDownload(uint64_t a1, atomic_uchar *volatile *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, WebCore::ResourceRequest *a6, WebCore::ResourceResponseBase *a7)
{
  uint64_t v13 = a1 + 8;
  *(void *)a1 = &unk_1EE9C8FC0;
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = &unk_1EE9C9050;
  *(void *)(a1 + 16) = 0;
  uint64_t v14 = *a3;
  *a3 = 0;
  *(void *)(a1 + 24) = v14;
  if (a2)
  {
    char v15 = 0;
    atomic_uchar *volatile v16 = *a2;
    int v17 = 1;
    atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v15, 1u, memory_order_acquire, memory_order_acquire);
    if (v15) {
      MEMORY[0x19972E8D0](v16);
    }
    ++*((void *)v16 + 1);
    atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
    if (v17 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v16);
    }
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = a2;
  *(unsigned char *)(a1 + 4objc_destroyWeak(this + 1) = 0;
  *(unsigned char *)(a1 + 4++*(_DWORD *)(this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 64));
  *(unsigned char *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(unsigned char *)(a1 + ++*(_DWORD *)(this - 40) = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 24) + 16) + 24))(*(void *)(*(void *)(a1 + 24) + 16));
  uint64_t v18 = *(void *)(*(void *)(a1 + 24) + 3008);
  if (v18) {
    *(void *)(v18 + ++*(_DWORD *)(this - 40) = a5;
  }
  uint64_t v27 = 0;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 56))(v13);
  atomic_uchar *volatile v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)atomic_uchar *volatile v20 = 18;
  *((void *)v20 + objc_destroyWeak(this + 1) = v19;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v20 + 70) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  int v28 = v20;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v20, a6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v20, (uint64_t *)&v27);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v13 + 32))(v13, &v28, 0);
  BOOL v22 = v28;
  int v28 = 0;
  if (v22)
  {
    IPC::Encoder::~Encoder(v22, v21);
    WTF::fastFree(v25, v26);
  }
  uint64_t v23 = v27;
  uint64_t v27 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v21);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  WebKit::NetworkLoad::convertTaskToDownload(*(void *)(a1 + 24), (WebKit::PendingDownload *)a1, (uint64_t)a6, a7, a4);
  return a1;
}

void WebKit::PendingDownload::~PendingDownload(WebKit::PendingDownload *this, void *a2)
{
  *(void *)this = &unk_1EE9C8FC0;
  *((void *)this + objc_destroyWeak(this + 1) = &unk_1EE9C9050;
  uint64_t v3 = (WTF *)*((void *)this + 15);
  if (v3)
  {
    *((void *)this + 15) = 0;
    *((_DWORD *)this + 3objc_destroyWeak(this + 2) = 0;
    WTF::fastFree(v3, a2);
  }
  int v4 = (WTF *)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 13) = 0;
    *((_DWORD *)this + 2++*(_DWORD *)(this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  int v5 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + ++*(_DWORD *)(this + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  __int16 v6 = (atomic_uchar *volatile *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6)
  {
    char v7 = 0;
    atomic_uchar *volatile v8 = *v6;
    atomic_compare_exchange_strong_explicit(*v6, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      MEMORY[0x19972E8D0](v8);
    }
    uint64_t v9 = *((void *)v8 + 1);
    uint64_t v10 = v9 - 1;
    *((void *)v8 + objc_destroyWeak(this + 1) = v9 - 1;
    if (v9 == 1)
    {
      uint64_t v18 = *((void *)v8 + 2);
      uint64_t v12 = *((void *)v8 + 3);
      *((void *)v8 + 3) = 0;
      BOOL v11 = v18 == 0;
    }
    else
    {
      BOOL v11 = 0;
      uint64_t v12 = 0;
    }
    int v13 = 1;
    atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 == 1)
    {
      if (v10) {
        goto LABEL_18;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
      if (v10) {
        goto LABEL_18;
      }
    }
    uint64_t v14 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v14 = &unk_1EE9B37E8;
    *(void *)(v14 + ++*(_DWORD *)(this + 8) = v8;
    *(void *)(v14 + 16) = v12;
    *(unsigned char *)(v14 + 24) = v11;
    uint64_t v19 = v14;
    WTF::ensureOnMainRunLoop();
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
LABEL_18:
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)this + 3, 0);
  uint64_t v16 = *((void *)this + 2);
  if (v16)
  {
    *(void *)(v16 + ++*(_DWORD *)(this + 8) = 0;
    int v17 = (unsigned int *)*((void *)this + 2);
    *((void *)this + objc_destroyWeak(this + 2) = 0;
    if (v17)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v15);
      }
    }
  }
  else
  {
    *((void *)this + objc_destroyWeak(this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::PendingDownload::~PendingDownload(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::PendingDownload::~PendingDownload(WebKit::PendingDownload *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::PendingDownload::~PendingDownload((WebKit::PendingDownload *)((char *)this - 8), a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::PendingDownload::willSendRedirectedRequest(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *a3, WebCore::ResourceResponseBase *a4, uint64_t *a5)
{
  if (!WTF::linkedOnOrAfterSDKWithBehavior() || !*(unsigned char *)(a1 + 42)) {
    goto LABEL_7;
  }
  uint64_t v9 = (WebCore::SecurityOrigin *)WebCore::ResourceResponseBase::url(a4);
  WebCore::SecurityOrigin::create((uint64_t *)v37, v9, v10);
  BOOL v11 = v37[0];
  uint64_t v12 = (WebCore::SecurityOrigin *)WebCore::ResourceRequestBase::url(a3);
  WebCore::SecurityOrigin::create((uint64_t *)v36, v12, v13);
  char isSameOriginAs = WebCore::SecurityOrigin::isSameOriginAs(v11, v36[0]);
  uint64_t v16 = v36[0];
  v36[0] = 0;
  if (v16) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v16, v14);
  }
  int v17 = v37[0];
  v37[0] = 0;
  if (v17)
  {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v17, v14);
    if (isSameOriginAs) {
      goto LABEL_7;
    }
  }
  else if (isSameOriginAs)
  {
LABEL_7:
    uint64_t v19 = *(void *)(a1 + 8);
    uint64_t v18 = a1 + 8;
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(v19 + 56))(v18);
    int v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v21 = 19;
    *((void *)v21 + objc_destroyWeak(this + 1) = v20;
    *((void *)v21 + 66) = (char *)v21 + 16;
    *((void *)v21 + 67) = 512;
    *((void *)v21 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v21 + 70) = 0;
    *((void *)v21 + 69) = 0;
    IPC::Encoder::encodeHeader(v21);
    v36[0] = v21;
    IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v21, a3);
    IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v21, a4);
    uint64_t v22 = *a5;
    *a5 = 0;
    uint64_t v23 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v23 = &unk_1EE9C91E8;
    *((void *)v23 + objc_destroyWeak(this + 1) = v22;
    uint64_t v24 = (WTF *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v37[0] = v23;
    v37[1] = v24;
    (*(void (**)(uint64_t, WebCore::SecurityOrigin **, WTF **, void))(*(void *)v18 + 40))(v18, v36, v37, 0);
    uint64_t v26 = v37[0];
    v37[0] = 0;
    if (v26) {
      (*(void (**)(WTF *))(*(void *)v26 + 8))(v26);
    }
    uint64_t result = (uint64_t)v36[0];
    v36[0] = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v25);
      return WTF::fastFree(v28, v29);
    }
    return result;
  }
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)v37);
  uint64_t v30 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v30 + 16))(v30, v37);
  (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  CFTypeRef v31 = cf;
  CFTypeRef cf = 0;
  if (v31) {
    CFRelease(v31);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v37);
  uint64_t result = *(void *)(*(void *)(a1 + 24) + 3008);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v32 = (WTF::URL *)WebCore::ResourceRequestBase::url(a3);
    uint64_t result = WTF::URL::protocolIsJavaScript(v32);
    if ((result & 1) == 0)
    {
      uint64_t v33 = *(void **)(a1 + 24);
      if (v33[6])
      {
        if (v33[5])
        {
          uint64_t v34 = v33[3];
          atomic_fetch_add((atomic_uint *volatile)(v34 + 128), 1u);
          if (*(unsigned char *)(a1 + 56)
            && (v37[0] = *(WTF **)(a1 + 48),
                uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(v34 + 136), v37), v35 = *(void *)(a1 + 24), *(void *)(v35 + 48))&& (*(_OWORD *)v37 = *(_OWORD *)(v35 + 48), v38 = 1, v36[0] = *(WebCore::SecurityOrigin **)(v35 + 40), v36[1] = (WebCore::SecurityOrigin *)(v36[0] != 0), v36[0]))
          {
            uint64_t result = (uint64_t)WebKit::NetworkConnectionToWebProcess::loadCancelledDownloadRedirectRequestInFrame(result, (uint64_t)a3, (uint64_t)v37, (uint64_t)v36);
            if (v34 && atomic_fetch_add((atomic_uint *volatile)(v34 + 128), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, (unsigned int *)(v34 + 128));
              return (*(uint64_t (**)(uint64_t))(*(void *)v34 + 8))(v34);
            }
          }
          else
          {
            __break(1u);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::PendingDownload::cancel(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 3008);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  uint64_t v4 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, 0, 0);
  int v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

WTF *WebKit::PendingDownload::publishProgress(uint64_t a1, uint64_t a2, uint64_t a3, WTF *a4, char a5, uint64_t a6, WTF *a7)
{
  WTF::String::operator=((uint64_t *)(a1 + 64), (WTF::StringImpl **)a2);
  long long v15 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 7objc_destroyWeak(this + 2) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8++*(_DWORD *)(this + 8) = v15;
  if (a4)
  {
    if ((unint64_t)a4 >> 32) {
      goto LABEL_16;
    }
    uint64_t v16 = WTF::fastMalloc(a4);
    uint64_t v17 = v16;
    uint64_t v18 = 0;
    do
    {
      *((unsigned char *)v18 + v16) = *((unsigned char *)v18 + a3);
      uint64_t v18 = (WTF *)((char *)v18 + 1);
    }
    while (a4 != v18);
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v19 = *(WTF **)(a1 + 104);
  if (v19)
  {
    *(void *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 11objc_destroyWeak(this + 2) = 0;
    WTF::fastFree(v19, v14);
  }
  *(void *)(a1 + 104) = v17;
  *(_DWORD *)(a1 + 11objc_destroyWeak(this + 2) = a4;
  *(_DWORD *)(a1 + 116) = a4;
  *(unsigned char *)(a1 + 136) = a5;
  if (!a7)
  {
    uint64_t v21 = 0;
    goto LABEL_11;
  }
  if ((unint64_t)a7 >> 32)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x198C0DE58);
  }
  uint64_t v20 = WTF::fastMalloc(a7);
  uint64_t v21 = v20;
  uint64_t v22 = 0;
  do
  {
    *((unsigned char *)v22 + v20) = *((unsigned char *)v22 + a6);
    uint64_t v22 = (WTF *)((char *)v22 + 1);
  }
  while (a7 != v22);
LABEL_11:
  uint64_t result = *(WTF **)(a1 + 120);
  if (result)
  {
    *(void *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 12++*(_DWORD *)(this + 8) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, v14);
  }
  *(void *)(a1 + 120) = v21;
  *(_DWORD *)(a1 + 12++*(_DWORD *)(this + 8) = a7;
  *(_DWORD *)(a1 + 13objc_destroyWeak(this + 2) = a7;
  return result;
}

void WebKit::PendingDownload::didBecomeDownload(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 72)) {
    WebKit::Download::publishProgress(*a2, a1 + 64, *(void *)(a1 + 104), *(unsigned int *)(a1 + 116), *(unsigned __int8 *)(a1 + 136), *(void *)(a1 + 120), *(unsigned int *)(a1 + 132));
  }
}

IPC::Encoder *WebKit::PendingDownload::didFailLoading(IPC::Encoder *this, const WebCore::ResourceError *a2)
{
  if (!*((unsigned char *)this + 41))
  {
    uint64_t v4 = (char *)this + 8;
    uint64_t v3 = *((void *)this + 1);
    *((unsigned char *)this + 4objc_destroyWeak(this + 1) = 1;
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(v3 + 56))((uint64_t)this + 8);
    __int16 v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)__int16 v6 = 12;
    *((void *)v6 + objc_destroyWeak(this + 1) = v5;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    uint64_t v10 = v6;
    IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v6, a2);
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v6, 0);
    (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v4 + 32))(v4, &v10, 0);
    this = v10;
    uint64_t v10 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v7);
      return (IPC::Encoder *)WTF::fastFree(v8, v9);
    }
  }
  return this;
}

uint64_t WebKit::PendingDownload::messageSenderConnection(WebKit::PendingDownload *this)
{
  return *((void *)this + 4);
}

uint64_t non-virtual thunk to'WebKit::PendingDownload::messageSenderConnection(WebKit::PendingDownload *this)
{
  return *((void *)this + 3);
}

uint64_t WebKit::PendingDownload::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 1);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t WebKit::PendingDownload::messageSenderDestinationID(WebKit::PendingDownload *this)
{
  uint64_t result = *(void *)(*(void *)(*((void *)this + 3) + 3008) + 40);
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::PendingDownload::messageSenderDestinationID(WebKit::PendingDownload *this)
{
  uint64_t result = *(void *)(*(void *)(*((void *)this + 2) + 3008) + 40);
  if (!result) {
    __break(1u);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkNotificationManager::setPushAndNotificationsEnabledForOrigin(uint64_t a1, WebCore::SecurityOriginData *this, char a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v7 = v5 + 32;
    WebCore::SecurityOriginData::toString((uint64_t *)&v12, this);
    int v13 = &v12;
    char v14 = a3;
    IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SetPushAndNotificationsEnabledForOrigin,WTF::CompletionHandler<void ()(void)>>(v7, (uint64_t)&v13, a4);
    uint64_t result = v12;
    uint64_t v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    uint64_t v10 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WebCore::SecurityOriginData *))(*(void *)v10 + 16))(v10, this);
    BOOL v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return (WTF::StringImpl *)v11(v10);
  }
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SetPushAndNotificationsEnabledForOrigin,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 683;
  *((void *)v7 + objc_destroyWeak(this + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v18 = v7;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,BOOL>,0ul,1ul>(v7, a2);
  uint64_t v8 = *a3;
  *a3 = 0;
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v9 = &unk_1EE9C9210;
  v9[1] = v8;
  uint64_t v17 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v18, &v17);
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  int v13 = v18;
  uint64_t v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v15, v16);
  }
  return v11;
}

uint64_t WebKit::NetworkNotificationManager::getPendingPushMessage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9C9238;
  v4[1] = v3;
  uint64_t v8 = v4;
  uint64_t v5 = *(void *)(a1 + 16) + 32;
  char v7 = 0;
  IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> &&)>>(v5, (uint64_t)&v7, (uint64_t *)&v8);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 669;
  *((void *)v6 + objc_destroyWeak(this + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v17 = v6;
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v8 = &unk_1EE9C9260;
  v8[1] = v7;
  uint64_t v16 = v8;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v17, &v16);
  uint64_t v11 = v16;
  uint64_t v16 = 0;
  if (v11) {
    (*(void (**)(void *))(*v11 + 8))(v11);
  }
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::NetworkNotificationManager::getPendingPushMessages(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9C9288;
  v4[1] = v3;
  uint64_t v8 = v4;
  uint64_t v5 = *(void *)(a1 + 16) + 32;
  char v7 = 0;
  IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v5, (uint64_t)&v7, (uint64_t *)&v8);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 670;
  *((void *)v6 + objc_destroyWeak(this + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v17 = v6;
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v8 = &unk_1EE9C92B0;
  v8[1] = v7;
  uint64_t v16 = v8;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v17, &v16);
  uint64_t v11 = v16;
  uint64_t v16 = 0;
  if (v11) {
    (*(void (**)(void *))(*v11 + 8))(v11);
  }
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::ShowNotification,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 684;
  *((void *)v7 + objc_destroyWeak(this + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v18 = v7;
  IPC::ArgumentCoder<WebCore::NotificationData,void>::encode(v7, *(void *)a2);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>,void>::encode<IPC::Encoder,WebCore::NotificationResources>(v7, *(void **)(a2 + 8));
  uint64_t v8 = *a3;
  *a3 = 0;
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v9 = &unk_1EE9C92D8;
  v9[1] = v8;
  uint64_t v17 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v18, &v17);
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  int v13 = v18;
  uint64_t v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v15, v16);
  }
  return v11;
}

uint64_t WebKit::NetworkNotificationManager::showNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    v9[0] = a3;
    v9[1] = a4;
    return IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::ShowNotification,WTF::CompletionHandler<void ()(void)>>(v5 + 32, (uint64_t)v9, a5);
  }
  else
  {
    uint64_t v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
}

uint64_t WebKit::NetworkNotificationManager::getNotifications(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    v8[0] = a2;
    v8[1] = a3;
    return IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetNotifications,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)>>(v5 + 32, v8, a4);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v8[0]) = 8;
    int v9 = 1;
    uint64_t v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(void *)v7 + 16))(v7, v8);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
    if (v9 != -1) {
      return ((uint64_t (*)(char *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore16NotificationDataELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v9])(&v10, v8);
    }
  }
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetNotifications,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 668;
  *((void *)v7 + objc_destroyWeak(this + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v18 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a2[1]);
  uint64_t v8 = *a3;
  *a3 = 0;
  int v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v9 = &unk_1EE9C9300;
  v9[1] = v8;
  uint64_t v17 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v18, &v17);
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  int v13 = v18;
  uint64_t v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v15, v16);
  }
  return v11;
}

IPC::Encoder *WebKit::NetworkNotificationManager::cancelNotification(IPC::Encoder *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *((void *)result + 2);
  if (v3)
  {
    uint64_t v7 = *(void *)(v3 + 32);
    uint64_t v6 = v3 + 32;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
    int v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v9 = 666;
    *((void *)v9 + objc_destroyWeak(this + 1) = v8;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    int v13 = v9;
    IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v9, a2);
    IPC::ArgumentCoder<WTF::UUID,void>::encode(v9, a3);
    (*(void (**)(uint64_t, IPC::Encoder **))(*(void *)v6 + 16))(v6, &v13);
    uint64_t result = v13;
    int v13 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v10);
      return (IPC::Encoder *)WTF::fastFree(v11, v12);
    }
  }
  return result;
}

uint64_t WebKit::NetworkNotificationManager::requestPermission(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v8 = a2;
    return IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RequestPushPermission,WTF::CompletionHandler<void ()(BOOL)>>(v4 + 32, &v8, a3);
  }
  else
  {
    uint64_t v6 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, "requestPermission failed: no active connection to webpushd", buf, 2u);
    }
    uint64_t v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
}