WTF::StringImpl *IPC::Decoder::decode<WebCore::WritingTools::TextSuggestion>(uint64_t a1, IPC::Decoder *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t (*v7)(void);
  uint64_t vars8;

  result = IPC::ArgumentCoder<WebCore::WritingTools::TextSuggestion,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 48))
  {
    v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result && v5 != 0)
    {
      v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

__n128 WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WritingTools::TextSuggestion>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 48 * *(unsigned int *)(a1 + 12);
  __n128 result = *(__n128 *)v3;
  long long v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v3;
  *(_OWORD *)(v4 + 16) = v6;
  uint64_t v7 = *(void *)(v3 + 32);
  *(void *)(v3 + 32) = 0;
  *(void *)(v4 + 32) = v7;
  *(unsigned char *)(v4 + 40) = *(unsigned char *)(v3 + 40);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage40ProofreadingSessionDidReceiveSuggestionsEN6WebKit7WebPageES8_FvRKN7WebCore12WritingTools7SessionERKNS_6VectorINSA_14TextSuggestionELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS9_14CharacterRangeERKNSA_7ContextEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA025A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage40ProofreadingSessionDidReceiveSuggestionsEN6WebKit7WebPageES8_FvRKN7WebCore12WritingTools7SessionERKNS_6VectorINSA_14TextSuggestionELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS9_14CharacterRangeERKNSA_7ContextEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA025A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage40ProofreadingSessionDidReceiveSuggestionsEN6WebKit7WebPageES8_FvRKN7WebCore12WritingTools7SessionERKNS_6VectorINSA_14TextSuggestionELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS9_14CharacterRangeERKNSA_7ContextEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3464;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  __n128 result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::WritingTools::Session,BOOL>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t result = IPC::Decoder::decode<WebCore::WritingTools::Session>((uint64_t)v18, a2);
  if (v19)
  {
    unint64_t v5 = *((void *)a2 + 1);
    uint64_t v6 = *(void *)a2;
    unint64_t v7 = *((void *)a2 + 2) - *(void *)a2;
    if (v5 <= v7)
    {
      unint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v13 = *((void *)a2 + 3);
      if (v13)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
          uint64_t v12 = *(void *)a2;
          unint64_t v11 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v11 = 0;
          uint64_t v12 = 0;
        }
      }
    }
    else
    {
      v8 = (unsigned __int8 *)(v6 + v7);
      *((void *)a2 + 2) = v8 + 1;
      if (v6)
      {
        unsigned int v9 = *v8;
        if (v9 < 2)
        {
          long long v10 = v18[1];
          *(_OWORD *)a1 = v18[0];
          *(_OWORD *)(a1 + 16) = v10;
          *(unsigned char *)(a1 + 32) = v9 != 0;
          *(unsigned char *)(a1 + 48) = 1;
          return result;
        }
        goto LABEL_8;
      }
      unint64_t v11 = v5;
      uint64_t v12 = 0;
    }
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        uint64_t v6 = *(void *)a2;
        unint64_t v5 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
      }
    }
LABEL_8:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15 && v5) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v6);
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 48) = 0;
  uint64_t v16 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result && v16)
  {
    v17 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v17();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26WillEndWritingToolsSessionEN6WebKit7WebPageES8_FvRKN7WebCore12WritingTools7SessionEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA025C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26WillEndWritingToolsSessionEN6WebKit7WebPageES8_FvRKN7WebCore12WritingTools7SessionEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA025C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26WillEndWritingToolsSessionEN6WebKit7WebPageES8_FvRKN7WebCore12WritingTools7SessionEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3524;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void *IPC::Decoder::decode<std::tuple<WebCore::CharacterRange>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<WebCore::CharacterRange>(a2, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a1 = v8;
    *(unsigned char *)(a1 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (void *)a2[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v5);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage59ProofreadingSessionSuggestionTextRectsInRootViewCoordinatesEN6WebKit7WebPageES8_KFvRKN7WebCore14CharacterRangeEONS_17CompletionHandlerIFvONS_6VectorINS9_9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA025F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage59ProofreadingSessionSuggestionTextRectsInRootViewCoordinatesEN6WebKit7WebPageES8_KFvRKN7WebCore14CharacterRangeEONS_17CompletionHandlerIFvONS_6VectorINS9_9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA025F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage59ProofreadingSessionSuggestionTextRectsInRootViewCoordinatesEN6WebKit7WebPageES8_KFvRKN7WebCore14CharacterRangeEONS_17CompletionHandlerIFvONS_6VectorINS9_9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3465;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v10 = v5;
  IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  long long v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage48UpdateTextVisibilityForActiveWritingToolsSessionEN6WebKit7WebPageES8_FvRKN7WebCore14CharacterRangeEbRKNS_4UUIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02618;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage48UpdateTextVisibilityForActiveWritingToolsSessionEN6WebKit7WebPageES8_FvRKN7WebCore14CharacterRangeEbRKNS_4UUIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02618;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage48UpdateTextVisibilityForActiveWritingToolsSessionEN6WebKit7WebPageES8_FvRKN7WebCore14CharacterRangeEbRKNS_4UUIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3518;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  long long v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  long long v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage43TextPreviewDataForActiveWritingToolsSessionEN6WebKit7WebPageES8_FvRKN7WebCore14CharacterRangeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_17TextIndicatorDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02640;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage43TextPreviewDataForActiveWritingToolsSessionEN6WebKit7WebPageES8_FvRKN7WebCore14CharacterRangeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_17TextIndicatorDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02640;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage43TextPreviewDataForActiveWritingToolsSessionEN6WebKit7WebPageES8_FvRKN7WebCore14CharacterRangeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_17TextIndicatorDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3509;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::TextIndicatorData>,void>::encode<IPC::Encoder,std::optional<WebCore::TextIndicatorData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  long long v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage40SetSelectionForActiveWritingToolsSessionEN6WebKit7WebPageES8_FvRKN7WebCore14CharacterRangeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02668;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage40SetSelectionForActiveWritingToolsSessionEN6WebKit7WebPageES8_FvRKN7WebCore14CharacterRangeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02668;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage40SetSelectionForActiveWritingToolsSessionEN6WebKit7WebPageES8_FvRKN7WebCore14CharacterRangeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3497;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  long long v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  long long v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage52DecorateTextReplacementsForActiveWritingToolsSessionEN6WebKit7WebPageES8_FvRKN7WebCore14CharacterRangeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02690;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage52DecorateTextReplacementsForActiveWritingToolsSessionEN6WebKit7WebPageES8_FvRKN7WebCore14CharacterRangeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02690;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage52DecorateTextReplacementsForActiveWritingToolsSessionEN6WebKit7WebPageES8_FvRKN7WebCore14CharacterRangeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3394;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  long long v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  long long v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37CreateTextIndicatorForTextAnimationIDEN6WebKit7WebPageES8_FvRKNS_4UUIDEONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore17TextIndicatorDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA026B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37CreateTextIndicatorForTextAnimationIDEN6WebKit7WebPageES8_FvRKNS_4UUIDEONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore17TextIndicatorDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA026B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37CreateTextIndicatorForTextAnimationIDEN6WebKit7WebPageES8_FvRKNS_4UUIDEONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore17TextIndicatorDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3393;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::TextIndicatorData>,void>::encode<IPC::Encoder,std::optional<WebCore::TextIndicatorData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  long long v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage48UpdateUnderlyingTextVisibilityForTextAnimationIDEN6WebKit7WebPageES8_FvRKNS_4UUIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA026E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage48UpdateUnderlyingTextVisibilityForTextAnimationIDEN6WebKit7WebPageES8_FvRKNS_4UUIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA026E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage48UpdateUnderlyingTextVisibilityForTextAnimationIDEN6WebKit7WebPageES8_FvRKNS_4UUIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3519;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  long long v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  long long v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35CreateTextIndicatorForElementWithIDEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore17TextIndicatorDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02708;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35CreateTextIndicatorForElementWithIDEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore17TextIndicatorDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02708;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35CreateTextIndicatorForElementWithIDEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore17TextIndicatorDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3392;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::TextIndicatorData>,void>::encode<IPC::Encoder,std::optional<WebCore::TextIndicatorData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  long long v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30TakeSnapshotForTargetedElementEN6WebKit7WebPageES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ElementIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSA_16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02730;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30TakeSnapshotForTargetedElementEN6WebKit7WebPageES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ElementIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSA_16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02730;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30TakeSnapshotForTargetedElementEN6WebKit7WebPageES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ElementIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSA_16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3506;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  long long v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage45ResetVisibilityAdjustmentsForTargetedElementsEN6WebKit7WebPageES8_FvRKNS_6VectorINSt3__14pairINS_23ObjectIdentifierGenericIN7WebCore21ElementIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSD_16ProcessQualifiedINS_4UUIDEEEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02758;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage45ResetVisibilityAdjustmentsForTargetedElementsEN6WebKit7WebPageES8_FvRKNS_6VectorINSt3__14pairINS_23ObjectIdentifierGenericIN7WebCore21ElementIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSD_16ProcessQualifiedINS_4UUIDEEEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02758;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage45ResetVisibilityAdjustmentsForTargetedElementsEN6WebKit7WebPageES8_FvRKNS_6VectorINSt3__14pairINS_23ObjectIdentifierGenericIN7WebCore21ElementIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSD_16ProcessQualifiedINS_4UUIDEEEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3485;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::TargetedElementAdjustment>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::TargetedElementAdjustment,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 64))
  {
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

__n128 WTF::Vector<WebCore::TargetedElementAdjustment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TargetedElementAdjustment>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::TargetedElementAdjustment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unint64_t v4 = *(void *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6);
  long long v6 = *(_OWORD *)(v3 + 16);
  __n128 result = *(__n128 *)(v3 + 32);
  *(_OWORD *)unint64_t v4 = *(_OWORD *)v3;
  *(_OWORD *)(v4 + 16) = v6;
  *(__n128 *)(v4 + 32) = result;
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 56) = 0;
  uint64_t v7 = *(void *)(v3 + 48);
  *(void *)(v3 + 48) = 0;
  *(void *)(v4 + 48) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 56);
  *(_DWORD *)(v3 + 56) = 0;
  *(_DWORD *)(v4 + 56) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 60);
  *(_DWORD *)(v3 + 60) = 0;
  *(_DWORD *)(v4 + 60) = v7;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::TargetedElementAdjustment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::TargetedElementAdjustment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::TargetedElementAdjustment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::TargetedElementAdjustment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 26)
    {
      __break(0xC471u);
      JUMPOUT(0x1993BB1C4);
    }
    uint64_t v3 = result;
    unint64_t v4 = *(WTF **)result;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)result + ((unint64_t)*(unsigned int *)(result + 12) << 6));
    uint64_t v6 = WTF::fastMalloc((WTF *)(a2 << 6));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    __n128 result = WTF::VectorMover<false,WebCore::TargetedElementAdjustment>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v4, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::TargetedElementAdjustment>::move(uint64_t result, WTF::StringImpl *a2, uint64_t a3)
{
  if ((WTF::StringImpl *)result != a2)
  {
    result += 48;
    do
    {
      long long v5 = *(_OWORD *)(result - 48);
      long long v6 = *(_OWORD *)(result - 16);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(result - 32);
      *(_OWORD *)(a3 + 32) = v6;
      *(_OWORD *)a3 = v5;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      uint64_t v7 = *(void *)result;
      *(void *)__n128 result = 0;
      *(void *)(a3 + 48) = v7;
      LODWORD(v7) = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = 0;
      *(_DWORD *)(a3 + 56) = v7;
      LODWORD(v7) = *(_DWORD *)(result + 12);
      *(_DWORD *)(result + 12) = 0;
      *(_DWORD *)(a3 + 60) = v7;
      uint64_t v8 = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2);
      unint64_t v9 = (WTF::StringImpl *)(v8 + 16);
      __n128 result = v8 + 64;
      a3 += 64;
    }
    while (v9 != a2);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35AdjustVisibilityForTargetedElementsEN6WebKit7WebPageES8_FvONS_6VectorIN7WebCore25TargetedElementAdjustmentELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02780;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35AdjustVisibilityForTargetedElementsEN6WebKit7WebPageES8_FvONS_6VectorIN7WebCore25TargetedElementAdjustmentELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02780;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35AdjustVisibilityForTargetedElementsEN6WebKit7WebPageES8_FvONS_6VectorIN7WebCore25TargetedElementAdjustmentELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3382;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  long long v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *long long v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33NumberOfVisibilityAdjustmentRectsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA027A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33NumberOfVisibilityAdjustmentRectsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA027A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33NumberOfVisibilityAdjustmentRectsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3455;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  long long v6 = (void *)IPC::Encoder::grow(v5, 8uLL, 8);
  if (v7 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *long long v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24RemoteViewRectToRootViewEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENS9_9FloatRectEONS_17CompletionHandlerIFvSI_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA027D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24RemoteViewRectToRootViewEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENS9_9FloatRectEONS_17CompletionHandlerIFvSI_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA027D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24RemoteViewRectToRootViewEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENS9_9FloatRectEONS_17CompletionHandlerIFvSI_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, float a2, float a3, float a4, float a5)
{
  v12[0] = a2;
  v12[1] = a3;
  v12[2] = a4;
  v12[3] = a5;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 3468;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v13 = v7;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v7, v12);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RemoteViewPointToRootViewEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENS9_10FloatPointEONS_17CompletionHandlerIFvSI_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA027F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RemoteViewPointToRootViewEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENS9_10FloatPointEONS_17CompletionHandlerIFvSI_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA027F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RemoteViewPointToRootViewEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENS9_10FloatPointEONS_17CompletionHandlerIFvSI_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, float a2, float a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 3467;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v7, a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v7, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35RemoteDictionaryPopupInfoToRootViewEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENS9_19DictionaryPopupInfoEONS_17CompletionHandlerIFvSI_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02820;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35RemoteDictionaryPopupInfoToRootViewEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENS9_19DictionaryPopupInfoEONS_17CompletionHandlerIFvSI_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02820;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35RemoteDictionaryPopupInfoToRootViewEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENS9_19DictionaryPopupInfoEONS_17CompletionHandlerIFvSI_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3466;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::DictionaryPopupInfo,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18LoadAndDecodeImageEN6WebKit7WebPageES8_FvON7WebCore15ResourceRequestENSt3__18optionalINS9_9FloatSizeEEEmONS_17CompletionHandlerIFvONSC_7variantIJNS9_13ResourceErrorENS_3RefINS9_15ShareableBitmapENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02848;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18LoadAndDecodeImageEN6WebKit7WebPageES8_FvON7WebCore15ResourceRequestENSt3__18optionalINS9_9FloatSizeEEEmONS_17CompletionHandlerIFvONSC_7variantIJNS9_13ResourceErrorENS_3RefINS9_15ShareableBitmapENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02848;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18LoadAndDecodeImageEN6WebKit7WebPageES8_FvON7WebCore15ResourceRequestENSt3__18optionalINS9_9FloatSizeEEEmONS_17CompletionHandlerIFvONSC_7variantIJNS9_13ResourceErrorENS_3RefINS9_15ShareableBitmapENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3451;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v11 = v5;
  char v12 = *(_DWORD *)(a2 + 80);
  IPC::Encoder::operator<<<BOOL>(v5, &v12);
  if (v12)
  {
    if (v12 != 1) {
      goto LABEL_7;
    }
    if (*(_DWORD *)(a2 + 80) == 1)
    {
      IPC::ArgumentCoder<WebCore::ShareableBitmap,void>::encode(v5, *(WebCore::ShareableBitmap **)a2);
      goto LABEL_7;
    }
LABEL_10:
    uint64_t v10 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28StartPlayingPredominantVideoEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(v10);
  }
  if (*(_DWORD *)(a2 + 80)) {
    goto LABEL_10;
  }
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v5, (WebCore::ResourceError *)a2);
LABEL_7:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  unint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28StartPlayingPredominantVideoEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02870;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28StartPlayingPredominantVideoEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02870;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28StartPlayingPredominantVideoEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3501;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    char v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage63SimulateClickOverFirstMatchingTextInViewportWithUserInteractionEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02898;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage63SimulateClickOverFirstMatchingTextInViewportWithUserInteractionEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02898;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage63SimulateClickOverFirstMatchingTextInViewportWithUserInteractionEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3500;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    char v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA028C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA028C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  long long v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *long long v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage23SyncApplyAutocorrectionEN6WebKit7WebPageES8_FvRKNS_6StringESB_bONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA028E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage23SyncApplyAutocorrectionEN6WebKit7WebPageES8_FvRKNS_6StringESB_bONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA028E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage23SyncApplyAutocorrectionEN6WebKit7WebPageES8_FvRKNS_6StringESB_bONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  long long v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *long long v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage26ComputePagesForPrintingiOSEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvmEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJmEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02910;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage26ComputePagesForPrintingiOSEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvmEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJmEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02910;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage26ComputePagesForPrintingiOSEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvmEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJmEE4callEm(uint64_t a1, uint64_t a2)
{
  int v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t IPC::Decoder::decode<std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[40])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    uint64_t v6 = (unsigned int *)(v3 + v4);
    *((void *)a1 + 2) = v6 + 1;
    if (v3)
    {
      uint64_t v14 = *v6 | 0x100000000;
      return IPC::ArgumentCoder<std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,int>(a1, (uint64_t)&v14, a2);
    }
    unint64_t v8 = v2;
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v10 = *((void *)a1 + 3);
    if (v10)
    {
      unint64_t v11 = a1;
      uint64_t v13 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v3, v2);
        a1 = v11;
        a2 = v13;
        uint64_t v9 = *(void *)v11;
        unint64_t v8 = *((void *)v11 + 1);
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result)
  {
    if (v8)
    {
      char v12 = a2;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v9);
      a2 = v12;
    }
  }
  *a2 = 0;
  a2[40] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,int>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)v7);
  if (v7[16]) {
    return IPC::ArgumentCoder<std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, a2, (uint64_t)v7, (uint64_t)a3);
  }
  *a3 = 0;
  a3[40] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v9);
  char v8 = v10;
  if (!v10)
  {
    *(unsigned char *)a4 = 0;
    goto LABEL_6;
  }
  if (*(unsigned char *)(a2 + 4) && *(unsigned char *)(a3 + 16))
  {
    *(_DWORD *)a4 = *(_DWORD *)a2;
    *(_OWORD *)(a4 + 8) = *(_OWORD *)a3;
    *(void *)(a4 + 24) = v9[0];
    *(void *)(a4 + 32) = v9[1];
    char v8 = 1;
LABEL_6:
    *(unsigned char *)(a4 + 40) = v8;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage29BindRemoteAccessibilityFramesEN6WebKit7WebPageES8_FviN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvSL_iEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_iEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02938;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage29BindRemoteAccessibilityFramesEN6WebKit7WebPageES8_FviN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvSL_iEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_iEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02938;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage29BindRemoteAccessibilityFramesEN6WebKit7WebPageES8_FviN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvSL_iEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_iEE4callESL_i(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v6 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v6, *(const void **)a2, *(unsigned int *)(a2 + 12));
  uint64_t v7 = (_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4);
  if (v8 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v7 = a3;
    uint64_t v9 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v9, v5, 0, 0);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage31GetStringSelectionForPasteboardEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02960;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage31GetStringSelectionForPasteboardEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02960;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage31GetStringSelectionForPasteboardEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage29GetDataSelectionForPasteboardEN6WebKit7WebPageES8_FvNS_6StringEONS_17CompletionHandlerIFvONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02988;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage29GetDataSelectionForPasteboardEN6WebKit7WebPageES8_FvNS_6StringEONS_17CompletionHandlerIFvONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02988;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage29GetDataSelectionForPasteboardEN6WebKit7WebPageES8_FvNS_6StringEONS_17CompletionHandlerIFvONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, atomic_uint **a2)
{
  unint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage27ReadSelectionFromPasteboardEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvObEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA029B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage27ReadSelectionFromPasteboardEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvObEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA029B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage27ReadSelectionFromPasteboardEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvObEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, char *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  char v4 = *a2;
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = v4;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v3, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage30ShouldDelayWindowOrderingEventEN6WebKit7WebPageES8_FvRKNS7_13WebMouseEventEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA029D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage30ShouldDelayWindowOrderingEventEN6WebKit7WebPageES8_FvRKNS7_13WebMouseEventEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA029D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage30ShouldDelayWindowOrderingEventEN6WebKit7WebPageES8_FvRKNS7_13WebMouseEventEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  char v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)v5);
  if (v5[16]) {
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a1, (uint64_t)v5, a2);
  }
  *a2 = 0;
  a2[32] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    uint64_t v7 = (void *)(v4 + v5);
    a1[2] = (uint64_t)(v7 + 1);
    if (v4)
    {
      v15[0] = *v7;
      v15[1] = 1;
      return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned long>(a1, a2, (uint64_t)v15, (uint64_t)a3);
    }
    unint64_t v9 = v3;
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      char v12 = a1;
      uint64_t v14 = a3;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v4, v3);
        a1 = v12;
        a3 = v14;
        uint64_t v10 = *v12;
        unint64_t v9 = v12[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v9)
    {
      uint64_t v13 = a3;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v10);
      a3 = v13;
    }
  }
  *a3 = 0;
  a3[32] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned long>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::OptionSet<WebCore::RenderAsTextFlag>>(a1);
  if ((result & 0xFF0000) == 0)
  {
    char v8 = 0;
    *(unsigned char *)a4 = 0;
    goto LABEL_6;
  }
  if (*(unsigned char *)(a2 + 16) && *(unsigned char *)(a3 + 8))
  {
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(void *)(a4 + 16) = *(void *)a3;
    *(_WORD *)(a4 + 24) = result;
    char v8 = 1;
LABEL_6:
    *(unsigned char *)(a4 + 32) = v8;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::RenderAsTextFlag>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WTF::OptionSet<WebCore::RenderAsTextFlag>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::OptionSet<WebCore::RenderAsTextFlag>,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 1) & 0xFFFFFFFFFFFFFFFELL) - *a1;
  if (v1 < v3 || v1 - v3 <= 1)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v15 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v2, v1);
        a1 = v15;
        uint64_t v11 = *v15;
        unint64_t v10 = v15[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_10;
  }
  uint64_t v5 = (unsigned __int16 *)(v2 + v3);
  a1[2] = v5 + 1;
  if (!v2)
  {
    unint64_t v10 = v1;
    uint64_t v11 = 0;
LABEL_10:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13 && v10) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
    }
    goto LABEL_11;
  }
  unsigned int v6 = *v5;
  if (v6 > 0x7FF)
  {
LABEL_11:
    int v9 = 0;
    int v8 = 0;
    int v7 = 0;
    return v8 | v9 | v7;
  }
  int v7 = v6 & 0x700;
  int v8 = v6;
  int v9 = 0x10000;
  return v8 | v9 | v7;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage26RenderTreeAsTextForTestingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEmNS_9OptionSetINS9_16RenderAsTextFlagEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02A00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage26RenderTreeAsTextForTestingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEmNS_9OptionSetINS9_16RenderAsTextFlagEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02A00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage26RenderTreeAsTextForTestingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEmNS_9OptionSetINS9_16RenderAsTextFlagEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage19FrameTextForTestingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02A28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage19FrameTextForTestingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02A28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage19FrameTextForTestingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t WebKit::WebPageProxy::didReceiveSyncMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (WebKit::BrowsingContextGroup **)MEMORY[0x1F4188790](a1, a2, a3);
  int v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = (atomic_uchar *volatile *)v10;
  uint64_t v12 = (uint64_t)v5;
  uint64_t v506 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = WebKit::WebPageProxy::sharedPreferencesForWebProcess(v5, v10);
  CFRetain(*(CFTypeRef *)(v12 + 8));
  int v15 = *(unsigned __int16 *)(v9 + 50);
  uint64_t v16 = (uint64_t)v483;
  switch(*(_WORD *)(v9 + 50))
  {
    case 0xE9C:
      *(void *)&long long v501 = IPC::Decoder::decode<std::tuple<WebCore::IntSize>>((unint64_t *)v9);
      DWORD2(v501) = v17;
      uint64_t v9 = v17 != 0;
      if ((_BYTE)v17)
      {
        uint64_t v18 = *v7;
        *int v7 = 0;
        *(void *)v483 = v18;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v483[8], v11);
        char v19 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)char v19 = &unk_1EEA03190;
        *((void *)v19 + 1) = *(void *)v483;
        uint64_t v20 = *(void *)&v483[8];
        *(void *)v483 = 0;
        *(void *)&v483[8] = 0;
        *((void *)v19 + 2) = v20;
        v473[0] = v19;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v483[8]);
        v22 = *(IPC::Encoder **)v483;
        *(void *)v483 = 0;
        if (v22)
        {
          IPC::Encoder::~Encoder(v22, v21);
          WTF::fastFree(v348, v349);
        }
        WebKit::WebPageProxy::accessibilityScreenToRootView(v12, (uint64_t)&v501, (uint64_t *)v473);
        v23 = v473[0];
        v473[0] = 0;
        if (v23) {
          goto LABEL_401;
        }
      }
      goto LABEL_230;
    case 0xE9D:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v9, (uint64_t)v483);
      uint64_t v9 = v483[16] != 0;
      if (v483[16])
      {
        uint64_t v131 = *v7;
        *int v7 = 0;
        *(void *)&long long v501 = v131;
        int v7 = (uint64_t *)&v501 + 1;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
        v132 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)v132 = &unk_1EEA03280;
        *((void *)v132 + 1) = v501;
        uint64_t v133 = *((void *)&v501 + 1);
        long long v501 = 0uLL;
        *((void *)v132 + 2) = v133;
        v473[0] = v132;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
        v135 = (IPC::Encoder *)v501;
        *(void *)&long long v501 = 0;
        if (v135)
        {
          IPC::Encoder::~Encoder(v135, v134);
          WTF::fastFree(v354, v355);
        }
        if (!v483[16]) {
          goto LABEL_467;
        }
        WebKit::WebPageProxy::backForwardGoToItem(v12, v483, (uint64_t *)v473);
        v23 = v473[0];
        v473[0] = 0;
        if (v23) {
          goto LABEL_401;
        }
      }
      goto LABEL_230;
    case 0xE9E:
      uint64_t v136 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v9);
      if ((v136 & 0xFF00000000) == 0) {
        goto LABEL_438;
      }
      unsigned int v137 = v136;
      uint64_t v138 = *v7;
      *int v7 = 0;
      *(void *)v483 = v138;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v483[8], v11);
      v139 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v139 = &unk_1EEA032A8;
      v139[1] = *(void *)v483;
      uint64_t v140 = *(void *)&v483[8];
      *(void *)v483 = 0;
      *(void *)&v483[8] = 0;
      v139[2] = v140;
      *(void *)&long long v501 = v139;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v483[8]);
      v142 = *(IPC::Encoder **)v483;
      *(void *)v483 = 0;
      if (v142)
      {
        IPC::Encoder::~Encoder(v142, v141);
        WTF::fastFree(v356, v357);
      }
      WebKit::WebPageProxy::backForwardItemAtIndex(v12, (WebKit::AuxiliaryProcessProxy *)v11, v137, (uint64_t *)&v501);
      uint64_t v143 = v501;
      *(void *)&long long v501 = 0;
      if (!v143) {
        goto LABEL_229;
      }
      goto LABEL_228;
    case 0xE9F:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v9, (uint64_t)v483);
      uint64_t v9 = v483[16] != 0;
      if (!v483[16]) {
        goto LABEL_230;
      }
      uint64_t v164 = *v7;
      *int v7 = 0;
      *(void *)&long long v501 = v164;
      int v7 = (uint64_t *)&v501 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
      v165 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v165 = &unk_1EEA032D0;
      *((void *)v165 + 1) = v501;
      uint64_t v166 = *((void *)&v501 + 1);
      long long v501 = 0uLL;
      *((void *)v165 + 2) = v166;
      v473[0] = v165;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
      v168 = (IPC::Encoder *)v501;
      *(void *)&long long v501 = 0;
      if (v168)
      {
        IPC::Encoder::~Encoder(v168, v167);
        WTF::fastFree(v362, v363);
      }
      if (!v483[16]) {
        goto LABEL_467;
      }
      WebKit::WebPageProxy::backForwardListContainsItem(v12, v483, (uint64_t *)v473);
      v23 = v473[0];
      v473[0] = 0;
      if (v23) {
        goto LABEL_401;
      }
      goto LABEL_230;
    case 0xEA0:
      uint64_t v144 = *v7;
      *int v7 = 0;
      *(void *)v483 = v144;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v483[8], v11);
      v145 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v145 = &unk_1EEA032F8;
      v145[1] = *(void *)v483;
      uint64_t v146 = *(void *)&v483[8];
      *(void *)v483 = 0;
      *(void *)&v483[8] = 0;
      v145[2] = v146;
      *(void *)&long long v501 = v145;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v483[8]);
      v148 = *(IPC::Encoder **)v483;
      *(void *)v483 = 0;
      if (v148)
      {
        IPC::Encoder::~Encoder(v148, v147);
        WTF::fastFree(v324, v325);
      }
      WebKit::WebPageProxy::backForwardListCounts(v12, (uint64_t *)&v501);
      uint64_t v143 = v501;
      *(void *)&long long v501 = 0;
      if (v143) {
        goto LABEL_228;
      }
      goto LABEL_229;
    case 0xEA2:
      unsigned __int16 v157 = IPC::Decoder::decode<std::tuple<WebCore::MediaSessionHelperClient::SuspendedUnderLock>>((void *)v9);
      if (v157 < 0x100u) {
        goto LABEL_438;
      }
      char v158 = v157;
      uint64_t v159 = *v7;
      *int v7 = 0;
      *(void *)v483 = v159;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v483[8], v11);
      v160 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v160 = &unk_1EEA03320;
      v160[1] = *(void *)v483;
      uint64_t v161 = *(void *)&v483[8];
      *(void *)v483 = 0;
      *(void *)&v483[8] = 0;
      v160[2] = v161;
      *(void *)&long long v501 = v160;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v483[8]);
      v163 = *(IPC::Encoder **)v483;
      *(void *)v483 = 0;
      if (v163)
      {
        IPC::Encoder::~Encoder(v163, v162);
        WTF::fastFree(v360, v361);
      }
      WebKit::WebPageProxy::canUndoRedo(v12, v158 != 0, (uint64_t *)&v501);
LABEL_227:
      uint64_t v143 = v501;
      *(void *)&long long v501 = 0;
      if (v143) {
        goto LABEL_228;
      }
      goto LABEL_229;
    case 0xEA3:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)v9, (uint64_t)v483);
      uint64_t v9 = v483[8] != 0;
      if (!v483[8]) {
        goto LABEL_230;
      }
      uint64_t v193 = *v7;
      *int v7 = 0;
      *(void *)&long long v501 = v193;
      int v7 = (uint64_t *)&v501 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
      v194 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v194 = &unk_1EEA03410;
      *((void *)v194 + 1) = v501;
      uint64_t v195 = *((void *)&v501 + 1);
      long long v501 = 0uLL;
      *((void *)v194 + 2) = v195;
      v473[0] = v194;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
      v197 = (IPC::Encoder *)v501;
      *(void *)&long long v501 = 0;
      if (v197)
      {
        IPC::Encoder::~Encoder(v197, v196);
        WTF::fastFree(v368, v369);
      }
      if (!v483[8]) {
        goto LABEL_467;
      }
      WebKit::WebPageProxy::checkGrammarOfString(v12, (uint64_t)v483, (uint64_t *)v473);
      v54 = v473[0];
      v473[0] = 0;
      if (v54) {
        goto LABEL_200;
      }
      goto LABEL_201;
    case 0xEA4:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)v9, (uint64_t)v483);
      uint64_t v9 = v483[8] != 0;
      if (!v483[8]) {
        goto LABEL_230;
      }
      uint64_t v198 = *v7;
      *int v7 = 0;
      *(void *)&long long v501 = v198;
      int v7 = (uint64_t *)&v501 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
      v199 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v199 = &unk_1EEA033E8;
      *((void *)v199 + 1) = v501;
      uint64_t v200 = *((void *)&v501 + 1);
      long long v501 = 0uLL;
      *((void *)v199 + 2) = v200;
      v473[0] = v199;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
      v202 = (IPC::Encoder *)v501;
      *(void *)&long long v501 = 0;
      if (v202)
      {
        IPC::Encoder::~Encoder(v202, v201);
        WTF::fastFree(v370, v371);
      }
      if (!v483[8]) {
        goto LABEL_467;
      }
      WebKit::WebPageProxy::checkSpellingOfString(v12, (uint64_t)v483, (uint64_t *)v473);
      v54 = v473[0];
      v473[0] = 0;
      if (v54) {
        goto LABEL_200;
      }
      goto LABEL_201;
    case 0xEA5:
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v9, (uint64_t)&v501);
      if (!BYTE8(v501))
      {
        int v72 = 0;
        v483[0] = 0;
        v483[16] = 0;
        goto LABEL_416;
      }
      uint64_t v70 = IPC::Decoder::decode<WTF::OptionSet<WebKit::DocumentEditingContextRequest::Options>>((uint64_t *)v9);
      uint64_t v13 = v70;
      if ((unsigned __int16)v70 <= 0xFFu) {
        goto LABEL_62;
      }
      unint64_t v268 = *(void *)(v9 + 8);
      unint64_t v269 = *(void *)v9;
      unint64_t v270 = ((*(void *)(v9 + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v9;
      if (v268 >= v270 && v268 - v270 > 3)
      {
        v272 = (unsigned int *)(v269 + v270);
        *(void *)(v9 + 16) = v272 + 1;
        if (v269)
        {
          if (!BYTE8(v501)) {
            goto LABEL_467;
          }
          int v73 = 0;
          uint64_t v16 = *v272;
          uint64_t v273 = v501;
          *(void *)&long long v501 = 0;
          *(void *)v483 = v273;
          v483[8] = v70;
          *(_DWORD *)&v483[12] = v16;
          int v72 = 1;
          goto LABEL_300;
        }
        unint64_t v470 = v268;
        v71 = 0;
      }
      else
      {
        unint64_t v470 = 0;
        v71 = 0;
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        uint64_t v471 = *(void *)(v9 + 24);
        if (v471)
        {
          if (v268)
          {
            (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v471 + 16))(v471, v269, v268);
            v71 = *(WTF::StringImpl **)v9;
            unint64_t v470 = *(void *)(v9 + 8);
          }
          else
          {
            unint64_t v470 = 0;
            v71 = 0;
          }
        }
      }
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      uint64_t v472 = *(void *)(v9 + 24);
      if (v472 && v470) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v472 + 16))(v472, v71);
      }
LABEL_62:
      int v72 = 0;
      v483[0] = 0;
      int v73 = 1;
LABEL_300:
      v483[16] = v72;
      if (BYTE8(v501))
      {
        v274 = (WTF::StringImpl *)v501;
        *(void *)&long long v501 = 0;
        if (v274)
        {
          if (*(_DWORD *)v274 == 2) {
            WTF::StringImpl::destroy(v274, v71);
          }
          else {
            *(_DWORD *)v274 -= 2;
          }
        }
      }
      if (!v73)
      {
LABEL_318:
        uint64_t v9 = v72 != 0;
        if (!v72) {
          goto LABEL_230;
        }
        uint64_t v282 = *v7;
        *int v7 = 0;
        *(void *)&long long v501 = v282;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
        v283 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)v283 = &unk_1EEA033C0;
        *((void *)v283 + 1) = v501;
        uint64_t v284 = *((void *)&v501 + 1);
        long long v501 = 0uLL;
        *((void *)v283 + 2) = v284;
        v473[0] = v283;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
        v286 = (IPC::Encoder *)v501;
        *(void *)&long long v501 = 0;
        if (v286)
        {
          IPC::Encoder::~Encoder(v286, v285);
          WTF::fastFree(v378, v379);
        }
        WebKit::WebPageProxy::checkTextOfParagraph(v12, (uint64_t *)v483, v13, v16, (uint64_t *)v473);
        v287 = v473[0];
        v473[0] = 0;
        if (v287) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v287 + 8))(v287);
        }
        if (!v483[16]) {
          goto LABEL_230;
        }
LABEL_202:
        v203 = *(WTF::StringImpl **)v483;
        *(void *)v483 = 0;
        if (v203)
        {
          if (*(_DWORD *)v203 == 2) {
            WTF::StringImpl::destroy(v203, v53);
          }
          else {
            *(_DWORD *)v203 -= 2;
          }
        }
        goto LABEL_230;
      }
LABEL_416:
      unint64_t v417 = *(void *)v9;
      uint64_t v418 = *(void *)(v9 + 8);
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      uint64_t v419 = *(void *)(v9 + 24);
      if (v419 && v418) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v419 + 16))(v419, v417);
      }
      goto LABEL_318;
    case 0xEA6:
      IPC::ArgumentCoder<WebCore::WindowFeatures,void>::decode((uint64_t *)v9, (uint64_t)v473);
      if (v478
        || (unint64_t v426 = *(void *)v9,
            uint64_t v427 = *(void *)(v9 + 8),
            *(void *)uint64_t v9 = 0,
            *(void *)(v9 + 8) = 0,
            (uint64_t v428 = *(void *)(v9 + 24)) != 0)
        && v427
        && ((*(void (**)(uint64_t, unint64_t))(*(void *)v428 + 16))(v428, v426), v478))
      {
        IPC::Decoder::decode<WebKit::NavigationActionData>((IPC::Decoder *)v9, (uint64_t)&v501);
        if (v505)
        {
          if (!v478) {
            goto LABEL_467;
          }
          *(_OWORD *)v483 = *(_OWORD *)v473;
          *(_OWORD *)&v483[16] = v474;
          *(_OWORD *)&v483[32] = v475[0];
          *(_OWORD *)&v483[42] = *(_OWORD *)((char *)v475 + 10);
          uint64_t v484 = v476;
          uint64_t v210 = v477;
          uint64_t v476 = 0;
          uint64_t v477 = 0;
          uint64_t v485 = v210;
          WebKit::NavigationActionData::NavigationActionData((uint64_t)v486, (uint64_t)&v501);
          char v500 = 1;
          if (v505) {
            WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)&v501);
          }
        }
        else
        {
          v483[0] = 0;
          char v500 = 0;
        }
        if (v478) {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v476, v209);
        }
      }
      else
      {
        v483[0] = 0;
        char v500 = 0;
      }
      if (!v500)
      {
        unint64_t v437 = *(void *)v9;
        uint64_t v438 = *(void *)(v9 + 8);
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        uint64_t v439 = *(void *)(v9 + 24);
        if (!v439) {
          goto LABEL_438;
        }
        if (!v438) {
          goto LABEL_438;
        }
        (*(void (**)(uint64_t, unint64_t))(*(void *)v439 + 16))(v439, v437);
        if (!v500) {
          goto LABEL_438;
        }
      }
      uint64_t v275 = *v7;
      *int v7 = 0;
      *(void *)&long long v501 = v275;
      uint64_t v9 = (uint64_t)&v501 + 8;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
      v276 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v276 = &unk_1EEA03000;
      *((void *)v276 + 1) = v501;
      uint64_t v277 = *((void *)&v501 + 1);
      long long v501 = 0uLL;
      *((void *)v276 + 2) = v277;
      v473[0] = v276;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
      v279 = (IPC::Encoder *)v501;
      *(void *)&long long v501 = 0;
      if (v279)
      {
        IPC::Encoder::~Encoder(v279, v278);
        WTF::fastFree(v380, v381);
      }
      if (!v500) {
        goto LABEL_467;
      }
      WebKit::WebPageProxy::createNewPage(v12, (uint64_t)v11, (uint64_t)v483, (uint64_t)v486, (uint64_t *)v473);
      v280 = v473[0];
      v473[0] = 0;
      if (v280) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v280 + 8))(v280);
      }
      if (v500)
      {
        WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v486);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v484, v281);
      }
      goto LABEL_229;
    case 0xEA7:
      IPC::Decoder::decode<std::tuple<WebKit::NavigationActionData>>((IPC::Decoder *)v9, v483);
      uint64_t v9 = v499 != 0;
      if (!v499) {
        goto LABEL_230;
      }
      uint64_t v79 = *v7;
      *int v7 = 0;
      *(void *)&long long v501 = v79;
      int v7 = (uint64_t *)&v501 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
      v80 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v80 = &unk_1EEA03230;
      *((void *)v80 + 1) = v501;
      uint64_t v81 = *((void *)&v501 + 1);
      long long v501 = 0uLL;
      *((void *)v80 + 2) = v81;
      v473[0] = v80;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
      v83 = (IPC::Encoder *)v501;
      *(void *)&long long v501 = 0;
      if (v83)
      {
        IPC::Encoder::~Encoder(v83, v82);
        WTF::fastFree(v344, v345);
      }
      if (!v499) {
        goto LABEL_467;
      }
      WebKit::WebPageProxy::decidePolicyForNavigationActionSync(v12, (uint64_t)v11, (uint64_t)v483, (uint64_t *)v473);
      v84 = v473[0];
      v473[0] = 0;
      if (v84) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v84 + 8))(v84);
      }
      if (v499) {
        WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v483);
      }
      goto LABEL_230;
    case 0xEA8:
      uint64_t v149 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)v9);
      if (!v150) {
        goto LABEL_438;
      }
      uint64_t v151 = v149;
      uint64_t v152 = *v7;
      *int v7 = 0;
      *(void *)v483 = v152;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v483[8], v11);
      v153 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v153 = &unk_1EEA034D8;
      v153[1] = *(void *)v483;
      uint64_t v154 = *(void *)&v483[8];
      *(void *)v483 = 0;
      *(void *)&v483[8] = 0;
      v153[2] = v154;
      *(void *)&long long v501 = v153;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v483[8]);
      v156 = *(IPC::Encoder **)v483;
      *(void *)v483 = 0;
      if (v156)
      {
        IPC::Encoder::~Encoder(v156, v155);
        WTF::fastFree(v358, v359);
      }
      WebKit::WebPageProxy::dictationAlternatives(v12, v151, (uint64_t *)&v501);
      uint64_t v143 = v501;
      *(void *)&long long v501 = 0;
      if (v143) {
        goto LABEL_228;
      }
      goto LABEL_229;
    case 0xEA9:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v9, (uint64_t)&v501);
      if (!v502) {
        goto LABEL_437;
      }
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v9, (uint64_t)&v479);
      if (!v480) {
        goto LABEL_437;
      }
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v9, (uint64_t)&v481);
      if (!v482)
      {
        int v112 = 0;
        v483[0] = 0;
        LOBYTE(v485) = 0;
        goto LABEL_372;
      }
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v9, (uint64_t)v473);
      if (!LOBYTE(v473[1]))
      {
        int v112 = 0;
        v483[0] = 0;
        LOBYTE(v485) = 0;
        goto LABEL_367;
      }
      unint64_t v98 = *(void *)(v9 + 8);
      v97 = *(WTF::StringImpl **)v9;
      unint64_t v99 = ((*(void *)(v9 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v9;
      if (v98 < v99 || v98 - v99 <= 7)
      {
        unint64_t v466 = 0;
        unint64_t v467 = 0;
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        uint64_t v468 = *(void *)(v9 + 24);
        if (v468)
        {
          if (v98)
          {
            (*(void (**)(uint64_t))(*(void *)v468 + 16))(v468);
            unint64_t v467 = *(void *)v9;
            unint64_t v466 = *(void *)(v9 + 8);
          }
          else
          {
            unint64_t v466 = 0;
            unint64_t v467 = 0;
          }
        }
        goto LABEL_478;
      }
      v100 = (uint64_t *)((char *)v97 + v99);
      *(void *)(v9 + 16) = v100 + 1;
      if (!v97)
      {
        unint64_t v466 = v98;
        unint64_t v467 = 0;
LABEL_478:
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        uint64_t v469 = *(void *)(v9 + 24);
        if (v469 && v466) {
          (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v469 + 16))(v469, v467, v466);
        }
        goto LABEL_479;
      }
      unint64_t v101 = (((unint64_t)v100 + 15) & 0xFFFFFFFFFFFFFFF8) - (void)v97;
      if (v98 < v101 || v98 - v101 <= 7) {
        goto LABEL_410;
      }
      uint64_t v16 = *v100;
      *(void *)(v9 + 16) = (((unint64_t)v100 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
      uint64_t v13 = *(void *)(((unint64_t)v100 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v103 = (((((unint64_t)v100 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) - (void)v97;
      BOOL v104 = v98 >= v103 && v98 - v103 > 7;
      if (!v104
        || ((v105 = (uint64_t *)((char *)v97 + v103),
             *(void *)(v9 + 16) = v105 + 1,
             uint64_t v3 = *v105,
             unint64_t v106 = (((unint64_t)v105 + 15) & 0xFFFFFFFFFFFFFFF8) - (void)v97,
             v98 >= v106)
          ? (BOOL v107 = v98 - v106 > 7)
          : (BOOL v107 = 0),
            !v107))
      {
LABEL_410:
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        uint64_t v414 = *(void *)(v9 + 24);
        if (v414)
        {
          if (v98)
          {
            (*(void (**)(uint64_t))(*(void *)v414 + 16))(v414);
            v97 = *(WTF::StringImpl **)v9;
            uint64_t v415 = *(void *)(v9 + 8);
            uint64_t v416 = *(void *)(v9 + 24);
            *(void *)uint64_t v9 = 0;
            *(void *)(v9 + 8) = 0;
            if (v416)
            {
              if (v415) {
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v416 + 16))(v416, v97);
              }
            }
          }
        }
LABEL_479:
        int v112 = 0;
        v483[0] = 0;
        goto LABEL_114;
      }
      v108 = (uint64_t *)((char *)v97 + v106);
      uint64_t v4 = *v108;
      *(void *)(v9 + 16) = v108 + 1;
      if (!v502 || !v480 || !v482) {
        goto LABEL_467;
      }
      *(_OWORD *)v483 = v501;
      v109 = v479;
      v479 = 0;
      v110 = v481;
      v481 = 0;
      *(void *)&v483[16] = v109;
      *(void *)&v483[24] = v110;
      v111 = v473[0];
      v473[0] = 0;
      *(void *)&v483[32] = v111;
      *(void *)&v483[40] = v16;
      *(void *)&v483[48] = v13;
      *(void *)&v483[56] = v3;
      int v112 = 1;
      uint64_t v484 = v4;
LABEL_114:
      LOBYTE(v485) = v112;
      if (LOBYTE(v473[1]))
      {
        v113 = v473[0];
        v473[0] = 0;
        if (v113)
        {
          if (*(_DWORD *)v113 == 2) {
            WTF::StringImpl::destroy(v113, v97);
          }
          else {
            *(_DWORD *)v113 -= 2;
          }
        }
      }
LABEL_367:
      if (v482)
      {
        v311 = v481;
        v481 = 0;
        if (v311)
        {
          if (*(_DWORD *)v311 == 2) {
            WTF::StringImpl::destroy(v311, v97);
          }
          else {
            *(_DWORD *)v311 -= 2;
          }
        }
      }
LABEL_372:
      if (v480)
      {
        v312 = v479;
        v479 = 0;
        if (v312)
        {
          if (*(_DWORD *)v312 == 2) {
            WTF::StringImpl::destroy(v312, v97);
          }
          else {
            *(_DWORD *)v312 -= 2;
          }
        }
      }
      if (v112)
      {
        uint64_t v313 = *v7;
        *int v7 = 0;
        *(void *)&long long v501 = v313;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
        v314 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)v314 = &unk_1EEA03398;
        *((void *)v314 + 1) = v501;
        uint64_t v315 = *((void *)&v501 + 1);
        long long v501 = 0uLL;
        *((void *)v314 + 2) = v315;
        v473[0] = v314;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
        v317 = (IPC::Encoder *)v501;
        *(void *)&long long v501 = 0;
        if (v317)
        {
          IPC::Encoder::~Encoder(v317, v316);
          WTF::fastFree(v387, v388);
        }
        WebKit::WebPageProxy::exceededDatabaseQuota(v12, *(_DWORD **)v483, *(uint64_t *)&v483[8], (_DWORD **)&v483[16], (_DWORD **)&v483[24], (_DWORD **)&v483[32], v16, v13, v3, v4, (uint64_t *)v473);
        v318 = v473[0];
        v473[0] = 0;
        if (v318) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v318 + 8))(v318);
        }
        if (!(_BYTE)v485) {
          goto LABEL_229;
        }
        v319 = *(WTF::StringImpl **)&v483[32];
        *(void *)&v483[32] = 0;
        if (v319)
        {
          if (*(_DWORD *)v319 == 2) {
            WTF::StringImpl::destroy(v319, v62);
          }
          else {
            *(_DWORD *)v319 -= 2;
          }
        }
        v386 = *(WTF::StringImpl **)&v483[24];
        *(void *)&v483[24] = 0;
        if (v386)
        {
          if (*(_DWORD *)v386 == 2) {
            WTF::StringImpl::destroy(v386, v62);
          }
          else {
            *(_DWORD *)v386 -= 2;
          }
        }
LABEL_391:
        v247 = *(WTF::StringImpl **)&v483[16];
        *(void *)&v483[16] = 0;
        if (!v247) {
          goto LABEL_229;
        }
        goto LABEL_392;
      }
LABEL_437:
      unint64_t v434 = *(void *)v9;
      uint64_t v435 = *(void *)(v9 + 8);
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      uint64_t v436 = *(void *)(v9 + 24);
      if (v436 && v435) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v436 + 16))(v436, v434);
      }
LABEL_438:
      uint64_t v9 = 0;
LABEL_230:
      CFRelease(*(CFTypeRef *)(v12 + 8));
      return v9;
    case 0xEAA:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)v9, (uint64_t)v483);
      uint64_t v9 = v483[8] != 0;
      if (!v483[8]) {
        goto LABEL_230;
      }
      uint64_t v48 = *v7;
      *int v7 = 0;
      *(void *)&long long v501 = v48;
      int v7 = (uint64_t *)&v501 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
      v49 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v49 = &unk_1EEA03488;
      *((void *)v49 + 1) = v501;
      uint64_t v50 = *((void *)&v501 + 1);
      long long v501 = 0uLL;
      *((void *)v49 + 2) = v50;
      v473[0] = v49;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
      v52 = (IPC::Encoder *)v501;
      *(void *)&long long v501 = 0;
      if (v52)
      {
        IPC::Encoder::~Encoder(v52, v51);
        WTF::fastFree(v338, v339);
      }
      if (!v483[8]) {
        goto LABEL_467;
      }
      WebKit::WebPageProxy::executeSavedCommandBySelector(v12, (uint64_t)v11, (uint64_t)v483, (uint64_t *)v473);
      v54 = v473[0];
      v473[0] = 0;
      if (v54) {
        goto LABEL_200;
      }
      goto LABEL_201;
    case 0xEAB:
      unsigned __int16 v176 = IPC::Decoder::decode<std::tuple<WebCore::MediaSessionHelperClient::SuspendedUnderLock>>((void *)v9);
      if (v176 < 0x100u) {
        goto LABEL_438;
      }
      char v177 = v176;
      uint64_t v178 = *v7;
      *int v7 = 0;
      *(void *)v483 = v178;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v483[8], v11);
      v179 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v179 = &unk_1EEA03348;
      v179[1] = *(void *)v483;
      uint64_t v180 = *(void *)&v483[8];
      *(void *)v483 = 0;
      *(void *)&v483[8] = 0;
      v179[2] = v180;
      *(void *)&long long v501 = v179;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v483[8]);
      v182 = *(IPC::Encoder **)v483;
      *(void *)v483 = 0;
      if (v182)
      {
        IPC::Encoder::~Encoder(v182, v181);
        WTF::fastFree(v366, v367);
      }
      WebKit::WebPageProxy::executeUndoRedo(v12, v177 != 0, (uint64_t *)&v501);
      uint64_t v143 = v501;
      *(void *)&long long v501 = 0;
      if (v143) {
        goto LABEL_228;
      }
      goto LABEL_229;
    case 0xEAD:
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v9, (uint64_t)v473);
      if (!LOBYTE(v473[1]))
      {
        int v191 = 0;
        v483[0] = 0;
        v483[24] = 0;
        goto LABEL_420;
      }
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v9, (uint64_t)&v501);
      if (BYTE8(v501))
      {
        unint64_t v184 = *(void *)(v9 + 8);
        unint64_t v185 = *(void *)v9;
        unint64_t v186 = ((*(void *)(v9 + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v9;
        if (v184 >= v186 && v184 - v186 > 3)
        {
          v188 = (unsigned int *)(v185 + v186);
          *(void *)(v9 + 16) = v188 + 1;
          if (v185)
          {
            if (!LOBYTE(v473[1])) {
              goto LABEL_467;
            }
            int v189 = 0;
            uint64_t v13 = *v188;
            v190 = v473[0];
            v473[0] = 0;
            *(void *)v483 = v190;
            *(void *)&v483[8] = v501;
            *(_DWORD *)&v483[16] = v13;
            int v191 = 1;
            v483[24] = 1;
LABEL_185:
            if (LOBYTE(v473[1]))
            {
              v192 = v473[0];
              v473[0] = 0;
              if (v192)
              {
                if (*(_DWORD *)v192 == 2) {
                  WTF::StringImpl::destroy(v192, v183);
                }
                else {
                  *(_DWORD *)v192 -= 2;
                }
              }
            }
            if (!v189)
            {
LABEL_327:
              uint64_t v9 = v191 != 0;
              if (v191)
              {
                uint64_t v288 = *v7;
                *int v7 = 0;
                *(void *)&long long v501 = v288;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
                v289 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
                *(void *)v289 = &unk_1EEA03460;
                *((void *)v289 + 1) = v501;
                uint64_t v290 = *((void *)&v501 + 1);
                long long v501 = 0uLL;
                *((void *)v289 + 2) = v290;
                v473[0] = v289;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
                v292 = (IPC::Encoder *)v501;
                *(void *)&long long v501 = 0;
                if (v292)
                {
                  IPC::Encoder::~Encoder(v292, v291);
                  WTF::fastFree(v382, v383);
                }
                WebKit::WebPageProxy::getGuessesForWord(v12, (uint64_t)v483, (uint64_t)&v483[8], v13, (uint64_t *)v473);
                v293 = v473[0];
                v473[0] = 0;
                if (v293) {
                  (*(void (**)(WTF::StringImpl *))(*(void *)v293 + 8))(v293);
                }
                if (v483[24])
                {
                  v294 = *(WTF::StringImpl **)&v483[8];
                  *(void *)&v483[8] = 0;
                  if (v294)
                  {
                    if (*(_DWORD *)v294 == 2) {
                      WTF::StringImpl::destroy(v294, v53);
                    }
                    else {
                      *(_DWORD *)v294 -= 2;
                    }
                  }
                  goto LABEL_202;
                }
              }
              goto LABEL_230;
            }
LABEL_420:
            unint64_t v420 = *(void *)v9;
            uint64_t v421 = *(void *)(v9 + 8);
            *(void *)uint64_t v9 = 0;
            *(void *)(v9 + 8) = 0;
            uint64_t v422 = *(void *)(v9 + 24);
            if (v422 && v421) {
              (*(void (**)(uint64_t, unint64_t))(*(void *)v422 + 16))(v422, v420);
            }
            goto LABEL_327;
          }
          unint64_t v440 = v184;
          v183 = 0;
        }
        else
        {
          unint64_t v440 = 0;
          v183 = 0;
          *(void *)uint64_t v9 = 0;
          *(void *)(v9 + 8) = 0;
          uint64_t v441 = *(void *)(v9 + 24);
          if (v441)
          {
            if (v184)
            {
              (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v441 + 16))(v441, v185, v184);
              v183 = *(WTF::StringImpl **)v9;
              unint64_t v440 = *(void *)(v9 + 8);
            }
            else
            {
              unint64_t v440 = 0;
              v183 = 0;
            }
          }
        }
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        uint64_t v442 = *(void *)(v9 + 24);
        if (v442 && v440) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v442 + 16))(v442, v183);
        }
        v483[0] = 0;
        v483[24] = 0;
        if (BYTE8(v501))
        {
          v443 = (WTF::StringImpl *)v501;
          *(void *)&long long v501 = 0;
          if (v443)
          {
            if (*(_DWORD *)v443 != 2)
            {
              int v191 = 0;
              *(_DWORD *)v443 -= 2;
              goto LABEL_486;
            }
            WTF::StringImpl::destroy(v443, v183);
          }
        }
        int v191 = 0;
        goto LABEL_486;
      }
      int v191 = 0;
      v483[0] = 0;
      v483[24] = 0;
LABEL_486:
      int v189 = 1;
      goto LABEL_185;
    case 0xEAE:
      uint64_t v221 = *v7;
      *int v7 = 0;
      *(void *)v483 = v221;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v483[8], v11);
      v222 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v222 = &unk_1EEA034B0;
      v222[1] = *(void *)v483;
      uint64_t v223 = *(void *)&v483[8];
      *(void *)v483 = 0;
      *(void *)&v483[8] = 0;
      v222[2] = v223;
      *(void *)&long long v501 = v222;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v483[8]);
      v225 = *(IPC::Encoder **)v483;
      *(void *)v483 = 0;
      if (v225)
      {
        IPC::Encoder::~Encoder(v225, v224);
        WTF::fastFree(v330, v331);
      }
      WebKit::WebPageProxy::getIsSpeaking(v12, (uint64_t *)&v501);
      goto LABEL_227;
    case 0xEAF:
      uint64_t v211 = *v7;
      *int v7 = 0;
      *(void *)v483 = v211;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v483[8], v11);
      v212 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v212 = &unk_1EEA030C8;
      v212[1] = *(void *)v483;
      uint64_t v213 = *(void *)&v483[8];
      *(void *)v483 = 0;
      *(void *)&v483[8] = 0;
      v212[2] = v213;
      *(void *)&long long v501 = v212;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v483[8]);
      v215 = *(IPC::Encoder **)v483;
      *(void *)v483 = 0;
      if (v215)
      {
        IPC::Encoder::~Encoder(v215, v214);
        WTF::fastFree(v326, v327);
      }
      WebKit::WebPageProxy::getMenuBarIsVisible(v12, (uint64_t *)&v501);
      goto LABEL_227;
    case 0xEB0:
      uint64_t v36 = *v7;
      *int v7 = 0;
      *(void *)v483 = v36;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v483[8], v11);
      v37 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v37 = &unk_1EEA030F0;
      v37[1] = *(void *)v483;
      uint64_t v38 = *(void *)&v483[8];
      *(void *)v483 = 0;
      *(void *)&v483[8] = 0;
      v37[2] = v38;
      *(void *)&long long v501 = v37;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v483[8]);
      v40 = *(IPC::Encoder **)v483;
      *(void *)v483 = 0;
      if (v40)
      {
        IPC::Encoder::~Encoder(v40, v39);
        WTF::fastFree(v320, v321);
      }
      WebKit::WebPageProxy::getStatusBarIsVisible(v12, (uint64_t *)&v501);
      goto LABEL_227;
    case 0xEB1:
      uint64_t v114 = *v7;
      *int v7 = 0;
      *(void *)v483 = v114;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v483[8], v11);
      v115 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v115 = &unk_1EEA030A0;
      v115[1] = *(void *)v483;
      uint64_t v116 = *(void *)&v483[8];
      *(void *)v483 = 0;
      *(void *)&v483[8] = 0;
      v115[2] = v116;
      *(void *)&long long v501 = v115;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v483[8]);
      v118 = *(IPC::Encoder **)v483;
      *(void *)v483 = 0;
      if (v118)
      {
        IPC::Encoder::~Encoder(v118, v117);
        WTF::fastFree(v322, v323);
      }
      WebKit::WebPageProxy::getToolbarsAreVisible(v12, (uint64_t *)&v501);
      goto LABEL_227;
    case 0xEB2:
      uint64_t v227 = *v7;
      *int v7 = 0;
      *(void *)v483 = v227;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v483[8], v11);
      v228 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v228 = &unk_1EEA03118;
      v228[1] = *(void *)v483;
      uint64_t v229 = *(void *)&v483[8];
      *(void *)v483 = 0;
      *(void *)&v483[8] = 0;
      v228[2] = v229;
      *(void *)&long long v501 = v228;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v483[8]);
      v231 = *(IPC::Encoder **)v483;
      *(void *)v483 = 0;
      if (v231)
      {
        IPC::Encoder::~Encoder(v231, v230);
        WTF::fastFree(v332, v333);
      }
      WebKit::WebPageProxy::getWindowFrame(v12, (uint64_t *)&v501);
      uint64_t v143 = v501;
      *(void *)&long long v501 = 0;
      if (v143) {
        goto LABEL_228;
      }
      goto LABEL_229;
    case 0xEB3:
      IPC::Decoder::decode<std::tuple<WTF::String,WebKit::UserData>>((IPC::Decoder *)v9, v483);
      uint64_t v9 = v483[16] != 0;
      if (!v483[16]) {
        goto LABEL_37;
      }
      uint64_t v42 = *v7;
      *int v7 = 0;
      *(void *)&long long v501 = v42;
      int v7 = (uint64_t *)&v501 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
      v43 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v43 = &unk_1EEA03578;
      *((void *)v43 + 1) = v501;
      uint64_t v44 = *((void *)&v501 + 1);
      long long v501 = 0uLL;
      *((void *)v43 + 2) = v44;
      v473[0] = v43;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
      v46 = (IPC::Encoder *)v501;
      *(void *)&long long v501 = 0;
      if (v46)
      {
        IPC::Encoder::~Encoder(v46, v45);
        WTF::fastFree(v336, v337);
      }
      if (!v483[16]) {
        goto LABEL_467;
      }
      WebKit::WebPageProxy::handleSynchronousMessage((void *)v12, (uint64_t)v11, (WTF::StringImpl **)v483, (CFTypeRef **)&v483[8], (uint64_t *)v473);
      v47 = v473[0];
      v473[0] = 0;
      if (v47) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v47 + 8))(v47);
      }
LABEL_37:
      std::__optional_destruct_base<std::tuple<WTF::String,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v483, v41);
      goto LABEL_230;
    case 0xEB4:
      IPC::Decoder::decode<WebKit::EditorState>((uint64_t *)v9, &v501);
      char v91 = v504;
      if (!v504) {
        goto LABEL_457;
      }
      unint64_t v92 = *(void *)(v9 + 8);
      v90 = *(char **)v9;
      unint64_t v93 = *(void *)(v9 + 16) - *(void *)v9;
      if (v92 <= v93)
      {
        unint64_t v444 = 0;
        unint64_t v445 = 0;
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        uint64_t v446 = *(void *)(v9 + 24);
        if (v446)
        {
          if (v92)
          {
            (*(void (**)(uint64_t))(*(void *)v446 + 16))(v446);
            unint64_t v445 = *(void *)v9;
            unint64_t v444 = *(void *)(v9 + 8);
          }
          else
          {
            unint64_t v444 = 0;
            unint64_t v445 = 0;
          }
        }
      }
      else
      {
        v94 = &v90[v93];
        *(void *)(v9 + 16) = v94 + 1;
        if (v90)
        {
          unsigned int v95 = *v94;
          if (v95 < 2)
          {
            BOOL v96 = v95 != 0;
            std::__tuple_leaf<0ul,WebKit::EditorState,false>::__tuple_leaf[abi:sn180100]<WebKit::EditorState,void>((uint64_t)v483, &v501);
            BOOL v496 = v96;
            char v91 = 1;
            goto LABEL_458;
          }
LABEL_455:
          *(void *)uint64_t v9 = 0;
          *(void *)(v9 + 8) = 0;
          uint64_t v448 = *(void *)(v9 + 24);
          if (v448 && v92) {
            (*(void (**)(uint64_t, char *))(*(void *)v448 + 16))(v448, v90);
          }
          char v91 = 0;
LABEL_457:
          v483[0] = 0;
LABEL_458:
          char v497 = v91;
          uint64_t v13 = (uint64_t)&v501;
          std::__optional_destruct_base<WebKit::EditorState,false>::~__optional_destruct_base[abi:sn180100](&v501, v90);
          if (!v497) {
            goto LABEL_468;
          }
          while (1)
          {
            uint64_t v449 = *v7;
            *int v7 = 0;
            *(void *)&long long v501 = v449;
            uint64_t v9 = v13 | 8;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)(v13 | 8), v11);
            v450 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
            *(void *)v450 = &unk_1EEA03258;
            *((void *)v450 + 1) = v501;
            uint64_t v451 = *((void *)&v501 + 1);
            long long v501 = 0uLL;
            *((void *)v450 + 2) = v451;
            v473[0] = v450;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(v13 | 8));
            v453 = (IPC::Encoder *)v501;
            *(void *)&long long v501 = 0;
            if (v453)
            {
              IPC::Encoder::~Encoder(v453, v452);
              WTF::fastFree(v457, v458);
            }
            if (v497) {
              break;
            }
LABEL_467:
            __break(1u);
LABEL_468:
            unint64_t v459 = *(void *)v9;
            uint64_t v460 = *(void *)(v9 + 8);
            *(void *)uint64_t v9 = 0;
            *(void *)(v9 + 8) = 0;
            uint64_t v461 = *(void *)(v9 + 24);
            if (v461)
            {
              if (v460)
              {
                (*(void (**)(uint64_t, unint64_t))(*(void *)v461 + 16))(v461, v459);
                if (v497) {
                  continue;
                }
              }
            }
            goto LABEL_438;
          }
          WebKit::WebPageProxy::interpretKeyEvent((WebKit::WebPageProxy *)v12, v483, v496, (uint64_t *)v473);
          v455 = v473[0];
          v473[0] = 0;
          if (v455) {
            (*(void (**)(WTF::StringImpl *))(*(void *)v455 + 8))(v455);
          }
          if (v497)
          {
            std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v495, v454);
            if (v494) {
              WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)&v483[32], v456);
            }
          }
          goto LABEL_229;
        }
        unint64_t v444 = v92;
        unint64_t v445 = 0;
      }
      unint64_t v92 = 0;
      v90 = 0;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      uint64_t v447 = *(void *)(v9 + 24);
      if (v447)
      {
        if (v444)
        {
          (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v447 + 16))(v447, v445, v444);
          v90 = *(char **)v9;
          unint64_t v92 = *(void *)(v9 + 8);
        }
        else
        {
          unint64_t v92 = 0;
          v90 = 0;
        }
      }
      goto LABEL_455;
    case 0xEB5:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)v9, (uint64_t)v483);
      uint64_t v9 = v483[8] != 0;
      if (!v483[8]) {
        goto LABEL_230;
      }
      uint64_t v74 = *v7;
      *int v7 = 0;
      *(void *)&long long v501 = v74;
      int v7 = (uint64_t *)&v501 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
      v75 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v75 = &unk_1EEA03500;
      *((void *)v75 + 1) = v501;
      uint64_t v76 = *((void *)&v501 + 1);
      long long v501 = 0uLL;
      *((void *)v75 + 2) = v76;
      v473[0] = v75;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
      v78 = (IPC::Encoder *)v501;
      *(void *)&long long v501 = 0;
      if (v78)
      {
        IPC::Encoder::~Encoder(v78, v77);
        WTF::fastFree(v342, v343);
      }
      if (!v483[8]) {
        goto LABEL_467;
      }
      WebKit::WebPageProxy::loadRecentSearches(v12, (uint64_t)v11, v483, (uint64_t *)v473);
      v54 = v473[0];
      v473[0] = 0;
      if (v54) {
LABEL_200:
      }
        (*(void (**)(WTF::StringImpl *))(*(void *)v54 + 8))(v54);
LABEL_201:
      if (v483[8]) {
        goto LABEL_202;
      }
      goto LABEL_230;
    case 0xEB6:
      IPC::Decoder::decode<std::tuple<WebKit::URLSchemeTaskParameters>>((uint64_t *)v9, v483);
      uint64_t v9 = v498 != 0;
      if (!v498) {
        goto LABEL_169;
      }
      uint64_t v170 = *v7;
      *int v7 = 0;
      *(void *)&long long v501 = v170;
      int v7 = (uint64_t *)&v501 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
      v171 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v171 = &unk_1EEA035A0;
      *((void *)v171 + 1) = v501;
      uint64_t v172 = *((void *)&v501 + 1);
      long long v501 = 0uLL;
      *((void *)v171 + 2) = v172;
      v473[0] = v171;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
      v174 = (IPC::Encoder *)v501;
      *(void *)&long long v501 = 0;
      if (v174)
      {
        IPC::Encoder::~Encoder(v174, v173);
        WTF::fastFree(v364, v365);
      }
      if (!v498) {
        goto LABEL_467;
      }
      WebKit::WebPageProxy::loadSynchronousURLSchemeTask(v12, (uint64_t)v11, (uint64_t *)v483, (uint64_t *)v473);
      v175 = v473[0];
      v473[0] = 0;
      if (v175) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v175 + 8))(v175);
      }
LABEL_169:
      std::__optional_destruct_base<WebKit::URLSchemeTaskParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v483, v169);
      goto LABEL_230;
    case 0xEB7:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v9, (uint64_t)&v501);
      if (!v502) {
        goto LABEL_437;
      }
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v9, (uint64_t)v473);
      if (!LOBYTE(v473[1])) {
        goto LABEL_437;
      }
      v55 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)v9);
      if (!v56)
      {
        v462 = *(WTF::StringImpl **)v9;
        uint64_t v463 = *(void *)(v9 + 8);
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        uint64_t v464 = *(void *)(v9 + 24);
        if (v464 && v463) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v464 + 16))(v464, v462);
        }
        if (LOBYTE(v473[1]))
        {
          v465 = v473[0];
          v473[0] = 0;
          if (v465)
          {
            if (*(_DWORD *)v465 == 2) {
              WTF::StringImpl::destroy(v465, v462);
            }
            else {
              *(_DWORD *)v465 -= 2;
            }
          }
        }
        goto LABEL_437;
      }
      if (!v502 || !LOBYTE(v473[1])) {
        goto LABEL_467;
      }
      *(_OWORD *)v483 = v501;
      *(WTF::StringImpl **)&v483[16] = v473[0];
      *(void *)&v483[24] = v55;
      v483[32] = 1;
      uint64_t v57 = *v7;
      *int v7 = 0;
      *(void *)&long long v501 = v57;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
      v58 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v58 = &unk_1EEA03208;
      *((void *)v58 + 1) = v501;
      uint64_t v59 = *((void *)&v501 + 1);
      long long v501 = 0uLL;
      *((void *)v58 + 2) = v59;
      v473[0] = v58;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
      v61 = (IPC::Encoder *)v501;
      *(void *)&long long v501 = 0;
      if (v61)
      {
        IPC::Encoder::~Encoder(v61, v60);
        WTF::fastFree(v389, v390);
      }
      WebKit::WebPageProxy::printFrame(v12, (uint64_t)v11, *(uint64_t *)v483, *(uint64_t *)&v483[8], (WTF::StringImpl **)&v483[16], (uint64_t)&v483[24], (uint64_t *)v473);
      v63 = v473[0];
      v473[0] = 0;
      if (v63) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v63 + 8))(v63);
      }
      if (!v483[32]) {
        goto LABEL_229;
      }
      goto LABEL_391;
    case 0xEB9:
      unint64_t v237 = *(void *)(v9 + 8);
      unint64_t v238 = *(void *)v9;
      unint64_t v239 = *(void *)(v9 + 16) - *(void *)v9;
      if (v237 <= v239)
      {
        unint64_t v429 = 0;
        unint64_t v430 = 0;
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        uint64_t v431 = *(void *)(v9 + 24);
        if (v431)
        {
          if (v237)
          {
            (*(void (**)(uint64_t))(*(void *)v431 + 16))(v431);
            unint64_t v430 = *(void *)v9;
            unint64_t v429 = *(void *)(v9 + 8);
          }
          else
          {
            unint64_t v429 = 0;
            unint64_t v430 = 0;
          }
        }
      }
      else
      {
        v240 = (unsigned __int8 *)(v238 + v239);
        *(void *)(v9 + 16) = v240 + 1;
        if (v238)
        {
          uint64_t v13 = *v240;
          if (v13 < 2)
          {
            IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v9, (uint64_t)&v501);
            if (!v502) {
              goto LABEL_437;
            }
            IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v9, (uint64_t)v473);
            if (!(_BYTE)v474) {
              goto LABEL_437;
            }
            IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v9, (uint64_t)&v481);
            if (!v482) {
              goto LABEL_437;
            }
            if (!v502 || !(_BYTE)v474) {
              goto LABEL_467;
            }
            v483[0] = v13;
            *(_OWORD *)&v483[8] = v501;
            *(_OWORD *)&v483[24] = *(_OWORD *)v473;
            *(void *)&v483[40] = v481;
            v483[48] = 1;
            uint64_t v241 = *v7;
            *int v7 = 0;
            *(void *)&long long v501 = v241;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
            v242 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
            *(void *)v242 = &unk_1EEA03370;
            *((void *)v242 + 1) = v501;
            uint64_t v243 = *((void *)&v501 + 1);
            long long v501 = 0uLL;
            *((void *)v242 + 2) = v243;
            v473[0] = v242;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
            v245 = (IPC::Encoder *)v501;
            *(void *)&long long v501 = 0;
            if (v245)
            {
              IPC::Encoder::~Encoder(v245, v244);
              WTF::fastFree(v406, v407);
            }
            WebKit::WebPageProxy::requestDOMPasteAccess(v12, (const WTF::String *)v13, *(uint64_t *)&v483[8], *(uint64_t *)&v483[16], (uint64_t)&v483[24], (WebCore::SecurityOrigin *)&v483[40], v473);
            v246 = v473[0];
            v473[0] = 0;
            if (v246) {
              (*(void (**)(WTF::StringImpl *))(*(void *)v246 + 8))(v246);
            }
            if (!v483[48]) {
              goto LABEL_229;
            }
            v247 = *(WTF::StringImpl **)&v483[40];
            *(void *)&v483[40] = 0;
            if (!v247) {
              goto LABEL_229;
            }
LABEL_392:
            if (*(_DWORD *)v247 == 2) {
              WTF::StringImpl::destroy(v247, v62);
            }
            else {
              *(_DWORD *)v247 -= 2;
            }
LABEL_229:
            uint64_t v9 = 1;
            goto LABEL_230;
          }
LABEL_436:
          *(void *)uint64_t v9 = 0;
          *(void *)(v9 + 8) = 0;
          uint64_t v433 = *(void *)(v9 + 24);
          if (v433 && v237) {
            (*(void (**)(uint64_t, unint64_t))(*(void *)v433 + 16))(v433, v238);
          }
          goto LABEL_437;
        }
        unint64_t v429 = v237;
        unint64_t v430 = 0;
      }
      unint64_t v237 = 0;
      unint64_t v238 = 0;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      uint64_t v432 = *(void *)(v9 + 24);
      if (v432)
      {
        if (v429)
        {
          (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v432 + 16))(v432, v430, v429);
          unint64_t v238 = *(void *)v9;
          unint64_t v237 = *(void *)(v9 + 8);
        }
        else
        {
          unint64_t v237 = 0;
          unint64_t v238 = 0;
        }
      }
      goto LABEL_436;
    case 0xEBA:
      IPC::Decoder::decode<std::tuple<WebCore::IntRect>>((unint64_t *)v9, (uint64_t)v483);
      uint64_t v9 = v483[16] != 0;
      if (!v483[16]) {
        goto LABEL_230;
      }
      uint64_t v232 = *v7;
      *int v7 = 0;
      *(void *)&long long v501 = v232;
      int v7 = (uint64_t *)&v501 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
      v233 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v233 = &unk_1EEA031B8;
      *((void *)v233 + 1) = v501;
      uint64_t v234 = *((void *)&v501 + 1);
      long long v501 = 0uLL;
      *((void *)v233 + 2) = v234;
      v473[0] = v233;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
      v236 = (IPC::Encoder *)v501;
      *(void *)&long long v501 = 0;
      if (v236)
      {
        IPC::Encoder::~Encoder(v236, v235);
        WTF::fastFree(v374, v375);
      }
      if (!v483[16]) {
        goto LABEL_467;
      }
      WebKit::WebPageProxy::rootViewToAccessibilityScreen(v12, (uint64_t)v483, (uint64_t *)v473);
      v23 = v473[0];
      v473[0] = 0;
      if (v23) {
        goto LABEL_401;
      }
      goto LABEL_230;
    case 0xEBB:
      IPC::Decoder::decode<std::tuple<WebCore::IntRect>>((unint64_t *)v9, (uint64_t)v483);
      uint64_t v9 = v483[16] != 0;
      if (!v483[16]) {
        goto LABEL_230;
      }
      uint64_t v85 = *v7;
      *int v7 = 0;
      *(void *)&long long v501 = v85;
      int v7 = (uint64_t *)&v501 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
      v86 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v86 = &unk_1EEA03168;
      *((void *)v86 + 1) = v501;
      uint64_t v87 = *((void *)&v501 + 1);
      long long v501 = 0uLL;
      *((void *)v86 + 2) = v87;
      v473[0] = v86;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
      v89 = (IPC::Encoder *)v501;
      *(void *)&long long v501 = 0;
      if (v89)
      {
        IPC::Encoder::~Encoder(v89, v88);
        WTF::fastFree(v346, v347);
      }
      if (!v483[16]) {
        goto LABEL_467;
      }
      WebKit::WebPageProxy::rootViewToScreen(v12, (uint64_t)v483, (uint64_t *)v473);
      v23 = v473[0];
      v473[0] = 0;
      if (v23) {
        goto LABEL_401;
      }
      goto LABEL_230;
    case 0xEBC:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WTF::String>>((uint64_t)v483, (IPC::Decoder *)v9);
      uint64_t v9 = (_BYTE)v492 != 0;
      if (!(_BYTE)v492) {
        goto LABEL_212;
      }
      uint64_t v120 = *v7;
      *int v7 = 0;
      *(void *)&long long v501 = v120;
      int v7 = (uint64_t *)&v501 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
      v121 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v121 = &unk_1EEA031E0;
      *((void *)v121 + 1) = v501;
      uint64_t v122 = *((void *)&v501 + 1);
      long long v501 = 0uLL;
      *((void *)v121 + 2) = v122;
      v473[0] = v121;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
      v124 = (IPC::Encoder *)v501;
      *(void *)&long long v501 = 0;
      if (v124)
      {
        IPC::Encoder::~Encoder(v124, v123);
        WTF::fastFree(v350, v351);
      }
      if (!(_BYTE)v492) {
        goto LABEL_467;
      }
      WebKit::WebPageProxy::runBeforeUnloadConfirmPanel(v12, (uint64_t)v11, *(uint64_t *)v483, *(uint64_t *)&v483[8], (uint64_t)&v483[16], (uint64_t)&v491, (uint64_t *)v473);
      goto LABEL_131;
    case 0xEBD:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WTF::String>>((uint64_t)v483, (IPC::Decoder *)v9);
      uint64_t v9 = (_BYTE)v492 != 0;
      if (!(_BYTE)v492) {
        goto LABEL_212;
      }
      uint64_t v204 = *v7;
      *int v7 = 0;
      *(void *)&long long v501 = v204;
      int v7 = (uint64_t *)&v501 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
      v205 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v205 = &unk_1EEA03028;
      *((void *)v205 + 1) = v501;
      uint64_t v206 = *((void *)&v501 + 1);
      long long v501 = 0uLL;
      *((void *)v205 + 2) = v206;
      v473[0] = v205;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
      v208 = (IPC::Encoder *)v501;
      *(void *)&long long v501 = 0;
      if (v208)
      {
        IPC::Encoder::~Encoder(v208, v207);
        WTF::fastFree(v372, v373);
      }
      if (!(_BYTE)v492) {
        goto LABEL_467;
      }
      WebKit::WebPageProxy::runJavaScriptAlert(v12, (uint64_t)v11, *(uint64_t *)v483, *(uint64_t *)&v483[8], (__int16 *)&v483[16], (_DWORD **)&v491, (uint64_t *)v473);
      v130 = v473[0];
      v473[0] = 0;
      if (v130) {
        goto LABEL_211;
      }
      goto LABEL_212;
    case 0xEBE:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WTF::String>>((uint64_t)v483, (IPC::Decoder *)v9);
      uint64_t v9 = (_BYTE)v492 != 0;
      if (!(_BYTE)v492) {
        goto LABEL_212;
      }
      uint64_t v125 = *v7;
      *int v7 = 0;
      *(void *)&long long v501 = v125;
      int v7 = (uint64_t *)&v501 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
      v126 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v126 = &unk_1EEA03050;
      *((void *)v126 + 1) = v501;
      uint64_t v127 = *((void *)&v501 + 1);
      long long v501 = 0uLL;
      *((void *)v126 + 2) = v127;
      v473[0] = v126;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
      v129 = (IPC::Encoder *)v501;
      *(void *)&long long v501 = 0;
      if (v129)
      {
        IPC::Encoder::~Encoder(v129, v128);
        WTF::fastFree(v352, v353);
      }
      if (!(_BYTE)v492) {
        goto LABEL_467;
      }
      WebKit::WebPageProxy::runJavaScriptConfirm(v12, (uint64_t)v11, *(uint64_t *)v483, *(uint64_t *)&v483[8], (__int16 *)&v483[16], (_DWORD **)&v491, (uint64_t *)v473);
LABEL_131:
      v130 = v473[0];
      v473[0] = 0;
      if (v130) {
LABEL_211:
      }
        (*(void (**)(WTF::StringImpl *))(*(void *)v130 + 8))(v130);
LABEL_212:
      std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v483, v119);
      goto LABEL_230;
    case 0xEBF:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v9, (uint64_t)v473);
      if ((_BYTE)v474)
      {
        IPC::Decoder::decode<WebKit::FrameInfoData>((IPC::Decoder *)v9, (uint64_t)&v501);
        if (v503 && (IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v9, (uint64_t)&v479), v480))
        {
          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v9, (uint64_t)&v481);
          char v25 = v482;
          if (v482)
          {
            if (!(_BYTE)v474 || !v503 || !v480) {
              goto LABEL_467;
            }
            *(_OWORD *)v483 = *(_OWORD *)v473;
            std::__tuple_leaf<1ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>((uint64_t)&v483[16], (uint64_t)&v501);
            v26 = v479;
            v479 = 0;
            v491 = v26;
            v492 = v481;
            char v25 = 1;
          }
          else
          {
            v483[0] = 0;
          }
          char v493 = v25;
          if (v480)
          {
            v27 = v479;
            v479 = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2) {
                WTF::StringImpl::destroy(v27, v24);
              }
              else {
                *(_DWORD *)v27 -= 2;
              }
            }
          }
        }
        else
        {
          v483[0] = 0;
          char v493 = 0;
        }
        std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v501, v24);
        if (v493)
        {
LABEL_343:
          uint64_t v300 = *v7;
          *int v7 = 0;
          *(void *)&long long v501 = v300;
          uint64_t v9 = (uint64_t)&v501 + 8;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
          v301 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(void *)v301 = &unk_1EEA03078;
          *((void *)v301 + 1) = v501;
          uint64_t v302 = *((void *)&v501 + 1);
          long long v501 = 0uLL;
          *((void *)v301 + 2) = v302;
          v473[0] = v301;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
          v304 = (IPC::Encoder *)v501;
          *(void *)&long long v501 = 0;
          if (v304)
          {
            IPC::Encoder::~Encoder(v304, v303);
            WTF::fastFree(v384, v385);
          }
          if (!v493) {
            goto LABEL_467;
          }
          WebKit::WebPageProxy::runJavaScriptPrompt(v12, (uint64_t)v11, *(uint64_t *)v483, *(uint64_t *)&v483[8], (__int16 *)&v483[16], (_DWORD **)&v491, &v492, (uint64_t *)v473);
          v306 = v473[0];
          v473[0] = 0;
          if (v306) {
            (*(void (**)(WTF::StringImpl *))(*(void *)v306 + 8))(v306);
          }
          if (v493)
          {
            v307 = v492;
            v492 = 0;
            if (v307)
            {
              if (*(_DWORD *)v307 == 2) {
                WTF::StringImpl::destroy(v307, v305);
              }
              else {
                *(_DWORD *)v307 -= 2;
              }
            }
            v308 = v491;
            v491 = 0;
            if (v308)
            {
              if (*(_DWORD *)v308 == 2) {
                WTF::StringImpl::destroy(v308, v305);
              }
              else {
                *(_DWORD *)v308 -= 2;
              }
            }
            v309 = v490;
            v490 = 0;
            if (v309)
            {
              if (*(_DWORD *)v309 == 2) {
                WTF::StringImpl::destroy(v309, v305);
              }
              else {
                *(_DWORD *)v309 -= 2;
              }
            }
            if (v489 != -1) {
              ((void (*)(long long *, uint64_t *))off_1EEA02A40[v489])(&v501, &v488);
            }
            int v489 = -1;
            CFTypeRef v310 = cf;
            CFTypeRef cf = 0;
            if (v310) {
              CFRelease(v310);
            }
            WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v483[24]);
          }
          goto LABEL_229;
        }
      }
      else
      {
        v483[0] = 0;
        char v493 = 0;
      }
      unint64_t v423 = *(void *)v9;
      uint64_t v424 = *(void *)(v9 + 8);
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      uint64_t v425 = *(void *)(v9 + 24);
      if (!v425) {
        goto LABEL_438;
      }
      if (!v424) {
        goto LABEL_438;
      }
      (*(void (**)(uint64_t, unint64_t))(*(void *)v425 + 16))(v425, v423);
      if (!v493) {
        goto LABEL_438;
      }
      goto LABEL_343;
    case 0xEC0:
      *(void *)&long long v501 = IPC::Decoder::decode<std::tuple<WebCore::IntSize>>((unint64_t *)v9);
      DWORD2(v501) = v64;
      uint64_t v9 = v64 != 0;
      if ((_BYTE)v64)
      {
        uint64_t v65 = *v7;
        *int v7 = 0;
        *(void *)v483 = v65;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v483[8], v11);
        v66 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)v66 = &unk_1EEA03140;
        *((void *)v66 + 1) = *(void *)v483;
        uint64_t v67 = *(void *)&v483[8];
        *(void *)v483 = 0;
        *(void *)&v483[8] = 0;
        *((void *)v66 + 2) = v67;
        v473[0] = v66;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v483[8]);
        v69 = *(IPC::Encoder **)v483;
        *(void *)v483 = 0;
        if (v69)
        {
          IPC::Encoder::~Encoder(v69, v68);
          WTF::fastFree(v340, v341);
        }
        WebKit::WebPageProxy::screenToRootView(v12, (uint64_t)&v501, (uint64_t *)v473);
        v23 = v473[0];
        v473[0] = 0;
        if (v23) {
          goto LABEL_401;
        }
      }
      goto LABEL_230;
    case 0xEC3:
      uint64_t v216 = *v7;
      *int v7 = 0;
      *(void *)v483 = v216;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v483[8], v11);
      v217 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v217 = &unk_1EEA03438;
      v217[1] = *(void *)v483;
      uint64_t v218 = *(void *)&v483[8];
      *(void *)v483 = 0;
      *(void *)&v483[8] = 0;
      v217[2] = v218;
      *(void *)&long long v501 = v217;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v483[8]);
      v220 = *(IPC::Encoder **)v483;
      *(void *)v483 = 0;
      if (v220)
      {
        IPC::Encoder::~Encoder(v220, v219);
        WTF::fastFree(v328, v329);
      }
      WebKit::WebPageProxy::spellingUIIsShowing(v12, (uint64_t *)&v501);
      goto LABEL_227;
    case 0xEC4:
      IPC::Decoder::decode<std::tuple<WebCore::WrappedCryptoKey>>((IPC::Decoder *)v9, (uint64_t)v483);
      uint64_t v9 = v483[56] != 0;
      if (!v483[56]) {
        goto LABEL_230;
      }
      uint64_t v248 = *v7;
      *int v7 = 0;
      *(void *)&long long v501 = v248;
      int v7 = (uint64_t *)&v501 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
      v249 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v249 = &unk_1EEA03550;
      *((void *)v249 + 1) = v501;
      uint64_t v250 = *((void *)&v501 + 1);
      long long v501 = 0uLL;
      *((void *)v249 + 2) = v250;
      v473[0] = v249;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
      v252 = (IPC::Encoder *)v501;
      *(void *)&long long v501 = 0;
      if (v252)
      {
        IPC::Encoder::~Encoder(v252, v251);
        WTF::fastFree(v376, v377);
      }
      if (!v483[56]) {
        goto LABEL_467;
      }
      WebKit::WebPageProxy::unwrapCryptoKey(v12, (long long *)v483, (uint64_t *)v473);
      v253 = v473[0];
      v473[0] = 0;
      if (v253) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v253 + 8))(v253);
      }
      if (v483[56]) {
        goto LABEL_263;
      }
      goto LABEL_230;
    case 0xEC5:
      IPC::Decoder::decode<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Decoder *)v9, (uint64_t)v483);
      uint64_t v9 = v483[16] != 0;
      if (!v483[16]) {
        goto LABEL_230;
      }
      uint64_t v28 = *v7;
      *int v7 = 0;
      *(void *)&long long v501 = v28;
      int v7 = (uint64_t *)&v501 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
      v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v29 = &unk_1EEA03528;
      *((void *)v29 + 1) = v501;
      uint64_t v30 = *((void *)&v501 + 1);
      long long v501 = 0uLL;
      *((void *)v29 + 2) = v30;
      v473[0] = v29;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
      v32 = (IPC::Encoder *)v501;
      *(void *)&long long v501 = 0;
      if (v32)
      {
        IPC::Encoder::~Encoder(v32, v31);
        WTF::fastFree(v334, v335);
      }
      if (!v483[16]) {
        goto LABEL_467;
      }
      WebKit::WebPageProxy::wrapCryptoKey(v12, (uint64_t *)v483, (uint64_t *)v473);
      v34 = v473[0];
      v473[0] = 0;
      if (v34) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v34 + 8))(v34);
      }
      if (!v483[16]) {
        goto LABEL_230;
      }
      v35 = *(WTF **)v483;
      if (!*(void *)v483) {
        goto LABEL_230;
      }
      *(void *)v483 = 0;
      *(_DWORD *)&v483[8] = 0;
      goto LABEL_265;
    default:
      if (v15 == 3777 && *(unsigned char *)(v13 + 14) != 0)
      {
        IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Decoder *)v9, v14, (uint64_t)v483);
        uint64_t v9 = v483[16] != 0;
        if (!v483[16]) {
          goto LABEL_230;
        }
        uint64_t v261 = *v7;
        *int v7 = 0;
        *(void *)&long long v501 = v261;
        int v7 = (uint64_t *)&v501 + 1;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
        v262 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)v262 = &unk_1EEA035C8;
        *((void *)v262 + 1) = v501;
        uint64_t v263 = *((void *)&v501 + 1);
        long long v501 = 0uLL;
        *((void *)v262 + 2) = v263;
        v473[0] = v262;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
        v265 = (IPC::Encoder *)v501;
        *(void *)&long long v501 = 0;
        if (v265)
        {
          IPC::Encoder::~Encoder(v265, v264);
          WTF::fastFree(v402, v403);
        }
        if (v483[16])
        {
          WebKit::WebPageProxy::serializedAttachmentDataForIdentifiers((void *)v12, (uint64_t)v483, (const WTF::StringImpl *)v473);
          v267 = v473[0];
          v473[0] = 0;
          if (v267) {
            (*(void (**)(WTF::StringImpl *))(*(void *)v267 + 8))(v267);
          }
          if (v483[16]) {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v483, v266);
          }
          goto LABEL_230;
        }
        goto LABEL_467;
      }
      if (v15 == 3778 && *(unsigned char *)(v13 + 32) != 0)
      {
        uint64_t v295 = *v7;
        *int v7 = 0;
        *(void *)v483 = v295;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v483[8], v11);
        v296 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v296 = &unk_1EEA035F0;
        v296[1] = *(void *)v483;
        uint64_t v297 = *(void *)&v483[8];
        *(void *)v483 = 0;
        *(void *)&v483[8] = 0;
        v296[2] = v297;
        *(void *)&long long v501 = v296;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v483[8]);
        v299 = *(IPC::Encoder **)v483;
        *(void *)v483 = 0;
        if (v299)
        {
          IPC::Encoder::~Encoder(v299, v298);
          WTF::fastFree(v404, v405);
        }
        WebKit::WebPageProxy::speechSynthesisVoiceList(v12, (uint64_t *)&v501);
        uint64_t v143 = v501;
        *(void *)&long long v501 = 0;
        if (v143) {
LABEL_228:
        }
          (*(void (**)(uint64_t))(*(void *)v143 + 8))(v143);
        goto LABEL_229;
      }
      if (v15 != 3745)
      {
        if (v15 == 3756)
        {
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v9, (uint64_t)v483);
          uint64_t v9 = v483[16] != 0;
          if (!v483[16]) {
            goto LABEL_230;
          }
          uint64_t v391 = *v7;
          *int v7 = 0;
          *(void *)&long long v501 = v391;
          int v7 = (uint64_t *)&v501 + 1;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
          v392 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(void *)v392 = &unk_1EEA03640;
          *((void *)v392 + 1) = v501;
          uint64_t v393 = *((void *)&v501 + 1);
          long long v501 = 0uLL;
          *((void *)v392 + 2) = v393;
          v473[0] = v392;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
          v395 = (IPC::Encoder *)v501;
          *(void *)&long long v501 = 0;
          if (v395)
          {
            IPC::Encoder::~Encoder(v395, v394);
            WTF::fastFree(v408, v409);
          }
          if (!v483[16]) {
            goto LABEL_467;
          }
          WebKit::WebPageProxy::frameTextForTesting(v12, *(uint64_t *)v483, *(uint64_t *)&v483[8], (uint64_t *)v473);
        }
        else
        {
          if (v15 != 3768) {
            goto LABEL_438;
          }
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>>>((IPC::Decoder *)v9, v483);
          uint64_t v9 = v483[32] != 0;
          if (!v483[32]) {
            goto LABEL_230;
          }
          uint64_t v256 = *v7;
          *int v7 = 0;
          *(void *)&long long v501 = v256;
          int v7 = (uint64_t *)&v501 + 1;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
          v257 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(void *)v257 = &unk_1EEA03618;
          *((void *)v257 + 1) = v501;
          uint64_t v258 = *((void *)&v501 + 1);
          long long v501 = 0uLL;
          *((void *)v257 + 2) = v258;
          v473[0] = v257;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
          v260 = (IPC::Encoder *)v501;
          *(void *)&long long v501 = 0;
          if (v260)
          {
            IPC::Encoder::~Encoder(v260, v259);
            WTF::fastFree(v412, v413);
          }
          if (!v483[32]) {
            goto LABEL_467;
          }
          WebKit::WebPageProxy::renderTreeAsTextForTesting(v12, *(uint64_t *)v483, *(uint64_t *)&v483[8], *(WTF::StringImpl **)&v483[16], *(__int16 *)&v483[24], (uint64_t *)v473);
        }
        v23 = v473[0];
        v473[0] = 0;
        if (v23) {
LABEL_401:
        }
          (*(void (**)(WTF::StringImpl *))(*(void *)v23 + 8))(v23);
        goto LABEL_230;
      }
      IPC::Decoder::decode<std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Decoder *)v9, v483);
      uint64_t v9 = v483[40] != 0;
      if (!v483[40]) {
        goto LABEL_230;
      }
      uint64_t v396 = *v7;
      *int v7 = 0;
      *(void *)&long long v501 = v396;
      int v7 = (uint64_t *)&v501 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v501 + 1, v11);
      v397 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v397 = &unk_1EEA03668;
      *((void *)v397 + 1) = v501;
      uint64_t v398 = *((void *)&v501 + 1);
      long long v501 = 0uLL;
      *((void *)v397 + 2) = v398;
      v473[0] = v397;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v501 + 1);
      v400 = (IPC::Encoder *)v501;
      *(void *)&long long v501 = 0;
      if (v400)
      {
        IPC::Encoder::~Encoder(v400, v399);
        WTF::fastFree(v410, v411);
      }
      if (!v483[40]) {
        goto LABEL_467;
      }
      WebKit::WebPageProxy::bindRemoteAccessibilityFrames(v12, *(int *)v483, *(uint64_t *)&v483[8], *(uint64_t *)&v483[16], (uint64_t)&v483[24], (uint64_t *)v473);
      v401 = v473[0];
      v473[0] = 0;
      if (v401) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v401 + 8))(v401);
      }
      if (v483[40])
      {
LABEL_263:
        v35 = *(WTF **)&v483[24];
        if (*(void *)&v483[24])
        {
          *(void *)&v483[24] = 0;
          *(_DWORD *)&v483[32] = 0;
LABEL_265:
          WTF::fastFree(v35, v33);
        }
      }
      goto LABEL_230;
  }
}

uint64_t non-virtual thunk to'WebKit::WebPageProxy::didReceiveSyncMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::WebPageProxy::didReceiveSyncMessage(a1 - 16, a2, a3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy22FocusFromServiceWorkerEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02A60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy22FocusFromServiceWorkerEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02A60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy22FocusFromServiceWorkerEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3348;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy14ShowShareSheetEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKN7WebCore22ShareDataWithParsedURLEONS_17CompletionHandlerIFvbEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02A88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy14ShowShareSheetEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKN7WebCore22ShareDataWithParsedURLEONS_17CompletionHandlerIFvbEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02A88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy14ShowShareSheetEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKN7WebCore22ShareDataWithParsedURLEONS_17CompletionHandlerIFvbEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3369;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  unsigned int v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *unsigned int v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy17ShowContactPickerEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKN7WebCore19ContactsRequestDataEONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorINSB_11ContactInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02AB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy17ShowContactPickerEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKN7WebCore19ContactsRequestDataEONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorINSB_11ContactInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02AB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy17ShowContactPickerEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKN7WebCore19ContactsRequestDataEONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorINSB_11ContactInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3367;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v16 = v5;
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 16);
  unsigned int v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1993C0CCCLL);
    }
    *unsigned int v6 = 1;
    if (!*(unsigned char *)(a2 + 16))
    {
      uint64_t v15 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_13FrameInfoDataENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore24NavigationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEERKNSG_16ResourceResponseERKNSG_15ResourceRequestEbRKNS_6StringEbNSG_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSZ_EED1Ev(v15);
    }
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
    uint64_t v8 = *(unsigned int *)(a2 + 12);
    if (v8)
    {
      uint64_t v9 = *(void *)a2;
      uint64_t v10 = 48 * v8;
      do
      {
        IPC::ArgumentCoder<WebCore::ContactInfo,void>::encode(v5, v9);
        v9 += 48;
        v10 -= 48;
      }
      while (v10);
    }
  }
  else
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1993C0CECLL);
    }
    *unsigned int v6 = 0;
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_13FrameInfoDataENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore24NavigationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEERKNSG_16ResourceResponseERKNSG_15ResourceRequestEbRKNS_6StringEbNSG_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSZ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02AD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_13FrameInfoDataENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore24NavigationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEERKNSG_16ResourceResponseERKNSG_15ResourceRequestEbRKNS_6StringEbNSG_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSZ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02AD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_13FrameInfoDataENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore24NavigationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEERKNSG_16ResourceResponseERKNSG_15ResourceRequestEbRKNS_6StringEbNSG_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSZ_EE4callESZ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3345;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy36DecidePolicyForNavigationActionAsyncEN6WebKit12WebPageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02B00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy36DecidePolicyForNavigationActionAsyncEN6WebKit12WebPageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02B00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy36DecidePolicyForNavigationActionAsyncEN6WebKit12WebPageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3343;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30DecidePolicyForNewWindowActionEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_20NavigationActionDataERKNS_6StringEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02B28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30DecidePolicyForNewWindowActionEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_20NavigationActionDataERKNS_6StringEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02B28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30DecidePolicyForNewWindowActionEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_20NavigationActionDataERKNS_6StringEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3344;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy14WillSubmitFormEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEESJ_RKNS_6VectorINSt3__14pairINS_6StringESN_EELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS7_8UserDataEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02B50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy14WillSubmitFormEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEESJ_RKNS_6VectorINSt3__14pairINS_6StringESN_EELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS7_8UserDataEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02B50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy14WillSubmitFormEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEESJ_RKNS_6VectorINSt3__14pairINS_6StringESN_EELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS7_8UserDataEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3376;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebKit::InteractionInformationAtPosition>>(unsigned char *a1, unint64_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  IPC::ArgumentCoder<WebKit::InteractionInformationAtPosition,void>::decode(a2, v13);
  if (v14
    || ((unint64_t v6 = *a2, v7 = a2[1], *a2 = 0, a2[1] = 0, (v8 = a2[3]) != 0) ? (v9 = v7 == 0) : (v9 = 1),
        !v9 && ((*(void (**)(unint64_t, unint64_t))(*(void *)v8 + 16))(v8, v6), v14)))
  {
    WebKit::InteractionInformationAtPosition::InteractionInformationAtPosition((uint64_t)a1, (uint64_t)v13);
    int v5 = v14;
    a1[640] = 1;
    if (!v5) {
      return;
    }
    WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v13, v4);
    if (a1[640]) {
      return;
    }
  }
  else
  {
    *a1 = 0;
    a1[640] = 0;
  }
  unint64_t v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t v11 = a2[3];
  if (v11 && v10)
  {
    uint64_t v12 = *(void (**)(void))(*(void *)v11 + 16);
    v12();
  }
}

uint64_t std::__tuple_leaf<0ul,WebKit::EditorState,false>::__tuple_leaf[abi:sn180100]<WebKit::EditorState,void>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)((char *)a2 + 15);
  *(_OWORD *)a1 = v4;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v5 = a1 + 32;
  *(unsigned char *)(a1 + 336) = 0;
  if (*((unsigned char *)a2 + 336))
  {
    std::construct_at[abi:sn180100]<WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData*>(v5, a2 + 2);
    *(unsigned char *)(a1 + 336) = 1;
  }
  std::__optional_move_base<WebKit::EditorState::VisualData,false>::__optional_move_base[abi:sn180100](a1 + 352, a2 + 22);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy22RequestTextRecognitionEN6WebKit12WebPageProxyES8_FvRKNS_3URLEON7WebCore21ShareableBitmapHandleERKNS_6StringESH_ONS_17CompletionHandlerIFvONSC_21TextRecognitionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02B78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy22RequestTextRecognitionEN6WebKit12WebPageProxyES8_FvRKNS_3URLEON7WebCore21ShareableBitmapHandleERKNS_6StringESH_ONS_17CompletionHandlerIFvONSC_21TextRecognitionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02B78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy22RequestTextRecognitionEN6WebKit12WebPageProxyES8_FvRKNS_3URLEON7WebCore21ShareableBitmapHandleERKNS_6StringESH_ONS_17CompletionHandlerIFvONSC_21TextRecognitionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3365;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::TextRecognitionResult,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF *IPC::Decoder::decode<std::tuple<WTF::UUID,WebCore::TextAnimationData,WebCore::TextIndicatorData>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::UUID>(a2, (uint64_t)&v32);
  if (!v33)
  {
LABEL_25:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 192) = 0;
LABEL_26:
    uint64_t v20 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a2 + 3);
    if (result && v20)
    {
      v21 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF *)v21();
    }
    return result;
  }
  IPC::ArgumentCoder<WebCore::TextAnimationData,void>::decode((uint64_t *)a2, (uint64_t)v34);
  if (!v35)
  {
    uint64_t v17 = *(void *)a2;
    uint64_t v18 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v19 = *((void *)a2 + 3);
    if (v19 && v18) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
    }
    goto LABEL_25;
  }
  uint64_t result = (WTF *)IPC::Decoder::decode<WebCore::TextIndicatorData>((unint64_t *)a2, v23);
  if (v31)
  {
    if (!v33) {
      __break(1u);
    }
    long long v5 = v34[0];
    long long v6 = v34[1];
    *(_OWORD *)a1 = v32;
    *(_OWORD *)(a1 + 16) = v5;
    long long v7 = v34[2];
    long long v8 = v34[3];
    *(_OWORD *)(a1 + 32) = v6;
    *(_OWORD *)(a1 + 48) = v7;
    long long v9 = v23[0];
    long long v10 = v23[1];
    *(_OWORD *)(a1 + 64) = v8;
    *(_OWORD *)(a1 + 80) = v9;
    long long v11 = v23[2];
    *(_OWORD *)(a1 + 96) = v10;
    *(_OWORD *)(a1 + 112) = v11;
    *(void *)(a1 + 128) = v24;
    *(void *)&long long v11 = v25;
    v24 = 0;
    uint64_t v25 = 0;
    *(void *)(a1 + 136) = v11;
    *(_DWORD *)(a1 + 144) = v26;
    long long v12 = v27;
    long long v27 = 0uLL;
    *(_OWORD *)(a1 + 152) = v12;
    *(void *)(a1 + 168) = v28;
    uint64_t v28 = 0;
    uint64_t result = (WTF *)WebCore::Color::Color();
    *(_DWORD *)(a1 + 184) = v30;
    *(unsigned char *)(a1 + 192) = 1;
    if (v31)
    {
      if ((v29 & 0x8000000000000) != 0)
      {
        v22 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v22);
          WTF::fastFree((WTF *)v22, v13);
        }
      }
      unsigned __int8 v14 = v28;
      uint64_t v28 = 0;
      if (v14)
      {
        if (v14[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v14 + 8))(v14);
        }
        else {
          --v14[2];
        }
      }
      uint64_t v15 = (_DWORD *)*((void *)&v27 + 1);
      *((void *)&v27 + 1) = 0;
      if (v15)
      {
        if (v15[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
        }
        else {
          --v15[2];
        }
      }
      uint64_t v16 = (_DWORD *)v27;
      *(void *)&long long v27 = 0;
      if (v16)
      {
        if (v16[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v16 + 8))(v16);
        }
        else {
          --v16[2];
        }
      }
      uint64_t result = v24;
      if (v24)
      {
        v24 = 0;
        LODWORD(v25) = 0;
        uint64_t result = (WTF *)WTF::fastFree(result, v13);
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 192) = 0;
  }
  if (!*(unsigned char *)(a1 + 192)) {
    goto LABEL_26;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy51AddTextAnimationForAnimationIDWithCompletionHandlerEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_4UUIDERKN7WebCore17TextAnimationDataERKNSE_17TextIndicatorDataEONS_17CompletionHandlerIFvNSE_20TextAnimationRunModeEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02BA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy51AddTextAnimationForAnimationIDWithCompletionHandlerEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_4UUIDERKN7WebCore17TextAnimationDataERKNSE_17TextIndicatorDataEONS_17CompletionHandlerIFvNSE_20TextAnimationRunModeEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02BA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy51AddTextAnimationForAnimationIDWithCompletionHandlerEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_4UUIDERKN7WebCore17TextAnimationDataERKNSE_17TextIndicatorDataEONS_17CompletionHandlerIFvNSE_20TextAnimationRunModeEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3341;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v12 = v5;
  long long v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *long long v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    long long v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy28ShowMediaControlsContextMenuEN6WebKit12WebPageProxyES8_FvON7WebCore9FloatRectEONS_6VectorINS9_28MediaControlsContextMenuItemELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02BC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy28ShowMediaControlsContextMenuEN6WebKit12WebPageProxyES8_FvON7WebCore9FloatRectEONS_6VectorINS9_28MediaControlsContextMenuItemELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02BC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy28ShowMediaControlsContextMenuEN6WebKit12WebPageProxyES8_FvON7WebCore9FloatRectEONS_6VectorINS9_28MediaControlsContextMenuItemELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3368;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v12 = v5;
  long long v6 = (void *)IPC::Encoder::grow(v5, 8uLL, 8);
  if (v7 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *long long v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    long long v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebPopupItem>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebPopupItem,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 48))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

unint64_t WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPopupItem>(unsigned int *a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = *(void *)a1 + 48 * a1[3];
  *(unsigned char *)uint64_t v4 = *(unsigned char *)result;
  uint64_t v5 = *(void *)(result + 8);
  *(void *)(result + 8) = 0;
  *(void *)(v4 + 8) = v5;
  *(_WORD *)(v4 + 16) = *(_WORD *)(result + 16);
  uint64_t v6 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(v4 + 24) = v6;
  uint64_t v7 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(v4 + 32) = v7;
  LOWORD(v7) = *(_WORD *)(result + 40);
  *(unsigned char *)(v4 + 42) = *(unsigned char *)(result + 42);
  *(_WORD *)(v4 + 40) = v7;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x1993C1D74);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)result + 48 * *((unsigned int *)result + 3));
    int v5 = 48 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)uint64_t v2 = v6;
    unint64_t result = WTF::VectorMover<false,WebKit::WebPopupItem>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::WebPopupItem>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    do
    {
      *(unsigned char *)a3 = *(unsigned char *)v5;
      uint64_t v6 = *((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      *(void *)(a3 + 8) = v6;
      *(_WORD *)(a3 + 16) = *((_WORD *)v5 + 8);
      uint64_t v7 = *((void *)v5 + 3);
      *((void *)v5 + 3) = 0;
      *(void *)(a3 + 24) = v7;
      uint64_t v8 = *((void *)v5 + 4);
      *((void *)v5 + 4) = 0;
      *(void *)(a3 + 32) = v8;
      LOWORD(v8) = *((_WORD *)v5 + 20);
      *(unsigned char *)(a3 + 42) = *((unsigned char *)v5 + 42);
      *(_WORD *)(a3 + 40) = v8;
      unint64_t v9 = (WTF::StringImpl *)*((void *)v5 + 4);
      *((void *)v5 + 4) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, a2);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      unint64_t v10 = (WTF::StringImpl *)*((void *)v5 + 3);
      *((void *)v5 + 3) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, a2);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      unint64_t result = (WTF::StringImpl *)*((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      int v5 = (WTF::StringImpl *)((char *)v5 + 48);
      a3 += 48;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebPopupItem,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 48))
  {
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    int v5 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy29EnumerateMediaDevicesForFrameEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNSB_18SecurityOriginDataESM_ONS_17CompletionHandlerIFvRKNS_6VectorINSB_29CaptureDeviceWithCapabilitiesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONSB_20MediaDeviceHashSaltsEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SW_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02BF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy29EnumerateMediaDevicesForFrameEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNSB_18SecurityOriginDataESM_ONS_17CompletionHandlerIFvRKNS_6VectorINSB_29CaptureDeviceWithCapabilitiesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONSB_20MediaDeviceHashSaltsEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SW_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02BF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy29EnumerateMediaDevicesForFrameEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNSB_18SecurityOriginDataESM_ONS_17CompletionHandlerIFvRKNS_6VectorINSB_29CaptureDeviceWithCapabilitiesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONSB_20MediaDeviceHashSaltsEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SW_EE4callESU_SW_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 3347;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v15 = v7;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v7, *(unsigned int *)(a2 + 12));
  unsigned int v8 = *(_DWORD *)(a2 + 12);
  if (v8)
  {
    uint64_t v9 = *(void *)a2;
    uint64_t v10 = v9 + 232 * v8;
    do
    {
      IPC::ArgumentCoder<WebCore::CaptureDevice,void>::encode(v7, v9);
      IPC::ArgumentCoder<WebCore::RealtimeMediaSourceCapabilities,void>::encode(v7, v9 + 40);
      v9 += 232;
    }
    while (v9 != v10);
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a3 + 1);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v15, 0, 0);
  unint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy26ValidateCaptureStateUpdateEN6WebKit12WebPageProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore30UserMediaRequestIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_12ClientOriginENSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEbNSA_29MediaProducerMediaCaptureKindEONS_17CompletionHandlerIFvONSt3__18optionalINSA_9ExceptionEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02C18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy26ValidateCaptureStateUpdateEN6WebKit12WebPageProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore30UserMediaRequestIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_12ClientOriginENSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEbNSA_29MediaProducerMediaCaptureKindEONS_17CompletionHandlerIFvONSt3__18optionalINSA_9ExceptionEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02C18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy26ValidateCaptureStateUpdateEN6WebKit12WebPageProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore30UserMediaRequestIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_12ClientOriginENSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEEbNSA_29MediaProducerMediaCaptureKindEONS_17CompletionHandlerIFvONSt3__18optionalINSA_9ExceptionEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3375;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::Exception>,void>::encode<IPC::Encoder,std::optional<WebCore::Exception>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy29RequestNotificationPermissionEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02C40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy29RequestNotificationPermissionEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02C40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy29RequestNotificationPermissionEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3363;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    long long v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::TextIndicatorData,WebCore::TextIndicatorData,WebCore::TextIndicatorData*>(uint64_t result, long long *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    long long v4 = *a2;
    long long v5 = a2[2];
    *(_OWORD *)(result + 16) = a2[1];
    *(_OWORD *)(result + 32) = v5;
    *(_OWORD *)uint64_t result = v4;
    *(void *)(result + 48) = 0;
    *(void *)(result + 56) = 0;
    uint64_t v6 = *((void *)a2 + 6);
    *((void *)a2 + 6) = 0;
    *(void *)(result + 48) = v6;
    LODWORD(v6) = *((_DWORD *)a2 + 14);
    *((_DWORD *)a2 + 14) = 0;
    *(_DWORD *)(result + 56) = v6;
    LODWORD(v6) = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 15) = 0;
    *(_DWORD *)(result + 60) = v6;
    *(_DWORD *)(result + 64) = *((_DWORD *)a2 + 16);
    uint64_t v7 = *((void *)a2 + 9);
    *((void *)a2 + 9) = 0;
    *(void *)(result + 72) = v7;
    uint64_t v8 = *((void *)a2 + 10);
    *((void *)a2 + 10) = 0;
    *(void *)(result + 80) = v8;
    uint64_t v9 = *((void *)a2 + 11);
    *((void *)a2 + 11) = 0;
    *(void *)(result + 88) = v9;
    WebCore::Color::Color();
    *(_DWORD *)(v3 + 104) = *((_DWORD *)a2 + 26);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__tuple_leaf<0ul,WebKit::FocusedElementInformation,false>::__tuple_leaf[abi:sn180100]<WebKit::FocusedElementInformation,void>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  long long v7 = a2[4];
  long long v8 = a2[5];
  long long v9 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  long long v10 = a2[8];
  long long v11 = a2[9];
  long long v12 = a2[10];
  *(_OWORD *)(a1 + 172) = *(long long *)((char *)a2 + 172);
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 128) = v10;
  uint64_t v13 = *((void *)a2 + 24);
  *((void *)a2 + 24) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = v13;
  uint64_t v14 = *((void *)a2 + 25);
  *((void *)a2 + 25) = 0;
  *(void *)(a1 + 200) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = 0;
  *(_DWORD *)(a1 + 208) = v14;
  *(void *)&long long v10 = *(void *)((char *)a2 + 212);
  *((_DWORD *)a2 + 53) = 0;
  *(void *)(a1 + 212) = v10;
  uint64_t v15 = *((void *)a2 + 28);
  *((void *)a2 + 28) = 0;
  *(void *)(a1 + 224) = v15;
  *(void *)(a1 + 232) = *((void *)a2 + 29);
  uint64_t v16 = *((void *)a2 + 30);
  *((void *)a2 + 30) = 0;
  *(void *)(a1 + 240) = v16;
  *(_WORD *)(a1 + 248) = *((_WORD *)a2 + 124);
  WTF::URL::URL(a1 + 256, (uint64_t *)a2 + 32);
  *(_WORD *)(a1 + 296) = *((_WORD *)a2 + 148);
  uint64_t v17 = *((void *)a2 + 38);
  *((void *)a2 + 38) = 0;
  *(void *)(a1 + 304) = v17;
  uint64_t v18 = *((void *)a2 + 39);
  *((void *)a2 + 39) = 0;
  *(void *)(a1 + 312) = v18;
  uint64_t v19 = *((void *)a2 + 40);
  *((void *)a2 + 40) = 0;
  *(void *)(a1 + 320) = v19;
  *(_WORD *)(a1 + 328) = *((_WORD *)a2 + 164);
  WebCore::Color::Color();
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  uint64_t v20 = *((void *)a2 + 43);
  *((void *)a2 + 43) = 0;
  *(void *)(a1 + 344) = v20;
  LODWORD(v20) = *((_DWORD *)a2 + 88);
  *((_DWORD *)a2 + 88) = 0;
  *(_DWORD *)(a1 + 352) = v20;
  LODWORD(v20) = *((_DWORD *)a2 + 89);
  *((_DWORD *)a2 + 89) = 0;
  *(_DWORD *)(a1 + 356) = v20;
  long long v21 = *(long long *)((char *)a2 + 360);
  long long v22 = *(long long *)((char *)a2 + 376);
  long long v23 = *(long long *)((char *)a2 + 392);
  *(void *)(a1 + 408) = *((void *)a2 + 51);
  *(_OWORD *)(a1 + 376) = v22;
  *(_OWORD *)(a1 + 392) = v23;
  *(_OWORD *)(a1 + 360) = v21;
  return a1;
}

void *IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)&v8);
  if (v10)
  {
    *(_OWORD *)a1 = v8;
    *(void *)(a1 + 16) = v9;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (void *)a2[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v5);
    }
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebCore::ShareableResourceHandle>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<WebCore::ShareableResourceHandle>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    IPC::Decoder::markInvalid(a1);
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ShareableResourceHandle>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::ShareableResourceHandle>(a1, (uint64_t)v4);
  if (v5)
  {
    WTF::MachSendRight::MachSendRight();
    *(_OWORD *)(a2 + 8) = *(_OWORD *)&v4[8];
    int v3 = v5;
    *(unsigned char *)(a2 + 24) = 1;
    if (v3) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy46RequestPasswordForQuickLookDocumentInMainFrameEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02C68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy46RequestPasswordForQuickLookDocumentInMainFrameEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02C68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy46RequestPasswordForQuickLookDocumentInMainFrameEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned __int8 v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v5 = 3364;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy27HandleMessageWithAsyncReplyEN6WebKit12WebPageProxyES8_FvRKNS_6StringERKNS7_8UserDataEONS_17CompletionHandlerIFvOSC_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02C90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy27HandleMessageWithAsyncReplyEN6WebKit12WebPageProxyES8_FvRKNS_6StringERKNS7_8UserDataEONS_17CompletionHandlerIFvOSC_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02C90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy27HandleMessageWithAsyncReplyEN6WebKit12WebPageProxyES8_FvRKNS_6StringERKNS7_8UserDataEONS_17CompletionHandlerIFvOSC_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned __int8 v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v5 = 3349;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy43ShouldAllowDeviceOrientationAndMotionAccessEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataEbONS_17CompletionHandlerIFvNSB_40DeviceOrientationOrMotionPermissionStateEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02CB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy43ShouldAllowDeviceOrientationAndMotionAccessEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataEbONS_17CompletionHandlerIFvNSB_40DeviceOrientationOrMotionPermissionStateEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02CB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy43ShouldAllowDeviceOrientationAndMotionAccessEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataEbONS_17CompletionHandlerIFvNSB_40DeviceOrientationOrMotionPermissionStateEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned __int8 v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v5 = 3366;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    long long v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20SpeechSynthesisSpeakEN6WebKit12WebPageProxyES8_FvRKNS_6StringESB_fffNS_13MonotonicTimeESB_SB_SB_bbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02CE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20SpeechSynthesisSpeakEN6WebKit12WebPageProxyES8_FvRKNS_6StringESB_fffNS_13MonotonicTimeESB_SB_SB_bbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02CE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20SpeechSynthesisSpeakEN6WebKit12WebPageProxyES8_FvRKNS_6StringESB_fffNS_13MonotonicTimeESB_SB_SB_bbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3373;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  long long v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  long long v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy34SpeechSynthesisSetFinishedCallbackEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02D08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy34SpeechSynthesisSetFinishedCallbackEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02D08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy34SpeechSynthesisSetFinishedCallbackEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3372;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  long long v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  long long v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20SpeechSynthesisPauseEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02D30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20SpeechSynthesisPauseEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02D30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20SpeechSynthesisPauseEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3370;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  long long v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  long long v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21SpeechSynthesisResumeEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02D58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21SpeechSynthesisResumeEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02D58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21SpeechSynthesisResumeEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3371;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  long long v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  long long v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WebKit::ModelIdentifier>(&v8, a2);
  if (v9)
  {
    *(_OWORD *)a1 = v8;
    *(unsigned char *)(a1 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result) {
      BOOL v6 = v5 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::ModelIdentifier>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::ModelIdentifier,void>::decode(a2, a1);
  if (!a1[16])
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier,BOOL>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WebKit::ModelIdentifier>(&v18, a2);
  if (v19)
  {
    unint64_t v5 = *((void *)a2 + 1);
    uint64_t v6 = *(void *)a2;
    unint64_t v7 = *((void *)a2 + 2) - *(void *)a2;
    if (v5 <= v7)
    {
      unint64_t v10 = 0;
      uint64_t v11 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v12 = *((void *)a2 + 3);
      if (v12)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
          uint64_t v11 = *(void *)a2;
          unint64_t v10 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v10 = 0;
          uint64_t v11 = 0;
        }
      }
    }
    else
    {
      long long v8 = (unsigned __int8 *)(v6 + v7);
      *((void *)a2 + 2) = v8 + 1;
      if (v6)
      {
        unsigned int v9 = *v8;
        if (v9 < 2)
        {
          *(_OWORD *)a1 = v18;
          *(unsigned char *)(a1 + 16) = v9 != 0;
          *(unsigned char *)(a1 + 24) = 1;
          return result;
        }
        goto LABEL_8;
      }
      unint64_t v10 = v5;
      uint64_t v11 = 0;
    }
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v13 = *((void *)a2 + 3);
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t v6 = *(void *)a2;
        unint64_t v5 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
      }
    }
LABEL_8:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14 && v5) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v6);
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v15 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    uint64_t v17 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v17();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21ModelElementGetCameraEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENSE_13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02D80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21ModelElementGetCameraEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENSE_13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02D80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21ModelElementGetCameraEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENSE_13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, WebCore::ResourceError *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3352;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1993C3448);
    }
    *uint64_t v6 = 0;
    if (*((_DWORD *)a2 + 20) == 1)
    {
      IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v5, a2);
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21ModelElementSetCameraEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEN7WebCore22HTMLModelElementCameraEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(v12);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1993C3468);
  }
  *uint64_t v6 = 1;
  if (*((_DWORD *)a2 + 20)) {
    goto LABEL_13;
  }
  IPC::ArgumentCoder<WebCore::HTMLModelElementCamera,void>::encode(v5, (double *)a2);
LABEL_8:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21ModelElementSetCameraEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEN7WebCore22HTMLModelElementCameraEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02DA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21ModelElementSetCameraEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEN7WebCore22HTMLModelElementCameraEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02DA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21ModelElementSetCameraEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEN7WebCore22HTMLModelElementCameraEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3359;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30ModelElementIsPlayingAnimationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02DD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30ModelElementIsPlayingAnimationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02DD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30ModelElementIsPlayingAnimationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, WebCore::ResourceError *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3356;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, WebCore::ResourceError *a2)
{
  int v4 = *((_DWORD *)a2 + 20);
  unint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1993C37ECLL);
    }
    *unint64_t v5 = 0;
    if (*((_DWORD *)a2 + 20) == 1)
    {
      IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(a1, a2);
      return;
    }
LABEL_14:
    uint64_t v10 = std::__throw_bad_variant_access[abi:sn180100]();
    _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy33ModelElementSetAnimationIsPlayingEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(v10);
    return;
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1993C380CLL);
  }
  *unint64_t v5 = 1;
  if (*((_DWORD *)a2 + 20)) {
    goto LABEL_14;
  }
  char v7 = *(unsigned char *)a2;
  long long v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1993C382CLL);
  }
  unsigned char *v8 = v7;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy33ModelElementSetAnimationIsPlayingEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02DF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy33ModelElementSetAnimationIsPlayingEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02DF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy33ModelElementSetAnimationIsPlayingEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3358;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30ModelElementIsLoopingAnimationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02E20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30ModelElementIsLoopingAnimationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02E20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30ModelElementIsLoopingAnimationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, WebCore::ResourceError *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3354;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy33ModelElementSetIsLoopingAnimationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02E48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy33ModelElementSetIsLoopingAnimationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02E48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy33ModelElementSetIsLoopingAnimationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3360;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy29ModelElementAnimationDurationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02E70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy29ModelElementAnimationDurationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02E70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy29ModelElementAnimationDurationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, WebCore::ResourceError *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3351;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy32ModelElementAnimationCurrentTimeEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02E98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy32ModelElementAnimationCurrentTimeEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02E98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy32ModelElementAnimationCurrentTimeEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, WebCore::ResourceError *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3350;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy35ModelElementSetAnimationCurrentTimeEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierENS_7SecondsEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02EC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy35ModelElementSetAnimationCurrentTimeEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierENS_7SecondsEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02EC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy35ModelElementSetAnimationCurrentTimeEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierENS_7SecondsEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3357;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20ModelElementHasAudioEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02EE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20ModelElementHasAudioEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02EE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20ModelElementHasAudioEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, WebCore::ResourceError *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3353;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy19ModelElementIsMutedEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02F10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy19ModelElementIsMutedEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02F10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy19ModelElementIsMutedEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, WebCore::ResourceError *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3355;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy22ModelElementSetIsMutedEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02F38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy22ModelElementSetIsMutedEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02F38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy22ModelElementSetIsMutedEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3361;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy25StartApplePayAMSUISessionEN6WebKit12WebPageProxyES8_FvONS_3URLEON7WebCore20ApplePayAMSUIRequestEONS_17CompletionHandlerIFvONSt3__18optionalIbEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02F60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy25StartApplePayAMSUISessionEN6WebKit12WebPageProxyES8_FvONS_3URLEON7WebCore20ApplePayAMSUIRequestEONS_17CompletionHandlerIFvONSt3__18optionalIbEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02F60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy25StartApplePayAMSUISessionEN6WebKit12WebPageProxyES8_FvONS_3URLEON7WebCore20ApplePayAMSUIRequestEONS_17CompletionHandlerIFvONSt3__18optionalIbEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3374;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy18BeginSystemPreviewEN6WebKit12WebPageProxyES8_FvRKNS_3URLERKN7WebCore18SecurityOriginDataERKNSC_17SystemPreviewInfoEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02F88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy18BeginSystemPreviewEN6WebKit12WebPageProxyES8_FvRKNS_3URLERKN7WebCore18SecurityOriginDataERKNSC_17SystemPreviewInfoEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02F88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy18BeginSystemPreviewEN6WebKit12WebPageProxyES8_FvRKNS_3URLERKN7WebCore18SecurityOriginDataERKNSC_17SystemPreviewInfoEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3342;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  long long v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  long long v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20RequestCookieConsentEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvN7WebCore27CookieConsentDecisionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02FB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20RequestCookieConsentEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvN7WebCore27CookieConsentDecisionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02FB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20RequestCookieConsentEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvN7WebCore27CookieConsentDecisionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3362;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy24DocumentURLForConsoleLogEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNS_3URLEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA02FD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy24DocumentURLForConsoleLogEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNS_3URLEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA02FD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy24DocumentURLForConsoleLogEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNS_3URLEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3346;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy13CreateNewPageEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEON7WebCore14WindowFeaturesEONS7_20NavigationActionDataEONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINSB_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEENSI_INS7_25WebPageCreationParametersEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_SR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03000;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy13CreateNewPageEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEON7WebCore14WindowFeaturesEONS7_20NavigationActionDataEONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINSB_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEENSI_INS7_25WebPageCreationParametersEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_SR_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03000;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy13CreateNewPageEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEON7WebCore14WindowFeaturesEONS7_20NavigationActionDataEONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINSB_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEENSI_INS7_25WebPageCreationParametersEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_SR_EE4callESP_SR_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[0] = a2;
  v14[1] = a3;
  uint64_t v6 = (uint64_t *)(a1 + 8);
  uint64_t v7 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v7, (uint64_t)v14);
  int v8 = *(unsigned __int8 *)(a4 + 1480);
  uint64_t v9 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (!v8)
  {
    if (!v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1993C4B0CLL);
    }
    *uint64_t v9 = 0;
    return IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), v6, 0, 0);
  }
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x1993C4AECLL);
  }
  *uint64_t v9 = 1;
  if (*(unsigned char *)(a4 + 1480))
  {
    IPC::ArgumentCoder<WebKit::WebPageCreationParameters,void>::encode(v7, a4);
    return IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), v6, 0, 0);
  }
  uint64_t v12 = std::__throw_bad_optional_access[abi:sn180100]();
  return IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WTF::String>>(v12, v13);
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WTF::String>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v9);
  if (v10)
  {
    IPC::Decoder::decode<WebKit::FrameInfoData>(a2, (uint64_t)v13);
    if (!v14)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 320) = 0;
LABEL_9:
      uint64_t result = std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v4);
      if (*(unsigned char *)(a1 + 320)) {
        return result;
      }
      goto LABEL_14;
    }
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v11);
    char v5 = v12;
    if (v12)
    {
      char v5 = v10;
      if (v10)
      {
        char v5 = v14;
        if (v14)
        {
          *(_OWORD *)a1 = v9;
          std::__tuple_leaf<1ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>(a1 + 16, (uint64_t)v13);
          *(void *)(a1 + 312) = v11;
          char v5 = 1;
LABEL_7:
          *(unsigned char *)(a1 + 320) = v5;
          goto LABEL_9;
        }
      }
      __break(1u);
    }
    *(unsigned char *)a1 = 0;
    goto LABEL_7;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 320) = 0;
LABEL_14:
  uint64_t v7 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result && v7)
  {
    int v8 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v8();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy18RunJavaScriptAlertEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03028;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy18RunJavaScriptAlertEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03028;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy18RunJavaScriptAlertEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)(a1 + 8), 0, 0);
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 320))
  {
    int v3 = *(WTF::StringImpl **)(a1 + 312);
    *(void *)(a1 + 312) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 256);
    *(void *)(a1 + 256) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(unsigned int *)(a1 + 248);
    if (v5 != -1) {
      ((void (*)(char *, uint64_t))off_1EEA02A40[v5])(&v8, a1 + 224);
    }
    *(_DWORD *)(a1 + 248) = -1;
    uint64_t v6 = *(const void **)(a1 + 216);
    *(void *)(a1 + 216) = 0;
    if (v6) {
      CFRelease(v6);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 24));
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy20RunJavaScriptConfirmEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03050;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy20RunJavaScriptConfirmEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03050;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy20RunJavaScriptConfirmEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19RunJavaScriptPromptEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataERKNS_6StringESO_ONS_17CompletionHandlerIFvSO_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03078;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19RunJavaScriptPromptEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataERKNS_6StringESO_ONS_17CompletionHandlerIFvSO_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03078;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19RunJavaScriptPromptEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataERKNS_6StringESO_ONS_17CompletionHandlerIFvSO_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21GetToolbarsAreVisibleEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA030A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21GetToolbarsAreVisibleEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA030A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21GetToolbarsAreVisibleEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19GetMenuBarIsVisibleEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA030C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19GetMenuBarIsVisibleEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA030C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19GetMenuBarIsVisibleEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21GetStatusBarIsVisibleEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA030F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21GetStatusBarIsVisibleEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA030F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21GetStatusBarIsVisibleEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy14GetWindowFrameEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvRKN7WebCore9FloatRectEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03118;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy14GetWindowFrameEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvRKN7WebCore9FloatRectEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03118;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy14GetWindowFrameEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvRKN7WebCore9FloatRectEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, float *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy16ScreenToRootViewEN6WebKit12WebPageProxyES8_FvRKN7WebCore8IntPointEONS_17CompletionHandlerIFvSC_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03140;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy16ScreenToRootViewEN6WebKit12WebPageProxyES8_FvRKN7WebCore8IntPointEONS_17CompletionHandlerIFvSC_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03140;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy16ScreenToRootViewEN6WebKit12WebPageProxyES8_FvRKN7WebCore8IntPointEONS_17CompletionHandlerIFvSC_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, int *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy16RootViewToScreenEN6WebKit12WebPageProxyES8_FvRKN7WebCore7IntRectEONS_17CompletionHandlerIFvSC_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03168;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy16RootViewToScreenEN6WebKit12WebPageProxyES8_FvRKN7WebCore7IntRectEONS_17CompletionHandlerIFvSC_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03168;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy16RootViewToScreenEN6WebKit12WebPageProxyES8_FvRKN7WebCore7IntRectEONS_17CompletionHandlerIFvSC_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, void *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29AccessibilityScreenToRootViewEN6WebKit12WebPageProxyES8_FvRKN7WebCore8IntPointEONS_17CompletionHandlerIFvSA_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03190;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29AccessibilityScreenToRootViewEN6WebKit12WebPageProxyES8_FvRKN7WebCore8IntPointEONS_17CompletionHandlerIFvSA_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03190;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29AccessibilityScreenToRootViewEN6WebKit12WebPageProxyES8_FvRKN7WebCore8IntPointEONS_17CompletionHandlerIFvSA_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EE4callESA_(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(*(IPC::Encoder **)(a1 + 8), (int *)&v5);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29RootViewToAccessibilityScreenEN6WebKit12WebPageProxyES8_FvRKN7WebCore7IntRectEONS_17CompletionHandlerIFvSA_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA031B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29RootViewToAccessibilityScreenEN6WebKit12WebPageProxyES8_FvRKN7WebCore7IntRectEONS_17CompletionHandlerIFvSA_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA031B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29RootViewToAccessibilityScreenEN6WebKit12WebPageProxyES8_FvRKN7WebCore7IntRectEONS_17CompletionHandlerIFvSA_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EE4callESA_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(*(IPC::Encoder **)(a1 + 8), v6);
  uint64_t v4 = v3[1];

  return IPC::Connection::sendMessageImpl(v4, v3, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy27RunBeforeUnloadConfirmPanelEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA031E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy27RunBeforeUnloadConfirmPanelEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA031E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy27RunBeforeUnloadConfirmPanelEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy10PrintFrameEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS_6StringERKNSB_9FloatSizeEONS_17CompletionHandlerIFvvEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03208;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy10PrintFrameEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS_6StringERKNSB_9FloatSizeEONS_17CompletionHandlerIFvvEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03208;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy10PrintFrameEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS_6StringERKNSB_9FloatSizeEONS_17CompletionHandlerIFvvEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)(a1 + 8), 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03230;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03230;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy17InterpretKeyEventEN6WebKit12WebPageProxyES8_FvRKNS7_11EditorStateEbONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03258;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy17InterpretKeyEventEN6WebKit12WebPageProxyES8_FvRKNS7_11EditorStateEbONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03258;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy17InterpretKeyEventEN6WebKit12WebPageProxyES8_FvRKNS7_11EditorStateEbONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19BackForwardGoToItemEN6WebKit12WebPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNS7_24WebBackForwardListCountsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03280;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19BackForwardGoToItemEN6WebKit12WebPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNS7_24WebBackForwardListCountsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03280;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19BackForwardGoToItemEN6WebKit12WebPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNS7_24WebBackForwardListCountsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, int *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(v4, *a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(v4, a2[1]);
  uint64_t v5 = v3[1];

  return IPC::Connection::sendMessageImpl(v5, v3, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy22BackForwardItemAtIndexEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEiONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSE_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA032A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy22BackForwardItemAtIndexEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEiONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSE_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA032A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy22BackForwardItemAtIndexEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEiONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSE_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = *(IPC::Encoder **)(a1 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v7 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v6)
  {
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1993C5F8CLL);
    }
    *uint64_t v7 = 1;
    if (!*(unsigned char *)(a2 + 16))
    {
      uint64_t v11 = std::__throw_bad_optional_access[abi:sn180100]();
      return _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy27BackForwardListContainsItemEN6WebKit12WebPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(v11);
    }
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v5, (uint64_t *)a2);
  }
  else
  {
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1993C5FACLL);
    }
    *uint64_t v7 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);

  return IPC::Connection::sendMessageImpl(v9, v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy27BackForwardListContainsItemEN6WebKit12WebPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA032D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy27BackForwardListContainsItemEN6WebKit12WebPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA032D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy27BackForwardListContainsItemEN6WebKit12WebPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21BackForwardListCountsEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvONS7_24WebBackForwardListCountsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA032F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21BackForwardListCountsEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvONS7_24WebBackForwardListCountsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA032F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21BackForwardListCountsEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvONS7_24WebBackForwardListCountsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, int *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(v4, *a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(v4, a2[1]);
  uint64_t v5 = v3[1];

  return IPC::Connection::sendMessageImpl(v5, v3, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy11CanUndoRedoEN6WebKit12WebPageProxyES8_FvNS7_10UndoOrRedoEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03320;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy11CanUndoRedoEN6WebKit12WebPageProxyES8_FvNS7_10UndoOrRedoEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03320;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy11CanUndoRedoEN6WebKit12WebPageProxyES8_FvNS7_10UndoOrRedoEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy15ExecuteUndoRedoEN6WebKit12WebPageProxyES8_FvNS7_10UndoOrRedoEONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03348;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy15ExecuteUndoRedoEN6WebKit12WebPageProxyES8_FvNS7_10UndoOrRedoEONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03348;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy15ExecuteUndoRedoEN6WebKit12WebPageProxyES8_FvNS7_10UndoOrRedoEONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)(a1 + 8), 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21RequestDOMPasteAccessEN6WebKit12WebPageProxyES8_FvN7WebCore22DOMPasteAccessCategoryENS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS9_7IntRectERKNS_6StringEONS_17CompletionHandlerIFvNS9_22DOMPasteAccessResponseEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03370;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21RequestDOMPasteAccessEN6WebKit12WebPageProxyES8_FvN7WebCore22DOMPasteAccessCategoryENS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS9_7IntRectERKNS_6StringEONS_17CompletionHandlerIFvNS9_22DOMPasteAccessResponseEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03370;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21RequestDOMPasteAccessEN6WebKit12WebPageProxyES8_FvN7WebCore22DOMPasteAccessCategoryENS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS9_7IntRectERKNS_6StringEONS_17CompletionHandlerIFvNS9_22DOMPasteAccessResponseEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21ExceededDatabaseQuotaEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS_6StringESK_SK_yyyyONS_17CompletionHandlerIFvyEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03398;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21ExceededDatabaseQuotaEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS_6StringESK_SK_yyyyONS_17CompletionHandlerIFvyEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03398;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21ExceededDatabaseQuotaEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS_6StringESK_SK_yyyyONS_17CompletionHandlerIFvyEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 8uLL, 8);
  if (v6 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy20CheckTextOfParagraphEN6WebKit12WebPageProxyES8_FvRKNS_6StringENS_9OptionSetIN7WebCore16TextCheckingTypeEEEiONS_17CompletionHandlerIFvONS_6VectorINSD_18TextCheckingResultELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA033C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy20CheckTextOfParagraphEN6WebKit12WebPageProxyES8_FvRKNS_6StringENS_9OptionSetIN7WebCore16TextCheckingTypeEEEiONS_17CompletionHandlerIFvONS_6VectorINSD_18TextCheckingResultELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA033C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy20CheckTextOfParagraphEN6WebKit12WebPageProxyES8_FvRKNS_6StringENS_9OptionSetIN7WebCore16TextCheckingTypeEEEiONS_17CompletionHandlerIFvONS_6VectorINSD_18TextCheckingResultELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = 48 * v6;
    do
    {
      IPC::ArgumentCoder<WebCore::TextCheckingResult,void>::encode(v5, v7);
      v7 += 48;
      v8 -= 48;
    }
    while (v8);
  }
  uint64_t v9 = *(void *)(a1 + 16);

  return IPC::Connection::sendMessageImpl(v9, v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21CheckSpellingOfStringEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFviiEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJiiEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA033E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21CheckSpellingOfStringEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFviiEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJiiEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA033E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21CheckSpellingOfStringEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFviiEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJiiEE4callEii(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 8);
  uint64_t v7 = *(IPC::Encoder **)(a1 + 8);
  uint64_t v8 = (_DWORD *)IPC::Encoder::grow(v7, 4uLL, 4);
  if (v9 <= 3 || (_DWORD *v8 = a2, v10 = (_DWORD *)IPC::Encoder::grow(v7, 4uLL, 4), v11 <= 3))
  {
    __break(0xC471u);
    JUMPOUT(0x1993C691CLL);
  }
  *char v10 = a3;
  uint64_t v12 = *(void *)(a1 + 16);

  return IPC::Connection::sendMessageImpl(v12, v6, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy20CheckGrammarOfStringEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore13GrammarDetailELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEiiEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_iiEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03410;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy20CheckGrammarOfStringEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore13GrammarDetailELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEiiEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_iiEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03410;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy20CheckGrammarOfStringEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore13GrammarDetailELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEiiEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_iiEE4callESJ_ii(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = (uint64_t *)(a1 + 8);
  unint64_t v9 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v9, *(unsigned int *)(a2 + 12));
  uint64_t v10 = *(unsigned int *)(a2 + 12);
  if (v10)
  {
    unint64_t v11 = *(uint64_t **)a2;
    uint64_t v12 = 40 * v10;
    do
    {
      IPC::ArgumentCoder<WebCore::GrammarDetail,void>::encode(v9, v11);
      v11 += 5;
      v12 -= 40;
    }
    while (v12);
  }
  uint64_t v13 = (_DWORD *)IPC::Encoder::grow(v9, 4uLL, 4);
  if (v14 <= 3 || (*uint64_t v13 = a3, v15 = (_DWORD *)IPC::Encoder::grow(v9, 4uLL, 4), v16 <= 3))
  {
    __break(0xC471u);
    JUMPOUT(0x1993C6AE8);
  }
  *uint64_t v15 = a4;
  uint64_t v17 = *(void *)(a1 + 16);

  return IPC::Connection::sendMessageImpl(v17, v8, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19SpellingUIIsShowingEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03438;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19SpellingUIIsShowingEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03438;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19SpellingUIIsShowingEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy17GetGuessesForWordEN6WebKit12WebPageProxyES8_FvRKNS_6StringESB_iONS_17CompletionHandlerIFvONS_6VectorIS9_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03460;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy17GetGuessesForWordEN6WebKit12WebPageProxyES8_FvRKNS_6StringESB_iONS_17CompletionHandlerIFvONS_6VectorIS9_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03460;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy17GetGuessesForWordEN6WebKit12WebPageProxyES8_FvRKNS_6StringESB_iONS_17CompletionHandlerIFvONS_6VectorIS9_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29ExecuteSavedCommandBySelectorEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03488;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29ExecuteSavedCommandBySelectorEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03488;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29ExecuteSavedCommandBySelectorEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy13GetIsSpeakingEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA034B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy13GetIsSpeakingEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA034B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy13GetIsSpeakingEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21DictationAlternativesEN6WebKit12WebPageProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore20DictationContextTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA034D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21DictationAlternativesEN6WebKit12WebPageProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore20DictationContextTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA034D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21DictationAlternativesEN6WebKit12WebPageProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore20DictationContextTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy18LoadRecentSearchesEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_6StringEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore12RecentSearchELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03500;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy18LoadRecentSearchesEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_6StringEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore12RecentSearchELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03500;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy18LoadRecentSearchesEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_6StringEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore12RecentSearchELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *((unsigned int *)a2 + 3));
  uint64_t v6 = *((unsigned int *)a2 + 3);
  if (v6)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = v7 + 16 * v6;
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)v7);
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v5, *(double *)(v7 + 8));
      v7 += 16;
    }
    while (v7 != v8);
  }
  uint64_t v9 = *(void *)(a1 + 16);

  return IPC::Connection::sendMessageImpl(v9, v4, 0, 0);
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v5);
  char v4 = v6;
  if (v6)
  {
    *(void *)a2 = v5[0];
    *(void *)(a2 + 8) = v5[1];
    char v4 = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 16) = v4;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy13WrapCryptoKeyEN6WebKit12WebPageProxyES8_FvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt3__18optionalISC_EEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03528;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy13WrapCryptoKeyEN6WebKit12WebPageProxyES8_FvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt3__18optionalISC_EEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03528;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy13WrapCryptoKeyEN6WebKit12WebPageProxyES8_FvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt3__18optionalISC_EEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

WTF *IPC::Decoder::decode<std::tuple<WebCore::WrappedCryptoKey>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::WrappedCryptoKey>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 56))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF *)v7();
    }
  }
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<WebCore::WrappedCryptoKey>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t result = IPC::Decoder::decode<WebCore::WrappedCryptoKey>(a1, (uint64_t)&v6);
  char v4 = v11;
  if (v11)
  {
    *(_OWORD *)a2 = v6;
    uint64_t v5 = v8;
    *(void *)(a2 + 16) = v7;
    *(void *)(a2 + 24) = v5;
    *(void *)(a2 + 32) = v9;
    *(_OWORD *)(a2 + 40) = v10;
    char v4 = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 56) = v4;
  return result;
}

WTF *IPC::Decoder::decode<WebCore::WrappedCryptoKey>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::WrappedCryptoKey,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 56))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF *)v7();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy15UnwrapCryptoKeyEN6WebKit12WebPageProxyES8_FvON7WebCore16WrappedCryptoKeyEONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03550;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy15UnwrapCryptoKeyEN6WebKit12WebPageProxyES8_FvON7WebCore16WrappedCryptoKeyEONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03550;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy15UnwrapCryptoKeyEN6WebKit12WebPageProxyES8_FvON7WebCore16WrappedCryptoKeyEONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy24HandleSynchronousMessageEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_6StringERKNS7_8UserDataEONS_17CompletionHandlerIFvOSE_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03578;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy24HandleSynchronousMessageEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_6StringERKNS7_8UserDataEONS_17CompletionHandlerIFvOSE_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03578;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy24HandleSynchronousMessageEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_6StringERKNS7_8UserDataEONS_17CompletionHandlerIFvOSE_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy28LoadSynchronousURLSchemeTaskEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_23URLSchemeTaskParametersEONS_17CompletionHandlerIFvRKN7WebCore16ResourceResponseERKNSE_13ResourceErrorEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_SK_SP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA035A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy28LoadSynchronousURLSchemeTaskEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_23URLSchemeTaskParametersEONS_17CompletionHandlerIFvRKN7WebCore16ResourceResponseERKNSE_13ResourceErrorEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_SK_SP_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA035A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy28LoadSynchronousURLSchemeTaskEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_23URLSchemeTaskParametersEONS_17CompletionHandlerIFvRKN7WebCore16ResourceResponseERKNSE_13ResourceErrorEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_SK_SP_EE4callESH_SK_SP_(uint64_t a1, WebCore::ResourceResponseBase *a2, WebCore::ResourceError *a3, uint64_t a4)
{
  long long v6 = (uint64_t *)(a1 + 8);
  uint64_t v7 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v7, a2);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v7, a3);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v7, *(const void **)a4, *(unsigned int *)(a4 + 12));
  uint64_t v8 = v6[1];

  return IPC::Connection::sendMessageImpl(v8, v6, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy38SerializedAttachmentDataForIdentifiersEN6WebKit12WebPageProxyES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_IN7WebCore24SerializedAttachmentDataELm0ESB_Lm16ESC_EEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA035C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy38SerializedAttachmentDataForIdentifiersEN6WebKit12WebPageProxyES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_IN7WebCore24SerializedAttachmentDataELm0ESB_Lm16ESC_EEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA035C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy38SerializedAttachmentDataForIdentifiersEN6WebKit12WebPageProxyES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_IN7WebCore24SerializedAttachmentDataELm0ESB_Lm16ESC_EEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  char v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)a2;
    uint64_t v8 = 24 * v6;
    do
    {
      IPC::ArgumentCoder<WebCore::SerializedAttachmentData,void>::encode(v5, v7);
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  uint64_t v9 = *(void *)(a1 + 16);

  return IPC::Connection::sendMessageImpl(v9, v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy24SpeechSynthesisVoiceListEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvONS_6VectorINS7_23WebSpeechSynthesisVoiceELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA035F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy24SpeechSynthesisVoiceListEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvONS_6VectorINS7_23WebSpeechSynthesisVoiceELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA035F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy24SpeechSynthesisVoiceListEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvONS_6VectorINS7_23WebSpeechSynthesisVoiceELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  char v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = 32 * v6;
    do
    {
      IPC::ArgumentCoder<WebKit::WebSpeechSynthesisVoice,void>::encode(v5, v7);
      v7 += 32;
      v8 -= 32;
    }
    while (v8);
  }
  uint64_t v9 = *(void *)(a1 + 16);

  return IPC::Connection::sendMessageImpl(v9, v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy26RenderTreeAsTextForTestingEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEmNS_9OptionSetINS9_16RenderAsTextFlagEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03618;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy26RenderTreeAsTextForTestingEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEmNS_9OptionSetINS9_16RenderAsTextFlagEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03618;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy26RenderTreeAsTextForTestingEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEmNS_9OptionSetINS9_16RenderAsTextFlagEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19FrameTextForTestingEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03640;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19FrameTextForTestingEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03640;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19FrameTextForTestingEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29BindRemoteAccessibilityFramesEN6WebKit12WebPageProxyES8_FviN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvSL_iEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_iEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03668;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29BindRemoteAccessibilityFramesEN6WebKit12WebPageProxyES8_FviN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvSL_iEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_iEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03668;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29BindRemoteAccessibilityFramesEN6WebKit12WebPageProxyES8_FviN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvSL_iEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_iEE4callESL_i(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v6 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v6, *(const void **)a2, *(unsigned int *)(a2 + 12));
  uint64_t v7 = (_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4);
  if (v8 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v7 = a3;
    uint64_t v9 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v9, v5, 0, 0);
  }
  return result;
}

void WebKit::WebPageTesting::didReceiveMessage(WebKit::WebPageTesting *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  switch(*((_WORD *)a3 + 25))
  {
    case 0x84F:
      WebKit::WebPageTesting::clearNotificationPermissionState(this);
      break;
    case 0x850:
      WebKit::WebPageTesting::clearWheelEventTestMonitor(this);
      break;
    case 0x851:
      uint64_t v6 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v7)
      {
        char v31 = v6;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v32, a2);
        unint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v8 = &unk_1EEA03690;
        v8[1] = v31;
        IntPoint v9 = *(IntPoint *)v32;
        *(void *)long long v32 = 0;
        v8[2] = v9;
        uint64_t v28 = v8;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v32);
        WebKit::WebPageTesting::isLayerTreeFrozen((uint64_t)this, (uint64_t *)&v28);
        uint64_t v10 = (uint64_t)v28;
        uint64_t v28 = 0;
        if (v10) {
          goto LABEL_10;
        }
      }
      break;
    case 0x852:
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3) <= 0xFFu)
      {
        uint64_t v24 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v25 = *((void *)a3 + 3);
        if (v25) {
          BOOL v26 = v24 == 0;
        }
        else {
          BOOL v26 = 1;
        }
        if (!v26)
        {
          long long v27 = *(void (**)(void))(*(void *)v25 + 16);
          v27();
        }
      }
      else
      {
        WebKit::WebPageTesting::setDefersLoading(this);
      }
      break;
    case 0x853:
      IPC::Decoder::decode<std::tuple<double,WebCore::IntPoint>>((unint64_t *)a3, &v31);
      if (v33)
      {
        uint64_t v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (v12)
        {
          uint64_t v28 = (void *)v11;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v29, a2);
          uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
          *uint64_t v13 = &unk_1EEA036E0;
          v13[1] = v28;
          unint64_t v14 = v29;
          uint64_t v29 = 0;
          int v30 = v13;
          v13[2] = v14;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v29);
          if (!v33)
          {
            __break(1u);
            JUMPOUT(0x1993C8224);
          }
          IntPoint v15 = *(IntPoint *)v32;
          WebKit::WebPageTesting::setPageScaleFactor((uint64_t)this, v15, (uint64_t *)&v30, *(double *)&v31);
          uint64_t v10 = (uint64_t)v30;
          int v30 = 0;
          if (v10) {
            goto LABEL_10;
          }
        }
      }
      break;
    case 0x854:
      IPC::Decoder::decode<std::tuple<WTF::String,BOOL>>(a3, &v31);
      if (v33)
      {
        WebKit::WebPageTesting::setPermissionLevel(this, &v31, v32[0]);
        if (v33)
        {
          uint64_t v17 = v31;
          char v31 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v16);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
        }
      }
      break;
    case 0x855:
      uint64_t v18 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v18 & 0xFF00000000) != 0)
      {
        float v19 = *(float *)&v18;
        uint64_t v20 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (v21)
        {
          char v31 = v20;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v32, a2);
          long long v22 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v22 = &unk_1EEA036B8;
          v22[1] = v31;
          IntPoint v23 = *(IntPoint *)v32;
          *(void *)long long v32 = 0;
          v22[2] = v23;
          uint64_t v28 = v22;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v32);
          WebKit::WebPageTesting::setTopContentInset((uint64_t)this, (uint64_t *)&v28, v19);
          uint64_t v10 = (uint64_t)v28;
          uint64_t v28 = 0;
          if (v10) {
LABEL_10:
          }
            (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
      }
      break;
    default:
      return;
  }
}

BOOL WebKit::WebPageTesting::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, IPC::Encoder **a4)
{
  if (*((_WORD *)a3 + 25) != 3782) {
    return 0;
  }
  IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v18);
  BOOL v7 = v19 != 0;
  if (!v19) {
    return v7;
  }
  unint64_t v8 = *a4;
  *a4 = 0;
  IntPoint v15 = v8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a2);
  IntPoint v9 = (void *)WTF::fastMalloc((WTF *)0x18);
  *IntPoint v9 = &unk_1EEA03708;
  v9[1] = v15;
  uint64_t v10 = v16[0];
  v16[0] = 0;
  void v9[2] = v10;
  uint64_t v17 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  BOOL result = 0;
  if (v19)
  {
    WebKit::WebPageTesting::isEditingCommandEnabled(a1, (const WTF::String *)&v18, (uint64_t *)&v17);
    uint64_t v13 = (uint64_t)v17;
    uint64_t v17 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    if (v19)
    {
      unint64_t v14 = v18;
      uint64_t v18 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    return v7;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebPageTesting17IsLayerTreeFrozenEN6WebKit14WebPageTestingES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03690;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebPageTesting17IsLayerTreeFrozenEN6WebKit14WebPageTestingES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA03690;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebPageTesting17IsLayerTreeFrozenEN6WebKit14WebPageTestingES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3377;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    char v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebPageTesting18SetTopContentInsetEN6WebKit14WebPageTestingES8_FvfONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA036B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebPageTesting18SetTopContentInsetEN6WebKit14WebPageTestingES8_FvfONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA036B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebPageTesting18SetTopContentInsetEN6WebKit14WebPageTestingES8_FvfONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3379;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebPageTesting18SetPageScaleFactorEN6WebKit14WebPageTestingES8_FvdN7WebCore8IntPointEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA036E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebPageTesting18SetPageScaleFactorEN6WebKit14WebPageTestingES8_FvdN7WebCore8IntPointEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA036E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebPageTesting18SetPageScaleFactorEN6WebKit14WebPageTestingES8_FvdN7WebCore8IntPointEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3378;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14WebPageTesting23IsEditingCommandEnabledEN6WebKit14WebPageTestingES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03708;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14WebPageTesting23IsEditingCommandEnabledEN6WebKit14WebPageTestingES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03708;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14WebPageTesting23IsEditingCommandEnabledEN6WebKit14WebPageTestingES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void WebKit::WebPasteboardProxy::didReceiveMessage(WebKit::WebPasteboardProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  switch(*((_WORD *)a3 + 25))
  {
    case 0x9FC:
      IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a3, a2, (uint64_t)&v64);
      if (!v65)
      {
        int v9 = 0;
        LOBYTE(v47) = 0;
        v48[24] = 0;
        goto LABEL_98;
      }
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v66);
      if (!v67) {
        goto LABEL_77;
      }
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a3, &v56);
      if ((_BYTE)v57)
      {
        if (v65 && v67)
        {
          int v7 = 0;
          uint64_t v8 = *((void *)&v64 + 1);
          *(void *)&long long v47 = v64;
          long long v64 = 0uLL;
          *((void *)&v47 + 1) = v8;
          *(void *)uint64_t v48 = v66;
          *(_OWORD *)&v48[8] = v56;
          int v9 = 1;
          v48[24] = 1;
          goto LABEL_41;
        }
        goto LABEL_76;
      }
      LOBYTE(v47) = 0;
      v48[24] = 0;
      if (v67)
      {
        char v21 = v66;
        v66 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 != 2)
          {
            int v9 = 0;
            *(_DWORD *)v21 -= 2;
            goto LABEL_40;
          }
          WTF::StringImpl::destroy(v21, v6);
        }
      }
      int v9 = 0;
      goto LABEL_40;
    case 0x9FD:
      IPC::ArgumentCoder<WebCore::PasteboardImage,void>::decode((uint64_t *)a3, (uint64_t)&v56);
      if (!v63)
      {
        uint64_t v30 = *(void *)a3;
        uint64_t v31 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v32 = *((void *)a3 + 3);
        if (!v32 || v31 == 0) {
          goto LABEL_85;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v32, v30);
        if (!v63) {
          goto LABEL_85;
        }
      }
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v66);
      if (!v67)
      {
        LOBYTE(v47) = 0;
        char v55 = 0;
LABEL_52:
        int v10 = 1;
        goto LABEL_53;
      }
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a3, &v64);
      if (!v65)
      {
        LOBYTE(v47) = 0;
        char v55 = 0;
        if (v67)
        {
          long long v22 = v66;
          v66 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v6);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
        }
        goto LABEL_52;
      }
      if (!v63 || !v67) {
        goto LABEL_76;
      }
      int v10 = 0;
      long long v47 = v56;
      *(_OWORD *)uint64_t v48 = v57;
      LODWORD(v57) = v57 & 0xFFFFFFFE;
      long long v52 = v62;
      v53 = v66;
      long long v56 = 0u;
      *(_OWORD *)&v48[16] = v58;
      long long v49 = v59;
      long long v11 = v60;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v50 = v11;
      char v12 = v61;
      v61 = 0;
      *(void *)&long long v62 = 0;
      v51 = v12;
      long long v54 = v64;
      char v55 = 1;
LABEL_53:
      if (v63) {
        WebCore::PasteboardImage::~PasteboardImage((WebCore::PasteboardImage *)&v56, v6);
      }
      if (v10)
      {
LABEL_85:
        uint64_t v34 = *(void *)a3;
        uint64_t v35 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v36 = *((void *)a3 + 3);
        if (v36 && v35) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 16))(v36, v34);
        }
      }
      else
      {
        WebKit::WebPasteboardProxy::writeImageToPasteboard(this, a2, (uint64_t)&v47, (uint64_t *)&v53, v54, SBYTE8(v54));
        if (v55)
        {
          long long v27 = v53;
          v53 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, v26);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
          WebCore::PasteboardImage::~PasteboardImage((WebCore::PasteboardImage *)&v47, v26);
        }
      }
      return;
    case 0x9FE:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)&v47, a3);
      if (v48[24]) {
        WebKit::WebPasteboardProxy::writeStringToPasteboard(this, a2, (uint64_t)&v47, (uint64_t)&v47 + 8, (uint64_t *)v48, *(uint64_t *)&v48[8], v48[16]);
      }
      std::__optional_destruct_base<WebCore::PlatformTextTrackData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v13);
      return;
    case 0x9FF:
      IPC::Decoder::decode<std::tuple<WebCore::PasteboardURL,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)&v47, a3);
      if (BYTE8(v50)) {
        WebKit::WebPasteboardProxy::writeURLToPasteboard(this, a2, (uint64_t)&v47, (uint64_t *)&v49, *((uint64_t *)&v49 + 1), v50);
      }
      std::__optional_destruct_base<std::tuple<WebCore::PasteboardURL,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v14);
      return;
    case 0xA00:
      IPC::ArgumentCoder<WebCore::PasteboardWebContent,void>::decode(a3, (uint64_t)&v56);
      if (!(_BYTE)v61)
      {
        uint64_t v37 = *(void *)a3;
        uint64_t v38 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v39 = *((void *)a3 + 3);
        BOOL v40 = !v39 || v38 == 0;
        if (v40 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 16))(v39, v37), !(_BYTE)v61))
        {
          int v20 = 0;
          LOBYTE(v47) = 0;
          LOBYTE(v53) = 0;
LABEL_94:
          uint64_t v41 = *(void *)a3;
          uint64_t v42 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v43 = *((void *)a3 + 3);
          if (v43 && v42) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 16))(v43, v41);
          }
LABEL_68:
          if (v20)
          {
            WebKit::WebPasteboardProxy::writeWebContentToPasteboard(this, a2, (uint64_t)&v47, (uint64_t *)&v51, v52, SBYTE8(v52));
            if ((_BYTE)v53)
            {
              uint64_t v29 = v51;
              v51 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2) {
                  WTF::StringImpl::destroy(v29, v28);
                }
                else {
                  *(_DWORD *)v29 -= 2;
                }
              }
              WebCore::PasteboardWebContent::~PasteboardWebContent((WebCore::PasteboardWebContent *)&v47, v28);
            }
          }
          return;
        }
      }
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v66);
      if (!v67)
      {
        int v20 = 0;
        LOBYTE(v47) = 0;
        LOBYTE(v53) = 0;
        goto LABEL_64;
      }
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a3, &v64);
      if (v65)
      {
        if (!(_BYTE)v61 || !v67)
        {
LABEL_76:
          __break(1u);
LABEL_77:
          int v9 = 0;
          LOBYTE(v47) = 0;
          v48[24] = 0;
LABEL_40:
          int v7 = 1;
LABEL_41:
          if (v65) {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v6);
          }
          if (v7)
          {
LABEL_98:
            uint64_t v44 = *(void *)a3;
            uint64_t v45 = *((void *)a3 + 1);
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v46 = *((void *)a3 + 3);
            if (v46 && v45) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v46 + 16))(v46, v44);
            }
          }
          if (v9)
          {
            WebKit::WebPasteboardProxy::updateSupportedTypeIdentifiers((uint64_t)this, (uint64_t)&v47, (uint64_t)v48);
            if (v48[24])
            {
              uint64_t v25 = *(WTF::StringImpl **)v48;
              *(void *)uint64_t v48 = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 2) {
                  WTF::StringImpl::destroy(v25, v24);
                }
                else {
                  *(_DWORD *)v25 -= 2;
                }
              }
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v24);
            }
          }
          return;
        }
        int v15 = 0;
        *(void *)&long long v47 = v56;
        BYTE8(v47) = BYTE8(v56);
        *(void *)&long long v50 = v60;
        v51 = v66;
        *(void *)&long long v56 = 0;
        long long v16 = v57;
        long long v17 = v58;
        long long v57 = 0u;
        long long v58 = 0u;
        *(_OWORD *)uint64_t v48 = v16;
        *(_OWORD *)&v48[16] = v17;
        long long v18 = v59;
        long long v59 = 0u;
        long long v49 = v18;
        uint64_t v19 = *((void *)&v60 + 1);
        long long v60 = 0uLL;
        *((void *)&v50 + 1) = v19;
        long long v52 = v64;
        int v20 = 1;
        LOBYTE(v53) = 1;
LABEL_65:
        if ((_BYTE)v61) {
          WebCore::PasteboardWebContent::~PasteboardWebContent((WebCore::PasteboardWebContent *)&v56, v6);
        }
        if (!v15) {
          goto LABEL_68;
        }
        goto LABEL_94;
      }
      LOBYTE(v47) = 0;
      LOBYTE(v53) = 0;
      if (!v67) {
        goto LABEL_63;
      }
      IntPoint v23 = v66;
      v66 = 0;
      if (!v23) {
        goto LABEL_63;
      }
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::destroy(v23, v6);
LABEL_63:
        int v20 = 0;
      }
      else
      {
        int v20 = 0;
        *(_DWORD *)v23 -= 2;
      }
LABEL_64:
      int v15 = 1;
      goto LABEL_65;
    default:
      return;
  }
}

uint64_t WebKit::WebPasteboardProxy::didReceiveSyncMessage(WebKit::WebPasteboardProxy *a1, atomic_uchar *volatile *a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v5 = a3;
  switch(*(_WORD *)(a3 + 50))
  {
    case 0xED1:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)v317, (IPC::Decoder *)a3);
      unint64_t v5 = v318[24] != 0;
      if (!v318[24]) {
        goto LABEL_136;
      }
      uint64_t v9 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      int v10 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)int v10 = &unk_1EEA03A00;
      *((void *)v10 + 1) = v326;
      uint64_t v11 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v10 + 2) = v11;
      v315[0] = v10;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      unint64_t v14 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v12);
        WTF::fastFree(v232, v233);
      }
      uint64_t v15 = v318[24];
      if (!v318[24]) {
        goto LABEL_354;
      }
      WebKit::WebPasteboardProxy::addPasteboardTypes(a1, (IPC::Connection *)a2, (uint64_t *)v317, (uint64_t *)&v317[1], *(uint64_t *)&v318[8], v318[16], (uint64_t *)v315);
      goto LABEL_134;
    case 0xED2:
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a3, (uint64_t)v315);
      if (!LOBYTE(v315[1])) {
        goto LABEL_393;
      }
      unint64_t v93 = (WTF::StringImpl *)IPC::Decoder::decode<long long>((IPC::Decoder *)v5);
      if ((_BYTE)v92)
      {
        IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v5, &v326);
        if (v327)
        {
          uint64_t v15 = LOBYTE(v315[1]);
          if (!LOBYTE(v315[1])) {
            goto LABEL_354;
          }
          v94 = v315[0];
          v315[0] = 0;
          v317[0] = v94;
          v317[1] = v93;
          *(_OWORD *)v318 = v326;
          int v95 = 1;
        }
        else
        {
          int v95 = 0;
          LOBYTE(v317[0]) = 0;
        }
        v318[16] = v95;
      }
      else
      {
        int v95 = 0;
        LOBYTE(v317[0]) = 0;
        v318[16] = 0;
      }
      if (LOBYTE(v315[1]))
      {
        v190 = v315[0];
        v315[0] = 0;
        if (v190)
        {
          if (*(_DWORD *)v190 == 2) {
            WTF::StringImpl::destroy(v190, v92);
          }
          else {
            *(_DWORD *)v190 -= 2;
          }
        }
      }
      if (!v95) {
        goto LABEL_393;
      }
      uint64_t v191 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v191;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      v192 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v192 = &unk_1EEA03780;
      *((void *)v192 + 1) = v326;
      uint64_t v193 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v192 + 2) = v193;
      v315[0] = v192;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      uint64_t v195 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v195)
      {
        IPC::Encoder::~Encoder(v195, v194);
        WTF::fastFree(v252, v253);
      }
      WebKit::WebPasteboardProxy::allPasteboardItemInfo(a1, (IPC::Connection *)a2, (uint64_t *)v317, (uint64_t)v93, *(uint64_t *)v318, v318[8], (uint64_t *)v315);
      v196 = v315[0];
      v315[0] = 0;
      if (v196) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v196 + 8))(v196);
      }
      if (!v318[16]) {
        return 1;
      }
      goto LABEL_302;
    case 0xED3:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)v317, (IPC::Decoder *)a3);
      unint64_t v5 = v318[16] != 0;
      if (!v318[16]) {
        goto LABEL_192;
      }
      uint64_t v73 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v73;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      uint64_t v74 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v74 = &unk_1EEA03870;
      *((void *)v74 + 1) = v326;
      uint64_t v75 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v74 + 2) = v75;
      v315[0] = v74;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      v77 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v77)
      {
        IPC::Encoder::~Encoder(v77, v76);
        WTF::fastFree(v226, v227);
      }
      uint64_t v15 = v318[16];
      if (!v318[16]) {
        goto LABEL_354;
      }
      WebKit::WebPasteboardProxy::containsStringSafeForDOMToReadForType(a1, (IPC::Connection *)a2, (uint64_t)v317, (WTF::String *)&v317[1], *(uint64_t *)v318, v318[8], (uint64_t *)v315);
      long long v57 = v315[0];
      v315[0] = 0;
      if (v57) {
        goto LABEL_191;
      }
      goto LABEL_192;
    case 0xED4:
      IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)v317, (IPC::Decoder *)a3);
      unint64_t v5 = v318[8] != 0;
      if (!v318[8]) {
        return v5;
      }
      uint64_t v82 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v82;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      v83 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v83 = &unk_1EEA03AF0;
      *((void *)v83 + 1) = v326;
      uint64_t v84 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v83 + 2) = v84;
      v315[0] = v83;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      v86 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v86)
      {
        IPC::Encoder::~Encoder(v86, v85);
        WTF::fastFree(v228, v229);
      }
      WebKit::WebPasteboardProxy::containsURLStringSuitableForLoading(a1, (IPC::Connection *)a2, (uint64_t *)v317, (uint64_t)v317[1], v318[0], (uint64_t *)v315);
      v51 = v315[0];
      v315[0] = 0;
      if (v51) {
        goto LABEL_166;
      }
      goto LABEL_167;
    case 0xED5:
      IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)v317, (IPC::Decoder *)a3);
      unint64_t v5 = v318[8] != 0;
      if (!v318[8]) {
        return v5;
      }
      uint64_t v40 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v40;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      uint64_t v41 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v41 = &unk_1EEA03898;
      *((void *)v41 + 1) = v326;
      uint64_t v42 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v41 + 2) = v42;
      v315[0] = v41;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      uint64_t v44 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v44)
      {
        IPC::Encoder::~Encoder(v44, v43);
        WTF::fastFree(v218, v219);
      }
      WebKit::WebPasteboardProxy::getNumberOfFiles(a1, (IPC::Connection *)a2, (uint64_t *)v317, (uint64_t)v317[1], v318[0], (uint64_t *)v315);
      goto LABEL_165;
    case 0xED6:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)v317, (IPC::Decoder *)a3);
      unint64_t v5 = v318[16] != 0;
      if (!v318[16]) {
        goto LABEL_192;
      }
      uint64_t v115 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v115;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      uint64_t v116 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v116 = &unk_1EEA03960;
      *((void *)v116 + 1) = v326;
      uint64_t v117 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v116 + 2) = v117;
      v315[0] = v116;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      v119 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v119)
      {
        IPC::Encoder::~Encoder(v119, v118);
        WTF::fastFree(v236, v237);
      }
      uint64_t v15 = v318[16];
      if (!v318[16]) {
        goto LABEL_354;
      }
      WebKit::WebPasteboardProxy::getPasteboardBufferForType(a1, (IPC::Connection *)a2, v317, (uint64_t)&v317[1], *(uint64_t *)v318, v318[8], (uint64_t *)v315);
      long long v57 = v315[0];
      v315[0] = 0;
      if (v57) {
        goto LABEL_191;
      }
      goto LABEL_192;
    case 0xED7:
      IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)v317, (IPC::Decoder *)a3);
      unint64_t v5 = v318[8] != 0;
      if (!v318[8]) {
        return v5;
      }
      uint64_t v131 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v131;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      v132 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v132 = &unk_1EEA03988;
      *((void *)v132 + 1) = v326;
      uint64_t v133 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v132 + 2) = v133;
      v315[0] = v132;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      v135 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v135)
      {
        IPC::Encoder::~Encoder(v135, v134);
        WTF::fastFree(v242, v243);
      }
      WebKit::WebPasteboardProxy::getPasteboardChangeCount(a1, (IPC::Connection *)a2, (uint64_t *)v317, (uint64_t)v317[1], v318[0], (uint64_t *)v315);
      v51 = v315[0];
      v315[0] = 0;
      if (v51) {
        goto LABEL_166;
      }
      goto LABEL_167;
    case 0xED8:
      IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)v317, (IPC::Decoder *)a3);
      unint64_t v5 = v318[8] != 0;
      if (!v318[8]) {
        return v5;
      }
      uint64_t v87 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v87;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      v88 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v88 = &unk_1EEA039B0;
      *((void *)v88 + 1) = v326;
      uint64_t v89 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v88 + 2) = v89;
      v315[0] = v88;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      char v91 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v91)
      {
        IPC::Encoder::~Encoder(v91, v90);
        WTF::fastFree(v230, v231);
      }
      WebKit::WebPasteboardProxy::getPasteboardColor(a1, (IPC::Connection *)a2, v317, (uint64_t)v317[1], v318[0], (uint64_t *)v315);
      v51 = v315[0];
      v315[0] = 0;
      if (v51) {
        goto LABEL_166;
      }
      goto LABEL_167;
    case 0xED9:
      IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)v317, (IPC::Decoder *)a3);
      unint64_t v5 = v318[8] != 0;
      if (!v318[8]) {
        return v5;
      }
      uint64_t v145 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v145;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      uint64_t v146 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v146 = &unk_1EEA037D0;
      *((void *)v146 + 1) = v326;
      uint64_t v147 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v146 + 2) = v147;
      v315[0] = v146;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      uint64_t v149 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v149)
      {
        IPC::Encoder::~Encoder(v149, v148);
        WTF::fastFree(v246, v247);
      }
      WebKit::WebPasteboardProxy::getPasteboardItemsCount(a1, (IPC::Connection *)a2, (uint64_t *)v317, (uint64_t)v317[1], v318[0], (uint64_t *)v315);
LABEL_165:
      v51 = v315[0];
      v315[0] = 0;
      if (v51) {
        goto LABEL_166;
      }
      goto LABEL_167;
    case 0xEDA:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)v317, (IPC::Decoder *)a3);
      unint64_t v5 = v318[16] != 0;
      if (!v318[16]) {
        goto LABEL_192;
      }
      uint64_t v52 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v52;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      v53 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v53 = &unk_1EEA038E8;
      *((void *)v53 + 1) = v326;
      uint64_t v54 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v53 + 2) = v54;
      v315[0] = v53;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      long long v56 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v56)
      {
        IPC::Encoder::~Encoder(v56, v55);
        WTF::fastFree(v222, v223);
      }
      uint64_t v15 = v318[16];
      if (!v318[16]) {
        goto LABEL_354;
      }
      WebKit::WebPasteboardProxy::getPasteboardPathnamesForType(a1, (IPC::Connection *)a2, v317, (uint64_t)&v317[1], *(uint64_t *)v318, v318[8], (uint64_t *)v315);
      long long v57 = v315[0];
      v315[0] = 0;
      if (v57) {
        goto LABEL_191;
      }
      goto LABEL_192;
    case 0xEDB:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)v317, (IPC::Decoder *)a3);
      unint64_t v5 = v318[16] != 0;
      if (!v318[16]) {
        goto LABEL_192;
      }
      uint64_t v140 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v140;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      v141 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v141 = &unk_1EEA03910;
      *((void *)v141 + 1) = v326;
      uint64_t v142 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v141 + 2) = v142;
      v315[0] = v141;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      uint64_t v144 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v144)
      {
        IPC::Encoder::~Encoder(v144, v143);
        WTF::fastFree(v244, v245);
      }
      uint64_t v15 = v318[16];
      if (!v318[16]) {
        goto LABEL_354;
      }
      WebKit::WebPasteboardProxy::getPasteboardStringForType(a1, (IPC::Connection *)a2, v317, (uint64_t)&v317[1], *(uint64_t *)v318, v318[8], (uint64_t *)v315);
      long long v57 = v315[0];
      v315[0] = 0;
      if (v57) {
        goto LABEL_191;
      }
      goto LABEL_192;
    case 0xEDC:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)v317, (IPC::Decoder *)a3);
      unint64_t v5 = v318[16] != 0;
      if (!v318[16]) {
        goto LABEL_192;
      }
      uint64_t v35 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v35;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      uint64_t v36 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v36 = &unk_1EEA03938;
      *((void *)v36 + 1) = v326;
      uint64_t v37 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v36 + 2) = v37;
      v315[0] = v36;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      uint64_t v39 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v39)
      {
        IPC::Encoder::~Encoder(v39, v38);
        WTF::fastFree(v216, v217);
      }
      uint64_t v15 = v318[16];
      if (!v318[16]) {
        goto LABEL_354;
      }
      WebKit::WebPasteboardProxy::getPasteboardStringsForType(a1, (IPC::Connection *)a2, v317, (uint64_t)&v317[1], *(uint64_t *)v318, v318[8], (uint64_t *)v315);
      goto LABEL_190;
    case 0xEDD:
      IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)v317, (IPC::Decoder *)a3);
      unint64_t v5 = v318[8] != 0;
      if (!v318[8]) {
        return v5;
      }
      uint64_t v46 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v46;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      long long v47 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)long long v47 = &unk_1EEA038C0;
      *((void *)v47 + 1) = v326;
      uint64_t v48 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v47 + 2) = v48;
      v315[0] = v47;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      long long v50 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v50)
      {
        IPC::Encoder::~Encoder(v50, v49);
        WTF::fastFree(v220, v221);
      }
      WebKit::WebPasteboardProxy::getPasteboardTypes(a1, (IPC::Connection *)a2, v317, (uint64_t)v317[1], v318[0], (uint64_t *)v315);
      v51 = v315[0];
      v315[0] = 0;
      if (v51) {
        goto LABEL_166;
      }
      goto LABEL_167;
    case 0xEDE:
      IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)v317, (IPC::Decoder *)a3);
      unint64_t v5 = v318[8] != 0;
      if (!v318[8]) {
        return v5;
      }
      uint64_t v126 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v126;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      uint64_t v127 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v127 = &unk_1EEA039D8;
      *((void *)v127 + 1) = v326;
      uint64_t v128 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v127 + 2) = v128;
      v315[0] = v127;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      v130 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v130)
      {
        IPC::Encoder::~Encoder(v130, v129);
        WTF::fastFree(v240, v241);
      }
      WebKit::WebPasteboardProxy::getPasteboardURL(a1, (IPC::Connection *)a2, v317, (uint64_t)v317[1], v318[0], (WTF::RefCountedBase *)v315);
      v51 = v315[0];
      v315[0] = 0;
      if (v51) {
        goto LABEL_166;
      }
      goto LABEL_167;
    case 0xEDF:
      unint64_t v13 = *(void *)(a3 + 8);
      uint64_t v15 = *(void *)a3;
      unint64_t v26 = ((*(void *)(a3 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v13 < v26 || v13 - v26 <= 7) {
        goto LABEL_355;
      }
      uint64_t v28 = (WTF::StringImpl **)(v15 + v26);
      *(void *)(a3 + 16) = v28 + 1;
      if (!v15) {
        goto LABEL_422;
      }
      uint64_t v29 = *v28;
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a3, (uint64_t)v315);
      if (!LOBYTE(v315[1])) {
        goto LABEL_393;
      }
      unint64_t v31 = IPC::Decoder::decode<long long>((IPC::Decoder *)v5);
      if ((_BYTE)v30)
      {
        IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v5, &v326);
        if (v327)
        {
          uint64_t v15 = LOBYTE(v315[1]);
          if (!LOBYTE(v315[1])) {
            goto LABEL_354;
          }
          uint64_t v32 = v315[0];
          v315[0] = 0;
          v317[0] = v29;
          v317[1] = v32;
          *(void *)v318 = v31;
          *(_OWORD *)&v318[8] = v326;
          int v33 = 1;
        }
        else
        {
          int v33 = 0;
          LOBYTE(v317[0]) = 0;
        }
        v318[24] = v33;
      }
      else
      {
        int v33 = 0;
        LOBYTE(v317[0]) = 0;
        v318[24] = 0;
      }
      if (LOBYTE(v315[1]))
      {
        v197 = v315[0];
        v315[0] = 0;
        if (v197)
        {
          if (*(_DWORD *)v197 == 2) {
            WTF::StringImpl::destroy(v197, v30);
          }
          else {
            *(_DWORD *)v197 -= 2;
          }
        }
      }
      if (!v33) {
        goto LABEL_393;
      }
      uint64_t v198 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v198;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      v199 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v199 = &unk_1EEA037A8;
      *((void *)v199 + 1) = v326;
      uint64_t v200 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v199 + 2) = v200;
      v315[0] = v199;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      v202 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v202)
      {
        IPC::Encoder::~Encoder(v202, v201);
        WTF::fastFree(v256, v257);
      }
      WebKit::WebPasteboardProxy::informationForItemAtIndex(a1, (IPC::Connection *)a2, (uint64_t)v317[0], &v317[1], v31, *(uint64_t *)&v318[8], v318[16], (uint64_t *)v315);
      v203 = v315[0];
      v315[0] = 0;
      if (v203) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v203 + 8))(v203);
      }
      if (v318[24]) {
        goto LABEL_273;
      }
      return 1;
    case 0xEE0:
      IPC::Decoder::decode<std::optional<unsigned long>>((void *)a3, v315);
      if (!v316 || (IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v5, (uint64_t)&v322), !v323))
      {
        int v81 = 0;
        LOBYTE(v317[0]) = 0;
        LOBYTE(v319[0]) = 0;
        goto LABEL_194;
      }
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v5, (uint64_t)&v324);
      if (!v325)
      {
        int v81 = 0;
        LOBYTE(v317[0]) = 0;
        LOBYTE(v319[0]) = 0;
        goto LABEL_335;
      }
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v5, &v326);
      if (v327)
      {
        uint64_t v15 = v316;
        if (!v316) {
          goto LABEL_354;
        }
        uint64_t v15 = v323;
        if (!v323) {
          goto LABEL_354;
        }
        uint64_t v15 = v325;
        if (!v325) {
          goto LABEL_354;
        }
        int v79 = 0;
        *(_OWORD *)v317 = *(_OWORD *)v315;
        v80 = v322;
        v322 = 0;
        *(void *)v318 = v80;
        *(void *)&v318[8] = v324;
        *(_OWORD *)&v318[16] = v326;
        int v81 = 1;
        LOBYTE(v319[0]) = 1;
LABEL_336:
        if (v323)
        {
          v272 = v322;
          v322 = 0;
          if (v272)
          {
            if (*(_DWORD *)v272 == 2) {
              WTF::StringImpl::destroy(v272, v78);
            }
            else {
              *(_DWORD *)v272 -= 2;
            }
          }
        }
        if (!v79)
        {
LABEL_342:
          unint64_t v5 = v81 != 0;
          if (!v81) {
            return v5;
          }
          uint64_t v273 = *a4;
          *a4 = 0;
          *(void *)&long long v326 = v273;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
          v274 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(void *)v274 = &unk_1EEA03848;
          *((void *)v274 + 1) = v326;
          uint64_t v275 = *((void *)&v326 + 1);
          long long v326 = 0uLL;
          *((void *)v274 + 2) = v275;
          v315[0] = v274;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
          uint64_t v277 = (IPC::Encoder *)v326;
          *(void *)&long long v326 = 0;
          if (v277)
          {
            IPC::Encoder::~Encoder(v277, v276);
            WTF::fastFree(v280, v281);
          }
          WebKit::WebPasteboardProxy::readBufferFromPasteboard(a1, (IPC::Connection *)a2, (uint64_t)v317[0], (uint64_t)v317[1], (uint64_t)v318, (WTF::StringImpl **)&v318[8], *(uint64_t *)&v318[16], v318[24], (uint64_t *)v315);
          v278 = v315[0];
          v315[0] = 0;
          if (v278) {
            (*(void (**)(WTF::StringImpl *))(*(void *)v278 + 8))(v278);
          }
          if (!LOBYTE(v319[0])) {
            return v5;
          }
          v279 = *(WTF::StringImpl **)&v318[8];
          *(void *)&v318[8] = 0;
          if (v279)
          {
            if (*(_DWORD *)v279 == 2) {
              WTF::StringImpl::destroy(v279, v45);
            }
            else {
              *(_DWORD *)v279 -= 2;
            }
          }
          char v150 = *(WTF::StringImpl **)v318;
          *(void *)v318 = 0;
          if (!v150) {
            return v5;
          }
LABEL_169:
          if (*(_DWORD *)v150 == 2) {
            WTF::StringImpl::destroy(v150, v45);
          }
          else {
            *(_DWORD *)v150 -= 2;
          }
          return v5;
        }
LABEL_194:
        uint64_t v166 = *(void **)v5;
        uint64_t v167 = *(void *)(v5 + 8);
        *(void *)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        uint64_t v168 = *(void *)(v5 + 24);
        if (v168 && v167) {
          (*(void (**)(uint64_t, void *))(*(void *)v168 + 16))(v168, v166);
        }
        goto LABEL_342;
      }
      LOBYTE(v317[0]) = 0;
      LOBYTE(v319[0]) = 0;
      if (!v325) {
        goto LABEL_334;
      }
      v205 = v324;
      v324 = 0;
      if (!v205) {
        goto LABEL_334;
      }
      if (*(_DWORD *)v205 == 2)
      {
        WTF::StringImpl::destroy(v205, v78);
LABEL_334:
        int v81 = 0;
      }
      else
      {
        int v81 = 0;
        *(_DWORD *)v205 -= 2;
      }
LABEL_335:
      int v79 = 1;
      goto LABEL_336;
    case 0xEE1:
      unint64_t v16 = *(void *)(a3 + 8);
      uint64_t v17 = *(void *)a3;
      unint64_t v18 = ((*(void *)(a3 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v16 < v18 || v16 - v18 <= 7)
      {
        unint64_t v289 = 0;
        uint64_t v290 = 0;
        *(void *)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        uint64_t v291 = *(void *)(v5 + 24);
        if (v291)
        {
          if (v16)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v291 + 16))(v291, v17, v16);
            uint64_t v290 = *(void **)v5;
            unint64_t v289 = *(void *)(v5 + 8);
          }
          else
          {
            unint64_t v289 = 0;
            uint64_t v290 = 0;
          }
        }
        goto LABEL_366;
      }
      int v20 = (WTF::StringImpl **)(v17 + v18);
      *(void *)(a3 + 16) = v20 + 1;
      if (!v17)
      {
        unint64_t v289 = v16;
        uint64_t v290 = 0;
LABEL_366:
        *(void *)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        uint64_t v292 = *(void *)(v5 + 24);
        if (v292 && v289) {
          (*(void (**)(uint64_t, void *))(*(void *)v292 + 16))(v292, v290);
        }
        goto LABEL_367;
      }
      char v21 = *v20;
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a3, (uint64_t)&v324);
      if (!v325)
      {
LABEL_367:
        int v25 = 0;
        LOBYTE(v317[0]) = 0;
        v318[24] = 0;
LABEL_368:
        v293 = *(void **)v5;
        uint64_t v294 = *(void *)(v5 + 8);
        *(void *)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        uint64_t v295 = *(void *)(v5 + 24);
        if (v295 && v294) {
          (*(void (**)(uint64_t, void *))(*(void *)v295 + 16))(v295, v293);
        }
        goto LABEL_316;
      }
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v5, (uint64_t)v315);
      if (!LOBYTE(v315[1]))
      {
        int v25 = 0;
        LOBYTE(v317[0]) = 0;
        v318[24] = 0;
        goto LABEL_309;
      }
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v5, &v326);
      if (!v327)
      {
        LOBYTE(v317[0]) = 0;
        v318[24] = 0;
        if (LOBYTE(v315[1]))
        {
          uint64_t v180 = v315[0];
          v315[0] = 0;
          if (v180)
          {
            if (*(_DWORD *)v180 != 2)
            {
              int v25 = 0;
              *(_DWORD *)v180 -= 2;
LABEL_309:
              int v23 = 1;
              goto LABEL_310;
            }
            WTF::StringImpl::destroy(v180, v22);
          }
        }
        int v25 = 0;
        goto LABEL_309;
      }
      uint64_t v15 = v325;
      if (!v325) {
        goto LABEL_354;
      }
      uint64_t v15 = LOBYTE(v315[1]);
      if (!LOBYTE(v315[1])) {
        goto LABEL_354;
      }
      int v23 = 0;
      uint64_t v24 = v324;
      v324 = 0;
      v317[0] = v21;
      v317[1] = v24;
      *(WTF::StringImpl **)v318 = v315[0];
      *(_OWORD *)&v318[8] = v326;
      int v25 = 1;
      v318[24] = 1;
LABEL_310:
      if (v325)
      {
        v260 = v324;
        v324 = 0;
        if (v260)
        {
          if (*(_DWORD *)v260 == 2) {
            WTF::StringImpl::destroy(v260, v22);
          }
          else {
            *(_DWORD *)v260 -= 2;
          }
        }
      }
      if (v23) {
        goto LABEL_368;
      }
LABEL_316:
      unint64_t v5 = v25 != 0;
      if (v25)
      {
        uint64_t v261 = *a4;
        *a4 = 0;
        *(void *)&long long v326 = v261;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
        v262 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)v262 = &unk_1EEA037F8;
        *((void *)v262 + 1) = v326;
        uint64_t v263 = *((void *)&v326 + 1);
        long long v326 = 0uLL;
        *((void *)v262 + 2) = v263;
        v315[0] = v262;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
        v265 = (IPC::Encoder *)v326;
        *(void *)&long long v326 = 0;
        if (v265)
        {
          IPC::Encoder::~Encoder(v265, v264);
          WTF::fastFree(v268, v269);
        }
        WebKit::WebPasteboardProxy::readStringFromPasteboard(a1, (IPC::Connection *)a2, (uint64_t)v317[0], (uint64_t)&v317[1], (WTF::StringImpl **)v318, *(uint64_t *)&v318[8], v318[16], (uint64_t *)v315);
        v266 = v315[0];
        v315[0] = 0;
        if (v266) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v266 + 8))(v266);
        }
        if (v318[24])
        {
          v267 = *(WTF::StringImpl **)v318;
          *(void *)v318 = 0;
          if (v267)
          {
            if (*(_DWORD *)v267 == 2) {
              WTF::StringImpl::destroy(v267, v45);
            }
            else {
              *(_DWORD *)v267 -= 2;
            }
          }
          char v150 = v317[1];
          v317[1] = 0;
          if (v150) {
            goto LABEL_169;
          }
        }
      }
      return v5;
    case 0xEE2:
      unint64_t v13 = *(void *)(a3 + 8);
      uint64_t v15 = *(void *)a3;
      unint64_t v96 = ((*(void *)(a3 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v13 < v96 || v13 - v96 <= 7) {
        goto LABEL_355;
      }
      unint64_t v98 = (WTF::StringImpl **)(v15 + v96);
      *(void *)(a3 + 16) = v98 + 1;
      if (!v15)
      {
LABEL_422:
        unint64_t v284 = v13;
        v285 = (void *)v15;
        goto LABEL_356;
      }
      unint64_t v99 = *v98;
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a3, (uint64_t)v315);
      if (!LOBYTE(v315[1])) {
        goto LABEL_393;
      }
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v5, &v326);
      if (!v327)
      {
        if (LOBYTE(v315[1]))
        {
          v179 = v315[0];
          v315[0] = 0;
          if (v179)
          {
            if (*(_DWORD *)v179 == 2) {
              WTF::StringImpl::destroy(v179, v100);
            }
            else {
              *(_DWORD *)v179 -= 2;
            }
          }
        }
        goto LABEL_393;
      }
      uint64_t v15 = LOBYTE(v315[1]);
      if (!LOBYTE(v315[1])) {
        goto LABEL_354;
      }
      v317[0] = v99;
      v317[1] = v315[0];
      *(_OWORD *)v318 = v326;
      v318[16] = 1;
      uint64_t v101 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v101;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      v102 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v102 = &unk_1EEA03820;
      *((void *)v102 + 1) = v326;
      uint64_t v103 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v102 + 2) = v103;
      v315[0] = v102;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      v105 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v105)
      {
        IPC::Encoder::~Encoder(v105, v104);
        WTF::fastFree(v270, v271);
      }
      WebKit::WebPasteboardProxy::readURLFromPasteboard(a1, (IPC::Connection *)a2, (uint64_t)v99, &v317[1], *(uint64_t *)v318, v318[8], (uint64_t *)v315);
      BOOL v107 = v315[0];
      v315[0] = 0;
      if (v107) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v107 + 8))(v107);
      }
      if (v318[16])
      {
LABEL_273:
        uint64_t v204 = v317[1];
        v317[1] = 0;
        if (v204) {
          goto LABEL_303;
        }
      }
      return 1;
    case 0xEE3:
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a3, (uint64_t)&v322);
      if (!v323) {
        goto LABEL_393;
      }
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v5, (uint64_t)&v324);
      if (v325)
      {
        IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>((IPC::Decoder *)v5, v315);
        if (LOBYTE(v315[1]))
        {
          IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v5, &v326);
          if (v327)
          {
            uint64_t v15 = v323;
            if (!v323) {
              goto LABEL_354;
            }
            uint64_t v15 = v325;
            if (!v325) {
              goto LABEL_354;
            }
            uint64_t v15 = LOBYTE(v315[1]);
            if (!LOBYTE(v315[1])) {
              goto LABEL_354;
            }
            unsigned int v137 = v322;
            v322 = 0;
            uint64_t v138 = v324;
            v324 = 0;
            v317[0] = v137;
            v317[1] = v138;
            *(WTF::StringImpl **)v318 = v315[0];
            *(_OWORD *)&v318[8] = v326;
            int v139 = 1;
            v318[24] = 1;
          }
          else
          {
            LOBYTE(v317[0]) = 0;
            v318[24] = 0;
            if (LOBYTE(v315[1]))
            {
              v181 = (unsigned int *)v315[0];
              v315[0] = 0;
              if (v181) {
                WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v181, v136);
              }
            }
            int v139 = 0;
          }
        }
        else
        {
          int v139 = 0;
          LOBYTE(v317[0]) = 0;
          v318[24] = 0;
        }
        if (v325)
        {
          uint64_t v206 = v324;
          v324 = 0;
          if (v206)
          {
            if (*(_DWORD *)v206 == 2) {
              WTF::StringImpl::destroy(v206, (WTF::StringImpl *)v136);
            }
            else {
              *(_DWORD *)v206 -= 2;
            }
          }
        }
      }
      else
      {
        int v139 = 0;
        LOBYTE(v317[0]) = 0;
        v318[24] = 0;
      }
      if (v323)
      {
        v207 = v322;
        v322 = 0;
        if (v207)
        {
          if (*(_DWORD *)v207 == 2) {
            WTF::StringImpl::destroy(v207, (WTF::StringImpl *)v136);
          }
          else {
            *(_DWORD *)v207 -= 2;
          }
        }
      }
      if (!v139) {
        goto LABEL_393;
      }
      uint64_t v208 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v208;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      v209 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v209 = &unk_1EEA03AC8;
      *((void *)v209 + 1) = v326;
      uint64_t v210 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v209 + 2) = v210;
      v315[0] = v209;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      v212 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v212)
      {
        IPC::Encoder::~Encoder(v212, v211);
        WTF::fastFree(v258, v259);
      }
      WebKit::WebPasteboardProxy::setPasteboardBufferForType(a1, (IPC::Connection *)a2, (uint64_t *)v317, (uint64_t)&v317[1], (uint64_t)v318, *(uint64_t *)&v318[8], v318[16], (uint64_t *)v315);
      uint64_t v213 = v315[0];
      v315[0] = 0;
      if (v213) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v213 + 8))(v213);
      }
      if (!v318[24]) {
        return 1;
      }
      v214 = *(unsigned int **)v318;
      *(void *)v318 = 0;
      if (v214) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v214, v106);
      }
      v215 = v317[1];
      v317[1] = 0;
      if (v215)
      {
        if (*(_DWORD *)v215 == 2) {
          WTF::StringImpl::destroy(v215, (WTF::StringImpl *)v106);
        }
        else {
          *(_DWORD *)v215 -= 2;
        }
      }
      goto LABEL_302;
    case 0xEE4:
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a3, (uint64_t)&v324);
      if (v325)
      {
        IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)v5, v315);
        if (LOBYTE(v315[1])
          || (char v158 = *(void **)v5,
              uint64_t v312 = *(void *)(v5 + 8),
              *(void *)unint64_t v5 = 0,
              *(void *)(v5 + 8) = 0,
              (uint64_t v313 = *(void *)(v5 + 24)) != 0)
          && v312
          && ((*(void (**)(uint64_t, void *))(*(void *)v313 + 16))(v313, v158), LOBYTE(v315[1])))
        {
          IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v5, &v326);
          char v159 = v327;
          if (v327)
          {
            uint64_t v15 = v325;
            if (!v325) {
              goto LABEL_354;
            }
            uint64_t v15 = LOBYTE(v315[1]);
            if (!LOBYTE(v315[1])) {
              goto LABEL_354;
            }
            v160 = v324;
            v324 = 0;
            v317[0] = v160;
            WebCore::Color::Color();
            *(_OWORD *)v318 = v326;
            char v159 = 1;
          }
          else
          {
            LOBYTE(v317[0]) = 0;
          }
          v318[16] = v159;
          if (LOBYTE(v315[1]))
          {
            if (((unint64_t)v315[0] & 0x8000000000000) != 0)
            {
              uint64_t v288 = (unsigned int *)((unint64_t)v315[0] & 0xFFFFFFFFFFFFLL);
              if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v315[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
              {
                atomic_store(1u, v288);
                WTF::fastFree((WTF *)v288, v158);
              }
            }
          }
        }
        else
        {
          LOBYTE(v317[0]) = 0;
          v318[16] = 0;
        }
        if (v325)
        {
          uint64_t v178 = v324;
          v324 = 0;
          if (v178)
          {
            if (*(_DWORD *)v178 == 2) {
              WTF::StringImpl::destroy(v178, (WTF::StringImpl *)v158);
            }
            else {
              *(_DWORD *)v178 -= 2;
            }
          }
        }
      }
      else
      {
        LOBYTE(v317[0]) = 0;
        v318[16] = 0;
      }
      if (!v318[16])
      {
        v309 = *(void **)v5;
        uint64_t v310 = *(void *)(v5 + 8);
        *(void *)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        uint64_t v311 = *(void *)(v5 + 24);
        if (!v311) {
          return 0;
        }
        if (!v310) {
          return 0;
        }
        (*(void (**)(uint64_t, void *))(*(void *)v311 + 16))(v311, v309);
        if (!v318[16]) {
          return 0;
        }
      }
      uint64_t v182 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v182;
      unint64_t v5 = (unint64_t)&v326 + 8;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      v183 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v183 = &unk_1EEA03A78;
      *((void *)v183 + 1) = v326;
      uint64_t v184 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v183 + 2) = v184;
      v315[0] = v183;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      unint64_t v186 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v186)
      {
        IPC::Encoder::~Encoder(v186, v185);
        WTF::fastFree(v254, v255);
      }
      uint64_t v15 = v318[16];
      if (!v318[16]) {
        goto LABEL_354;
      }
      WebKit::WebPasteboardProxy::setPasteboardColor(a1, (IPC::Connection *)a2, (uint64_t *)v317, (uint64_t)&v317[1], *(uint64_t *)v318, v318[8], (uint64_t *)v315);
      v187 = v315[0];
      v315[0] = 0;
      if (v187) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v187 + 8))(v187);
      }
      if (v318[16])
      {
        if (((unint64_t)v317[1] & 0x8000000000000) != 0)
        {
          v188 = (unsigned int *)((unint64_t)v317[1] & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v317[1] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v188);
            WTF::fastFree((WTF *)v188, v106);
          }
        }
LABEL_302:
        uint64_t v204 = v317[0];
        v317[0] = 0;
        if (v204)
        {
LABEL_303:
          if (*(_DWORD *)v204 == 2) {
            WTF::StringImpl::destroy(v204, (WTF::StringImpl *)v106);
          }
          else {
            *(_DWORD *)v204 -= 2;
          }
        }
      }
      return 1;
    case 0xEE5:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)v317, (IPC::Decoder *)a3);
      unint64_t v5 = v318[24] != 0;
      if (!v318[24]) {
        goto LABEL_122;
      }
      uint64_t v109 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v109;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      v110 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v110 = &unk_1EEA03AA0;
      *((void *)v110 + 1) = v326;
      uint64_t v111 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v110 + 2) = v111;
      v315[0] = v110;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      v113 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v113)
      {
        IPC::Encoder::~Encoder(v113, v112);
        WTF::fastFree(v234, v235);
      }
      uint64_t v15 = v318[24];
      if (!v318[24]) {
        goto LABEL_354;
      }
      WebKit::WebPasteboardProxy::setPasteboardStringForType(a1, (IPC::Connection *)a2, (uint64_t *)v317, (uint64_t)&v317[1], (uint64_t)v318, *(uint64_t *)&v318[8], v318[16], (uint64_t *)v315);
      uint64_t v114 = v315[0];
      v315[0] = 0;
      if (v114) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v114 + 8))(v114);
      }
LABEL_122:
      std::__optional_destruct_base<WebCore::PlatformTextTrackData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v317, v108);
      return v5;
    case 0xEE6:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)v317, (IPC::Decoder *)a3);
      unint64_t v5 = v318[24] != 0;
      if (!v318[24]) {
        goto LABEL_136;
      }
      uint64_t v120 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v120;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      v121 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v121 = &unk_1EEA03A28;
      *((void *)v121 + 1) = v326;
      uint64_t v122 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v121 + 2) = v122;
      v315[0] = v121;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      v124 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v124)
      {
        IPC::Encoder::~Encoder(v124, v123);
        WTF::fastFree(v238, v239);
      }
      uint64_t v15 = v318[24];
      if (!v318[24]) {
        goto LABEL_354;
      }
      WebKit::WebPasteboardProxy::setPasteboardTypes(a1, (IPC::Connection *)a2, (uint64_t *)v317, (uint64_t *)&v317[1], *(uint64_t *)&v318[8], v318[16], (uint64_t *)v315);
LABEL_134:
      uint64_t v125 = v315[0];
      v315[0] = 0;
      if (v125) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v125 + 8))(v125);
      }
LABEL_136:
      std::__optional_destruct_base<std::tuple<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v317, v8);
      return v5;
    case 0xEE7:
      IPC::Decoder::decode<std::tuple<WebCore::PasteboardURL,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)v317, (IPC::Decoder *)a3);
      unint64_t v5 = v321 != 0;
      if (!v321) {
        goto LABEL_178;
      }
      uint64_t v152 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v152;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      v153 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v153 = &unk_1EEA03A50;
      *((void *)v153 + 1) = v326;
      uint64_t v154 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v153 + 2) = v154;
      v315[0] = v153;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      v156 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v156)
      {
        IPC::Encoder::~Encoder(v156, v155);
        WTF::fastFree(v248, v249);
      }
      uint64_t v15 = v321;
      if (!v321) {
        goto LABEL_354;
      }
      WebKit::WebPasteboardProxy::setPasteboardURL(a1, (IPC::Connection *)a2, (uint64_t)v317, v319, v319[1], v320, (uint64_t *)v315);
      unsigned __int16 v157 = v315[0];
      v315[0] = 0;
      if (v157) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v157 + 8))(v157);
      }
LABEL_178:
      std::__optional_destruct_base<std::tuple<WebCore::PasteboardURL,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v317, v151);
      return v5;
    case 0xEE8:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)v317, (IPC::Decoder *)a3);
      unint64_t v5 = v318[16] != 0;
      if (!v318[16]) {
        goto LABEL_192;
      }
      uint64_t v161 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v161;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      v162 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v162 = &unk_1EEA03758;
      *((void *)v162 + 1) = v326;
      uint64_t v163 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v162 + 2) = v163;
      v315[0] = v162;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      v165 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v165)
      {
        IPC::Encoder::~Encoder(v165, v164);
        WTF::fastFree(v250, v251);
      }
      uint64_t v15 = v318[16];
      if (!v318[16]) {
        goto LABEL_354;
      }
      WebKit::WebPasteboardProxy::typesSafeForDOMToReadAndWrite(a1, (IPC::Connection *)a2, v317, &v317[1], *(uint64_t *)v318, v318[8], (uint64_t *)v315);
LABEL_190:
      long long v57 = v315[0];
      v315[0] = 0;
      if (v57) {
LABEL_191:
      }
        (*(void (**)(WTF::StringImpl *))(*(void *)v57 + 8))(v57);
LABEL_192:
      std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v317, v34);
      return v5;
    case 0xEE9:
      IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>((uint64_t)v317, (IPC::Decoder *)a3);
      unint64_t v5 = v318[8] != 0;
      if (!v318[8]) {
        return v5;
      }
      uint64_t v68 = *a4;
      *a4 = 0;
      *(void *)&long long v326 = v68;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
      v69 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v69 = &unk_1EEA03B18;
      *((void *)v69 + 1) = v326;
      uint64_t v70 = *((void *)&v326 + 1);
      long long v326 = 0uLL;
      *((void *)v69 + 2) = v70;
      v315[0] = v69;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
      int v72 = (IPC::Encoder *)v326;
      *(void *)&long long v326 = 0;
      if (v72)
      {
        IPC::Encoder::~Encoder(v72, v71);
        WTF::fastFree(v224, v225);
      }
      WebKit::WebPasteboardProxy::urlStringSuitableForLoading(a1, (IPC::Connection *)a2, v317, (uint64_t)v317[1], v318[0], (uint64_t *)v315);
      v51 = v315[0];
      v315[0] = 0;
      if (v51) {
LABEL_166:
      }
        (*(void (**)(WTF::StringImpl *))(*(void *)v51 + 8))(v51);
LABEL_167:
      if (v318[8])
      {
        char v150 = v317[0];
        v317[0] = 0;
        if (v150) {
          goto LABEL_169;
        }
      }
      return v5;
    case 0xEEA:
      unint64_t v58 = *(void *)(a3 + 8);
      uint64_t v59 = *(void *)a3;
      unint64_t v60 = ((*(void *)(a3 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v58 >= v60 && v58 - v60 > 7)
      {
        long long v62 = (unint64_t *)(v59 + v60);
        *(void *)(a3 + 16) = v62 + 1;
        if (v59)
        {
          unint64_t v63 = *v62;
          long long v326 = 0uLL;
          if (v63 < 0xAAAA)
          {
            if (v63)
            {
              DWORD2(v326) = 24 * (int)v63 / 0x18u;
              *(void *)&long long v326 = WTF::fastMalloc((WTF *)(24 * v63));
              do
              {
                IPC::Decoder::decode<WebCore::PasteboardCustomData>(v317, (IPC::Decoder *)v5);
                if (!v318[8]) {
                  goto LABEL_387;
                }
                int v65 = HIDWORD(v326);
                if (HIDWORD(v326) == DWORD2(v326))
                {
                  WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PasteboardCustomData>((uint64_t)&v326, (unint64_t)v317);
                }
                else
                {
                  WebCore::PasteboardCustomData::PasteboardCustomData();
                  HIDWORD(v326) = v65 + 1;
                }
                if (v318[8]) {
                  WebCore::PasteboardCustomData::~PasteboardCustomData((WebCore::PasteboardCustomData *)v317);
                }
                --v63;
              }
              while (v63);
              v66 = (WTF::StringImpl *)v326;
              LODWORD(v63) = DWORD2(v326);
              unsigned int v67 = HIDWORD(v326);
            }
            else
            {
              unsigned int v67 = 0;
              v66 = 0;
            }
            long long v326 = 0uLL;
            v315[0] = v66;
            v315[1] = (WTF::StringImpl *)__PAIR64__(v67, v63);
LABEL_200:
            unsigned __int8 v316 = 1;
            WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v326, (void *)a2);
            IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v5, (uint64_t)&v324);
            if (v325)
            {
              IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v5, &v326);
              if (v327)
              {
                uint64_t v15 = v325;
                if (v325)
                {
                  v315[0] = 0;
                  v315[1] = 0;
                  v317[0] = v66;
                  v317[1] = (WTF::StringImpl *)__PAIR64__(v67, v63);
                  *(void *)v318 = v324;
                  *(_OWORD *)&v318[8] = v326;
                  v318[24] = 1;
                  WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v315, v169);
                  uint64_t v170 = *a4;
                  *a4 = 0;
                  *(void *)&long long v326 = v170;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v326 + 1, a2);
                  v171 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
                  *(void *)v171 = &unk_1EEA03730;
                  *((void *)v171 + 1) = v326;
                  uint64_t v172 = *((void *)&v326 + 1);
                  long long v326 = 0uLL;
                  *((void *)v171 + 2) = v172;
                  v315[0] = v171;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v326 + 1);
                  v174 = (IPC::Encoder *)v326;
                  *(void *)&long long v326 = 0;
                  if (v174)
                  {
                    IPC::Encoder::~Encoder(v174, v173);
                    WTF::fastFree(v282, v283);
                  }
                  WebKit::WebPasteboardProxy::writeCustomData(a1, (IPC::Connection *)a2, (uint64_t)v317, (uint64_t *)v318, *(uint64_t *)&v318[8], v318[16], (uint64_t *)v315);
                  unsigned __int16 v176 = v315[0];
                  v315[0] = 0;
                  if (v176) {
                    (*(void (**)(WTF::StringImpl *))(*(void *)v176 + 8))(v176);
                  }
                  if (v318[24])
                  {
                    char v177 = *(WTF::StringImpl **)v318;
                    *(void *)v318 = 0;
                    if (v177)
                    {
                      if (*(_DWORD *)v177 == 2) {
                        WTF::StringImpl::destroy(v177, v175);
                      }
                      else {
                        *(_DWORD *)v177 -= 2;
                      }
                    }
                    WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v317, v175);
                  }
                  return 1;
                }
LABEL_354:
                __break(1u);
LABEL_355:
                unint64_t v284 = 0;
                v285 = 0;
                *(void *)unint64_t v5 = 0;
                *(void *)(v5 + 8) = 0;
                uint64_t v286 = *(void *)(v5 + 24);
                if (v286)
                {
                  if (v13)
                  {
                    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v286 + 16))(v286, v15, v13);
                    v285 = *(void **)v5;
                    unint64_t v284 = *(void *)(v5 + 8);
                  }
                  else
                  {
                    unint64_t v284 = 0;
                    v285 = 0;
                  }
                }
LABEL_356:
                *(void *)unint64_t v5 = 0;
                *(void *)(v5 + 8) = 0;
                uint64_t v287 = *(void *)(v5 + 24);
                if (!v287 || !v284)
                {
LABEL_393:
                  v305 = *(void **)v5;
                  uint64_t v306 = *(void *)(v5 + 8);
                  *(void *)unint64_t v5 = 0;
                  *(void *)(v5 + 8) = 0;
                  uint64_t v307 = *(void *)(v5 + 24);
                  if (v307 && v306) {
                    (*(void (**)(uint64_t, void *))(*(void *)v307 + 16))(v307, v305);
                  }
                  return 0;
                }
LABEL_358:
                (*(void (**)(uint64_t, void *))(*(void *)v287 + 16))(v287, v285);
                goto LABEL_393;
              }
              if (v325)
              {
                int v189 = v324;
                v324 = 0;
                if (v189)
                {
                  if (*(_DWORD *)v189 == 2) {
                    WTF::StringImpl::destroy(v189, (WTF::StringImpl *)v169);
                  }
                  else {
                    *(_DWORD *)v189 -= 2;
                  }
                }
              }
            }
            WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v315, v169);
            goto LABEL_393;
          }
          while (1)
          {
            IPC::Decoder::decode<WebCore::PasteboardCustomData>(v317, (IPC::Decoder *)v5);
            if (!v318[8]) {
              break;
            }
            int v300 = HIDWORD(v326);
            if (HIDWORD(v326) == DWORD2(v326))
            {
              WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PasteboardCustomData>((uint64_t)&v326, (unint64_t)v317);
            }
            else
            {
              WebCore::PasteboardCustomData::PasteboardCustomData();
              HIDWORD(v326) = v300 + 1;
            }
            if (v318[8]) {
              WebCore::PasteboardCustomData::~PasteboardCustomData((WebCore::PasteboardCustomData *)v317);
            }
            if (!--v63)
            {
              LODWORD(v63) = DWORD2(v326);
              v66 = (WTF::StringImpl *)v326;
              unsigned int v314 = HIDWORD(v326);
              if (DWORD2(v326) > HIDWORD(v326))
              {
                v301 = (WTF::StringImpl *)v326;
                if (HIDWORD(v326))
                {
                  if (HIDWORD(v326) >= 0xAAAAAAB)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1993CB4DCLL);
                  }
                  uint64_t v302 = WTF::fastMalloc((WTF *)(24 * HIDWORD(v326)));
                  LODWORD(v63) = 24 * v314 / 0x18;
                  if ((WTF::StringImpl *)v302 == v66)
                  {
                    v301 = v66;
                  }
                  else
                  {
                    v301 = (WTF::StringImpl *)v302;
                    WTF::VectorMover<false,WebCore::PasteboardCustomData>::move(v66, (WTF::StringImpl *)((char *)v66 + 24 * v314), v302);
                  }
                }
                if (v66)
                {
                  if (v301 == v66)
                  {
                    LODWORD(v63) = 0;
                    v301 = 0;
                  }
                  WTF::fastFree(v66, (void *)a2);
                }
                v66 = v301;
              }
              long long v326 = 0uLL;
              v315[0] = v66;
              unsigned int v67 = v314;
              v315[1] = (WTF::StringImpl *)__PAIR64__(v314, v63);
              goto LABEL_200;
            }
          }
LABEL_387:
          WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v326, v64);
LABEL_388:
          v285 = *(void **)v5;
          uint64_t v303 = *(void *)(v5 + 8);
          *(void *)unint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
          uint64_t v287 = *(void *)(v5 + 24);
          if (v287) {
            BOOL v304 = v303 == 0;
          }
          else {
            BOOL v304 = 1;
          }
          if (v304) {
            goto LABEL_393;
          }
          goto LABEL_358;
        }
        unint64_t v296 = v58;
        uint64_t v297 = 0;
      }
      else
      {
        unint64_t v296 = 0;
        uint64_t v297 = 0;
        *(void *)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        uint64_t v298 = *(void *)(v5 + 24);
        if (v298)
        {
          if (v58)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v298 + 16))(v298, v59, v58);
            uint64_t v297 = *(void **)v5;
            unint64_t v296 = *(void *)(v5 + 8);
          }
          else
          {
            unint64_t v296 = 0;
            uint64_t v297 = 0;
          }
        }
      }
      *(void *)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      uint64_t v299 = *(void *)(v5 + 24);
      if (v299 && v296) {
        (*(void (**)(uint64_t, void *))(*(void *)v299 + 16))(v299, v297);
      }
      goto LABEL_388;
    default:
      return 0;
  }
}

void WebKit::WebPasteboardProxy::~WebPasteboardProxy(WebKit::WebPasteboardProxy *this, void *a2)
{
  *(void *)this = &unk_1EEA03B40;
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (unsigned int **)*((void *)this + 2);
  if (v4) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t v3;
  unsigned int **v4;
  uint64_t vars8;

  *(void *)this = &unk_1EEA03B40;
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (unsigned int **)*((void *)this + 2);
  if (v4) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);

  JUMPOUT(0x199740C10);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 16;
    do
    {
      if (*(void *)(v4 - 16) != -1)
      {
        WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        unint64_t v5 = *(WTF::StringImpl **)(v4 - 16);
        *(void *)(v4 - 16) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 32;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::PasteboardURL,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebCore::PasteboardURL>(a2, (uint64_t)v12);
  if (v14 && (IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v15), v16))
  {
    uint64_t result = (uint64_t)IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, &v17);
    char v6 = v18;
    if (v18)
    {
      if (!v14 || !v16)
      {
        __break(1u);
        return result;
      }
      WTF::URL::URL(a1, v12);
      uint64_t v7 = v13;
      uint64_t v13 = 0;
      uint64_t v8 = v15;
      uint64_t v15 = 0;
      *(void *)(a1 + 40) = v7;
      *(void *)(a1 + 48) = v8;
      *(_OWORD *)(a1 + 56) = v17;
      char v6 = 1;
    }
    else
    {
      *(unsigned char *)a1 = 0;
    }
    *(unsigned char *)(a1 + 72) = v6;
    if (v16)
    {
      uint64_t v9 = v15;
      uint64_t v15 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v4);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 72) = 0;
  }
  uint64_t result = std::__optional_destruct_base<WebCore::PasteboardURL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12, v4);
  if (!*(unsigned char *)(a1 + 72))
  {
    uint64_t v10 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result)
    {
      if (v10)
      {
        uint64_t v11 = *(uint64_t (**)(void))(*(void *)result + 16);
        return v11();
      }
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::PasteboardURL,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    unint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v13);
  if (!v14) {
    goto LABEL_29;
  }
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v15);
  if (v16)
  {
    uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v17);
    if (!v18)
    {
      int v8 = 0;
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 40) = 0;
      goto LABEL_15;
    }
    uint64_t result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, &v19);
    if (!v20)
    {
      *(unsigned char *)a1 = 0;
      int v9 = v18;
      *(unsigned char *)(a1 + 40) = 0;
      if (v9)
      {
        uint64_t result = v17;
        long long v17 = 0;
        if (result)
        {
          if (*(_DWORD *)result != 2)
          {
            int v8 = 0;
            *(_DWORD *)result -= 2;
            goto LABEL_15;
          }
          uint64_t result = (IPC::Decoder *)WTF::StringImpl::destroy(result, v5);
        }
      }
      int v8 = 0;
      goto LABEL_15;
    }
    if (v14 && v16 && v18)
    {
      char v6 = v13;
      uint64_t v13 = 0;
      uint64_t v7 = v15;
      uint64_t v15 = 0;
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v17;
      *(_OWORD *)(a1 + 24) = v19;
      int v8 = 1;
      *(unsigned char *)(a1 + 40) = 1;
LABEL_15:
      if (v16)
      {
        uint64_t result = v15;
        uint64_t v15 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (IPC::Decoder *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      goto LABEL_20;
    }
    __break(1u);
LABEL_29:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 40) = 0;
    goto LABEL_30;
  }
  int v8 = 0;
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 40) = 0;
LABEL_20:
  if (v14)
  {
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (IPC::Decoder *)WTF::StringImpl::destroy(result, v5);
        if (v8) {
          return result;
        }
        goto LABEL_30;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v8) {
    return result;
  }
LABEL_30:
  uint64_t v10 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (IPC::Decoder *)*((void *)a2 + 3);
  if (result) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    char v12 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (IPC::Decoder *)v12();
  }
  return result;
}

void IPC::Decoder::decode<WebCore::PasteboardCustomData>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<WebCore::PasteboardCustomData,void>::decode(a2, a1);
  if (!a1[24])
  {
    uint64_t v4 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v5 = *((void *)a2 + 3);
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

uint64_t WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PasteboardCustomData>(uint64_t a1, unint64_t a2)
{
  WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t result = WebCore::PasteboardCustomData::PasteboardCustomData();
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1993CBD1CLL);
    }
    unint64_t v3 = *(WebCore::PasteboardCustomData **)a1;
    uint64_t v4 = (WebCore::PasteboardCustomData *)(*(void *)a1 + 24 * *(unsigned int *)(a1 + 12));
    int v5 = 24 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::PasteboardCustomData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WebCore::PasteboardCustomData **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
}

void WTF::VectorMover<false,WebCore::PasteboardCustomData>::move(WebCore::PasteboardCustomData *a1, WebCore::PasteboardCustomData *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    int v5 = a1;
    do
    {
      WebCore::PasteboardCustomData::PasteboardCustomData();
      WebCore::PasteboardCustomData::~PasteboardCustomData(v5);
      a3 += 24;
      int v5 = (WebCore::PasteboardCustomData *)((char *)v5 + 24);
    }
    while (v5 != a2);
  }
}

uint64_t WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WebCore::PasteboardCustomData **)a1;
    uint64_t v5 = 24 * v3;
    do
    {
      WebCore::PasteboardCustomData::~PasteboardCustomData(v4);
      uint64_t v4 = (WebCore::PasteboardCustomData *)(v6 + 24);
      v5 -= 24;
    }
    while (v5);
  }
  unint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy15WriteCustomDataEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6VectorIN7WebCore20PasteboardCustomDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericINSC_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03730;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy15WriteCustomDataEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6VectorIN7WebCore20PasteboardCustomDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericINSC_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03730;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy15WriteCustomDataEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6VectorIN7WebCore20PasteboardCustomDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericINSC_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v13);
  if (!v14)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
    goto LABEL_22;
  }
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v15);
  if (v16)
  {
    uint64_t result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, &v17);
    if (v18)
    {
      if (!v14 || !v16)
      {
        __break(1u);
        return result;
      }
      int v6 = 0;
      unint64_t v7 = v13;
      uint64_t v13 = 0;
      unint64_t v8 = v15;
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      *(_OWORD *)(a1 + 16) = v17;
      *(unsigned char *)(a1 + 32) = 1;
      goto LABEL_13;
    }
    *(unsigned char *)a1 = 0;
    int v9 = v16;
    *(unsigned char *)(a1 + 32) = 0;
    if (v9)
    {
      uint64_t result = v15;
      uint64_t v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
  }
  int v6 = 1;
LABEL_13:
  if (v14)
  {
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (!v6) {
          return result;
        }
        goto LABEL_22;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!v6) {
    return result;
  }
LABEL_22:
  uint64_t v10 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    char v12 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (WTF::StringImpl *)v12();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy29TypesSafeForDOMToReadAndWriteEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03758;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy29TypesSafeForDOMToReadAndWriteEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03758;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy29TypesSafeForDOMToReadAndWriteEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy21AllPasteboardItemInfoEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringExNSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONSF_INS_6VectorINSH_18PasteboardItemInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03780;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy21AllPasteboardItemInfoEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringExNSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONSF_INS_6VectorINSH_18PasteboardItemInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSV_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03780;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy21AllPasteboardItemInfoEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringExNSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONSF_INS_6VectorINSH_18PasteboardItemInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSV_EE4callESV_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = *(IPC::Encoder **)(a1 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 16);
  unint64_t v7 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v6)
  {
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1993CC2ECLL);
    }
    *unint64_t v7 = 1;
    if (!*(unsigned char *)(a2 + 16))
    {
      uint64_t v14 = std::__throw_bad_optional_access[abi:sn180100]();
      return _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy25InformationForItemAtIndexEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringExNSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONSF_INSH_18PasteboardItemInfoEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(v14);
    }
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
    uint64_t v9 = *(unsigned int *)(a2 + 12);
    if (v9)
    {
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = 120 * v9;
      do
      {
        IPC::ArgumentCoder<WebCore::PasteboardItemInfo,void>::encode(v5, v10);
        v10 += 120;
        v11 -= 120;
      }
      while (v11);
    }
  }
  else
  {
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1993CC30CLL);
    }
    *unint64_t v7 = 0;
  }
  uint64_t v12 = *(void *)(a1 + 16);

  return IPC::Connection::sendMessageImpl(v12, v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy25InformationForItemAtIndexEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringExNSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONSF_INSH_18PasteboardItemInfoEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA037A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy25InformationForItemAtIndexEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringExNSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONSF_INSH_18PasteboardItemInfoEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA037A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

IPC::Decoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy25InformationForItemAtIndexEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringExNSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONSF_INSH_18PasteboardItemInfoEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = *(IPC::Encoder **)(a1 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 120);
  unint64_t v7 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v6)
  {
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1993CC480);
    }
    *unint64_t v7 = 1;
    if (!*(unsigned char *)(a2 + 120))
    {
      uint64_t v11 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(v11, v12);
    }
    IPC::ArgumentCoder<WebCore::PasteboardItemInfo,void>::encode(v5, a2);
  }
  else
  {
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1993CC4A0);
    }
    *unint64_t v7 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);

  return (IPC::Decoder *)IPC::Connection::sendMessageImpl(v9, v4, 0, 0);
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v11);
  if (v12)
  {
    uint64_t result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, &v13);
    if (v14)
    {
      if (v12)
      {
        *(void *)a1 = v11;
        *(_OWORD *)(a1 + 8) = v13;
        *(unsigned char *)(a1 + 24) = 1;
      }
      else
      {
        __break(1u);
      }
      return result;
    }
    *(unsigned char *)a1 = 0;
    int v6 = v12;
    *(unsigned char *)(a1 + 24) = 0;
    if (v6)
    {
      unint64_t v7 = v11;
      uint64_t v11 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v5);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  uint64_t v8 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (IPC::Decoder *)*((void *)a2 + 3);
  if (result) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (IPC::Decoder *)v10();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy23GetPasteboardItemsCountEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvyEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA037D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy23GetPasteboardItemsCountEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvyEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA037D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy23GetPasteboardItemsCountEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvyEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 8uLL, 8);
  if (v6 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy24ReadStringFromPasteboardEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvOSB_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA037F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy24ReadStringFromPasteboardEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvOSB_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA037F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy24ReadStringFromPasteboardEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvOSB_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy21ReadURLFromPasteboardEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvOSB_SP_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_SP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03820;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy21ReadURLFromPasteboardEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvOSB_SP_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_SP_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03820;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy21ReadURLFromPasteboardEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvOSB_SP_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_SP_EE4callESP_SP_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a3);
  uint64_t v6 = v4[1];

  return IPC::Connection::sendMessageImpl(v6, v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy24ReadBufferFromPasteboardEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionENSt3__18optionalImEERKNS_6StringESG_NSC_INS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONS_6RefPtrINSI_12SharedBufferENS_12RawPtrTraitsISR_EENS_21DefaultRefDerefTraitsISR_EEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSX_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03848;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy24ReadBufferFromPasteboardEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionENSt3__18optionalImEERKNS_6StringESG_NSC_INS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONS_6RefPtrINSI_12SharedBufferENS_12RawPtrTraitsISR_EENS_21DefaultRefDerefTraitsISR_EEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSX_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03848;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy24ReadBufferFromPasteboardEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionENSt3__18optionalImEERKNS_6StringESG_NSC_INS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONS_6RefPtrINSI_12SharedBufferENS_12RawPtrTraitsISR_EENS_21DefaultRefDerefTraitsISR_EEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSX_EE4callESX_(uint64_t a1, atomic_uint **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy37ContainsStringSafeForDOMToReadForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03870;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy37ContainsStringSafeForDOMToReadForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03870;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy37ContainsStringSafeForDOMToReadForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy16GetNumberOfFilesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvyEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03898;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy16GetNumberOfFilesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvyEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03898;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy16GetNumberOfFilesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvyEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 8uLL, 8);
  if (v6 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18GetPasteboardTypesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA038C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18GetPasteboardTypesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA038C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18GetPasteboardTypesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy29GetPasteboardPathnamesForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONSP_INS7_22SandboxExtensionHandleELm0ESQ_Lm16ESR_EEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJST_SW_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA038E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy29GetPasteboardPathnamesForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONSP_INS7_22SandboxExtensionHandleELm0ESQ_Lm16ESR_EEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJST_SW_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA038E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy29GetPasteboardPathnamesForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONSP_INS7_22SandboxExtensionHandleELm0ESQ_Lm16ESR_EEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJST_SW_EE4callEST_SW_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a3);
  uint64_t v6 = v4[1];

  return IPC::Connection::sendMessageImpl(v6, v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26GetPasteboardStringForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvOSB_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03910;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26GetPasteboardStringForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvOSB_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03910;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26GetPasteboardStringForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvOSB_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy27GetPasteboardStringsForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03938;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy27GetPasteboardStringsForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03938;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy27GetPasteboardStringsForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26GetPasteboardBufferForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONSH_16PasteboardBufferEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03960;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26GetPasteboardBufferForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONSH_16PasteboardBufferEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03960;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26GetPasteboardBufferForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONSH_16PasteboardBufferEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::PasteboardBuffer,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy24GetPasteboardChangeCountEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03988;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy24GetPasteboardChangeCountEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03988;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy24GetPasteboardChangeCountEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18GetPasteboardColorEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONSH_5ColorEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA039B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18GetPasteboardColorEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONSH_5ColorEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA039B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18GetPasteboardColorEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvONSH_5ColorEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, WebCore::Color *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy16GetPasteboardURLEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvSD_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA039D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy16GetPasteboardURLEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvSD_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA039D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy16GetPasteboardURLEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvSD_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v16);
  if (!v17)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 40) = 0;
    goto LABEL_18;
  }
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v4, (uint64_t)&v18);
  if (v20)
  {
    uint64_t result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, &v21);
    if (!v22)
    {
      int v10 = 0;
      int v11 = 0;
      *(unsigned char *)a1 = 0;
      int v12 = v20;
      *(unsigned char *)(a1 + 40) = 0;
      if (!v12) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    if (v17 && v20)
    {
      uint64_t v7 = v16;
      unsigned __int8 v16 = 0;
      uint64_t v8 = v18;
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      uint64_t v9 = v19;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      *(void *)(a1 + 16) = v9;
      *(_OWORD *)(a1 + 24) = v21;
      int v10 = 1;
      *(unsigned char *)(a1 + 40) = 1;
LABEL_8:
      uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v6);
      int v11 = v10;
      goto LABEL_9;
    }
    __break(1u);
  }
  int v11 = 0;
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 40) = 0;
LABEL_9:
  if (v17)
  {
    uint64_t result = v16;
    unsigned __int8 v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
        if (v11) {
          return result;
        }
        goto LABEL_18;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v11) {
    return result;
  }
LABEL_18:
  uint64_t v13 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    uint64_t v15 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (WTF::StringImpl *)v15();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18AddPasteboardTypesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringERKNS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03A00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18AddPasteboardTypesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringERKNS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03A00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18AddPasteboardTypesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringERKNS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, a2);
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18SetPasteboardTypesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringERKNS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03A28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18SetPasteboardTypesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringERKNS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03A28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18SetPasteboardTypesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringERKNS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy16SetPasteboardURLEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKN7WebCore13PasteboardURLERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericINSB_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03A50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy16SetPasteboardURLEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKN7WebCore13PasteboardURLERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericINSB_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03A50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy16SetPasteboardURLEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKN7WebCore13PasteboardURLERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericINSB_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18SetPasteboardColorEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringERKN7WebCore5ColorENSt3__18optionalINS_23ObjectIdentifierGenericINSE_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03A78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18SetPasteboardColorEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringERKN7WebCore5ColorENSt3__18optionalINS_23ObjectIdentifierGenericINSE_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03A78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18SetPasteboardColorEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringERKN7WebCore5ColorENSt3__18optionalINS_23ObjectIdentifierGenericINSE_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26SetPasteboardStringForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_SD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03AA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26SetPasteboardStringForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_SD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03AA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26SetPasteboardStringForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_SD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26SetPasteboardBufferForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_ONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENSt3__18optionalINS_23ObjectIdentifierGenericINSF_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03AC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26SetPasteboardBufferForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_ONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENSt3__18optionalINS_23ObjectIdentifierGenericINSF_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03AC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26SetPasteboardBufferForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_ONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENSt3__18optionalINS_23ObjectIdentifierGenericINSF_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy35ContainsURLStringSuitableForLoadingEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03AF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy35ContainsURLStringSuitableForLoadingEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03AF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy35ContainsURLStringSuitableForLoadingEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy27URLStringSuitableForLoadingEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvOSB_SP_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_SP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03B18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy27URLStringSuitableForLoadingEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvOSB_SP_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_SP_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03B18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy27URLStringSuitableForLoadingEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEONS_17CompletionHandlerIFvOSB_SP_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_SP_EE4callESP_SP_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a3);
  uint64_t v6 = v4[1];

  return IPC::Connection::sendMessageImpl(v6, v4, 0, 0);
}

void WebKit::WebPaymentCoordinator::didReceiveMessage(WebKit::WebPaymentCoordinator *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  switch(*((_WORD *)a3 + 25))
  {
    case 0xA0E:
      IPC::ArgumentCoder<WebCore::Payment,void>::decode((uint64_t)a3, (uint64_t)cf);
      if ((_BYTE)v45
        || ((uint64_t v17 = *(void *)a3,
             uint64_t v18 = *((void *)a3 + 1),
             *(void *)a3 = 0,
             *((void *)a3 + 1) = 0,
             (uint64_t v19 = *((void *)a3 + 3)) != 0)
          ? (BOOL v20 = v18 == 0)
          : (BOOL v20 = 1),
            !v20 && ((*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17), (_BYTE)v45)))
      {
        v37[0] = (CFTypeRef)(MEMORY[0x1E4FB6BB8] + 16);
        v37[1] = cf[1];
        if (cf[1])
        {
          CFRetain(cf[1]);
          LOBYTE(v38[0]) = 1;
          if (!(_BYTE)v45) {
            goto LABEL_35;
          }
        }
        else
        {
          LOBYTE(v38[0]) = 1;
        }
        WebCore::Payment::~Payment((WebCore::Payment *)cf);
LABEL_35:
        WebKit::WebPaymentCoordinator::didAuthorizePayment((uint64_t)this);
        WebCore::Payment::~Payment((WebCore::Payment *)v37);
        return;
      }
      LOBYTE(v37[0]) = 0;
      LOBYTE(v38[0]) = 0;
      uint64_t v21 = *(void *)a3;
      uint64_t v22 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v23 = *((void *)a3 + 3);
      if (v23)
      {
        if (v22)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v21);
          if (LOBYTE(v38[0])) {
            goto LABEL_35;
          }
        }
      }
      return;
    case 0xA0F:
      IPC::ArgumentCoder<WebCore::PaymentSessionError,void>::decode((const void ***)a3, (uint64_t)cf);
      if (LOBYTE(cf[1])) {
        goto LABEL_7;
      }
      uint64_t v24 = *(void *)a3;
      uint64_t v25 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v26 = *((void *)a3 + 3);
      if (v26 && v25)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24);
        if (LOBYTE(cf[1]))
        {
LABEL_7:
          v37[0] = cf[0];
          LOBYTE(v37[1]) = 1;
          WebKit::WebPaymentCoordinator::didCancelPaymentSession();
          CFTypeRef v5 = v37[0];
          v37[0] = 0;
          if (v5) {
            CFRelease(v5);
          }
        }
        else
        {
          uint64_t v12 = *(void *)a3;
          uint64_t v13 = *((void *)a3 + 1);
          uint64_t v14 = *((void *)a3 + 3);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          if (v14) {
            goto LABEL_31;
          }
        }
      }
      else
      {
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
      }
      return;
    case 0xA10:
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)cf);
      if (LOBYTE(cf[1]))
      {
        WebKit::WebPaymentCoordinator::didChangeCouponCode((uint64_t)this);
        goto LABEL_25;
      }
      return;
    case 0xA11:
      IPC::ArgumentCoder<WebCore::PaymentMethod,void>::decode((uint64_t)a3, (uint64_t)cf);
      if ((_BYTE)v45
        || ((uint64_t v27 = *(void *)a3,
             uint64_t v28 = *((void *)a3 + 1),
             *(void *)a3 = 0,
             *((void *)a3 + 1) = 0,
             (uint64_t v29 = *((void *)a3 + 3)) != 0)
          ? (BOOL v30 = v28 == 0)
          : (BOOL v30 = 1),
            !v30 && ((*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v27), (_BYTE)v45)))
      {
        v37[0] = (CFTypeRef)(MEMORY[0x1E4FB6B40] + 16);
        v37[1] = cf[1];
        if (cf[1])
        {
          CFRetain(cf[1]);
          LOBYTE(v38[0]) = 1;
          if (!(_BYTE)v45) {
            goto LABEL_38;
          }
        }
        else
        {
          LOBYTE(v38[0]) = 1;
        }
        WebCore::PaymentMethod::~PaymentMethod((WebCore::PaymentMethod *)cf);
      }
      else
      {
        LOBYTE(v37[0]) = 0;
        LOBYTE(v38[0]) = 0;
        uint64_t v31 = *(void *)a3;
        uint64_t v32 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v33 = *((void *)a3 + 3);
        if (!v33) {
          return;
        }
        if (!v32) {
          return;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v31);
        if (!LOBYTE(v38[0])) {
          return;
        }
      }
LABEL_38:
      WebKit::WebPaymentCoordinator::didSelectPaymentMethod((uint64_t)this);
      WebCore::PaymentMethod::~PaymentMethod((WebCore::PaymentMethod *)v37);
      return;
    case 0xA12:
      IPC::Decoder::decode<WebCore::PaymentContact>((uint64_t *)a3, (uint64_t)cf);
      if ((_BYTE)v45)
      {
        v37[0] = (CFTypeRef)(MEMORY[0x1E4FB6B48] + 16);
        v37[1] = cf[1];
        if (cf[1])
        {
          CFRetain(cf[1]);
          LOBYTE(v38[0]) = 1;
          if (!(_BYTE)v45) {
            goto LABEL_41;
          }
        }
        else
        {
          LOBYTE(v38[0]) = 1;
        }
        WebCore::PaymentContact::~PaymentContact((WebCore::PaymentContact *)cf);
      }
      else
      {
        LOBYTE(v37[0]) = 0;
        LOBYTE(v38[0]) = 0;
        uint64_t v34 = *(void *)a3;
        uint64_t v35 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v36 = *((void *)a3 + 3);
        if (!v36) {
          return;
        }
        if (!v35) {
          return;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 16))(v36, v34);
        if (!LOBYTE(v38[0])) {
          return;
        }
      }
LABEL_41:
      WebKit::WebPaymentCoordinator::didSelectShippingContact((uint64_t)this);
      WebCore::PaymentContact::~PaymentContact((WebCore::PaymentContact *)v37);
      return;
    case 0xA13:
      IPC::Decoder::decode<WebCore::ApplePayShippingMethod>(a3, (uint64_t)cf);
      if (v50)
      {
        long long v8 = *(_OWORD *)cf;
        long long v9 = v45;
        *(_OWORD *)CFTypeRef cf = 0u;
        long long v45 = 0u;
        *(_OWORD *)uint64_t v37 = v8;
        *(_OWORD *)uint64_t v38 = v9;
        long long v41 = v48;
        *(_OWORD *)uint64_t v42 = *(_OWORD *)v49;
        *(void *)&v42[13] = *(void *)&v49[13];
        long long v39 = v46;
        long long v40 = v47;
        char v43 = 1;
        std::__optional_destruct_base<WebCore::ApplePayShippingMethod,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)cf, v7);
        WebKit::WebPaymentCoordinator::didSelectShippingMethod((uint64_t)this);
        int v10 = v38[1];
        v38[1] = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            WTF::StringImpl::destroy(v10, v6);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
        uint64_t v15 = v38[0];
        v38[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v6);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
        unsigned __int8 v16 = (WTF::StringImpl *)v37[1];
        v37[1] = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            WTF::StringImpl::destroy(v16, v6);
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
        int v11 = (WTF::StringImpl *)v37[0];
        v37[0] = 0;
        if (v11) {
          goto LABEL_27;
        }
      }
      else
      {
        std::__optional_destruct_base<WebCore::ApplePayShippingMethod,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)cf, v7);
        uint64_t v12 = *(void *)a3;
        uint64_t v13 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v14 = *((void *)a3 + 3);
        if (v14)
        {
LABEL_31:
          if (v13) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12);
          }
        }
      }
      return;
    case 0xA14:
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)cf);
      if (LOBYTE(cf[1]))
      {
        WebKit::WebPaymentCoordinator::validateMerchant(this, (WTF::StringImpl **)cf);
LABEL_25:
        if (LOBYTE(cf[1]))
        {
          int v11 = (WTF::StringImpl *)cf[0];
          cf[0] = 0;
          if (v11)
          {
LABEL_27:
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, v6);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
        }
      }
      return;
    default:
      return;
  }
}

void non-virtual thunk to'WebKit::WebPaymentCoordinator::didReceiveMessage(WebKit::WebPaymentCoordinator *this, IPC::Connection *a2, IPC::Decoder *a3)
{
}

void WebKit::WebPaymentCoordinatorProxy::didReceiveMessage(id *this, atomic_uchar *volatile *a2, WTF::StringImpl **a3)
{
  uint64_t v3 = a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0xA01:
      goto LABEL_4;
    case 0xA02:
      IPC::Decoder::decode<WebKit::PaymentSetupConfiguration>((uint64_t)&cf, (IPC::Decoder *)a3);
      if (!v168)
      {
        LOBYTE(v176) = 0;
        char v184 = 0;
        goto LABEL_114;
      }
      IPC::Decoder::decode<WebKit::PaymentSetupFeatures>(v3, (uint64_t)&v192);
      char v42 = v193;
      if (!v193)
      {
        LOBYTE(v176) = 0;
        goto LABEL_113;
      }
      if (v168)
      {
        std::__tuple_leaf<0ul,WebKit::PaymentSetupConfiguration,false>::__tuple_leaf[abi:sn180100]<WebKit::PaymentSetupConfiguration,void>((uint64_t)&v176, (uint64_t *)&cf);
        CFTypeRef v183 = v192;
        char v42 = 1;
LABEL_113:
        char v184 = v42;
LABEL_114:
        std::__optional_destruct_base<WebKit::PaymentSetupConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&cf, v41);
        if (v184
          || (v147 = *v3, v148 = v3[1], *uint64_t v3 = 0, v3[1] = 0, (v149 = v3[3]) != 0)
          && v148
          && ((*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v149 + 16))(v149, v147), v184))
        {
          uint64_t v84 = (const void *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
          if ((_BYTE)v85)
          {
            CFTypeRef cf = v84;
            uint64_t v3 = &v162;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v162, a2);
            v86 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v86 = &unk_1EEA03BF0;
            v86[1] = cf;
            uint64_t v87 = v162;
            v162 = 0;
            v86[2] = v87;
            v192 = v86;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v162);
            if (!v184) {
              goto LABEL_150;
            }
            WebKit::WebPaymentCoordinatorProxy::beginApplePaySetup((uint64_t)this, (uint64_t *)&v176, &v183, (uint64_t *)&v192);
            v88 = v192;
            v192 = 0;
            if (v88) {
              (*(void (**)(const void *))(*(void *)v88 + 8))(v88);
            }
          }
          if (v184)
          {
            CFTypeRef v89 = v183;
            CFTypeRef v183 = 0;
            if (v89) {
              CFRelease(v89);
            }
            v90 = (WTF::StringImpl *)v180;
            *(void *)&long long v180 = 0;
            if (v90)
            {
              if (*(_DWORD *)v90 == 2) {
                WTF::StringImpl::destroy(v90, v85);
              }
              else {
                *(_DWORD *)v90 -= 2;
              }
            }
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v179, v85);
            int v95 = v178;
            uint64_t v178 = 0;
            if (v95)
            {
              if (*(_DWORD *)v95 == 2) {
                WTF::StringImpl::destroy(v95, v91);
              }
              else {
                *(_DWORD *)v95 -= 2;
              }
            }
            unint64_t v96 = v177;
            char v177 = 0;
            if (v96)
            {
              if (*(_DWORD *)v96 == 2) {
                WTF::StringImpl::destroy(v96, v91);
              }
              else {
                *(_DWORD *)v96 -= 2;
              }
            }
            v94 = v176;
            unsigned __int16 v176 = 0;
            if (v94) {
              goto LABEL_146;
            }
          }
        }
        return;
      }
      do
      {
LABEL_150:
        __break(1u);
LABEL_151:
        v97 = *v3;
        unint64_t v98 = v3[1];
        *uint64_t v3 = 0;
        v3[1] = 0;
        unint64_t v99 = v3[3];
        if (!v99) {
          return;
        }
        if (!v98) {
          return;
        }
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v99 + 16))(v99, v97);
        if (!v168) {
          return;
        }
LABEL_69:
        v61 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
        if (!(_BYTE)v62) {
          goto LABEL_73;
        }
        unsigned __int16 v176 = v61;
        uint64_t v3 = &v177;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v177, a2);
        unint64_t v63 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v63 = &unk_1EEA03BC8;
        v63[1] = v176;
        long long v64 = v177;
        char v177 = 0;
        v63[2] = v64;
        v192 = v63;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v177);
      }
      while (!v168);
      WebKit::WebPaymentCoordinatorProxy::getSetupFeatures((uint64_t)this, (uint64_t *)&cf, (uint64_t *)&v192);
      int v65 = v192;
      v192 = 0;
      if (v65) {
        (*(void (**)(const void *))(*(void *)v65 + 8))(v65);
      }
LABEL_73:
      if (v168)
      {
        v66 = v165[0];
        v165[0] = 0;
        if (v66)
        {
          if (*(_DWORD *)v66 == 2) {
            WTF::StringImpl::destroy(v66, v62);
          }
          else {
            *(_DWORD *)v66 -= 2;
          }
        }
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v164, v62);
        unint64_t v92 = v163;
        uint64_t v163 = 0;
        if (v92)
        {
          if (*(_DWORD *)v92 == 2) {
            WTF::StringImpl::destroy(v92, v91);
          }
          else {
            *(_DWORD *)v92 -= 2;
          }
        }
        unint64_t v93 = v162;
        v162 = 0;
        if (v93)
        {
          if (*(_DWORD *)v93 == 2) {
            WTF::StringImpl::destroy(v93, v91);
          }
          else {
            *(_DWORD *)v93 -= 2;
          }
        }
        v94 = (WTF::StringImpl *)cf;
        CFTypeRef cf = 0;
        if (v94)
        {
LABEL_146:
          if (*(_DWORD *)v94 == 2) {
            WTF::StringImpl::destroy(v94, v91);
          }
          else {
            *(_DWORD *)v94 -= 2;
          }
          return;
        }
      }
      return;
    case 0xA03:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String>>((IPC::Decoder *)a3, &v176);
      if (!(_BYTE)v178) {
        goto LABEL_31;
      }
      uint64_t v29 = (const void *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
      if (!(_BYTE)v16) {
        goto LABEL_31;
      }
      CFTypeRef cf = v29;
      uint64_t v3 = &v162;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v162, a2);
      BOOL v30 = (void *)WTF::fastMalloc((WTF *)0x18);
      *BOOL v30 = &unk_1EEA03B78;
      v30[1] = cf;
      uint64_t v31 = v162;
      v162 = 0;
      v30[2] = v31;
      v192 = v30;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v162);
      if (!(_BYTE)v178) {
        goto LABEL_150;
      }
      WebKit::WebPaymentCoordinatorProxy::canMakePaymentsWithActiveCard((uint64_t)this, &v176, &v177, (uint64_t *)&v192);
      goto LABEL_29;
    case 0xA04:
LABEL_4:
      WebKit::WebPaymentCoordinatorProxy::abortPaymentSession((WebKit::WebPaymentCoordinatorProxy *)this);
      return;
    case 0xA05:
      long long v8 = a3[1];
      long long v9 = *v3;
      unint64_t v10 = v3[2] - *v3;
      if ((unint64_t)v8 <= v10)
      {
        v100 = 0;
        uint64_t v101 = 0;
        *uint64_t v3 = 0;
        v3[1] = 0;
        v102 = v3[3];
        if (v102)
        {
          if (v8)
          {
            (*(void (**)(WTF::StringImpl *))(*(void *)v102 + 16))(v102);
            uint64_t v101 = *v3;
            v100 = v3[1];
          }
          else
          {
            v100 = 0;
            uint64_t v101 = 0;
          }
        }
        goto LABEL_156;
      }
      int v11 = (unsigned __int8 *)v9 + v10;
      v3[2] = (WTF::StringImpl *)(v11 + 1);
      if (!v9)
      {
        v100 = v8;
        uint64_t v101 = 0;
LABEL_156:
        long long v8 = 0;
        long long v9 = 0;
        *uint64_t v3 = 0;
        v3[1] = 0;
        uint64_t v103 = v3[3];
        if (v103)
        {
          if (v100)
          {
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v103 + 16))(v103, v101, v100);
            long long v9 = *v3;
            long long v8 = v3[1];
          }
          else
          {
            long long v8 = 0;
            long long v9 = 0;
          }
        }
        goto LABEL_157;
      }
      unsigned int v12 = *v11;
      if (v12 >= 2)
      {
LABEL_157:
        *uint64_t v3 = 0;
        v3[1] = 0;
        BOOL v104 = v3[3];
        if (v104 && v8) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v104 + 16))(v104, v9);
        }
        LOBYTE(v176) = 0;
        char v190 = 0;
LABEL_159:
        uint64_t v15 = *v3;
        v105 = v3[1];
        *uint64_t v3 = 0;
        v3[1] = 0;
        unint64_t v106 = v3[3];
        if (v106 && v105) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v106 + 16))(v106, v15);
        }
        goto LABEL_79;
      }
      if (!v12)
      {
        LOBYTE(cf) = 0;
        LOBYTE(v173) = 0;
        LOBYTE(v176) = 0;
        LOBYTE(v189) = 0;
        char v190 = 1;
        std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&cf, v9);
        goto LABEL_79;
      }
      IPC::ArgumentCoder<WebCore::ApplePayCouponCodeUpdate,void>::decode(v3, &cf);
      if ((_BYTE)v173
        || (v13 = *v3, v150 = v3[1], *uint64_t v3 = 0, v3[1] = 0, (v151 = v3[3]) != 0)
        && v150
        && ((*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v151 + 16))(v151, v13),
            (_BYTE)v173))
      {
        std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplePayShippingContactUpdate>((uint64_t)&v176, (uint64_t)&cf);
        char v14 = 1;
      }
      else
      {
        char v14 = 0;
        LOBYTE(v176) = 0;
      }
      char v190 = v14;
      std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&cf, v13);
      if (!v190) {
        goto LABEL_159;
      }
LABEL_79:
      if (!v190)
      {
        LOBYTE(cf) = 0;
        char v174 = 0;
        goto LABEL_171;
      }
      LOBYTE(cf) = 0;
      LOBYTE(v173) = 0;
      if (!(_BYTE)v189)
      {
        char v174 = 1;
LABEL_84:
        std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&v176, v15);
        if (v174) {
          goto LABEL_85;
        }
LABEL_171:
        uint64_t v115 = *v3;
        uint64_t v116 = v3[1];
        *uint64_t v3 = 0;
        v3[1] = 0;
        uint64_t v117 = v3[3];
        if (!v117) {
          return;
        }
        if (!v116) {
          return;
        }
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v117 + 16))(v117, v115);
        if (!v174) {
          return;
        }
        goto LABEL_85;
      }
      WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)&cf, (uint64_t)&v176);
      uint64_t v67 = v185;
      uint64_t v185 = 0;
      uint64_t v169 = v67;
      uint64_t v68 = v186;
      uint64_t v186 = 0;
      uint64_t v170 = v68;
      uint64_t v69 = v187;
      uint64_t v187 = 0;
      uint64_t v171 = v69;
      uint64_t v70 = v188;
      uint64_t v188 = 0;
      uint64_t v172 = v70;
      LOBYTE(v173) = 1;
      char v174 = 1;
      if (v190) {
        goto LABEL_84;
      }
LABEL_85:
      WebKit::WebPaymentCoordinatorProxy::completeCouponCodeChange((uint64_t)this, &cf);
      if (v174) {
LABEL_86:
      }
        std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&cf, v71);
      return;
    case 0xA06:
      IPC::ArgumentCoder<WebCore::PaymentMerchantSession,void>::decode((uint64_t)a3, (uint64_t)&v176);
      if ((_BYTE)v177)
      {
        CFTypeRef cf = v176;
        LOBYTE(v162) = 1;
        WebKit::WebPaymentCoordinatorProxy::completeMerchantValidation((uint64_t)this, &cf);
        if ((_BYTE)v162)
        {
          CFTypeRef v43 = cf;
          CFTypeRef cf = 0;
          if (v43) {
            CFRelease(v43);
          }
        }
      }
      else
      {
        v124 = *v3;
        uint64_t v125 = v3[1];
        *uint64_t v3 = 0;
        v3[1] = 0;
        uint64_t v126 = v3[3];
        if (v126 && v125)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v126 + 16))(v126, v124);
LABEL_244:
          char v158 = *v3;
          char v159 = v3[1];
          v160 = v3[3];
          *uint64_t v3 = 0;
          v3[1] = 0;
          if (v160 && v159) {
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v160 + 16))(v160, v158);
          }
        }
        else
        {
LABEL_182:
          *uint64_t v3 = 0;
          v3[1] = 0;
        }
      }
      return;
    case 0xA07:
      uint64_t v44 = a3[1];
      long long v45 = *v3;
      unint64_t v46 = v3[2] - *v3;
      if ((unint64_t)v44 <= v46)
      {
        uint64_t v127 = 0;
        uint64_t v128 = 0;
        *uint64_t v3 = 0;
        v3[1] = 0;
        v129 = v3[3];
        if (v129)
        {
          if (v44)
          {
            (*(void (**)(WTF::StringImpl *))(*(void *)v129 + 16))(v129);
            uint64_t v128 = *v3;
            uint64_t v127 = v3[1];
          }
          else
          {
            uint64_t v127 = 0;
            uint64_t v128 = 0;
          }
        }
      }
      else
      {
        long long v47 = (unsigned __int8 *)v45 + v46;
        v3[2] = (WTF::StringImpl *)(v47 + 1);
        if (v45)
        {
          unsigned int v48 = *v47;
          if (v48 < 2)
          {
            if (!v48)
            {
              LOBYTE(cf) = 0;
              char v174 = 0;
              LOBYTE(v176) = 0;
              char v190 = 0;
              char v191 = 1;
              std::__optional_destruct_base<WebCore::ApplePayPaymentMethodUpdate,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&cf, v45);
              goto LABEL_95;
            }
            IPC::ArgumentCoder<WebCore::ApplePayPaymentMethodUpdate,void>::decode(v3, &cf);
            if (v174
              || (v49 = *v3, v154 = v3[1], *uint64_t v3 = 0, v3[1] = 0, (v155 = v3[3]) != 0)
              && v154
              && ((*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v155 + 16))(v155, v49),
                  v174))
            {
              std::__optional_destruct_base<WebCore::ApplePayPaymentMethodUpdate,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplePayPaymentMethodUpdate>((uint64_t)&v176, (uint64_t)&cf);
              char v50 = 1;
            }
            else
            {
              char v50 = 0;
              LOBYTE(v176) = 0;
            }
            char v191 = v50;
            std::__optional_destruct_base<WebCore::ApplePayPaymentMethodUpdate,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&cf, v49);
            if (!v191) {
              goto LABEL_187;
            }
LABEL_95:
            if (v191)
            {
              LOBYTE(cf) = 0;
              char v174 = 0;
              if (v190)
              {
                WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)&cf, (uint64_t)&v176);
                uint64_t v74 = v185;
                uint64_t v185 = 0;
                uint64_t v169 = v74;
                uint64_t v75 = v186;
                uint64_t v186 = 0;
                uint64_t v170 = v75;
                uint64_t v76 = v187;
                uint64_t v187 = 0;
                uint64_t v171 = v76;
                uint64_t v77 = v188;
                uint64_t v188 = 0;
                uint64_t v172 = v77;
                uint64_t v78 = v189;
                uint64_t v189 = 0;
                uint64_t v173 = v78;
                char v174 = 1;
                char v175 = 1;
                if (!v191)
                {
LABEL_101:
                  WebKit::WebPaymentCoordinatorProxy::completePaymentMethodSelection((uint64_t)this, (uint64_t)&cf);
                  if (v175) {
                    std::__optional_destruct_base<WebCore::ApplePayPaymentMethodUpdate,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&cf, v79);
                  }
                  return;
                }
              }
              else
              {
                char v175 = 1;
              }
              std::__optional_destruct_base<WebCore::ApplePayPaymentMethodUpdate,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v176, v51);
              if (v175) {
                goto LABEL_101;
              }
            }
            else
            {
              LOBYTE(cf) = 0;
              char v175 = 0;
            }
            v141 = *v3;
            uint64_t v142 = v3[1];
            *uint64_t v3 = 0;
            v3[1] = 0;
            uint64_t v143 = v3[3];
            if (!v143) {
              return;
            }
            if (!v142) {
              return;
            }
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v143 + 16))(v143, v141);
            if (!v175) {
              return;
            }
            goto LABEL_101;
          }
LABEL_185:
          *uint64_t v3 = 0;
          v3[1] = 0;
          uint64_t v131 = v3[3];
          if (v131 && v44) {
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v131 + 16))(v131, v45);
          }
          LOBYTE(v176) = 0;
          char v191 = 0;
LABEL_187:
          v51 = *v3;
          v132 = v3[1];
          *uint64_t v3 = 0;
          v3[1] = 0;
          uint64_t v133 = v3[3];
          if (v133 && v132) {
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v133 + 16))(v133, v51);
          }
          goto LABEL_95;
        }
        uint64_t v127 = v44;
        uint64_t v128 = 0;
      }
      uint64_t v44 = 0;
      long long v45 = 0;
      *uint64_t v3 = 0;
      v3[1] = 0;
      v130 = v3[3];
      if (v130)
      {
        if (v127)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v130 + 16))(v130, v128, v127);
          long long v45 = *v3;
          uint64_t v44 = v3[1];
        }
        else
        {
          uint64_t v44 = 0;
          long long v45 = 0;
        }
      }
      goto LABEL_185;
    case 0xA08:
      IPC::ArgumentCoder<WebCore::ApplePayPaymentAuthorizationResult,void>::decode((IPC::Decoder *)a3, &v176);
      if (v182) {
        goto LABEL_36;
      }
      int v112 = *v3;
      v113 = v3[1];
      *uint64_t v3 = 0;
      v3[1] = 0;
      uint64_t v114 = v3[3];
      if (!v114 || !v113) {
        goto LABEL_182;
      }
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v114 + 16))(v114, v112);
      if (!v182) {
        goto LABEL_244;
      }
LABEL_36:
      LOWORD(cf) = (_WORD)v176;
      uint64_t v34 = v177;
      char v177 = 0;
      v162 = v34;
      uint64_t v35 = v178;
      uint64_t v178 = 0;
      uint64_t v163 = v35;
      LOBYTE(v164) = 0;
      char v166 = 0;
      if (v181)
      {
        long long v36 = v179;
        long long v179 = 0u;
        long long v164 = v36;
        long long v37 = v180;
        long long v180 = 0u;
        *(_OWORD *)v165 = v37;
        char v166 = 1;
      }
      char v167 = 1;
      std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v179, v33);
      WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v177, v38);
      WebKit::WebPaymentCoordinatorProxy::completePaymentSession((uint64_t)this, (WebCore::ApplePayPaymentAuthorizationResult *)&cf);
      if (v167)
      {
        std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v164, v39);
        WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v162, v40);
      }
      return;
    case 0xA09:
      v53 = a3[1];
      uint64_t v54 = *v3;
      unint64_t v55 = v3[2] - *v3;
      if ((unint64_t)v53 <= v55)
      {
        v134 = 0;
        v135 = 0;
        *uint64_t v3 = 0;
        v3[1] = 0;
        uint64_t v136 = v3[3];
        if (v136)
        {
          if (v53)
          {
            (*(void (**)(WTF::StringImpl *))(*(void *)v136 + 16))(v136);
            v135 = *v3;
            v134 = v3[1];
          }
          else
          {
            v134 = 0;
            v135 = 0;
          }
        }
      }
      else
      {
        long long v56 = (unsigned __int8 *)v54 + v55;
        v3[2] = (WTF::StringImpl *)(v56 + 1);
        if (v54)
        {
          unsigned int v57 = *v56;
          if (v57 < 2)
          {
            if (!v57)
            {
              LOBYTE(cf) = 0;
              LOBYTE(v173) = 0;
              LOBYTE(v176) = 0;
              LOBYTE(v189) = 0;
              char v190 = 1;
              std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&cf, v54);
              goto LABEL_104;
            }
            IPC::ArgumentCoder<WebCore::ApplePayShippingContactUpdate,void>::decode(v3, &cf);
            if ((_BYTE)v173
              || (v58 = *v3, v156 = v3[1], *uint64_t v3 = 0, v3[1] = 0, (v157 = v3[3]) != 0)
              && v156
              && ((*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v157 + 16))(v157, v58),
                  (_BYTE)v173))
            {
              std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplePayShippingContactUpdate>((uint64_t)&v176, (uint64_t)&cf);
              char v59 = 1;
            }
            else
            {
              char v59 = 0;
              LOBYTE(v176) = 0;
            }
            char v190 = v59;
            std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&cf, v58);
            if (!v190) {
              goto LABEL_194;
            }
LABEL_104:
            if (v190)
            {
              LOBYTE(cf) = 0;
              LOBYTE(v173) = 0;
              if ((_BYTE)v189)
              {
                WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)&cf, (uint64_t)&v176);
                uint64_t v80 = v185;
                uint64_t v185 = 0;
                uint64_t v169 = v80;
                uint64_t v81 = v186;
                uint64_t v186 = 0;
                uint64_t v170 = v81;
                uint64_t v82 = v187;
                uint64_t v187 = 0;
                uint64_t v171 = v82;
                uint64_t v83 = v188;
                uint64_t v188 = 0;
                uint64_t v172 = v83;
                LOBYTE(v173) = 1;
                char v174 = 1;
                if (!v190)
                {
LABEL_110:
                  WebKit::WebPaymentCoordinatorProxy::completeShippingContactSelection((uint64_t)this, &cf);
                  if (v174) {
                    goto LABEL_86;
                  }
                  return;
                }
              }
              else
              {
                char v174 = 1;
              }
              std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&v176, v60);
              if (v174) {
                goto LABEL_110;
              }
            }
            else
            {
              LOBYTE(cf) = 0;
              char v174 = 0;
            }
            uint64_t v144 = *v3;
            uint64_t v145 = v3[1];
            *uint64_t v3 = 0;
            v3[1] = 0;
            uint64_t v146 = v3[3];
            if (!v146) {
              return;
            }
            if (!v145) {
              return;
            }
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v146 + 16))(v146, v144);
            if (!v174) {
              return;
            }
            goto LABEL_110;
          }
LABEL_192:
          *uint64_t v3 = 0;
          v3[1] = 0;
          uint64_t v138 = v3[3];
          if (v138 && v53) {
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v138 + 16))(v138, v54);
          }
          LOBYTE(v176) = 0;
          char v190 = 0;
LABEL_194:
          unint64_t v60 = *v3;
          int v139 = v3[1];
          *uint64_t v3 = 0;
          v3[1] = 0;
          uint64_t v140 = v3[3];
          if (v140 && v139) {
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v140 + 16))(v140, v60);
          }
          goto LABEL_104;
        }
        v134 = v53;
        v135 = 0;
      }
      v53 = 0;
      uint64_t v54 = 0;
      *uint64_t v3 = 0;
      v3[1] = 0;
      unsigned int v137 = v3[3];
      if (v137)
      {
        if (v134)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v137 + 16))(v137, v135, v134);
          uint64_t v54 = *v3;
          v53 = v3[1];
        }
        else
        {
          v53 = 0;
          uint64_t v54 = 0;
        }
      }
      goto LABEL_192;
    case 0xA0A:
      BOOL v20 = a3[1];
      uint64_t v21 = *v3;
      unint64_t v22 = v3[2] - *v3;
      if ((unint64_t)v20 <= v22)
      {
        BOOL v107 = 0;
        v108 = 0;
        *uint64_t v3 = 0;
        v3[1] = 0;
        uint64_t v109 = v3[3];
        if (v109)
        {
          if (v20)
          {
            (*(void (**)(WTF::StringImpl *))(*(void *)v109 + 16))(v109);
            v108 = *v3;
            BOOL v107 = v3[1];
          }
          else
          {
            BOOL v107 = 0;
            v108 = 0;
          }
        }
      }
      else
      {
        uint64_t v23 = (unsigned __int8 *)v21 + v22;
        v3[2] = (WTF::StringImpl *)(v23 + 1);
        if (v21)
        {
          unsigned int v24 = *v23;
          if (v24 < 2)
          {
            if (v24)
            {
              IPC::ArgumentCoder<WebCore::ApplePayShippingMethodUpdate,void>::decode(v3, (uint64_t)&cf);
              if ((_BYTE)v171
                || (v25 = *v3, v152 = v3[1], *uint64_t v3 = 0, v3[1] = 0, (v153 = v3[3]) != 0)
                && v152
                && ((*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v153 + 16))(v153, v25),
                    (_BYTE)v171))
              {
                WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)&v176, (uint64_t)&cf);
                uint64_t v26 = v169;
                uint64_t v169 = 0;
                uint64_t v185 = v26;
                uint64_t v27 = v170;
                uint64_t v170 = 0;
                uint64_t v186 = v27;
                char v28 = 1;
                LOBYTE(v187) = 1;
              }
              else
              {
                char v28 = 0;
                LOBYTE(v176) = 0;
              }
            }
            else
            {
              LOBYTE(cf) = 0;
              LOBYTE(v171) = 0;
              std::__optional_copy_assign_base<WebCore::ApplePayShippingMethodUpdate,false>::__optional_copy_assign_base[abi:sn180100](&v176, (uint64_t)&cf);
              char v28 = 1;
            }
            LOBYTE(v188) = v28;
            std::__optional_destruct_base<WebCore::ApplePayShippingMethodUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&cf, v25);
            goto LABEL_89;
          }
LABEL_164:
          *uint64_t v3 = 0;
          v3[1] = 0;
          uint64_t v111 = v3[3];
          if (v111 && v20) {
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v111 + 16))(v111, v21);
          }
          LOBYTE(v176) = 0;
          LOBYTE(v188) = 0;
LABEL_89:
          if ((_BYTE)v188
            || (v118 = *v3, v119 = v3[1], *uint64_t v3 = 0, v3[1] = 0, (v120 = v3[3]) != 0)
            && v119
            && ((*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v120 + 16))(v120, v118),
                (_BYTE)v188))
          {
            std::__optional_copy_assign_base<WebCore::ApplePayShippingMethodUpdate,false>::__optional_copy_assign_base[abi:sn180100](&cf, (uint64_t)&v176);
            LOBYTE(v172) = 1;
            if (!(_BYTE)v188
              || (std::__optional_destruct_base<WebCore::ApplePayShippingMethodUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&v176, v72), (_BYTE)v172))
            {
LABEL_92:
              WebKit::WebPaymentCoordinatorProxy::completeShippingMethodSelection((uint64_t)this, &cf);
              if ((_BYTE)v172) {
                std::__optional_destruct_base<WebCore::ApplePayShippingMethodUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&cf, v73);
              }
              return;
            }
          }
          else
          {
            LOBYTE(cf) = 0;
            LOBYTE(v172) = 0;
          }
          v121 = *v3;
          uint64_t v122 = v3[1];
          *uint64_t v3 = 0;
          v3[1] = 0;
          v123 = v3[3];
          if (!v123) {
            return;
          }
          if (!v122) {
            return;
          }
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v123 + 16))(v123, v121);
          if (!(_BYTE)v172) {
            return;
          }
          goto LABEL_92;
        }
        BOOL v107 = v20;
        v108 = 0;
      }
      BOOL v20 = 0;
      uint64_t v21 = 0;
      *uint64_t v3 = 0;
      v3[1] = 0;
      v110 = v3[3];
      if (v110)
      {
        if (v107)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v110 + 16))(v110, v108, v107);
          uint64_t v21 = *v3;
          BOOL v20 = v3[1];
        }
        else
        {
          BOOL v20 = 0;
          uint64_t v21 = 0;
        }
      }
      goto LABEL_164;
    case 0xA0B:
      uint64_t v52 = this + 10;
      [objc_loadWeak(this + 10) dismissViewControllerAnimated:1 completion:0];
      objc_storeWeak(v52, 0);
      return;
    case 0xA0C:
      IPC::Decoder::decode<WebKit::PaymentSetupConfiguration>((uint64_t)&v176, (IPC::Decoder *)a3);
      char v7 = (char)v183;
      if ((_BYTE)v183)
      {
        std::__tuple_leaf<0ul,WebKit::PaymentSetupConfiguration,false>::__tuple_leaf[abi:sn180100]<WebKit::PaymentSetupConfiguration,void>((uint64_t)&cf, (uint64_t *)&v176);
        char v7 = 1;
      }
      else
      {
        LOBYTE(cf) = 0;
      }
      char v168 = v7;
      std::__optional_destruct_base<WebKit::PaymentSetupConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v176, v6);
      if (v168) {
        goto LABEL_69;
      }
      goto LABEL_151;
    case 0xA0D:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String>>((IPC::Decoder *)a3, &v176);
      if (!(_BYTE)v178) {
        goto LABEL_31;
      }
      uint64_t v17 = (const void *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
      if (!(_BYTE)v16) {
        goto LABEL_31;
      }
      CFTypeRef cf = v17;
      uint64_t v3 = &v162;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v162, a2);
      uint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v18 = &unk_1EEA03BA0;
      v18[1] = cf;
      uint64_t v19 = v162;
      v162 = 0;
      _OWORD v18[2] = v19;
      v192 = v18;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v162);
      if (!(_BYTE)v178) {
        goto LABEL_150;
      }
      WebKit::WebPaymentCoordinatorProxy::openPaymentSetup((uint64_t)this, &v176, &v177, (uint64_t *)&v192);
LABEL_29:
      uint64_t v32 = v192;
      v192 = 0;
      if (v32) {
        (*(void (**)(const void *))(*(void *)v32 + 8))(v32);
      }
LABEL_31:
      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v176, v16);
      return;
    default:
      return;
  }
}

uint64_t WebKit::WebPaymentCoordinatorProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, IPC::Encoder **a4)
{
  uint64_t v4 = a4;
  int v7 = *((unsigned __int16 *)a3 + 25);
  if (v7 == 3820)
  {
    uint64_t v13 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
    if (!v14) {
      goto LABEL_34;
    }
    uint64_t v15 = (IPC::Encoder *)v13;
    uint64_t v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
    if (!v17) {
      goto LABEL_34;
    }
    uint64_t v18 = (atomic_uchar *volatile *)v16;
    IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v48);
    if (v49)
    {
      IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a3, v19, (uint64_t)&v50);
      if (v52)
      {
        IPC::ArgumentCoder<WebCore::ApplePaySessionPaymentRequest,void>::decode(a3, (WebCore::ApplePaySessionPaymentRequest *)&v53);
        if (v55
          || (BOOL v20 = *(void **)a3,
              uint64_t v39 = *((void *)a3 + 1),
              *(void *)a3 = 0,
              *((void *)a3 + 1) = 0,
              (uint64_t v40 = *((void *)a3 + 3)) != 0)
          && v39
          && ((*(void (**)(uint64_t, void *))(*(void *)v40 + 16))(v40, v20), v55))
        {
          if (!v49 || !v52) {
            goto LABEL_33;
          }
          long long v41 = v15;
          CFTypeRef v43 = v18;
          uint64_t v21 = v48;
          unsigned int v48 = 0;
          uint64_t v22 = (uint64_t)v50;
          char v50 = 0;
          uint64_t v44 = v21;
          v45[0] = v22;
          uint64_t v23 = v51;
          uint64_t v51 = 0;
          v45[1] = v23;
          WebCore::ApplePaySessionPaymentRequest::ApplePaySessionPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)v46, (const WebCore::ApplePaySessionPaymentRequest *)&v53);
          char v47 = 1;
          if (v55) {
            MEMORY[0x199738EC0](&v53);
          }
        }
        else
        {
          LOBYTE(v41) = 0;
          char v47 = 0;
        }
        if (v52) {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v20);
        }
      }
      else
      {
        LOBYTE(v41) = 0;
        char v47 = 0;
      }
      if (v49)
      {
        unsigned int v24 = v48;
        unsigned int v48 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2) {
            WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v20);
          }
          else {
            *(_DWORD *)v24 -= 2;
          }
        }
      }
    }
    else
    {
      LOBYTE(v41) = 0;
      char v47 = 0;
    }
    if (!v47) {
      goto LABEL_35;
    }
    while (1)
    {
      uint64_t v25 = *v4;
      *uint64_t v4 = 0;
      v53 = v25;
      uint64_t v4 = (IPC::Encoder **)v54;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v54, a2);
      uint64_t v26 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v26 = &unk_1EEA03C40;
      v26[1] = v53;
      uint64_t v27 = v54[0];
      v53 = 0;
      v54[0] = 0;
      v26[2] = v27;
      char v50 = v26;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v54);
      uint64_t v29 = v53;
      v53 = 0;
      if (v29)
      {
        IPC::Encoder::~Encoder(v29, v28);
        WTF::fastFree(v35, v36);
      }
      if (v47) {
        break;
      }
LABEL_33:
      __break(1u);
LABEL_34:
      LOBYTE(v41) = 0;
      char v47 = 0;
LABEL_35:
      long long v37 = *(void **)a3;
      uint64_t v38 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t result = *((void *)a3 + 3);
      if (!result) {
        return result;
      }
      if (v38)
      {
        (*(void (**)(uint64_t, void *))(*(void *)result + 16))(result, v37);
        if (v47) {
          continue;
        }
      }
      return 0;
    }
    WebKit::WebPaymentCoordinatorProxy::showPaymentUI(a1, (uint64_t)v41, (uint64_t)v43, &v44, (uint64_t)v45, (uint64_t)v46, (uint64_t *)&v50);
    uint64_t v30 = (uint64_t)v50;
    char v50 = 0;
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
    if (v47)
    {
      MEMORY[0x199738EC0](v46);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v31);
      uint64_t v33 = v44;
      uint64_t v44 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2) {
          WTF::StringImpl::destroy(v33, v32);
        }
        else {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    return 1;
  }
  if (v7 == 3819)
  {
    long long v8 = *a4;
    *a4 = 0;
    char v42 = v8;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, a2);
    long long v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
    *(void *)long long v9 = &unk_1EEA03C18;
    *((void *)v9 + 1) = v42;
    unint64_t v10 = v43;
    CFTypeRef v43 = 0;
    *((void *)v9 + 2) = v10;
    v53 = v9;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v43);
    WebKit::WebPaymentCoordinatorProxy::canMakePayments(a1, &v53);
    int v11 = v53;
    v53 = 0;
    if (v11) {
      (*(void (**)(IPC::Encoder *))(*(void *)v11 + 8))(v11);
    }
    return 1;
  }
  return 0;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy29CanMakePaymentsWithActiveCardEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03B78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy29CanMakePaymentsWithActiveCardEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA03B78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy29CanMakePaymentsWithActiveCardEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  CFTypeRef v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)CFTypeRef v5 = 3526;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unsigned int v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unsigned int v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy16OpenPaymentSetupEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03BA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy16OpenPaymentSetupEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA03BA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy16OpenPaymentSetupEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  CFTypeRef v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)CFTypeRef v5 = 3528;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unsigned int v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unsigned int v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

WebCore::ApplePayDetailsUpdateBase *std::__optional_destruct_base<WebCore::ApplePayShippingMethodUpdate,false>::~__optional_destruct_base[abi:sn180100](WebCore::ApplePayDetailsUpdateBase *a1, void *a2)
{
  if (*((unsigned char *)a1 + 632))
  {
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 616, a2);
    WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase(a1, v3);
  }
  return a1;
}

double std::__optional_copy_assign_base<WebCore::ApplePayShippingMethodUpdate,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[632] = 0;
  if (*(unsigned char *)(a2 + 632))
  {
    uint64_t updated = WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)a1, a2);
    double result = 0.0;
    *(_OWORD *)(updated + 616) = 0u;
    uint64_t v5 = *(void *)(a2 + 616);
    *(void *)(a2 + 616) = 0;
    *(void *)(updated + 616) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 624);
    *(_DWORD *)(a2 + 624) = 0;
    *(_DWORD *)(updated + 624) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 628);
    *(_DWORD *)(a2 + 628) = 0;
    *(_DWORD *)(updated + 628) = v5;
    *(unsigned char *)(updated + 632) = 1;
  }
  return result;
}

WebCore::ApplePayDetailsUpdateBase *std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::~__optional_destruct_base[abi:sn180100](WebCore::ApplePayDetailsUpdateBase *a1, void *a2)
{
  if (*((unsigned char *)a1 + 648))
  {
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 632, a2);
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 616, v3);
    WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase(a1, v4);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::ApplePayPaymentMethodUpdate,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 656))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 648);
    *(void *)(a1 + 648) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 632, a2);
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 616, v4);
    WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)a1, v5);
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WebKit::PaymentSetupConfiguration>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::PaymentSetupConfiguration,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 80))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t std::__tuple_leaf<0ul,WebKit::PaymentSetupConfiguration,false>::__tuple_leaf[abi:sn180100]<WebKit::PaymentSetupConfiguration,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  *(void *)a1 = v3;
  uint64_t v4 = a2[1];
  a2[1] = 0;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2[2];
  a2[2] = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2[3];
  a2[3] = 0;
  *(void *)(a1 + 24) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(a1 + 36) = v6;
  WTF::URL::URL(a1 + 40, a2 + 5);
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::PaymentSetupConfiguration,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t v7 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v4);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy16GetSetupFeaturesEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS7_25PaymentSetupConfigurationEONS_17CompletionHandlerIFvONS7_20PaymentSetupFeaturesEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03BC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy16GetSetupFeaturesEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS7_25PaymentSetupConfigurationEONS_17CompletionHandlerIFvONS7_20PaymentSetupFeaturesEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA03BC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy16GetSetupFeaturesEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS7_25PaymentSetupConfigurationEONS_17CompletionHandlerIFvONS7_20PaymentSetupFeaturesEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, NSArray **a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3527;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::encodeObjectDirectly<NSArray>(v5, *a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy18BeginApplePaySetupEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS7_25PaymentSetupConfigurationERKNS7_20PaymentSetupFeaturesEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03BF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy18BeginApplePaySetupEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS7_25PaymentSetupConfigurationERKNS7_20PaymentSetupFeaturesEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA03BF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy18BeginApplePaySetupEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS7_25PaymentSetupConfigurationERKNS7_20PaymentSetupFeaturesEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3525;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unsigned int v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unsigned int v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26WebPaymentCoordinatorProxy15CanMakePaymentsEN6WebKit26WebPaymentCoordinatorProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03C18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26WebPaymentCoordinatorProxy15CanMakePaymentsEN6WebKit26WebPaymentCoordinatorProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03C18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26WebPaymentCoordinatorProxy15CanMakePaymentsEN6WebKit26WebPaymentCoordinatorProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26WebPaymentCoordinatorProxy13ShowPaymentUIEN6WebKit26WebPaymentCoordinatorProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENS9_INS7_26WebPageProxyIdentifierTypeESD_yLSE_1EEERKNS_6StringERKNS_6VectorISI_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNSA_29ApplePaySessionPaymentRequestEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03C40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26WebPaymentCoordinatorProxy13ShowPaymentUIEN6WebKit26WebPaymentCoordinatorProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENS9_INS7_26WebPageProxyIdentifierTypeESD_yLSE_1EEERKNS_6StringERKNS_6VectorISI_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNSA_29ApplePaySessionPaymentRequestEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA03C40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26WebPaymentCoordinatorProxy13ShowPaymentUIEN6WebKit26WebPaymentCoordinatorProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENS9_INS7_26WebPageProxyIdentifierTypeESD_yLSE_1EEERKNS_6StringERKNS_6VectorISI_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNSA_29ApplePaySessionPaymentRequestEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::WebPreferences::isFeatureEnabled(WebKit::WebPreferences *this, const API::Feature *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 3);
  if (v3) {
    *(_DWORD *)v3 += 2;
  }
  uint64_t v4 = (uint64_t *)&unk_1EEA03C70;
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = v4 - 3;
    BOOL v7 = v5 != 0;
    uint64_t v8 = v5 - 1;
    uint64_t v9 = v7 ? v8 : 0;
    if (MEMORY[0x19972E990](v3, *(v4 - 3), v9)) {
      break;
    }
    v4 += 4;
    if (v6 + 4 == (uint64_t *)&WebKit::WebPreferences::setFeatureEnabledForKey(WTF::String const&,BOOL)::setters)
    {
      uint64_t v11 = 0;
      goto LABEL_13;
    }
  }
  unsigned int v12 = (uint64_t (*)(void *))*(v4 - 1);
  uint64_t v13 = (void *)((char *)this + (*v4 >> 1));
  if (*v4) {
    unsigned int v12 = *(uint64_t (**)(void *))(*v13 + v12);
  }
  uint64_t v11 = v12(v13);
LABEL_13:
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v10);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v11;
}

uint64_t WebKit::WebPreferences::setFeatureEnabled(WebKit::WebPreferences *this, const API::Feature *a2, char a3)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 3);
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    uint64_t v6 = v3;
    uint64_t result = WebKit::WebPreferences::setFeatureEnabledForKey(this, (const WTF::String *)&v6, a3);
    if (*(_DWORD *)v3 == 2)
    {
      return WTF::StringImpl::destroy(v3, v5);
    }
    else
    {
      *(_DWORD *)v3 -= 2;
    }
  }
  else
  {
    uint64_t v6 = 0;
    return WebKit::WebPreferences::setFeatureEnabledForKey(this, (const WTF::String *)&v6, a3);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setFeatureEnabledForKey(WebKit::WebPreferences *this, const WTF::String *a2, char a3)
{
  char v14 = a3;
  for (i = (uint64_t *)&unk_1EEA07E70; ; i += 4)
  {
    uint64_t v6 = *(i - 2);
    BOOL v7 = i - 3;
    BOOL v8 = v6 != 0;
    uint64_t v9 = v6 - 1;
    uint64_t v10 = v8 ? v9 : 0;
    uint64_t result = MEMORY[0x19972E990](*(void *)a2, *(i - 3), v10);
    if (result) {
      break;
    }
    if (v7 + 4 == (uint64_t *)off_1EEA0C058) {
      return result;
    }
  }
  unsigned int v12 = (uint64_t (*)(void *, char *))*(i - 1);
  uint64_t v13 = (void *)((char *)this + (*i >> 1));
  if (*i) {
    unsigned int v12 = *(uint64_t (**)(void *, char *))(*v13 + v12);
  }
  return v12(v13, &v14);
}

void *WebKit::WebPreferences::enableAllExperimentalFeatures(WebKit::WebPreferences *this)
{
  int v2 = *((_DWORD *)this + 26);
  if (!v2) {
    *((unsigned char *)this + 108) = 0;
  }
  *((_DWORD *)this + 26) = v2 + 1;
  BOOL v5 = 1;
  WebKit::WebPreferences::setGrammarAndSpellingPseudoElementsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setTargetTextPseudoElementEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setThumbAndTrackPseudoElementsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setSelectShowPickerEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setPageAtRuleMarginDescriptorsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setAbortSignalAnyOperationEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setAccessHandleEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setAllowWebGLInWorkers(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setPerElementSpeakerSelectionEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setExposeSpeakersEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setAlternateWebMPlayerEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setAsyncClipboardAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setExtendedAudioDescriptionsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setAudioDescriptionsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setDOMAudioSessionEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setDOMAudioSessionFullEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setBeaconAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setBroadcastChannelEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setBroadcastChannelOriginPartitioningEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSS3DTransformBackfaceVisibilityInteroperabilityEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSCounterStyleAtRuleImageSymbolsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSCounterStyleAtRulesEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSFontFaceSizeAdjustEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSStartingStyleAtRuleEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setAccentColorEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSAnchorPositioningEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSContentVisibilityEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSInputSecurityEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setMasonryEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSMotionPathEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSNestingEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setOverscrollBehaviorEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSPaintingAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSRhythmicSizingEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSScopeAtRuleEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSScrollAnchoringEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSTypedOMColorEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSAppearanceBaseEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSBackgroundClipBorderAreaEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSColorLayersEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSDPropertyEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSFieldSizingEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSFontVariantEmojiEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSLightDarkEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSLineClampEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSMarginTrimEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSRubyAlignEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSRubyOverhangEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSScrollbarColorEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSScrollbarGutterEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSScrollbarWidthEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSShapeFunctionEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSStyleQueriesEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSTextAutospaceEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSTextBoxTrimEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSTextGroupAlignEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSTextJustifyEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSTextSpacingEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSTextUnderlinePositionLeftRightEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSTextWrapStyleEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSTextWrapPrettyEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSOMViewScrollingAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCSSOMViewSmoothScrollingEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCanvasColorSpaceEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCanvasFiltersEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCanvasLayersEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setClearSiteDataHTTPHeaderEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCompressionStreamEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setContactPickerAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCookieStoreManagerEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCookieStoreAPIExtendedAttributesEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCookieStoreAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCrossDocumentViewTransitionsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCrossOriginEmbedderPolicyEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCrossOriginOpenerPolicyEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCustomStateSetEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setDeclarativeShadowRootsParserAPIsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setDeclarativeShadowRootsSerializerAPIsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setShouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaint(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setDeprecateAESCFBWebCryptoEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setDeprecateRSAESPKCSWebCryptoEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setDeprecationReportingEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setUAVisualTransitionDetectionEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setDigitalCredentialsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setDisallowSyncXHRDuringPageDismissalEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setEmbedElementEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCanvasFingerprintingQuirkEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setAuxclickEventEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setBackgroundFetchAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setCFNetworkNetworkLoaderEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setBlobFileAccessEnforcementEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setMediaSourceInlinePaintingEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setFetchPriorityEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setFileSystemAccessEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setFilterLinkDecorationByDefaultEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setFullScreenKeyboardLock(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setUseGPUProcessForCanvasRenderingEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setUseGPUProcessForDOMRenderingEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setGamepadTriggerRumbleEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setGamepadVibrationActuatorEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setGenericCueAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setGraphicsContextFiltersEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setDetailsNameAttributeEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setModelElementEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setModelDocumentEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setInvokerAttributesEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setPopoverAttributeEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setSwitchControlEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setHTTPSByDefaultEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setHighlightAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setImageAnimationControlEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setImageCaptureEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setJavaScriptEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setLazyIframeLoadingEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setLazyImageLoadingEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setLinkPreloadResponsiveImagesEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setLinkModulePreloadEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setLinkPreconnectEarlyHintsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setLinkPrefetchEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setLiveRangeSelectionEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setLoadWebArchiveWithEphemeralStorageEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setLocalStorageEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setLockdownFontParserEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setLoginStatusAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setManagedMediaSourceEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setManagedMediaSourceNeedsAirPlay(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setMediaCapabilitiesExtensionsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setMediaSessionEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setMediaRecorderEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setMediaSessionCaptureToggleAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setMediaSourceInWorkerEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setMediaStreamTrackProcessingEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setNavigationAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setNotificationsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setObservableEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setOffscreenCanvasInWorkersEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setOffscreenCanvasEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setOffscreenCanvasDeprecatedCommitEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setOpusDecoderEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setOverlappingBackingStoreProvidersEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setBlobRegistryTopOriginPartitioningEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setPermissionsAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setGetCoalescedEventsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setGetPredictedEventsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setPreferPageRenderingUpdatesNear60FPSEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setPrivateClickMeasurementFraudPreventionEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setPrivateTokenUsageByThirdPartyEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setGoogleAntiFlickerOptimizationQuirkEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setReadableByteStreamAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setRemotePlaybackEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setReportingEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setRequestVideoFrameCallbackEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setScreenOrientationLockingAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setScreenOrientationAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setScreenWakeLockAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setScreenCaptureEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setScrollToTextFragmentFeatureDetectionEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setScrollToTextFragmentGenerationEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setScrollToTextFragmentEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setScrollDrivenAnimationsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setSelectionAPIForShadowDOMEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setSendMouseEventsToDisabledFormControlsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setServiceWorkerNavigationPreloadEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setServiceWorkersEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setShapeDetection(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setSharedWorkerEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setSidewaysWritingModesEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setSpeechRecognitionEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setStorageAPIEstimateEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setStorageAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setProcessSwapOnCrossSiteNavigationEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setTrackConfigurationEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setTrustedTypesEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setIPAddressAndLocalhostMixedContentUpgradeTestingEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setUpgradeMixedContentEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setUserActivationAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setVerifyWindowOpenUserGestureFromUIProcess(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setVerticalFormControlsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setViewTransitionClassesEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setViewTransitionTypesEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setViewTransitionsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setVisualViewportAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setVorbisDecoderEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebAnimationsCustomEffectsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebAnimationsCustomFrameRateEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebCryptoSafeCurvesEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebCryptoX25519Enabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebLocksAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebShareFileAPIEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebAssemblyESMIntegrationEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebCodecsAV1Enabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebCodecsAudioEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebCodecsHEVCEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebCodecsVideoEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebGLDraftExtensionsEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebGLEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebRTCAV1CodecEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebRTCEncodedTransformEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebRTCH265CodecEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebRTCSFrameTransformEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebRTCVP9Profile2CodecEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWebTransportEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWheelEventGesturesBecomeNonBlocking(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setWritingSuggestionsAttributeEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setAlignContentOnBlocksEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setAltitudeAngleEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setAzimuthAngleEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setElementCheckVisibilityEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setHTTPEquivEnabled(this, &v5);
  BOOL v5 = 1;
  WebKit::WebPreferences::setRequestIdleCallbackEnabled(this, &v5);
  BOOL v5 = 1;
  uint64_t result = WebKit::WebPreferences::setCSSWordBreakAutoPhraseEnabled(this, &v5);
  int v4 = *((_DWORD *)this + 26) - 1;
  *((_DWORD *)this + 26) = v4;
  if (!v4 && *((unsigned char *)this + 108))
  {
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::resetAllInternalDebugFeatures(WebKit::WebPreferences *this)
{
  int v2 = *((_DWORD *)this + 26);
  if (!v2) {
    *((unsigned char *)this + 108) = 0;
  }
  *((_DWORD *)this + 26) = v2 + 1;
  BOOL v18 = 0;
  WebKit::WebPreferences::setAcceleratedFiltersEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setDOMTestingAPIsEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setAllowViewportShrinkToFitContent(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setAlwaysAllowLocalWebarchive(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setSWVPDecodersAlwaysEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setAppBadgeEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setAppHighlightsEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setAsyncFrameScrollingEnabled(this, &v18);
  BOOL v18 = 1;
  uint64_t v3 = (WebCore::CocoaApplication *)WebKit::WebPreferences::setAsyncOverflowScrollingEnabled(this, &v18);
  char isIBooks = WebCore::CocoaApplication::isIBooks(v3);
  char isAsyncTextInputFeatureFlagEnabled = 0;
  if ((isIBooks & 1) == 0) {
    char isAsyncTextInputFeatureFlagEnabled = WebKit::isAsyncTextInputFeatureFlagEnabled(0);
  }
  BOOL v18 = isAsyncTextInputFeatureFlagEnabled;
  WebKit::WebPreferences::setUseAsyncUIKitInteractions(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setAutomaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidth(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setBuiltInNotificationsEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setSpringTimingFunctionEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setCSSLineFitEdgeEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setCaptureAudioInUIProcessEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setCaptureVideoInUIProcessEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setChildProcessDebuggabilityEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setClientBadgeEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setCompositingBordersVisible(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setCompositingRepaintCountersVisible(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setCookieConsentAPIEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setDOMPasteAccessRequestsEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setZoomOnDoubleTapWhenRoot(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setAlwaysZoomOnDoubleTap(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setDeclarativeWebPush(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setDisableScreenSizeOverride(this, &v18);
  {
    char v6 = WebKit::defaultShouldDropNearSuspendedAssertionAfterDelay(void)::newSDK;
  }
  else
  {
    char v6 = WTF::linkedOnOrAfterSDKWithBehavior();
    WebKit::defaultShouldDropNearSuspendedAssertionAfterDelay(void)::newSDK = v6;
  }
  BOOL v18 = v6;
  BOOL v7 = (WebKit *)WebKit::WebPreferences::setShouldDropNearSuspendedAssertionAfterDelay(this, &v18);
  BOOL v18 = WebKit::defaultAutomaticLiveResizeEnabled(v7);
  WebKit::WebPreferences::setAutomaticLiveResizeEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setEnumeratingAllNetworkInterfacesEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setEnumeratingVisibleNetworkInterfacesEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setICECandidateFilteringEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setMockCaptureDevicesEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setExperimentalSandboxEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setEnterKeyHintEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setEventHandlerDrivenSmoothKeyboardScrollingEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setPreferFasterClickOverDoubleTap(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setFasterClicksEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setRestrictedHTTPResponseAccess(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setForceAlwaysUserScalable(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setCaptureAudioInGPUProcessEnabled(this, &v18);
  BOOL v18 = 1;
  BOOL v8 = (WebCore::IOSApplication *)WebKit::WebPreferences::setBlockMediaLayerRehostingInWebContentProcess(this, &v18);
  isMobileSafari = (WebCore::IOSApplication *)WebCore::IOSApplication::isMobileSafari(v8);
  char v10 = 0;
  if ((isMobileSafari & 1) == 0) {
    char v10 = WebCore::IOSApplication::isSafariViewService(isMobileSafari) ^ 1;
  }
  BOOL v18 = v10;
  WebKit::WebPreferences::setManageCaptureStatusBarInGPUProcessEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setCaptureVideoInGPUProcessEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setUseGPUProcessForWebGLEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setAcceleratedDrawingEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setBlockIOKitInWebContentSandbox(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setIgnoreIframeEmbeddingProtectionsEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setImageAnalysisDuringFindInPageEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setInWindowFullscreenEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setKeyboardDismissalGestureEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setLayerBasedSVGEngineEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setLegacyOverflowScrollingTouchEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setLegacyLineLayoutVisualCoverageEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setMediaCaptureRequiresSecureConnection(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setLinkSanitizerEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setLocalFileContentSniffingEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setLogsPageMessagesToSystemConsoleEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setCoreMathMLEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setShouldUseModernAVContentKeySession(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setMomentumScrollingAnimatorEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setMouseEventsSimulationEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setMuteCameraOnMicrophoneInterruptionEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setNeedsInAppBrowserPrivacyQuirks(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setFlexFormattingContextIntegrationEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setNotificationEventEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setOpportunisticSweepingAndGarbageCollectionEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setPageVisibilityBasedProcessSuppressionEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setPhotoPickerPrefersOriginalImageFormat(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setPreferSandboxedMediaParsing(this, &v18);
  BOOL v18 = 0;
  uint64_t v11 = (WebKit *)WebKit::WebPreferences::setLegacyPluginQuirkForMailSignaturesEnabled(this, &v18);
  BOOL v18 = WebKit::defaultRemoveBackgroundEnabled(v11);
  WebKit::WebPreferences::setRemoveBackgroundEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setLoginStatusAPIRequiresWebAuthnEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setSpeakerSelectionRequiresUserGesture(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setGetUserMediaRequiresFocus(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setResourceLoadSchedulingEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setResourceUsageOverlayVisible(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setIsSameSiteStrictEnforcementEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setScrollingPerformanceTestingEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setSecureContextChecksEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setSiteIsolationEnabled(this, &v18);
  {
    char v12 = WebKit::defaultShouldTakeNearSuspendedAssertion(void)::newSDK;
  }
  else
  {
    char v12 = WTF::linkedOnOrAfterSDKWithBehavior();
    WebKit::defaultShouldTakeNearSuspendedAssertion(void)::newSDK = v12;
  }
  BOOL v18 = v12 ^ 1;
  WebKit::WebPreferences::setShouldTakeNearSuspendedAssertions(this, &v18);
  BOOL v18 = 1;
  uint64_t v13 = (WebKit *)WebKit::WebPreferences::setTextAnimationsEnabled(this, &v18);
  BOOL v18 = WebKit::defaultTextRecognitionInVideosEnabled(v13);
  WebKit::WebPreferences::setTextRecognitionInVideosEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setThreadedAnimationResolutionEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setTiledScrollingIndicatorVisible(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setUndoManagerAPIEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setUpgradeKnownHostsToHTTPSEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setUseARKitForModel(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setUseAVCaptureDeviceRotationCoordinatorAPI(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setUserGesturePromisePropagationEnabled(this, &v18);
  BOOL v18 = 1;
  char v14 = (WebKit *)WebKit::WebPreferences::setServiceWorkersUserGestureEnabled(this, &v18);
  BOOL v18 = WebKit::defaultVisualTranslationEnabled(v14);
  WebKit::WebPreferences::setVisualTranslationEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setWebAPIStatisticsEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setWebAPIsInShadowRealmEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setWebArchiveTestingModeEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setWebInspectorEngineeringSettingsAllowed(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setWebRTCAudioLatencyAdaptationEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setWebRTCDTMFEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setWebRTCH264HardwareEncoderEnabled(this, &v18);
  BOOL v18 = 0;
  WebKit::WebPreferences::setWebRTCMediaPipelineAdditionalLoggingEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setWebRTCRemoteVideoFrameEnabled(this, &v18);
  BOOL v18 = 1;
  WebKit::WebPreferences::setWebRTCSocketsProxyingEnabled(this, &v18);
  BOOL v18 = 1;
  uint64_t v15 = (WebKit *)WebKit::WebPreferences::setWebRTCVP9Profile0CodecEnabled(this, &v18);
  BOOL v18 = WebKit::isAsyncTextInputFeatureFlagEnabled(v15) ^ 1;
  WebKit::WebPreferences::setWriteRichTextDataWhenCopyingOrDragging(this, &v18);
  BOOL v18 = 0;
  uint64_t result = WebKit::WebPreferences::setRequestStorageAccessThrowsExceptionUntilReload(this, &v18);
  int v17 = *((_DWORD *)this + 26) - 1;
  *((_DWORD *)this + 26) = v17;
  if (!v17 && *((unsigned char *)this + 108))
  {
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setInspectorAttachedWidth(WebKit::WebPreferences *this, const unsigned int *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setNeedsFrameNameFallbackToIdQuirk(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::needsFrameNameFallbackToIdQuirk(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key, a3);
}

void *WebKit::WebPreferences::setNeedsAdobeFrameReloadingQuirk(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::needsAdobeFrameReloadingQuirk(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMockScrollbarsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mockScrollbarsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMockScrollbarsControllerEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mockScrollbarsControllerEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setExtensibleSSOEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::isExtensibleSSOEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setFTPDirectoryTemplatePath(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key, a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setMockCaptureDevicesPromptEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mockCaptureDevicesPromptEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setFantasyFontFamily(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key, a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setMinimumZoomFontSize(WebKit::WebPreferences *this, double *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setMinimumFontSize(WebKit::WebPreferences *this, double *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setMediaUserGestureInheritsFromDocument(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaUserGestureInheritsFromDocument(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key, a3);
}

void *WebKit::WebPreferences::setFixedFontFamily(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key, a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setMediaStreamEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaStreamEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMediaPreloadingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaPreloadingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setForceCompositingMode(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::forceCompositingMode(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key, a3);
}

void *WebKit::WebPreferences::setForceFTPDirectoryListings(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::forceFTPDirectoryListings(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key, a3);
}

void *WebKit::WebPreferences::setForceWebGLUsesLowPower(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::forceWebGLUsesLowPower(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setMediaPreferredFullscreenWidth(WebKit::WebPreferences *this, double *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setMediaEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::mediaDataLoadsAutomatically(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMediaControlsScaleWithPageZoom(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaControlsScaleWithPageZoom(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMediaControlsContextMenusEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaControlsContextMenusEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMediaCapabilitiesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaCapabilitiesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMathMLEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mathMLEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setManagedMediaSourceLowThreshold(WebKit::WebPreferences *this, double *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setManagedMediaSourceHighThreshold(WebKit::WebPreferences *this, double *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setHiddenPageCSSAnimationSuspensionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::hiddenPageCSSAnimationSuspensionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLowPowerVideoAudioBufferSizeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::lowPowerVideoAudioBufferSizeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLoadsImagesAutomatically(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::loadsImagesAutomatically(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLoadDeferringEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::loadDeferringEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLinkPreloadEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::linkPreloadEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLinkPreconnect(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreconnectKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreconnectKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkPreconnectKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::linkPreconnectKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::linkPreconnect(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreconnectKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreconnectKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLargeImageAsyncDecodingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::largeImageAsyncDecodingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setJavaScriptRuntimeFlags(WebKit::WebPreferences *this, const unsigned int *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::javaScriptMarkupEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::javaScriptCanOpenWindowsAutomatically(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key, a3);
}

void *WebKit::WebPreferences::setJavaScriptCanAccessClipboard(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::javaScriptCanAccessClipboard(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::invisibleAutoplayNotPermitted(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setInactiveMediaCaptureStreamRepromptIntervalInMinutes(WebKit::WebPreferences *this, double *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::incompleteImageBorderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setInterruptVideoOnPageVisibilityChangeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::interruptVideoOnPageVisibilityChangeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::inlineMediaPlaybackRequiresPlaysInlineAttribute(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key, a3);
}

void *WebKit::WebPreferences::setInterruptAudioOnPageVisibilityChangeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::interruptAudioOnPageVisibilityChangeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setInteractionRegionMinimumCornerRadius(WebKit::WebPreferences *this, double *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setInteractionRegionInlinePadding(WebKit::WebPreferences *this, double *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setInspectorStartsAttached(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::inspectorStartsAttached(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setInspectorAttachmentSide(WebKit::WebPreferences *this, const unsigned int *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setInspectorAttachedHeight(WebKit::WebPreferences *this, const unsigned int *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setAcceleratedCompositingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::acceleratedCompositingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAcceleratedCompositingForFixedPositionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::acceleratedCompositingForFixedPositionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWirelessPlaybackTargetAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::wirelessPlaybackTargetAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWindowFocusRestricted(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::windowFocusRestricted(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAggressiveTileRetentionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::aggressiveTileRetentionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebSocketEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webSocketEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAllowContentSecurityPolicySourceStarToMatchAnyProtocol(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::allowContentSecurityPolicySourceStarToMatchAnyProtocol(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAllowDisplayOfInsecureContent(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::allowDisplayOfInsecureContent(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAllowFileAccessFromFileURLs(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::allowFileAccessFromFileURLs(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAllowMultiElementImplicitSubmission(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::allowMultiElementImplicitSubmission(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAllowRunningOfInsecureContent(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::allowRunningOfInsecureContent(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::allowSettingAnyXHRHeaderFromFileURLs(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::allowTestOnlyIPC(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::allowsAirPlayForMediaPlayback(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::allowsInlineMediaPlayback(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::allowsInlineMediaPlaybackAfterFullscreen(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::allowsPictureInPictureMediaPlayback(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::alternateFormControlDesignEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAlternateFullScreenControlDesignEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::alternateFullScreenControlDesignEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebSecurityEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webSecurityEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebMParserEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webMParserEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAnimatedImageAsyncDecodingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::animatedImageAsyncDecodingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAppleMailPaginationQuirkEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::appleMailPaginationQuirkEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::applePayCapabilityDisclosureAllowed(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::applePayEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::applePayEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAsynchronousSpellCheckingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::asynchronousSpellCheckingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAudioControlsScaleWithPageZoom(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::audioControlsScaleWithPageZoom(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAuthorAndUserStylesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::authorAndUserStylesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebAudioEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webAudioEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWantsBalancedSetDefersLoadingBehavior(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::wantsBalancedSetDefersLoadingBehavior(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key, a3);
}

void *WebKit::WebPreferences::setVisualViewportEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::visualViewportEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setVisibleDebugOverlayRegions(WebKit::WebPreferences *this, const unsigned int *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setVideoQualityIncludesDisplayCompositingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::videoQualityIncludesDisplayCompositingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setBackspaceKeyNavigationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::backspaceKeyNavigationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setVideoPresentationModeAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::videoPresentationModeAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setVideoFullscreenRequiresElementFullscreen(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::videoFullscreenRequiresElementFullscreen(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key, a3);
}

void *WebKit::WebPreferences::setVP9DecoderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::vp9DecoderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setVP8DecoderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::vp8DecoderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::usesSingleWebProcess(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::key, a3);
}

void *WebKit::WebPreferences::setUsesEncodingDetector(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::usesEncodingDetector(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key, a3);
}

void *WebKit::WebPreferences::setUsesBackForwardCache(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::usesBackForwardCache(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key, a3);
}

void *WebKit::WebPreferences::setUsePreHTML5ParserQuirks(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::usePreHTML5ParserQuirks(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key, a3);
}

void *WebKit::WebPreferences::setUseImageDocumentForSubframePDF(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::useImageDocumentForSubframePDF(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key, a3);
}

void *WebKit::WebPreferences::setTreatsAnyTextCSSLinkAsStylesheet(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::treatsAnyTextCSSLinkAsStylesheet(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key, a3);
}

void *WebKit::WebPreferences::setThreadedScrollingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::threadedScrollingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setTextInteractionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::textInteractionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::textExtractionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setTextAutosizingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::textAutosizingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setTextAreasAreResizable(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::textAreasAreResizable(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key, a3);
}

void *WebKit::WebPreferences::setTemporaryTileCohortRetentionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::temporaryTileCohortRetentionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::telephoneNumberParsingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setTabsToLinks(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tabsToLinksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::tabsToLinksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::tabsToLinks(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tabsToLinksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::systemPreviewEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::suppressesIncrementalRendering(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key, a3);
}

void *WebKit::WebPreferences::setStandardFontFamily(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key, a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setStandalone(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::standaloneKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::standaloneKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::standaloneKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::standaloneKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::standalone(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::standaloneKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::standaloneKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSpatialNavigationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::spatialNavigationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSourceBufferChangeTypeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::sourceBufferChangeTypeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSmartInsertDeleteEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::smartInsertDeleteEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setShrinksStandaloneImagesToFit(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shrinksStandaloneImagesToFit(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key, a3);
}

void *WebKit::WebPreferences::setShowsURLsInToolTipsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::showsURLsInToolTipsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setShowsToolTipOverTruncatedText(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::showsToolTipOverTruncatedText(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key, a3);
}

void *WebKit::WebPreferences::setShouldUseServiceWorkerShortTimeout(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shouldUseServiceWorkerShortTimeout(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::shouldSuppressTextInputFromEditingDuringProvisionalNavigation(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::shouldRestrictBaseURLSchemes(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key, a3);
}

void *WebKit::WebPreferences::setShouldRespectImageOrientation(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shouldRespectImageOrientation(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCaretBrowsingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::caretBrowsingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::shouldPrintBackgrounds(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::shouldIgnoreMetaViewport(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key, a3);
}

void *WebKit::WebPreferences::setShouldEnableTextAutosizingBoost(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shouldEnableTextAutosizingBoost(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::colorFilterEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setShouldDisplayTextDescriptions(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shouldDisplayTextDescriptions(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key, a3);
}

void *WebKit::WebPreferences::setShouldDisplaySubtitles(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shouldDisplaySubtitles(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key, a3);
}

void *WebKit::WebPreferences::setShouldDisplayCaptions(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shouldDisplayCaptions(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::shouldDecidePolicyBeforeLoadingQuickLookPreview(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key, a3);
}

void *WebKit::WebPreferences::setContentChangeObserverEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::contentChangeObserverEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setContentDispositionAttachmentSandboxEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::contentDispositionAttachmentSandboxEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::shouldConvertPositionStyleOnCopy(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key, a3);
}

void *WebKit::WebPreferences::setShouldConvertInvalidURLsToBlank(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shouldConvertInvalidURLsToBlank(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::shouldAllowUserInstalledFonts(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::serviceWorkerEntitlementDisabledForTesting(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key, a3);
}

void *WebKit::WebPreferences::setServiceControlsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setSerifFontFamily(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key, a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setSelectTrailingWhitespaceEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::selectTrailingWhitespaceEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSansSerifFontFamily(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key, a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setCursiveFontFamily(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key, a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setDNSPrefetchingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::dnsPrefetchingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDOMPasteAllowed(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::domPasteAllowed(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::requiresUserGestureToLoadVideo(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::requiresUserGestureForVideoPlayback(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDatabasesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::databasesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::databasesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::databasesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::databasesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setRequiresUserGestureForMediaPlayback(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::requiresUserGestureForMediaPlayback(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::requiresUserGestureForAudioPlayback(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key, a3);
}

void *WebKit::WebPreferences::setRequiresPageVisibilityToPlayAudio(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::requiresPageVisibilityToPlayAudio(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPunchOutWhiteBackgroundsInDarkMode(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::punchOutWhiteBackgroundsInDarkMode(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setDefaultFixedFontSize(WebKit::WebPreferences *this, double *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setDefaultFontSize(WebKit::WebPreferences *this, double *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setDefaultTextEncodingName(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key, a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setPitchCorrectionAlgorithm(WebKit::WebPreferences *this, const unsigned int *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setPictureInPictureAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::pictureInPictureAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPictographFontFamily(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key, a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setDeveloperExtrasEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::developerExtrasEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDeviceOrientationEventEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::deviceOrientationEventEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::deviceOrientationPermissionAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPasswordEchoEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::passwordEchoEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPassiveTouchListenersAsDefaultOnDocument(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::passiveTouchListenersAsDefaultOnDocument(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDisabledAdaptationsMetaTagEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::disabledAdaptationsMetaTagEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPDFPluginHUDEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::pdfPluginHUDEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDownloadAttributeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::downloadAttributeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setEditableLinkBehavior(WebKit::WebPreferences *this, const unsigned int *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setPDFPluginEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::pdfPluginEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setEnableInheritURIQueryComponent(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::enableInheritURIQueryComponent(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key, a3);
}

void *WebKit::WebPreferences::setEncryptedMediaAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::encryptedMediaAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setNeedsKeyboardEventDisambiguationQuirks(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::needsKeyboardEventDisambiguationQuirks(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key, a3);
}

void *WebKit::WebPreferences::setGrammarAndSpellingPseudoElementsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::grammarAndSpellingPseudoElementsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setTargetTextPseudoElementEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::targetTextPseudoElementEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::targetTextPseudoElementEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setThumbAndTrackPseudoElementsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::thumbAndTrackPseudoElementsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSelectShowPickerEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::selectShowPickerEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPageAtRuleMarginDescriptorsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::pageAtRuleMarginDescriptorsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pageAtRuleMarginDescriptorsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAVFoundationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::isAVFoundationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAbortSignalAnyOperationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::abortSignalAnyOperationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAcceleratedFiltersEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::acceleratedFiltersEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAccessHandleEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::accessHandleEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDOMTestingAPIsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::domTestingAPIsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::allowMediaContentTypesRequiringHardwareSupportAsFallback(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAllowPrivacySensitiveOperationsInNonPersistentDataStores(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::allowPrivacySensitiveOperationsInNonPersistentDataStores(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAllowViewportShrinkToFitContent(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::allowViewportShrinkToFitContent(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAllowWebGLInWorkers(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::allowWebGLInWorkers(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPerElementSpeakerSelectionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::perElementSpeakerSelectionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setExposeSpeakersEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::exposeSpeakersEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::allowTopNavigationToDataURLs(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::allowUniversalAccessFromFileURLs(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAlternateWebMPlayerEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::alternateWebMPlayerEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAlwaysAllowLocalWebarchive(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::alwaysAllowLocalWebarchive(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSWVPDecodersAlwaysEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::sWVPDecodersAlwaysEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAppBadgeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::appBadgeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::appHighlightsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAsyncFrameScrollingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::asyncFrameScrollingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAsyncOverflowScrollingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::asyncOverflowScrollingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setUseAsyncUIKitInteractions(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::useAsyncUIKitInteractions(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAsyncClipboardAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::asyncClipboardAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::attachmentElementEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::attachmentWideLayoutEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setExtendedAudioDescriptionsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::extendedAudioDescriptionsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAudioDescriptionsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::audioDescriptionsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDOMAudioSessionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::domAudioSessionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDOMAudioSessionFullEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::domAudioSessionFullEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAutomaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidth(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidth(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::key, a3);
}

void *WebKit::WebPreferences::setBeaconAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::beaconAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setBroadcastChannelEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::broadcastChannelEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setBroadcastChannelOriginPartitioningEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::broadcastChannelOriginPartitioningEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setBuiltInNotificationsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::builtInNotificationsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSS3DTransformBackfaceVisibilityInteroperabilityEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::css3DTransformBackfaceVisibilityInteroperabilityEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSCounterStyleAtRuleImageSymbolsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssCounterStyleAtRuleImageSymbolsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSCounterStyleAtRulesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssCounterStyleAtRulesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSFontFaceSizeAdjustEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssFontFaceSizeAdjustEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSStartingStyleAtRuleEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssStartingStyleAtRuleEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAccentColorEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::accentColorEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSAnchorPositioningEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssAnchorPositioningEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSContentVisibilityEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssContentVisibilityEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSInputSecurityEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssInputSecurityEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMasonryEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::masonryEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::masonryEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::masonryEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::masonryEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::masonryEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::masonryEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::masonryEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSMotionPathEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssMotionPathEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSNestingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssNestingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setOverscrollBehaviorEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::overscrollBehaviorEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSPaintingAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssPaintingAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSRhythmicSizingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssRhythmicSizingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSScopeAtRuleEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssScopeAtRuleEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSScrollAnchoringEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssScrollAnchoringEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSpringTimingFunctionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::springTimingFunctionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSTypedOMColorEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssTypedOMColorEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSUnprefixedBackdropFilterEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssUnprefixedBackdropFilterEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSAppearanceBaseEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssAppearanceBaseEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssAppearanceBaseEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSBackgroundClipBorderAreaEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssBackgroundClipBorderAreaEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssBackgroundClipBorderAreaEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSColorLayersEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssColorLayersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssColorLayersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssColorLayersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssColorLayersEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssColorLayersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssColorLayersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssColorLayersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssColorLayersEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssColorLayersEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssColorLayersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssColorLayersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssColorLayersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssColorLayersEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSDPropertyEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssDPropertyEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSFieldSizingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssFieldSizingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSFontVariantEmojiEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssFontVariantEmojiEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSLightDarkEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssLightDarkEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSLineClampEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssLineClampEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssLineClampEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssLineClampEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssLineClampEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssLineClampEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssLineClampEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssLineClampEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssLineClampEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssLineClampEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssLineClampEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssLineClampEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssLineClampEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssLineClampEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSLineFitEdgeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssLineFitEdgeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSMarginTrimEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssMarginTrimEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSRubyAlignEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssRubyAlignEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssRubyAlignEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSRubyOverhangEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssRubyOverhangEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssRubyOverhangEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSScrollbarColorEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssScrollbarColorEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSScrollbarGutterEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssScrollbarGutterEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSScrollbarWidthEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssScrollbarWidthEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSShapeFunctionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssShapeFunctionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssShapeFunctionEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSStyleQueriesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssStyleQueriesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSTextAutospaceEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssTextAutospaceEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextAutospaceEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSTextBoxTrimEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssTextBoxTrimEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSTextGroupAlignEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssTextGroupAlignEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSTextJustifyEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssTextJustifyEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSTextSpacingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssTextSpacingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSTextUnderlinePositionLeftRightEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssTextUnderlinePositionLeftRightEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSTextWrapStyleEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssTextWrapStyleEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSTextWrapPrettyEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssTextWrapPrettyEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSOMViewScrollingAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssOMViewScrollingAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSOMViewSmoothScrollingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssOMViewSmoothScrollingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCacheAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cacheAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCanvasColorSpaceEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::canvasColorSpaceEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCanvasFiltersEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::canvasFiltersEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCanvasLayersEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::canvasLayersEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCanvasUsesAcceleratedDrawing(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::canvasUsesAcceleratedDrawing(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCaptureAudioInUIProcessEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::captureAudioInUIProcessEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCaptureVideoInUIProcessEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::captureVideoInUIProcessEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setChildProcessDebuggabilityEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::childProcessDebuggabilityEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::childProcessDebuggabilityEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setClearSiteDataHTTPHeaderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::clearSiteDataHTTPHeaderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setClientBadgeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::clientBadgeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setInputTypeColorEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::inputTypeColorEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCompositingBordersVisible(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::compositingBordersVisible(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCompositingRepaintCountersVisible(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::compositingRepaintCountersVisible(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCompressionStreamEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::compressionStreamEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setContactPickerAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::contactPickerAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCookieConsentAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cookieConsentAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCookieStoreManagerEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cookieStoreManagerEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCookieStoreAPIExtendedAttributesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cookieStoreAPIExtendedAttributesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCookieStoreAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cookieStoreAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCookieEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cookieEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cookieEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCrossDocumentViewTransitionsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::crossDocumentViewTransitionsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::crossDocumentViewTransitionsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCrossOriginEmbedderPolicyEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::crossOriginEmbedderPolicyEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCrossOriginOpenerPolicyEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::crossOriginOpenerPolicyEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCustomPasteboardDataEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::customPasteboardDataEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCustomStateSetEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::customStateSetEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDOMPasteAccessRequestsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::domPasteAccessRequestsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDOMTimersThrottlingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::domTimersThrottlingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setZoomOnDoubleTapWhenRoot(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::zoomOnDoubleTapWhenRoot(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAlwaysZoomOnDoubleTap(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::alwaysZoomOnDoubleTap(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDataTransferItemsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::dataTransferItemsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDataListElementEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::dataListElementEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setInputTypeDateEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::inputTypeDateEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDateTimeInputsEditableComponentsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::dateTimeInputsEditableComponentsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDeclarativeShadowRootsParserAPIsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::declarativeShadowRootsParserAPIsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDeclarativeShadowRootsSerializerAPIsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::declarativeShadowRootsSerializerAPIsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDeclarativeWebPush(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::declarativeWebPushKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeWebPushKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeWebPushKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::declarativeWebPushKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::declarativeWebPushKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::declarativeWebPushKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeWebPushKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::declarativeWebPushKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::declarativeWebPush(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::declarativeWebPushKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeWebPushKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeWebPushKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::declarativeWebPushKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaint(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDeprecateAESCFBWebCryptoEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::deprecateAESCFBWebCryptoEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDeprecateRSAESPKCSWebCryptoEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::deprecateRSAESPKCSWebCryptoEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDeprecationReportingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::deprecationReportingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setUAVisualTransitionDetectionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::uAVisualTransitionDetectionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::diagnosticLoggingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDigitalCredentialsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::digitalCredentialsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDirectoryUploadEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::directoryUploadEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setIsThirdPartyCookieBlockingDisabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::isThirdPartyCookieBlockingDisabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setIsFirstPartyWebsiteDataRemovalDisabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::isFirstPartyWebsiteDataRemovalDisabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDisableScreenSizeOverride(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::disableScreenSizeOverride(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDisallowSyncXHRDuringPageDismissalEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::disallowSyncXHRDuringPageDismissalEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setShouldDropNearSuspendedAssertionAfterDelay(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shouldDropNearSuspendedAssertionAfterDelay(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key, a3);
}

void *WebKit::WebPreferences::setEmbedElementEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::embedElementEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAutomaticLiveResizeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::automaticLiveResizeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCanvasFingerprintingQuirkEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::canvasFingerprintingQuirkEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::enumeratingAllNetworkInterfacesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setEnumeratingVisibleNetworkInterfacesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::enumeratingVisibleNetworkInterfacesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::iceCandidateFilteringEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::legacyEncryptedMediaAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::mockCaptureDevicesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAuxclickEventEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::auxclickEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::auxclickEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::auxclickEventEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::auxclickEventEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::auxclickEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::auxclickEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::auxclickEventEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::auxclickEventEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::auxclickEventEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::auxclickEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::auxclickEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::auxclickEventEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::auxclickEventEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setBackgroundWebContentRunningBoardThrottlingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::backgroundWebContentRunningBoardThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::backgroundWebContentRunningBoardThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backgroundWebContentRunningBoardThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::backgroundWebContentRunningBoardThrottlingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::backgroundWebContentRunningBoardThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::backgroundWebContentRunningBoardThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backgroundWebContentRunningBoardThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::backgroundWebContentRunningBoardThrottlingEnabledKey(void)::key, v6, 1);
  }
  return result;
}

void *WebKit::WebPreferences::setBackgroundFetchAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::backgroundFetchAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCFNetworkNetworkLoaderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cFNetworkNetworkLoaderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setExperimentalSandboxEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::experimentalSandboxEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setBlobFileAccessEnforcementEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::blobFileAccessEnforcementEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setEnterKeyHintEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::enterKeyHintEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setEventHandlerDrivenSmoothKeyboardScrollingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::eventHandlerDrivenSmoothKeyboardScrollingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMediaSourceInlinePaintingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaSourceInlinePaintingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setFTPEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ftpEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::ftpEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::ftpEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ftpEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPreferFasterClickOverDoubleTap(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::preferFasterClickOverDoubleTap(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::key, a3);
}

void *WebKit::WebPreferences::setFasterClicksEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::fasterClicksEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setFetchPriorityEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::fetchPriorityEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setFileSystemAccessEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::fileSystemAccessEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setFileReaderAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::fileReaderAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setRestrictedHTTPResponseAccess(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::restrictedHTTPResponseAccess(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key, a3);
}

void *WebKit::WebPreferences::setFilterLinkDecorationByDefaultEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::filterLinkDecorationByDefaultEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setForceAlwaysUserScalable(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::forceAlwaysUserScalable(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key, a3);
}

void *WebKit::WebPreferences::setFullScreenKeyboardLock(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::fullScreenKeyboardLock(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::fullScreenEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCaptureAudioInGPUProcessEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::captureAudioInGPUProcessEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setBlockMediaLayerRehostingInWebContentProcess(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::blockMediaLayerRehostingInWebContentProcess(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::key, a3);
}

void *WebKit::WebPreferences::setUseGPUProcessForCanvasRenderingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::useGPUProcessForCanvasRenderingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setManageCaptureStatusBarInGPUProcessEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::manageCaptureStatusBarInGPUProcessEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setUseGPUProcessForDOMRenderingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::useGPUProcessForDOMRenderingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setUseGPUProcessForMediaEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::useGPUProcessForMediaEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCaptureVideoInGPUProcessEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::captureVideoInGPUProcessEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setUseGPUProcessForWebGLEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::useGPUProcessForWebGLEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebRTCPlatformCodecsInGPUProcessEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCPlatformCodecsInGPUProcessEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setGamepadTriggerRumbleEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::gamepadTriggerRumbleEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setGamepadVibrationActuatorEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::gamepadVibrationActuatorEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setGamepadsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::gamepadsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setGenericCueAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::genericCueAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setGraphicsContextFiltersEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::graphicsContextFiltersEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAcceleratedDrawingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::acceleratedDrawingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setDetailsNameAttributeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::detailsNameAttributeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setModelElementEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::modelElementEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setModelDocumentEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::modelDocumentEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setInteractiveFormValidationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::interactiveFormValidationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setInvokerAttributesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::invokerAttributesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPopoverAttributeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::popoverAttributeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSwitchControlEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::switchControlEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setHTTPSByDefaultEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::httpSByDefaultEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setHiddenPageDOMTimerThrottlingAutoIncreases(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::hiddenPageDOMTimerThrottlingAutoIncreases(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key, a3);
}

void *WebKit::WebPreferences::setHiddenPageDOMTimerThrottlingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::hiddenPageDOMTimerThrottlingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setHighlightAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::highlightAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setHyperlinkAuditingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::hyperlinkAuditingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setBlockIOKitInWebContentSandbox(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::blockIOKitInWebContentSandbox(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::key, a3);
}

void *WebKit::WebPreferences::setItpDebugModeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::itpDebugModeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setTextAutosizingUsesIdempotentMode(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::textAutosizingUsesIdempotentMode(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key, a3);
}

void *WebKit::WebPreferences::setIgnoreIframeEmbeddingProtectionsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::ignoreIframeEmbeddingProtectionsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setImageAnalysisDuringFindInPageEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::imageAnalysisDuringFindInPageEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setImageAnimationControlEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::imageAnimationControlEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setImageCaptureEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::imageCaptureEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setImageControlsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::key, v6, 1);
  }
  return result;
}

void *WebKit::WebPreferences::setInWindowFullscreenEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::inWindowFullscreenEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setIndexedDBAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::indexedDBAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setIsAccessibilityIsolatedTreeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::javaScriptEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setKeyboardDismissalGestureEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::keyboardDismissalGestureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::keyboardDismissalGestureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::keyboardDismissalGestureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::keyboardDismissalGestureEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::keyboardDismissalGestureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::keyboardDismissalGestureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::keyboardDismissalGestureEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::keyboardDismissalGestureEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::keyboardDismissalGestureEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::keyboardDismissalGestureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::keyboardDismissalGestureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::keyboardDismissalGestureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::keyboardDismissalGestureEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLayerBasedSVGEngineEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::layerBasedSVGEngineEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLazyIframeLoadingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::lazyIframeLoadingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLazyImageLoadingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::lazyImageLoadingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLegacyOverflowScrollingTouchEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::legacyOverflowScrollingTouchEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLegacyLineLayoutVisualCoverageEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::legacyLineLayoutVisualCoverageEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setShowModalDialogEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::showModalDialogEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::mediaCaptureRequiresSecureConnection(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLinkSanitizerEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::linkSanitizerEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLinkPreloadResponsiveImagesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::linkPreloadResponsiveImagesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLinkModulePreloadEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::linkModulePreloadEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLinkPreconnectEarlyHintsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::linkPreconnectEarlyHintsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLinkPrefetchEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::linkPrefetchEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLiveRangeSelectionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::liveRangeSelectionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLoadWebArchiveWithEphemeralStorageEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::loadWebArchiveWithEphemeralStorageEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLocalFileContentSniffingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::localFileContentSniffingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLocalStorageEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::localStorageEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLockdownFontParserEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::lockdownFontParserEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLogsPageMessagesToSystemConsoleEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::logsPageMessagesToSystemConsoleEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLoginStatusAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::loginStatusAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::mainContentUserGestureOverrideEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setManagedMediaSourceEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::managedMediaSourceEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setManagedMediaSourceNeedsAirPlay(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::managedMediaSourceNeedsAirPlay(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCoreMathMLEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::coreMathMLEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMediaCapabilitiesExtensionsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaCapabilitiesExtensionsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMediaCapabilityGrantsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaCapabilityGrantsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMediaSessionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaSessionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::mediaSourceEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::mediaDevicesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMediaRecorderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaRecorderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMediaSessionCaptureToggleAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaSessionCaptureToggleAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSessionCaptureToggleAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMediaSourceInWorkerEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaSourceInWorkerEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMediaStreamTrackProcessingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaStreamTrackProcessingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setShouldUseModernAVContentKeySession(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shouldUseModernAVContentKeySession(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMomentumScrollingAnimatorEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::momentumScrollingAnimatorEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setInputTypeMonthEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::inputTypeMonthEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMouseEventsSimulationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mouseEventsSimulationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setMuteCameraOnMicrophoneInterruptionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::muteCameraOnMicrophoneInterruptionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setNavigationAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::navigationAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setNeedsInAppBrowserPrivacyQuirks(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::needsInAppBrowserPrivacyQuirks(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::needsSiteSpecificQuirks(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::needsStorageAccessFromFileURLsQuirk(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key, a3);
}

void *WebKit::WebPreferences::setFlexFormattingContextIntegrationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::flexFormattingContextIntegrationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setNotificationEventEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::notificationEventEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setNotificationsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::notificationsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setObservableEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::observableEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::observableEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::observableEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::observableEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::observableEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::observableEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::observableEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::observableEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::observableEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::observableEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::observableEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::observableEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::observableEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAccessibilityThreadTextApisEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::accessibilityThreadTextApisEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setOffscreenCanvasInWorkersEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::offscreenCanvasInWorkersEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setOffscreenCanvasEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::offscreenCanvasEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setOffscreenCanvasDeprecatedCommitEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::offscreenCanvasDeprecatedCommitEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setOpportunisticSweepingAndGarbageCollectionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::opportunisticSweepingAndGarbageCollectionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setOpusDecoderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::opusDecoderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setOverlappingBackingStoreProvidersEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::overlappingBackingStoreProvidersEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPageVisibilityBasedProcessSuppressionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::pageVisibilityBasedProcessSuppressionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setBlobRegistryTopOriginPartitioningEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::blobRegistryTopOriginPartitioningEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPermissionsAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::permissionsAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPhotoPickerPrefersOriginalImageFormat(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::photoPickerPrefersOriginalImageFormat(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::key, a3);
}

void *WebKit::WebPreferences::setGetCoalescedEventsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::getCoalescedEventsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::getCoalescedEventsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setGetPredictedEventsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::getPredictedEventsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::getPredictedEventsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPreferPageRenderingUpdatesNear60FPSEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::preferPageRenderingUpdatesNear60FPSEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPreferSandboxedMediaParsing(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::preferSandboxedMediaParsing(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPrivateClickMeasurementDebugModeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::privateClickMeasurementDebugModeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPrivateClickMeasurementFraudPreventionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::privateClickMeasurementFraudPreventionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPrivateClickMeasurementEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::privateClickMeasurementEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPrivateTokenUsageByThirdPartyEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::privateTokenUsageByThirdPartyEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPushAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::pushAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLegacyPluginQuirkForMailSignaturesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::legacyPluginQuirkForMailSignaturesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setGoogleAntiFlickerOptimizationQuirkEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::googleAntiFlickerOptimizationQuirkEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setReadableByteStreamAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::readableByteStreamAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setRemotePlaybackEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::remotePlaybackEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setRemoveBackgroundEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::removeBackgroundEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setReportingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::reportingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::reportingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::reportingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::reportingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::reportingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::reportingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::reportingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setRequestVideoFrameCallbackEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::requestVideoFrameCallbackEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLoginStatusAPIRequiresWebAuthnEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::loginStatusAPIRequiresWebAuthnEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSpeakerSelectionRequiresUserGesture(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::speakerSelectionRequiresUserGesture(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::key, a3);
}

void *WebKit::WebPreferences::setFullscreenRequirementForScreenOrientationLockingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::fullscreenRequirementForScreenOrientationLockingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setGetUserMediaRequiresFocus(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::getUserMediaRequiresFocus(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key, a3);
}

void *WebKit::WebPreferences::setResourceLoadSchedulingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::resourceLoadSchedulingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setResourceUsageOverlayVisible(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::resourceUsageOverlayVisible(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSKAttributionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::sKAttributionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::safeBrowsingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setIsSameSiteStrictEnforcementEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::isSameSiteStrictEnforcementEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setScreenOrientationLockingAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::screenOrientationLockingAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setScreenOrientationAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::screenOrientationAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setScreenWakeLockAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::screenWakeLockAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setScreenCaptureEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::screenCaptureEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setScrollingPerformanceTestingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::scrollingPerformanceTestingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setScrollToTextFragmentFeatureDetectionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::scrollToTextFragmentFeatureDetectionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setScrollToTextFragmentGenerationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::scrollToTextFragmentGenerationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::scrollToTextFragmentIndicatorEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::scrollToTextFragmentMarkingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setScrollToTextFragmentEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::scrollToTextFragmentEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setScrollAnimatorEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::scrollAnimatorEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setScrollDrivenAnimationsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::scrollDrivenAnimationsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSecureContextChecksEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::secureContextChecksEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSelectionAPIForShadowDOMEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::selectionAPIForShadowDOMEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSelectionFlippingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::selectionFlippingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSendMouseEventsToDisabledFormControlsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::sendMouseEventsToDisabledFormControlsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setServiceWorkerNavigationPreloadEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::serviceWorkerNavigationPreloadEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setServiceWorkersEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::serviceWorkersEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setShapeDetection(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shapeDetectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shapeDetectionKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shapeDetectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shapeDetectionKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shapeDetection(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shapeDetectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shapeDetectionKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSharedWorkerEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::sharedWorkerEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setShowMediaStatsContextMenuItemEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::showMediaStatsContextMenuItemEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSidewaysWritingModesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::sidewaysWritingModesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSiteIsolationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::siteIsolationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSpeechRecognitionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::speechRecognitionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setSpeechSynthesisAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::speechSynthesisAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setStorageAPIEstimateEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::storageAPIEstimateEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setStorageAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::storageAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setProcessSwapOnCrossSiteNavigationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::processSwapOnCrossSiteNavigationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setShouldTakeNearSuspendedAssertions(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shouldTakeNearSuspendedAssertions(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key, a3);
}

void *WebKit::WebPreferences::setTextAnimationsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::textAnimationsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setTextRecognitionInVideosEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::textRecognitionInVideosEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setThreadedAnimationResolutionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::threadedAnimationResolutionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setTiledScrollingIndicatorVisible(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::tiledScrollingIndicatorVisible(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key, a3);
}

void *WebKit::WebPreferences::setInputTypeTimeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::inputTypeTimeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setTrackConfigurationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::trackConfigurationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setTrustedTypesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::trustedTypesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::undoManagerAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setUnifiedPDFEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::unifiedPDFEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setIPAddressAndLocalhostMixedContentUpgradeTestingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::iPAddressAndLocalhostMixedContentUpgradeTestingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setUpgradeKnownHostsToHTTPSEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::upgradeKnownHostsToHTTPSEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setUpgradeMixedContentEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::upgradeMixedContentEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setUseARKitForModel(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useARKitForModelKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useARKitForModelKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useARKitForModelKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::useARKitForModelKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::useARKitForModel(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useARKitForModelKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useARKitForModelKey(void)::key, a3);
}

void *WebKit::WebPreferences::setUseAVCaptureDeviceRotationCoordinatorAPI(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::useAVCaptureDeviceRotationCoordinatorAPI(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::key, a3);
}

void *WebKit::WebPreferences::setUseGiantTiles(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGiantTilesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useGiantTilesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::useGiantTiles(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGiantTilesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::key, a3);
}

void *WebKit::WebPreferences::setUserActivationAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::userActivationAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setUserGesturePromisePropagationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::userGesturePromisePropagationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setServiceWorkersUserGestureEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::serviceWorkersUserGestureEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setVerifyWindowOpenUserGestureFromUIProcess(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::verifyWindowOpenUserGestureFromUIProcess(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key, a3);
}

void *WebKit::WebPreferences::setVerticalFormControlsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::verticalFormControlsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setViewTransitionClassesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::viewTransitionClassesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::viewTransitionClassesEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setViewTransitionTypesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::viewTransitionTypesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::viewTransitionTypesEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setViewTransitionsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::viewTransitionsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setViewGestureDebuggingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::viewGestureDebuggingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setVisualTranslationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::visualTranslationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setVisualViewportAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::visualViewportAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setVorbisDecoderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::vorbisDecoderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebAPIStatisticsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webAPIStatisticsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebAPIsInShadowRealmEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webAPIsInShadowRealmEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebAnimationsCustomEffectsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webAnimationsCustomEffectsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebAnimationsCustomFrameRateEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webAnimationsCustomFrameRateEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebArchiveDebugModeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webArchiveDebugModeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebArchiveTestingModeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webArchiveTestingModeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebAuthenticationASEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webAuthenticationASEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebAuthenticationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webAuthenticationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebCryptoSafeCurvesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webCryptoSafeCurvesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebCryptoX25519Enabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webCryptoX25519Enabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebLocksAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webLocksAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebShareFileAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webShareFileAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebShareEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webShareEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webShareEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webShareEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webShareEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebAssemblyESMIntegrationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webAssemblyESMIntegrationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebCodecsAV1Enabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webCodecsAV1Enabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebCodecsAudioEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webCodecsAudioEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebCodecsHEVCEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webCodecsHEVCEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebCodecsVideoEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webCodecsVideoEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebGLDraftExtensionsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webGLDraftExtensionsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebGLTimerQueriesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webGLTimerQueriesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebGLEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webGLEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebXRWebGPUBindingsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webXRWebGPUBindingsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebGPUEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webGPUEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebInspectorEngineeringSettingsAllowed(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webInspectorEngineeringSettingsAllowed(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebRTCAV1CodecEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCAV1CodecEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebRTCAudioLatencyAdaptationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCAudioLatencyAdaptationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebRTCDTMFEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCDTMFEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebRTCEncodedTransformEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCEncodedTransformEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebRTCH264HardwareEncoderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCH264HardwareEncoderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebRTCH265CodecEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCH265CodecEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebRTCMediaPipelineAdditionalLoggingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCMediaPipelineAdditionalLoggingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setLegacyWebRTCOfferOptionsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::legacyWebRTCOfferOptionsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyWebRTCOfferOptionsEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPeerConnectionVideoScalingAdaptationDisabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::peerConnectionVideoScalingAdaptationDisabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPeerConnectionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::peerConnectionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebRTCRemoteVideoFrameEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCRemoteVideoFrameEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebRTCSFrameTransformEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCSFrameTransformEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebRTCSocketsProxyingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCSocketsProxyingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebRTCVP9Profile0CodecEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCVP9Profile0CodecEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebRTCVP9Profile2CodecEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCVP9Profile2CodecEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWebTransportEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webTransportEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setInputTypeWeekEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::inputTypeWeekEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWheelEventGesturesBecomeNonBlocking(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::wheelEventGesturesBecomeNonBlocking(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key, a3);
}

void *WebKit::WebPreferences::setPassiveWheelListenersAsDefaultOnDocument(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::passiveWheelListenersAsDefaultOnDocument(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWriteRichTextDataWhenCopyingOrDragging(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::writeRichTextDataWhenCopyingOrDragging(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key, a3);
}

void *WebKit::WebPreferences::setWritingSuggestionsAttributeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::writingSuggestionsAttributeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setIsFirstPartyWebsiteDataRemovalLiveOnTestingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setIsFirstPartyWebsiteDataRemovalReproTestingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::isFirstPartyWebsiteDataRemovalReproTestingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAlignContentOnBlocksEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::alignContentOnBlocksEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAltitudeAngleEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::altitudeAngleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::altitudeAngleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::altitudeAngleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::altitudeAngleEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::altitudeAngleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::altitudeAngleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::altitudeAngleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::altitudeAngleEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::altitudeAngleEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::altitudeAngleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::altitudeAngleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::altitudeAngleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::altitudeAngleEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setAzimuthAngleEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::azimuthAngleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::azimuthAngleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::azimuthAngleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::azimuthAngleEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::azimuthAngleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::azimuthAngleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::azimuthAngleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::azimuthAngleEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::azimuthAngleEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::azimuthAngleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::azimuthAngleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::azimuthAngleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::azimuthAngleEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setInputTypeDateTimeLocalEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::inputTypeDateTimeLocalEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setElementCheckVisibilityEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::elementCheckVisibilityEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::httpEquivEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setRequestIdleCallbackEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::requestIdleCallbackEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key, a3);
}

void *WebKit::WebPreferences::setRequestStorageAccessThrowsExceptionUntilReload(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::requestStorageAccessThrowsExceptionUntilReload(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::key, a3);
}

void *WebKit::WebPreferences::setCSSWordBreakAutoPhraseEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  int v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssWordBreakAutoPhraseEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::key, a3);
}

uint64_t *WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssLineFitEdgeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::key;
}

uint64_t IPC::handleMessage<Messages::WebProcess::RegisterURLSchemeAsWebExtension,WebKit::WebProcess,WebKit::WebProcess,void ()(WTF::String const&)const>(IPC::Decoder *a1, WebKit::WebProcess *a2)
{
  IPC::Decoder::decode<std::tuple<WTF::String>>(a1, (uint64_t)&v5);
  if (v6) {
    WebKit::WebProcess::registerURLSchemeAsWebExtension(a2, &v5);
  }
  return std::__optional_destruct_base<std::tuple<WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v5, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess20InitializeWebProcessEN6WebKit10WebProcessES8_FvONS7_28WebProcessCreationParametersEONS_17CompletionHandlerIFvN7WebCore15ProcessIdentityEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C088;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t IPC::Decoder::decode<WebCore::PrewarmInformation>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PrewarmInformation,void>::decode(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 32))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v6 != 0)
    {
      BOOL v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess16FetchWebsiteDataEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEEONS_17CompletionHandlerIFvONS7_11WebsiteDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C0B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess16FetchWebsiteDataEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEEONS_17CompletionHandlerIFvONS7_11WebsiteDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C0B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess16FetchWebsiteDataEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEEONS_17CompletionHandlerIFvONS7_11WebsiteDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  BOOL v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v5 = 3540;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<WebKit::WebsiteData,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess17DeleteWebsiteDataEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C0D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess17DeleteWebsiteDataEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C0D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess17DeleteWebsiteDataEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3538;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess27DeleteWebsiteDataForOriginsEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEERKNS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C110;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess27DeleteWebsiteDataForOriginsEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEERKNS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C110;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess27DeleteWebsiteDataForOriginsEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEERKNS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3537;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess26DeleteWebsiteDataForOriginEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C138;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess26DeleteWebsiteDataForOriginEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C138;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess26DeleteWebsiteDataForOriginEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3536;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess32ReloadExecutionContextsForOriginEN6WebKit10WebProcessES8_FvRKN7WebCore12ClientOriginENSt3__18optionalINS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C160;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess32ReloadExecutionContextsForOriginEN6WebKit10WebProcessES8_FvRKN7WebCore12ClientOriginENSt3__18optionalINS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C160;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess32ReloadExecutionContextsForOriginEN6WebKit10WebProcessES8_FvRKN7WebCore12ClientOriginENSt3__18optionalINS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3546;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess16DeleteAllCookiesEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C188;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess16DeleteAllCookiesEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C188;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess16DeleteAllCookiesEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3535;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess16PrepareToSuspendEN6WebKit10WebProcessES8_FvbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C1B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess54EstablishRemoteWorkerContextConnectionToNetworkProcessEN6WebKit10WebProcessES8_FvNS7_16RemoteWorkerTypeENS_23ObjectIdentifierGenericINS7_23PageGroupIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSA_INS7_26WebPageProxyIdentifierTypeESD_yLSE_1EEENSA_IN7WebCore18PageIdentifierTypeESD_yLSE_0EEERKNS7_19WebPreferencesStoreEONSI_17RegistrableDomainENSt3__18optionalINSI_16ProcessQualifiedINS_4UUIDEEEEEONS7_30RemoteWorkerInitializationDataEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C1D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess54EstablishRemoteWorkerContextConnectionToNetworkProcessEN6WebKit10WebProcessES8_FvNS7_16RemoteWorkerTypeENS_23ObjectIdentifierGenericINS7_23PageGroupIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSA_INS7_26WebPageProxyIdentifierTypeESD_yLSE_1EEENSA_IN7WebCore18PageIdentifierTypeESD_yLSE_0EEERKNS7_19WebPreferencesStoreEONSI_17RegistrableDomainENSt3__18optionalINSI_16ProcessQualifiedINS_4UUIDEEEEEONS7_30RemoteWorkerInitializationDataEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C1D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess54EstablishRemoteWorkerContextConnectionToNetworkProcessEN6WebKit10WebProcessES8_FvNS7_16RemoteWorkerTypeENS_23ObjectIdentifierGenericINS7_23PageGroupIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSA_INS7_26WebPageProxyIdentifierTypeESD_yLSE_1EEENSA_IN7WebCore18PageIdentifierTypeESD_yLSE_0EEERKNS7_19WebPreferencesStoreEONSI_17RegistrableDomainENSt3__18optionalINSI_16ProcessQualifiedINS_4UUIDEEEEEONS7_30RemoteWorkerInitializationDataEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3539;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess19SetIsInProcessCacheEN6WebKit10WebProcessES8_FvbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C200;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess19SetIsInProcessCacheEN6WebKit10WebProcessES8_FvbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C200;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess19SetIsInProcessCacheEN6WebKit10WebProcessES8_FvbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3550;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess31GetActivePagesOriginsForTestingEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C228;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess31GetActivePagesOriginsForTestingEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C228;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess31GetActivePagesOriginsForTestingEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  BOOL v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v5 = 3541;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess12IsJITEnabledEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C250;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess12IsJITEnabledEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C250;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess12IsJITEnabledEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  BOOL v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v5 = 3543;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    char v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess15ClearCachedPageEN6WebKit10WebProcessES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C278;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess15ClearCachedPageEN6WebKit10WebProcessES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C278;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess15ClearCachedPageEN6WebKit10WebProcessES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3534;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess36SeedResourceLoadStatisticsForTestingEN6WebKit10WebProcessES8_FvRKN7WebCore17RegistrableDomainESC_bONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C2A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess36SeedResourceLoadStatisticsForTestingEN6WebKit10WebProcessES8_FvRKN7WebCore17RegistrableDomainESC_bONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C2A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess36SeedResourceLoadStatisticsForTestingEN6WebKit10WebProcessES8_FvRKN7WebCore17RegistrableDomainESC_bONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3547;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess31SetThirdPartyCookieBlockingModeEN6WebKit10WebProcessES8_FvN7WebCore28ThirdPartyCookieBlockingModeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C2C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess31SetThirdPartyCookieBlockingModeEN6WebKit10WebProcessES8_FvN7WebCore28ThirdPartyCookieBlockingModeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C2C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess31SetThirdPartyCookieBlockingModeEN6WebKit10WebProcessES8_FvN7WebCore28ThirdPartyCookieBlockingModeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3551;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess36SetDomainsWithCrossPageStorageAccessEN6WebKit10WebProcessES8_FvONS_7HashMapIN7WebCore17RegistrableDomainENS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_11DefaultHashISB_EENS_10HashTraitsISB_EENSI_ISF_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C2F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess36SetDomainsWithCrossPageStorageAccessEN6WebKit10WebProcessES8_FvONS_7HashMapIN7WebCore17RegistrableDomainENS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_11DefaultHashISB_EENS_10HashTraitsISB_EENSI_ISF_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C2F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess36SetDomainsWithCrossPageStorageAccessEN6WebKit10WebProcessES8_FvONS_7HashMapIN7WebCore17RegistrableDomainENS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_11DefaultHashISB_EENS_10HashTraitsISB_EENSI_ISF_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3549;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess41SendResourceLoadStatisticsDataImmediatelyEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C318;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess41SendResourceLoadStatisticsDataImmediatelyEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C318;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess41SendResourceLoadStatisticsDataImmediatelyEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3548;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess13ReleaseMemoryEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C340;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess13ReleaseMemoryEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C340;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess13ReleaseMemoryEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3545;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void WebKit::WebProcessPool::didReceiveMessage(CFTypeRef *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v7 = WebKit::WebProcessPool::webProcessProxyFromConnection((WebKit::WebProcessPool *)this, a2);
  CFRetain(this[1]);
  int v8 = *((unsigned __int16 *)a3 + 25);
  if (v8 == 2583)
  {
    IPC::Decoder::decode<std::tuple<WTF::String,WebKit::UserData>>(a3, &v54);
    if (v56) {
      WebKit::WebProcessPool::handleMessage((WebKit::WebProcessPool *)this, a2, (uint64_t)&v54, &v55);
    }
    std::__optional_destruct_base<std::tuple<WTF::String,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v54, v9);
    goto LABEL_29;
  }
  int v10 = *(unsigned __int8 *)(v7 + 1103);
  if (v8 == 2586 && v10 != 0)
  {
    WebKit::WebProcessPool::startedUsingGamepads((WebKit::WebProcessPool *)this, a2);
    goto LABEL_29;
  }
  if (v8 == 2588 && v10 != 0)
  {
    uint64_t v21 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
    if (v22)
    {
      uint64_t v54 = v21;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v55, (atomic_uchar *volatile *)a2);
      uint64_t v23 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v23 = &unk_1EEA0C368;
      v23[1] = v54;
      unsigned int v24 = v55;
      char v55 = 0;
      v23[2] = v24;
      *(void *)&v63[0] = v23;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v55);
      WebKit::WebProcessPool::stoppedUsingGamepads((WebKit::WebProcessPool *)this, a2, (uint64_t *)v63);
      uint64_t v25 = *(void *)&v63[0];
      *(void *)&v63[0] = 0;
      if (v25) {
        (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      }
    }
    goto LABEL_29;
  }
  if (v8 != 2584 || !*(unsigned char *)(v7 + 1103))
  {
    if (v8 != 2587 || !*(unsigned char *)(v7 + 1103))
    {
      if (v8 != 2585) {
        goto LABEL_29;
      }
      IPC::Decoder::decode<WTF::Seconds>((uint64_t *)a3);
      if (v32)
      {
        unint64_t v33 = *((void *)a3 + 1);
        uint64_t v34 = *(void *)a3;
        unint64_t v35 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
        if (v33 < v35 || v33 - v35 <= 7)
        {
          unint64_t v36 = 0;
          uint64_t v37 = 0;
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v52 = *((void *)a3 + 3);
          if (v52)
          {
            if (v33)
            {
              (*(void (**)(uint64_t))(*(void *)v52 + 16))(v52);
              uint64_t v37 = *(void *)a3;
              unint64_t v36 = *((void *)a3 + 1);
            }
            else
            {
              unint64_t v36 = 0;
              uint64_t v37 = 0;
            }
          }
        }
        else
        {
          *((void *)a3 + 2) = v34 + v35 + 8;
          if (v34) {
            goto LABEL_29;
          }
          unint64_t v36 = v33;
          uint64_t v37 = 0;
        }
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v53 = *((void *)a3 + 3);
        if (v53 && v36) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v53 + 16))(v53, v37);
        }
      }
      goto LABEL_70;
    }
    IPC::Decoder::decode<std::tuple<int,WTF::String>>(a3, &v54);
    if (v56)
    {
      uint64_t v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)v27)
      {
        *(void *)&v63[0] = v26;
        a3 = (IPC::Decoder *)((char *)v63 + 8);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v63 + 1, (atomic_uchar *volatile *)a2);
        char v28 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)char v28 = &unk_1EEA0C3B8;
        *((void *)v28 + 1) = *(void *)&v63[0];
        uint64_t v29 = *((void *)&v63[0] + 1);
        *((void *)&v63[0] + 1) = 0;
        *((void *)v28 + 2) = v29;
        v61 = v28;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v63 + 1);
        if (!v56) {
          goto LABEL_73;
        }
        WebKit::WebProcessPool::stopGamepadEffects((WebCore::GamepadProvider *)this);
        uint64_t v30 = v61;
        v61 = 0;
        if (v30) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v30 + 8))(v30);
        }
      }
      if (v56)
      {
        uint64_t v31 = (WTF::StringImpl *)v55;
        char v55 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 != 2)
          {
            *(_DWORD *)v31 -= 2;
            goto LABEL_29;
          }
LABEL_67:
          WTF::StringImpl::destroy(v31, v27);
          goto LABEL_29;
        }
      }
    }
    goto LABEL_29;
  }
  unint64_t v13 = *((void *)a3 + 1);
  uint64_t v14 = *(void *)a3;
  unint64_t v15 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
  if (v13 < v15 || v13 - v15 <= 3)
  {
    unint64_t v43 = 0;
    uint64_t v44 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v45 = *((void *)a3 + 3);
    if (v45)
    {
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v45 + 16))(v45, v14, v13);
        uint64_t v44 = *(void *)a3;
        unint64_t v43 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v43 = 0;
        uint64_t v44 = 0;
      }
    }
    goto LABEL_69;
  }
  int v17 = (unsigned int *)(v14 + v15);
  *((void *)a3 + 2) = v17 + 1;
  if (!v14)
  {
    unint64_t v43 = v13;
    uint64_t v44 = 0;
LABEL_69:
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v46 = *((void *)a3 + 3);
    if (v46 && v43) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v46 + 16))(v46, v44);
    }
    goto LABEL_70;
  }
  uint64_t v3 = (CFTypeRef *)*v17;
  IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v61);
  if (!v62) {
    goto LABEL_70;
  }
  unsigned __int16 v18 = IPC::Decoder::decode<WebCore::GamepadHapticEffectType>((uint64_t *)a3);
  LOBYTE(v7) = v18;
  if (v18 > 0xFFu)
  {
    IPC::ArgumentCoder<WebCore::GamepadEffectParameters,void>::decode(a3, (uint64_t)v63);
    if (!v64) {
      goto LABEL_74;
    }
    do
    {
      if (v62)
      {
        LODWORD(v54) = v3;
        uint64_t v3 = (CFTypeRef *)v61;
        v61 = 0;
        char v55 = v3;
        char v56 = v7;
        long long v57 = v63[0];
        long long v58 = v63[1];
        int v20 = 1;
        long long v59 = v63[2];
        goto LABEL_50;
      }
LABEL_73:
      __break(1u);
LABEL_74:
      uint64_t v19 = *(WTF::StringImpl **)a3;
      uint64_t v50 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v51 = *((void *)a3 + 3);
      if (!v51) {
        break;
      }
      if (!v50) {
        break;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v51 + 16))(v51, v19);
    }
    while (v64);
    int v20 = 0;
    LOBYTE(v54) = 0;
LABEL_50:
    char v60 = v20;
  }
  else
  {
    int v20 = 0;
    LOBYTE(v54) = 0;
    char v60 = 0;
  }
  if (!v62 || (uint64_t v38 = v61, v61 = 0, !v38))
  {
LABEL_55:
    if (!v20) {
      goto LABEL_70;
    }
    goto LABEL_58;
  }
  if (*(_DWORD *)v38 != 2)
  {
    *(_DWORD *)v38 -= 2;
    goto LABEL_55;
  }
  WTF::StringImpl::destroy(v38, v19);
  if (!v20)
  {
LABEL_70:
    uint64_t v47 = *(void *)a3;
    uint64_t v48 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v49 = *((void *)a3 + 3);
    if (v49 && v48) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v49 + 16))(v49, v47);
    }
    goto LABEL_29;
  }
LABEL_58:
  uint64_t v39 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
  if (!(_BYTE)v27)
  {
LABEL_63:
    char v55 = 0;
    if (!v3) {
      goto LABEL_29;
    }
    if (*(_DWORD *)v3 != 2)
    {
      *(_DWORD *)v3 -= 2;
      goto LABEL_29;
    }
    uint64_t v31 = (WTF::StringImpl *)v3;
    goto LABEL_67;
  }
  *(void *)&v63[0] = v39;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v63 + 1, (atomic_uchar *volatile *)a2);
  uint64_t v40 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v40 = &unk_1EEA0C390;
  *((void *)v40 + 1) = *(void *)&v63[0];
  uint64_t v41 = *((void *)&v63[0] + 1);
  *((void *)&v63[0] + 1) = 0;
  *((void *)v40 + 2) = v41;
  v61 = v40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v63 + 1);
  WebKit::WebProcessPool::playGamepadEffect((WebCore::GamepadProvider *)this);
  char v42 = v61;
  v61 = 0;
  if (v42) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v42 + 8))(v42);
  }
  if (v60)
  {
    uint64_t v3 = v55;
    goto LABEL_63;
  }
LABEL_29:
  CFRelease(this[1]);
}

void non-virtual thunk to'WebKit::WebProcessPool::didReceiveMessage(CFTypeRef *this, IPC::Connection *a2, IPC::Decoder *a3)
{
}

BOOL WebKit::WebProcessPool::didReceiveSyncMessage(CFTypeRef *a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, IPC::Encoder **a4)
{
  CFRetain(a1[1]);
  if (*((_WORD *)a3 + 25) != 3821)
  {
    BOOL v9 = 0;
    goto LABEL_8;
  }
  IPC::Decoder::decode<std::tuple<WTF::String,WebKit::UserData>>(a3, v18);
  BOOL v9 = v20 != 0;
  if (!v20)
  {
LABEL_6:
    std::__optional_destruct_base<std::tuple<WTF::String,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v8);
LABEL_8:
    CFRelease(a1[1]);
    return v9;
  }
  int v10 = *a4;
  *a4 = 0;
  unint64_t v15 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a2);
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v11 = &unk_1EEA0C3E0;
  v11[1] = v15;
  char v12 = v16;
  uint64_t v16 = 0;
  v11[2] = v12;
  int v17 = v11;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v16);
  BOOL result = 0;
  if (v20)
  {
    WebKit::WebProcessPool::handleSynchronousMessage((WebKit::WebProcessPool *)a1, (const IPC::Connection *)a2, (uint64_t)v18, &v19, (uint64_t *)&v17);
    uint64_t v14 = (uint64_t)v17;
    int v17 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

BOOL non-virtual thunk to'WebKit::WebProcessPool::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, IPC::Encoder **a4)
{
  return WebKit::WebProcessPool::didReceiveSyncMessage((CFTypeRef *)(a1 - 16), a2, a3, a4);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebProcessPool20StoppedUsingGamepadsEN6WebKit14WebProcessPoolES8_FvRNS2_10ConnectionEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C368;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebProcessPool20StoppedUsingGamepadsEN6WebKit14WebProcessPoolES8_FvRNS2_10ConnectionEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C368;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebProcessPool20StoppedUsingGamepadsEN6WebKit14WebProcessPoolES8_FvRNS2_10ConnectionEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3532;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  int v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  BOOL result = v8;
  int v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebProcessPool17PlayGamepadEffectEN6WebKit14WebProcessPoolES8_FvjRKNS_6StringEN7WebCore23GamepadHapticEffectTypeERKNSC_23GamepadEffectParametersEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C390;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebProcessPool17PlayGamepadEffectEN6WebKit14WebProcessPoolES8_FvjRKNS_6StringEN7WebCore23GamepadHapticEffectTypeERKNSC_23GamepadEffectParametersEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C390;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebProcessPool17PlayGamepadEffectEN6WebKit14WebProcessPoolES8_FvjRKNS_6StringEN7WebCore23GamepadHapticEffectTypeERKNSC_23GamepadEffectParametersEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  BOOL v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v5 = 3530;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    char v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebProcessPool18StopGamepadEffectsEN6WebKit14WebProcessPoolES8_FvjRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C3B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebProcessPool18StopGamepadEffectsEN6WebKit14WebProcessPoolES8_FvjRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C3B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebProcessPool18StopGamepadEffectsEN6WebKit14WebProcessPoolES8_FvjRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3531;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  int v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  int v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14WebProcessPool24HandleSynchronousMessageEN6WebKit14WebProcessPoolES8_FvRNS2_10ConnectionERKNS_6StringERKNS7_8UserDataEONS_17CompletionHandlerIFvOSE_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C3E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14WebProcessPool24HandleSynchronousMessageEN6WebKit14WebProcessPoolES8_FvRNS2_10ConnectionERKNS_6StringERKNS7_8UserDataEONS_17CompletionHandlerIFvOSE_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C3E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14WebProcessPool24HandleSynchronousMessageEN6WebKit14WebProcessPoolES8_FvRNS2_10ConnectionERKNS_6StringERKNS7_8UserDataEONS_17CompletionHandlerIFvOSE_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages15WebProcessProxy16GetNotificationsEN6WebKit15WebProcessProxyES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore16NotificationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C408;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages15WebProcessProxy16GetNotificationsEN6WebKit15WebProcessProxyES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore16NotificationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0C408;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages15WebProcessProxy16GetNotificationsEN6WebKit15WebProcessProxyES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore16NotificationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  BOOL v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v5 = 3533;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v10 = v5;
  IPC::VectorArgumentCoder<false,WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy15ShouldTerminateEN6WebKit15WebProcessProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C440;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy15ShouldTerminateEN6WebKit15WebProcessProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C440;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy15ShouldTerminateEN6WebKit15WebProcessProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  BOOL v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *BOOL v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy27GetNetworkProcessConnectionEN6WebKit15WebProcessProxyES8_FvONS_17CompletionHandlerIFvONS7_28NetworkProcessConnectionInfoEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C468;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy43WaitForSharedPreferencesForWebProcessToSyncEN6WebKit15WebProcessProxyES8_FvyONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C490;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy43WaitForSharedPreferencesForWebProcessToSyncEN6WebKit15WebProcessProxyES8_FvyONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C490;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy43WaitForSharedPreferencesForWebProcessToSyncEN6WebKit15WebProcessProxyES8_FvyONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  BOOL v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *BOOL v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy13WrapCryptoKeyEN6WebKit15WebProcessProxyES8_FvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt3__18optionalISC_EEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C4B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy13WrapCryptoKeyEN6WebKit15WebProcessProxyES8_FvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt3__18optionalISC_EEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C4B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy13WrapCryptoKeyEN6WebKit15WebProcessProxyES8_FvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt3__18optionalISC_EEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy15UnwrapCryptoKeyEN6WebKit15WebProcessProxyES8_FvON7WebCore16WrappedCryptoKeyEONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C4E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy15UnwrapCryptoKeyEN6WebKit15WebProcessProxyES8_FvON7WebCore16WrappedCryptoKeyEONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C4E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy15UnwrapCryptoKeyEN6WebKit15WebProcessProxyES8_FvON7WebCore16WrappedCryptoKeyEONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

WebPushD::WebPushDaemon *WebPushD::WebPushDaemon::WebPushDaemon(WebPushD::WebPushDaemon *this)
{
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_WORD *)this + 12) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  WebCore::Timer::Timer<WebPushD::WebPushDaemon,WebPushD::WebPushDaemon>((WebPushD::WebPushDaemon *)((char *)this + 96), (uint64_t)this, (uint64_t)WebPushD::WebPushDaemon::incomingPushTransactionTimerFired, 0);
  *((void *)this + 19) = 0;
  WebCore::Timer::Timer<WebPushD::WebPushDaemon,WebPushD::WebPushDaemon>((WebPushD::WebPushDaemon *)((char *)this + 160), (uint64_t)this, (uint64_t)WebPushD::WebPushDaemon::silentPushTimerFired, 0);
  *((void *)this + 27) = 0;
  *((void *)this + 28) = (char *)this + 224;
  *((void *)this + 29) = (char *)this + 224;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = objc_opt_class();
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  int out_token = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___ZN8WebPushD13WebPushDaemonC2Ev_block_invoke;
  v3[3] = &__block_descriptor_40_e8_v12__0i8l;
  v3[4] = this;
  notify_register_dispatch("com.apple.webclip.uninstalled", &out_token, MEMORY[0x1E4F14428], v3);
  return this;
}

void sub_1993F9CEC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  BOOL v9 = *(WTF::StringImpl **)(v2 + 272);
  *(void *)(v2 + 272) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  int v10 = *(WTF **)(v2 + 264);
  *(void *)(v2 + 264) = 0;
  if (v10) {
    std::default_delete<WebPushD::WebClipCache>::operator()[abi:sn180100](v10, a2);
  }
  uint64_t v11 = *v6;
  *uint64_t v6 = 0;
  if (v11) {
    CFRelease(v11);
  }
  if (*(void *)(v2 + 240))
  {
    uint64_t v12 = *(void *)(v2 + 224);
    unint64_t v13 = *(void **)(v2 + 232);
    uint64_t v14 = *v13;
    *(void *)(v14 + 8) = *(void *)(v12 + 8);
    **(void **)(v12 + 8) = v14;
    *(void *)(v2 + 240) = 0;
    if (v13 != v7)
    {
      do
      {
        unint64_t v15 = (void *)v13[1];
        std::__destroy_at[abi:sn180100]<WebPushD::WebPushDaemon::PotentialSilentPush,0>((WTF::StringImpl *)(v13 + 2), a2);
        WTF::fastFree((WTF *)v13, v16);
        unint64_t v13 = v15;
      }
      while (v15 != v7);
    }
  }
  int v17 = *(void **)(v2 + 216);
  if (v17) {

  }
  *(void *)(v2 + 160) = &unk_1EE9BA5F0;
  uint64_t v18 = *(void *)(v2 + 208);
  *(void *)(v2 + 208) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  WebCore::TimerBase::~TimerBase(v5);
  uint64_t v19 = *(void **)(v2 + 152);
  if (v19) {

  }
  *(void *)(v2 + 96) = &unk_1EE9BA5F0;
  uint64_t v20 = *(void *)(v2 + 144);
  *(void *)(v2 + 144) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  WebCore::TimerBase::~TimerBase(v4);
  unint64_t v22 = *(void *)(v2 + 64);
  unint64_t v23 = *(void *)(v2 + 72);
  unsigned int v24 = *(WebPushD::WebPushDaemon::PendingPushMessage **)(v2 + 80);
  if (v22 <= v23)
  {
    if (v22 == v23) {
      goto LABEL_33;
    }
    uint64_t v31 = (WebPushD::WebPushDaemon::PendingPushMessage *)((char *)v24 + 256 * v22);
    uint64_t v32 = (v23 << 8) - (v22 << 8);
    do
    {
      WebPushD::WebPushDaemon::PendingPushMessage::~PendingPushMessage(v31, v21);
      uint64_t v31 = (WebPushD::WebPushDaemon::PendingPushMessage *)(v33 + 256);
      v32 -= 256;
    }
    while (v32);
  }
  else
  {
    if (v23)
    {
      uint64_t v25 = v23 << 8;
      do
      {
        WebPushD::WebPushDaemon::PendingPushMessage::~PendingPushMessage(v24, v21);
        unsigned int v24 = (WebPushD::WebPushDaemon::PendingPushMessage *)(v26 + 256);
        v25 -= 256;
      }
      while (v25);
      unsigned int v24 = *(WebPushD::WebPushDaemon::PendingPushMessage **)(v2 + 80);
      unint64_t v22 = *(void *)(v2 + 64);
    }
    uint64_t v27 = *(unsigned int *)(v2 + 88);
    if (v22 != v27)
    {
      char v28 = (WebPushD::WebPushDaemon::PendingPushMessage *)((char *)v24 + 256 * v22);
      uint64_t v29 = (v27 << 8) - (v22 << 8);
      do
      {
        WebPushD::WebPushDaemon::PendingPushMessage::~PendingPushMessage(v28, v21);
        char v28 = (WebPushD::WebPushDaemon::PendingPushMessage *)(v30 + 256);
        v29 -= 256;
      }
      while (v29);
    }
  }
  unsigned int v24 = *(WebPushD::WebPushDaemon::PendingPushMessage **)(v2 + 80);
LABEL_33:
  if (v24)
  {
    *(void *)(v2 + 80) = 0;
    *(_DWORD *)(v2 + 88) = 0;
    WTF::fastFree(v24, v21);
  }
  unint64_t v34 = *(void *)(v2 + 32);
  unint64_t v35 = *(void *)(v2 + 40);
  unint64_t v36 = *(WTF **)(v2 + 48);
  if (v34 > v35)
  {
    if (v35)
    {
      uint64_t v46 = 8 * v35;
      do
      {
        uint64_t v47 = *(void *)v36;
        *(void *)unint64_t v36 = 0;
        if (v47) {
          (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
        }
        unint64_t v36 = (WTF *)((char *)v36 + 8);
        v46 -= 8;
      }
      while (v46);
      unint64_t v36 = *(WTF **)(v2 + 48);
      unint64_t v34 = *(void *)(v2 + 32);
    }
    uint64_t v45 = *(unsigned int *)(v2 + 56);
    if (v34 != v45)
    {
      uint64_t v48 = (uint64_t *)((char *)v36 + 8 * v34);
      uint64_t v49 = 8 * v45 - 8 * v34;
      do
      {
        uint64_t v50 = *v48;
        *uint64_t v48 = 0;
        if (v50) {
          (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
        }
        ++v48;
        v49 -= 8;
      }
      while (v49);
    }
  }
  else
  {
    if (v34 == v35)
    {
      if (!v36) {
        goto LABEL_39;
      }
LABEL_59:
      *(void *)(v2 + 48) = 0;
      *(_DWORD *)(v2 + 56) = 0;
      WTF::fastFree(v36, v21);
LABEL_39:
      std::unique_ptr<WebPushD::PushService>::reset[abi:sn180100](v3, 0);
      uint64_t v38 = *(void *)(v2 + 8);
      if (v38)
      {
        uint64_t v39 = *(unsigned int *)(v38 - 4);
        if (v39)
        {
          uint64_t v40 = (_DWORD **)(v38 + 8);
          do
          {
            if (*(v40 - 1) != (_DWORD *)-1)
            {
              uint64_t v41 = *v40;
              WTF::StringImpl *v40 = 0;
              if (v41)
              {
                if (v41[4] == 1) {
                  (*(void (**)(_DWORD *))(*(void *)v41 + 8))(v41);
                }
                else {
                  --v41[4];
                }
              }
            }
            v40 += 2;
            --v39;
          }
          while (v39);
        }
        WTF::fastFree((WTF *)(v38 - 16), v37);
      }
      if (*(void *)v2) {
        WTF::fastFree((WTF *)(*(void *)v2 - 16), v37);
      }
      _Unwind_Resume(a1);
    }
    char v42 = (uint64_t *)((char *)v36 + 8 * v34);
    uint64_t v43 = 8 * v35 - 8 * v34;
    do
    {
      uint64_t v44 = *v42;
      *char v42 = 0;
      if (v44) {
        (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
      }
      ++v42;
      v43 -= 8;
    }
    while (v43);
  }
  unint64_t v36 = *(WTF **)(v2 + 48);
  if (!v36) {
    goto LABEL_39;
  }
  goto LABEL_59;
}

void WebPushD::WebPushDaemon::incomingPushTransactionTimerFired(WebPushD::WebPushDaemon *this)
{
  uint64_t v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    uint64_t v3 = qword_1EB3583C0;
    if (!os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR)
      || (*(_WORD *)uint64_t v4 = 0,
          _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "UI process failed to fetch push before incoming push transaction timed out.", v4, 2u), (uint64_t v2 = (void *)*((void *)this + 19)) != 0))
    {
    }
  }
  *((void *)this + 19) = 0;
}

void WebPushD::WebPushDaemon::silentPushTimerFired(unsigned int **this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
  uint64_t v3 = (unsigned int **)this[29];
  if (v3 != this + 28)
  {
    double v4 = v2;
    do
    {
      if (*((double *)v3 + 7) > v4) {
        break;
      }
      WTF::URL::URL((uint64_t)v18, (WTF::StringImpl **)v3 + 6);
      WebCore::SecurityOriginData::fromURL(v21, (WebCore::SecurityOriginData *)v18, v5);
      WebCore::SecurityOriginData::toString((uint64_t *)&v19, (WebCore::SecurityOriginData *)v21);
      if (v22 != -1) {
        ((void (*)(char *, uint64_t *))off_1EEA0C558[v22])(&v20, v21);
      }
      int v22 = -1;
      uint64_t v7 = v18[0];
      v18[0] = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v6);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
      int v8 = this[2];
      BOOL v9 = v3[2];
      if (v9) {
        *v9 += 2;
      }
      int v10 = v3[3];
      if (v10) {
        *v10 += 2;
      }
      uint64_t v12 = v3[4];
      uint64_t v11 = v3[5];
      unint64_t v13 = v19;
      if (v19) {
        *(_DWORD *)v19 += 2;
      }
      uint64_t v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x40);
      *(void *)uint64_t v14 = &unk_1EEA0C938;
      *((void *)v14 + 2) = v9;
      *((void *)v14 + 3) = v10;
      *((void *)v14 + 4) = v12;
      *((void *)v14 + 5) = v11;
      *((void *)v14 + 6) = v13;
      v18[0] = v14;
      WebPushD::PushService::incrementSilentPushCount(v8, (WTF::StringImpl **)v3 + 2, &v19, (uint64_t *)v18);
      unint64_t v15 = v18[0];
      v18[0] = 0;
      if (v15) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v15 + 8))(v15);
      }
      uint64_t v3 = (unsigned int **)std::list<WebPushD::WebPushDaemon::PotentialSilentPush,WTF::FastAllocator<WebPushD::WebPushDaemon::PotentialSilentPush>>::erase(this + 28, v3);
      int v17 = v19;
      uint64_t v19 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v16);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
    }
    while (this + 28 != v3);
  }
  WebPushD::WebPushDaemon::rescheduleSilentPushTimer((WebPushD::WebPushDaemon *)this);
}

void sub_1993FA370(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22)
{
  if (a9) {
    (*(void (**)(WTF::StringImpl *))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *___ZN8WebPushD13WebPushDaemonC2Ev_block_invoke(uint64_t a1)
{
  return WebPushD::WebPushDaemon::updateSubscriptionSetState(*(WebPushD::WebPushDaemon **)(a1 + 32));
}

void *WebPushD::WebPushDaemon::updateSubscriptionSetState(WebPushD::WebPushDaemon *this)
{
  double v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EEA0C870;
  v2[1] = this;
  double v4 = v2;
  WebPushD::WebPushDaemon::runAfterStartingPushService((uint64_t)this, (uint64_t *)&v4);
  uint64_t result = v4;
  double v4 = 0;
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  return result;
}

void sub_1993FA520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebPushD::WebPushDaemon::startMockPushService(WebPushD::WebPushDaemon *this)
{
  *((unsigned char *)this + 24) = 1;
  *((void *)this + 31) = objc_opt_class();
  WTF::FileSystemImpl::createTemporaryFile();
  uint64_t v3 = v12;
  uint64_t v12 = 0;
  double v4 = (WTF::StringImpl *)*((void *)this + 34);
  *((void *)this + 34) = v3;
  if (v4)
  {
    int v5 = *(_DWORD *)v4 - 2;
    if (*(_DWORD *)v4 != 2) {
      goto LABEL_5;
    }
    WTF::StringImpl::destroy(v4, v2);
    double v4 = v12;
    uint64_t v12 = 0;
    if (!v4) {
      goto LABEL_6;
    }
    int v5 = *(_DWORD *)v4 - 2;
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v6);
    }
    else {
LABEL_5:
    }
      *(_DWORD *)double v4 = v5;
  }
LABEL_6:
  uint64_t v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v7 = &unk_1EEA0C758;
  *((void *)v7 + 1) = this;
  uint64_t v12 = v7;
  int v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v8 = &unk_1EEA0C780;
  v8[1] = this;
  uint64_t v11 = v8;
  WebPushD::PushService::createMockService((uint64_t *)&v12, (uint64_t *)&v11);
  uint64_t v9 = (uint64_t)v11;
  uint64_t v11 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1993FA6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WebPushD::WebPushDaemon::startPushService(WebPushD::WebPushDaemon *this, const WTF::String *a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  WTF::String::operator=((uint64_t *)this + 34, a4);
  int v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v8 = &unk_1EEA0C7A8;
  v8[1] = this;
  unint64_t v15 = v8;
  uint64_t v9 = *a4;
  if (v9) {
    *(_DWORD *)v9 += 2;
  }
  int v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  *int v10 = &unk_1EEA0C7D0;
  v10[1] = this;
  if (v9) {
    *(_DWORD *)v9 += 2;
  }
  v10[2] = v9;
  uint64_t v14 = v10;
  WebPushD::PushService::create(a2, a3, (uint64_t *)&v15, (uint64_t *)&v14);
  uint64_t v12 = (uint64_t)v14;
  uint64_t v14 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v11);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t result = v15;
  unint64_t v15 = 0;
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  return result;
}

void sub_1993FA88C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

WebPushD::WebClipCache *WebPushD::WebPushDaemon::ensureWebClipCache(WebPushD::WebPushDaemon *this)
{
  unint64_t v1 = (WebPushD::WebClipCache *)*((void *)this + 33);
  if (!v1)
  {
    if (!*((void *)this + 34) || MKBDeviceUnlockedSinceBoot() != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1993FA9B0);
    }
    unint64_t v1 = (WebPushD::WebClipCache *)WTF::fastMalloc((WTF *)0x10);
    WebPushD::WebClipCache::WebClipCache(v1, (WebPushD::WebPushDaemon *)((char *)this + 272));
    double v4 = (WTF *)*((void *)this + 33);
    *((void *)this + 33) = v1;
    if (v4)
    {
      std::default_delete<WebPushD::WebClipCache>::operator()[abi:sn180100](v4, v3);
      return (WebPushD::WebClipCache *)*((void *)this + 33);
    }
  }
  return v1;
}

void sub_1993FA9D4(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WTF::WorkQueue *WebPushD::WebPushDaemon::setPushService(uint64_t a1, WebPushD::PushService **a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = std::unique_ptr<WebPushD::PushService>::reset[abi:sn180100]((WebPushD::PushService **)(a1 + 16), v3);
  *(unsigned char *)(a1 + 25) = 1;
  unint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *(void *)(a1 + 40);
  if (v5 > v6) {
    v6 += *(unsigned int *)(a1 + 56);
  }
  if (v6 != v5)
  {
    uint64_t v7 = WTF::WorkQueue::main(result);
    int v8 = (WTF::WorkQueue *)WTF::fastMalloc((WTF *)0x10);
    *(void *)int v8 = &unk_1EEA0C820;
    *((void *)v8 + 1) = a1;
    uint64_t v9 = v8;
    (*(void (**)(uint64_t, WTF::WorkQueue **))(*(void *)v7 + 32))(v7, &v9);
    uint64_t result = v9;
    uint64_t v9 = 0;
    if (result) {
      return (WTF::WorkQueue *)(*(uint64_t (**)(WTF::WorkQueue *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1993FAAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::WebPushDaemon::runAfterStartingPushService(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 25)) {
    return (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  }
  else {
    return WTF::Deque<WTF::Function<void ()(void)>,0ul>::append<WTF::Function<void ()(void)>>(a1 + 32, a2);
  }
}

void WebPushD::WebPushDaemon::releaseIncomingPushTransaction(WebPushD::WebPushDaemon *this)
{
  if ((*((void *)this + 16) & 0xFFFFFFFFFFFFLL) != 0) {
    WebCore::TimerBase::stopSlowCase((WebPushD::WebPushDaemon *)((char *)this + 96));
  }
  double v2 = (void *)*((void *)this + 19);
  if (v2) {

  }
  *((void *)this + 19) = 0;
}

void WebPushD::WebPushDaemon::connectionEventHandler(uint64_t *a1, id a2)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  if (object_getClass(a2) != (Class)MEMORY[0x1E4F14590]) {
    return;
  }
  uint64_t uint64 = xpc_dictionary_get_uint64(a2, "protocol version");
  if (uint64 == 4)
  {
    size_t length = 0;
    data = xpc_dictionary_get_data(a2, "encoded message", &length);
    if (data)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = 0;
      IPC::Decoder::create((WTF *)length, data, (uint64_t *)buf, &v85);
      WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v6);
      if (!v85)
      {
        uint64_t v18 = qword_1EB3583C0;
        if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1985F2000, v18, OS_LOG_TYPE_ERROR, "WebPushDaemon::connectionEventHandler - Failed to create decoder for xpc message", buf, 2u);
        }
        remote_connection = xpc_dictionary_get_remote_connection(a2);
        if (remote_connection) {
          xpc_connection_cancel(remote_connection);
        }
        goto LABEL_87;
      }
      xpc_connection_t v7 = xpc_dictionary_get_remote_connection(a2);
      uint64_t v8 = (uint64_t)v7;
      if (!v7)
      {
LABEL_87:
        unint64_t v63 = v85;
        uint64_t v85 = 0;
        if (v63)
        {
          IPC::Decoder::~Decoder(v63);
          WTF::fastFree(v64, v65);
        }
        return;
      }
      uint64_t v9 = v7;
      uint64_t v10 = *a1;
      if (WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,NSObject  {objcproto13OS_xpc_object}*,WTF::IdentityExtractor,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>>,NSObject  {objcproto13OS_xpc_object}*>(*a1, v8))
      {
        uint64_t v11 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10, v8);
        if (v10)
        {
          uint64_t v12 = (void *)(v10 + 8 * *(unsigned int *)(v10 - 4));
          if (v12 == v11) {
            goto LABEL_47;
          }
        }
        else
        {
          if (!v11) {
            goto LABEL_47;
          }
          uint64_t v12 = 0;
        }
        if (v12 != v11) {
          WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,NSObject  {objcproto13OS_xpc_object}*,WTF::IdentityExtractor,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::remove(a1, v11);
        }
LABEL_47:
        WebPushD::PushClientConnection::create((void *)v8, v85, (uint64_t *)&v84);
        uint64_t v39 = v84;
        if (!v84)
        {
          uint64_t v53 = qword_1EB3583C0;
          if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134217984;
            *(void *)&buf[4] = v8;
            _os_log_error_impl(&dword_1985F2000, v53, OS_LOG_TYPE_ERROR, "WebPushDaemon::connectionEventHandler - Could not initialize PushClientConnection from xpc connection %p", buf, 0xCu);
          }
          uint64_t v54 = xpc_dictionary_get_remote_connection(a2);
          if (v54) {
            xpc_connection_cancel(v54);
          }
          goto LABEL_82;
        }
        uint64_t v42 = a1[1];
        uint64_t v41 = a1 + 1;
        uint64_t v40 = v42;
        if (v42
          || (WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashMap<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::expand(v41),
              (uint64_t v40 = *v41) != 0))
        {
          int v43 = *(_DWORD *)(v40 - 8);
        }
        else
        {
          int v43 = 0;
        }
        unint64_t v44 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
        unint64_t v45 = 9 * ((v44 + ~(v44 << 13)) ^ ((v44 + ~(v44 << 13)) >> 8));
        unint64_t v46 = (v45 ^ (v45 >> 15)) + ~((v45 ^ (v45 >> 15)) << 27);
        unsigned int v47 = v43 & ((v46 >> 31) ^ v46);
        uint64_t v48 = (uint64_t *)(v40 + 16 * v47);
        uint64_t v49 = *v48;
        if (*v48)
        {
          uint64_t v50 = 0;
          int v51 = 1;
          while (v49 != v8)
          {
            if (v49 == -1) {
              uint64_t v50 = v48;
            }
            unsigned int v47 = (v47 + v51) & v43;
            uint64_t v48 = (uint64_t *)(v40 + 16 * v47);
            uint64_t v49 = *v48;
            ++v51;
            if (!*v48)
            {
              if (v50)
              {
                *uint64_t v50 = 0;
                v50[1] = 0;
                --*(_DWORD *)(*v41 - 16);
                uint64_t v48 = v50;
              }
              goto LABEL_59;
            }
          }
          ++*((_DWORD *)v39 + 4);
          char v55 = (_DWORD *)v48[1];
          v48[1] = (uint64_t)v39;
          if (v55)
          {
            if (v55[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v55 + 8))(v55);
            }
            else {
              --v55[4];
            }
          }
          goto LABEL_82;
        }
LABEL_59:
        *uint64_t v48 = v8;
        ++*((_DWORD *)v39 + 4);
        uint64_t v52 = (_DWORD *)v48[1];
        v48[1] = (uint64_t)v39;
        if (v52)
        {
          if (v52[4] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v52 + 8))(v52);
          }
          else {
            --v52[4];
          }
        }
        uint64_t v56 = *v41;
        if (*v41) {
          int v57 = *(_DWORD *)(v56 - 12) + 1;
        }
        else {
          int v57 = 1;
        }
        *(_DWORD *)(v56 - 12) = v57;
        uint64_t v58 = *v41;
        if (*v41) {
          int v59 = *(_DWORD *)(v58 - 12);
        }
        else {
          int v59 = 0;
        }
        uint64_t v60 = (*(_DWORD *)(v58 - 16) + v59);
        unint64_t v61 = *(unsigned int *)(v58 - 4);
        if (v61 > 0x400)
        {
          if (v61 > 2 * v60)
          {
LABEL_82:
            char v62 = v84;
            uint64_t v84 = 0;
            if (v62)
            {
              if (*((_DWORD *)v62 + 4) == 1) {
                (*(void (**)(WTF::StringImpl *))(*(void *)v62 + 8))(v62);
              }
              else {
                --*((_DWORD *)v62 + 4);
              }
            }
LABEL_86:

            goto LABEL_87;
          }
        }
        else if (3 * v61 > 4 * v60)
        {
          goto LABEL_82;
        }
        WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashMap<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::expand(v41);
        goto LABEL_82;
      }
      uint64_t v20 = a1[1];
      if (!v20) {
        goto LABEL_39;
      }
      unsigned int v21 = *(_DWORD *)(v20 - 8);
      unint64_t v22 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
      unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
      unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
      uint64_t v25 = v21 & ((v24 >> 31) ^ v24);
      uint64_t v26 = *(void *)(v20 + 16 * v25);
      if (v26 != v8)
      {
        int v27 = 1;
        while (v26)
        {
          uint64_t v25 = (v25 + v27) & v21;
          uint64_t v26 = *(void *)(v20 + 16 * v25);
          ++v27;
          if (v26 == v8) {
            goto LABEL_28;
          }
        }
        goto LABEL_39;
      }
LABEL_28:
      char v28 = *(void **)(v20 + 16 * v25 + 8);
      if (!v28)
      {
LABEL_39:
        uint64_t v37 = qword_1EB3583C0;
        if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1985F2000, v37, OS_LOG_TYPE_ERROR, "WebPushDaemon::connectionEventHandler - Could not find a PushClientConnection mapped to this xpc request", buf, 2u);
        }
        uint64_t v38 = xpc_dictionary_get_remote_connection(a2);
        if (v38) {
          xpc_connection_cancel(v38);
        }
        goto LABEL_86;
      }
      uint64_t v29 = (WTF::StringImpl *)v28[5];
      if (v29) {
        *(_DWORD *)v29 += 2;
      }
      uint64_t v84 = v29;
      uint64_t v30 = (WTF::StringImpl *)v28[7];
      if (v30) {
        *(_DWORD *)v30 += 2;
      }
      uint64_t v83 = v30;
      getAllowedBundleIdentifier(buf);
      uint64_t v31 = *(WTF::StringImpl **)buf;
      if (WTF::equal(*(WTF **)buf, v84, v32))
      {
        if (!v83 || !*((_DWORD *)v83 + 1))
        {
          if (v31)
          {
            if (*(_DWORD *)v31 == 2) {
              WTF::StringImpl::destroy(v31, v33);
            }
            else {
              *(_DWORD *)v31 -= 2;
            }
          }
          goto LABEL_98;
        }
        unint64_t v34 = WebPushD::WebPushDaemon::ensureWebClipCache((WebPushD::WebPushDaemon *)a1);
        char isWebClipVisible = WebPushD::WebClipCache::isWebClipVisible(v34, (const WTF::String *)&v84, (const WTF::String *)&v83);
        if (v31)
        {
          if (*(_DWORD *)v31 == 2) {
            WTF::StringImpl::destroy(v31, v35);
          }
          else {
            *(_DWORD *)v31 -= 2;
          }
        }
        if (isWebClipVisible)
        {
LABEL_98:
          xpc_object_t reply = xpc_dictionary_create_reply(a2);
          uint64_t v67 = v85;
          uint64_t v68 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v68 = &unk_1EEA0C848;
          v68[1] = v8;
          v68[2] = reply;
          *(void *)buf = v68;
          (*(void (**)(void *, IPC::Decoder *, unsigned char *))(*v28 + 24))(v28, v67, buf);
          uint64_t v70 = *(void *)buf;
          *(void *)buf = 0;
          if (v70) {
            (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
          }
          uint64_t v8 = 0;
          goto LABEL_104;
        }
      }
      else if (v31)
      {
        if (*(_DWORD *)v31 == 2) {
          WTF::StringImpl::destroy(v31, v33);
        }
        else {
          *(_DWORD *)v31 -= 2;
        }
      }
      v71 = qword_1EB3583C0;
      if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
      {
        WTF::String::ascii((uint64_t *)&v82, (WTF::String *)&v84);
        uint64_t v75 = v82;
        WTF::String::ascii((uint64_t *)&v81, (WTF::String *)&v83);
        uint64_t v76 = (char *)v75 + 16;
        if (!v75) {
          uint64_t v76 = 0;
        }
        if (v81) {
          uint64_t v77 = (char *)v81 + 16;
        }
        else {
          uint64_t v77 = 0;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = v76;
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v77;
        _os_log_error_impl(&dword_1985F2000, v71, OS_LOG_TYPE_ERROR, "WebPushDaemon::connectionEventHandler - Got message from unexpected bundleIdentifier = %{public}s and pushPartition = %{public}s", buf, 0x16u);
        int v79 = v81;
        uint64_t v81 = 0;
        if (v79)
        {
          if (*(_DWORD *)v79 == 1) {
            WTF::fastFree(v79, v78);
          }
          else {
            --*(_DWORD *)v79;
          }
        }
        uint64_t v80 = v82;
        uint64_t v82 = 0;
        if (v80)
        {
          if (*(_DWORD *)v80 == 1) {
            WTF::fastFree(v80, v78);
          }
          else {
            --*(_DWORD *)v80;
          }
        }
      }
      WebPushD::WebPushDaemon::updateSubscriptionSetState((WebPushD::WebPushDaemon *)a1);
      int v72 = xpc_dictionary_get_remote_connection(a2);
      if (v72) {
        xpc_connection_cancel(v72);
      }
LABEL_104:
      uint64_t v73 = v83;
      uint64_t v83 = 0;
      if (v73)
      {
        if (*(_DWORD *)v73 == 2) {
          WTF::StringImpl::destroy(v73, v69);
        }
        else {
          *(_DWORD *)v73 -= 2;
        }
      }
      uint64_t v74 = v84;
      uint64_t v84 = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2) {
          WTF::StringImpl::destroy(v74, v69);
        }
        else {
          *(_DWORD *)v74 -= 2;
        }
      }
      if (!v8) {
        goto LABEL_87;
      }
      goto LABEL_86;
    }
    uint64_t v16 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1985F2000, v16, OS_LOG_TYPE_ERROR, "WebPushDaemon::connectionEventHandler - No encoded message data in xpc message", buf, 2u);
    }
    int v17 = xpc_dictionary_get_remote_connection(a2);
    if (v17) {
      xpc_connection_cancel(v17);
    }
  }
  else
  {
    uint64_t v13 = uint64;
    uint64_t v14 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)&buf[4] = v13;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = 4;
      _os_log_error_impl(&dword_1985F2000, v14, OS_LOG_TYPE_ERROR, "Received request with protocol version %llu not matching daemon protocol version %llu", buf, 0x16u);
    }
    unint64_t v15 = xpc_dictionary_get_remote_connection(a2);
    if (v15) {
      xpc_connection_cancel(v15);
    }
  }
}

void sub_1993FB444(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, IPC::Decoder *a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a13)
  {
    IPC::Decoder::~Decoder(a13);
    WTF::fastFree(v16, v17);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *getAllowedBundleIdentifier(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  double v2 = *(WTF::StringImpl **)buf;
  *a1 = *(void *)buf;
  uint64_t result = (WTF::StringImpl *)_os_feature_enabled_impl();
  if (!result) {
    return result;
  }
  uint64_t v26 = 0;
  id v4 = objc_alloc(MEMORY[0x1E4F22408]);
  unint64_t v5 = objc_msgSend(v4, "initWithURL:error:", objc_msgSend(MEMORY[0x1E4F1CB10], "URLWithString:", @"https://"), &v26);
  unint64_t v6 = v5;
  uint64_t v7 = v26;
  if (v26)
  {
    uint64_t v8 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v7;
      _os_log_error_impl(&dword_1985F2000, v8, OS_LOG_TYPE_ERROR, "Could not determine default browser: %{public}@", buf, 0xCu);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v25 = *(WTF::StringImpl **)buf;
  }
  else
  {
    MEMORY[0x19972EAD0](&v25, objc_msgSend((id)objc_msgSend(v5, "bundleRecord"), "bundleIdentifier"));
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v25)
  {
    uint64_t v10 = (__CFString *)WTF::StringImpl::operator NSString *();
    uint64_t v11 = v25;
    uint64_t v25 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    uint64_t v10 = &stru_1EEA10550;
  }
  MEMORY[0x19972EAD0](&v24, v10);
  if (objc_opt_class())
  {
    uint64_t v26 = 0;
    id v12 = objc_alloc(MEMORY[0x1E4F83A20]);
    if (v24) {
      uint64_t v13 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v13 = &stru_1EEA10550;
    }
    uint64_t v14 = (void *)[v12 initWithDomain:40 bundleID:v13 persona:0 error:&v26];
    unint64_t v15 = v14;
    if (v14)
    {
      BOOL v16 = [v14 answer] == 4;
      CFRelease(v15);
    }
    else
    {
      uint64_t v18 = qword_1EB3583C0;
      if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
      {
        WTF::String::ascii((uint64_t *)&v25, (WTF::String *)&v24);
        unint64_t v22 = v25 ? (char *)v25 + 16 : 0;
        *(_DWORD *)buf = 134218498;
        *(void *)&buf[4] = 40;
        __int16 v28 = 2082;
        uint64_t v29 = v22;
        __int16 v30 = 2114;
        uint64_t v31 = v26;
        _os_log_error_impl(&dword_1985F2000, v18, OS_LOG_TYPE_ERROR, "Failure getting info for domain %qu for app %{public}s: %{public}@", buf, 0x20u);
        unint64_t v23 = v25;
        uint64_t v25 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 1) {
            WTF::fastFree(v23, v17);
          }
          else {
            --*(_DWORD *)v23;
          }
        }
      }
      BOOL v16 = 0;
    }
  }
  else
  {
    uint64_t v26 = 0;
    *(void *)buf = 0;
    os_eligibility_get_domain_answer();
    BOOL v16 = *(void *)buf == 4;
  }
  uint64_t result = v24;
  unint64_t v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v17);
      if (!v16) {
        return result;
      }
      goto LABEL_28;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v16) {
    return result;
  }
LABEL_28:
  uint64_t result = (WTF::StringImpl *)MEMORY[0x19972EAD0](buf, v10);
  uint64_t v20 = *(void *)buf;
  *(void *)buf = 0;
  *a1 = v20;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
    {
      WTF::StringImpl::destroy(v2, v19);
      uint64_t result = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    else
    {
      *(_DWORD *)v2 -= 2;
    }
  }
  return result;
}

void sub_1993FB980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11)
{
  CFRelease(v13);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v15);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  *id v12 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v15);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::connectionAdded(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t result = WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,NSObject  {objcproto13OS_xpc_object}*,WTF::IdentityExtractor,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>>,NSObject  {objcproto13OS_xpc_object}*>(*a1, a2);
  if (result) {
    goto LABEL_33;
  }
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_8;
  }
  int v7 = *(_DWORD *)(v6 - 8);
  unint64_t v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  unsigned int v11 = v7 & ((v10 >> 31) ^ v10);
  uint64_t v12 = *(void *)(v6 + 16 * v11);
  if (v12 == a2)
  {
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x1993FBAECLL);
  }
  int v13 = 1;
  while (v12)
  {
    unsigned int v11 = (v11 + v13) & v7;
    uint64_t v12 = *(void *)(v6 + 16 * v11);
    ++v13;
    if (v12 == a2) {
      goto LABEL_33;
    }
  }
LABEL_8:
  if (v4
    || (uint64_t result = WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,NSObject  {objcproto13OS_xpc_object}*,WTF::IdentityExtractor,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::expand(a1),
        (uint64_t v4 = *a1) != 0))
  {
    int v14 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    int v14 = 0;
  }
  unint64_t v15 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  unsigned int v18 = v14 & ((v17 >> 31) ^ v17);
  uint64_t v19 = (uint64_t *)(v4 + 8 * v18);
  uint64_t v20 = *v19;
  if (*v19)
  {
    unsigned int v21 = 0;
    int v22 = 1;
    while (v20 != a2)
    {
      if (v20 == -1) {
        unsigned int v21 = v19;
      }
      unsigned int v18 = (v18 + v22) & v14;
      uint64_t v19 = (uint64_t *)(v4 + 8 * v18);
      uint64_t v20 = *v19;
      ++v22;
      if (!*v19)
      {
        if (v21)
        {
          uint64_t *v21 = 0;
          --*(_DWORD *)(*a1 - 16);
          uint64_t v19 = v21;
        }
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    *uint64_t v19 = a2;
    uint64_t v23 = *a1;
    if (*a1) {
      int v24 = *(_DWORD *)(v23 - 12) + 1;
    }
    else {
      int v24 = 1;
    }
    *(_DWORD *)(v23 - 12) = v24;
    uint64_t v25 = *a1;
    if (*a1) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 > 2 * v27) {
        return result;
      }
    }
    else if (3 * v28 > 4 * v27)
    {
      return result;
    }
    return WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,NSObject  {objcproto13OS_xpc_object}*,WTF::IdentityExtractor,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::expand(a1);
  }
  return result;
}

void WebPushD::WebPushDaemon::connectionRemoved(uint64_t *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  if (WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,NSObject  {objcproto13OS_xpc_object}*,WTF::IdentityExtractor,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>>,NSObject  {objcproto13OS_xpc_object}*>(*a1, a2))
  {
    unint64_t v5 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4, a2);
    if (v4)
    {
      uint64_t v6 = (void *)(v4 + 8 * *(unsigned int *)(v4 - 4));
      if (v6 == v5) {
        return;
      }
    }
    else
    {
      if (!v5) {
        return;
      }
      uint64_t v6 = 0;
    }
    if (v6 != v5)
    {
      WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,NSObject  {objcproto13OS_xpc_object}*,WTF::IdentityExtractor,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::remove(a1, v5);
    }
  }
  else
  {
    uint64_t v9 = a1[1];
    unint64_t v8 = a1 + 1;
    uint64_t v7 = v9;
    if (!v9) {
      goto LABEL_19;
    }
    unsigned int v10 = *(_DWORD *)(v7 - 8);
    unint64_t v11 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    uint64_t v14 = v10 & ((v13 >> 31) ^ v13);
    uint64_t v15 = *(void *)(v7 + 16 * v14);
    if (v15 != a2)
    {
      int v16 = 1;
      while (v15)
      {
        uint64_t v14 = (v14 + v16) & v10;
        uint64_t v15 = *(void *)(v7 + 16 * v14);
        ++v16;
        if (v15 == a2) {
          goto LABEL_18;
        }
      }
      uint64_t v14 = *(unsigned int *)(v7 - 4);
    }
LABEL_18:
    if (v14 != *(_DWORD *)(v7 - 4))
    {
      unsigned int v18 = (void *)(v7 + 16 * v14);
      uint64_t v19 = v18 + 1;
      uint64_t v20 = (WebPushD::PushClientConnection *)v18[1];
      if (v20 && (*v19 = 0, (uint64_t v7 = *v8) == 0) || (v7 += 16 * *(unsigned int *)(v7 - 4), (void *)v7 != v18))
      {
        if ((void *)v7 != v18)
        {
          *unsigned int v18 = -1;
          *uint64_t v19 = 0;
          ++*(_DWORD *)(*v8 - 16);
          uint64_t v21 = *v8;
          int v22 = *v8 ? *(_DWORD *)(v21 - 12) - 1 : -1;
          *(_DWORD *)(v21 - 12) = v22;
          uint64_t v23 = *v8;
          if (*v8)
          {
            unsigned int v24 = 6 * *(_DWORD *)(v23 - 12);
            unsigned int v25 = *(_DWORD *)(v23 - 4);
            if (v24 < v25 && v25 >= 9) {
              WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashMap<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::rehash(v8, v25 >> 1);
            }
          }
        }
      }
      WebPushD::PushClientConnection::connectionClosed(v20);
      if (v20)
      {
        if (*((_DWORD *)v20 + 4) == 1)
        {
          uint64_t v27 = *(void (**)(WebPushD::PushClientConnection *))(*(void *)v20 + 8);
          v27(v20);
        }
        else
        {
          --*((_DWORD *)v20 + 4);
        }
      }
    }
    else
    {
LABEL_19:
      unint64_t v17 = qword_1EB3583C0;
      if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
      {
        int v28 = 134217984;
        uint64_t v29 = a2;
        _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "WebPushDaemon::connectionRemoved: couldn't find XPC connection %p in pending connection set or connection map", (uint8_t *)&v28, 0xCu);
      }
    }
  }
}

void sub_1993FBF34(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (v1[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
    }
    else {
      --v1[4];
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::WebPushDaemon::setPushAndNotificationsEnabledForOrigin(uint64_t a1, WebPushD::PushClientConnection *a2, WTF::StringImpl **a3, char a4, uint64_t *a5)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  WTF::URL::URL((uint64_t)buf, a3);
  WebCore::SecurityOriginData::fromURL((uint64_t *)v40, (WebCore::SecurityOriginData *)buf, v10);
  WebPushD::PushClientConnection::subscriptionSetIdentifierForOrigin(a2, (const WebCore::SecurityOriginData *)v40, (uint64_t)&v42);
  if (v41 != -1) {
    ((void (*)(WTF::StringImpl **, WTF **))off_1EEA0C558[v41])(&v32, v40);
  }
  int v41 = -1;
  unint64_t v12 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (v46)
  {
    uint64_t v13 = v42;
    uint64_t v14 = v43;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v16 = v44;
    uint64_t v15 = v45;
    unint64_t v17 = *a3;
    if (*a3) {
      *(_DWORD *)v17 += 2;
    }
    uint64_t v18 = *a5;
    *a5 = 0;
    uint64_t v19 = WTF::fastMalloc((WTF *)0x60);
    *(void *)uint64_t v19 = &unk_1EEA0C8C0;
    *(void *)(v19 + 16) = a1;
    *(void *)(v19 + 32) = v13;
    *(void *)(v19 + 40) = v14;
    *(void *)(v19 + 48) = v16;
    *(void *)(v19 + 56) = v15;
    if (v17) {
      *(_DWORD *)v17 += 2;
    }
    *(void *)(v19 + 64) = v17;
    *(unsigned char *)(v19 + 72) = a4;
    *(void *)(v19 + 80) = v18;
    *(void *)buf = v19;
    WebPushD::WebPushDaemon::runAfterStartingPushService(a1, (uint64_t *)buf);
    uint64_t v21 = *(void *)buf;
    *(void *)buf = 0;
    if (v21)
    {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      if (!v17) {
        return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v42, v20);
      }
    }
    else if (!v17)
    {
      return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v42, v20);
    }
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v20);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  else
  {
    int v22 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      WebPushD::PushClientConnection::debugDescription((uint64_t *)&v32, a2);
      WTF::String::ascii((uint64_t *)v40, (WTF::String *)&v32);
      unsigned int v24 = v40[0];
      WTF::String::ascii((uint64_t *)&v31, (WTF::String *)a3);
      unsigned int v25 = (char *)v24 + 16;
      *(void *)&buf[4] = "setPushAndNotificationsEnabledForOrigin";
      if (!v24) {
        unsigned int v25 = 0;
      }
      *(_DWORD *)buf = 136446979;
      __int16 v34 = 2048;
      if (v31) {
        int v26 = (char *)v31 + 16;
      }
      else {
        int v26 = 0;
      }
      unint64_t v35 = a2;
      __int16 v36 = 2082;
      uint64_t v37 = v25;
      __int16 v38 = 2085;
      uint64_t v39 = v26;
      _os_log_error_impl(&dword_1985F2000, v22, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: No web clip associated with origin %{sensitive}s", buf, 0x2Au);
      int v28 = v31;
      uint64_t v31 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 1) {
          WTF::fastFree(v28, v27);
        }
        else {
          --*(_DWORD *)v28;
        }
      }
      uint64_t v29 = v40[0];
      v40[0] = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 1) {
          WTF::fastFree(v29, v27);
        }
        else {
          --*(_DWORD *)v29;
        }
      }
      uint64_t v30 = v32;
      uint64_t v32 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2) {
          WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v27);
        }
        else {
          *(_DWORD *)v30 -= 2;
        }
      }
    }
    WTF::CompletionHandler<void ()(void)>::operator()(a5);
  }
  return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v42, v20);
}

void sub_1993FC2A8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, uint64_t a18, uint64_t a19, int a20,int a21,char a22)
{
  if (a17)
  {
    if (*(_DWORD *)a17 == 1) {
      WTF::fastFree(a17, a2);
    }
    else {
      --*(_DWORD *)a17;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a22, (WTF::StringImpl *)a2);
  _Unwind_Resume(a1);
}

void WebPushD::WebPushDaemon::injectPushMessageForTesting(uint64_t a1, uint64_t a2, uint64_t a3, WTF::RefCountedBase *a4)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 48))
  {
    uint64_t v7 = *(WTF::StringImpl **)a3;
    if (!*(void *)a3 || !*((_DWORD *)v7 + 1) || (unint64_t v8 = (long long *)(a3 + 24), (*(unsigned char *)(a3 + 24) & 1) == 0))
    {
      uint64_t v9 = "Attempting to inject an invalid push message";
      goto LABEL_7;
    }
    if (!*(unsigned char *)(a1 + 24) || !*(unsigned char *)(a3 + 64)) {
      goto LABEL_42;
    }
    WebCore::NotificationPayload::parseJSON((uint64_t *)buf, (WebCore::NotificationPayload *)(a3 + 56), (const WTF::String *)a2);
    int v14 = v83;
    if (v83)
    {
      if (v83 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        __break(1u);
        goto LABEL_124;
      }
      WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a4, (WTF::RefCountedBase *)&buf[8]);
    }
    else
    {
      uint64_t v18 = (uint64_t *)(a3 + 72);
      if (*(unsigned char *)(a3 + 208))
      {
        WTF::String::operator=(v18, (WTF::StringImpl **)buf);
        long long v19 = *(_OWORD *)&buf[24];
        *(_OWORD *)(a3 + 80) = *(_OWORD *)&buf[8];
        *(_OWORD *)(a3 + 96) = v19;
        WTF::String::operator=((uint64_t *)(a3 + 112), (WTF::StringImpl **)&buf[40]);
        *(void *)(a3 + 120) = *(void *)&v72[4];
        *(unsigned char *)(a3 + 128) = v72[12];
        if (*(unsigned __int8 *)(a3 + 192) == v81)
        {
          if (*(unsigned char *)(a3 + 192))
          {
            *(unsigned char *)(a3 + 136) = (_BYTE)v74;
            WTF::String::operator=((uint64_t *)(a3 + 144), &v75);
            WTF::String::operator=((uint64_t *)(a3 + 152), &v76);
            WTF::String::operator=((uint64_t *)(a3 + 160), &v77);
            WTF::String::operator=((uint64_t *)(a3 + 168), &v78);
            WTF::String::operator=((uint64_t *)(a3 + 176), &v79);
            *(_WORD *)(a3 + 184) = v80;
          }
        }
        else
        {
          int v22 = (WebCore::ApplePayInstallmentItem *)(a3 + 136);
          if (*(unsigned char *)(a3 + 192))
          {
            WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(v22, v20);
            *(unsigned char *)(a3 + 192) = 0;
          }
          else
          {
            std::construct_at[abi:sn180100]<WebCore::NotificationOptionsPayload,WebCore::NotificationOptionsPayload const&,WebCore::NotificationOptionsPayload*>((uint64_t)v22, (uint64_t)&v74);
            *(unsigned char *)(a3 + 192) = 1;
          }
        }
        *(unsigned char *)(a3 + 200) = v82;
      }
      else
      {
        std::construct_at[abi:sn180100]<WebCore::NotificationPayload,WebCore::NotificationPayload const&,WebCore::NotificationPayload*>((uint64_t)v18, (uint64_t)buf);
        *(unsigned char *)(a3 + 208) = 1;
      }
    }
    if (v83 != -1) {
      ((void (*)(WTF **, unsigned char *))off_1EEA0C568[v83])(&v57, buf);
    }
    if (v14) {
      return;
    }
    uint64_t v7 = *(WTF::StringImpl **)a3;
    if (*(void *)a3) {
LABEL_42:
    }
      *(_DWORD *)v7 += 2;
    uint64_t v67 = v7;
    uint64_t v23 = *(WTF::StringImpl **)(a3 + 8);
    if (v23) {
      *(_DWORD *)v23 += 2;
    }
    uint64_t v68 = v23;
    uint64_t v24 = *(void *)(a2 + 64);
    if (*(_OWORD *)(a2 + 64) == 0)
    {
      long long v69 = 0uLL;
    }
    else
    {
      *(void *)((char *)&v69 + 1) = *(void *)(a2 + 65);
      *((void *)&v69 + 1) = *(void *)(a2 + 72);
      LOBYTE(v69) = v24;
    }
    WTF::String::utf8();
    unsigned int v25 = v66;
    if (v66)
    {
      unint64_t v26 = *((void *)v66 + 1);
      if (v26)
      {
        if (!HIDWORD(v26))
        {
          uint64_t v27 = (WTF *)WTF::fastMalloc(*((WTF **)v66 + 1));
          for (uint64_t i = 0; i != v26; ++i)
            *((unsigned char *)v27 + i) = *((unsigned char *)v25 + i + 16);
LABEL_53:
          int v57 = v27;
          int v58 = v26;
          int v59 = v26;
          char v60 = 1;
          uint64_t v29 = *(WTF::StringImpl **)(a3 + 8);
          if (v29) {
            *(_DWORD *)v29 += 2;
          }
          unint64_t v61 = v29;
          uint64_t v30 = *(WTF::StringImpl **)(a3 + 16);
          if (v30) {
            *(_DWORD *)v30 += 2;
          }
          char v62 = v30;
          long long v31 = *(_OWORD *)(a3 + 40);
          long long v63 = *v8;
          long long v64 = v31;
          std::__optional_move_base<WebCore::NotificationPayload,false>::__optional_move_base[abi:sn180100](v65, a3 + 72);
          uint64_t v32 = v67;
          if (v67) {
            *(_DWORD *)v67 += 2;
          }
          *(void *)buf = v32;
          uint64_t v33 = v68;
          if (v68) {
            *(_DWORD *)v68 += 2;
          }
          *(void *)&buf[8] = v33;
          *(_OWORD *)&buf[16] = v69;
          WebKit::WebPushMessage::WebPushMessage((uint64_t)&buf[32], (uint64_t *)&v57);
          WTF::Deque<WebPushD::WebPushDaemon::PendingPushMessage,0ul>::append<WebPushD::WebPushDaemon::PendingPushMessage>(a1 + 64, (uint64_t *)buf);
          WebPushD::WebPushDaemon::PendingPushMessage::~PendingPushMessage((WebPushD::WebPushDaemon::PendingPushMessage *)buf, v34);
          unint64_t v35 = qword_1EB3583C0;
          if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
          {
            WebPushD::PushClientConnection::debugDescription((uint64_t *)&v55, (WebPushD::PushClientConnection *)a2);
            WTF::String::ascii((uint64_t *)&v56, (WTF::String *)&v55);
            if (v56) {
              __int16 v36 = (char *)v56 + 16;
            }
            else {
              __int16 v36 = 0;
            }
            WTF::String::utf8();
            if (v54) {
              uint64_t v37 = (char *)v54 + 16;
            }
            else {
              uint64_t v37 = 0;
            }
            WTF::String::utf8();
            if (v53) {
              __int16 v38 = (char *)v53 + 16;
            }
            else {
              __int16 v38 = 0;
            }
            unint64_t v39 = *(void *)(a1 + 64);
            unint64_t v40 = *(void *)(a1 + 72);
            if (v39 > v40) {
              v40 += *(unsigned int *)(a1 + 88);
            }
            WTF::String::utf8();
            if (v52) {
              int v41 = (char *)v52 + 16;
            }
            else {
              int v41 = 0;
            }
            *(_DWORD *)buf = 136447746;
            *(void *)&buf[4] = "injectPushMessageForTesting";
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = a2;
            *(_WORD *)&unsigned char buf[22] = 2082;
            *(void *)&buf[24] = v36;
            *(_WORD *)&buf[32] = 2082;
            *(void *)&buf[34] = v37;
            __int16 v71 = 2082;
            *(void *)int v72 = v38;
            *(_WORD *)&v72[8] = 2048;
            *(void *)&v72[10] = v40 - v39;
            __int16 v73 = 2082;
            uint64_t v74 = v41;
            _os_log_impl(&dword_1985F2000, v35, OS_LOG_TYPE_DEFAULT, "%{public}s [connection=%p, app=%{public}s]: Injected a test push message for %{public}s at %{public}s with %zu pending messages, payload: %{public}s", buf, 0x48u);
            if (v52)
            {
              if (*(_DWORD *)v52 == 1) {
                WTF::fastFree(v52, v42);
              }
              else {
                --*(_DWORD *)v52;
              }
            }
            if (v53)
            {
              if (*(_DWORD *)v53 == 1) {
                WTF::fastFree(v53, v42);
              }
              else {
                --*(_DWORD *)v53;
              }
            }
            if (v54)
            {
              if (*(_DWORD *)v54 == 1) {
                WTF::fastFree(v54, v42);
              }
              else {
                --*(_DWORD *)v54;
              }
            }
            uint64_t v43 = v56;
            uint64_t v56 = 0;
            if (v43)
            {
              if (*(_DWORD *)v43 == 1) {
                WTF::fastFree(v43, v42);
              }
              else {
                --*(_DWORD *)v43;
              }
            }
            uint64_t v44 = v55;
            char v55 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2) {
                WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v42);
              }
              else {
                *(_DWORD *)v44 -= 2;
              }
            }
          }
          WebPushD::WebPushDaemon::notifyClientPushMessageIsAvailable((WebPushD::WebPushDaemon *)a1, (const WebCore::PushSubscriptionSetIdentifier *)&v67);
          *(void *)buf = 0;
          WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a4, (WTF::RefCountedBase *)buf);
          char v46 = *(WTF::StringImpl **)buf;
          *(void *)buf = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2) {
              WTF::StringImpl::destroy(v46, v45);
            }
            else {
              *(_DWORD *)v46 -= 2;
            }
          }
          std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v65, v45);
          uint64_t v47 = v62;
          char v62 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2) {
              WTF::StringImpl::destroy(v47, v11);
            }
            else {
              *(_DWORD *)v47 -= 2;
            }
          }
          uint64_t v48 = v61;
          unint64_t v61 = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2) {
              WTF::StringImpl::destroy(v48, v11);
            }
            else {
              *(_DWORD *)v48 -= 2;
            }
          }
          if (v60)
          {
            int v51 = v57;
            if (v57)
            {
              int v57 = 0;
              int v58 = 0;
              WTF::fastFree(v51, v11);
            }
          }
          uint64_t v49 = v66;
          v66 = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 1) {
              WTF::fastFree(v49, v11);
            }
            else {
              --*(_DWORD *)v49;
            }
          }
          uint64_t v50 = v68;
          uint64_t v68 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2) {
              WTF::StringImpl::destroy(v50, v11);
            }
            else {
              *(_DWORD *)v50 -= 2;
            }
          }
          unint64_t v12 = v67;
          uint64_t v67 = 0;
          if (v12) {
            goto LABEL_9;
          }
          return;
        }
LABEL_124:
        __break(0xC471u);
        return;
      }
    }
    else
    {
      LODWORD(v26) = 0;
    }
    uint64_t v27 = 0;
    goto LABEL_53;
  }
  uint64_t v9 = "Attempting to inject a push message from an unentitled process";
LABEL_7:
  unsigned int v10 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
  {
    WebPushD::PushClientConnection::debugDescription((uint64_t *)&v67, (WebPushD::PushClientConnection *)a2);
    WTF::String::ascii((uint64_t *)&v57, (WTF::String *)&v67);
    if (v57) {
      uint64_t v15 = (char *)v57 + 16;
    }
    else {
      uint64_t v15 = 0;
    }
    *(_DWORD *)buf = 136446978;
    *(void *)&buf[4] = "injectPushMessageForTesting";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = a2;
    *(_WORD *)&unsigned char buf[22] = 2082;
    *(void *)&buf[24] = v15;
    *(_WORD *)&buf[32] = 2082;
    *(void *)&buf[34] = v9;
    _os_log_error_impl(&dword_1985F2000, v10, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: %{public}s", buf, 0x2Au);
    unint64_t v17 = v57;
    int v57 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1) {
        WTF::fastFree(v17, v16);
      }
      else {
        --*(_DWORD *)v17;
      }
    }
    uint64_t v21 = v67;
    uint64_t v67 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v16);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a4, (WTF::RefCountedBase *)buf);
  unint64_t v12 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v12)
  {
LABEL_9:
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
}

void sub_1993FCBFC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, WTF *a14, WTF::StringImpl *a15, WTF *a16, WTF *a17, uint64_t a18, char a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,WTF *a44,WTF::StringImpl *a45,WTF::StringImpl *a46)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 1) {
      WTF::fastFree(a13, a2);
    }
    else {
      --*(_DWORD *)a13;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 1) {
      WTF::fastFree(a14, a2);
    }
    else {
      --*(_DWORD *)a14;
    }
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 1) {
      WTF::fastFree(a16, a2);
    }
    else {
      --*(_DWORD *)a16;
    }
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](a10, (WTF::StringImpl *)a2);
  if (a21)
  {
    if (*(_DWORD *)a21 == 2) {
      WTF::StringImpl::destroy(a21, v47);
    }
    else {
      *(_DWORD *)a21 -= 2;
    }
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, v47);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (a19 && a17) {
    WTF::fastFree(a17, v47);
  }
  if (a44)
  {
    if (*(_DWORD *)a44 == 1) {
      WTF::fastFree(a44, v47);
    }
    else {
      --*(_DWORD *)a44;
    }
  }
  if (a46)
  {
    if (*(_DWORD *)a46 == 2) {
      WTF::StringImpl::destroy(a46, v47);
    }
    else {
      *(_DWORD *)a46 -= 2;
    }
  }
  if (a45)
  {
    if (*(_DWORD *)a45 == 2) {
      WTF::StringImpl::destroy(a45, v47);
    }
    else {
      *(_DWORD *)a45 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void WebPushD::WebPushDaemon::notifyClientPushMessageIsAvailable(WebPushD::WebPushDaemon *this, const WebCore::PushSubscriptionSetIdentifier *a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
  {
    WTF::String::utf8();
    if (v39) {
      unint64_t v5 = (char *)v39 + 16;
    }
    else {
      unint64_t v5 = 0;
    }
    WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v37, a2);
    WTF::String::utf8();
    if (v38) {
      uint64_t v6 = (char *)v38 + 16;
    }
    else {
      uint64_t v6 = 0;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v56 = v5;
    __int16 v57 = 2082;
    int v58 = v6;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "Launching %{public}s in response to push for %{public}s", buf, 0x16u);
    unint64_t v8 = v38;
    __int16 v38 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1) {
        WTF::fastFree(v8, v7);
      }
      else {
        --*(_DWORD *)v8;
      }
    }
    uint64_t v9 = v37;
    uint64_t v37 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    unsigned int v10 = v39;
    unint64_t v39 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1) {
        WTF::fastFree(v10, v7);
      }
      else {
        --*(_DWORD *)v10;
      }
    }
  }
  uint64_t v11 = *((void *)a2 + 1);
  if (v11 && *(_DWORD *)(v11 + 4))
  {
    if (MEMORY[0x19972E990](*(void *)a2, "com.apple.SafariViewService", 27))
    {
      unint64_t v12 = (void *)MEMORY[0x1E4F1CB10];
      if (*((void *)a2 + 1)) {
        uint64_t v13 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v13 = &stru_1EEA10550;
      }
      uint64_t v14 = [v12 URLWithString:objc_msgSend(@"webapp://web-push/", "stringByAppendingFormat:", @"%@", v13)];
      v53[0] = *MEMORY[0x1E4F625F0];
      uint64_t v51 = *MEMORY[0x1E4F62508];
      uint64_t v52 = MEMORY[0x1E4F1CC08];
      uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v52 forKeys:&v51 count:1];
      uint64_t v16 = *MEMORY[0x1E4F62678];
      v54[0] = v15;
      v54[1] = v14;
      uint64_t v17 = *MEMORY[0x1E4F62670];
      v53[1] = v16;
      v53[2] = v17;
      uint64_t v49 = *MEMORY[0x1E4F43688];
      uint64_t v50 = @"com.apple.WebKit.webpushd";
      v54[2] = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v50 forKeys:&v49 count:1];
      uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v54 forKeys:v53 count:3];
      id v19 = objc_alloc_init(MEMORY[0x1E4F224A0]);
      [v19 setSensitive:1];
      [v19 setFrontBoardOptions:v18];
      [v19 setAllowURLOverrides:0];
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F223E0], "defaultWorkspace"), "openURL:configuration:completionHandler:", v14, v19, &__block_literal_global_39);
      if (v19)
      {
        uint64_t v20 = v19;
LABEL_46:
        CFRelease(v20);
      }
    }
    else
    {
      v48[0] = &unk_1EEA52F78;
      v47[0] = @"WebPushActionVersion";
      v47[1] = @"WebPushActionPartition";
      if (*((void *)a2 + 1)) {
        int v22 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        int v22 = &stru_1EEA10550;
      }
      v47[2] = @"WebPushActionType";
      v48[1] = v22;
      v48[2] = @"_WKWebPushActionTypePushEvent";
      uint64_t v23 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v48 forKeys:v47 count:3];
      id v24 = objc_alloc_init(MEMORY[0x1E4F62860]);
      [v24 setObject:v23 forSetting:134561792];
      unsigned int v25 = (const void *)[MEMORY[0x1E4F627D0] responderWithHandler:&__block_literal_global_24_0];
      unint64_t v26 = v25;
      if (v25) {
        CFRetain(v25);
      }
      uint64_t v27 = (const void *)[objc_alloc(MEMORY[0x1E4F627C8]) initWithInfo:v24 responder:v26];
      int v28 = (void *)MEMORY[0x1E4F629C8];
      v45[0] = *MEMORY[0x1E4F625F0];
      uint64_t v43 = *MEMORY[0x1E4F62508];
      uint64_t v44 = MEMORY[0x1E4F1CC08];
      uint64_t v29 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v44 forKeys:&v43 count:1];
      uint64_t v30 = *MEMORY[0x1E4F625F8];
      v46[0] = v29;
      v46[1] = MEMORY[0x1E4F1CC38];
      uint64_t v31 = *MEMORY[0x1E4F625E0];
      v45[1] = v30;
      void v45[2] = v31;
      uint64_t v42 = v27;
      v46[2] = [MEMORY[0x1E4F1C978] arrayWithObjects:&v42 count:1];
      v45[3] = *MEMORY[0x1E4F62670];
      uint64_t v40 = *MEMORY[0x1E4F43688];
      int v41 = @"com.apple.WebKit.webpushd";
      v46[3] = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v41 forKeys:&v40 count:1];
      uint64_t v32 = objc_msgSend(v28, "optionsWithDictionary:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v46, v45, 4));
      uint64_t v33 = (void *)*((void *)this + 32);
      if (!v33)
      {
        __int16 v34 = (void *)SBSCreateOpenApplicationService();
        uint64_t v33 = v34;
        if (v34) {
          CFRetain(v34);
        }
        unint64_t v35 = (const void *)*((void *)this + 32);
        *((void *)this + 32) = v33;
        if (v35)
        {
          CFRelease(v35);
          uint64_t v33 = (void *)*((void *)this + 32);
        }
      }
      if (*(void *)a2) {
        __int16 v36 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        __int16 v36 = &stru_1EEA10550;
      }
      [v33 openApplication:v36 withOptions:v32 completion:&__block_literal_global_31];
      if (v27) {
        CFRelease(v27);
      }
      if (v26) {
        CFRelease(v26);
      }
      if (v24)
      {
        uint64_t v20 = v24;
        goto LABEL_46;
      }
    }
  }
  else
  {
    uint64_t v21 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1985F2000, v21, OS_LOG_TYPE_ERROR, "Cannot notify client app about web push action with empty pushPartition string", buf, 2u);
    }
  }
}

void sub_1993FD3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WTF *a13)
{
  if (v13) {
    CFRelease(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::WebPushDaemon::injectEncryptedPushMessageForTesting(uint64_t a1, WebPushD::PushClientConnection *a2, _DWORD **a3, uint64_t *a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a2 + 48))
  {
    uint64_t v6 = *a3;
    if (*a3) {
      *v6 += 2;
    }
    uint64_t v7 = *a4;
    *a4 = 0;
    unint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v8 = &unk_1EEA0C8E8;
    v8[1] = a1;
    v8[2] = v6;
    v8[3] = v7;
    *(void *)buf = v8;
    WebPushD::WebPushDaemon::runAfterStartingPushService(a1, (uint64_t *)buf);
    uint64_t result = *(void *)buf;
    *(void *)buf = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t v11 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      WebPushD::PushClientConnection::debugDescription((uint64_t *)&v16, a2);
      WTF::String::ascii((uint64_t *)&v17, (WTF::String *)&v16);
      if (v17) {
        unint64_t v12 = (char *)v17 + 16;
      }
      else {
        unint64_t v12 = 0;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "injectEncryptedPushMessageForTesting";
      __int16 v19 = 2048;
      uint64_t v20 = a2;
      __int16 v21 = 2082;
      int v22 = v12;
      _os_log_error_impl(&dword_1985F2000, v11, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: Attempting to inject a push message from an unentitled process", buf, 0x20u);
      uint64_t v14 = v17;
      uint64_t v17 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      uint64_t v15 = v16;
      uint64_t v16 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
    return WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
  }
  return result;
}

void sub_1993FD68C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebPushD::WebPushDaemon::handleIncomingPush(Class *a1, uint64_t a2, uint64_t *a3)
{
  v38[29] = *MEMORY[0x1E4F143B8];
  getAllowedBundleIdentifier(buf);
  uint64_t v6 = *(WTF::StringImpl **)buf;
  if (!WTF::equal(*(WTF **)buf, *(const WTF::StringImpl **)a2, v7))
  {
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v8);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    goto LABEL_17;
  }
  uint64_t v9 = WebPushD::WebPushDaemon::ensureWebClipCache((WebPushD::WebPushDaemon *)a1);
  unsigned int v10 = (WTF::StringImpl **)(a2 + 8);
  char isWebClipVisible = WebPushD::WebClipCache::isWebClipVisible(v9, (const WTF::String *)a2, (const WTF::String *)(a2 + 8));
  char v13 = isWebClipVisible;
  if (!v6)
  {
LABEL_5:
    if ((isWebClipVisible & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    goto LABEL_5;
  }
  WTF::StringImpl::destroy(v6, v12);
  if ((v13 & 1) == 0)
  {
LABEL_17:
    uint64_t v16 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
    {
      WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v30, (WebCore::PushSubscriptionSetIdentifier *)a2);
      WTF::String::utf8();
      if (v31) {
        uint64_t v17 = (char *)v31 + 16;
      }
      else {
        uint64_t v17 = 0;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v17;
      _os_log_impl(&dword_1985F2000, v16, OS_LOG_TYPE_DEFAULT, "Got incoming push from unexpected app: %{public}s", buf, 0xCu);
      __int16 v19 = v31;
      uint64_t v31 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1) {
          WTF::fastFree(v19, v18);
        }
        else {
          --*(_DWORD *)v19;
        }
      }
      uint64_t v20 = v30;
      uint64_t v30 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v18);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    WebPushD::WebPushDaemon::updateSubscriptionSetState((WebPushD::WebPushDaemon *)a1);
    return;
  }
LABEL_12:
  uint64_t v14 = *v10;
  if (*v10) {
    *(_DWORD *)v14 += 2;
  }
  WebPushD::platformNotificationCenterBundleIdentifier(&v30, (uint64_t)v14);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v15);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  id v21 = objc_alloc(a1[31]);
  int v22 = v30;
  uint64_t v23 = (void *)[v21 initWithBundleIdentifier:v30];
  uint64_t v31 = (WTF *)a1;
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  long long v33 = *(_OWORD *)(a2 + 16);
  WebKit::WebPushMessage::WebPushMessage((uint64_t)v34, a3);
  *(void *)buf = v31;
  long long v24 = v32;
  long long v32 = 0uLL;
  long long v36 = v24;
  long long v37 = v33;
  WebKit::WebPushMessage::WebPushMessage((uint64_t)v38, v34);
  unsigned int v25 = malloc_type_malloc(0x130uLL, 0x10F2040106D79A7uLL);
  *unsigned int v25 = MEMORY[0x1E4F14398];
  v25[1] = 50331650;
  v25[2] = WTF::BlockPtr<void ()(UNNotificationSettings *)>::fromCallable<WebPushD::WebPushDaemon::handleIncomingPush(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)::$_0>(WebPushD::WebPushDaemon::handleIncomingPush(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)::$_0)::{lambda(void *,UNNotificationSettings *)#1}::__invoke;
  v25[3] = &WTF::BlockPtr<void ()(UNNotificationSettings *)>::fromCallable<WebPushD::WebPushDaemon::handleIncomingPush(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)::$_0>(WebPushD::WebPushDaemon::handleIncomingPush(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)::$_0)::descriptor;
  v25[4] = *(void *)buf;
  long long v26 = v36;
  long long v36 = 0uLL;
  long long v27 = v37;
  *((_OWORD *)v25 + 3) = v26;
  *((_OWORD *)v25 + 4) = v27;
  WebKit::WebPushMessage::WebPushMessage((uint64_t)(v25 + 10), v38);
  WebPushD::WebPushDaemon::handleIncomingPush(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)::$_0::~$_0((uint64_t)buf, v28);
  WebPushD::WebPushDaemon::handleIncomingPush(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)::$_0::~$_0((uint64_t)&v31, v29);
  [v23 getNotificationSettingsWithCompletionHandler:v25];
  _Block_release(v25);
  if (v23) {
    CFRelease(v23);
  }
  if (v22) {
    CFRelease(v22);
  }
}

void sub_1993FDA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,WTF::StringImpl *a47,WTF::StringImpl *a48)
{
  _Block_release(v50);
  if (v49) {
    CFRelease(v49);
  }
  if (v48) {
    CFRelease(v48);
  }
  _Unwind_Resume(a1);
}

CFTypeRef WebPushD::platformNotificationCenterBundleIdentifier(void *a1, uint64_t a2)
{
  uint64_t v3 = NSString;
  if (a2) {
    uint64_t v4 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v4 = &stru_1EEA10550;
  }
  CFTypeRef result = (CFTypeRef)[v3 stringWithFormat:@"com.apple.WebKit.PushBundle.%@", v4];
  *a1 = result;
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

uint64_t WebPushD::WebPushDaemon::handleIncomingPush(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](a1 + 120, a2);
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unint64_t v5 = *(WTF::StringImpl **)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v9 = *(WTF **)(a1 + 48);
    if (v9)
    {
      *(void *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v9, v3);
    }
  }
  uint64_t v6 = *(WTF::StringImpl **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v3);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

void ___ZN8WebPushD13WebPushDaemon34notifyClientPushMessageIsAvailableERKN7WebCore29PushSubscriptionSetIdentifierE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v4 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138543362;
      uint64_t v6 = a3;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Failed to open app to handle push: %{public}@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void ___ZN8WebPushD13WebPushDaemon34notifyClientPushMessageIsAvailableERKN7WebCore29PushSubscriptionSetIdentifierE_block_invoke_21(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if ([a2 error])
  {
    uint64_t v3 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138543362;
      uint64_t v5 = [a2 error];
      _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "Client app failed to response to web push action: %{public}@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void ___ZN8WebPushD13WebPushDaemon34notifyClientPushMessageIsAvailableERKN7WebCore29PushSubscriptionSetIdentifierE_block_invoke_28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    int v4 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138543362;
      uint64_t v6 = a3;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Failed to open app to handle push: %{public}@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void WebPushD::WebPushDaemon::rescheduleSilentPushTimer(WebPushD::WebPushDaemon *this)
{
  if (*((void *)this + 30))
  {
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::start();
    if (!*((void *)this + 27))
    {
      uint64_t v2 = os_transaction_create();
      uint64_t v3 = (void *)*((void *)this + 27);
      *((void *)this + 27) = v2;
      if (v3)
      {
      }
    }
  }
  else
  {
    if ((*((void *)this + 24) & 0xFFFFFFFFFFFFLL) != 0) {
      WebCore::TimerBase::stopSlowCase((WebPushD::WebPushDaemon *)((char *)this + 160));
    }
    int v4 = (void *)*((void *)this + 27);
    if (v4) {

    }
    *((void *)this + 27) = 0;
  }
}

void *std::list<WebPushD::WebPushDaemon::PotentialSilentPush,WTF::FastAllocator<WebPushD::WebPushDaemon::PotentialSilentPush>>::erase(void *result, void *a2)
{
  if (a2 == result)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = *a2;
    uint64_t v4 = a2[1];
    *(void *)(v3 + 8) = v4;
    *(void *)a2[1] = v3;
    --result[2];
    std::__destroy_at[abi:sn180100]<WebPushD::WebPushDaemon::PotentialSilentPush,0>((WTF::StringImpl *)(a2 + 2), (WTF::StringImpl *)a2);
    WTF::fastFree((WTF *)a2, v5);
    return (void *)v4;
  }
  return result;
}

void WebPushD::WebPushDaemon::getPendingPushMessage(uint64_t a1, WTF **a2, uint64_t *a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(void *)(a1 + 64);
  unint64_t v7 = *(void *)(a1 + 72);
  unint64_t v8 = (uint64_t *)(a1 + 64);
  if (v6 > v7) {
    LODWORD(v7) = v7 + *(_DWORD *)(a1 + 88);
  }
  if (v7 == v6)
  {
LABEL_7:
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    memset(v59, 0, sizeof(v59));
    memset(v58, 0, sizeof(v58));
    long long v56 = 0u;
    long long v57 = 0u;
    unint64_t v12 = WTF::URL::URL((WTF::URL *)v59);
    BYTE8(v60) = 0;
    LOBYTE(v69) = 0;
  }
  else
  {
    int v9 = 0;
    int v10 = v6 - v7;
    while (1)
    {
      WTF::Deque<WebPushD::WebPushDaemon::PendingPushMessage,0ul>::takeFirst((uint64_t)&v56, (uint64_t)v8);
      unint64_t v12 = (WTF::MonotonicTime *)WebPushD::connectionMatchesPendingPushMessage(a2, (const WTF::StringImpl **)&v56, v11);
      if (v12) {
        break;
      }
      WTF::Deque<WebPushD::WebPushDaemon::PendingPushMessage,0ul>::append<WebPushD::WebPushDaemon::PendingPushMessage>((uint64_t)v8, (uint64_t *)&v56);
      WebPushD::WebPushDaemon::PendingPushMessage::~PendingPushMessage((WebPushD::WebPushDaemon::PendingPushMessage *)&v56, v13);
      if (v10 == --v9) {
        goto LABEL_7;
      }
    }
    if (v9)
    {
      do
      {
        uint64_t v14 = *(void *)(a1 + 72);
        if (*(void *)(a1 + 64) == v14)
        {
          __break(0xC471u);
          JUMPOUT(0x1993FE5F0);
        }
        if (!v14) {
          uint64_t v14 = *(unsigned int *)(a1 + 88);
        }
        uint64_t v15 = *(void *)(a1 + 80) + (v14 << 8);
        long long v16 = *(_OWORD *)(v15 - 256);
        *(void *)(v15 - 256) = 0;
        *(void *)(v15 - 248) = 0;
        *(_OWORD *)buf = v16;
        *(_OWORD *)&buf[16] = *(_OWORD *)(v15 - 240);
        WebKit::WebPushMessage::WebPushMessage((uint64_t)&v71, (uint64_t *)(v15 - 224));
        uint64_t v18 = *(void *)(a1 + 72);
        if (*(void *)(a1 + 64) == v18)
        {
          __break(0xC471u);
          JUMPOUT(0x1993FE610);
        }
        if (!v18) {
          uint64_t v18 = *(unsigned int *)(a1 + 88);
        }
        uint64_t v19 = v18 - 1;
        *(void *)(a1 + 72) = v19;
        WebPushD::WebPushDaemon::PendingPushMessage::~PendingPushMessage((WebPushD::WebPushDaemon::PendingPushMessage *)(*(void *)(a1 + 80) + (v19 << 8)), v17);
        uint64_t v20 = *(void *)(a1 + 64);
        uint64_t v21 = *(void *)(a1 + 72);
        if (v20)
        {
          if (v21 + 1 == v20) {
            goto LABEL_22;
          }
        }
        else
        {
          uint64_t v20 = *(unsigned int *)(a1 + 88);
          if (v21)
          {
            if (v21 == v20 - 1) {
              goto LABEL_22;
            }
          }
          else if (!*(_DWORD *)(a1 + 88))
          {
LABEL_22:
            WTF::Deque<WebPushD::WebPushDaemon::PendingPushMessage,0ul>::expandCapacity((uint64_t)v8);
            uint64_t v20 = *v8;
            if (!*v8) {
              uint64_t v20 = *(unsigned int *)(a1 + 88);
            }
          }
        }
        uint64_t v22 = v20 - 1;
        *(void *)(a1 + 64) = v22;
        uint64_t v23 = *(void *)(a1 + 80) + (v22 << 8);
        uint64_t v24 = *(void *)buf;
        *(void *)buf = 0;
        *(void *)uint64_t v23 = v24;
        uint64_t v25 = *(void *)&buf[8];
        *(void *)&buf[8] = 0;
        *(void *)(v23 + 8) = v25;
        *(_OWORD *)(v23 + 16) = *(_OWORD *)&buf[16];
        WebKit::WebPushMessage::WebPushMessage(v23 + 32, (uint64_t *)&v71);
        WebPushD::WebPushDaemon::PendingPushMessage::~PendingPushMessage((WebPushD::WebPushDaemon::PendingPushMessage *)buf, v26);
      }
      while (!__CFADD__(v9++, 1));
    }
  }
  uint64_t v28 = v56;
  if ((void)v56 && *(_DWORD *)(v56 + 4))
  {
    *(_DWORD *)v56 += 2;
    uint64_t v29 = *((void *)&v56 + 1);
    if (*((void *)&v56 + 1)) {
      **((_DWORD **)&v56 + 1) += 2;
    }
    long long v30 = v57;
    uint64_t v31 = *(void *)&v59[0];
    if (*(void *)&v59[0]) {
      **(_DWORD **)&v59[0] += 2;
    }
    WTF::MonotonicTime::now(v12);
    double v33 = v32;
    int v34 = *(unsigned __int8 *)(a1 + 24);
    uint64_t v35 = WTF::fastMalloc((WTF *)0x40);
    double v36 = 1.0;
    if (!v34) {
      double v36 = 30.0;
    }
    *(void *)(v35 + 16) = v28;
    *(void *)(v35 + 24) = v29;
    *(_OWORD *)(v35 + 32) = v30;
    *(void *)(v35 + 48) = v31;
    *(double *)(v35 + 56) = v33 + v36;
    *(void *)uint64_t v35 = 0;
    *(void *)(v35 + 8) = a1 + 224;
    uint64_t v37 = *(void *)(a1 + 224);
    *(void *)uint64_t v35 = v37;
    *(void *)(v37 + 8) = v35;
    *(void *)(a1 + 224) = v35;
    uint64_t v38 = *(void *)(a1 + 240);
    *(void *)(a1 + 240) = v38 + 1;
    if (!v38) {
      WebPushD::WebPushDaemon::rescheduleSilentPushTimer((WebPushD::WebPushDaemon *)a1);
    }
    unint64_t v39 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
    {
      WebPushD::PushClientConnection::debugDescription((uint64_t *)&v54, (WebPushD::PushClientConnection *)a2);
      WTF::String::ascii((uint64_t *)&v55, (WTF::String *)&v54);
      if (v55) {
        uint64_t v40 = (char *)v55 + 16;
      }
      else {
        uint64_t v40 = 0;
      }
      unint64_t v41 = *(void *)(a1 + 64);
      unint64_t v42 = *(void *)(a1 + 72);
      if (v41 > v42) {
        v42 += *(unsigned int *)(a1 + 88);
      }
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "getPendingPushMessage";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a2;
      *(_WORD *)&unsigned char buf[22] = 2082;
      *(void *)&buf[24] = v40;
      __int16 v71 = 2048;
      unint64_t v72 = v42 - v41;
      _os_log_impl(&dword_1985F2000, v39, OS_LOG_TYPE_DEFAULT, "%{public}s [connection=%p, app=%{public}s]: Fetched 1 push message, %zu remaining", buf, 0x2Au);
      uint64_t v44 = v55;
      char v55 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 1) {
          WTF::fastFree(v44, v43);
        }
        else {
          --*(_DWORD *)v44;
        }
      }
      uint64_t v50 = v54;
      uint64_t v54 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2) {
          WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v43);
        }
        else {
          *(_DWORD *)v50 -= 2;
        }
      }
    }
    WebKit::WebPushMessage::WebPushMessage((uint64_t)buf, (uint64_t *)v58);
    char v73 = 1;
    WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)>::operator()(a3);
    std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v53);
    if (*(void *)(a1 + 64) == *(void *)(a1 + 72)) {
      WebPushD::WebPushDaemon::releaseIncomingPushTransaction((WebPushD::WebPushDaemon *)a1);
    }
  }
  else
  {
    uint64_t v45 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
    {
      WebPushD::PushClientConnection::debugDescription((uint64_t *)&v54, (WebPushD::PushClientConnection *)a2);
      WTF::String::ascii((uint64_t *)&v55, (WTF::String *)&v54);
      if (v55) {
        char v46 = (char *)v55 + 16;
      }
      else {
        char v46 = 0;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "getPendingPushMessage";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a2;
      *(_WORD *)&unsigned char buf[22] = 2082;
      *(void *)&buf[24] = v46;
      _os_log_impl(&dword_1985F2000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s [connection=%p, app=%{public}s]: No pending push message", buf, 0x20u);
      uint64_t v48 = v55;
      char v55 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 1) {
          WTF::fastFree(v48, v47);
        }
        else {
          --*(_DWORD *)v48;
        }
      }
      uint64_t v49 = v54;
      uint64_t v54 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2) {
          WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v47);
        }
        else {
          *(_DWORD *)v49 -= 2;
        }
      }
    }
    buf[0] = 0;
    char v73 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)>::operator()(a3);
    std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v51);
  }
  WebPushD::WebPushDaemon::PendingPushMessage::~PendingPushMessage((WebPushD::WebPushDaemon::PendingPushMessage *)&v56, v52);
}

void sub_1993FE618(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, char a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,WTF::StringImpl *a45)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  WebPushD::WebPushDaemon::PendingPushMessage::~PendingPushMessage((WebPushD::WebPushDaemon::PendingPushMessage *)&a11, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1993FE898(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::getPendingPushMessages(uint64_t a1, WTF **a2, uint64_t *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  long long v6 = 0uLL;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  uint64_t v7 = a1 + 64;
  if (*(void *)(a1 + 64) == *(void *)(a1 + 72))
  {
    int v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    do
    {
      WTF::Deque<WebPushD::WebPushDaemon::PendingPushMessage,0ul>::takeFirst((uint64_t)buf, v7);
      if (WebPushD::connectionMatchesPendingPushMessage(a2, (const WTF::StringImpl **)buf, v10))
      {
        if (HIDWORD(v27) == DWORD2(v27))
        {
          WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPushMessage>((uint64_t)&v27, (unint64_t)&v34);
        }
        else
        {
          WebKit::WebPushMessage::WebPushMessage(v27 + 216 * HIDWORD(v27), (uint64_t *)&v34);
          ++HIDWORD(v27);
        }
      }
      else
      {
        WTF::Deque<WebPushD::WebPushDaemon::PendingPushMessage,0ul>::append<WebPushD::WebPushDaemon::PendingPushMessage>((uint64_t)&v25, (uint64_t *)buf);
      }
      WebPushD::WebPushDaemon::PendingPushMessage::~PendingPushMessage((WebPushD::WebPushDaemon::PendingPushMessage *)buf, v11);
    }
    while (*(void *)(a1 + 64) != *(void *)(a1 + 72));
    long long v6 = v25;
    uint64_t v9 = v26;
    int v8 = DWORD2(v26);
  }
  *(_OWORD *)(a1 + 64) = v6;
  unint64_t v12 = *(WTF **)(a1 + 80);
  *(void *)(a1 + 80) = v9;
  *(_DWORD *)(a1 + 88) = v8;
  char v13 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
  {
    WebPushD::PushClientConnection::debugDescription((uint64_t *)&v23, (WebPushD::PushClientConnection *)a2);
    WTF::String::ascii((uint64_t *)&v24, (WTF::String *)&v23);
    uint64_t v14 = (char *)v24 + 16;
    if (!v24) {
      uint64_t v14 = 0;
    }
    unint64_t v15 = *(void *)(a1 + 64);
    unint64_t v16 = *(void *)(a1 + 72);
    if (v15 > v16) {
      v16 += *(unsigned int *)(a1 + 88);
    }
    *(_DWORD *)buf = 136447234;
    uint64_t v29 = "getPendingPushMessages";
    __int16 v30 = 2048;
    uint64_t v31 = a2;
    __int16 v32 = 2082;
    double v33 = v14;
    __int16 v34 = 2048;
    uint64_t v35 = HIDWORD(v27);
    __int16 v36 = 2048;
    unint64_t v37 = v16 - v15;
    _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s [connection=%p, app=%{public}s]: Fetched %zu push messages, %zu remaining", buf, 0x34u);
    uint64_t v18 = v24;
    uint64_t v24 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1) {
        WTF::fastFree(v18, v17);
      }
      else {
        --*(_DWORD *)v18;
      }
    }
    uint64_t v19 = v23;
    uint64_t v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
  uint64_t v20 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)v20 + 16))(v20, &v27);
  (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  if (*(void *)(a1 + 64) == *(void *)(a1 + 72)) {
    WebPushD::WebPushDaemon::releaseIncomingPushTransaction((WebPushD::WebPushDaemon *)a1);
  }
  if (v12) {
    WTF::fastFree(v12, v21);
  }
  return WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v21);
}

void sub_1993FEB94(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, WebPushD::WebPushDaemon::PendingPushMessage *a13, int a14, int a15, char a16, uint64_t a17, char a18)
{
  if (v18) {
    WTF::fastFree(v18, a2);
  }
  WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a16, a2);
  _Unwind_Resume(a1);
}

void WTF::Deque<WebPushD::WebPushDaemon::PendingPushMessage,0ul>::takeFirst(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 == *(void *)(a2 + 8)) {
    goto LABEL_7;
  }
  uint64_t v3 = (uint64_t *)(*(void *)(a2 + 16) + (*(void *)a2 << 8));
  uint64_t v4 = *v3;
  *uint64_t v3 = 0;
  *(void *)a1 = v4;
  uint64_t v5 = v3[1];
  v3[1] = 0;
  *(void *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)v3 + 1);
  WebKit::WebPushMessage::WebPushMessage(a1 + 32, v3 + 4);
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x1993FED5CLL);
  }
  WebPushD::WebPushDaemon::PendingPushMessage::~PendingPushMessage((WebPushD::WebPushDaemon::PendingPushMessage *)(*(void *)(a2 + 16) + (*(void *)a2 << 8)), v6);
  if (*(void *)a2 == *(unsigned int *)(a2 + 24) - 1) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *(void *)a2 + 1;
  }
  *(void *)a2 = v7;
}

void sub_1993FED80(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = v2[1];
  v2[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *v2;
  WTF::StringImpl *v2 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::connectionMatchesPendingPushMessage(WTF **this, const WTF::StringImpl **a2, const WebCore::PushSubscriptionSetIdentifier *a3)
{
  if (!WTF::equal(this[5], *a2, a3)) {
    return 0;
  }
  int v8 = a2[2];
  uint64_t v7 = a2[3];
  if (*((_OWORD *)this + 4) == 0)
  {
    if (!((unint64_t)v8 | (unint64_t)v7)) {
      goto LABEL_11;
    }
    return 0;
  }
  uint64_t v9 = 0;
  if ((unint64_t)v8 | (unint64_t)v7)
  {
    if (this[9] == v7 && this[8] == v8)
    {
LABEL_11:
      uint64_t v11 = (int *)this[7];
      if (!v11) {
        return 1;
      }
      int v12 = *v11;
      int v13 = v11[1];
      *v11 += 2;
      if (v13)
      {
        uint64_t v9 = WTF::equal((WTF *)v11, a2[1], v6);
        int v12 = *v11 - 2;
        if (*v11 != 2)
        {
LABEL_14:
          *uint64_t v11 = v12;
          return v9;
        }
      }
      else
      {
        uint64_t v9 = 1;
        if (v12) {
          goto LABEL_14;
        }
      }
      WTF::StringImpl::destroy((WTF::StringImpl *)v11, v5);
    }
  }
  return v9;
}

void sub_1993FEEA4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::WebPushDaemon::getPushTopicsForTesting(uint64_t a1, WebPushD::PushClientConnection *a2, uint64_t *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a2 + 48))
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    long long v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    *long long v6 = &unk_1EEA0C960;
    v6[1] = a1;
    void v6[2] = v5;
    *(void *)buf = v6;
    WebPushD::WebPushDaemon::runAfterStartingPushService(a1, (uint64_t *)buf);
    uint64_t result = *(void *)buf;
    *(void *)buf = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t v9 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      WebPushD::PushClientConnection::debugDescription((uint64_t *)&v18, a2);
      WTF::String::ascii((uint64_t *)&v19, (WTF::String *)&v18);
      if (v19) {
        int v12 = (char *)v19 + 16;
      }
      else {
        int v12 = 0;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "getPushTopicsForTesting";
      __int16 v21 = 2048;
      uint64_t v22 = a2;
      __int16 v23 = 2082;
      uint64_t v24 = v12;
      _os_log_error_impl(&dword_1985F2000, v9, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: Need entitlement to get push topics", buf, 0x20u);
      uint64_t v14 = v19;
      uint64_t v19 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      unint64_t v15 = v18;
      uint64_t v18 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
    v17[0] = 0;
    v17[1] = 0;
    v16[0] = 0;
    v16[1] = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a3, v17, v16);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v10);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v11);
  }
  return result;
}

void sub_1993FF0B4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a3;
  *a3 = 0;
  v14[0] = 0;
  v16[0] = v4;
  v14[1] = 0;
  uint64_t v6 = a2[1];
  a2[1] = 0;
  v16[1] = v6;
  v13[0] = 0;
  v15[0] = v5;
  v13[1] = 0;
  uint64_t v7 = a3[1];
  a3[1] = 0;
  v15[1] = v7;
  (*(void (**)(uint64_t, void *, void *))(*(void *)v3 + 16))(v3, v16, v15);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v8);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v9);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v10);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
}

void sub_1993FF258(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14 - 32, v16);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v17);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v18);
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::subscribeToPushService(uint64_t a1, const WTF::URL *a2, WebCore::SecurityOriginData *this, uint64_t a4, uint64_t *a5)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  WebCore::SecurityOriginData::fromURL(v85, this, a2);
  WebPushD::PushClientConnection::subscriptionSetIdentifierForOrigin(a2, (const WebCore::SecurityOriginData *)v85, (uint64_t)&v80);
  if (!v84)
  {
    __int16 v21 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      WebPushD::PushClientConnection::debugDescription((uint64_t *)&v69, a2);
      WTF::String::ascii((uint64_t *)v70, (WTF::String *)&v69);
      if (v70[0]) {
        uint64_t v38 = (char *)v70[0] + 16;
      }
      else {
        uint64_t v38 = 0;
      }
      WebCore::SecurityOriginData::toString((uint64_t *)&v67, (WebCore::SecurityOriginData *)v85);
      WTF::String::ascii((uint64_t *)&v68, (WTF::String *)&v67);
      if (v68) {
        unint64_t v39 = (char *)v68 + 16;
      }
      else {
        unint64_t v39 = 0;
      }
      *(_DWORD *)buf = 136446979;
      *(void *)&uint8_t buf[4] = "subscribeToPushService";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a2;
      __int16 v73 = 2082;
      uint64_t v74 = v38;
      __int16 v75 = 2085;
      uint64_t v76 = v39;
      _os_log_error_impl(&dword_1985F2000, v21, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: No web clip associated with origin %{sensitive}s", buf, 0x2Au);
      unint64_t v41 = v68;
      long long v68 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 1) {
          WTF::fastFree(v41, v40);
        }
        else {
          --*(_DWORD *)v41;
        }
      }
      uint64_t v45 = v67;
      long long v67 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2) {
          WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v40);
        }
        else {
          *(_DWORD *)v45 -= 2;
        }
      }
      char v46 = v70[0];
      v70[0] = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 1) {
          WTF::fastFree(v46, v40);
        }
        else {
          --*(_DWORD *)v46;
        }
      }
      uint64_t v47 = v69;
      long long v69 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2) {
          WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v40);
        }
        else {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    buf[0] = 31;
    *(WTF **)&buf[8] = v70[0];
    int v79 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)>::operator()(a5);
    if (v79 != -1) {
      ((void (*)(WTF **, unsigned char *))off_1EEA0C5C0[v79])(v70, buf);
    }
    goto LABEL_140;
  }
  uint64_t v11 = v80;
  int v10 = v81;
  __int16 v80 = 0;
  unsigned __int8 v81 = 0;
  uint64_t v13 = v82;
  uint64_t v12 = v83;
  uint64_t v14 = (void *)MEMORY[0x1E4F43048];
  if (v10) {
    unint64_t v15 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    unint64_t v15 = &stru_1EEA10550;
  }
  unint64_t v16 = (void *)[v14 webClipWithIdentifier:v15];
  if (v16)
  {
    uint64_t v17 = v16;
    CFRetain(v16);
    unint64_t v16 = v17;
  }
  CFTypeRef v63 = v16;
  MEMORY[0x19972E8A0](buf, [v16 pageURL]);
  WebCore::SecurityOriginData::fromURL((uint64_t *)v70, (WebCore::SecurityOriginData *)buf, v18);
  uint64_t v20 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v19);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  if (v87)
  {
    if (v87 != 1)
    {
      uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
  }
  else if (v85[0] || v85[1] || v86) && (WebCore::operator==())
  {
    if (v10) {
      *(_DWORD *)v10 += 2;
    }
    WebPushD::platformNotificationCenterBundleIdentifier(&v68, (uint64_t)v10);
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v23);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    id v24 = objc_alloc(*(Class *)(a1 + 248));
    uint64_t v25 = v68;
    CFTypeRef cf = (void *)[v24 initWithBundleIdentifier:v68];
    if (objc_msgSend((id)objc_msgSend(cf, "notificationSettings"), "authorizationStatus") != 2)
    {
      double v33 = qword_1EB3583C0;
      if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
      {
        WebPushD::PushClientConnection::debugDescription((uint64_t *)&v67, a2);
        WTF::String::ascii((uint64_t *)&v69, (WTF::String *)&v67);
        if (v69) {
          __int16 v34 = (char *)v69 + 16;
        }
        else {
          __int16 v34 = 0;
        }
        WebCore::SecurityOriginData::toString((uint64_t *)&v65, (WebCore::SecurityOriginData *)v85);
        WTF::String::utf8();
        if (v66) {
          uint64_t v35 = (char *)v66 + 16;
        }
        else {
          uint64_t v35 = 0;
        }
        *(_DWORD *)buf = 136446979;
        *(void *)&uint8_t buf[4] = "subscribeToPushService";
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = a2;
        __int16 v73 = 2082;
        uint64_t v74 = v34;
        __int16 v75 = 2085;
        uint64_t v76 = v35;
        _os_log_impl(&dword_1985F2000, v33, OS_LOG_TYPE_DEFAULT, "%{public}s [connection=%p, app=%{public}s]: Cannot subscribe because web clip origin %{sensitive}s does not have correct permissions", buf, 0x2Au);
        unint64_t v37 = v66;
        long long v66 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 1) {
            WTF::fastFree(v37, v36);
          }
          else {
            --*(_DWORD *)v37;
          }
        }
        unint64_t v42 = v65;
        long long v65 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2) {
            WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v36);
          }
          else {
            *(_DWORD *)v42 -= 2;
          }
        }
        uint64_t v43 = v69;
        long long v69 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1) {
            WTF::fastFree(v43, v36);
          }
          else {
            --*(_DWORD *)v43;
          }
        }
        uint64_t v44 = v67;
        long long v67 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2) {
            WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v36);
          }
          else {
            *(_DWORD *)v44 -= 2;
          }
        }
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      buf[0] = 31;
      *(void *)&buf[8] = v69;
      int v79 = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)>::operator()(a5);
      if (v79 != -1) {
        ((void (*)(WTF::StringImpl **, unsigned char *))off_1EEA0C5C0[v79])(&v69, buf);
      }
      goto LABEL_69;
    }
    long long v61 = v11;
    long long v26 = *(_DWORD **)this;
    if (v26) {
      *v26 += 2;
    }
    size_t v27 = *(unsigned int *)(a4 + 12);
    if (v27)
    {
      uint64_t v28 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a4 + 12));
      memcpy(v28, *(const void **)a4, *(unsigned int *)(a4 + 12));
    }
    else
    {
      uint64_t v28 = 0;
    }
    uint64_t v29 = *a5;
    *a5 = 0;
    uint64_t v30 = WTF::fastMalloc((WTF *)0x60);
    *(void *)uint64_t v30 = &unk_1EEA0C988;
    *(void *)(v30 + 16) = a1;
    *(void *)(v30 + 32) = v61;
    *(void *)(v30 + 40) = v10;
    *(void *)(v30 + 48) = v13;
    *(void *)(v30 + 56) = v12;
    *(void *)(v30 + 72) = 0;
    *(void *)(v30 + 80) = 0;
    *(void *)(v30 + 64) = v26;
    *(_DWORD *)(v30 + 84) = v27;
    if (v27)
    {
      uint64_t v31 = (void *)WTF::fastMalloc((WTF *)v27);
      *(_DWORD *)(v30 + 80) = v27;
      *(void *)(v30 + 72) = v31;
      memcpy(v31, v28, v27);
    }
    *(void *)(v30 + 88) = v29;
    *(void *)buf = v30;
    WebPushD::WebPushDaemon::runAfterStartingPushService(a1, (uint64_t *)buf);
    uint64_t v32 = *(void *)buf;
    *(void *)buf = 0;
    if (v32)
    {
      (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
      if (!v28) {
        goto LABEL_34;
      }
    }
    else if (!v28)
    {
LABEL_34:
      uint64_t v11 = 0;
      int v10 = 0;
LABEL_69:
      if (cf) {
        CFRelease(cf);
      }
      if (v25) {
        CFRelease(v25);
      }
      goto LABEL_127;
    }
    WTF::fastFree((WTF *)v28, v22);
    goto LABEL_34;
  }
  uint64_t v48 = v11;
  uint64_t v49 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
  {
    WebPushD::PushClientConnection::debugDescription((uint64_t *)&v68, a2);
    WTF::String::ascii((uint64_t *)&v69, (WTF::String *)&v68);
    if (v69) {
      uint64_t v50 = (char *)v69 + 16;
    }
    else {
      uint64_t v50 = 0;
    }
    WebCore::SecurityOriginData::toString((uint64_t *)&v66, (WebCore::SecurityOriginData *)v70);
    WTF::String::utf8();
    if (v67) {
      uint64_t v51 = (char *)v67 + 16;
    }
    else {
      uint64_t v51 = 0;
    }
    WebCore::SecurityOriginData::toString((uint64_t *)&v64, (WebCore::SecurityOriginData *)v85);
    WTF::String::utf8();
    if (v65) {
      uint64_t v52 = (char *)v65 + 16;
    }
    else {
      uint64_t v52 = 0;
    }
    *(_DWORD *)buf = 136447235;
    *(void *)&uint8_t buf[4] = "subscribeToPushService";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = a2;
    __int16 v73 = 2082;
    uint64_t v74 = v50;
    __int16 v75 = 2085;
    uint64_t v76 = v51;
    __int16 v77 = 2085;
    uint64_t v78 = v52;
    _os_log_impl(&dword_1985F2000, v49, OS_LOG_TYPE_DEFAULT, "%{public}s [connection=%p, app=%{public}s]: Cannot subscribe because web clip origin %{sensitive}s does not match expected origin %{sensitive}s", buf, 0x34u);
    uint64_t v54 = v65;
    long long v65 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 1) {
        WTF::fastFree(v54, v53);
      }
      else {
        --*(_DWORD *)v54;
      }
    }
    char v55 = v64;
    long long v64 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2) {
        WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v53);
      }
      else {
        *(_DWORD *)v55 -= 2;
      }
    }
    long long v56 = v67;
    long long v67 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 1) {
        WTF::fastFree(v56, v53);
      }
      else {
        --*(_DWORD *)v56;
      }
    }
    long long v57 = v66;
    long long v66 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2) {
        WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v53);
      }
      else {
        *(_DWORD *)v57 -= 2;
      }
    }
    int v58 = v69;
    long long v69 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 1) {
        WTF::fastFree(v58, v53);
      }
      else {
        --*(_DWORD *)v58;
      }
    }
    uint64_t v59 = v68;
    long long v68 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2) {
        WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v53);
      }
      else {
        *(_DWORD *)v59 -= 2;
      }
    }
  }
  uint64_t v11 = v48;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  buf[0] = 31;
  *(void *)&buf[8] = v69;
  int v79 = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)>::operator()(a5);
  if (v79 != -1) {
    ((void (*)(WTF::StringImpl **, unsigned char *))off_1EEA0C5C0[v79])(&v69, buf);
  }
LABEL_127:
  if (v71 != -1) {
    ((void (*)(unsigned char *, WTF **))off_1EEA0C558[v71])(buf, v70);
  }
  if (v63) {
    CFRelease(v63);
  }
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v22);
      if (!v11) {
        goto LABEL_140;
      }
LABEL_137:
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v22);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
      goto LABEL_140;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (v11) {
    goto LABEL_137;
  }
LABEL_140:
  uint64_t result = std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v80, (WTF::StringImpl *)v22);
  if (v87 != -1) {
    return ((uint64_t (*)(unsigned char *, uint64_t *))off_1EEA0C558[v87])(buf, v85);
  }
  return result;
}

void sub_1993FFC00(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, CFTypeRef cf, CFTypeRef a12, WTF::StringImpl *a13, WTF::StringImpl *a14, WTF::StringImpl *a15, WTF::StringImpl *a16, CFTypeRef a17, WTF *a18, WTF *a19, uint64_t a20,uint64_t a21,int a22,WTF::StringImpl *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33)
{
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 1) {
      WTF::fastFree(a18, a2);
    }
    else {
      --*(_DWORD *)a18;
    }
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a17) {
    CFRelease(a17);
  }
  if (a22 != -1) {
    ((void (*)(WTF::StringImpl **, WTF **))off_1EEA0C558[a22])(&a23, &a19);
  }
  if (a12) {
    CFRelease(a12);
  }
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, a2);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, a2);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100](v35 - 176, a2);
  uint64_t v37 = *(unsigned int *)(v35 - 104);
  if (v37 != -1) {
    ((void (*)(WTF::StringImpl **, uint64_t))off_1EEA0C558[v37])(&a23, v35 - 128);
  }
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::unsubscribeFromPushService(uint64_t a1, const WTF::URL *a2, WebCore::SecurityOriginData *this, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  WebCore::SecurityOriginData::fromURL(v46, this, a2);
  WebPushD::PushClientConnection::subscriptionSetIdentifierForOrigin(a2, (const WebCore::SecurityOriginData *)v46, (uint64_t)&v41);
  if (v45)
  {
    uint64_t v12 = v41;
    uint64_t v13 = v42;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v15 = v43;
    uint64_t v14 = v44;
    unint64_t v16 = *(_DWORD **)this;
    if (v16) {
      *v16 += 2;
    }
    uint64_t v17 = *a6;
    *a6 = 0;
    uint64_t v18 = WTF::fastMalloc((WTF *)0x60);
    *(void *)uint64_t v18 = &unk_1EEA0C9B0;
    *(void *)(v18 + 16) = a1;
    *(void *)(v18 + 32) = v12;
    *(void *)(v18 + 40) = v13;
    *(void *)(v18 + 48) = v15;
    *(void *)(v18 + 56) = v14;
    *(void *)(v18 + 64) = v16;
    *(void *)(v18 + 72) = a4;
    *(unsigned char *)(v18 + 80) = a5;
    *(void *)(v18 + 88) = v17;
    *(void *)buf = v18;
    WebPushD::WebPushDaemon::runAfterStartingPushService(a1, (uint64_t *)buf);
    uint64_t v20 = *(void *)buf;
    *(void *)buf = 0;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
  }
  else
  {
    __int16 v21 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      WebPushD::PushClientConnection::debugDescription((uint64_t *)&v32, a2);
      WTF::String::ascii((uint64_t *)&v33, (WTF::String *)&v32);
      if (v33) {
        __int16 v23 = (char *)v33 + 16;
      }
      else {
        __int16 v23 = 0;
      }
      WebCore::SecurityOriginData::toString((uint64_t *)&v30, (WebCore::SecurityOriginData *)v46);
      WTF::String::ascii((uint64_t *)&v31, (WTF::String *)&v30);
      if (v31) {
        id v24 = (char *)v31 + 16;
      }
      else {
        id v24 = 0;
      }
      *(_DWORD *)buf = 136446979;
      *(void *)&uint8_t buf[4] = "unsubscribeFromPushService";
      __int16 v35 = 2048;
      __int16 v36 = a2;
      __int16 v37 = 2082;
      uint64_t v38 = v23;
      __int16 v39 = 2085;
      uint64_t v40 = v24;
      _os_log_error_impl(&dword_1985F2000, v21, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: No web clip associated with origin %{sensitive}s", buf, 0x2Au);
      long long v26 = v31;
      uint64_t v31 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          WTF::fastFree(v26, v25);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
      size_t v27 = v30;
      uint64_t v30 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
      uint64_t v28 = v33;
      double v33 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 1) {
          WTF::fastFree(v28, v25);
        }
        else {
          --*(_DWORD *)v28;
        }
      }
      uint64_t v29 = v32;
      uint64_t v32 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v25);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
    }
    buf[0] = 0;
    *(_DWORD *)((char *)&v36 + 2) = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)>::operator()(a6);
    if (*(_DWORD *)((char *)&v36 + 2) != -1) {
      ((void (*)(WTF **, unsigned char *))off_1EEA0C5D0[*(unsigned int *)((char *)&v36 + 2)])(&v33, buf);
    }
  }
  uint64_t result = std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41, v19);
  if (v47 != -1) {
    return ((uint64_t (*)(uint64_t *, uint64_t *))off_1EEA0C558[v47])(&v41, v46);
  }
  return result;
}

void sub_199400498(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,int a28)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a19, a2);
  if (a28 != -1) {
    ((void (*)(char *, char *))off_1EEA0C558[a28])(&a19, &a25);
  }
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::getPushSubscription(uint64_t a1, const WTF::URL *a2, WebCore::SecurityOriginData *this, uint64_t *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  WebCore::SecurityOriginData::fromURL(v45, this, a2);
  WebPushD::PushClientConnection::subscriptionSetIdentifierForOrigin(a2, (const WebCore::SecurityOriginData *)v45, (uint64_t)&v40);
  if (v44)
  {
    uint64_t v8 = v40;
    uint64_t v9 = v41;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v11 = v42;
    uint64_t v10 = v43;
    uint64_t v12 = *(_DWORD **)this;
    if (v12) {
      *v12 += 2;
    }
    uint64_t v13 = *a4;
    *a4 = 0;
    uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x50);
    *uint64_t v14 = &unk_1EEA0C9D8;
    void v14[2] = a1;
    v14[4] = v8;
    v14[5] = v9;
    v14[6] = v11;
    v14[7] = v10;
    v14[8] = v12;
    v14[9] = v13;
    *(void *)buf = v14;
    WebPushD::WebPushDaemon::runAfterStartingPushService(a1, (uint64_t *)buf);
    uint64_t v16 = *(void *)buf;
    *(void *)buf = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  else
  {
    uint64_t v17 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      WebPushD::PushClientConnection::debugDescription((uint64_t *)&v31, a2);
      WTF::String::ascii((uint64_t *)v27, (WTF::String *)&v31);
      if (v27[0]) {
        uint64_t v20 = (char *)v27[0] + 16;
      }
      else {
        uint64_t v20 = 0;
      }
      WebCore::SecurityOriginData::toString((uint64_t *)&v29, (WebCore::SecurityOriginData *)v45);
      WTF::String::ascii((uint64_t *)&v30, (WTF::String *)&v29);
      if (v30) {
        __int16 v21 = (char *)v30 + 16;
      }
      else {
        __int16 v21 = 0;
      }
      *(_DWORD *)buf = 136446979;
      *(void *)&uint8_t buf[4] = "getPushSubscription";
      __int16 v33 = 2048;
      __int16 v34 = a2;
      __int16 v35 = 2082;
      __int16 v36 = v20;
      __int16 v37 = 2085;
      uint64_t v38 = v21;
      _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: No web clip associated with origin %{sensitive}s", buf, 0x2Au);
      __int16 v23 = v30;
      uint64_t v30 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1) {
          WTF::fastFree(v23, v22);
        }
        else {
          --*(_DWORD *)v23;
        }
      }
      id v24 = v29;
      uint64_t v29 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v22);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      uint64_t v25 = v27[0];
      v27[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1) {
          WTF::fastFree(v25, v22);
        }
        else {
          --*(_DWORD *)v25;
        }
      }
      long long v26 = v31;
      uint64_t v31 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v22);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
    }
    LOBYTE(v27[0]) = 0;
    char v28 = 0;
    std::__optional_move_base<WebCore::PushSubscriptionData,false>::__optional_move_base[abi:sn180100](&buf[8], (uint64_t)v27);
    int v39 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)>::operator()(a4);
    if (v39 != -1) {
      ((void (*)(WTF::StringImpl **, unsigned char *))off_1EEA0C5E0[v39])(&v31, &buf[8]);
    }
    int v39 = -1;
    std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v27, v18);
  }
  uint64_t result = std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v40, v15);
  if (v46 != -1) {
    return ((uint64_t (*)(unsigned char *, uint64_t *))off_1EEA0C558[v46])(buf, v45);
  }
  return result;
}

void sub_199400980(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 1) {
      WTF::fastFree(a9, a2);
    }
    else {
      --*(_DWORD *)a9;
    }
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, a2);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100](v35 - 176, a2);
  uint64_t v37 = *(unsigned int *)(v35 - 96);
  if (v37 != -1) {
    ((void (*)(uint64_t *, uint64_t))off_1EEA0C558[v37])(&a23, v35 - 120);
  }
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::incrementSilentPushCount(uint64_t a1, WebPushD::PushClientConnection *this, WebCore::SecurityOriginData *a3, uint64_t *a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  WebPushD::PushClientConnection::subscriptionSetIdentifierForOrigin(this, a3, (uint64_t)v36);
  if (v37)
  {
    *(void *)buf = a1;
    long long v8 = v36[0];
    v36[0] = 0uLL;
    *(_OWORD *)&v33[2] = v8;
    long long v34 = v36[1];
    WebCore::SecurityOriginData::toString((uint64_t *)v35, a3);
    uint64_t v9 = (WTF::StringImpl *)*a4;
    *a4 = 0;
    v35[1] = v9;
    uint64_t v10 = WTF::fastMalloc((WTF *)0x50);
    *(void *)uint64_t v10 = &unk_1EEA0CA00;
    *(void *)(v10 + 16) = *(void *)buf;
    *(_OWORD *)(v10 + 32) = *(_OWORD *)&v33[2];
    *(_OWORD *)(v10 + 48) = v34;
    long long v11 = *(_OWORD *)v35;
    *(_OWORD *)&v33[2] = 0u;
    *(_OWORD *)uint64_t v35 = 0u;
    *(_OWORD *)(v10 + 64) = v11;
    uint64_t v30 = (WTF *)v10;
    WebPushD::WebPushDaemon::runAfterStartingPushService(a1, (uint64_t *)&v30);
    uint64_t v13 = v30;
    uint64_t v30 = 0;
    if (v13) {
      (*(void (**)(WTF *))(*(void *)v13 + 8))(v13);
    }
    uint64_t v14 = v35[1];
    v35[1] = 0;
    if (v14) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v14 + 8))(v14);
    }
    uint64_t v15 = v35[0];
    v35[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v12);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v17 = *(WTF::StringImpl **)&v33[10];
    *(void *)&v33[10] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v12);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v18 = *(WTF::StringImpl **)&v33[2];
    *(void *)&v33[2] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v12);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  else
  {
    uint64_t v16 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      WebPushD::PushClientConnection::debugDescription((uint64_t *)&v29, this);
      WTF::String::ascii((uint64_t *)&v30, (WTF::String *)&v29);
      if (v30) {
        uint64_t v20 = (char *)v30 + 16;
      }
      else {
        uint64_t v20 = 0;
      }
      WebCore::SecurityOriginData::toString((uint64_t *)&v27, a3);
      WTF::String::ascii((uint64_t *)&v28, (WTF::String *)&v27);
      if (v28) {
        __int16 v21 = (char *)v28 + 16;
      }
      else {
        __int16 v21 = 0;
      }
      *(_DWORD *)buf = 136446979;
      *(void *)&uint8_t buf[4] = "incrementSilentPushCount";
      __int16 v32 = 2048;
      *(void *)__int16 v33 = this;
      *(_WORD *)&v33[8] = 2082;
      *(void *)&v33[10] = v20;
      LOWORD(v34) = 2085;
      *(void *)((char *)&v34 + 2) = v21;
      _os_log_error_impl(&dword_1985F2000, v16, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: No web clip associated with origin %{sensitive}s", buf, 0x2Au);
      __int16 v23 = v28;
      char v28 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1) {
          WTF::fastFree(v23, v22);
        }
        else {
          --*(_DWORD *)v23;
        }
      }
      id v24 = v27;
      size_t v27 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v22);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      uint64_t v25 = v30;
      uint64_t v30 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1) {
          WTF::fastFree(v25, v22);
        }
        else {
          --*(_DWORD *)v25;
        }
      }
      long long v26 = v29;
      uint64_t v29 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v22);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
    }
    WTF::CompletionHandler<void ()>::operator()(a4);
  }
  return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, v12);
}

void sub_199400EB0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,char a21)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a21, a2);
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::removeAllPushSubscriptions(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = (_DWORD *)a2[5];
  if (v4) {
    *v4 += 2;
  }
  uint64_t v5 = (_DWORD *)a2[7];
  if (v5) {
    *v5 += 2;
  }
  uint64_t v7 = a2[8];
  uint64_t v6 = a2[9];
  uint64_t v8 = *a3;
  *a3 = 0;
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x50);
  *uint64_t v9 = &unk_1EEA0CA28;
  void v9[2] = a1;
  v9[4] = v4;
  v9[5] = v5;
  v9[6] = v7;
  v9[7] = v6;
  v9[8] = v8;
  long long v11 = v9;
  WebPushD::WebPushDaemon::runAfterStartingPushService(a1, (uint64_t *)&v11);
  uint64_t result = (uint64_t)v11;
  long long v11 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_199401104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::WebPushDaemon::removePushSubscriptionsForOrigin(uint64_t a1, WebPushD::PushClientConnection *this, WebCore::SecurityOriginData *a3, uint64_t *a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  WebPushD::PushClientConnection::subscriptionSetIdentifierForOrigin(this, a3, (uint64_t)v36);
  if (v37)
  {
    *(void *)buf = a1;
    long long v8 = v36[0];
    v36[0] = 0uLL;
    *(_OWORD *)&v33[2] = v8;
    long long v34 = v36[1];
    WebCore::SecurityOriginData::toString((uint64_t *)v35, a3);
    uint64_t v9 = (WTF::StringImpl *)*a4;
    *a4 = 0;
    v35[1] = v9;
    uint64_t v10 = WTF::fastMalloc((WTF *)0x50);
    *(void *)uint64_t v10 = &unk_1EEA0CA50;
    *(void *)(v10 + 16) = *(void *)buf;
    *(_OWORD *)(v10 + 32) = *(_OWORD *)&v33[2];
    *(_OWORD *)(v10 + 48) = v34;
    long long v11 = *(_OWORD *)v35;
    *(_OWORD *)&v33[2] = 0u;
    *(_OWORD *)uint64_t v35 = 0u;
    *(_OWORD *)(v10 + 64) = v11;
    uint64_t v30 = (WTF *)v10;
    WebPushD::WebPushDaemon::runAfterStartingPushService(a1, (uint64_t *)&v30);
    uint64_t v13 = v30;
    uint64_t v30 = 0;
    if (v13) {
      (*(void (**)(WTF *))(*(void *)v13 + 8))(v13);
    }
    uint64_t v14 = v35[1];
    v35[1] = 0;
    if (v14) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v14 + 8))(v14);
    }
    uint64_t v15 = v35[0];
    v35[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v12);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v17 = *(WTF::StringImpl **)&v33[10];
    *(void *)&v33[10] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v12);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v18 = *(WTF::StringImpl **)&v33[2];
    *(void *)&v33[2] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v12);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  else
  {
    uint64_t v16 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      WebPushD::PushClientConnection::debugDescription((uint64_t *)&v29, this);
      WTF::String::ascii((uint64_t *)&v30, (WTF::String *)&v29);
      if (v30) {
        uint64_t v20 = (char *)v30 + 16;
      }
      else {
        uint64_t v20 = 0;
      }
      WebCore::SecurityOriginData::toString((uint64_t *)&v27, a3);
      WTF::String::ascii((uint64_t *)&v28, (WTF::String *)&v27);
      if (v28) {
        __int16 v21 = (char *)v28 + 16;
      }
      else {
        __int16 v21 = 0;
      }
      *(_DWORD *)buf = 136446979;
      *(void *)&uint8_t buf[4] = "removePushSubscriptionsForOrigin";
      __int16 v32 = 2048;
      *(void *)__int16 v33 = this;
      *(_WORD *)&v33[8] = 2082;
      *(void *)&v33[10] = v20;
      LOWORD(v34) = 2085;
      *(void *)((char *)&v34 + 2) = v21;
      _os_log_error_impl(&dword_1985F2000, v16, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: No web clip associated with origin %{sensitive}s", buf, 0x2Au);
      __int16 v23 = v28;
      char v28 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1) {
          WTF::fastFree(v23, v22);
        }
        else {
          --*(_DWORD *)v23;
        }
      }
      id v24 = v27;
      size_t v27 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v22);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      uint64_t v25 = v30;
      uint64_t v30 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1) {
          WTF::fastFree(v25, v22);
        }
        else {
          --*(_DWORD *)v25;
        }
      }
      long long v26 = v29;
      uint64_t v29 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v22);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
    }
    WTF::CompletionHandler<void ()>::operator()(a4);
  }
  return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, v12);
}

void sub_199401510(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,char a21)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a21, a2);
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::setPublicTokenForTesting(uint64_t a1, WebPushD::PushClientConnection *a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a2 + 48))
  {
    uint64_t v6 = *a3;
    if (*a3) {
      *(_DWORD *)v6 += 2;
    }
    uint64_t v7 = *a4;
    *a4 = 0;
    long long v8 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v8 = &unk_1EEA0CA78;
    v8[1] = a1;
    if (v6) {
      *(_DWORD *)v6 += 2;
    }
    v8[2] = v6;
    v8[3] = v7;
    *(void *)buf = v8;
    WebPushD::WebPushDaemon::runAfterStartingPushService(a1, (uint64_t *)buf);
    uint64_t result = *(void *)buf;
    *(void *)buf = 0;
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      if (!v6) {
        return result;
      }
    }
    else if (!v6)
    {
      return result;
    }
    if (*(_DWORD *)v6 == 2) {
      return WTF::StringImpl::destroy(v6, v9);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  else
  {
    uint64_t v12 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      WebPushD::PushClientConnection::debugDescription((uint64_t *)&v17, a2);
      WTF::String::ascii((uint64_t *)&v18, (WTF::String *)&v17);
      if (v18) {
        uint64_t v13 = (char *)v18 + 16;
      }
      else {
        uint64_t v13 = 0;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "setPublicTokenForTesting";
      __int16 v20 = 2048;
      __int16 v21 = a2;
      __int16 v22 = 2082;
      __int16 v23 = v13;
      _os_log_error_impl(&dword_1985F2000, v12, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: Need entitlement to set public token", buf, 0x20u);
      uint64_t v15 = v18;
      uint64_t v18 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1) {
          WTF::fastFree(v15, v14);
        }
        else {
          --*(_DWORD *)v15;
        }
      }
      uint64_t v16 = v17;
      uint64_t v17 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v14);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    return WTF::CompletionHandler<void ()(void)>::operator()(a4);
  }
  return result;
}

void sub_199401894(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::WebPushDaemon::showNotification(uint64_t a1, WebPushD::PushClientConnection *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(a3 + 88));
  WebCore::SecurityOriginData::fromURL(v77, (WebCore::SecurityOriginData *)buf, v9);
  long long v11 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  WebPushD::PushClientConnection::subscriptionSetIdentifierForOrigin(a2, (const WebCore::SecurityOriginData *)v77, (uint64_t)v75);
  if (v76)
  {
    long long v12 = v75[0];
    v75[0] = 0uLL;
    *(_OWORD *)long long v65 = v12;
    long long v66 = v75[1];
    id v13 = objc_alloc_init(MEMORY[0x1E4F445B0]);
    if (MEMORY[0x19972E990](*((void *)a2 + 5), "com.apple.SafariViewService", 27))
    {
      uint64_t v14 = @"com.apple.webapp";
    }
    else if (*((void *)a2 + 5))
    {
      uint64_t v14 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else
    {
      uint64_t v14 = &stru_1EEA10550;
    }
    [v13 setDefaultActionBundleIdentifier:v14];
    if (v65[1]) {
      uint64_t v17 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v17 = &stru_1EEA10550;
    }
    [v13 setTargetContentIdentifier:v17];
    if (*(void *)(a3 + 40)) {
      uint64_t v18 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v18 = &stru_1EEA10550;
    }
    [v13 setTitle:v18];
    if (*(void *)(a3 + 48)) {
      uint64_t v19 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v19 = &stru_1EEA10550;
    }
    [v13 setBody:v19];
    [v13 setCategoryIdentifier:@"webpushdCategory"];
    if (!*(unsigned char *)(a3 + 241) || !*(unsigned char *)(a3 + 240)) {
      objc_msgSend(v13, "setSound:", objc_msgSend(MEMORY[0x1E4F44640], "defaultSound"));
    }
    __int16 v20 = v65[1];
    if (v65[1]) {
      *(_DWORD *)v65[1] += 2;
    }
    WebPushD::platformNotificationCenterBundleIdentifier(&v69, (uint64_t)v20);
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v21);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    __int16 v22 = v69;
    long long v64 = v69;
    objc_msgSend(v13, "setIcon:", objc_msgSend(MEMORY[0x1E4F44610], "iconForApplicationIdentifier:", v69));
    __int16 v23 = (void *)MEMORY[0x1E4F43048];
    if (v65[1]) {
      uint64_t v24 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v24 = &stru_1EEA10550;
    }
    uint64_t v25 = (void *)[v23 webClipWithIdentifier:v24];
    long long v26 = v25;
    if (v25) {
      CFRetain(v25);
    }
    uint64_t v27 = [v26 title];
    char v28 = NSString;
    WebCore::localizedString((uint64_t *)buf, (WebCore *)@"from %@", v29);
    if (*(void *)buf) {
      uint64_t v30 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v30 = &stru_1EEA10550;
    }
    [v13 setSubtitle:objc_msgSend(v28, "stringWithFormat:", v30, v27)];
    __int16 v32 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v31);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
    [v13 setUserInfo:WebCore::NotificationData::dictionaryRepresentation((WebCore::NotificationData *)a3)];
    __int16 v33 = (void *)MEMORY[0x1E4F44628];
    WTF::UUID::toString((uint64_t *)buf, (WTF::UUID *)(a3 + 144));
    if (*(void *)buf) {
      long long v34 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      long long v34 = &stru_1EEA10550;
    }
    uint64_t v36 = [v33 requestWithIdentifier:v34 content:v13 trigger:0];
    char v37 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v35);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
    uint64_t v38 = (void *)[objc_alloc(*(Class *)(a1 + 248)) initWithBundleIdentifier:v22];
    if (!v38)
    {
      int v39 = qword_1EB3583C0;
      if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1985F2000, v39, OS_LOG_TYPE_ERROR, "Failed to instantiate UNUserNotificationCenter center", buf, 2u);
      }
    }
    CFTypeRef v63 = v38;
    uint64_t v40 = [MEMORY[0x1E4F44600] categoryWithIdentifier:@"webpushdCategory" actions:MEMORY[0x1E4F1CBF0] intentIdentifiers:MEMORY[0x1E4F1CBF0] options:1];
    objc_msgSend(v38, "setNotificationCategories:", objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObject:", v40));
    *(void *)buf = a1;
    WTF::CrossThreadCopierBase<false,false,WebCore::PushSubscriptionSetIdentifier>::copy<WebCore::PushSubscriptionSetIdentifier&>((__n128 *)&v72[2], (__n128 *)v65);
    WTF::String::isolatedCopy();
    uint64_t v41 = *a5;
    *a5 = 0;
    uint64_t v42 = *(void *)buf;
    uint64_t v43 = *(void *)&v72[2];
    uint64_t v44 = *(void *)&v72[10];
    long long v45 = v73;
    *(_OWORD *)&v72[2] = 0u;
    uint64_t v46 = v74;
    long long v74 = 0u;
    uint64_t v48 = malloc_type_malloc(0x60uLL, 0x10E0040387540A7uLL);
    *uint64_t v48 = MEMORY[0x1E4F14398];
    v48[1] = 50331650;
    v48[2] = WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebPushD::WebPushDaemon::showNotification(WebPushD::PushClientConnection &,WebCore::NotificationData const&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebPushD::WebPushDaemon::showNotification(WebPushD::PushClientConnection &,WebCore::NotificationData const&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    void v48[3] = &WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebPushD::WebPushDaemon::showNotification(WebPushD::PushClientConnection &,WebCore::NotificationData const&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebPushD::WebPushDaemon::showNotification(WebPushD::PushClientConnection &,WebCore::NotificationData const&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
    v48[4] = v42;
    v48[6] = v43;
    v48[7] = v44;
    *((_OWORD *)v48 + 4) = v45;
    v48[10] = v46;
    v48[11] = v41;
    uint64_t v49 = *((void *)&v74 + 1);
    *((void *)&v74 + 1) = 0;
    if (v49) {
      (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
    }
    uint64_t v50 = (WTF::StringImpl *)v74;
    *(void *)&long long v74 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2) {
        WTF::StringImpl::destroy(v50, v47);
      }
      else {
        *(_DWORD *)v50 -= 2;
      }
    }
    uint64_t v51 = *(WTF::StringImpl **)&v72[10];
    *(void *)&v72[10] = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2) {
        WTF::StringImpl::destroy(v51, v47);
      }
      else {
        *(_DWORD *)v51 -= 2;
      }
    }
    uint64_t v52 = *(WTF::StringImpl **)&v72[2];
    *(void *)&v72[2] = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2) {
        WTF::StringImpl::destroy(v52, v47);
      }
      else {
        *(_DWORD *)v52 -= 2;
      }
    }
    [v63 addNotificationRequest:v36 withCompletionHandler:v48];
    _Block_release(v48);
    if (v63) {
      CFRelease(v63);
    }
    if (v26) {
      CFRelease(v26);
    }
    if (v64) {
      CFRelease(v64);
    }
    if (v13) {
      CFRelease(v13);
    }
    uint64_t v53 = v65[1];
    v65[1] = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2) {
        WTF::StringImpl::destroy(v53, v16);
      }
      else {
        *(_DWORD *)v53 -= 2;
      }
    }
    uint64_t v54 = v65[0];
    v65[0] = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2) {
        WTF::StringImpl::destroy(v54, v16);
      }
      else {
        *(_DWORD *)v54 -= 2;
      }
    }
  }
  else
  {
    uint64_t v15 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      WebPushD::PushClientConnection::debugDescription((uint64_t *)&v69, a2);
      WTF::String::ascii((uint64_t *)v65, (WTF::String *)&v69);
      if (v65[0]) {
        long long v56 = (char *)v65[0] + 16;
      }
      else {
        long long v56 = 0;
      }
      WebCore::SecurityOriginData::toString((uint64_t *)&v67, (WebCore::SecurityOriginData *)v77);
      WTF::String::ascii((uint64_t *)&v68, (WTF::String *)&v67);
      if (v68) {
        long long v57 = (char *)v68 + 16;
      }
      else {
        long long v57 = 0;
      }
      *(_DWORD *)buf = 136446979;
      *(void *)&uint8_t buf[4] = "showNotification";
      __int16 v71 = 2048;
      *(void *)unint64_t v72 = a2;
      *(_WORD *)&v72[8] = 2082;
      *(void *)&v72[10] = v56;
      LOWORD(v73) = 2085;
      *(void *)((char *)&v73 + 2) = v57;
      _os_log_error_impl(&dword_1985F2000, v15, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: No web clip associated with origin %{sensitive}s", buf, 0x2Au);
      uint64_t v59 = v68;
      long long v68 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 1) {
          WTF::fastFree(v59, v58);
        }
        else {
          --*(_DWORD *)v59;
        }
      }
      long long v60 = v67;
      long long v67 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2) {
          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v58);
        }
        else {
          *(_DWORD *)v60 -= 2;
        }
      }
      long long v61 = v65[0];
      v65[0] = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 1) {
          WTF::fastFree(v61, v58);
        }
        else {
          --*(_DWORD *)v61;
        }
      }
      long long v62 = v69;
      long long v69 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2) {
          WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v58);
        }
        else {
          *(_DWORD *)v62 -= 2;
        }
      }
    }
    WTF::CompletionHandler<void ()(void)>::operator()(a5);
  }
  uint64_t result = std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v75, v16);
  if (v78 != -1) {
    return ((uint64_t (*)(unsigned char *, uint64_t *))off_1EEA0C558[v78])(buf, v77);
  }
  return result;
}

void sub_1994020EC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, CFTypeRef a12, CFTypeRef a13, CFTypeRef a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,WTF::StringImpl *a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,WTF::StringImpl *a26,uint64_t a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,char a31)
{
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 1) {
      WTF::fastFree(a15, a2);
    }
    else {
      --*(_DWORD *)a15;
    }
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, a2);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a31, a2);
  uint64_t v33 = *(unsigned int *)(v31 - 104);
  if (v33 != -1) {
    ((void (*)(WTF::StringImpl **, uint64_t))off_1EEA0C558[v33])(&a23, v31 - 128);
  }
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::getNotifications(uint64_t a1, const WTF::URL *a2, WebCore::SecurityOriginData *this, uint64_t a4, uint64_t *a5)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  WebCore::SecurityOriginData::fromURL(v55, this, a2);
  WebPushD::PushClientConnection::subscriptionSetIdentifierForOrigin(a2, (const WebCore::SecurityOriginData *)v55, (uint64_t)&v51);
  if (v54)
  {
    unint64_t v8 = v51;
    uint64_t v9 = v52;
    unint64_t v51 = 0;
    uint64_t v52 = 0;
    v42[0].n128_u64[0] = v8;
    v42[0].n128_u64[1] = (unint64_t)v9;
    v42[1] = v53;
    if (v9) {
      *(_DWORD *)v9 += 2;
    }
    WebPushD::platformNotificationCenterBundleIdentifier(&v44, (uint64_t)v9);
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v10);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    id v14 = objc_alloc(*(Class *)(a1 + 248));
    uint64_t v15 = v44;
    uint64_t v16 = (void *)[v14 initWithBundleIdentifier:v44];
    WTF::CrossThreadCopierBase<false,false,WebCore::PushSubscriptionSetIdentifier>::copy<WebCore::PushSubscriptionSetIdentifier&>((__n128 *)v45, v42);
    WTF::URL::isolatedCopy();
    WTF::String::isolatedCopy();
    uint64_t v17 = *a5;
    *a5 = 0;
    long long v18 = *(_OWORD *)v45;
    *(_OWORD *)long long v45 = 0u;
    *(_OWORD *)buf = v18;
    *(_OWORD *)&buf[16] = v46;
    uint64_t v19 = v47;
    uint64_t v47 = 0;
    *(_OWORD *)&v58[1] = v48;
    long long v59 = v49;
    LODWORD(v48) = v48 & 0xFFFFFFFE;
    v58[0] = (uint64_t)v19;
    *(WTF::StringImpl **)&long long v60 = v50[0];
    *((void *)&v60 + 1) = v17;
    *(_OWORD *)uint64_t v50 = 0u;
    __int16 v20 = (char *)malloc_type_malloc(0x80uLL, 0x10E0040150D5E72uLL);
    *(void *)__int16 v20 = MEMORY[0x1E4F14398];
    *((void *)v20 + 1) = 50331650;
    *((void *)v20 + 2) = WTF::BlockPtr<void ()(NSArray<UNNotification *> *)>::fromCallable<WebPushD::WebPushDaemon::getNotifications(WebPushD::PushClientConnection &,WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)::$_0>(WebPushD::WebPushDaemon::getNotifications(WebPushD::PushClientConnection &,WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)::$_0)::{lambda(void *,NSArray<UNNotification *> *)#1}::__invoke;
    *((void *)v20 + 3) = &WTF::BlockPtr<void ()(NSArray<UNNotification *> *)>::fromCallable<WebPushD::WebPushDaemon::getNotifications(WebPushD::PushClientConnection &,WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)::$_0>(WebPushD::WebPushDaemon::getNotifications(WebPushD::PushClientConnection &,WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)::$_0)::descriptor;
    long long v21 = *(_OWORD *)buf;
    *(void *)buf = 0;
    *(void *)&buf[8] = 0;
    long long v22 = *(_OWORD *)&buf[16];
    *((_OWORD *)v20 + 2) = v21;
    *((_OWORD *)v20 + 3) = v22;
    WTF::URL::URL((uint64_t)(v20 + 64), v58);
    *(_OWORD *)(v20 + 104) = v60;
    long long v60 = 0uLL;
    uint64_t v24 = (WTF::StringImpl *)v58[0];
    v58[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v23);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    uint64_t v25 = *(WTF::StringImpl **)&buf[8];
    *(void *)&buf[8] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v23);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    long long v26 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v23);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    uint64_t v27 = v50[1];
    v50[1] = 0;
    if (v27) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v27 + 8))(v27);
    }
    char v28 = v50[0];
    v50[0] = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, v23);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
    CFStringRef v29 = v47;
    uint64_t v47 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v23);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    uint64_t v30 = v45[1];
    v45[1] = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v23);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
    uint64_t v31 = v45[0];
    v45[0] = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v23);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
    objc_msgSend(v16, "getDeliveredNotificationsWithCompletionHandler:", v20, v42[0].n128_u64[0]);
    _Block_release(v20);
    if (v16) {
      CFRelease(v16);
    }
    if (v15) {
      CFRelease(v15);
    }
    __int16 v32 = (WTF::StringImpl *)v42[0].n128_u64[1];
    v42[0].n128_u64[1] = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v13);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
    uint64_t v33 = (WTF::StringImpl *)v42[0].n128_u64[0];
    v42[0].n128_u64[0] = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, v13);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
  else
  {
    long long v11 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      WebPushD::PushClientConnection::debugDescription((uint64_t *)v42, a2);
      WTF::String::ascii((uint64_t *)v45, (WTF::String *)v42);
      if (v45[0]) {
        uint64_t v35 = (char *)v45[0] + 16;
      }
      else {
        uint64_t v35 = 0;
      }
      WebCore::SecurityOriginData::toString((uint64_t *)&v43, (WebCore::SecurityOriginData *)v55);
      WTF::String::ascii((uint64_t *)&v44, (WTF::String *)&v43);
      if (v44) {
        uint64_t v36 = (char *)v44 + 16;
      }
      else {
        uint64_t v36 = 0;
      }
      *(_DWORD *)buf = 136446979;
      *(void *)&uint8_t buf[4] = "getNotifications";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a2;
      *(_WORD *)&unsigned char buf[22] = 2082;
      *(void *)&buf[24] = v35;
      LOWORD(v58[0]) = 2085;
      *(uint64_t *)((char *)v58 + 2) = (uint64_t)v36;
      _os_log_error_impl(&dword_1985F2000, v11, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: No web clip associated with origin %{sensitive}s", buf, 0x2Au);
      uint64_t v38 = v44;
      uint64_t v44 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 1) {
          WTF::fastFree(v38, v37);
        }
        else {
          --*(_DWORD *)v38;
        }
      }
      int v39 = v43;
      uint64_t v43 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2) {
          WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v37);
        }
        else {
          *(_DWORD *)v39 -= 2;
        }
      }
      uint64_t v40 = v45[0];
      v45[0] = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 1) {
          WTF::fastFree(v40, v37);
        }
        else {
          --*(_DWORD *)v40;
        }
      }
      uint64_t v41 = (WTF::StringImpl *)v42[0].n128_u64[0];
      v42[0].n128_u64[0] = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2) {
          WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v37);
        }
        else {
          *(_DWORD *)v41 -= 2;
        }
      }
    }
    v45[0] = 0;
    memset(buf, 0, 20);
    v45[1] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)>::operator()(a5);
    if (*(_DWORD *)&buf[16] != -1) {
      ((void (*)(__n128 *, unsigned char *))off_1EEA0C638[*(unsigned int *)&buf[16]])(v42, buf);
    }
    *(_DWORD *)&buf[16] = -1;
    WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v12);
  }
  uint64_t result = std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v13);
  if (v56 != -1) {
    return ((uint64_t (*)(unsigned char *, uint64_t *))off_1EEA0C558[v56])(buf, v55);
  }
  return result;
}

void sub_1994029D8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,int a36)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  char v37 = a15;
  a15 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 1) {
      WTF::fastFree(v37, a2);
    }
    else {
      --*(_DWORD *)v37;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a27, a2);
  if (a36 != -1) {
    ((void (*)(WTF::StringImpl **, char *))off_1EEA0C558[a36])(&a15, &a33);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_199402DD4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::cancelNotification(uint64_t a1, WebPushD::PushClientConnection *this, WebCore::SecurityOriginData *a3, WTF::UUID *a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  WebPushD::PushClientConnection::subscriptionSetIdentifierForOrigin(this, a3, (uint64_t)&v39);
  if (v41)
  {
    unint64_t v8 = v39;
    uint64_t v9 = v40;
    int v39 = 0;
    uint64_t v40 = 0;
    if (v9) {
      *(_DWORD *)v9 += 2;
    }
    WebPushD::platformNotificationCenterBundleIdentifier(buf, (uint64_t)v9);
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v10);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    id v16 = objc_alloc(*(Class *)(a1 + 248));
    uint64_t v17 = *(const void **)buf;
    long long v18 = (void *)[v16 initWithBundleIdentifier:*(void *)buf];
    WTF::UUID::toString((uint64_t *)&v30, a4);
    if (v30) {
      uint64_t v19 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v19 = &stru_1EEA10550;
    }
    uint64_t v31 = v19;
    uint64_t v21 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v31 count:1];
    long long v22 = v30;
    uint64_t v30 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v20);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    [v18 removePendingNotificationRequestsWithIdentifiers:v21];
    [v18 removeDeliveredNotificationsWithIdentifiers:v21];
    if (v18) {
      CFRelease(v18);
    }
    if (v17) {
      CFRelease(v17);
    }
    if (!v9)
    {
LABEL_31:
      if (!v8) {
        return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v39, v12);
      }
      goto LABEL_34;
    }
    if (*(_DWORD *)v9 != 2)
    {
      *(_DWORD *)v9 -= 2;
      goto LABEL_31;
    }
    WTF::StringImpl::destroy(v9, v12);
    if (v8)
    {
LABEL_34:
      if (*(_DWORD *)v8 != 2)
      {
        *(_DWORD *)v8 -= 2;
        return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v39, v12);
      }
      __int16 v23 = v8;
LABEL_37:
      WTF::StringImpl::destroy(v23, v12);
    }
  }
  else
  {
    long long v11 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      WebPushD::PushClientConnection::debugDescription((uint64_t *)&v29, this);
      WTF::String::ascii((uint64_t *)&v30, (WTF::String *)&v29);
      if (v30) {
        id v13 = (char *)v30 + 16;
      }
      else {
        id v13 = 0;
      }
      WebCore::SecurityOriginData::toString((uint64_t *)&v27, a3);
      WTF::String::ascii((uint64_t *)&v28, (WTF::String *)&v27);
      if (v28) {
        id v14 = (char *)v28 + 16;
      }
      else {
        id v14 = 0;
      }
      *(_DWORD *)buf = 136446979;
      *(void *)&uint8_t buf[4] = "cancelNotification";
      __int16 v33 = 2048;
      long long v34 = this;
      __int16 v35 = 2082;
      uint64_t v36 = v13;
      __int16 v37 = 2085;
      uint64_t v38 = v14;
      _os_log_error_impl(&dword_1985F2000, v11, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: No web clip associated with origin %{sensitive}s", buf, 0x2Au);
      uint64_t v15 = v28;
      char v28 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1) {
          WTF::fastFree(v15, v12);
        }
        else {
          --*(_DWORD *)v15;
        }
      }
      uint64_t v25 = v27;
      uint64_t v27 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v12);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
      long long v26 = v30;
      uint64_t v30 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          WTF::fastFree(v26, v12);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
      __int16 v23 = v29;
      CFStringRef v29 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 != 2)
        {
          *(_DWORD *)v23 -= 2;
          return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v39, v12);
        }
        goto LABEL_37;
      }
    }
  }
  return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v39, v12);
}

void sub_199403120(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 1) {
      WTF::fastFree(a13, a2);
    }
    else {
      --*(_DWORD *)a13;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a21, a2);
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::getPushPermissionState(uint64_t a1, WebPushD::PushClientConnection *this, WebCore::SecurityOriginData *a3, uint64_t *a4)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  WebPushD::PushClientConnection::subscriptionSetIdentifierForOrigin(this, a3, (uint64_t)&v69);
  if (v71)
  {
    unint64_t v8 = v69;
    uint64_t v9 = v70;
    long long v69 = 0;
    uint64_t v70 = 0;
    if (v9 && *((_DWORD *)v9 + 1))
    {
      uint64_t v10 = (void *)[MEMORY[0x1E4F43048] webClipWithIdentifier:WTF::StringImpl::operator NSString *()];
      long long v11 = v10;
      if (v10) {
        CFRetain(v10);
      }
      MEMORY[0x19972E8A0](buf, [v11 pageURL]);
      WebCore::SecurityOriginData::fromURL((uint64_t *)v67, (WebCore::SecurityOriginData *)buf, v12);
      id v14 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      WebCore::SecurityOriginData::isNull(a3);
      if (*((_DWORD *)a3 + 6) == 1) {
        char v19 = 1;
      }
      else {
        char v19 = v18;
      }
      if ((v19 & 1) != 0 || (WebCore::operator==() & 1) == 0)
      {
        uint64_t v21 = qword_1EB3583C0;
        if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
        {
          WebPushD::PushClientConnection::debugDescription((uint64_t *)&v58, this);
          WTF::String::ascii((uint64_t *)&v59, (WTF::String *)&v58);
          if (v59) {
            long long v22 = (char *)v59 + 16;
          }
          else {
            long long v22 = 0;
          }
          WebCore::SecurityOriginData::toString((uint64_t *)&v56, (WebCore::SecurityOriginData *)v67);
          WTF::String::utf8();
          if (v57) {
            __int16 v23 = (char *)v57 + 16;
          }
          else {
            __int16 v23 = 0;
          }
          WebCore::SecurityOriginData::toString((uint64_t *)&v54, a3);
          WTF::String::utf8();
          if (v55) {
            uint64_t v24 = (char *)v55 + 16;
          }
          else {
            uint64_t v24 = 0;
          }
          *(_DWORD *)buf = 136447235;
          *(void *)&uint8_t buf[4] = "getPushPermissionState";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = this;
          __int16 v61 = 2082;
          long long v62 = v22;
          __int16 v63 = 2085;
          long long v64 = v23;
          __int16 v65 = 2085;
          long long v66 = v24;
          _os_log_impl(&dword_1985F2000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s [connection=%p, app=%{public}s]: Denied push permission because web clip origin %{sensitive}s does not match expected origin %{sensitive}s", buf, 0x34u);
          long long v26 = v55;
          char v55 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1) {
              WTF::fastFree(v26, v25);
            }
            else {
              --*(_DWORD *)v26;
            }
          }
          uint64_t v27 = v54;
          char v54 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
          char v28 = v57;
          long long v57 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 1) {
              WTF::fastFree(v28, v25);
            }
            else {
              --*(_DWORD *)v28;
            }
          }
          CFStringRef v29 = v56;
          int v56 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v25);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          uint64_t v30 = v59;
          long long v59 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 1) {
              WTF::fastFree(v30, v25);
            }
            else {
              --*(_DWORD *)v30;
            }
          }
          uint64_t v31 = v58;
          int v58 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2) {
              WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v25);
            }
            else {
              *(_DWORD *)v31 -= 2;
            }
          }
        }
        WTF::CompletionHandler<void ()(WebCore::PushPermissionState)>::operator()(a4);
      }
      else
      {
        *(_DWORD *)v9 += 2;
        WebPushD::platformNotificationCenterBundleIdentifier(&v59, (uint64_t)v9);
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v20);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
        id v36 = objc_alloc(*(Class *)(a1 + 248));
        __int16 v37 = v59;
        uint64_t v38 = (void *)[v36 initWithBundleIdentifier:v59];
        WebCore::SecurityOriginData::toString((uint64_t *)&v58, a3);
        WTF::String::isolatedCopy();
        uint64_t v39 = *a4;
        *a4 = 0;
        uint64_t v40 = *(void *)buf;
        *(void *)buf = 0;
        *(void *)&buf[8] = 0;
        uint64_t v42 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
        *uint64_t v42 = MEMORY[0x1E4F14398];
        v42[1] = 50331650;
        __n128 v42[2] = WTF::BlockPtr<void ()(UNNotificationSettings *)>::fromCallable<WebPushD::WebPushDaemon::getPushPermissionState(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)> &&)::$_0>(WebPushD::WebPushDaemon::getPushPermissionState(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)> &&)::$_0)::{lambda(void *,UNNotificationSettings *)#1}::__invoke;
        v42[3] = &WTF::BlockPtr<void ()(UNNotificationSettings *)>::fromCallable<WebPushD::WebPushDaemon::getPushPermissionState(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)> &&)::$_0>(WebPushD::WebPushDaemon::getPushPermissionState(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)> &&)::$_0)::descriptor;
        v42[4] = v40;
        v42[5] = v39;
        uint64_t v43 = *(void *)&buf[8];
        *(void *)&buf[8] = 0;
        if (v43) {
          (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
        }
        uint64_t v44 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2) {
            WTF::StringImpl::destroy(v44, v41);
          }
          else {
            *(_DWORD *)v44 -= 2;
          }
        }
        long long v45 = v58;
        int v58 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2) {
            WTF::StringImpl::destroy(v45, v41);
          }
          else {
            *(_DWORD *)v45 -= 2;
          }
        }
        [v38 getNotificationSettingsWithCompletionHandler:v42];
        _Block_release(v42);
        if (v38) {
          CFRelease(v38);
        }
        if (v37) {
          CFRelease(v37);
        }
      }
      if (v68 != -1) {
        ((void (*)(unsigned char *, WTF **))off_1EEA0C558[v68])(buf, v67);
      }
      if (v11) {
        CFRelease(v11);
      }
    }
    else
    {
      uint64_t v17 = qword_1EB3583C0;
      if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
      {
        WebPushD::PushClientConnection::debugDescription((uint64_t *)&v59, this);
        WTF::String::ascii((uint64_t *)v67, (WTF::String *)&v59);
        if (v67[0]) {
          uint64_t v47 = (char *)v67[0] + 16;
        }
        else {
          uint64_t v47 = 0;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "getPushPermissionState";
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = this;
        __int16 v61 = 2082;
        long long v62 = v47;
        _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: Denied push permission since no pushPartition specified", buf, 0x20u);
        long long v49 = v67[0];
        v67[0] = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 1) {
            WTF::fastFree(v49, v48);
          }
          else {
            --*(_DWORD *)v49;
          }
        }
        unint64_t v51 = v59;
        long long v59 = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2) {
            WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v48);
          }
          else {
            *(_DWORD *)v51 -= 2;
          }
        }
      }
      WTF::CompletionHandler<void ()(WebCore::PushPermissionState)>::operator()(a4);
      if (!v9) {
        goto LABEL_87;
      }
    }
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v16);
      if (!v8) {
        return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v69, v16);
      }
      goto LABEL_90;
    }
    *(_DWORD *)v9 -= 2;
LABEL_87:
    if (!v8) {
      return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v69, v16);
    }
LABEL_90:
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v16);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
    return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v69, v16);
  }
  uint64_t v15 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
  {
    WebPushD::PushClientConnection::debugDescription((uint64_t *)&v59, this);
    WTF::String::ascii((uint64_t *)v67, (WTF::String *)&v59);
    if (v67[0]) {
      __int16 v32 = (char *)v67[0] + 16;
    }
    else {
      __int16 v32 = 0;
    }
    WebCore::SecurityOriginData::toString((uint64_t *)&v57, a3);
    WTF::String::ascii((uint64_t *)&v58, (WTF::String *)&v57);
    if (v58) {
      __int16 v33 = (char *)v58 + 16;
    }
    else {
      __int16 v33 = 0;
    }
    *(_DWORD *)buf = 136446979;
    *(void *)&uint8_t buf[4] = "getPushPermissionState";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = this;
    __int16 v61 = 2082;
    long long v62 = v32;
    __int16 v63 = 2085;
    long long v64 = v33;
    _os_log_error_impl(&dword_1985F2000, v15, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: No web clip associated with origin %{sensitive}s", buf, 0x2Au);
    __int16 v35 = v58;
    int v58 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1) {
        WTF::fastFree(v35, v34);
      }
      else {
        --*(_DWORD *)v35;
      }
    }
    uint64_t v50 = v57;
    long long v57 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2) {
        WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v34);
      }
      else {
        *(_DWORD *)v50 -= 2;
      }
    }
    uint64_t v52 = v67[0];
    v67[0] = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 1) {
        WTF::fastFree(v52, v34);
      }
      else {
        --*(_DWORD *)v52;
      }
    }
    __n128 v53 = v59;
    long long v59 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2) {
        WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v34);
      }
      else {
        *(_DWORD *)v53 -= 2;
      }
    }
  }
  WTF::CompletionHandler<void ()(WebCore::PushPermissionState)>::operator()(a4);
  return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v69, v16);
}

void sub_1994039F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,uint64_t a24,uint64_t a25,int a26,int a27,char a28)
{
  _Block_release(v32);
  if (v33) {
    CFRelease(v33);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (a26 != -1) {
    ((void (*)(WTF::StringImpl **, WTF **))off_1EEA0C558[a26])(&a15, &a23);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (*(_DWORD *)v29 == 2) {
    WTF::StringImpl::destroy(v29, v35);
  }
  else {
    *(_DWORD *)v29 -= 2;
  }
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v35);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a28, v35);
  _Unwind_Resume(a1);
}

void sub_199403D88()
{
}

uint64_t WTF::CompletionHandler<void ()(WebCore::PushPermissionState)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_199403E10(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::requestPushPermission(uint64_t a1, WebPushD::PushClientConnection *this, WebCore::SecurityOriginData *a3, uint64_t *a4)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  WebPushD::PushClientConnection::subscriptionSetIdentifierForOrigin(this, a3, (uint64_t)&v69);
  if (v71)
  {
    unint64_t v8 = v69;
    uint64_t v9 = v70;
    long long v69 = 0;
    uint64_t v70 = 0;
    if (v9 && *((_DWORD *)v9 + 1))
    {
      uint64_t v10 = (void *)[MEMORY[0x1E4F43048] webClipWithIdentifier:WTF::StringImpl::operator NSString *()];
      long long v11 = v10;
      if (v10) {
        CFRetain(v10);
      }
      MEMORY[0x19972E8A0](buf, [v11 pageURL]);
      WebCore::SecurityOriginData::fromURL((uint64_t *)v67, (WebCore::SecurityOriginData *)buf, v12);
      id v14 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      WebCore::SecurityOriginData::isNull(a3);
      if (*((_DWORD *)a3 + 6) == 1) {
        char v19 = 1;
      }
      else {
        char v19 = v18;
      }
      if ((v19 & 1) != 0 || (WebCore::operator==() & 1) == 0)
      {
        uint64_t v21 = qword_1EB3583C0;
        if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
        {
          WebPushD::PushClientConnection::debugDescription((uint64_t *)&v58, this);
          WTF::String::ascii((uint64_t *)&v59, (WTF::String *)&v58);
          if (v59) {
            long long v22 = (char *)v59 + 16;
          }
          else {
            long long v22 = 0;
          }
          WebCore::SecurityOriginData::toString((uint64_t *)&v56, (WebCore::SecurityOriginData *)v67);
          WTF::String::utf8();
          if (v57) {
            __int16 v23 = (char *)v57 + 16;
          }
          else {
            __int16 v23 = 0;
          }
          WebCore::SecurityOriginData::toString((uint64_t *)&v54, a3);
          WTF::String::utf8();
          if (v55) {
            uint64_t v24 = (char *)v55 + 16;
          }
          else {
            uint64_t v24 = 0;
          }
          *(_DWORD *)buf = 136447235;
          *(void *)&uint8_t buf[4] = "requestPushPermission";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = this;
          __int16 v61 = 2082;
          long long v62 = v22;
          __int16 v63 = 2085;
          long long v64 = v23;
          __int16 v65 = 2085;
          long long v66 = v24;
          _os_log_impl(&dword_1985F2000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s [connection=%p, app=%{public}s]: Denied push permission because web clip origin %{sensitive}s does not match expected origin %{sensitive}s", buf, 0x34u);
          long long v26 = v55;
          char v55 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1) {
              WTF::fastFree(v26, v25);
            }
            else {
              --*(_DWORD *)v26;
            }
          }
          uint64_t v27 = v54;
          char v54 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
          char v28 = v57;
          long long v57 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 1) {
              WTF::fastFree(v28, v25);
            }
            else {
              --*(_DWORD *)v28;
            }
          }
          CFStringRef v29 = v56;
          int v56 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v25);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          uint64_t v30 = v59;
          long long v59 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 1) {
              WTF::fastFree(v30, v25);
            }
            else {
              --*(_DWORD *)v30;
            }
          }
          uint64_t v31 = v58;
          int v58 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2) {
              WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v25);
            }
            else {
              *(_DWORD *)v31 -= 2;
            }
          }
        }
        WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
      }
      else
      {
        *(_DWORD *)v9 += 2;
        WebPushD::platformNotificationCenterBundleIdentifier(&v59, (uint64_t)v9);
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v20);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
        id v36 = objc_alloc(*(Class *)(a1 + 248));
        __int16 v37 = v59;
        uint64_t v38 = (void *)[v36 initWithBundleIdentifier:v59];
        WebCore::SecurityOriginData::toString((uint64_t *)&v58, a3);
        WTF::String::isolatedCopy();
        uint64_t v39 = *a4;
        *a4 = 0;
        uint64_t v40 = *(void *)buf;
        *(void *)buf = 0;
        *(void *)&buf[8] = 0;
        uint64_t v42 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
        *uint64_t v42 = MEMORY[0x1E4F14398];
        v42[1] = 50331650;
        __n128 v42[2] = WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebPushD::WebPushDaemon::requestPushPermission(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebPushD::WebPushDaemon::requestPushPermission(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL,NSError *)#1}::__invoke;
        v42[3] = &WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebPushD::WebPushDaemon::requestPushPermission(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebPushD::WebPushDaemon::requestPushPermission(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
        v42[4] = v40;
        v42[5] = v39;
        uint64_t v43 = *(void *)&buf[8];
        *(void *)&buf[8] = 0;
        if (v43) {
          (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
        }
        uint64_t v44 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2) {
            WTF::StringImpl::destroy(v44, v41);
          }
          else {
            *(_DWORD *)v44 -= 2;
          }
        }
        long long v45 = v58;
        int v58 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2) {
            WTF::StringImpl::destroy(v45, v41);
          }
          else {
            *(_DWORD *)v45 -= 2;
          }
        }
        [v38 requestAuthorizationWithOptions:7 completionHandler:v42];
        _Block_release(v42);
        if (v38) {
          CFRelease(v38);
        }
        if (v37) {
          CFRelease(v37);
        }
      }
      if (v68 != -1) {
        ((void (*)(unsigned char *, WTF **))off_1EEA0C558[v68])(buf, v67);
      }
      if (v11) {
        CFRelease(v11);
      }
    }
    else
    {
      uint64_t v17 = qword_1EB3583C0;
      if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
      {
        WebPushD::PushClientConnection::debugDescription((uint64_t *)&v59, this);
        WTF::String::ascii((uint64_t *)v67, (WTF::String *)&v59);
        if (v67[0]) {
          uint64_t v47 = (char *)v67[0] + 16;
        }
        else {
          uint64_t v47 = 0;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "requestPushPermission";
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = this;
        __int16 v61 = 2082;
        long long v62 = v47;
        _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: Denied push permission since no pushPartition specified", buf, 0x20u);
        long long v49 = v67[0];
        v67[0] = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 1) {
            WTF::fastFree(v49, v48);
          }
          else {
            --*(_DWORD *)v49;
          }
        }
        unint64_t v51 = v59;
        long long v59 = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2) {
            WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v48);
          }
          else {
            *(_DWORD *)v51 -= 2;
          }
        }
      }
      WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
      if (!v9) {
        goto LABEL_87;
      }
    }
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v16);
      if (!v8) {
        return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v69, v16);
      }
      goto LABEL_90;
    }
    *(_DWORD *)v9 -= 2;
LABEL_87:
    if (!v8) {
      return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v69, v16);
    }
LABEL_90:
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v16);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
    return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v69, v16);
  }
  uint64_t v15 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
  {
    WebPushD::PushClientConnection::debugDescription((uint64_t *)&v59, this);
    WTF::String::ascii((uint64_t *)v67, (WTF::String *)&v59);
    if (v67[0]) {
      __int16 v32 = (char *)v67[0] + 16;
    }
    else {
      __int16 v32 = 0;
    }
    WebCore::SecurityOriginData::toString((uint64_t *)&v57, a3);
    WTF::String::ascii((uint64_t *)&v58, (WTF::String *)&v57);
    if (v58) {
      __int16 v33 = (char *)v58 + 16;
    }
    else {
      __int16 v33 = 0;
    }
    *(_DWORD *)buf = 136446979;
    *(void *)&uint8_t buf[4] = "requestPushPermission";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = this;
    __int16 v61 = 2082;
    long long v62 = v32;
    __int16 v63 = 2085;
    long long v64 = v33;
    _os_log_error_impl(&dword_1985F2000, v15, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: No web clip associated with origin %{sensitive}s", buf, 0x2Au);
    __int16 v35 = v58;
    int v58 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1) {
        WTF::fastFree(v35, v34);
      }
      else {
        --*(_DWORD *)v35;
      }
    }
    uint64_t v50 = v57;
    long long v57 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2) {
        WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v34);
      }
      else {
        *(_DWORD *)v50 -= 2;
      }
    }
    uint64_t v52 = v67[0];
    v67[0] = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 1) {
        WTF::fastFree(v52, v34);
      }
      else {
        --*(_DWORD *)v52;
      }
    }
    __n128 v53 = v59;
    long long v59 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2) {
        WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v34);
      }
      else {
        *(_DWORD *)v53 -= 2;
      }
    }
  }
  WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
  return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v69, v16);
}

void sub_1994045C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,uint64_t a24,uint64_t a25,int a26,int a27,char a28)
{
  _Block_release(v32);
  if (v33) {
    CFRelease(v33);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (a26 != -1) {
    ((void (*)(WTF::StringImpl **, WTF **))off_1EEA0C558[a26])(&a15, &a23);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (*(_DWORD *)v29 == 2) {
    WTF::StringImpl::destroy(v29, v35);
  }
  else {
    *(_DWORD *)v29 -= 2;
  }
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v35);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a28, v35);
  _Unwind_Resume(a1);
}

void sub_199404964()
{
}

uint64_t WebPushD::WebPushDaemon::setAppBadge(int a1, WebPushD::PushClientConnection *this, WebCore::SecurityOriginData *a3, uint64_t a4, char a5)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  WebPushD::PushClientConnection::subscriptionSetIdentifierForOrigin(this, a3, (uint64_t)&v47);
  if (!v49)
  {
    uint64_t v17 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      WebPushD::PushClientConnection::debugDescription((uint64_t *)&v39, this);
      WTF::String::ascii((uint64_t *)v36, (WTF::String *)&v39);
      if (v36[0]) {
        char v19 = (char *)v36[0] + 16;
      }
      else {
        char v19 = 0;
      }
      WebCore::SecurityOriginData::toString((uint64_t *)&v37, a3);
      WTF::String::ascii((uint64_t *)&v38, (WTF::String *)&v37);
      if (v38) {
        __int16 v20 = (char *)v38 + 16;
      }
      else {
        __int16 v20 = 0;
      }
      *(_DWORD *)buf = 136446979;
      *(void *)&uint8_t buf[4] = "setAppBadge";
      __int16 v41 = 2048;
      uint64_t v42 = this;
      __int16 v43 = 2082;
      uint64_t v44 = v19;
      __int16 v45 = 2085;
      long long v46 = v20;
      _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: No web clip associated with origin %{sensitive}s", buf, 0x2Au);
      uint64_t v21 = v38;
      uint64_t v38 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1) {
          WTF::fastFree(v21, v18);
        }
        else {
          --*(_DWORD *)v21;
        }
      }
      long long v34 = v37;
      __int16 v37 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v18);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
      __int16 v35 = v36[0];
      v36[0] = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 1) {
          WTF::fastFree(v35, v18);
        }
        else {
          --*(_DWORD *)v35;
        }
      }
      __int16 v32 = v39;
      uint64_t v39 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 != 2)
        {
          *(_DWORD *)v32 -= 2;
          return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, (WTF::StringImpl *)v18);
        }
        goto LABEL_59;
      }
    }
    return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, (WTF::StringImpl *)v18);
  }
  uint64_t v9 = v47;
  uint64_t v10 = v48;
  uint64_t v47 = 0;
  long long v48 = 0;
  WTF::URL::URL((WTF::URL *)buf);
  if (v10)
  {
    *(_DWORD *)v10 += 2;
    long long v11 = (void *)MEMORY[0x1E4F43048];
    long long v12 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else
  {
    long long v11 = (void *)MEMORY[0x1E4F43048];
    long long v12 = &stru_1EEA10550;
  }
  id v13 = (void *)[v11 webClipWithIdentifier:v12];
  id v14 = v13;
  if (v13) {
    CFRetain(v13);
  }
  MEMORY[0x19972E8A0](v36, [v14 pageURL]);
  WTF::URL::operator=((uint64_t)buf, (uint64_t)v36);
  id v16 = v36[0];
  v36[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (*(void *)buf && *(_DWORD *)(*(void *)buf + 4))
  {
    WebCore::SecurityOriginData::securityOrigin((uint64_t *)v36, a3);
    WebCore::SecurityOrigin::create((uint64_t *)&v39, (WebCore::SecurityOrigin *)buf, v22);
    char isSameSiteAs = WebCore::SecurityOrigin::isSameSiteAs(v36[0], v39);
    uint64_t v24 = v39;
    uint64_t v39 = 0;
    if (v24) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v24, (WTF::StringImpl *)v18);
    }
    uint64_t v25 = v36[0];
    v36[0] = 0;
    if (v25)
    {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v25, (WTF::StringImpl *)v18);
      if ((isSameSiteAs & 1) == 0) {
        goto LABEL_39;
      }
    }
    else if ((isSameSiteAs & 1) == 0)
    {
      goto LABEL_39;
    }
  }
  id v26 = objc_alloc(MEMORY[0x1E4FB3398]);
  if (v10) {
    *(_DWORD *)v10 += 2;
  }
  WebPushD::platformNotificationCenterBundleIdentifier(v36, (uint64_t)v10);
  uint64_t v27 = v36[0];
  CFStringRef v29 = (void *)[v26 initWithBundleIdentifier:v36[0]];
  if (v27) {
    CFRelease(v27);
  }
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v28);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  if (a5) {
    uint64_t v30 = [NSNumber numberWithUnsignedLongLong:a4];
  }
  else {
    uint64_t v30 = 0;
  }
  objc_msgSend(v29, "setBadgeValue:", v30, v36[0]);
  if (v29) {
    CFRelease(v29);
  }
LABEL_39:
  if (v14) {
    CFRelease(v14);
  }
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v18);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v31 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (!v31)
  {
LABEL_48:
    if (!v10)
    {
LABEL_53:
      if (!v9) {
        return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, (WTF::StringImpl *)v18);
      }
      goto LABEL_56;
    }
    goto LABEL_51;
  }
  if (*(_DWORD *)v31 != 2)
  {
    *(_DWORD *)v31 -= 2;
    goto LABEL_48;
  }
  WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v18);
  if (!v10) {
    goto LABEL_53;
  }
LABEL_51:
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_53;
  }
  WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v18);
  if (v9)
  {
LABEL_56:
    if (*(_DWORD *)v9 != 2)
    {
      *(_DWORD *)v9 -= 2;
      return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, (WTF::StringImpl *)v18);
    }
    __int16 v32 = v9;
LABEL_59:
    WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v18);
  }
  return std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, (WTF::StringImpl *)v18);
}

void sub_199404D9C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF *a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a16) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)a16, a2);
  }
  if (a9) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)a9, a2);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, a2);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, a2);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, a2);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a23, a2);
  _Unwind_Resume(a1);
}

uint64_t std::default_delete<WebPushD::WebClipCache>::operator()[abi:sn180100](WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    WTF::HashTable<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::SecurityOriginData>,WTF::String,WTF::DefaultHash<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::SecurityOriginData>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *std::__destroy_at[abi:sn180100]<WebPushD::WebPushDaemon::PotentialSilentPush,0>(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = (WTF::StringImpl *)*((void *)result + 4);
    *((void *)v2 + 4) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = (WTF::StringImpl *)*((void *)v2 + 1);
    *((void *)v2 + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t result = *(WTF::StringImpl **)v2;
    *(void *)uint64_t v2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      }
      else
      {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19NotificationPayloadENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 120)) {
    WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem((WebCore::ApplePayInstallmentItem *)(a2 + 64), (WTF::StringImpl *)a2);
  }
  uint64_t v3 = *(WTF::StringImpl **)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19NotificationPayloadENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebPushD::WebPushDaemon::PendingPushMessage::~PendingPushMessage(WebPushD::WebPushDaemon::PendingPushMessage *this, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 104, a2);
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  if (*((unsigned char *)this + 48))
  {
    unint64_t v8 = (WTF *)*((void *)this + 4);
    if (v8)
    {
      *((void *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      WTF::fastFree(v8, v3);
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v3);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
}

uint64_t WTF::BlockPtr<void ()(UNNotificationSettings *)>::fromCallable<WebPushD::WebPushDaemon::handleIncomingPush(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)::$_0>(WebPushD::WebPushDaemon::handleIncomingPush(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  return WebPushD::WebPushDaemon::handleIncomingPush(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)::$_0::~$_0(a1 + 32, a2);
}

uint64_t WTF::BlockPtr<void ()(UNNotificationSettings *)>::fromCallable<WebPushD::WebPushDaemon::handleIncomingPush(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)::$_0>(WebPushD::WebPushDaemon::handleIncomingPush(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)::$_0)::{lambda(void *,UNNotificationSettings *)#1}::__invoke(__n128 *a1, void *a2)
{
  v22[29] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a1[2].n128_u64[0];
  uint64_t v4 = [a2 authorizationStatus];
  if (v4 == 2)
  {
    uint64_t v5 = WTF::WorkQueue::main((WTF::WorkQueue *)2);
    *(void *)buf = v3;
    WTF::CrossThreadCopierBase<false,false,WebCore::PushSubscriptionSetIdentifier>::copy<WebCore::PushSubscriptionSetIdentifier&>((__n128 *)&v20[6], a1 + 3);
    WebKit::WebPushMessage::WebPushMessage((uint64_t)v22, (uint64_t *)&a1[5]);
    uint64_t v6 = WTF::fastMalloc((WTF *)0x120);
    *(void *)uint64_t v6 = &unk_1EEA0C5A8;
    *(void *)(v6 + 16) = *(void *)buf;
    long long v7 = *(_OWORD *)&v20[6];
    *(_OWORD *)&v20[6] = 0uLL;
    *(_OWORD *)(v6 + 32) = v7;
    *(_OWORD *)(v6 + 48) = v21;
    WebKit::WebPushMessage::WebPushMessage(v6 + 64, v22);
    uint64_t v17 = (WTF *)v6;
    (*(void (**)(uint64_t, WTF **))(*(void *)v5 + 32))(v5, &v17);
    uint64_t v9 = v17;
    uint64_t v17 = 0;
    if (v9) {
      (*(void (**)(WTF *))(*(void *)v9 + 8))(v9);
    }
    return WebPushD::WebPushDaemon::handleIncomingPush(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)::$_0::~$_0((uint64_t)buf, v8);
  }
  else
  {
    int v11 = v4;
    long long v12 = qword_1EB3583C0;
    uint64_t result = os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v16, (WebCore::PushSubscriptionSetIdentifier *)&a1[3]);
      WTF::String::utf8();
      if (v17) {
        id v13 = (char *)v17 + 16;
      }
      else {
        id v13 = 0;
      }
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v11;
      __int16 v19 = 2082;
      *(void *)__int16 v20 = v13;
      _os_log_error_impl(&dword_1985F2000, v12, OS_LOG_TYPE_ERROR, "Ignoring incoming push from app with invalid notification permission state %d: %{public}s", buf, 0x12u);
      uint64_t v15 = v17;
      uint64_t v17 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1) {
          WTF::fastFree(v15, v14);
        }
        else {
          --*(_DWORD *)v15;
        }
      }
      uint64_t result = (uint64_t)v16;
      id v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v14);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void sub_199405464(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, char a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::handleIncomingPush(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)::$_0::operator()(UNNotificationSettings *)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA0C5A8;
  WebPushD::WebPushDaemon::handleIncomingPush(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)::$_0::~$_0((uint64_t)(a1 + 2), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::handleIncomingPush(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)::$_0::operator()(UNNotificationSettings *)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EEA0C5A8;
  WebPushD::WebPushDaemon::handleIncomingPush(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)::$_0::~$_0((uint64_t)a1 + 16, a2);

  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::handleIncomingPush(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)::$_0::operator()(UNNotificationSettings *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  v11[29] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(WebPushD::WebPushDaemon **)(a1 + 16);
  unint64_t v3 = (const WebCore::PushSubscriptionSetIdentifier *)(a1 + 32);
  if (!*((void *)v2 + 19))
  {
    uint64_t v4 = os_transaction_create();
    uint64_t v5 = (void *)*((void *)v2 + 19);
    *((void *)v2 + 19) = v4;
    if (v5) {
  }
    }
  WebCore::TimerBase::start();
  uint64_t v6 = *(_DWORD **)v3;
  if (*(void *)v3) {
    *v6 += 2;
  }
  v9[0] = (uint64_t)v6;
  long long v7 = *(_DWORD **)(a1 + 40);
  if (v7) {
    *v7 += 2;
  }
  v9[1] = (uint64_t)v7;
  long long v10 = *(_OWORD *)(a1 + 48);
  WebKit::WebPushMessage::WebPushMessage((uint64_t)v11, (uint64_t *)(a1 + 64));
  WTF::Deque<WebPushD::WebPushDaemon::PendingPushMessage,0ul>::append<WebPushD::WebPushDaemon::PendingPushMessage>((uint64_t)v2 + 64, v9);
  WebPushD::WebPushDaemon::PendingPushMessage::~PendingPushMessage((WebPushD::WebPushDaemon::PendingPushMessage *)v9, v8);
  WebPushD::WebPushDaemon::notifyClientPushMessageIsAvailable(v2, v3);
}

void sub_199405720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebPushD::WebPushDaemon::showNotification(WebPushD::PushClientConnection &,WebCore::NotificationData const&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebPushD::WebPushDaemon::showNotification(WebPushD::PushClientConnection &,WebCore::NotificationData const&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[11];
  a1[11] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[10];
  a1[10] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebPushD::WebPushDaemon::showNotification(WebPushD::PushClientConnection &,WebCore::NotificationData const&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebPushD::WebPushDaemon::showNotification(WebPushD::PushClientConnection &,WebCore::NotificationData const&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(__n128 *a1, const void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[2].n128_u64[0];
  uint64_t v5 = WTF::WorkQueue::main((WTF::WorkQueue *)a1);
  unint64_t v18 = v4;
  WTF::CrossThreadCopierBase<false,false,WebCore::PushSubscriptionSetIdentifier>::copy<WebCore::PushSubscriptionSetIdentifier&>((__n128 *)v19, a1 + 3);
  WTF::String::isolatedCopy();
  cf[1] = a2;
  if (a2) {
    CFRetain(a2);
  }
  unint64_t v6 = a1[5].n128_u64[1];
  a1[5].n128_u64[1] = 0;
  unint64_t v22 = v6;
  uint64_t v7 = WTF::fastMalloc((WTF *)0x60);
  *(void *)uint64_t v7 = &unk_1EEA0C620;
  *(void *)(v7 + 16) = v18;
  *(_OWORD *)(v7 + 32) = *(_OWORD *)v19;
  *(_OWORD *)(v7 + 48) = v20;
  long long v8 = *(_OWORD *)cf;
  *(_OWORD *)__int16 v19 = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  *(_OWORD *)(v7 + 64) = v8;
  unint64_t v9 = v22;
  unint64_t v22 = 0;
  *(void *)(v7 + 80) = v9;
  uint64_t v17 = v7;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 32))(v5, &v17);
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  unint64_t v12 = v22;
  unint64_t v22 = 0;
  if (v12) {
    (*(void (**)(unint64_t))(*(void *)v12 + 8))(v12);
  }
  CFTypeRef v13 = cf[1];
  cf[1] = 0;
  if (v13) {
    CFRelease(v13);
  }
  id v14 = (WTF::StringImpl *)cf[0];
  cf[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v10);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = v19[1];
  v19[1] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v10);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t result = v19[0];
  v19[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_199405A7C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, CFTypeRef cf, uint64_t a19)
{
  if (a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::showNotification(WebPushD::PushClientConnection &,WebCore::NotificationData const&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(NSError *)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA0C620;
  uint64_t v3 = a1[10];
  a1[10] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (const void *)a1[9];
  a1[9] = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unint64_t v6 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::showNotification(WebPushD::PushClientConnection &,WebCore::NotificationData const&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(NSError *)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v2 = (WTF *)WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::showNotification(WebPushD::PushClientConnection &,WebCore::NotificationData const&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(NSError *)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);

  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::showNotification(WebPushD::PushClientConnection &,WebCore::NotificationData const&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(char **)(a1 + 72);
  if (v2)
  {
    uint64_t v3 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      uint64_t v31 = v2;
      _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "Failed to add notification request: %{public}@", buf, 0xCu);
    }
  }
  else
  {
    unint64_t v4 = *(WebPushD::WebPushDaemon **)(a1 + 16);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
    uint64_t v7 = *((void *)v4 + 29);
    if ((WebPushD::WebPushDaemon *)v7 != (WebPushD::WebPushDaemon *)((char *)v4 + 224))
    {
      double v8 = v6;
      unint64_t v9 = (void *)MEMORY[0x1E4F30980];
      while (1)
      {
        long long v10 = *(void *)(v7 + 16) ? *(WTF **)(v7 + 16) : (WTF *)*v9;
        uint64_t v11 = *(void *)(a1 + 32) ? *(const WTF::StringImpl **)(a1 + 32) : (const WTF::StringImpl *)*v9;
        if (WTF::equal(v10, v11, v5))
        {
          unint64_t v12 = *(void *)(v7 + 24) ? *(WTF **)(v7 + 24) : (WTF *)*v9;
          CFTypeRef v13 = *(void *)(a1 + 40) ? *(const WTF::StringImpl **)(a1 + 40) : (const WTF::StringImpl *)*v9;
          if (WTF::equal(v12, v13, v5))
          {
            BOOL v14 = *(_OWORD *)(v7 + 32) != 0;
            BOOL v15 = *(_OWORD *)(a1 + 48) != 0;
            int v17 = *(void *)(v7 + 32) == *(void *)(a1 + 48) && *(void *)(v7 + 40) == *(void *)(a1 + 56);
            if (!v14 || !v15) {
              int v17 = v14 ^ v15 ^ 1;
            }
            if (v17 == 1
              && WTF::equal(*(WTF **)(v7 + 48), *(const WTF::StringImpl **)(a1 + 64), v5)
              && *(double *)(v7 + 56) > v8)
            {
              break;
            }
          }
        }
        uint64_t v7 = *(void *)(v7 + 8);
        if ((WebPushD::WebPushDaemon *)v7 == (WebPushD::WebPushDaemon *)((char *)v4 + 224)) {
          return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 80));
        }
      }
      __int16 v19 = qword_1EB3583C0;
      if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v28, (WebCore::PushSubscriptionSetIdentifier *)(v7 + 16));
        WTF::String::utf8();
        long long v20 = v29;
        WTF::String::utf8();
        long long v21 = (char *)v20 + 16;
        if (!v20) {
          long long v21 = 0;
        }
        if (v27) {
          unint64_t v22 = (char *)v27 + 16;
        }
        else {
          unint64_t v22 = 0;
        }
        *(_DWORD *)buf = 136446467;
        uint64_t v31 = v21;
        __int16 v32 = 2085;
        __int16 v33 = v22;
        _os_log_impl(&dword_1985F2000, v19, OS_LOG_TYPE_DEFAULT, "showNotification called in time for %{public}s (origin = %{sensitive}s)", buf, 0x16u);
        if (v27)
        {
          if (*(_DWORD *)v27 == 1) {
            WTF::fastFree(v27, v23);
          }
          else {
            --*(_DWORD *)v27;
          }
        }
        uint64_t v24 = v29;
        CFStringRef v29 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 1) {
            WTF::fastFree(v24, v23);
          }
          else {
            --*(_DWORD *)v24;
          }
        }
        uint64_t v25 = v28;
        char v28 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2) {
            WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v23);
          }
          else {
            *(_DWORD *)v25 -= 2;
          }
        }
      }
      uint64_t v26 = *((void *)v4 + 29);
      std::list<WebPushD::WebPushDaemon::PotentialSilentPush,WTF::FastAllocator<WebPushD::WebPushDaemon::PotentialSilentPush>>::erase((void *)v4 + 28, (void *)v7);
      if (v7 == v26) {
        WebPushD::WebPushDaemon::rescheduleSilentPushTimer(v4);
      }
    }
  }
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 80));
}

void sub_199405F80(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 WTF::CrossThreadCopierBase<false,false,WebCore::PushSubscriptionSetIdentifier>::copy<WebCore::PushSubscriptionSetIdentifier&>(__n128 *a1, __n128 *a2)
{
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  __n128 result = a2[1];
  a1[1] = result;
  return result;
}

void sub_199406028(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  unint64_t v4 = *v2;
  char *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSArray<UNNotification *> *)>::fromCallable<WebPushD::WebPushDaemon::getNotifications(WebPushD::PushClientConnection &,WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)::$_0>(WebPushD::WebPushDaemon::getNotifications(WebPushD::PushClientConnection &,WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[14];
  a1[14] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (WTF::StringImpl *)a1[13];
  a1[13] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  double v6 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  __n128 result = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSArray<UNNotification *> *)>::fromCallable<WebPushD::WebPushDaemon::getNotifications(WebPushD::PushClientConnection &,WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)::$_0>(WebPushD::WebPushDaemon::getNotifications(WebPushD::PushClientConnection &,WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)::$_0)::{lambda(void *,NSArray<UNNotification *> *)#1}::__invoke(__n128 *a1, const void *a2)
{
  WTF::CrossThreadCopierBase<false,false,WebCore::PushSubscriptionSetIdentifier>::copy<WebCore::PushSubscriptionSetIdentifier&>(v12, a1 + 2);
  CFTypeRef v13 = a2;
  if (a2) {
    CFRetain(a2);
  }
  WTF::URL::isolatedCopy();
  WTF::String::isolatedCopy();
  unint64_t v4 = a1[7].n128_u64[0];
  a1[7].n128_u64[0] = 0;
  *((void *)&v15 + 1) = v4;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x70);
  *(void *)uint64_t v5 = &unk_1EEA0C678;
  __n128 v6 = v12[0];
  v12[0] = 0uLL;
  *(__n128 *)(v5 + 16) = v6;
  *(__n128 *)(v5 + 32) = v12[1];
  uint64_t v7 = v13;
  CFTypeRef v13 = 0;
  *(void *)(v5 + 48) = v7;
  WTF::URL::URL(v5 + 56, v14);
  long long v8 = v15;
  long long v15 = 0uLL;
  *(_OWORD *)(v5 + 96) = v8;
  uint64_t v16 = v5;
  WTF::ensureOnMainRunLoop();
  uint64_t v10 = v16;
  uint64_t v16 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return WebPushD::WebPushDaemon::getNotifications(WebPushD::PushClientConnection &,WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)::$_0::operator()(NSArray<UNNotification *> *)::{lambda(void)#1}::~NSArray((uint64_t)v12, v9);
}

void sub_199406274(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, CFTypeRef cf, WTF::StringImpl *a16)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::WebPushDaemon::getNotifications(WebPushD::PushClientConnection &,WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)::$_0::operator()(NSArray<UNNotification *> *)::{lambda(void)#1}::~NSArray(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = *(WTF::StringImpl **)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  __n128 v6 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  long long v8 = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getNotifications(WebPushD::PushClientConnection &,WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)::$_0::operator()(NSArray<UNNotification *> *)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA0C678;
  WebPushD::WebPushDaemon::getNotifications(WebPushD::PushClientConnection &,WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)::$_0::operator()(NSArray<UNNotification *> *)::{lambda(void)#1}::~NSArray((uint64_t)(a1 + 2), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getNotifications(WebPushD::PushClientConnection &,WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)::$_0::operator()(NSArray<UNNotification *> *)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EEA0C678;
  WebPushD::WebPushDaemon::getNotifications(WebPushD::PushClientConnection &,WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)::$_0::operator()(NSArray<UNNotification *> *)::{lambda(void)#1}::~NSArray((uint64_t)a1 + 16, a2);

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getNotifications(WebPushD::PushClientConnection &,WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)::$_0::operator()(NSArray<UNNotification *> *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v27 objects:v41 count:16];
  if (v3)
  {
    uint64_t v5 = *(void *)v28;
    *(void *)&long long v4 = 136446210;
    long long v24 = v4;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v28 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = (WebCore::NotificationData *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v27 + 1) + 8 * v6), "request", v24), "content"), "userInfo");
        WebCore::NotificationData::fromDictionary((uint64_t *)v34, v7, v8);
        if (v40)
        {
          uint64_t v10 = *(const WTF::StringImpl **)(a1 + 96);
          if (!v10 || !*((_DWORD *)v10 + 1)) {
            goto LABEL_11;
          }
          uint64_t v11 = WTF::equal(v38, v10, v9);
          if (v11)
          {
            if (!v40) {
              goto LABEL_40;
            }
LABEL_11:
            uint64_t v11 = WTF::equal(v39, *(const WTF::StringImpl **)(a1 + 56), v9);
            if (v11)
            {
              if (!v40)
              {
LABEL_40:
                __break(1u);
                goto LABEL_41;
              }
              if (HIDWORD(v32) == v32)
              {
                WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NotificationData&>((uint64_t)&v31, (unint64_t)v34);
              }
              else
              {
                WebCore::NotificationData::NotificationData((WebCore::NotificationData *)(v31 + ((unint64_t)HIDWORD(v32) << 8)), (const WebCore::NotificationData *)v34);
                ++HIDWORD(v32);
              }
            }
          }
        }
        else
        {
          CFTypeRef v13 = qword_1EB3583C0;
          if (!os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR)) {
            goto LABEL_25;
          }
          WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v25, (WebCore::PushSubscriptionSetIdentifier *)(a1 + 16));
          WTF::String::utf8();
          if (v26) {
            BOOL v14 = (char *)v26 + 16;
          }
          else {
            BOOL v14 = 0;
          }
          *(_DWORD *)buf = v24;
          *(void *)&uint8_t buf[4] = v14;
          _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "WebPushDaemon::getNotifications error: skipping notification with invalid Notification userInfo for subscription %{public}s", buf, 0xCu);
          long long v15 = v26;
          uint64_t v26 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 1) {
              WTF::fastFree(v15, v12);
            }
            else {
              --*(_DWORD *)v15;
            }
          }
          uint64_t v16 = v25;
          uint64_t v25 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v12);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
        }
        if (v40) {
          WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v34, v12);
        }
LABEL_25:
        ++v6;
      }
      while (v3 != v6);
      uint64_t v17 = [v2 countByEnumeratingWithState:&v27 objects:v41 count:16];
      uint64_t v3 = v17;
    }
    while (v17);
  }
  unint64_t v18 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = HIDWORD(v32);
    WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v26, (WebCore::PushSubscriptionSetIdentifier *)(a1 + 16));
    WTF::String::utf8();
    if (*(void *)buf) {
      uint64_t v20 = *(void *)buf + 16;
    }
    else {
      uint64_t v20 = 0;
    }
    *(_DWORD *)uint64_t v34 = 134218242;
    uint64_t v35 = v19;
    __int16 v36 = 2082;
    uint64_t v37 = v20;
    _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "WebPushDaemon::getNotifications: returned %zu notifications for subscription %{public}s", v34, 0x16u);
    uint64_t v11 = *(void *)buf;
    *(void *)buf = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1) {
LABEL_41:
      }
        WTF::fastFree((WTF *)v11, v12);
      else {
        --*(_DWORD *)v11;
      }
    }
    long long v21 = v26;
    uint64_t v26 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
  }
  WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v34, (uint64_t)&v31);
  *(_DWORD *)((char *)&v37 + 2) = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)>::operator()((uint64_t *)(a1 + 104));
  if (*(_DWORD *)((char *)&v37 + 2) != -1) {
    ((void (*)(uint8_t *, uint8_t *))off_1EEA0C638[*(unsigned int *)((char *)&v37 + 2)])(buf, v34);
  }
  return WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v22);
}

void sub_1994068E0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,int a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::BlockPtr<void ()(UNNotificationSettings *)>::fromCallable<WebPushD::WebPushDaemon::getPushPermissionState(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)> &&)::$_0>(WebPushD::WebPushDaemon::getPushPermissionState(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  __n128 result = *(WTF::StringImpl **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(UNNotificationSettings *)>::fromCallable<WebPushD::WebPushDaemon::getPushPermissionState(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)> &&)::$_0>(WebPushD::WebPushDaemon::getPushPermissionState(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)> &&)::$_0)::{lambda(void *,UNNotificationSettings *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [a2 authorizationStatus];
  if (v3 == 2) {
    int v4 = 1;
  }
  else {
    int v4 = 2 * (v3 != 1);
  }
  uint64_t v5 = qword_1EB3583C0;
  uint64_t v6 = (WTF::WorkQueue *)os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    WTF::String::utf8();
    uint64_t v7 = v13 ? (uint64_t)v13 + 16 : 0;
    *(_DWORD *)buf = 136643075;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v15 = 1024;
    int v16 = v4;
    _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "getPushPermissionState for %{sensitive}s with result: %u", buf, 0x12u);
    uint64_t v6 = v13;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        uint64_t v6 = (WTF::WorkQueue *)WTF::fastFree(v13, v8);
      }
      else {
        --*(_DWORD *)v13;
      }
    }
  }
  uint64_t v9 = WTF::WorkQueue::main(v6);
  uint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v11 = &unk_1EEA0C6C0;
  *(void *)(v11 + 8) = v10;
  *(unsigned char *)(v11 + 16) = v4;
  *(void *)buf = v11;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 32))(v9, buf);
  uint64_t result = *(void *)buf;
  *(void *)buf = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_199406BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getPushPermissionState(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)> &&)::$_0::operator()(UNNotificationSettings *)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA0C6C0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getPushPermissionState(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)> &&)::$_0::operator()(UNNotificationSettings *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA0C6C0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getPushPermissionState(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)> &&)::$_0::operator()(UNNotificationSettings *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(WebCore::PushPermissionState)>::operator()((uint64_t *)(a1 + 8));
}

WTF::StringImpl *WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebPushD::WebPushDaemon::requestPushPermission(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebPushD::WebPushDaemon::requestPushPermission(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *(WTF::StringImpl **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebPushD::WebPushDaemon::requestPushPermission(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebPushD::WebPushDaemon::requestPushPermission(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL,NSError *)#1}::__invoke(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = qword_1EB3583C0;
  if (a3)
  {
    uint64_t v7 = (WTF::WorkQueue *)os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR);
    if (!v7) {
      goto LABEL_16;
    }
    WTF::String::utf8();
    if (v15) {
      long long v8 = (char *)v15 + 16;
    }
    else {
      long long v8 = 0;
    }
    *(_DWORD *)buf = 136643075;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v17 = 2114;
    uint64_t v18 = a3;
    _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "Failed to request push permission for %{sensitive}s: %{public}@", buf, 0x16u);
  }
  else
  {
    uint64_t v7 = (WTF::WorkQueue *)os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT);
    if (!v7) {
      goto LABEL_16;
    }
    WTF::String::utf8();
    if (v15) {
      uint64_t v10 = (char *)v15 + 16;
    }
    else {
      uint64_t v10 = 0;
    }
    *(_DWORD *)buf = 136643075;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v17 = 1024;
    LODWORD(v18) = a2;
    _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "Requested push permission for %{sensitive}s with result: %d", buf, 0x12u);
  }
  uint64_t v7 = v15;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1) {
      uint64_t v7 = (WTF::WorkQueue *)WTF::fastFree(v15, v9);
    }
    else {
      --*(_DWORD *)v15;
    }
  }
LABEL_16:
  uint64_t v11 = WTF::WorkQueue::main(v7);
  uint64_t v12 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v13 = &unk_1EEA0C708;
  *(void *)(v13 + 8) = v12;
  *(unsigned char *)(v13 + 16) = a2;
  *(void *)buf = v13;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v11 + 32))(v11, buf);
  uint64_t result = *(void *)buf;
  *(void *)buf = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_199406FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::requestPushPermission(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA0C708;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::requestPushPermission(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA0C708;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::requestPushPermission(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

WebCore::TimerBase *WebCore::Timer::Timer<WebPushD::WebPushDaemon,WebPushD::WebPushDaemon>(WebCore::TimerBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)WebCore::TimerBase::TimerBase(a1) = &unk_1EE9BA5F0;
  long long v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v8 = &unk_1EEA0C730;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a2;
  *((void *)a1 + 6) = v8;
  return a1;
}

void sub_1994071F8(_Unwind_Exception *a1)
{
  WebCore::TimerBase::~TimerBase(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebPushD::WebPushDaemon::*&)(void),WebPushD::WebPushDaemon*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::startMockPushService(void)::$_0,void,WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

WTF::WorkQueue *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::startMockPushService(void)::$_1,void,std::unique_ptr<WebPushD::PushService> &&>::call(uint64_t a1, WebPushD::PushService **a2)
{
  return WebPushD::WebPushDaemon::setPushService(*(void *)(a1 + 8), a2);
}

void WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::startPushService(WTF::String const&,WTF::String const&,WTF::String const&)::$_0,void,WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::startPushService(WTF::String const&,WTF::String const&,WTF::String const&)::$_1,void,std::unique_ptr<WebPushD::PushService> &&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA0C7D0;
  uint64_t v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::startPushService(WTF::String const&,WTF::String const&,WTF::String const&)::$_1,void,std::unique_ptr<WebPushD::PushService> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA0C7D0;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::startPushService(WTF::String const&,WTF::String const&,WTF::String const&)::$_1,void,std::unique_ptr<WebPushD::PushService> &&>::call(uint64_t a1, unsigned int **a2)
{
  uint64_t v2 = *(WebPushD::WebPushDaemon **)(a1 + 8);
  uint64_t v3 = *a2;
  if (*a2)
  {
    getAllowedBundleIdentifier(&v16);
    uint64_t v5 = WebPushD::WebPushDaemon::ensureWebClipCache(v2);
    WebPushD::WebClipCache::visibleWebClipIdentifiers(v5, (const WTF::String *)&v16, (uint64_t *)&v15);
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v7 = &unk_1EEA0C7F8;
    v7[1] = v2;
    v7[2] = v6;
    BOOL v14 = v7;
    WebPushD::PushService::updateSubscriptionSetState(v3, &v16, &v15, (uint64_t *)&v14);
    uint64_t v9 = (uint64_t)v14;
    BOOL v14 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    if (v15) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v15, v8);
    }
    uint64_t result = v16;
    int v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    int v16 = 0;
    WebPushD::WebPushDaemon::setPushService((uint64_t)v2, &v16);
    uint64_t result = v16;
    if (v16)
    {
      WebPushD::PushService::~PushService(v16, v11);
      return (WTF::StringImpl *)WTF::fastFree(v12, v13);
    }
  }
  return result;
}

void sub_199407470(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    WebPushD::PushService::~PushService(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD13WebPushDaemon16startPushServiceERKNS_6StringES6_S6_EN3__1clINSt3__110unique_ptrINS2_11PushServiceENS9_14default_deleteISB_EEEEEEDaOT_EUlvE_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C7F8;
  std::unique_ptr<WebPushD::PushService>::reset[abi:sn180100]((WebPushD::PushService **)(a1 + 16), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD13WebPushDaemon16startPushServiceERKNS_6StringES6_S6_EN3__1clINSt3__110unique_ptrINS2_11PushServiceENS9_14default_deleteISB_EEEEEEDaOT_EUlvE_vJEED0Ev(WebPushD::PushService **a1)
{
  *a1 = (WebPushD::PushService *)&unk_1EEA0C7F8;
  std::unique_ptr<WebPushD::PushService>::reset[abi:sn180100](a1 + 2, 0);

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::WorkQueue *_ZN3WTF6Detail15CallableWrapperIZZN8WebPushD13WebPushDaemon16startPushServiceERKNS_6StringES6_S6_EN3__1clINSt3__110unique_ptrINS2_11PushServiceENS9_14default_deleteISB_EEEEEEDaOT_EUlvE_vJEE4callEv(uint64_t a1)
{
  return WebPushD::WebPushDaemon::setPushService(*(void *)(a1 + 8), (WebPushD::PushService **)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::setPushService(std::unique_ptr<WebPushD::PushService> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  while (1)
  {
    unint64_t v2 = *(void *)(v1 + 32);
    unint64_t v3 = *(void *)(v1 + 40);
    unint64_t v4 = v3;
    if (v2 > v3) {
      unint64_t v4 = v3 + *(unsigned int *)(v1 + 56);
    }
    if (v4 == v2) {
      break;
    }
    if (v2 == v3)
    {
      uint64_t result = 80;
      __break(0xC471u);
      return result;
    }
    uint64_t v5 = *(void *)(v1 + 48);
    uint64_t v6 = *(void *)(v5 + 8 * v2);
    *(void *)(v5 + 8 * v2) = 0;
    uint64_t v7 = *(void *)(v1 + 48);
    uint64_t v8 = *(void *)(v7 + 8 * v2);
    *(void *)(v7 + 8 * v2) = 0;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      unint64_t v2 = *(void *)(v1 + 32);
    }
    if (v2 == *(unsigned int *)(v1 + 56) - 1) {
      unint64_t v9 = 0;
    }
    else {
      unint64_t v9 = v2 + 1;
    }
    *(void *)(v1 + 32) = v9;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void sub_1994076E4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,NSObject  {objcproto13OS_xpc_object}*,WTF::IdentityExtractor,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>>,NSObject  {objcproto13OS_xpc_object}*>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 - 8);
  unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  uint64_t v7 = *(void *)(a1 + 8 * v6);
  if (v7 == a2) {
    return 1;
  }
  int v8 = 1;
  do
  {
    BOOL v9 = v7 != 0;
    if (!v7) {
      break;
    }
    unsigned int v6 = (v6 + v8) & v2;
    uint64_t v7 = *(void *)(a1 + 8 * v6);
    ++v8;
  }
  while (v7 != a2);
  return v9;
}

uint64_t *WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,NSObject  {objcproto13OS_xpc_object}*,WTF::IdentityExtractor,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::remove(uint64_t *result, void *a2)
{
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return (uint64_t *)WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,NSObject  {objcproto13OS_xpc_object}*,WTF::IdentityExtractor,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::rehash(result, v6 >> 1);
    }
  }
  return result;
}

uint64_t WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,NSObject  {objcproto13OS_xpc_object}*,WTF::IdentityExtractor,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = *(void *)(v4 + 8 * i);
      if ((unint64_t)(v10 + 1) >= 2)
      {
        uint64_t v11 = *a1;
        if (*a1) {
          int v12 = *(_DWORD *)(v11 - 8);
        }
        else {
          int v12 = 0;
        }
        unint64_t v13 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
        unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
        int v17 = 1;
        do
        {
          unsigned int v18 = v16;
          int v8 = *(void **)(v11 + 8 * v16);
          unsigned int v16 = (v16 + v17++) & v12;
        }
        while (v8);
        *(void *)(v11 + 8 * v18) = v10;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashMap<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashMap<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashMap<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = *(void *)(v4 + 16 * v9);
      if (v10 != -1)
      {
        if (v10)
        {
          uint64_t v13 = *a1;
          if (*a1) {
            int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            int v14 = 0;
          }
          unint64_t v15 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
          unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          unsigned int v18 = v14 & ((v17 >> 31) ^ v17);
          int v19 = 1;
          do
          {
            unsigned int v20 = v18;
            uint64_t v21 = *(void *)(v13 + 16 * v18);
            unsigned int v18 = (v18 + v19++) & v14;
          }
          while (v21);
          uint64_t v22 = v13 + 16 * v20;
          uint64_t v23 = *(_DWORD **)(v22 + 8);
          *(void *)(v22 + 8) = 0;
          if (v23)
          {
            if (v23[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v23 + 8))(v23);
            }
            else {
              --v23[4];
            }
          }
          long long v24 = (long long *)(v4 + 16 * v9);
          long long v25 = *v24;
          *((void *)v24 + 1) = 0;
          *(_OWORD *)uint64_t v22 = v25;
          int v12 = (_DWORD *)*((void *)v24 + 1);
          *((void *)v24 + 1) = 0;
          if (!v12) {
            goto LABEL_25;
          }
          if (v12[4] == 1)
          {
LABEL_24:
            (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
            goto LABEL_25;
          }
          --v12[4];
        }
        else
        {
          uint64_t v11 = v4 + 16 * v9;
          int v12 = *(_DWORD **)(v11 + 8);
          *(void *)(v11 + 8) = 0;
          if (v12)
          {
            if (v12[4] == 1) {
              goto LABEL_24;
            }
            --v12[4];
          }
        }
      }
LABEL_25:
      if (++v9 == v5) {
        goto LABEL_28;
      }
    }
  }
  if (v4)
  {
LABEL_28:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::connectionEventHandler(NSObject  {objcproto13OS_xpc_object}*)::$_0,void,WTF::UniqueRef<IPC::Encoder> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EEA0C848;
  int v2 = (void *)a1[2];
  if (v2) {

  }
  unsigned int v3 = (void *)a1[1];
  if (v3) {

  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::connectionEventHandler(NSObject  {objcproto13OS_xpc_object}*)::$_0,void,WTF::UniqueRef<IPC::Encoder> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA0C848;
  unsigned int v3 = (void *)*((void *)this + 2);
  if (v3) {

  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4) {

  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::connectionEventHandler(NSObject  {objcproto13OS_xpc_object}*)::$_0,void,WTF::UniqueRef<IPC::Encoder> &&>::call(uint64_t a1, IPC::Encoder *a2)
{
  uint64_t v4 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  if (WTF::RunLoop::isCurrent(v4))
  {
    WebKit::encoderToXPCData(a2, &value);
    xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 16), "protocol version", 4uLL);
    id v5 = value;
    xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 16), "encoded message", value);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 8), *(xpc_object_t *)(a1 + 16));
    if (v5)
    {
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void sub_199407D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {

  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,NSObject  {objcproto13OS_xpc_object}*,WTF::IdentityExtractor,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,NSObject  {objcproto13OS_xpc_object}*,WTF::IdentityExtractor,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::rehash(a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::updateSubscriptionSetState(void)::$_0,void>::call(WTF::StringImpl *result)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (WebPushD::WebPushDaemon *)*((void *)result + 1);
  if (!*((void *)v1 + 2)) {
    return result;
  }
  getAllowedBundleIdentifier(&v40);
  int v2 = WebPushD::WebPushDaemon::ensureWebClipCache(v1);
  WebPushD::WebClipCache::visibleWebClipIdentifiers(v2, (const WTF::String *)&v40, (uint64_t *)&v39);
  unsigned int v3 = (unsigned int *)*((void *)v1 + 2);
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EEA0C898;
  *(void *)buf = v4;
  WebPushD::PushService::updateSubscriptionSetState(v3, &v40, &v39, (uint64_t *)buf);
  uint64_t v7 = *(void *)buf;
  *(void *)buf = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)v1 + 1);
  if (v8)
  {
    uint64_t v9 = *(unsigned int *)(v8 - 4);
    uint64_t v10 = (uint64_t *)(v8 + 16 * v9);
    if (*(_DWORD *)(v8 - 12))
    {
      uint64_t v11 = (uint64_t *)*((void *)v1 + 1);
      if (v9)
      {
        uint64_t v12 = 16 * v9;
        uint64_t v11 = (uint64_t *)*((void *)v1 + 1);
        while ((unint64_t)(*v11 + 1) <= 1)
        {
          v11 += 2;
          v12 -= 16;
          if (!v12)
          {
            uint64_t v11 = v10;
            goto LABEL_11;
          }
        }
      }
      goto LABEL_11;
    }
    uint64_t v11 = (uint64_t *)(v8 + 16 * v9);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v10 = (uint64_t *)(v8 + 16 * v9);
  if (!v8)
  {
    uint64_t v13 = 0;
    goto LABEL_16;
  }
LABEL_11:
  uint64_t v13 = (uint64_t *)(v8 + 16 * *(unsigned int *)(v8 - 4));
LABEL_16:
  if (v13 != v11)
  {
    while (1)
    {
      uint64_t v14 = v11[1];
      unint64_t v15 = *(WTF::StringImpl **)(v14 + 40);
      if (v15) {
        *(_DWORD *)v15 += 2;
      }
      uint64_t v38 = v15;
      unint64_t v16 = *(WTF::StringImpl **)(v14 + 56);
      if (v16) {
        *(_DWORD *)v16 += 2;
      }
      uint64_t v37 = v16;
      if (!WTF::equal(v15, v40, v6)) {
        goto LABEL_25;
      }
      if (v37) {
        break;
      }
LABEL_44:
      long long v27 = v38;
      uint64_t v38 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v5);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
      long long v28 = v11 + 2;
      uint64_t v11 = v10;
      if (v28 != v10)
      {
        uint64_t v11 = v28;
        while ((unint64_t)(*v11 + 1) <= 1)
        {
          v11 += 2;
          if (v11 == v10)
          {
            uint64_t v11 = v10;
            break;
          }
        }
      }
      if (v11 == v13) {
        goto LABEL_63;
      }
    }
    if (*((_DWORD *)v37 + 1))
    {
      unint64_t v17 = v39;
      if (v39)
      {
        int v34 = *((_DWORD *)v39 - 2);
        unsigned int v29 = *((_DWORD *)v37 + 4);
        if (v29 >= 0x100) {
          unsigned int v30 = v29 >> 8;
        }
        else {
          unsigned int v30 = WTF::StringImpl::hashSlowCase(v37);
        }
        for (i = 0; ; unsigned int v30 = i + v32)
        {
          int v32 = v30 & v34;
          __int16 v33 = (WTF *)v17[v30 & v34];
          if (v33 != (WTF *)-1)
          {
            if (!v33) {
              goto LABEL_25;
            }
            if (WTF::equal(v33, v37, v6)) {
              break;
            }
          }
          ++i;
        }
      }
      else
      {
LABEL_25:
        unsigned int v18 = qword_1EB3583C0;
        if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
        {
          xpc_connection_t v19 = (xpc_connection_t)*v11;
          WTF::String::ascii((uint64_t *)&v36, (WTF::String *)&v38);
          unsigned int v20 = v36;
          WTF::String::ascii((uint64_t *)&v35, (WTF::String *)&v37);
          uint64_t v21 = (char *)v20 + 16;
          if (!v20) {
            uint64_t v21 = 0;
          }
          *(_DWORD *)buf = 134218498;
          *(void *)&uint8_t buf[4] = v19;
          if (v35) {
            uint64_t v22 = (char *)v35 + 16;
          }
          else {
            uint64_t v22 = 0;
          }
          __int16 v42 = 2082;
          __int16 v43 = v21;
          __int16 v44 = 2082;
          __int16 v45 = v22;
          _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "WebPushDaemon::updateSubscriptionSetState: killing obsolete connection %p associated with bundleIdentifier = %{public}s and pushPartition = %{public}s", buf, 0x20u);
          long long v24 = v35;
          uint64_t v35 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1) {
              WTF::fastFree(v24, v23);
            }
            else {
              --*(_DWORD *)v24;
            }
          }
          long long v25 = v36;
          __int16 v36 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 1) {
              WTF::fastFree(v25, v23);
            }
            else {
              --*(_DWORD *)v25;
            }
          }
        }
        xpc_connection_cancel((xpc_connection_t)*v11);
      }
    }
    uint64_t v26 = v37;
    uint64_t v37 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v5);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    goto LABEL_44;
  }
LABEL_63:
  if (v39) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v39, v5);
  }
  uint64_t result = v40;
  char v40 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1994081CC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, WTF::StringImpl *a15, WTF::StringImpl *a16, WTF::StringImpl **a17, WTF::StringImpl *a18, uint64_t a19)
{
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (a17) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a17, a2);
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::setPushAndNotificationsEnabledForOrigin(WebPushD::PushClientConnection &,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA0C8C0;
  uint64_t v3 = a1[10];
  a1[10] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  id v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::setPushAndNotificationsEnabledForOrigin(WebPushD::PushClientConnection &,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA0C8C0;
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  id v5 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::setPushAndNotificationsEnabledForOrigin(WebPushD::PushClientConnection &,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 16) + 16)) {
    return WebPushD::PushService::setPushesEnabledForSubscriptionSetAndOrigin(*(unsigned int **)(*(void *)(a1 + 16) + 16), a1 + 32, a1 + 64, *(unsigned __int8 *)(a1 + 72), (uint64_t *)(a1 + 80));
  }
  else {
    return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 80));
  }
}

uint64_t WTF::Deque<WebPushD::WebPushDaemon::PendingPushMessage,0ul>::append<WebPushD::WebPushDaemon::PendingPushMessage>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)a1)
  {
    if (v4 + 1 != *(void *)a1) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 24);
  if (!v4)
  {
    if (v5)
    {
      uint64_t v4 = 0;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v4 == v5 - 1)
  {
LABEL_9:
    WTF::Deque<WebPushD::WebPushDaemon::PendingPushMessage,0ul>::expandCapacity(a1);
    uint64_t v4 = *(void *)(a1 + 8);
  }
LABEL_10:
  uint64_t v6 = *(void *)(a1 + 16) + (v4 << 8);
  uint64_t v7 = *a2;
  *a2 = 0;
  *(void *)uint64_t v6 = v7;
  uint64_t v8 = a2[1];
  a2[1] = 0;
  *(void *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 16) = *((_OWORD *)a2 + 1);
  uint64_t result = WebKit::WebPushMessage::WebPushMessage(v6 + 32, a2 + 4);
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10 == *(unsigned int *)(a1 + 24) - 1) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10 + 1;
  }
  *(void *)(a1 + 8) = v11;
  return result;
}

void sub_1994085A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = v2[1];
  v2[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *v2;
  WebPushD::WebClipCache *v2 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WTF::Deque<WebPushD::WebPushDaemon::PendingPushMessage,0ul>::expandCapacity(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 24);
  unint64_t v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF) {
    unint64_t v2 = 15;
  }
  if (v2 >= 0xFFFFFF)
  {
    __break(0xC471u);
    return;
  }
  uint64_t v4 = *(uint64_t **)(a1 + 16);
  int v5 = v2 + 1;
  uint64_t v6 = WTF::fastMalloc((WTF *)((v2 + 1) << 8));
  *(_DWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 16) = v6;
  unint64_t v7 = *(void *)(a1 + 8);
  if (*(void *)a1 <= v7)
  {
    WTF::VectorMover<false,WebPushD::WebPushDaemon::PendingPushMessage>::move(&v4[32 * *(void *)a1], &v4[32 * v7], v6 + (*(void *)a1 << 8));
    if (!v4) {
      return;
    }
  }
  else
  {
    WTF::VectorMover<false,WebPushD::WebPushDaemon::PendingPushMessage>::move(v4, &v4[32 * v7], v6);
    uint64_t v8 = *(void *)a1 - v1 + *(unsigned int *)(a1 + 24);
    WTF::VectorMover<false,WebPushD::WebPushDaemon::PendingPushMessage>::move(&v4[32 * *(void *)a1], &v4[32 * v1], *(void *)(a1 + 16) + (v8 << 8));
    *(void *)a1 = v8;
    if (!v4) {
      return;
    }
  }
  if (*(uint64_t **)(a1 + 16) == v4)
  {
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }

  WTF::fastFree((WTF *)v4, v9);
}

void WTF::VectorMover<false,WebPushD::WebPushDaemon::PendingPushMessage>::move(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a3 + 32;
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      *(void *)(v5 - 32) = v6;
      uint64_t v7 = v4[1];
      v4[1] = 0;
      *(void *)(v5 - 24) = v7;
      *(_OWORD *)(v5 - 16) = *((_OWORD *)v4 + 1);
      WebKit::WebPushMessage::WebPushMessage(v5, v4 + 4);
      WebPushD::WebPushDaemon::PendingPushMessage::~PendingPushMessage((WebPushD::WebPushDaemon::PendingPushMessage *)v4, v8);
      v5 += 256;
      v4 += 32;
    }
    while (v4 != a2);
  }
}

void sub_19940876C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *(WTF::StringImpl **)(v2 - 24);
  *(void *)(v2 - 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(WTF::StringImpl **)(v2 - 32);
  *(void *)(v2 - 32) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::injectEncryptedPushMessageForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA0C8E8;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::injectEncryptedPushMessageForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA0C8E8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::injectEncryptedPushMessageForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(v2 + 16))
  {
    WTF::String::utf8();
    if (v17)
    {
      uint64_t v3 = (char *)v17 + 16;
      uint64_t v4 = *((void *)v17 + 1);
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v3 = 0;
    }
    uint64_t v5 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v3 length:v4];
    uint64_t v6 = (void *)[MEMORY[0x1E4F28D90] JSONObjectWithData:v5 options:0 error:0];
    if (v6 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      uint64_t v7 = *(unsigned int **)(v2 + 16);
      uint64_t v8 = [v6 objectForKeyedSubscript:@"topic"];
      uint64_t v9 = (void *)[v6 objectForKeyedSubscript:@"userInfo"];
      uint64_t v10 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = 0;
      uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v11 = &unk_1EEA0C910;
      v11[1] = v10;
      unint64_t v16 = v11;
      WebPushD::PushService::didReceivePushMessage(v7, v8, v9, (uint64_t *)&v16);
      uint64_t v13 = (uint64_t)v16;
      unint64_t v16 = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
    }
    else
    {
      WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 24));
    }
    if (v5) {
      CFRelease(v5);
    }
    uint64_t result = v17;
    unint64_t v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1) {
        return (WTF *)WTF::fastFree(result, v12);
      }
      else {
        --*(_DWORD *)result;
      }
    }
  }
  else
  {
    unint64_t v15 = (uint64_t *)(a1 + 24);
    return (WTF *)WTF::CompletionHandler<void ()(BOOL)>::operator()(v15);
  }
  return result;
}

void sub_199408AD8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 1) {
      WTF::fastFree(a10, a2);
    }
    else {
      --*(_DWORD *)a10;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::injectEncryptedPushMessageForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA0C910;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::injectEncryptedPushMessageForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA0C910;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::injectEncryptedPushMessageForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::silentPushTimerFired(void)::$_0,void,unsigned int>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA0C938;
  uint64_t v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::silentPushTimerFired(void)::$_0,void,unsigned int>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA0C938;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::silentPushTimerFired(void)::$_0,void,unsigned int>::call(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB3583C0;
  uint64_t result = (WTF::StringImpl *)os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT);
  if (result)
  {
    WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v12, (WebCore::PushSubscriptionSetIdentifier *)(a1 + 16));
    WTF::String::utf8();
    uint64_t v6 = v13;
    WTF::String::utf8();
    uint64_t v7 = (char *)v6 + 16;
    if (!v6) {
      uint64_t v7 = 0;
    }
    *(_DWORD *)buf = 136446723;
    if (v11) {
      uint64_t v8 = (char *)v11 + 16;
    }
    else {
      uint64_t v8 = 0;
    }
    unint64_t v15 = v7;
    __int16 v16 = 2085;
    unint64_t v17 = v8;
    __int16 v18 = 1024;
    int v19 = a2;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "showNotification not called in time for %{public}s (origin = %{sensitive}s), silent push count is now %u", buf, 0x1Cu);
    if (v11)
    {
      if (*(_DWORD *)v11 == 1) {
        WTF::fastFree(v11, v9);
      }
      else {
        --*(_DWORD *)v11;
      }
    }
    uint64_t v10 = v13;
    uint64_t v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1) {
        WTF::fastFree(v10, v9);
      }
      else {
        --*(_DWORD *)v10;
      }
    }
    uint64_t result = v12;
    uint64_t v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_199408F68(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getPushTopicsForTesting(WebPushD::PushClientConnection &,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EEA0C960;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getPushTopicsForTesting(WebPushD::PushClientConnection &,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA0C960;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getPushTopicsForTesting(WebPushD::PushClientConnection &,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v3 + 8) + 40))(v8);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(*(void *)(v2 + 16) + 8) + 48))(v7);
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()((uint64_t *)(a1 + 16), v8, v7);
  }
  else
  {
    v8[0] = 0;
    v8[1] = 0;
    v7[0] = 0;
    v7[1] = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()((uint64_t *)(a1 + 16), v8, v7);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v4);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v5);
}

void sub_199409198(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v12);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::subscribeToPushService(WebPushD::PushClientConnection &,WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EEA0C988;
  uint64_t v3 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *(WTF::StringImpl **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(WTF::StringImpl **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  uint64_t v2 = (WTF *)WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::subscribeToPushService(WebPushD::PushClientConnection &,WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)> &&)::$_0,void>::~CallableWrapper(a1, a2);

  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::subscribeToPushService(WebPushD::PushClientConnection &,WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)> &&)::$_0,void>::call(uint64_t *a1)
{
  if (*(void *)(a1[2] + 16))
  {
    unint64_t v1 = (WebCore::PushSubscriptionSetIdentifier *)(a1 + 4);
    uint64_t v2 = (WTF::String *)(a1 + 8);
    uint64_t v3 = (uint64_t)(a1 + 9);
    uint64_t v4 = a1 + 11;
    uint64_t v5 = *(void *)(a1[2] + 16);
    return WebPushD::PushService::subscribe(v5, v1, v2, v3, v4);
  }
  else
  {
    uint64_t v7 = a1 + 11;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8[0] = 8;
    int v9 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)>::operator()(v7);
    return ((uint64_t (*)(char *, char *))off_1EEA0C5C0[v9])(&v10, v8);
  }
}

void sub_199409398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  if (a19 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EEA0C5C0[a19])(v19 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::unsubscribeFromPushService(WebPushD::PushClientConnection &,WTF::URL const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA0C9B0;
  uint64_t v3 = a1[11];
  a1[11] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::unsubscribeFromPushService(WebPushD::PushClientConnection &,WTF::URL const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA0C9B0;
  uint64_t v3 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::unsubscribeFromPushService(WebPushD::PushClientConnection &,WTF::URL const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)> &&)::$_0,void>::call(void *a1)
{
  if (*(void *)(a1[2] + 16))
  {
    uint64_t v1 = (uint64_t)(a1 + 4);
    uint64_t v2 = (_DWORD **)(a1 + 8);
    uint64_t v3 = a1[9];
    uint64_t v4 = a1[10];
    uint64_t v5 = a1 + 11;
    uint64_t v6 = *(void *)(a1[2] + 16);
    return WebPushD::PushService::unsubscribe(v6, v1, v2, v3, v4, v5);
  }
  else
  {
    uint64_t v8 = a1 + 11;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9[0] = 8;
    int v10 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)>::operator()(v8);
    return ((uint64_t (*)(char *, char *))off_1EEA0C5D0[v10])(&v11, v9);
  }
}

void sub_199409650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  if (a11 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EEA0C5D0[a11])(v11 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getPushSubscription(WebPushD::PushClientConnection &,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA0C9D8;
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getPushSubscription(WebPushD::PushClientConnection &,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA0C9D8;
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getPushSubscription(WebPushD::PushClientConnection &,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 16);
  if (v2)
  {
    return WebPushD::PushService::getSubscription(v2, a1 + 32, (_DWORD **)(a1 + 64), (uint64_t *)(a1 + 72));
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5[0] = 8;
    int v6 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)>::operator()((uint64_t *)(a1 + 72));
    return ((uint64_t (*)(char *, char *))off_1EEA0C5E0[v6])(&v4, v5);
  }
}

void sub_199409948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  if (a26 != -1) {
    ((void (*)(char *, uint64_t))off_1EEA0C5E0[a26])(&a13, v26);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::incrementSilentPushCount(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA0CA00;
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::incrementSilentPushCount(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA0CA00;
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::incrementSilentPushCount(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::call(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 16) + 16)) {
    return WebPushD::PushService::incrementSilentPushCount(*(unsigned int **)(*(void *)(a1 + 16) + 16), (WTF::StringImpl **)(a1 + 32), (WTF::StringImpl **)(a1 + 64), (uint64_t *)(a1 + 72));
  }
  else {
    return WTF::CompletionHandler<void ()>::operator()((uint64_t *)(a1 + 72));
  }
}

void *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::removeAllPushSubscriptions(WebPushD::PushClientConnection &,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA0CA28;
  uint64_t v3 = a1[8];
  a1[8] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::removeAllPushSubscriptions(WebPushD::PushClientConnection &,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA0CA28;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::removeAllPushSubscriptions(WebPushD::PushClientConnection &,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(unsigned int **)(*(void *)(a1 + 16) + 16);
  if (v1)
  {
    uint64_t v2 = (WebCore::PushSubscriptionSetIdentifier *)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3 && *(_DWORD *)(v3 + 4))
    {
      char v4 = (uint64_t *)(a1 + 64);
      uint64_t v5 = *(unsigned int **)(*(void *)(a1 + 16) + 16);
      return WebPushD::PushService::removeRecordsForSubscriptionSet(v5, v2, v4);
    }
    else
    {
      if (*(_OWORD *)(a1 + 48) == 0)
      {
        char v8 = 0;
        LOBYTE(v9) = 0;
      }
      else
      {
        long long v9 = *(_OWORD *)(a1 + 48);
        char v8 = 1;
      }
      char v10 = v8;
      return (unsigned int *)WebPushD::PushService::removeRecordsForBundleIdentifierAndDataStore(v1, (uint64_t)v2, (WTF::UUID *)&v9, (uint64_t *)(a1 + 64));
    }
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 64);
    return (unsigned int *)WTF::CompletionHandler<void ()>::operator()(v7);
  }
}

void *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::removePushSubscriptionsForOrigin(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA0CA50;
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::removePushSubscriptionsForOrigin(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA0CA50;
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::removePushSubscriptionsForOrigin(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::call(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 16) + 16)) {
    return WebPushD::PushService::removeRecordsForSubscriptionSetAndOrigin(*(unsigned int **)(*(void *)(a1 + 16) + 16), (WebCore::PushSubscriptionSetIdentifier *)(a1 + 32), (_DWORD **)(a1 + 64), (uint64_t *)(a1 + 72));
  }
  else {
    return (unsigned int *)WTF::CompletionHandler<void ()>::operator()((uint64_t *)(a1 + 72));
  }
}

void *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::setPublicTokenForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA0CA78;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::setPublicTokenForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA0CA78;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::setPublicTokenForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 16);
  if (v2)
  {
    uint64_t result = WTF::String::utf8();
    if (v11)
    {
      char v4 = (WTF *)*((void *)v11 + 1);
      uint64_t v12 = 0;
      LODWORD(v13) = 0;
      HIDWORD(v13) = v4;
      if (v4)
      {
        if ((unint64_t)v4 >> 32)
        {
          __break(0xC471u);
          return result;
        }
        uint64_t v5 = (WTF *)WTF::fastMalloc(v4);
        int v6 = (char *)v11 + 16;
        LODWORD(v13) = v4;
        uint64_t v12 = v5;
        do
        {
          char v7 = *v6++;
          *(unsigned char *)uint64_t v5 = v7;
          uint64_t v5 = (WTF *)((char *)v5 + 1);
          char v4 = (WTF *)((char *)v4 - 1);
        }
        while (v4);
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    (*(void (**)(void, WTF **))(**(void **)(v2 + 8) + 112))(*(void *)(v2 + 8), &v12);
    long long v9 = v12;
    if (v12)
    {
      uint64_t v12 = 0;
      LODWORD(v13) = 0;
      WTF::fastFree(v9, v8);
    }
    if (v11)
    {
      if (*(_DWORD *)v11 == 1) {
        WTF::fastFree(v11, v8);
      }
      else {
        --*(_DWORD *)v11;
      }
    }
    return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 24));
  }
  else
  {
    char v10 = (uint64_t *)(a1 + 24);
    return WTF::CompletionHandler<void ()(void)>::operator()(v10);
  }
}

void sub_19940A278(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, WTF *a11, int a12)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 1) {
      WTF::fastFree(a10, a2);
    }
    else {
      --*(_DWORD *)a10;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPushDaemonMain(WebKit *this, char *const *a2, char **a3)
{
  int v4 = (int)this;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (WTF *)MEMORY[0x199741920](this, a2, a3);
  WTF::initializeMainThread(v5);
  int v6 = (void *)os_transaction_create();
  _CFPrefsSetDirectModeEnabled();
  if ((_set_user_dir_suffix() & 1) == 0)
  {
    int v30 = *__error();
    uint64_t v31 = strerror(v30);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = v31;
      __int16 v45 = 1024;
      *(_DWORD *)uint64_t v46 = v30;
      _os_log_error_impl(&dword_1985F2000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed to set temp dir: %{public}s (%d)", buf, 0x12u);
    }
    exit(1);
  }
  char v7 = (WTF *)NSTemporaryDirectory();
  WTF::logChannels(v7);
  LOBYTE(v42) = 0;
  char v43 = 0;
  char v8 = (WebCore *)WTF::LogChannels::initializeLogChannelsIfNecessary();
  WebCore::logChannels(v8);
  LOBYTE(v40) = 0;
  char v41 = 0;
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  long long v9 = &WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key;
  {
LABEL_56:
    WebKit::LogChannels::LogChannels((WebKit::LogChannels *)&WebKit::logChannels(void)::logChannels);
    *((unsigned char *)v9 + 3824) = 1;
  }
  LOBYTE(v38) = 0;
  char v39 = 0;
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  if (v39)
  {
    uint64_t v11 = v38;
    uint64_t v38 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  char v12 = 0;
  int v37 = 0;
  uint64_t v13 = "com.apple.webkit.webpushd.service";
  long long v9 = (uint64_t *)"com.apple.aps.webkit.webpushd.incoming-push";
  uint64_t v14 = (const char **)MEMORY[0x1E4F149E8];
  while (1)
  {
    while (1)
    {
      int v15 = getopt_long(v4, a2, "", (const option *)&WebKit::WebPushDaemonMain(int,char **)::options, &v37);
      if (v15 != 109) {
        break;
      }
      uint64_t v13 = *v14;
    }
    if (v15 == -1) {
      break;
    }
    if (v15 == 102)
    {
      char v12 = 1;
    }
    else
    {
      if (v15 != 112)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unknown option: %c\n", *MEMORY[0x1E4F14A00]);
        WTF::exitProcess((WTF *)1);
        __break(1u);
        goto LABEL_56;
      }
      long long v9 = (uint64_t *)*v14;
    }
  }
  int v16 = _os_feature_enabled_impl();
  if (v16) {
    unint64_t v17 = "com.apple.developer.web-browser-engine.networking";
  }
  else {
    unint64_t v17 = "com.apple.private.webkit.webpush";
  }
  if (v16) {
    uint64_t v18 = 50;
  }
  else {
    uint64_t v18 = 33;
  }
  WebKit::startListeningForMachServiceConnections(v13, (uint64_t)v17, v18, (uint64_t)WebPushD::connectionAdded, (uint64_t)WebPushD::connectionRemoved, (uint64_t)WebPushD::connectionEventHandler);
  if (v12)
  {
    {
      WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    }
    WebPushD::WebPushDaemon::startMockPushService((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
  }
  else
  {
    id v19 = [(NSArray *)NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1) objectAtIndexedSubscript:0];
    MEMORY[0x19972EAD0](&v36, v19);
    *(void *)buf = "WebKit";
    *(_DWORD *)&uint8_t buf[8] = 6;
    LOBYTE(v45) = 1;
    *(void *)&v46[2] = "WebPush";
    int v47 = 7;
    char v48 = 1;
    char v49 = "PushDatabase.db";
    int v50 = 15;
    char v51 = 1;
    WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v33, (long long *)buf, 3uLL);
    WTF::FileSystemImpl::pathByAppendingComponents();
    uint64_t v21 = v33;
    if (v33)
    {
      __int16 v33 = 0;
      int v34 = 0;
      WTF::fastFree(v21, v20);
    }
    *(void *)buf = "WebKit";
    *(_DWORD *)&uint8_t buf[8] = 6;
    LOBYTE(v45) = 1;
    *(void *)&v46[2] = "WebPush";
    int v47 = 7;
    char v48 = 1;
    char v49 = "WebClipCache.plist";
    int v50 = 18;
    char v51 = 1;
    WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v33, (long long *)buf, 3uLL);
    WTF::FileSystemImpl::pathByAppendingComponents();
    uint64_t v23 = v33;
    if (v33)
    {
      __int16 v33 = 0;
      int v34 = 0;
      WTF::fastFree(v23, v22);
    }
    {
      WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    }
    WTF::String::String((WTF::String *)buf, (const char *)v9);
    WebPushD::WebPushDaemon::startPushService((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon, (const WTF::String *)buf, &v35, &v32);
    long long v25 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v24);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    uint64_t v26 = v32;
    int v32 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v24);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    long long v27 = v35;
    uint64_t v35 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, v24);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    long long v28 = v36;
    __int16 v36 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::destroy(v28, v24);
        if (!v6) {
          goto LABEL_49;
        }
        goto LABEL_48;
      }
      *(_DWORD *)v28 -= 2;
    }
  }
  if (v6) {
LABEL_48:
  }

LABEL_49:
  CFRunLoopRun();
  return 0;
}

void sub_19940A898(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, int a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (v23) {

  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::connectionAdded(uint64_t a1)
{
  uint64_t v1 = a1;
  {
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    uint64_t v1 = a1;
  }

  return WebPushD::WebPushDaemon::connectionAdded(WebPushD::WebPushDaemon::singleton(void)::daemon, v1);
}

void WebPushD::connectionRemoved(uint64_t a1)
{
  uint64_t v1 = a1;
  {
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    uint64_t v1 = a1;
  }

  WebPushD::WebPushDaemon::connectionRemoved(WebPushD::WebPushDaemon::singleton(void)::daemon, v1);
}

void WebPushD::connectionEventHandler(id a1)
{
  id v1 = a1;
  {
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    id v1 = a1;
  }

  WebPushD::WebPushDaemon::connectionEventHandler(WebPushD::WebPushDaemon::singleton(void)::daemon, v1);
}

void *WebPushTool::Connection::create@<X0>(int a1@<W0>, _DWORD **a2@<X1>, _DWORD **a3@<X2>, void *a4@<X8>)
{
  char v8 = (void *)WTF::fastMalloc((WTF *)0x38);
  long long v9 = *a2;
  if (v9) {
    *v9 += 2;
  }
  uint64_t v14 = v9;
  char v10 = *a3;
  if (v10)
  {
    *v10 += 2;
    uint64_t v13 = v10;
    uint64_t result = WebPushTool::Connection::Connection(v8, a1, &v14, &v13);
    *a4 = result;
    if (*v10 == 2)
    {
      uint64_t result = (void *)WTF::StringImpl::destroy((WTF::StringImpl *)v10, v12);
      if (!v9) {
        return result;
      }
    }
    else
    {
      *v10 -= 2;
      if (!v9) {
        return result;
      }
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = WebPushTool::Connection::Connection(v8, a1, &v14, &v13);
    *a4 = result;
    if (!v9) {
      return result;
    }
  }
  if (*v9 == 2)
  {
    return (void *)WTF::StringImpl::destroy((WTF::StringImpl *)v9, v12);
  }
  else
  {
    *v9 -= 2;
  }
  return result;
}

void *WebPushTool::Connection::Connection(void *result, int a2, _DWORD **a3, _DWORD **a4)
{
  *uint64_t result = &unk_1EEA0CAA0;
  result[1] = 0;
  int v4 = *a3;
  if (*a3) {
    *v4 += 2;
  }
  result[2] = v4;
  uint64_t v5 = *a4;
  if (*a4) {
    *v5 += 2;
  }
  result[3] = v5;
  result[4] = 0;
  int v6 = "com.apple.webkit.webpushd.service";
  if (a2) {
    int v6 = "org.webkit.webpushtestdaemon.service";
  }
  uint64_t v7 = 34;
  if (a2) {
    uint64_t v7 = 37;
  }
  result[5] = v6;
  result[6] = v7;
  return result;
}

WTF *WebPushTool::Connection::connectToService(uint64_t a1, int a2)
{
  mach_service = xpc_connection_create_mach_service(*(const char **)(a1 + 40), MEMORY[0x1E4F14428], 0);
  uint64_t v5 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = mach_service;
  if (v5)
  {
    CFRelease(v5);
    mach_service = *(_xpc_connection_s **)(a1 + 32);
  }
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3321888768;
  handler[2] = ___ZN11WebPushTool10Connection16connectToServiceENS_21WaitForServiceToExistE_block_invoke;
  handler[3] = &__block_descriptor_33_e8_32c83_ZTSKZN11WebPushTool10Connection16connectToServiceENS_21WaitForServiceToExistEE3__0_e33_v16__0__NSObject_OS_xpc_object__8l;
  xpc_connection_set_event_handler(mach_service, handler);
  if (a2 && !WebPushTool::maybeConnectToService(*(WebPushTool **)(a1 + 40), v6))
  {
    printf("Waiting for service '%s' to be available\n", *(const char **)(a1 + 40));
    do
      usleep(0x3E8u);
    while (!WebPushTool::maybeConnectToService(*(WebPushTool **)(a1 + 40), v7));
  }
  printf("Connecting to service '%s'\n", *(const char **)(a1 + 40));
  xpc_connection_activate(*(xpc_connection_t *)(a1 + 32));
  return WebPushTool::Connection::sendAuditToken((WTF::StringImpl **)a1);
}

uint64_t ___ZN11WebPushTool10Connection16connectToServiceENS_21WaitForServiceToExistE_block_invoke(uint64_t a1, void *a2)
{
  if (a2 == (void *)MEMORY[0x1E4F14528] || a2 == (void *)MEMORY[0x1E4F14520]) {
    return fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unexpected XPC connection issue: %s\n", (const char *)objc_msgSend((id)objc_msgSend(a2, "debugDescription"), "UTF8String"));
  }
  uint64_t result = 88;
  __break(0xC471u);
  return result;
}

uint64_t WebPushTool::maybeConnectToService(WebPushTool *this, const char *a2)
{
  mach_port_t special_port = 0;
  task_get_special_port(*MEMORY[0x1E4F14960], 4, &special_port);
  mach_port_t sp = 0;
  if (bootstrap_look_up(special_port, (const char *)this, &sp)) {
    return 0;
  }
  else {
    return sp;
  }
}

WTF *WebPushTool::Connection::sendAuditToken(WTF::StringImpl **this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)task_info_out = 0u;
  long long v18 = 0u;
  mach_msg_type_number_t task_info_outCnt = 8;
  if (task_info(*MEMORY[0x1E4F14960], 0xFu, task_info_out, &task_info_outCnt)) {
    return (WTF *)puts("Unable to get audit token to send");
  }
  char v22 = 0;
  *(_OWORD *)id v19 = 0u;
  *(_OWORD *)uint64_t v20 = 0u;
  char v21 = 0;
  WTF::String::operator=((uint64_t *)v20, this + 2);
  WTF::String::operator=((uint64_t *)&v20[1], this + 3);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v3 = 32;
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v14, (WTF::FastMalloc *)0x20);
  uint64_t v5 = v14;
  HIDWORD(v15) = 32;
  long long v6 = v18;
  *(_OWORD *)uint64_t v14 = *(_OWORD *)task_info_out;
  *((_OWORD *)v5 + 1) = v6;
  uint64_t v7 = v19[0];
  if (v19[0])
  {
    v19[0] = 0;
    LODWORD(v19[1]) = 0;
    WTF::fastFree(v7, v4);
    uint64_t v5 = v14;
    int v3 = HIDWORD(v15);
  }
  v19[0] = v5;
  unsigned int v8 = v15;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  v19[1] = (WTF *)__PAIR64__(v3, v8);
  uint64_t v13 = v19;
  IPC::MessageSender::sendWithoutUsingIPCConnection<Messages::PushClientConnection::InitializeConnection>((uint64_t)this, (uint64_t *)&v13);
  char v10 = v14;
  if (v14)
  {
    uint64_t v14 = 0;
    LODWORD(v15) = 0;
    WTF::fastFree(v10, v9);
  }
  uint64_t v11 = v20[1];
  v20[1] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  char v12 = v20[0];
  v20[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v9);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t result = v19[0];
  if (v19[0])
  {
    v19[0] = 0;
    LODWORD(v19[1]) = 0;
    return (WTF *)WTF::fastFree(result, v9);
  }
  return result;
}

void sub_19940B060(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, WTF::StringImpl *a19, WTF::StringImpl *a20)
{
  if (a10) {
    WTF::fastFree(a10, a2);
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  if (a17) {
    WTF::fastFree(a17, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::InjectPushMessageForTesting,WTF::CompletionHandler<void ()(WTF::String)>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 677;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  long long v18 = v7;
  IPC::ArgumentCoder<WebKit::WebPushD::PushMessageForTesting,void>::encode(v7, *a2);
  uint64_t v8 = *a3;
  *a3 = 0;
  long long v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *long long v9 = &unk_1EEA0CB50;
  v9[1] = v8;
  unint64_t v17 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v18, &v17);
  char v12 = v17;
  unint64_t v17 = 0;
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  uint64_t v13 = v18;
  long long v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v15, v16);
  }
  return v11;
}

void sub_19940B254(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebPushTool::Connection::getPushPermissionState(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  puts("Getting push permission state");
  WTF::URL::URL((uint64_t)v9, a2);
  WebCore::SecurityOriginData::fromURL(v12, (WebCore::SecurityOriginData *)v9, v6);
  char v10 = v12;
  IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushPermissionState,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)>>(a1, (uint64_t *)&v10, a3);
  if (v13 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_13[v13])(&v11, v12);
  }
  int v13 = -1;
  uint64_t result = v9[0];
  v9[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19940B3E0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22)
{
  if (a22 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_13[a22])(&a18, &a19);
  }
  a22 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebPushTool::Connection::requestPushPermission(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  WTF::String::utf8();
  if (v12[0]) {
    uint64_t v6 = (char *)v12[0] + 16;
  }
  else {
    uint64_t v6 = 0;
  }
  printf("Request push permission state for %s\n", v6);
  uint64_t v8 = v12[0];
  v12[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1) {
      WTF::fastFree(v8, v7);
    }
    else {
      --*(_DWORD *)v8;
    }
  }
  WTF::URL::URL((uint64_t)v12, a2);
  WebCore::SecurityOriginData::fromURL(v15, (WebCore::SecurityOriginData *)v12, v9);
  int v13 = v15;
  IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RequestPushPermission,WTF::CompletionHandler<void ()(BOOL)>>(a1, (uint64_t *)&v13, a3);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_13[v16])(&v14, v15);
  }
  int v16 = -1;
  uint64_t result = v12[0];
  v12[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19940B588(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_13[a24])(&a20, &a21);
  }
  a24 = -1;
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushTool::Connection::performSendWithoutUsingIPCConnection(uint64_t a1, IPC::Encoder *a2)
{
  WebPushTool::messageDictionaryFromEncoder(&message, a2);
  int v3 = *(_xpc_connection_s **)(a1 + 32);
  xpc_object_t v4 = message;
  xpc_connection_send_message(v3, message);
  if (v4) {

  }
  return 1;
}

void sub_19940B640(_Unwind_Exception *exception_object)
{
  if (v1) {

  }
  _Unwind_Resume(exception_object);
}

void WebPushTool::messageDictionaryFromEncoder(void *a1, IPC::Encoder *a2)
{
  WebKit::encoderToXPCData(a2, &value);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  *a1 = v3;
  xpc_dictionary_set_uint64(v3, "protocol version", 4uLL);
  id v4 = value;
  xpc_dictionary_set_value(v3, "encoded message", value);
  if (v4)
  {
  }
}

void sub_19940B6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {

  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushTool::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(uint64_t a1, IPC::Encoder *a2, uint64_t *a3)
{
  WebPushTool::messageDictionaryFromEncoder(&v10, a2);
  uint64_t v5 = *(_xpc_connection_s **)(a1 + 32);
  uint64_t v6 = v10;
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v8 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  void *v8 = MEMORY[0x1E4F14398];
  v8[1] = 50331650;
  uint64_t v8[2] = WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WebPushTool::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0>(WebPushTool::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0)::{lambda(void *,NSObject  {objcproto13OS_xpc_object}*)#1}::__invoke;
  v8[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WebPushTool::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0>(WebPushTool::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0)::descriptor;
  v8[4] = v7;
  xpc_connection_send_message_with_reply(v5, v6, MEMORY[0x1E4F14428], v8);
  _Block_release(v8);
  if (v6) {

  }
  return 1;
}

void sub_19940B7F0(_Unwind_Exception *a1)
{
  _Block_release(v2);
  if (v1) {

  }
  _Unwind_Resume(a1);
}

void WebPushTool::Connection::~Connection(WebPushTool::Connection *this, WTF::StringImpl *a2)
{
  WebPushTool::Connection::~Connection(this, a2);

  WTF::fastFree(v2, v3);
}

{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  xpc_object_t v3 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    CFRelease(v3);
  }
  id v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

uint64_t WebPushTool::Connection::messageSenderConnection(WebPushTool::Connection *this)
{
  return 0;
}

uint64_t WebPushTool::Connection::messageSenderDestinationID(WebPushTool::Connection *this)
{
  return 0;
}

uint64_t WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WebPushTool::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0>(WebPushTool::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

IPC::Decoder *WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WebPushTool::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0>(WebPushTool::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0)::{lambda(void *,NSObject  {objcproto13OS_xpc_object}*)#1}::__invoke(uint64_t a1, id a2)
{
  xpc_object_t v3 = (uint64_t *)(a1 + 32);
  if (object_getClass(a2) == (Class)MEMORY[0x1E4F14590] && xpc_dictionary_get_uint64(a2, "protocol version") == 4)
  {
    size_t length = 0;
    data = xpc_dictionary_get_data(a2, "encoded message", &length);
    v9[0] = 0;
    v9[1] = 0;
    IPC::Decoder::create((WTF *)length, data, v9, &v10);
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v5);
    WTF::CompletionHandler<void ()(IPC::Decoder *)>::operator()(v3);
    uint64_t result = v10;
    char v10 = 0;
    if (result)
    {
      IPC::Decoder::~Decoder(result);
      return (IPC::Decoder *)WTF::fastFree(v7, v8);
    }
  }
  else
  {
    return (IPC::Decoder *)WTF::CompletionHandler<void ()(IPC::Decoder *)>::operator()(v3);
  }
  return result;
}

void sub_19940B99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, IPC::Decoder *a11)
{
  if (a11)
  {
    IPC::Decoder::~Decoder(a11);
    WTF::fastFree(v12, v13);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::InjectPushMessageForTesting,WTF::CompletionHandler<void ()(WTF::String)>>(Messages::PushClientConnection::InjectPushMessageForTesting &&,WTF::CompletionHandler<void ()(WTF::String)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(WTF::String)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA0CB50;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::InjectPushMessageForTesting,WTF::CompletionHandler<void ()(WTF::String)>>(Messages::PushClientConnection::InjectPushMessageForTesting &&,WTF::CompletionHandler<void ()(WTF::String)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(WTF::String)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA0CB50;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::InjectPushMessageForTesting,WTF::CompletionHandler<void ()(WTF::String)>>(Messages::PushClientConnection::InjectPushMessageForTesting &&,WTF::CompletionHandler<void ()(WTF::String)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(WTF::String)> &&>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = v7;
      uint64_t v7 = 0;
      long long v9 = v3;
      WTF::CompletionHandler<void ()(WTF::String)>::operator()(v2, &v9);
      uint64_t result = v9;
      long long v9 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      if (v8)
      {
        uint64_t result = v7;
        uint64_t v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::PushClientConnection::InjectPushMessageForTesting,WTF::CompletionHandler<void ()(WTF::String)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::PushClientConnection::InjectPushMessageForTesting,WTF::CompletionHandler<void ()(WTF::String)>>(v6);
  }
  return result;
}

void sub_19940BC18(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::PushClientConnection::InjectPushMessageForTesting,WTF::CompletionHandler<void ()(WTF::String)>>(uint64_t *a1)
{
  uint64_t v3 = 0;
  WTF::CompletionHandler<void ()(WTF::String)>::operator()(a1, &v3);
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19940BCC8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPushToolMain(WebKit *this, int a2, char **a3)
{
  WTF::initializeMainThread(this);
  CFTypeRef v6 = CFRetain(@"com.apple.WebKit.TestWebKitAPI");
  uint64_t v7 = MEMORY[0x199741920](v6);
  char v8 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28F80], "processInfo"), "arguments");
  if ([v8 count] == 1)
  {
    printUsageAndTerminate(&cfstr_NoArgumentsPro.isa);
    goto LABEL_83;
  }
  xpc_object_t v4 = (xpc_object_t)objc_msgSend((id)objc_msgSend(v8, "subarrayWithRange:", 1, objc_msgSend(v8, "count") - 1), "objectEnumerator");
  context = (void *)v7;
  long long v9 = @"com.apple.WebKit.TestWebKitAPI";
  char v10 = (void *)[v4 nextObject];
  char v11 = 0;
  char v12 = 0;
  char v41 = 0;
  char v39 = v48;
  uint64_t v5 = @"--bundleIdentifier";
  char v13 = 1;
  while (v10)
  {
    if ([v10 isEqualToString:@"--production"])
    {
      char v13 = 0;
LABEL_8:
      char v14 = v11;
      goto LABEL_9;
    }
    if ([v10 isEqualToString:@"--development"])
    {
      char v13 = 1;
      goto LABEL_8;
    }
    if ([v10 isEqualToString:@"--bundleIdentifier"])
    {
      uint64_t v15 = (__CFString *)[v4 nextObject];
      uint64_t v3 = v15;
      if (v15) {
        CFRetain(v15);
      }
      if (v9) {
        CFRelease(v9);
      }
      char v14 = v11;
      long long v9 = v3;
    }
    else if ([v10 isEqualToString:@"--pushPartition"])
    {
      int v16 = (__CFString *)[v4 nextObject];
      uint64_t v3 = v16;
      if (v16) {
        CFRetain(v16);
      }
      if (v12) {
        CFRelease(v12);
      }
      char v14 = v11;
      char v12 = v3;
    }
    else
    {
      if ([v10 isEqualToString:@"host"])
      {
        char v41 = 1;
        goto LABEL_8;
      }
      if ([v10 isEqualToString:@"streamDebugMessages"])
      {
        execl("/usr/bin/log", "log", "stream", "--debug", "--info", "--process", "webpushd", v39);
        char v14 = v11;
      }
      else
      {
        if ([v10 isEqualToString:@"injectPushMessage"])
        {
          uint64_t v17 = [v4 nextObject];
          if (v17)
          {
            uint64_t v3 = (__CFString *)[MEMORY[0x1E4F1CB10] URLWithString:v17];
            if (v3)
            {
              uint64_t v18 = [v4 nextObject];
              if (v18)
              {
                v44[0] = 0;
                v44[1] = 0;
                MEMORY[0x19972E8A0](&v45, v3);
                MEMORY[0x19972EAD0](&v46, v18);
                char v47 = 0;
                v48[0] = 0;
                v48[136] = 0;
                operator new();
              }
            }
          }
          printUsageAndTerminate((NSString *)[NSString stringWithFormat:@"Invalid push arguments specified"]);
LABEL_83:
          __break(1u);
LABEL_84:
          CFRelease(v3);
          if (v4) {
            goto LABEL_85;
          }
LABEL_75:
          if (!v5) {
            goto LABEL_86;
          }
          goto LABEL_81;
        }
        if ([v10 isEqualToString:@"getPushPermissionState"])
        {
          MEMORY[0x19972EAD0](v44, [v4 nextObject]);
          char v14 = (void *)WTF::fastMalloc((WTF *)0x10);
          uint64_t v20 = &unk_1EEA0CBD0;
        }
        else
        {
          if (![v10 isEqualToString:@"requestPushPermission"])
          {
            printUsageAndTerminate((NSString *)[NSString stringWithFormat:@"Invalid option provided: %@", v10]);
            goto LABEL_83;
          }
          MEMORY[0x19972EAD0](v44, [v4 nextObject]);
          char v14 = (void *)WTF::fastMalloc((WTF *)0x10);
          uint64_t v20 = &unk_1EEA0CC28;
        }
        *char v14 = v20;
        char v21 = v44[0];
        if (v44[0]) {
          *(_DWORD *)v44[0] += 2;
        }
        v14[1] = v21;
        if (v11) {
          (*(void (**)(void *))(*v11 + 8))(v11);
        }
        char v22 = v44[0];
        v44[0] = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, v19);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
      }
    }
LABEL_9:
    char v11 = v14;
    char v10 = (void *)[v4 nextObject];
  }
  if (v41)
  {
    uint64_t v31 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "executablePath");
    int v32 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB10], "fileURLWithPath:isDirectory:", v31, 0), "URLByDeletingLastPathComponent");
    __int16 v33 = (void *)[v32 URLByAppendingPathComponent:@"webpushd"];
    if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:", objc_msgSend(v33, "path")) & 1) == 0)
    {
      NSLog(&cfstr_DaemonExecutab.isa, [v33 path]);
      goto LABEL_81;
    }
    if (v13) {
      int v34 = "org.webkit.webpushtestdaemon.service";
    }
    else {
      int v34 = "com.apple.webkit.webpushd.service";
    }
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v4, "_ManagedBy", "webpushtool");
    xpc_dictionary_set_string(v4, "Label", "org.webkit.webpushtestdaemon");
    xpc_dictionary_set_BOOL(v4, "LaunchOnlyOnce", 1);
    xpc_dictionary_set_BOOL(v4, "RootedSimulatorPath", 1);
    xpc_object_t v35 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v35, "DYLD_FRAMEWORK_PATH", (const char *)[v32 fileSystemRepresentation]);
    xpc_dictionary_set_string(v35, "DYLD_LIBRARY_PATH", (const char *)[v32 fileSystemRepresentation]);
    xpc_dictionary_set_value(v4, "EnvironmentVariables", v35);
    if (v35) {
      CFRelease(v35);
    }
    xpc_object_t v36 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_BOOL(v36, v34, 1);
    xpc_dictionary_set_value(v4, "MachServices", v36);
    if (v36) {
      CFRelease(v36);
    }
    xpc_object_t v37 = xpc_array_create(0, 0);
    xpc_array_set_string(v37, 0xFFFFFFFFFFFFFFFFLL, (const char *)objc_msgSend((id)objc_msgSend(v33, "path"), "fileSystemRepresentation"));
    xpc_array_set_string(v37, 0xFFFFFFFFFFFFFFFFLL, "--machServiceName");
    xpc_array_set_string(v37, 0xFFFFFFFFFFFFFFFFLL, v34);
    xpc_dictionary_set_value(v4, "ProgramArguments", v37);
    if (v37) {
      CFRelease(v37);
    }
    uint64_t v3 = (__CFString *)[objc_alloc(MEMORY[0x1E4F4B848]) initWithPlist:v4];
    v44[0] = 0;
    [(__CFString *)v3 submit:v44];
    uint64_t v5 = (__CFString *)v44[0];
    if (v44[0]) {
      NSLog(&cfstr_ErrorSettingUp.isa, v44[0]);
    }
    if (v3) {
      goto LABEL_84;
    }
    if (!v4) {
      goto LABEL_75;
    }
LABEL_85:
    CFRelease(v4);
    if (v5)
    {
LABEL_81:
      NSLog(&cfstr_FailedToRegist.isa);
      int v38 = 1;
    }
    else
    {
LABEL_86:
      NSLog(&cfstr_RegisteredWebp.isa);
      int v38 = 0;
    }
    exit(v38);
  }
  if (!v11)
  {
    printUsageAndTerminate(&cfstr_NothingToDo.isa);
    goto LABEL_83;
  }
  MEMORY[0x19972EAD0](&v43, v9);
  MEMORY[0x19972EAD0](&v42, v12);
  WebPushTool::Connection::create(v13 & 1, (_DWORD **)&v43, (_DWORD **)&v42, v44);
  long long v24 = v42;
  __int16 v42 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  long long v25 = v43;
  char v43 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v23);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  uint64_t v26 = v44[0];
  WebPushTool::Connection::connectToService((uint64_t)v44[0], 1);
  (*(void (**)(void *, WTF::StringImpl *))(*v11 + 16))(v11, v26);
  CFRunLoopRun();
  if (v44[0])
  {
    WebPushTool::Connection::~Connection(v44[0], v27);
    WTF::fastFree(v28, v29);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v9) {
    CFRelease(v9);
  }
  (*(void (**)(void *))(*v11 + 8))(v11);
  return 0;
}

void sub_19940C600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,WebPushTool::Connection *a21,WTF::StringImpl *a22,WTF::StringImpl *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,WTF::StringImpl *a28)
{
  if (v31) {
    CFRelease(v31);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t printUsageAndTerminate(NSString *a1)
{
  id v1 = (FILE **)MEMORY[0x1E4F143C8];
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s\n\n", [(NSString *)a1 UTF8String]);
  fwrite("Usage: webpushtool [options] verb [verb_args]\n", 0x2EuLL, 1uLL, *v1);
  fputc(10, *v1);
  fwrite("options is one or more of:\n", 0x1BuLL, 1uLL, *v1);
  fwrite("  --development\n", 0x10uLL, 1uLL, *v1);
  fwrite("    Connects to mach service \"org.webkit.webpushtestdaemon.service\" (Default)\n", 0x4EuLL, 1uLL, *v1);
  fwrite("  --production\n", 0xFuLL, 1uLL, *v1);
  fwrite("    Connects to mach service \"com.apple.webkit.webpushd.service\"\n", 0x41uLL, 1uLL, *v1);
  fwrite("  --bundleIdentifier <bundleIdentifier>\n", 0x28uLL, 1uLL, *v1);
  fwrite("    Sets connection config to use bundle identifier <bundleIdentifier>.\n", 0x48uLL, 1uLL, *v1);
  fwrite("  --pushPartition <partition>\n", 0x1EuLL, 1uLL, *v1);
  fwrite("    Sets connection config to use push partition <partition>.\n", 0x3EuLL, 1uLL, *v1);
  fputc(10, *v1);
  fwrite("verb is one of:\n", 0x10uLL, 1uLL, *v1);
  fwrite("  host\n", 7uLL, 1uLL, *v1);
  fwrite("    Dynamically registers the service with launchd so it is visible to other applications\n", 0x5AuLL, 1uLL, *v1);
  fwrite("    The service name of the registration depends on either the --development or --production option chosen\n", 0x6BuLL, 1uLL, *v1);
  fwrite("  streamDebugMessages\n", 0x16uLL, 1uLL, *v1);
  fwrite("    Stream debug messages from webpushd\n", 0x28uLL, 1uLL, *v1);
  fwrite("  injectPushMessage <scope URL> <message>\n", 0x2AuLL, 1uLL, *v1);
  fwrite("    Inject a test push message <message> to the provided --bundleIdentifier and --pushPartition with service worker scope <scope URL>\n", 0x86uLL, 1uLL, *v1);
  fwrite("  getPushPermissionState <scope URL>\n", 0x25uLL, 1uLL, *v1);
  fwrite("    Gets the permission state for the given service worker scope.\n", 0x42uLL, 1uLL, *v1);
  fwrite("  requestPushPermission <scope URL>\n", 0x24uLL, 1uLL, *v1);
  fwrite("    Requests permission state for the given service worker scope.\n", 0x42uLL, 1uLL, *v1);
  fputc(10, *v1);
  uint64_t v2 = WTF::exitProcess((WTF *)0xFFFFFFFFLL);
  return WebKit::WebPushD::PushMessageForTesting::PushMessageForTesting(v2, v3);
}

uint64_t WebKit::WebPushD::PushMessageForTesting::PushMessageForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  uint64_t v5 = a2[1];
  a2[1] = 0;
  *(void *)(a1 + 8) = v5;
  WTF::URL::URL(a1 + 16, a2 + 2);
  uint64_t v6 = a2[7];
  a2[7] = 0;
  *(void *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
  std::__optional_move_base<WebCore::NotificationPayload,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a1 + 72), (uint64_t)(a2 + 9));
  return a1;
}

void sub_19940CB20(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v5 = v2[7];
  v2[7] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *v3;
  *uint64_t v3 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = v2[1];
  v2[1] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  char v8 = *v2;
  uint64_t *v2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::InjectPushMessageVerb::~InjectPushMessageVerb(WebKit::InjectPushMessageVerb *this, WTF::StringImpl *a2)
{
  WebKit::InjectPushMessageVerb::~InjectPushMessageVerb(this, a2);

  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  *(void *)this = &unk_1EEA0CB78;
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 80, a2);
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v3);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
}

WTF::StringImpl *WebKit::InjectPushMessageVerb::run(WebKit::InjectPushMessageVerb *this, WebPushTool::Connection *a2)
{
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 1);
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  long long v25 = v4;
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  if (v5) {
    *(_DWORD *)v5 += 2;
  }
  uint64_t v26 = v5;
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 3);
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  long long v27 = v6;
  long long v7 = *((_OWORD *)this + 3);
  long long v28 = *((_OWORD *)this + 2);
  long long v29 = v7;
  char v8 = (WTF::StringImpl *)*((void *)this + 8);
  if (v8) {
    *(_DWORD *)v8 += 2;
  }
  uint64_t v30 = v8;
  char v31 = *((unsigned char *)this + 72);
  std::__optional_copy_base<WebCore::NotificationPayload,false>::__optional_copy_base[abi:sn180100](v32, (uint64_t)this + 80);
  char v10 = (WTF::StringImpl *)*((void *)a2 + 2);
  if (v10) {
    *(_DWORD *)v10 += 2;
  }
  char v11 = v25;
  long long v25 = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  char v12 = (WTF::StringImpl *)*((void *)a2 + 3);
  if (v12) {
    *(_DWORD *)v12 += 2;
  }
  char v13 = v26;
  uint64_t v26 = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v9);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  char v14 = (_DWORD *)*((void *)a2 + 2);
  if (v14) {
    *v14 += 2;
  }
  uint64_t v15 = (_DWORD *)*((void *)a2 + 3);
  if (v15) {
    *v15 += 2;
  }
  int v16 = (void *)WTF::fastMalloc((WTF *)0x20);
  *int v16 = &unk_1EEA0CBA8;
  v16[1] = this;
  void v16[2] = v14;
  v16[3] = v15;
  long long v24 = v16;
  puts("Injecting push message");
  __int16 v33 = &v25;
  IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::InjectPushMessageForTesting,WTF::CompletionHandler<void ()(WTF::String)>>((uint64_t)a2, (uint64_t *)&v33, (uint64_t *)&v24);
  uint64_t v18 = (uint64_t)v24;
  long long v24 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v32, v17);
  uint64_t v20 = v30;
  uint64_t v30 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v19);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  char v21 = v27;
  long long v27 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v19);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  char v22 = v26;
  uint64_t v26 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v19);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  uint64_t result = v25;
  long long v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19940CE64(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](v18, a2);
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, v20);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, v20);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v20);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v20);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void WebKit::WebPushToolVerb::done(WebKit::WebPushToolVerb *this)
{
  Main = CFRunLoopGetMain();

  CFRunLoopStop(Main);
}

void *WTF::Detail::CallableWrapper<WebKit::InjectPushMessageVerb::run(WebPushTool::Connection &)::{lambda(WTF::String)#1},void,WTF::String>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA0CBA8;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::InjectPushMessageVerb::run(WebPushTool::Connection &)::{lambda(WTF::String)#1},void,WTF::String>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA0CBA8;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::InjectPushMessageVerb::run(WebPushTool::Connection &)::{lambda(WTF::String)#1},void,WTF::String>::call(uint64_t a1, WTF::StringImpl **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2 && *((_DWORD *)v2 + 1))
  {
    WTF::String::utf8();
    if (v15) {
      uint64_t v4 = (char *)v15 + 16;
    }
    else {
      uint64_t v4 = 0;
    }
    printf("Injected push message with error: %s\n", v4);
  }
  else
  {
    WTF::String::utf8();
    if (v15) {
      uint64_t v6 = (char *)v15 + 16;
    }
    else {
      uint64_t v6 = 0;
    }
    WTF::String::utf8();
    if (v14) {
      long long v7 = (char *)v14 + 16;
    }
    else {
      long long v7 = 0;
    }
    WTF::String::utf8();
    WTF::String::utf8();
    char v8 = (char *)v13 + 16;
    if (!v13) {
      char v8 = 0;
    }
    if (v12) {
      long long v9 = (char *)v12 + 16;
    }
    else {
      long long v9 = 0;
    }
    printf("Successfully injected push message %s for [bundleID = %s, webClipIdentifier = %s, scope = %s]\n", v6, v7, v8, v9);
    if (v12)
    {
      if (*(_DWORD *)v12 == 1) {
        WTF::fastFree(v12, v5);
      }
      else {
        --*(_DWORD *)v12;
      }
    }
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        WTF::fastFree(v13, v5);
      }
      else {
        --*(_DWORD *)v13;
      }
    }
    if (v14)
    {
      if (*(_DWORD *)v14 == 1) {
        WTF::fastFree(v14, v5);
      }
      else {
        --*(_DWORD *)v14;
      }
    }
  }
  if (v15)
  {
    if (*(_DWORD *)v15 == 1) {
      WTF::fastFree(v15, v5);
    }
    else {
      --*(_DWORD *)v15;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  uint64_t result = (uint64_t)v2;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      return WTF::StringImpl::destroy(v2, v10);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  return result;
}

void sub_19940D39C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, WTF *a17)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 1) {
      WTF::fastFree(a16, a2);
    }
    else {
      --*(_DWORD *)a16;
    }
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 1) {
      WTF::fastFree(a17, a2);
    }
    else {
      --*(_DWORD *)a17;
    }
  }
  uint64_t v20 = *(WTF **)(v18 - 56);
  *(void *)(v18 - 56) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1) {
      WTF::fastFree(v20, a2);
    }
    else {
      --*(_DWORD *)v20;
    }
  }
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<WebKit::WebPushD::PushMessageForTesting>::operator()[abi:sn180100](WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 9), a2);
  uint64_t v4 = a1[7];
  a1[7] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  long long v7 = *a1;
  *a1 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v3);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }

  JUMPOUT(0x199740C10);
}

void WebKit::GetPushPermissionStateVerb::~GetPushPermissionStateVerb(WebKit::GetPushPermissionStateVerb *this, WTF::StringImpl *a2)
{
  WebKit::GetPushPermissionStateVerb::~GetPushPermissionStateVerb(this, a2);

  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;

  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EEA0CBD0;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
}

void *WebKit::GetPushPermissionStateVerb::run(WTF::StringImpl **this, WebPushTool::Connection *a2)
{
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EEA0CC00;
  v4[1] = this;
  uint64_t v6 = v4;
  WebPushTool::Connection::getPushPermissionState((uint64_t)a2, this + 1, (uint64_t *)&v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  return result;
}

void sub_19940D5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::GetPushPermissionStateVerb::run(WebPushTool::Connection &)::{lambda(WebCore::PushPermissionState)#1},void,WebCore::PushPermissionState>::call(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  printf("Got push permission status: %u\n", a2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 24);

  return v3(v2);
}

void WebKit::RequestPushPermissionVerb::~RequestPushPermissionVerb(WebKit::RequestPushPermissionVerb *this, WTF::StringImpl *a2)
{
  WebKit::RequestPushPermissionVerb::~RequestPushPermissionVerb(this, a2);

  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;

  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EEA0CC28;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
}

void *WebKit::RequestPushPermissionVerb::run(WTF::StringImpl **this, WebPushTool::Connection *a2)
{
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EEA0CC58;
  v4[1] = this;
  uint64_t v6 = v4;
  WebPushTool::Connection::requestPushPermission((uint64_t)a2, this + 1, (uint64_t *)&v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  return result;
}

void sub_19940D7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RequestPushPermissionVerb::run(WebPushTool::Connection &)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  printf("Requested push permission with result: %d\n", a2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 24);

  return v3(v2);
}

void WebKit::WebResourceLoader::didReceiveWebResourceLoaderMessage(WebKit::WebResourceLoader *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  ++*((_DWORD *)this + 2);
  switch(*((_WORD *)a3 + 25))
  {
    case 0xA93:
      IPC::handleMessage<Messages::WebResourceLoader::ContentFilterDidBlockLoad,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ContentFilterUnblockHandler const&,WTF::String &&,WebCore::ResourceError const&,WTF::URL const&,WebCore::SubstituteData &&)>(a3, (uint64_t)this);
      goto LABEL_22;
    case 0xA94:
      WebKit::WebResourceLoader::didBlockAuthenticationChallenge(this);
      goto LABEL_22;
    case 0xA95:
      IPC::handleMessage<Messages::WebResourceLoader::DidFailResourceLoad,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ResourceError const&)>(a3, this);
      goto LABEL_22;
    case 0xA96:
      IPC::handleMessage<Messages::WebResourceLoader::DidFailServiceWorkerLoad,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ResourceError const&)>(a3, this);
      goto LABEL_22;
    case 0xA97:
      IPC::Decoder::decode<std::tuple<WebCore::NetworkLoadMetrics>>((uint64_t *)a3, (uint64_t)v29);
      if (v33) {
        WebKit::WebResourceLoader::didFinishResourceLoad((uint64_t)this, (uint64_t)v29);
      }
      std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v15);
      goto LABEL_22;
    case 0xA98:
      IPC::Decoder::decode<std::tuple<IPC::SharedBufferReference,unsigned long long>>(a3, v29);
      if (v32) {
        WebKit::WebResourceLoader::didReceiveData((uint64_t)this, (IPC::SharedBufferReference *)v29, v31);
      }
      std::__optional_destruct_base<std::tuple<IPC::SharedBufferReference,unsigned long long>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v16);
      goto LABEL_22;
    case 0xA99:
      goto LABEL_41;
    case 0xA9A:
      IPC::Decoder::decode<WebCore::ResourceResponse>(a3, v45);
      if (!v46) {
        goto LABEL_39;
      }
      unint64_t v6 = *((void *)a3 + 1);
      uint64_t v5 = *(WTF::StringImpl **)a3;
      unint64_t v7 = *((void *)a3 + 2) - *(void *)a3;
      if (v6 <= v7)
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v19 = *((void *)a3 + 3);
        if (v19)
        {
          if (v6)
          {
            (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
            uint64_t v18 = *(void *)a3;
            unint64_t v17 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v17 = 0;
            uint64_t v18 = 0;
          }
        }
        goto LABEL_32;
      }
      char v8 = (unsigned __int8 *)v5 + v7;
      *((void *)a3 + 2) = v8 + 1;
      if (!v5)
      {
        unint64_t v17 = v6;
        uint64_t v18 = 0;
LABEL_32:
        unint64_t v6 = 0;
        uint64_t v5 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v20 = *((void *)a3 + 3);
        if (v20)
        {
          if (v17)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
            uint64_t v5 = *(WTF::StringImpl **)a3;
            unint64_t v6 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v6 = 0;
            uint64_t v5 = 0;
          }
        }
        goto LABEL_33;
      }
      unsigned int v9 = *v8;
      if (v9 >= 2)
      {
LABEL_33:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v21 = *((void *)a3 + 3);
        if (v21 && v6) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v21 + 16))(v21, v5);
        }
        IPC::Decoder::markInvalid(a3);
        goto LABEL_39;
      }
      BOOL v10 = v9 != 0;
      if (v6 <= v8 + 1 - (unsigned __int8 *)v5)
      {
        unint64_t v22 = 0;
        uint64_t v23 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v24 = *((void *)a3 + 3);
        if (v24)
        {
          (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
          unint64_t v22 = 0;
          uint64_t v5 = *(WTF::StringImpl **)a3;
          uint64_t v27 = *((void *)a3 + 1);
          uint64_t v28 = *((void *)a3 + 3);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v23 = 0;
          if (v28)
          {
            if (v27)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v28 + 16))(v28, v5);
              uint64_t v23 = *(WTF::StringImpl **)a3;
              unint64_t v22 = *((void *)a3 + 1);
            }
          }
        }
        goto LABEL_38;
      }
      *((void *)a3 + 2) = v8 + 2;
      unsigned int v11 = v8[1];
      if (v11 >= 2)
      {
        unint64_t v22 = v6;
        uint64_t v23 = v5;
LABEL_38:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v25 = *((void *)a3 + 3);
        if (v25 && v22) {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v25 + 16))(v25, v23, v22);
        }
        goto LABEL_39;
      }
      BOOL v12 = v11 != 0;
      IPC::Decoder::decode<std::optional<WebCore::NetworkLoadMetrics>>((uint64_t *)a3, (uint64_t)v47);
      if (!v54)
      {
LABEL_39:
        LOBYTE(v29[0]) = 0;
        char v44 = 0;
LABEL_14:
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v45, v5);
        if (v44 || (IPC::Decoder::markInvalid(a3), v44))
        {
          WebKit::WebResourceLoader::didReceiveResponse((uint64_t)this, (WebCore::ResourceResponseBase *)v29, v35, v36, (uint64_t)v37);
          if (v44)
          {
            std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v37, a2);
            CFTypeRef v14 = cf;
            CFTypeRef cf = 0;
            if (v14) {
              CFRelease(v14);
            }
            WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v29, v13);
          }
        }
        goto LABEL_22;
      }
      if (v46)
      {
        std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v29, (uint64_t)v45);
        BOOL v35 = v10;
        BOOL v36 = v12;
        LOBYTE(v37[0]) = 0;
        char v43 = 0;
        if (v53)
        {
          uint64_t v38 = v48;
          CFTypeRef v37[2] = v47[2];
          v37[3] = v47[3];
          v37[4] = v47[4];
          v37[0] = v47[0];
          v37[1] = v47[1];
          long long v40 = v50;
          uint64_t v39 = v49;
          uint64_t v41 = v51;
          uint64_t v42 = v52;
          uint64_t v49 = 0;
          uint64_t v52 = 0;
          char v43 = 1;
        }
        char v44 = 1;
        if (v54) {
          std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v47, v5);
        }
        goto LABEL_14;
      }
      __break(1u);
LABEL_41:
      IPC::handleMessage<Messages::WebResourceLoader::DidReceiveResource,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ShareableResourceHandle &&)>(a3, (uint64_t)this);
LABEL_22:
      if (*((_DWORD *)this + 2) == 1) {
        (*(void (**)(WebKit::WebResourceLoader *, IPC::Connection *))(*(void *)this + 8))(this, a2);
      }
      else {
        --*((_DWORD *)this + 2);
      }
      return;
    case 0xA9B:
      IPC::Decoder::decode<std::tuple<unsigned long long,unsigned long long>>(a3, (uint64_t)v29);
      if (v30) {
        (*(void (**)(void, void, void))(**((void **)this + 2) + 200))(*((void *)this + 2), v29[0], v29[1]);
      }
      goto LABEL_22;
    case 0xA9C:
      WebKit::WebResourceLoader::serviceWorkerDidNotHandle(this);
      goto LABEL_22;
    case 0xA9D:
      uint64_t v26 = IPC::Decoder::decode<std::tuple<WTF::MonotonicTime>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        *((void *)this + 11) = v26;
      }
      goto LABEL_22;
    case 0xA9E:
      IPC::handleMessage<Messages::WebResourceLoader::StopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ResourceResponse const&)>(a3, this);
      goto LABEL_22;
    case 0xA9F:
      IPC::handleMessageAsync<Messages::WebResourceLoader::WillSendRequest,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ResourceRequest &&,IPC::FormDataReference &&,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &,BOOL)> &&)>((atomic_uchar *volatile *)a2, a3, (uint64_t)this);
      goto LABEL_22;
    default:
      goto LABEL_22;
  }
}

void IPC::handleMessageAsync<Messages::WebResourceLoader::WillSendRequest,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ResourceRequest &&,IPC::FormDataReference &&,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &,BOOL)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t v4 = (atomic_uchar *volatile **)a2;
  IPC::Decoder::decode<WebCore::ResourceRequest>(a2, (uint64_t)v27);
  if (v28 && (IPC::Decoder::decode<IPC::FormDataReference>((WTF *)v4, &v29), v30))
  {
    IPC::Decoder::decode<WebCore::ResourceResponse>((IPC::Decoder *)v4, &v31);
    char v7 = v33;
    if (v33)
    {
      if (!v28 || !v30) {
        goto LABEL_26;
      }
      std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v21, (uint64_t)v27);
      uint64_t v8 = (uint64_t)v29;
      long long v29 = 0;
      uint64_t v23 = (WTF::RefCountedBase *)v8;
      std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v24, (uint64_t)&v31);
      char v7 = 1;
    }
    else
    {
      v21[0] = 0;
    }
    char v26 = v7;
    std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v31, v6);
    if (v30)
    {
      unsigned int v9 = v29;
      long long v29 = 0;
      if (v9) {
        WTF::RefCounted<WebCore::FormData>::deref(v9);
      }
    }
  }
  else
  {
    v21[0] = 0;
    char v26 = 0;
  }
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v27);
  if (!v26) {
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
    if (!(_BYTE)v11) {
      break;
    }
    uint64_t v31 = v10;
    uint64_t v4 = v32;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v32, a1);
    BOOL v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    *BOOL v12 = &unk_1EEA0CC80;
    v12[1] = v31;
    char v13 = v32[0];
    v32[0] = 0;
    __n128 v12[2] = v13;
    v27[0] = (uint64_t)v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v32);
    if (v26)
    {
      WebKit::WebResourceLoader::willSendRequest(a3, (uint64_t)v21, (uint64_t *)&v23, (uint64_t)v24, v27);
      uint64_t v14 = v27[0];
      v27[0] = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    uint64_t v18 = *v4;
    uint64_t v19 = v4[1];
    *uint64_t v4 = 0;
    v4[1] = 0;
    uint64_t v20 = v4[3];
    if (v20)
    {
      if (v19)
      {
        (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v20 + 2))(v20, v18);
        if (v26) {
          continue;
        }
      }
    }
    return;
  }
  if (v26)
  {
    CFTypeRef v15 = cf;
    CFTypeRef cf = 0;
    if (v15) {
      CFRelease(v15);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v24, v11);
    int v16 = v23;
    uint64_t v23 = 0;
    if (v16) {
      WTF::RefCounted<WebCore::FormData>::deref(v16);
    }
    CFTypeRef v17 = v22;
    CFTypeRef v22 = 0;
    if (v17) {
      CFRelease(v17);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v21);
  }
}

uint64_t IPC::handleMessage<Messages::WebResourceLoader::DidFailResourceLoad,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ResourceError const&)>(IPC::Decoder *a1, WebKit::WebResourceLoader *a2)
{
  IPC::Decoder::decode<std::tuple<WebCore::ResourceError>>(a1, v5);
  if (v5[80]) {
    WebKit::WebResourceLoader::didFailResourceLoad(a2, (const WebCore::ResourceError *)v5);
  }
  return std::optional<std::tuple<WebCore::ResourceError>>::~optional((uint64_t)v5, v3);
}

WTF::StringImpl *IPC::handleMessage<Messages::WebResourceLoader::DidFailServiceWorkerLoad,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ResourceError const&)>(IPC::Decoder *a1, WebKit::WebResourceLoader *a2)
{
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::ResourceError>>(a1, &v8);
  if (v12)
  {
    uint64_t result = (WTF::StringImpl *)WebKit::WebResourceLoader::didFailServiceWorkerLoad(a2, &v8);
    if (v12)
    {
      CFTypeRef v5 = cf;
      CFTypeRef cf = 0;
      if (v5) {
        CFRelease(v5);
      }
      unint64_t v6 = v10;
      uint64_t v10 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, v4);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      char v7 = v9;
      unsigned int v9 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v4);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
      uint64_t result = v8;
      uint64_t v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WebCore::ResourceResponseBase *IPC::handleMessage<Messages::WebResourceLoader::StopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ResourceResponse const&)>(IPC::Decoder *a1, WebKit::WebResourceLoader *a2)
{
  IPC::Decoder::decode<std::tuple<WebCore::ResourceResponse>>(a1, v5);
  if (v5[256]) {
    WebKit::WebResourceLoader::stopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied(a2, (const WebCore::ResourceResponse *)v5);
  }
  return std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v5, v3);
}

void IPC::handleMessage<Messages::WebResourceLoader::DidReceiveResource,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ShareableResourceHandle &&)>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WebCore::ShareableResourceHandle>>(a1, (uint64_t)v3);
  if (v4)
  {
    WebKit::WebResourceLoader::didReceiveResource(a2);
    if (v4) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v3);
    }
  }
}

WTF::StringImpl *IPC::handleMessage<Messages::WebResourceLoader::ContentFilterDidBlockLoad,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ContentFilterUnblockHandler const&,WTF::String &&,WebCore::ResourceError const&,WTF::URL const&,WebCore::SubstituteData &&)>(IPC::Decoder *a1, uint64_t a2)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::ContentFilterUnblockHandler>(a1, (uint64_t)v75);
  if (v76 && (IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v34), v35))
  {
    IPC::Decoder::decode<WebCore::ResourceError>(a1, (uint64_t)&v36);
    if (v44 && (IPC::Decoder::decode<WTF::URL>(a1, &v45), v48))
    {
      IPC::ArgumentCoder<WebCore::SubstituteData,void>::decode(a1, &v49);
      if (v53
        || (char v4 = *(WTF::StringImpl **)a1,
            uint64_t v32 = *((void *)a1 + 1),
            *(void *)a1 = 0,
            *((void *)a1 + 1) = 0,
            (uint64_t v33 = *((void *)a1 + 3)) != 0)
        && v32
        && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v33 + 16))(v33, v4), v53))
      {
        if (!v76 || !v35 || !v44 || !v48)
        {
          __break(1u);
          goto LABEL_75;
        }
        std::__tuple_leaf<0ul,WebCore::ContentFilterUnblockHandler,false>::__tuple_leaf[abi:sn180100]<WebCore::ContentFilterUnblockHandler,void>((uint64_t)&v54, v75);
        CFTypeRef v5 = v34;
        int v34 = 0;
        long long v6 = v36;
        long long v36 = 0uLL;
        long long v59 = v6;
        long long v60 = v37;
        long long v61 = v38;
        LODWORD(v37) = v37 & 0xFFFFFFFE;
        int v58 = v5;
        long long v62 = v39;
        int v63 = v40;
        __int16 v64 = v41;
        char v7 = v42;
        uint64_t v39 = 0;
        uint64_t v42 = 0;
        CFTypeRef v65 = v7;
        char v66 = v43;
        uint64_t v8 = v45;
        __int16 v45 = 0;
        long long v67 = v8;
        long long v68 = v46;
        long long v69 = v47;
        LODWORD(v46) = v46 & 0xFFFFFFFE;
        WebCore::SubstituteData::SubstituteData((uint64_t)&v70, (uint64_t *)&v49);
        char v74 = 1;
        if (v53)
        {
          CFTypeRef v9 = v52;
          CFTypeRef v52 = 0;
          if (v9) {
            CFRelease(v9);
          }
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v51, v4);
          uint64_t v10 = v50;
          long long v50 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2) {
              WTF::StringImpl::destroy(v10, v4);
            }
            else {
              *(_DWORD *)v10 -= 2;
            }
          }
          unsigned int v11 = v49;
          uint64_t v49 = 0;
          if (v11) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v11, v4);
          }
        }
      }
      else
      {
        LOBYTE(v54) = 0;
        char v74 = 0;
      }
      if (v48)
      {
        char v12 = v45;
        __int16 v45 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v4);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
      }
    }
    else
    {
      LOBYTE(v54) = 0;
      char v74 = 0;
    }
    std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36, v4);
    if (v35)
    {
      uint64_t v14 = v34;
      int v34 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
  }
  else
  {
    LOBYTE(v54) = 0;
    char v74 = 0;
  }
  std::__optional_destruct_base<WebCore::ContentFilterUnblockHandler,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v75);
  if (!v74)
  {
LABEL_75:
    char v30 = *(WTF::StringImpl **)a1;
    uint64_t v31 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (!result) {
      return result;
    }
    if (!v31) {
      return result;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
                                                                                                + 16))(result, v30);
    if (!v74) {
      return result;
    }
  }
  uint64_t result = (WTF::StringImpl *)WebKit::WebResourceLoader::contentFilterDidBlockLoad(a2, (uint64_t)&v54, (uint64_t)&v58, (uint64_t)&v59, (uint64_t)&v67, (uint64_t *)&v70);
  if (v74)
  {
    CFTypeRef v17 = v73;
    CFTypeRef v73 = 0;
    if (v17) {
      CFRelease(v17);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v72, v16);
    uint64_t v19 = v71;
    char v71 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v18);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    uint64_t v20 = v70;
    uint64_t v70 = 0;
    if (v20) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v20, v18);
    }
    uint64_t v21 = v67;
    long long v67 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v18);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    CFTypeRef v22 = v65;
    CFTypeRef v65 = 0;
    if (v22) {
      CFRelease(v22);
    }
    uint64_t v23 = v62;
    long long v62 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v18);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    uint64_t v24 = (WTF::StringImpl *)*((void *)&v59 + 1);
    *((void *)&v59 + 1) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v18);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    uint64_t v25 = (WTF::StringImpl *)v59;
    *(void *)&long long v59 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v18);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    char v26 = v58;
    int v58 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v18);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    CFTypeRef v27 = cf;
    CFTypeRef cf = 0;
    if (v27) {
      CFRelease(v27);
    }
    std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::~__value_func[abi:sn180100](v56);
    long long v29 = v55;
    char v55 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v28);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    uint64_t result = v54;
    char v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages17WebResourceLoader15WillSendRequestEN6WebKit17WebResourceLoaderES8_FvON7WebCore15ResourceRequestEONS2_17FormDataReferenceEONS9_16ResourceResponseEONS_17CompletionHandlerIFvSB_bEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_bEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0CC80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages17WebResourceLoader15WillSendRequestEN6WebKit17WebResourceLoaderES8_FvON7WebCore15ResourceRequestEONS2_17FormDataReferenceEONS9_16ResourceResponseEONS_17CompletionHandlerIFvSB_bEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_bEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0CC80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages17WebResourceLoader15WillSendRequestEN6WebKit17WebResourceLoaderES8_FvON7WebCore15ResourceRequestEONS2_17FormDataReferenceEONS9_16ResourceResponseEONS_17CompletionHandlerIFvSB_bEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_bEE4callESB_b(uint64_t a1, WebCore::ResourceRequest *a2, char a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 3552;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v14 = v7;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v7, a2);
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (v9)
  {
    unsigned char *v8 = a3;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
    uint64_t result = (uint64_t)v14;
    uint64_t v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
      return WTF::fastFree(v12, v13);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t std::optional<std::tuple<WebCore::ResourceError>>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v3 = *(const void **)(a1 + 64);
    *(void *)(a1 + 64) = 0;
    if (v3) {
      CFRelease(v3);
    }
    char v4 = *(WTF::StringImpl **)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    CFTypeRef v5 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, a2);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return a1;
}

void *WebKit::WebRTCMonitor::didReceiveMessage(void *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) != 2704) {
    return this;
  }
  unint64_t v4 = *((void *)a3 + 1);
  uint64_t v5 = *(void *)a3;
  unint64_t v6 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v21 = (void *)*((void *)a3 + 3);
    if (!v21) {
      goto LABEL_26;
    }
    goto LABEL_44;
  }
  uint64_t v8 = (unint64_t *)(v5 + v6);
  *((void *)a3 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v23 = v4;
    uint64_t v24 = 0;
    goto LABEL_26;
  }
  uint64_t v9 = (uint64_t)this;
  unint64_t v10 = *v8;
  long long v53 = 0uLL;
  if (v10 >= 0x2AAA)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::RTCNetwork>((uint64_t)&v41, (uint64_t *)a3);
      if (!v49) {
        goto LABEL_35;
      }
      if (HIDWORD(v53) == DWORD2(v53))
      {
        WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RTCNetwork>((uint64_t)&v53, (unint64_t)&v41);
      }
      else
      {
        uint64_t v26 = v53 + 96 * HIDWORD(v53);
        *(void *)uint64_t v26 = 0;
        *(void *)(v26 + 8) = 0;
        uint64_t v27 = v41;
        uint64_t v41 = 0;
        *(void *)uint64_t v26 = v27;
        LODWORD(v27) = v42;
        int v42 = 0;
        *(_DWORD *)(v26 + 8) = v27;
        LODWORD(v27) = v43;
        unsigned int v43 = 0;
        *(_DWORD *)(v26 + 12) = v27;
        *(void *)(v26 + 16) = 0;
        *(void *)(v26 + 24) = 0;
        uint64_t v28 = v44;
        *(void *)&long long v44 = 0;
        *(void *)(v26 + 16) = v28;
        LODWORD(v28) = DWORD2(v44);
        DWORD2(v44) = 0;
        *(_DWORD *)(v26 + 24) = v28;
        LODWORD(v28) = HIDWORD(v44);
        HIDWORD(v44) = 0;
        *(_DWORD *)(v26 + 28) = v28;
        long long v29 = *(_OWORD *)v45;
        long long v30 = *(_OWORD *)&v45[16];
        *(_OWORD *)(v26 + 60) = *(_OWORD *)&v45[28];
        *(_OWORD *)(v26 + 32) = v29;
        *(_OWORD *)(v26 + 48) = v30;
        *(void *)(v26 + 80) = 0;
        *(void *)(v26 + 88) = 0;
        uint64_t v31 = v46;
        uint64_t v46 = 0;
        *(void *)(v26 + 80) = v31;
        LODWORD(v31) = v47;
        int v47 = 0;
        *(_DWORD *)(v26 + 88) = v31;
        LODWORD(v31) = v48;
        int v48 = 0;
        *(_DWORD *)(v26 + 92) = v31;
        ++HIDWORD(v53);
      }
      std::__optional_destruct_base<WebKit::RTCNetwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41, v11);
      if (!--v10)
      {
        WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v53, HIDWORD(v53));
        uint64_t v18 = v53;
        *(void *)&long long v53 = 0;
        uint64_t v38 = v18;
        LODWORD(v10) = DWORD2(v53);
        unsigned int v19 = HIDWORD(v53);
        goto LABEL_19;
      }
    }
  }
  if (v10)
  {
    DWORD2(v53) = 96 * (int)v10 / 0x60u;
    *(void *)&long long v53 = WTF::fastMalloc((WTF *)(96 * v10));
    while (1)
    {
      IPC::Decoder::decode<WebKit::RTCNetwork>((uint64_t)&v41, (uint64_t *)a3);
      if (!v49) {
        break;
      }
      if (HIDWORD(v53) == DWORD2(v53))
      {
        WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RTCNetwork>((uint64_t)&v53, (unint64_t)&v41);
      }
      else
      {
        uint64_t v12 = v53 + 96 * HIDWORD(v53);
        *(void *)uint64_t v12 = 0;
        *(void *)(v12 + 8) = 0;
        uint64_t v13 = v41;
        uint64_t v41 = 0;
        *(void *)uint64_t v12 = v13;
        LODWORD(v13) = v42;
        int v42 = 0;
        *(_DWORD *)(v12 + 8) = v13;
        LODWORD(v13) = v43;
        unsigned int v43 = 0;
        *(_DWORD *)(v12 + 12) = v13;
        *(void *)(v12 + 16) = 0;
        *(void *)(v12 + 24) = 0;
        uint64_t v14 = v44;
        *(void *)&long long v44 = 0;
        *(void *)(v12 + 16) = v14;
        LODWORD(v14) = DWORD2(v44);
        DWORD2(v44) = 0;
        *(_DWORD *)(v12 + 24) = v14;
        LODWORD(v14) = HIDWORD(v44);
        HIDWORD(v44) = 0;
        *(_DWORD *)(v12 + 28) = v14;
        long long v15 = *(_OWORD *)v45;
        long long v16 = *(_OWORD *)&v45[16];
        *(_OWORD *)(v12 + 60) = *(_OWORD *)&v45[28];
        *(_OWORD *)(v12 + 32) = v15;
        *(_OWORD *)(v12 + 48) = v16;
        *(void *)(v12 + 80) = 0;
        *(void *)(v12 + 88) = 0;
        uint64_t v17 = v46;
        uint64_t v46 = 0;
        *(void *)(v12 + 80) = v17;
        LODWORD(v17) = v47;
        int v47 = 0;
        *(_DWORD *)(v12 + 88) = v17;
        LODWORD(v17) = v48;
        int v48 = 0;
        *(_DWORD *)(v12 + 92) = v17;
        ++HIDWORD(v53);
      }
      std::__optional_destruct_base<WebKit::RTCNetwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41, v11);
      if (!--v10)
      {
        uint64_t v18 = v53;
        LODWORD(v10) = DWORD2(v53);
        unsigned int v19 = HIDWORD(v53);
        goto LABEL_18;
      }
    }
LABEL_35:
    std::__optional_destruct_base<WebKit::RTCNetwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41, v11);
    WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v32);
LABEL_36:
    uint64_t v33 = *(void *)a3;
    uint64_t v34 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v35 = *((void *)a3 + 3);
    if (v35 && v34) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v33);
    }
    goto LABEL_37;
  }
  unsigned int v19 = 0;
  uint64_t v18 = 0;
LABEL_18:
  *(void *)&long long v53 = 0;
  uint64_t v38 = v18;
LABEL_19:
  *((void *)&v53 + 1) = 0;
  unint64_t v39 = __PAIR64__(v19, v10);
  char v40 = 1;
  WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, a2);
  IPC::Decoder::decode<WebKit::RTC::Network::IPAddress>((uint64_t *)a3, (uint64_t)&v50);
  if (!v52 || (uint64_t v21 = IPC::Decoder::decode<WebKit::RTC::Network::IPAddress>((uint64_t *)a3, (uint64_t)&v53), !v55))
  {
    WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v20);
LABEL_37:
    uint64_t v36 = *(void *)a3;
    uint64_t v37 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    this = (void *)*((void *)a3 + 3);
    if (this)
    {
      if (v37) {
        return (void *)(*(uint64_t (**)(void *, uint64_t))(*this + 16))(this, v36);
      }
    }
    return this;
  }
  uint64_t v5 = v52;
  if (!v52)
  {
    __break(1u);
LABEL_44:
    if (v4)
    {
      (*(void (**)(void *, uint64_t, unint64_t))(*v21 + 16))(v21, v5, v4);
      uint64_t v24 = *(void *)a3;
      unint64_t v23 = *((void *)a3 + 1);
    }
    else
    {
      unint64_t v23 = 0;
      uint64_t v24 = 0;
    }
LABEL_26:
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v25 = *((void *)a3 + 3);
    if (v25 && v23) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v24);
    }
    goto LABEL_36;
  }
  uint64_t v38 = 0;
  unint64_t v39 = 0;
  uint64_t v41 = v18;
  int v42 = v10;
  unsigned int v43 = v19;
  long long v44 = v50;
  *(_DWORD *)__int16 v45 = v51;
  *(_OWORD *)&void v45[4] = v53;
  *(_DWORD *)&v45[20] = v54;
  v45[24] = 1;
  WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v20);
  this = WebKit::WebRTCMonitor::networksChanged(v9, &v41, &v44, (long long *)&v45[4]);
  if (v45[24]) {
    return (void *)WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v22);
  }
  return this;
}

WTF *IPC::Decoder::decode<WebKit::RTCNetwork>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::RTCNetwork,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF *)a2[3];
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF *)v7();
    }
  }
  return result;
}

__n128 WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RTCNetwork>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 96 * *(unsigned int *)(a1 + 12);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  uint64_t v5 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)uint64_t v4 = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v3 + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  uint64_t v6 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  *(void *)(v4 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v4 + 24) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 28);
  *(_DWORD *)(v3 + 28) = 0;
  *(_DWORD *)(v4 + 28) = v6;
  __n128 result = *(__n128 *)(v3 + 60);
  long long v8 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v4 + 48) = v8;
  *(__n128 *)(v4 + 60) = result;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 88) = 0;
  uint64_t v9 = *(void *)(v3 + 80);
  *(void *)(v3 + 80) = 0;
  *(void *)(v4 + 80) = v9;
  LODWORD(v9) = *(_DWORD *)(v3 + 88);
  *(_DWORD *)(v3 + 88) = 0;
  *(_DWORD *)(v4 + 88) = v9;
  LODWORD(v9) = *(_DWORD *)(v3 + 92);
  *(_DWORD *)(v3 + 92) = 0;
  *(_DWORD *)(v4 + 92) = v9;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::RTCNetwork,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 96))
  {
    unint64_t v3 = *(WTF **)(a1 + 80);
    if (v3)
    {
      *(void *)(a1 + 80) = 0;
      *(_DWORD *)(a1 + 88) = 0;
      WTF::fastFree(v3, a2);
    }
    uint64_t v4 = *(WTF **)(a1 + 16);
    if (v4)
    {
      *(void *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v4, a2);
    }
    uint64_t v5 = *(WTF **)a1;
    if (*(void *)a1)
    {
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  return a1;
}

uint64_t WebKit::WebRTCResolver::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v4 = (WebKit::WebRTCResolver *)this;
  int v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 2705)
  {
    this = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
    if ((this & 0xFF00000000) != 0)
    {
      return WebKit::WebRTCResolver::resolvedAddressError(v4, this);
    }
  }
  else
  {
    if (v5 != 2706) {
      return this;
    }
    unint64_t v6 = *((void *)a3 + 1);
    uint64_t v7 = *(void *)a3;
    unint64_t v8 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
    if (v6 < v8 || v6 - v8 <= 7)
    {
      unint64_t v23 = 0;
      uint64_t v24 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v25 = *((void *)a3 + 3);
      if (v25)
      {
        if (v6)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v25 + 16))(v25, v7, v6);
          uint64_t v24 = *(void *)a3;
          unint64_t v23 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v23 = 0;
          uint64_t v24 = 0;
        }
      }
      goto LABEL_27;
    }
    unint64_t v10 = (unint64_t *)(v7 + v8);
    *((void *)a3 + 2) = v10 + 1;
    if (!v7)
    {
      unint64_t v23 = v6;
      uint64_t v24 = 0;
LABEL_27:
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v26 = *((void *)a3 + 3);
      if (v26 && v23) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24);
      }
LABEL_38:
      uint64_t v34 = *(void *)a3;
      uint64_t v35 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      this = *((void *)a3 + 3);
      if (this)
      {
        if (v35)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)this + 16))(this, v34);
          uint64_t v36 = *(void *)a3;
          uint64_t v37 = *((void *)a3 + 1);
          this = *((void *)a3 + 3);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          if (this)
          {
            if (v37) {
              return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)this + 16))(this, v36);
            }
          }
        }
      }
      return this;
    }
    unint64_t v11 = *v10;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    if (v11 >= 0xCCCC)
    {
      while (1)
      {
        IPC::Decoder::decode<WebKit::RTC::Network::IPAddress>((uint64_t *)a3, (uint64_t)v38);
        if (!v40) {
          goto LABEL_36;
        }
        int v27 = HIDWORD(v42);
        if (HIDWORD(v42) == v42)
        {
          unint64_t v28 = WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v41, HIDWORD(v42) + 1, (unint64_t)v38);
          int v27 = HIDWORD(v42);
          long long v29 = (char *)v41 + 20 * HIDWORD(v42);
          int v30 = *(_DWORD *)(v28 + 16);
          *(_OWORD *)long long v29 = *(_OWORD *)v28;
          *((_DWORD *)v29 + 4) = v30;
        }
        else
        {
          uint64_t v31 = (char *)v41 + 20 * HIDWORD(v42);
          long long v32 = *(_OWORD *)v38;
          *((_DWORD *)v31 + 4) = v39;
          *(_OWORD *)uint64_t v31 = v32;
        }
        HIDWORD(v42) = v27 + 1;
        if (!--v11)
        {
          WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v41, (v27 + 1));
          long long v15 = v41;
          unsigned int v21 = v42;
          unsigned int v20 = HIDWORD(v42);
          goto LABEL_23;
        }
      }
    }
    if (v11)
    {
      LODWORD(v42) = 20 * (int)v11 / 0x14u;
      uint64_t v41 = (WTF *)WTF::fastMalloc((WTF *)(20 * v11));
      while (1)
      {
        IPC::Decoder::decode<WebKit::RTC::Network::IPAddress>((uint64_t *)a3, (uint64_t)v38);
        if (!v40) {
          break;
        }
        int v13 = HIDWORD(v42);
        if (HIDWORD(v42) == v42)
        {
          unint64_t v14 = WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v41, HIDWORD(v42) + 1, (unint64_t)v38);
          int v13 = HIDWORD(v42);
          long long v15 = v41;
          long long v16 = (char *)v41 + 20 * HIDWORD(v42);
          int v17 = *(_DWORD *)(v14 + 16);
          *(_OWORD *)long long v16 = *(_OWORD *)v14;
          *((_DWORD *)v16 + 4) = v17;
        }
        else
        {
          long long v15 = v41;
          uint64_t v18 = (char *)v41 + 20 * HIDWORD(v42);
          long long v19 = *(_OWORD *)v38;
          *((_DWORD *)v18 + 4) = v39;
          *(_OWORD *)uint64_t v18 = v19;
        }
        unsigned int v20 = v13 + 1;
        HIDWORD(v42) = v20;
        if (!--v11)
        {
          unsigned int v21 = v42;
          goto LABEL_23;
        }
      }
LABEL_36:
      uint64_t v33 = v41;
      if (v41)
      {
        uint64_t v41 = 0;
        LODWORD(v42) = 0;
        WTF::fastFree(v33, v12);
      }
      goto LABEL_38;
    }
    unsigned int v20 = 0;
    unsigned int v21 = 0;
    long long v15 = 0;
LABEL_23:
    v38[0] = v15;
    v38[1] = (WTF *)__PAIR64__(v20, v21);
    LOBYTE(v39) = 1;
    this = (uint64_t)WebKit::WebRTCResolver::setResolvedAddress(v4, (uint64_t)v38);
    if ((_BYTE)v39)
    {
      this = (uint64_t)v38[0];
      if (v38[0])
      {
        v38[0] = 0;
        LODWORD(v38[1]) = 0;
        return WTF::fastFree((WTF *)this, v22);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebSocketChannel::WebSocketChannel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_1EEA102E8;
  *(void *)(a1 + 8) = &unk_1EE9B71B0;
  *(void *)(a1 + 16) = 0;
  WebCore::ThreadableWebSocketChannel::ThreadableWebSocketChannel((WebCore::ThreadableWebSocketChannel *)(a1 + 24));
  *(_DWORD *)(a1 + 40) = 1;
  *(void *)a1 = &unk_1EEA0CCA8;
  *(void *)(a1 + 8) = &unk_1EEA0CDA0;
  *(void *)(a1 + 24) = &unk_1EEA0CDD8;
  WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  unint64_t v8 = (atomic_uint *)(*(void *)(a3 + 16) & 0xFFFFFFFFFFFFLL);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  *(void *)(a1 + 48) = v8;
  uint64_t v9 = *(void *)(a4 + 8);
  if (v9) {
    goto LABEL_8;
  }
  uint64_t v9 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v9 = 1;
  *(void *)(v9 + 8) = a4;
  unint64_t v11 = *(unsigned int **)(a4 + 8);
  *(void *)(a4 + 8) = v9;
  if (!v11) {
    goto LABEL_8;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v10);
  }
  uint64_t v9 = *(void *)(a4 + 8);
  if (v9) {
LABEL_8:
  }
    atomic_fetch_add((atomic_uint *volatile)v9, 1u);
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 64));
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v12 = &unk_1EEA0CEA8;
  v12[1] = a1;
  unsigned int v20 = v12;
  int v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v13 = &unk_1EEA0CF20;
  v13[1] = a1;
  unsigned int v21 = v13;
  unint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unint64_t v14 = &unk_1EEA0CF98;
  v14[1] = a1;
  long long v19 = v14;
  WebCore::NetworkSendQueue::NetworkSendQueue();
  if (v19) {
    (*(void (**)(void *))(*v19 + 8))(v19);
  }
  uint64_t v15 = (uint64_t)v21;
  unsigned int v21 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  long long v16 = v20;
  unsigned int v20 = 0;
  if (v16) {
    (*(void (**)(void *))(*v16 + 8))(v16);
  }
  WebCore::WebSocketChannelInspector::WebSocketChannelInspector((WebCore::WebSocketChannelInspector *)(a1 + 208), (Document *)a3);
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 224));
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 424));
  *(void *)(a1 + 664) = 0;
  *(unsigned char *)(a1 + 672) = 0;
  *(unsigned char *)(a1 + 562) = *(unsigned char *)(a1 + 562) & 0xF1 | 4;
  *(void *)(a1 + 680) = a2;
  {
    uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v18);
  }
  unsigned int v21 = *(void **)(a1 + 32);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::WebSocketChannel&>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 416), (uint64_t *)&v21, a1, (uint64_t)&v20);
  return a1;
}

void WebKit::WebSocketChannel::~WebSocketChannel(WebKit::WebSocketChannel *this)
{
  *(void *)this = &unk_1EEA0CCA8;
  *((void *)this + 1) = &unk_1EEA0CDA0;
  *((void *)this + 3) = &unk_1EEA0CDD8;
  {
    CFTypeRef v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v22);
  }
  uint64_t v2 = WebKit::WebProcess::singleton(void)::process;
  unint64_t v3 = (uint64_t *)(WebKit::WebProcess::singleton(void)::process + 416);
  uint64_t v23 = *((void *)this + 4);
  uint64_t v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 416), &v23);
  if (*v3)
  {
    uint64_t v6 = *v3 + 16 * *(unsigned int *)(*v3 - 4);
    if ((void *)v6 == v4) {
      goto LABEL_21;
    }
  }
  else
  {
    if (!v4) {
      goto LABEL_21;
    }
    uint64_t v6 = 0;
  }
  if ((void *)v6 != v4)
  {
    uint64_t v7 = (unsigned int *)v4[1];
    *uint64_t v4 = -1;
    v4[1] = 0;
    if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v5);
    }
    ++*(_DWORD *)(*v3 - 16);
    uint64_t v8 = *v3;
    if (*v3) {
      int v9 = *(_DWORD *)(v8 - 12) - 1;
    }
    else {
      int v9 = -1;
    }
    *(_DWORD *)(v8 - 12) = v9;
    uint64_t v10 = *v3;
    if (*v3)
    {
      unsigned int v11 = 6 * *(_DWORD *)(v10 - 12);
      unsigned int v12 = *(_DWORD *)(v10 - 4);
      if (v11 < v12 && v12 >= 9) {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash((uint64_t *)(v2 + 416), v12 >> 1, 0);
      }
    }
  }
LABEL_21:
  unint64_t v14 = (const void *)*((void *)this + 83);
  *((void *)this + 83) = 0;
  if (v14) {
    CFRelease(v14);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::WebSocketChannel *)((char *)this + 424), (WTF::StringImpl *)v5);
  uint64_t v15 = (const void *)*((void *)this + 52);
  *((void *)this + 52) = 0;
  if (v15) {
    CFRelease(v15);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::WebSocketChannel *)((char *)this + 224));
  WebCore::WebSocketChannelInspector::~WebSocketChannelInspector((WebKit::WebSocketChannel *)((char *)this + 208));
  MEMORY[0x1997334A0]((char *)this + 136);
  int v17 = (WTF::StringImpl *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v16);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t v18 = (WTF::StringImpl *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v16);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  long long v19 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v16);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  unsigned int v20 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v20);
    WTF::fastFree((WTF *)v20, v16);
  }
  unsigned int v21 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v21) {
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v21, v16);
  }
  *((void *)this + 1) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v16);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebSocketChannel::~WebSocketChannel(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::WebSocketChannel::~WebSocketChannel(WebKit::WebSocketChannel *this)
{
}

{
  WebKit::WebSocketChannel::~WebSocketChannel((WebKit::WebSocketChannel *)((char *)this - 24));
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebSocketChannel::~WebSocketChannel((WebKit::WebSocketChannel *)((char *)this - 8));

  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebSocketChannel::~WebSocketChannel((WebKit::WebSocketChannel *)((char *)this - 24));

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebSocketChannel::messageSenderConnection(WebKit::WebSocketChannel *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                   + 24);
}

uint64_t WebKit::WebSocketChannel::messageSenderDestinationID(WebKit::WebSocketChannel *this)
{
  return *((void *)this + 4);
}

uint64_t WebKit::WebSocketChannel::subprotocol@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 104);
  if (v2 || (uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30980]) != 0) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t non-virtual thunk to'WebKit::WebSocketChannel::subprotocol@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 80);
  if (v2 || (uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30980]) != 0) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::WebSocketChannel::extensions@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 112);
  if (v2 || (uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30980]) != 0) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t non-virtual thunk to'WebKit::WebSocketChannel::extensions@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 88);
  if (v2 || (uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30980]) != 0) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::WebSocketChannel::connect(WebKit::WebSocketChannel *this, Document *a2, const WTF::String *a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 6);
  if (!v3 || !*(void *)(v3 + 8)) {
    return 0;
  }
  {
    long long v53 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v53);
  }
  uint64_t v7 = *(void *)(WebKit::WebProcess::singleton(void)::process + 416);
  if (!v7 || *(_DWORD *)(v7 - 12) < 0xC8u)
  {
    WebCore::ThreadableWebSocketChannel::webSocketConnectRequest((uint64_t *)v60, *(WebCore::ThreadableWebSocketChannel **)(*((void *)this + 6) + 8), a2, a3);
    if (!v61)
    {
LABEL_22:
      uint64_t v19 = 0;
LABEL_40:
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v60);
      return v19;
    }
    int v9 = (WTF **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v60);
    if ((WTF::equal(*v9, *(const WTF::StringImpl **)a2, v10) & 1) == 0)
    {
      uint64_t v11 = *((void *)this + 7);
      if (v11)
      {
        uint64_t v12 = *(void *)(v11 + 8);
        if (v12) {
          (*(void (**)(uint64_t))(*(void *)v12 + 72))(v12);
        }
      }
    }
    LOBYTE(v58) = 0;
    char v59 = 0;
    LOBYTE(v56) = 0;
    char v57 = 0;
    uint64_t v13 = *((void *)this + 6);
    if (v13 && (uint64_t v14 = *(void *)(v13 + 8)) != 0 && (v15 = *(void *)(v14 + 544)) != 0)
    {
      uint64_t v16 = *(void *)(v15 + 8);
      if (v16)
      {
        uint64_t v17 = *(void *)(*(void *)(v16 + 128) + 8);
        if (v17) {
          BOOL v18 = *(unsigned char *)(v17 + 144) == 0;
        }
        else {
          BOOL v18 = 0;
        }
        if (!v18) {
          goto LABEL_22;
        }
        long long v58 = *(_OWORD *)(v17 + 32);
        int v41 = 1;
        char v59 = 1;
        uint64_t v56 = WebCore::Frame::pageID((WebCore::Frame *)v17);
        char v57 = v42;
        unsigned int v43 = *(WebCore::Document **)(v17 + 296);
        if (v43
          && (uint64_t v44 = WebCore::Document::loader(v43)) != 0
          && ((uint64_t v45 = v44,
               uint64_t v46 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v44 + 872)),
               (WTF::URL::hasSpecialScheme(v46) & 1) != 0)
           || (int v47 = *(WebCore::Document **)(v16 + 296), (*((unsigned char *)v47 + 776) & 2) == 0)
           || (uint64_t v45 = WebCore::Document::loader(v47)) != 0))
        {
          int v41 = *(unsigned __int8 *)(v45 + 3536);
          LOWORD(v16) = *(_WORD *)(v45 + 3514);
        }
        else
        {
          LOWORD(v16) = 0;
        }
        uint64_t v50 = *(void *)(v17 + 24);
        if (v50 && (uint64_t v51 = *(void *)(v50 + 8)) != 0)
        {
          char v21 = *(unsigned char *)(v51 + 1682);
          char v20 = *(unsigned char *)(v51 + 1683) != 0;
        }
        else
        {
          char v20 = 0;
          char v21 = 1;
        }
        BOOL v22 = v41 != 0;
LABEL_25:
        WebCore::WebSocketChannelInspector::didCreateWebSocket((WebKit::WebSocketChannel *)((char *)this + 208), (const WTF::URL *)a2);
        if (v61
          && (uint64_t v23 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v60),
              WTF::String::operator=((uint64_t *)this + 8, (WTF::StringImpl **)v23),
              long long v24 = *(_OWORD *)(v23 + 24),
              *(_OWORD *)((char *)this + 72) = *(_OWORD *)(v23 + 8),
              *(_OWORD *)((char *)this + 88) = v24,
              v61))
        {
          uint64_t v55 = *((void *)this + 4);
          uint64_t v25 = *((void *)this + 6);
          if (v25) {
            uint64_t v26 = *(void *)(v25 + 8);
          }
          else {
            uint64_t v26 = 0;
          }
          uint64_t v27 = WebCore::Document::topOrigin((WebCore::Document *)v26);
          LOBYTE(v63[0]) = 0;
          int v64 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v63, v27 + 8);
          uint64_t v28 = WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v26 + 208));
          v65[0] = 0;
          int v66 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v65, v28 + 8);
          {
            int v54 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            WebKit::WebProcess::WebProcess(v54);
          }
          char v29 = *(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 776);
          uint64_t v30 = (*(uint64_t (**)(WebKit::WebSocketChannel *))(*(void *)this + 56))(this);
          uint64_t v31 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v31 = 235;
          *((void *)v31 + 1) = v30;
          *((void *)v31 + 66) = (char *)v31 + 16;
          *((void *)v31 + 67) = 512;
          *((void *)v31 + 68) = 0;
          *((void *)v31 + 70) = 0;
          *((void *)v31 + 69) = 0;
          IPC::Encoder::encodeHeader(v31);
          long long v62 = v31;
          IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v31, (WebCore::ResourceRequest *)v60);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v31, (uint64_t *)a3);
          IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v31, &v55);
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v31, (uint64_t *)this + 85);
          IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v31, (uint64_t)&v58);
          IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v31, (uint64_t)&v56);
          IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v31, (uint64_t)v63);
          long long v32 = (unsigned char *)IPC::Encoder::grow(v31, 1uLL, 1);
          if (v33)
          {
            unsigned char *v32 = v29;
            uint64_t v34 = (unsigned char *)IPC::Encoder::grow(v31, 1uLL, 1);
            if (!v35)
            {
              __break(0xC471u);
              JUMPOUT(0x199410090);
            }
            unsigned char *v34 = v22;
            IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v31, v16);
            IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v31, v20);
            IPC::ArgumentCoder<WebKit::ShouldGrandfatherStatistics,void>::encode<IPC::Encoder>(v31, v21);
            (*(void (**)(WebKit::WebSocketChannel *, IPC::Encoder **, void))(*(void *)this + 32))(this, &v62, 0);
            uint64_t v37 = v62;
            long long v62 = 0;
            if (v37)
            {
              IPC::Encoder::~Encoder(v37, v36);
              WTF::fastFree(v48, v49);
            }
            if (v66 != -1) {
              ((void (*)(IPC::Encoder **, unsigned char *))off_1EEA0CE88[v66])(&v62, v65);
            }
            int v66 = -1;
            if (v64 != -1) {
              ((void (*)(IPC::Encoder **, WTF::StringImpl **))off_1EEA0CE88[v64])(&v62, v63);
            }
            uint64_t v19 = 1;
            goto LABEL_40;
          }
        }
        else
        {
          __break(1u);
        }
        __break(0xC471u);
        JUMPOUT(0x199410070);
      }
    }
    else
    {
      LOWORD(v16) = 0;
    }
    char v20 = 0;
    char v21 = 1;
    BOOL v22 = 1;
    goto LABEL_25;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v63[0] = v60[0];
  WebKit::WebSocketChannel::logErrorMessage(this, v63);
  if (v60[0])
  {
    if (*(_DWORD *)v60[0] == 2) {
      WTF::StringImpl::destroy(v60[0], v8);
    }
    else {
      *(_DWORD *)v60[0] -= 2;
    }
  }
  uint64_t v38 = *((void *)this + 7);
  if (!v38) {
    return 0;
  }
  uint64_t v19 = *(void *)(v38 + 8);
  if (v19)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v19 + 40))(v19, v60);
    char v40 = v60[0];
    v60[0] = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, v39);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
    }
    return 0;
  }
  return v19;
}

WTF::StringImpl *WebKit::WebSocketChannel::logErrorMessage(WTF::StringImpl *this, WTF::StringImpl **a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (!v2 || !*(void *)(v2 + 8)) {
    return this;
  }
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 8);
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    uint64_t v14 = v3;
    uint64_t v4 = *a2;
    if (*a2) {
      *(_DWORD *)v4 += 2;
    }
    uint64_t v13 = v4;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)"WebSocket connection to '", 26, (uint64_t *)&v14, (uint64_t)"' failed: ", 11, (uint64_t *)&v13, &v15);
    uint64_t v6 = v15;
    uint64_t v15 = 0;
    v16[0] = v6;
    uint64_t v7 = v13;
    uint64_t v13 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v5);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v10 = v14;
    uint64_t v14 = 0;
    if (!v10) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v8 = *a2;
    if (*a2) {
      *(_DWORD *)v8 += 2;
    }
    uint64_t v12 = v8;
    v16[0] = (WTF::StringImpl *)"WebSocket connection failed: ";
    v16[1] = (WTF::StringImpl *)30;
    this = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)v16, (uint64_t *)&v12, &v15);
    int v9 = v15;
    if (!v15)
    {
      __break(0xC471u);
      return this;
    }
    uint64_t v15 = 0;
    v16[0] = v9;
    uint64_t v10 = v12;
    uint64_t v12 = 0;
    if (!v10) {
      goto LABEL_19;
    }
  }
  if (*(_DWORD *)v10 == 2) {
    WTF::StringImpl::destroy(v10, v5);
  }
  else {
    *(_DWORD *)v10 -= 2;
  }
LABEL_19:
  WebCore::Document::addConsoleMessage();
  this = v16[0];
  v16[0] = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v11);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
  return this;
}

uint64_t non-virtual thunk to'WebKit::WebSocketChannel::connect(WebKit::WebSocketChannel *this, Document *a2, const WTF::String *a3)
{
  return WebKit::WebSocketChannel::connect((WebKit::WebSocketChannel *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::WebSocketChannel::increaseBufferedAmount(WebKit::WebSocketChannel *this, uint64_t a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t v2 = *((void *)this + 15);
  BOOL v3 = __CFADD__(v2, a2);
  uint64_t v4 = v2 + a2;
  int v5 = v3;
  if (v3)
  {
    int v12 = v5;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::WebSocketChannel::fail((uint64_t)this, &v13);
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    int v5 = v12;
  }
  else
  {
    *((void *)this + 15) = v4;
    uint64_t v6 = *((void *)this + 7);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
      }
    }
  }
  return v5 ^ 1u;
}

WTF::StringImpl *WebKit::WebSocketChannel::fail(uint64_t a1, WTF::StringImpl **a2)
{
  ++*(_DWORD *)(a1 + 40);
  __n128 result = WebKit::WebSocketChannel::logErrorMessage((WTF::StringImpl *)a1, a2);
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5)
  {
    __n128 result = *(WTF::StringImpl **)(v5 + 8);
    if (result)
    {
      uint64_t v6 = *a2;
      if (*a2) {
        *(_DWORD *)v6 += 2;
      }
      v15[0] = v6;
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(void *)result + 40))(result, v15);
      __n128 result = v15[0];
      v15[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  if (!*(unsigned char *)(a1 + 128))
  {
    LODWORD(v15[0]) = 1001;
    v15[1] = (WTF::StringImpl *)a2;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    int v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v9 = 529;
    *((void *)v9 + 1) = v8;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    uint64_t v16 = v9;
    IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(v9, (int *)v15);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v16, 0);
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11)
    {
      IPC::Encoder::~Encoder(v11, v10);
      WTF::fastFree(v13, v14);
    }
    v15[0] = 0;
    WebKit::WebSocketChannel::didClose((void *)a1, 1006, (uint64_t)v15);
    __n128 result = v15[0];
    v15[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (*(_DWORD *)(a1 + 40) == 1) {
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  }
  --*(_DWORD *)(a1 + 40);
  return result;
}

void *WebKit::WebSocketChannel::decreaseBufferedAmount(void *this, uint64_t a2)
{
  if (a2)
  {
    this[15] -= a2;
    uint64_t v2 = this[7];
    if (v2)
    {
      this = *(void **)(v2 + 8);
      if (this) {
        return (void *)(*(uint64_t (**)(void))(*this + 48))();
      }
    }
  }
  return this;
}

uint64_t WebKit::WebSocketChannel::send(WebKit::WebSocketChannel *this, uint64_t a2)
{
  if (*(void *)a2) {
    uint64_t v2 = *(void *)(*(void *)a2 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!WebKit::WebSocketChannel::increaseBufferedAmount(this, v2)) {
    return 1;
  }
  WebCore::NetworkSendQueue::enqueue();
  return 0;
}

uint64_t non-virtual thunk to'WebKit::WebSocketChannel::send(uint64_t a1, uint64_t a2)
{
  return WebKit::WebSocketChannel::send((WebKit::WebSocketChannel *)(a1 - 24), a2);
}

uint64_t WebKit::WebSocketChannel::send(WebKit::WebSocketChannel *this, const JSC::ArrayBuffer *a2, unsigned int a3, unsigned int a4)
{
  if (!WebKit::WebSocketChannel::increaseBufferedAmount(this, a4)) {
    return 1;
  }
  WebCore::NetworkSendQueue::enqueue((WebKit::WebSocketChannel *)((char *)this + 136), a2);
  return 0;
}

uint64_t non-virtual thunk to'WebKit::WebSocketChannel::send(WebKit::WebSocketChannel *this, const JSC::ArrayBuffer *a2, unsigned int a3, unsigned int a4)
{
  if (!WebKit::WebSocketChannel::increaseBufferedAmount((WebKit::WebSocketChannel *)((char *)this - 24), a4))return 1; {
  WebCore::NetworkSendQueue::enqueue((WebKit::WebSocketChannel *)((char *)this + 112), a2);
  }
  return 0;
}

uint64_t WebKit::WebSocketChannel::send(WebKit::WebSocketChannel *this, WebCore::Blob *a2)
{
  uint64_t v4 = (JSC::ArrayBuffer *)WebCore::Blob::size(a2);
  if (!WebCore::Blob::size(a2))
  {
    JSC::ArrayBuffer::create(v4);
    WebCore::NetworkSendQueue::enqueue((WebKit::WebSocketChannel *)((char *)this + 136), v6);
    if (v6) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
    }
    return 0;
  }
  if (WebKit::WebSocketChannel::increaseBufferedAmount(this, (uint64_t)v4))
  {
    WebCore::NetworkSendQueue::enqueue();
    return 0;
  }
  return 1;
}

uint64_t non-virtual thunk to'WebKit::WebSocketChannel::send(WebKit::WebSocketChannel *this, WebCore::Blob *a2)
{
  return WebKit::WebSocketChannel::send((WebKit::WebSocketChannel *)((char *)this - 24), a2);
}

uint64_t WebKit::WebSocketChannel::bufferedAmount(WebKit::WebSocketChannel *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t non-virtual thunk to'WebKit::WebSocketChannel::bufferedAmount(WebKit::WebSocketChannel *this)
{
  return *((unsigned int *)this + 24);
}

IPC::Encoder *WebKit::WebSocketChannel::close(WebKit::WebSocketChannel *this, int a2, const WTF::String *a3)
{
  ++*((_DWORD *)this + 10);
  *((unsigned char *)this + 128) = 1;
  uint64_t v6 = *((void *)this + 7);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 56))(v7);
    }
  }
  WebCore::WebSocketFrame::WebSocketFrame();
  WebCore::WebSocketChannelInspector::didSendWebSocketFrame();
  int v14 = a2;
  uint64_t v15 = a3;
  uint64_t v8 = (*(uint64_t (**)(WebKit::WebSocketChannel *))(*(void *)this + 56))(this);
  int v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v9 = 529;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v16 = v9;
  IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(v9, &v14);
  (*(void (**)(WebKit::WebSocketChannel *, IPC::Encoder **, void))(*(void *)this + 32))(this, &v16, 0);
  __n128 result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    __n128 result = (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  if (*((_DWORD *)this + 10) == 1) {
    return (IPC::Encoder *)(*(uint64_t (**)(WebKit::WebSocketChannel *))(*(void *)this + 8))(this);
  }
  --*((_DWORD *)this + 10);
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::WebSocketChannel::close(WebKit::WebSocketChannel *this, int a2, const WTF::String *a3)
{
  return WebKit::WebSocketChannel::close((WebKit::WebSocketChannel *)((char *)this - 24), a2, a3);
}

void *WebKit::WebSocketChannel::didClose(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[7];
  if (v3)
  {
    uint64_t v4 = result;
    __n128 result = *(void **)(v3 + 8);
    if (result)
    {
      ++*((_DWORD *)v4 + 10);
      if (a2 != 1006)
      {
        (*(void (**)(void *))(*result + 56))(result);
        __n128 result = *(void **)(v4[7] + 8);
      }
      BOOL v8 = a2 != 1006 || *((unsigned char *)v4 + 128) != 0;
      __n128 result = (void *)(*(uint64_t (**)(void *, void, BOOL, uint64_t, uint64_t))(*result + 64))(result, *((unsigned int *)v4 + 30), v8, a2, a3);
      if (*((_DWORD *)v4 + 10) == 1)
      {
        int v9 = *(uint64_t (**)(void *))(*v4 + 8);
        return (void *)v9(v4);
      }
      else
      {
        --*((_DWORD *)v4 + 10);
      }
    }
  }
  return result;
}

WTF::StringImpl *non-virtual thunk to'WebKit::WebSocketChannel::fail(uint64_t a1, WTF::StringImpl **a2)
{
  return WebKit::WebSocketChannel::fail(a1 - 24, a2);
}

WTF::StringImpl *WebKit::WebSocketChannel::disconnect(WebKit::WebSocketChannel *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  WebCore::NetworkSendQueue::clear((WebKit::WebSocketChannel *)((char *)this + 136));
  WebCore::WebSocketChannelInspector::didCloseWebSocket((WebKit::WebSocketChannel *)((char *)this + 208));
  int v12 = 0;
  int v13 = 1001;
  int v14 = &v12;
  uint64_t v5 = (*(uint64_t (**)(WebKit::WebSocketChannel *))(*(void *)this + 56))(this);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 529;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v15 = v6;
  IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(v6, &v13);
  (*(void (**)(WebKit::WebSocketChannel *, IPC::Encoder **, void))(*(void *)this + 32))(this, &v15, 0);
  BOOL v8 = v15;
  uint64_t v15 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v10, v11);
  }
  __n128 result = v12;
  int v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *non-virtual thunk to'WebKit::WebSocketChannel::disconnect(WebKit::WebSocketChannel *this, void *a2)
{
  return WebKit::WebSocketChannel::disconnect((WebKit::WebSocketChannel *)((char *)this - 24), a2);
}

uint64_t WebKit::WebSocketChannel::didConnect(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  if (!*(unsigned char *)(result + 128))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(result + 56);
    if (v4)
    {
      if (*(void *)(v4 + 8))
      {
        WTF::String::operator=((uint64_t *)(result + 104), a2);
        WTF::String::operator=((uint64_t *)(v3 + 112), a3);
        uint64_t v6 = *(uint64_t (**)(void))(**(void **)(*(void *)(v3 + 56) + 8) + 16);
        return v6();
      }
    }
  }
  return result;
}

uint64_t WebKit::WebSocketChannel::didReceiveText(uint64_t result)
{
  if (!*(unsigned char *)(result + 128))
  {
    uint64_t v1 = *(void *)(result + 56);
    if (v1)
    {
      __n128 result = *(void *)(v1 + 8);
      if (result) {
        return (*(uint64_t (**)(void))(*(void *)result + 24))();
      }
    }
  }
  return result;
}

WTF *WebKit::WebSocketChannel::didReceiveBinaryData(WTF *result, char *a2, WTF *this)
{
  if (!*((unsigned char *)result + 128))
  {
    uint64_t v3 = *((void *)result + 7);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4)
      {
        uint64_t v5 = this;
        uint64_t v10 = 0;
        int v11 = 0;
        int v12 = (int)this;
        if (this)
        {
          if ((unint64_t)this >> 32)
          {
            __break(0xC471u);
            return result;
          }
          uint64_t v7 = (WTF *)WTF::fastMalloc(this);
          int v11 = (int)v5;
          uint64_t v10 = v7;
          do
          {
            char v8 = *a2++;
            *(unsigned char *)uint64_t v7 = v8;
            uint64_t v7 = (WTF *)((char *)v7 + 1);
            uint64_t v5 = (WTF *)((char *)v5 - 1);
          }
          while (v5);
        }
        (*(void (**)(uint64_t, WTF **))(*(void *)v4 + 32))(v4, &v10);
        __n128 result = v10;
        if (v10)
        {
          uint64_t v10 = 0;
          int v11 = 0;
          return (WTF *)WTF::fastFree(result, v9);
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebSocketChannel::didReceiveMessageError(WTF::StringImpl *result, WTF::StringImpl **a2)
{
  uint64_t v2 = *((void *)result + 7);
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v3 = result;
    WebKit::WebSocketChannel::logErrorMessage(result, a2);
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(*((void *)v3 + 7) + 8) + 40);
    return (WTF::StringImpl *)v4();
  }
  return result;
}

WTF::StringImpl *WebKit::WebSocketChannel::networkProcessCrashed(WebKit::WebSocketChannel *this)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::WebSocketChannel::didReceiveMessageError(this, &v4);
  __n128 result = v4;
  uint64_t v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::WebSocketChannel::didSendHandshakeRequest(uint64_t a1, uint64_t a2)
{
  WebCore::WebSocketChannelInspector::willSendWebSocketHandshakeRequest((WebCore::WebSocketChannelInspector *)(a1 + 208), (const WebCore::ResourceRequest *)a2);
  WebCore::ResourceRequestBase::RequestData::operator=(a1 + 224, a2);
  WTF::String::operator=((uint64_t *)(a1 + 376), (uint64_t *)(a2 + 152));
  WTF::String::operator=((uint64_t *)(a1 + 384), (uint64_t *)(a2 + 160));
  uint64_t v4 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  uint64_t v5 = *(WTF::RefCountedBase **)(a1 + 392);
  *(void *)(a1 + 392) = v4;
  if (v5) {
    WTF::RefCounted<WebCore::FormData>::deref(v5);
  }
  uint64_t v6 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 408) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 400) = v6;
  uint64_t v7 = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  char v8 = *(const void **)(a1 + 416);
  *(void *)(a1 + 416) = v7;
  if (v8)
  {
    CFRelease(v8);
  }
}

void WebKit::WebSocketChannel::didReceiveHandshakeResponse(uint64_t a1, uint64_t a2)
{
  WebCore::WebSocketChannelInspector::didReceiveWebSocketHandshakeResponse((WebCore::WebSocketChannelInspector *)(a1 + 208), (const WebCore::ResourceResponse *)a2);
  WebCore::ResourceResponseBase::operator=(a1 + 424, a2);
  uint64_t v4 = *(void *)(a2 + 240);
  *(void *)(a2 + 240) = 0;
  uint64_t v5 = *(const void **)(a1 + 664);
  *(void *)(a1 + 664) = v4;
  if (v5) {
    CFRelease(v5);
  }
  *(unsigned char *)(a1 + 672) = *(unsigned char *)(a2 + 248);
}

uint64_t WebKit::WebSocketChannel::refThreadableWebSocketChannel(uint64_t this)
{
  return this;
}

_DWORD *WebKit::WebSocketChannel::derefThreadableWebSocketChannel(_DWORD *this)
{
  if (this[10] == 1) {
    return (_DWORD *)(*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  --this[10];
  return this;
}

uint64_t WebKit::WebSocketChannel::channelInspector(WebKit::WebSocketChannel *this)
{
  return (uint64_t)this + 208;
}

uint64_t WebKit::WebSocketChannel::progressIdentifier(WebKit::WebSocketChannel *this)
{
  return MEMORY[0x1F4175AA0]((char *)this + 208);
}

BOOL WebKit::WebSocketChannel::hasCreatedHandshake(WebKit::WebSocketChannel *this)
{
  return *((void *)this + 8) != 0;
}

BOOL WebKit::WebSocketChannel::isConnected(WebKit::WebSocketChannel *this)
{
  return (*((unsigned char *)this + 562) & 1) == 0;
}

CFTypeRef *WebKit::WebSocketChannel::clientHandshakeRequest@<X0>(const String *a1@<X0>, CFTypeRef *a2@<X8>)
{
  return WebCore::ResourceRequest::ResourceRequest(a2, a1 + 28);
}

uint64_t WebKit::WebSocketChannel::serverHandshakeResponse(WebKit::WebSocketChannel *this)
{
  return (uint64_t)this + 424;
}

uint64_t non-virtual thunk to'WebKit::WebSocketChannel::channelInspector(WebKit::WebSocketChannel *this)
{
  return (uint64_t)this + 184;
}

uint64_t non-virtual thunk to'WebKit::WebSocketChannel::progressIdentifier(WebKit::WebSocketChannel *this)
{
  return MEMORY[0x1F4175AA0]((char *)this + 184);
}

BOOL non-virtual thunk to'WebKit::WebSocketChannel::hasCreatedHandshake(WebKit::WebSocketChannel *this)
{
  return *((void *)this + 5) != 0;
}

BOOL non-virtual thunk to'WebKit::WebSocketChannel::isConnected(WebKit::WebSocketChannel *this)
{
  return (*((unsigned char *)this + 538) & 1) == 0;
}

CFTypeRef *non-virtual thunk to'WebKit::WebSocketChannel::clientHandshakeRequest@<X0>(const String *a1@<X0>, CFTypeRef *a2@<X8>)
{
  return WebCore::ResourceRequest::ResourceRequest(a2, a1 + 25);
}

uint64_t non-virtual thunk to'WebKit::WebSocketChannel::serverHandshakeResponse(WebKit::WebSocketChannel *this)
{
  return (uint64_t)this + 400;
}

uint64_t non-virtual thunk to'WebKit::WebSocketChannel::refThreadableWebSocketChannel(uint64_t this)
{
  return this;
}

uint64_t non-virtual thunk to'WebKit::WebSocketChannel::derefThreadableWebSocketChannel(uint64_t this)
{
  if (*(_DWORD *)(this + 16) == 1) {
    return (*(uint64_t (**)(void))(*(void *)(this - 24) + 8))();
  }
  --*(_DWORD *)(this + 16);
  return this;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSocketChannel::createMessageQueue(WebCore::Document &,WebKit::WebSocketChannel&)::$_0,void,WTF::CString const&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = (const void *)(v4 + 16);
    size_t v6 = *(void *)(v4 + 8);
  }
  else
  {
    size_t v6 = 0;
    uint64_t v5 = 0;
  }
  WebCore::WebSocketFrame::WebSocketFrame();
  WebCore::WebSocketChannelInspector::didSendWebSocketFrame();
  uint64_t v7 = *(_DWORD **)(a1 + 8);
  if (*a2) {
    uint64_t v8 = *(void *)(*a2 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  ++v7[10];
  int v9 = (void *)WTF::fastMalloc((WTF *)0x20);
  *int v9 = &unk_1EEA0CED0;
  v9[1] = v7;
  uint64_t v9[2] = v7;
  v9[3] = v8;
  uint64_t v10 = (*(uint64_t (**)(_DWORD *))(*(void *)v7 + 56))(v7);
  int v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v11 = 531;
  *((void *)v11 + 1) = v10;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v19 = v11;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v11, v5, v6);
  int v12 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v12 = &unk_1EEA0CEF8;
  v12[1] = v9;
  v18[0] = v12;
  v18[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(_DWORD *, IPC::Encoder **, void *, void))(*(void *)v7 + 40))(v7, &v19, v18, 0);
  uint64_t v14 = v18[0];
  v18[0] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  __n128 result = v19;
  uint64_t v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<void WebKit::WebSocketChannel::sendMessageInternal<Messages::NetworkSocketChannel::SendString>(Messages::NetworkSocketChannel::SendString &&,unsigned long)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EEA0CED0;
  uint64_t v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[10] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[10];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebKit::WebSocketChannel::sendMessageInternal<Messages::NetworkSocketChannel::SendString>(Messages::NetworkSocketChannel::SendString &&,unsigned long)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA0CED0;
  uint64_t v3 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (v3[10] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[10];
    }
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<void WebKit::WebSocketChannel::sendMessageInternal<Messages::NetworkSocketChannel::SendString>(Messages::NetworkSocketChannel::SendString &&,unsigned long)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebKit::WebSocketChannel::decreaseBufferedAmount(*(void **)(a1 + 8), *(void *)(a1 + 24));
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkSocketChannel::SendString,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA0CEF8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkSocketChannel::SendString,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA0CEF8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkSocketChannel::SendString,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSocketChannel::createMessageQueue(WebCore::Document &,WebKit::WebSocketChannel&)::$_1,void,std::span<unsigned char const,18446744073709551615ul>>::call(uint64_t a1, const void *a2, size_t a3)
{
  WebCore::WebSocketFrame::WebSocketFrame();
  WebCore::WebSocketChannelInspector::didSendWebSocketFrame();
  size_t v6 = *(_DWORD **)(a1 + 8);
  ++v6[10];
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v7 = &unk_1EEA0CF48;
  v7[1] = v6;
  uint64_t v7[2] = v6;
  v7[3] = a3;
  uint64_t v8 = (*(uint64_t (**)(_DWORD *))(*(void *)v6 + 56))(v6);
  int v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v9 = 530;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v17 = v9;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v9, a2, a3);
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v10 = &unk_1EEA0CF70;
  v10[1] = v7;
  v16[0] = v10;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(_DWORD *, IPC::Encoder **, void *, void))(*(void *)v6 + 40))(v6, &v17, v16, 0);
  uint64_t v12 = v16[0];
  v16[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  __n128 result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<void WebKit::WebSocketChannel::sendMessageInternal<Messages::NetworkSocketChannel::SendData>(Messages::NetworkSocketChannel::SendData &&,unsigned long)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EEA0CF48;
  uint64_t v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[10] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[10];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebKit::WebSocketChannel::sendMessageInternal<Messages::NetworkSocketChannel::SendData>(Messages::NetworkSocketChannel::SendData &&,unsigned long)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA0CF48;
  uint64_t v3 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (v3[10] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[10];
    }
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<void WebKit::WebSocketChannel::sendMessageInternal<Messages::NetworkSocketChannel::SendData>(Messages::NetworkSocketChannel::SendData &&,unsigned long)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebKit::WebSocketChannel::decreaseBufferedAmount(*(void **)(a1 + 8), *(void *)(a1 + 24));
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkSocketChannel::SendData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA0CF70;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkSocketChannel::SendData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA0CF70;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkSocketChannel::SendData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSocketChannel::createMessageQueue(WebCore::Document &,WebKit::WebSocketChannel&)::$_2,WebCore::NetworkSendQueue::Continue,WebCore::ExceptionCode>::call(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v8[0] = (uint64_t)"Failed to load Blob: exception code = ";
  v8[1] = 39;
  unsigned int v7 = a2;
  uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,int>(v8, &v7, &v6);
  if (v6)
  {
    WebKit::WebSocketChannel::fail(v2, &v6);
    uint64_t v5 = v6;
    size_t v6 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    return 0;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::WebSocketChannel::didReceiveMessage(WTF::StringImpl *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3 = (uint64_t)this;
  ++*((_DWORD *)this + 10);
  uint64_t v4 = a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0xB18:
      unint64_t v5 = *((void *)a3 + 1);
      uint64_t v6 = *(void *)a3;
      unint64_t v7 = ((*((void *)a3 + 2) + 1) & 0xFFFFFFFFFFFFFFFELL) - *(void *)a3;
      if (v5 < v7 || v5 - v7 <= 1)
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        uint64_t v15 = *((void *)v4 + 3);
        if (v15)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v15 + 16))(v15, v6, v5);
            uint64_t v14 = *(IPC::Connection **)v4;
            unint64_t v13 = *((void *)v4 + 1);
          }
          else
          {
            unint64_t v13 = 0;
            uint64_t v14 = 0;
          }
        }
        goto LABEL_33;
      }
      int v9 = (unsigned __int16 *)(v6 + v7);
      *((void *)a3 + 2) = v9 + 1;
      if (!v6)
      {
        unint64_t v13 = v5;
        uint64_t v14 = 0;
LABEL_33:
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        uint64_t v16 = *((void *)v4 + 3);
        if (v16 && v13) {
          (*(void (**)(uint64_t, IPC::Connection *))(*(void *)v16 + 16))(v16, v14);
        }
        goto LABEL_34;
      }
      uint64_t v10 = *v9;
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v17);
      if (!v18)
      {
LABEL_34:
        a2 = *(IPC::Connection **)v4;
        a3 = (IPC::Decoder *)*((void *)v4 + 1);
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        this = (WTF::StringImpl *)*((void *)v4 + 3);
        if (this && a3) {
          this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, IPC::Connection *))(*(void *)this + 16))(this, a2);
        }
        goto LABEL_35;
      }
      LOWORD(v19) = v10;
      char v20 = v17;
      char v21 = 1;
      this = (WTF::StringImpl *)WebKit::WebSocketChannel::didClose((void *)v3, v10, (uint64_t)&v20);
      if (v21)
      {
        this = v20;
        char v20 = 0;
        if (this) {
          goto LABEL_26;
        }
      }
LABEL_35:
      if (*(_DWORD *)(v3 + 40) == 1) {
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, IPC::Connection *, IPC::Decoder *))(*(void *)v3 + 8))(v3, a2, a3);
      }
      --*(_DWORD *)(v3 + 40);
      return this;
    case 0xB19:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String>>(a3, &v19);
      if (v21) {
        WebKit::WebSocketChannel::didConnect(v3, (uint64_t *)&v19, (uint64_t *)&v20);
      }
      this = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v12);
      goto LABEL_35;
    case 0xB1A:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>((uint64_t *)a3, (uint64_t)&v19);
      if (v21) {
        this = WebKit::WebSocketChannel::didReceiveBinaryData((WTF *)v3, (char *)v19, v20);
      }
      goto LABEL_35;
    case 0xB1B:
      IPC::Decoder::decode<std::tuple<WebCore::ResourceResponse>>(a3, &v19);
      if (v23) {
        WebKit::WebSocketChannel::didReceiveHandshakeResponse(v3, (uint64_t)&v19);
      }
      this = std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v19, v11);
      goto LABEL_35;
    case 0xB1C:
      this = IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v19);
      if ((_BYTE)v20)
      {
        this = WebKit::WebSocketChannel::didReceiveMessageError((WTF::StringImpl *)v3, &v19);
        goto LABEL_24;
      }
      goto LABEL_35;
    case 0xB1D:
      this = IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v19);
      if ((_BYTE)v20)
      {
        this = (WTF::StringImpl *)WebKit::WebSocketChannel::didReceiveText(v3);
LABEL_24:
        if ((_BYTE)v20)
        {
          this = v19;
          uint64_t v19 = 0;
          if (this)
          {
LABEL_26:
            if (*(_DWORD *)this == 2) {
              this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
            }
            else {
              *(_DWORD *)this -= 2;
            }
          }
        }
      }
      goto LABEL_35;
    case 0xB1E:
      IPC::Decoder::decode<std::tuple<WebCore::ResourceRequest>>(a3, &v19);
      if (v22) {
        WebKit::WebSocketChannel::didSendHandshakeRequest(v3, (uint64_t)&v19);
      }
      this = std::__optional_destruct_base<std::tuple<WebCore::ResourceRequest>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&v19);
      goto LABEL_35;
    default:
      goto LABEL_35;
  }
}

WTF::StringImpl *non-virtual thunk to'WebKit::WebSocketChannel::didReceiveMessage(WebKit::WebSocketChannel *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::WebSocketChannel::didReceiveMessage((WebKit::WebSocketChannel *)((char *)this - 8), a2, a3);
}

uint64_t WebKit::WebSocketTask::WebSocketTask(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t *a10, char a11, char a12)
{
  *(void *)(a1 + ++*(_DWORD *)(this + 40) = 0;
  WebKit::NetworkTaskCocoa::NetworkTaskCocoa(a1, *(void *)(*(void *)(a2 + 48) + 8), a11);
  *(void *)a1 = &unk_1EEA0CFC0;
  ++*(_DWORD *)(a2 + 24);
  *(void *)(a1 + 48) = a2;
  uint64_t v20 = *a10;
  *a10 = 0;
  *(void *)(a1 + 56) = v20;
  *(_WORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a3;
  uint64_t v21 = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 80) = *a4;
  *(void *)(a1 + 96) = v21;
  *(void *)(a1 + 104) = a5;
  *(void *)(a1 + 112) = a6;
  uint64_t v22 = *a7;
  *a7 = 0;
  *(void *)(a1 + 120) = v22;
  char v23 = *(_DWORD **)(a8 + 160);
  if (v23) {
    *v23 += 2;
  }
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = v23;
  *(unsigned char *)(a1 + 136) = a12;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  if (WebCore::operator==()) {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 144, a9);
  }
  int shouldBlockCookies = a12 == 2;
  uint64_t v25 = *(void *)(*(void *)(a1 + 48) + 48);
  if (!v25 || (uint64_t v26 = *(void *)(v25 + 8)) == 0)
  {
    if (a12 != 2) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v27 = *(void *)(v26 + 32);
  v32[0] = *(void *)(v26 + 24);
  uint64_t v28 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v27 + 232), v32);
  if (a12 != 2 && v28)
  {
    long long v34 = *a4;
    uint64_t v35 = *((void *)a4 + 2);
    int shouldBlockCookies = WebCore::NetworkStorageSession::shouldBlockCookies();
  }
  if (shouldBlockCookies) {
LABEL_13:
  }
    WebKit::NetworkTaskCocoa::blockCookies((unsigned char *)a1);
LABEL_14:
  WebKit::WebSocketTask::readNextMessage((WebKit::WebSocketTask *)a1);
  uint64_t v29 = *(void *)(a1 + 48);
  MEMORY[0x199732A50](v32, [*(id *)(a1 + 56) currentRequest]);
  WebKit::NetworkSocketChannel::didSendHandshakeRequest(v29, (WebCore::ResourceRequest *)v32);
  CFTypeRef v30 = cf;
  CFTypeRef cf = 0;
  if (v30) {
    CFRelease(v30);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v32);
  return a1;
}

void sub_199411F60(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int **a10, uint64_t a11, char a12)
{
  uint64_t v15 = *(unsigned int *)(v12 + 168);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1EEA0CFF0[v15])(&a12, v13);
  }
  *(_DWORD *)(v12 + 168) = -1;
  uint64_t v16 = *(WTF::StringImpl **)(v12 + 128);
  *(void *)(v12 + 128) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, a2);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = *(unsigned int **)(v12 + 120);
  *(void *)(v12 + 120) = 0;
  if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, a2);
  }
  char v18 = *(const void **)(v12 + 56);
  *(void *)(v12 + 56) = 0;
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v19 = *(void *)(v12 + 48);
  if (v19)
  {
    int v20 = *(_DWORD *)(v19 + 24);
    if (!v20)
    {
      __break(0xC471u);
      JUMPOUT(0x199412040);
    }
    *(_DWORD *)(v19 + 24) = v20 - 1;
  }
  WebKit::NetworkTaskCocoa::~NetworkTaskCocoa((WebKit::NetworkTaskCocoa *)v12, a2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(a10, v21);
  _Unwind_Resume(a1);
}

void WebKit::WebSocketTask::readNextMessage(WebKit::WebSocketTask *this)
{
  uint64_t v2 = (void *)*((void *)this + 7);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 10, (uint64_t)this);
  uint64_t v3 = (atomic_uint *)*((void *)this + 5);
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  uint64_t v4 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
  *uint64_t v4 = MEMORY[0x1E4F14398];
  v4[1] = 50331650;
  v4[2] = WTF::BlockPtr<void ()(NSURLSessionWebSocketMessage *,NSError *)>::fromCallable<WebKit::WebSocketTask::readNextMessage(void)::$_0>(WebKit::WebSocketTask::readNextMessage(void)::$_0)::{lambda(void *,NSURLSessionWebSocketMessage *,NSError *)#1}::__invoke;
  v4[3] = &WTF::BlockPtr<void ()(NSURLSessionWebSocketMessage *,NSError *)>::fromCallable<WebKit::WebSocketTask::readNextMessage(void)::$_0>(WebKit::WebSocketTask::readNextMessage(void)::$_0)::descriptor;
  v4[4] = this;
  v4[5] = v3;
  [v2 receiveMessageWithCompletionHandler:v4];

  _Block_release(v4);
}

void sub_199412118(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebSocketTask::~WebSocketTask(WebKit::WebSocketTask *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA0CFC0;
  uint64_t v3 = *((unsigned int *)this + 42);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1EEA0CFF0[v3])(&v10, (char *)this + 144);
  }
  *((_DWORD *)this + 42) = -1;
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 16);
  *((void *)this + ++*(_DWORD *)(this + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unint64_t v5 = (unsigned int *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *((void *)this + 6);
  if (!v7) {
    goto LABEL_15;
  }
  int v8 = *(_DWORD *)(v7 + 24);
  if (v8)
  {
    *(_DWORD *)(v7 + 24) = v8 - 1;
LABEL_15:
    WebKit::NetworkTaskCocoa::~NetworkTaskCocoa(this, a2);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 5, v9);
    return;
  }
  __break(0xC471u);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebSocketTask::~WebSocketTask(this, a2);

  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebKit::WebSocketTask::didConnect(WebKit::WebSocketTask *this, const WTF::String *a2)
{
  uint64_t v12 = 0;
  uint64_t v4 = (void *)[*((id *)this + 7) response];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    MEMORY[0x19972EAD0](v10, [v4 valueForHTTPHeaderField:@"Sec-WebSocket-Extensions"]);
    uint64_t v12 = (WTF::StringImpl *)v10[0];
  }
  *((unsigned char *)this + 65) = 1;
  WebKit::NetworkSocketChannel::didConnect(*((WebKit::NetworkSocketChannel **)this + 6), a2, (const WTF::String *)&v12);
  uint64_t v5 = *((void *)this + 6);
  WebCore::ResourceResponse::ResourceResponse((WebCore::ResourceResponse *)v10, (NSURLResponse *)[*((id *)this + 7) response]);
  WebKit::NetworkSocketChannel::didReceiveHandshakeResponse(v5, (WebCore::ResourceResponseBase *)v10);
  CFTypeRef v7 = cf;
  CFTypeRef cf = 0;
  if (v7) {
    CFRelease(v7);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v10, v6);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_199412398(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *(WTF::StringImpl **)(v2 - 40);
  *(void *)(v2 - ++*(_DWORD *)(this + 40) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebSocketTask::sendString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = [[NSString alloc] initWithBytes:a2 length:a3 encoding:4];
  if (v6)
  {
    CFTypeRef v7 = (const void *)v6;
    int v8 = (const void *)[objc_alloc(MEMORY[0x1E4F18E18]) initWithString:v6];
    int v9 = *(void **)(a1 + 56);
    uint64_t v10 = *a4;
    *a4 = 0;
    int v11 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
    *int v11 = MEMORY[0x1E4F14398];
    v11[1] = 50331650;
    v11[2] = WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::WebSocketTask::sendString(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebSocketTask::sendString(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v11[3] = &WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::WebSocketTask::sendString(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebSocketTask::sendString(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
    v11[4] = v10;
    [v9 sendMessage:v8 completionHandler:v11];
    _Block_release(v11);
    if (v8) {
      CFRelease(v8);
    }
    CFRelease(v7);
  }
  else
  {
    WTF::CompletionHandler<void ()(void)>::operator()(a4);
  }
}

void sub_19941250C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  _Block_release(v4);
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebSocketTask::sendData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a2 length:a3];
  CFTypeRef v7 = (const void *)[objc_alloc(MEMORY[0x1E4F18E18]) initWithData:v6];
  int v8 = *(void **)(a1 + 56);
  uint64_t v9 = *a4;
  *a4 = 0;
  uint64_t v10 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  *uint64_t v10 = MEMORY[0x1E4F14398];
  v10[1] = 50331650;
  v10[2] = WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::WebSocketTask::sendData(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebSocketTask::sendData(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
  v10[3] = &WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::WebSocketTask::sendData(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebSocketTask::sendData(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
  v10[4] = v9;
  [v8 sendMessage:v7 completionHandler:v10];
  _Block_release(v10);
  if (v7) {
    CFRelease(v7);
  }
  if (v6)
  {
    CFRelease(v6);
  }
}

void sub_1994126AC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  _Block_release(v4);
  if (v2)
  {
    CFRelease(v2);
    if (!v1) {
LABEL_4:
    }
      _Unwind_Resume(a1);
  }
  else if (!v1)
  {
    goto LABEL_4;
  }
  CFRelease(v1);
  goto LABEL_4;
}

void sub_199412720()
{
  if (!v0) {
    JUMPOUT(0x1994126DCLL);
  }
  JUMPOUT(0x1994126D4);
}

WTF *WebKit::WebSocketTask::close(WebKit::WebSocketTask *this, int a2, const WTF::String *a3)
{
  if (a2 == -1) {
    int v4 = 0;
  }
  else {
    int v4 = a2;
  }
  WTF::String::utf8();
  if (v12)
  {
    uint64_t v5 = (char *)v12 + 16;
    uint64_t v6 = *((void *)v12 + 1);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  CFTypeRef v7 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v5 length:v6];
  char v8 = objc_opt_respondsToSelector();
  uint64_t v9 = (void *)*((void *)this + 7);
  if (v8) {
    [v9 _sendCloseCode:v4 reason:v7];
  }
  else {
    [v9 cancelWithCloseCode:v4 reason:v7];
  }
  if (v7) {
    CFRelease(v7);
  }
  uint64_t result = v12;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1) {
      return (WTF *)WTF::fastFree(v12, v10);
    }
    else {
      --*(_DWORD *)v12;
    }
  }
  return result;
}

void sub_199412810(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (v10) {
    CFRelease(v10);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 1) {
      WTF::fastFree(a10, a2);
    }
    else {
      --*(_DWORD *)a10;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebSocketTask::task(WebKit::WebSocketTask *this)
{
  return *((void *)this + 7);
}

__n128 WebKit::WebSocketTask::frameID@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = this[5];
  *a2 = result;
  a2[1].n128_u64[0] = this[6].n128_u64[0];
  return result;
}

uint64_t WebKit::WebSocketTask::pageID(WebKit::WebSocketTask *this)
{
  return *((void *)this + 13);
}

uint64_t WebKit::WebSocketTask::storedCredentialsPolicy(WebKit::WebSocketTask *this)
{
  return *((unsigned __int8 *)this + 136);
}

unsigned int *WTF::BlockPtr<void ()(NSURLSessionWebSocketMessage *,NSError *)>::fromCallable<WebKit::WebSocketTask::readNextMessage(void)::$_0>(WebKit::WebSocketTask::readNextMessage(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  __n128 result = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this + 40) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t *WTF::BlockPtr<void ()(NSURLSessionWebSocketMessage *,NSError *)>::fromCallable<WebKit::WebSocketTask::readNextMessage(void)::$_0>(WebKit::WebSocketTask::readNextMessage(void)::$_0)::{lambda(void *,NSURLSessionWebSocketMessage *,NSError *)#1}::__invoke(uint64_t *result, void *a2, void *a3)
{
  uint64_t v3 = result[5];
  if (v3 && *(void *)(v3 + 8))
  {
    uint64_t v5 = result[4];
    if (a3)
    {
      __n128 result = (uint64_t *)[*(id *)(v5 + 56) closeCode];
      if (!result)
      {
        if (!*(unsigned char *)(v5 + 65))
        {
          WebCore::ResourceResponse::ResourceResponse((WebCore::ResourceResponse *)v19, (NSURLResponse *)[*(id *)(v5 + 56) response]);
          if ((v20 & 1) == 0) {
            WebKit::NetworkSocketChannel::didReceiveHandshakeResponse(*(void *)(v5 + 48), (WebCore::ResourceResponseBase *)v19);
          }
          CFTypeRef v7 = cf;
          CFTypeRef cf = 0;
          if (v7) {
            CFRelease(v7);
          }
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v19, v6);
        }
        uint64_t v8 = *(void *)(v5 + 48);
        MEMORY[0x19972EAD0](v19, [a3 localizedDescription]);
        WebKit::NetworkSocketChannel::didReceiveMessageError(v8, (uint64_t *)v19);
        __n128 result = (uint64_t *)v19[0];
        v19[0] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            __n128 result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        if (!*(unsigned char *)(v5 + 64))
        {
          *(unsigned char *)(v5 + 64) = 1;
          return WebKit::NetworkSocketChannel::didClose(*(uint64_t **)(v5 + 48), (WTF::StringImpl *)0x3EE, MEMORY[0x1E4F30980]);
        }
      }
    }
    else
    {
      uint64_t v11 = [a2 type];
      uint64_t v12 = *(WebKit::NetworkSocketChannel **)(v5 + 48);
      if (v11 == 1)
      {
        MEMORY[0x19972EAD0](v19, [a2 string]);
        WebKit::NetworkSocketChannel::didReceiveText(v12, (const WTF::String *)v19);
        uint64_t v14 = v19[0];
        v19[0] = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, v13);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
      }
      else
      {
        uint64_t v15 = (void *)[a2 data];
        if (v15)
        {
          uint64_t v16 = v15;
          uint64_t v17 = (const void *)[v15 bytes];
          size_t v18 = [v16 length];
        }
        else
        {
          uint64_t v17 = 0;
          size_t v18 = 0;
        }
        WebKit::NetworkSocketChannel::didReceiveBinaryData((uint64_t)v12, v17, v18);
      }
      return (uint64_t *)WebKit::WebSocketTask::readNextMessage((WebKit::WebSocketTask *)v5);
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::WebSocketTask::sendString(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebSocketTask::sendString(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::WebSocketTask::sendString(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebSocketTask::sendString(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 32));
}

uint64_t WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::WebSocketTask::sendData(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebSocketTask::sendData(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::WebSocketTask::sendData(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebSocketTask::sendData(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 32));
}

uint64_t WebKit::WebSpeechRecognitionConnection::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 2847) {
    return IPC::handleMessage<Messages::WebSpeechRecognitionConnection::DidReceiveUpdate,WebKit::WebSpeechRecognitionConnection,WebKit::WebSpeechRecognitionConnection,void ()(WebCore::SpeechRecognitionUpdate &&)>((uint64_t *)a3, this);
  }
  return this;
}

uint64_t IPC::handleMessage<Messages::WebSpeechRecognitionConnection::DidReceiveUpdate,WebKit::WebSpeechRecognitionConnection,WebKit::WebSpeechRecognitionConnection,void ()(WebCore::SpeechRecognitionUpdate &&)>(uint64_t *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::SpeechRecognitionUpdate,void>::decode(a1, (uint64_t)&v16);
  if (!v20)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    BOOL v8 = !v7 || v6 == 0;
    if (v8 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5), !v20))
    {
      LOBYTE(v11) = 0;
      char v15 = 0;
      goto LABEL_15;
    }
  }
  uint64_t v11 = v16;
  char v12 = v17;
  v13[0] = 0;
  int v14 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>>((uint64_t)v13, (uint64_t)v18);
  char v15 = 1;
  if (v20)
  {
    if (v19 != -1)
    {
      ((void (*)(char *, unsigned char *))off_1EEA0D060[v19])(&v21, v18);
      if (!v15)
      {
LABEL_15:
        uint64_t v9 = *a1;
        uint64_t v10 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        uint64_t result = a1[3];
        if (!result) {
          return result;
        }
        if (!v10) {
          return result;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v9);
        if (!v15) {
          return result;
        }
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 56))(a2, &v11);
  if (v15)
  {
    if (v14 != -1) {
      return ((uint64_t (*)(uint64_t *, unsigned char *))off_1EEA0D060[v14])(&v16, v13);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::WebSpeechRecognitionConnection::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 2847) {
    return IPC::handleMessage<Messages::WebSpeechRecognitionConnection::DidReceiveUpdate,WebKit::WebSpeechRecognitionConnection,WebKit::WebSpeechRecognitionConnection,void ()(WebCore::SpeechRecognitionUpdate &&)>((uint64_t *)a3, this - 16);
  }
  return this;
}

uint64_t IPC::handleMessage<Messages::WebSWClientConnection::JobRejectedInServer,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ExceptionData &&)>(uint64_t *a1)
{
  IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  if (v2 && (IPC::Decoder::decode<WebCore::ExceptionData>(a1, (uint64_t)v9), v11))
  {
    BOOL v8 = v10;
    WebCore::SWClientConnection::jobRejectedInServer();
    uint64_t result = (uint64_t)v8;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        return WTF::StringImpl::destroy(v8, v3);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
  }
  else
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::WebSWClientConnection::RegistrationJobResolvedInServer,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationData &&,WebCore::ShouldNotifyWhenResolved)>(uint64_t *a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  if (!v3)
  {
    LOBYTE(v34) = 0;
    char v46 = 0;
LABEL_42:
    uint64_t v19 = *a1;
    uint64_t v20 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result) {
      BOOL v21 = v20 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      return result;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v19);
    if (!v46) {
      return result;
    }
    goto LABEL_14;
  }
  uint64_t v4 = v2;
  IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationData>(a1, v47);
  if (!v57)
  {
    LOBYTE(v34) = 0;
    char v46 = 0;
    goto LABEL_13;
  }
  unint64_t v5 = a1[1];
  uint64_t v6 = (WTF::StringImpl *)*a1;
  unint64_t v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v24 = a1[3];
    if (v24)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
        uint64_t v23 = *a1;
        uint64_t v22 = a1[1];
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
      }
    }
    goto LABEL_49;
  }
  BOOL v8 = (unsigned __int8 *)v6 + v7;
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    uint64_t v22 = v5;
    uint64_t v23 = 0;
LABEL_49:
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v25 = a1[3];
    if (v25)
    {
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23, v22);
        uint64_t v6 = (WTF::StringImpl *)*a1;
        unint64_t v5 = a1[1];
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
      }
    }
    goto LABEL_50;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_50:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v26 = a1[3];
    if (v26)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v26 + 16))(v26, v6);
        uint64_t v31 = a1[3];
        uint64_t v6 = (WTF::StringImpl *)*a1;
        uint64_t v32 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        if (v31)
        {
          if (v32) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v31 + 16))(v31, v6);
          }
        }
      }
    }
    char v11 = 0;
    LOBYTE(v34) = 0;
    goto LABEL_7;
  }
  BOOL v10 = v9 != 0;
  uint64_t v34 = v4;
  WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)v35, (uint64_t)v47);
  BOOL v45 = v10;
  char v11 = 1;
LABEL_7:
  char v46 = v11;
  if (v57)
  {
    if (v56)
    {
      char v12 = v55;
      uint64_t v55 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v6);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    if (v54)
    {
      uint64_t v27 = v53;
      long long v53 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v6);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
    }
    if (v52)
    {
      uint64_t v28 = v51;
      uint64_t v51 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2) {
          WTF::StringImpl::destroy(v28, v6);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
      }
    }
    uint64_t v29 = v50;
    uint64_t v50 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v6);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    CFTypeRef v30 = v49;
    char v49 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v6);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
    if (v48 != -1) {
      ((void (*)(char *, unsigned char *))off_1EEA0D078[v48])(&v33, v47);
    }
  }
LABEL_13:
  if (!v46) {
    goto LABEL_42;
  }
LABEL_14:
  uint64_t result = (WTF::StringImpl *)WebCore::SWClientConnection::registrationJobResolvedInServer();
  if (v46)
  {
    if (v44)
    {
      char v15 = v43;
      unsigned int v43 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v14);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
    if (v42)
    {
      uint64_t v16 = v41;
      int v41 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v14);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    if (v40)
    {
      char v17 = v39;
      int v39 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v14);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
    }
    size_t v18 = v38;
    uint64_t v38 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v14);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    uint64_t result = v37;
    uint64_t v37 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    if (v36 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unsigned char *))off_1EEA0D078[v36])(v47, v35);
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::WebSWClientConnection::StartScriptFetchForServer,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationKey &&,WebCore::FetchOptionsCache)>(uint64_t *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  if (!v2)
  {
    char v21 = 0;
    goto LABEL_7;
  }
  IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationKey>(a1, v22);
  char v4 = v26;
  if (v26)
  {
    unsigned __int16 v5 = IPC::ArgumentCoder<WebCore::FetchOptionsCache,void>::decode<IPC::Decoder>(a1);
    if (v5 <= 0xFFu)
    {
      char v3 = (WTF::StringImpl *)*a1;
      uint64_t v12 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v13 = a1[3];
      if (v13 && v12) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v13 + 16))(v13, v3);
      }
      char v4 = 0;
    }
    else
    {
      if (!v26) {
        __break(1u);
      }
      char v6 = v5;
      v15[0] = 0;
      int v16 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, (uint64_t)v22);
      unint64_t v7 = v23;
      uint64_t v23 = 0;
      char v17 = v7;
      long long v18 = v24;
      long long v19 = v25;
      LODWORD(v24) = v24 & 0xFFFFFFFE;
      char v20 = v6;
      char v4 = 1;
    }
  }
  char v21 = v4;
  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationKey,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v3);
  if (!v21)
  {
LABEL_7:
    uint64_t v8 = *a1;
    uint64_t v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11) {
      return result;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v8);
    if (!v21) {
      return result;
    }
  }
  uint64_t result = (WTF::StringImpl *)WebCore::SWClientConnection::startScriptFetchForServer();
  if (v21)
  {
    uint64_t result = v17;
    char v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    if (v16 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unsigned char *))off_1EEA0D078[v16])(v22, v15);
    }
  }
  return result;
}

void IPC::handleMessage<Messages::WebSWClientConnection::UpdateRegistrationState,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData> const&)>(uint64_t *a1)
{
  IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>>(a1, &v4);
  if (v7)
  {
    WebCore::SWClientConnection::updateRegistrationState();
    if (v7) {
      BOOL v2 = v6 == 0;
    }
    else {
      BOOL v2 = 1;
    }
    if (!v2)
    {
      char v3 = v5;
      unsigned __int16 v5 = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2) {
          WTF::StringImpl::destroy(v3, v1);
        }
        else {
          *(_DWORD *)v3 -= 2;
        }
      }
    }
  }
}

uint64_t IPC::handleMessage<Messages::WebSWClientConnection::SetRegistrationLastUpdateTime,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WallTime)>(uint64_t *a1)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WallTime>>(a1, (uint64_t)&v2);
  if (v3) {
    return WebCore::SWClientConnection::setRegistrationLastUpdateTime();
  }
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::WebSWClientConnection::NotifyClientsOfControllerChange,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WTF::HashSet<WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits> const&,std::optional<WebCore::ServiceWorkerData> &&)>(IPC::Decoder *a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
  if (v2 < v4 || v2 - v4 <= 3)
  {
    unint64_t v37 = 0;
    uint64_t v38 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v39 = *((void *)a1 + 3);
    if (v39)
    {
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v3, v2);
        uint64_t v38 = *(void *)a1;
        unint64_t v37 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v37 = 0;
        uint64_t v38 = 0;
      }
    }
    goto LABEL_74;
  }
  char v6 = (int *)(v3 + v4);
  *((void *)a1 + 2) = v6 + 1;
  if (!v3)
  {
    unint64_t v37 = v2;
    uint64_t v38 = 0;
LABEL_74:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v40 = *((void *)a1 + 3);
    if (v40 && v37) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v38);
    }
    goto LABEL_60;
  }
  int v7 = *v6;
  uint64_t v41 = 0;
  if (v7)
  {
    int v8 = 0;
    while (1)
    {
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a1, (uint64_t)v49);
      if (!(_BYTE)v51 || *(void *)&v49[16] == -1 || !*(void *)&v49[16] && *(_OWORD *)v49 == 0)
      {
        uint64_t v10 = v41;
        if (!v41) {
          goto LABEL_60;
        }
LABEL_59:
        WTF::fastFree((WTF *)(v10 - 16), v9);
LABEL_60:
        uint64_t v31 = *(void *)a1;
        uint64_t v32 = *((void *)a1 + 1);
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t v33 = *((void *)a1 + 3);
        if (v33 && v32) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v31);
        }
        v49[0] = 0;
        char v55 = 0;
LABEL_62:
        uint64_t v34 = *(void *)a1;
        uint64_t v35 = *((void *)a1 + 1);
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
        if (result && v35) {
          uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v34);
        }
        if (v55) {
          goto LABEL_53;
        }
        return result;
      }
      uint64_t v10 = v41;
      if (v41
        || (WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WebCore::ProcessQualified<WTF::UUID>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(&v41),
            (uint64_t v10 = v41) != 0))
      {
        unsigned int v11 = *(_DWORD *)(v10 - 8);
      }
      else
      {
        unsigned int v11 = 0;
      }
      LODWORD(v42) = -1640531527;
      WORD2(v42) = 0;
      BYTE6(v42) = 0;
      WTF::addArgs<WTF::UUID>(&v42, v49);
      uint64_t v12 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v42) & v11;
      uint64_t v13 = (void *)(v10 + 32 * v12);
      uint64_t v15 = *v13;
      uint64_t v14 = v13[1];
      uint64_t v16 = v13[2];
      if (*(_OWORD *)v13 != 0 || v16 != 0)
      {
        uint64_t v9 = 0;
        int v18 = 1;
        while (1)
        {
          BOOL v19 = v14 == *(void *)&v49[8] && v15 == *(void *)v49;
          if (v19 && v16 == *(void *)&v49[16]) {
            goto LABEL_59;
          }
          if (v16 == -1) {
            uint64_t v9 = v13;
          }
          uint64_t v12 = (v12 + v18) & v11;
          uint64_t v13 = (void *)(v10 + 32 * v12);
          uint64_t v15 = *v13;
          uint64_t v14 = v13[1];
          uint64_t v16 = v13[2];
          ++v18;
          if (*(_OWORD *)v13 == 0 && v16 == 0)
          {
            if (!v9) {
              break;
            }
            *uint64_t v9 = 0;
            v9[1] = 0;
            uint64_t v9[2] = 0;
            --*(_DWORD *)(v10 - 16);
            long long v22 = *(_OWORD *)v49;
            uint64_t v9[2] = *(void *)&v49[16];
            *(_OWORD *)uint64_t v9 = v22;
            int v23 = *(_DWORD *)(v10 - 12) + 1;
            *(_DWORD *)(v10 - 12) = v23;
            goto LABEL_38;
          }
        }
      }
      long long v24 = *(_OWORD *)v49;
      void v13[2] = *(void *)&v49[16];
      *(_OWORD *)uint64_t v13 = v24;
      int v23 = *(_DWORD *)(v10 - 12) + 1;
      *(_DWORD *)(v10 - 12) = v23;
LABEL_38:
      uint64_t v25 = (*(_DWORD *)(v10 - 16) + v23);
      unint64_t v26 = *(unsigned int *)(v10 - 4);
      if (v26 > 0x400) {
        break;
      }
      if (3 * v26 <= 4 * v25) {
        goto LABEL_40;
      }
LABEL_41:
      if (++v8 == v7)
      {
        uint64_t v36 = v41;
        goto LABEL_47;
      }
    }
    if (v26 > 2 * v25) {
      goto LABEL_41;
    }
LABEL_40:
    WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WebCore::ProcessQualified<WTF::UUID>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(&v41);
    goto LABEL_41;
  }
  uint64_t v36 = 0;
LABEL_47:
  IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerData>>((uint64_t *)a1, (uint64_t)&v42);
  if (v48)
  {
    *(void *)char v49 = v36;
    v49[8] = 0;
    char v54 = 0;
    if (v47)
    {
      *(_OWORD *)&v49[8] = v42;
      uint64_t v28 = v43;
      unsigned int v43 = 0;
      uint64_t v50 = v28;
      long long v51 = v44;
      long long v52 = v45;
      LODWORD(v44) = v44 & 0xFFFFFFFE;
      __int16 v53 = v46;
      char v54 = 1;
    }
    char v55 = 1;
  }
  else
  {
    v49[0] = 0;
    char v55 = 0;
    if (!v36) {
      goto LABEL_62;
    }
    WTF::fastFree((WTF *)(v36 - 16), v27);
    if (!v55) {
      goto LABEL_62;
    }
  }
LABEL_53:
  uint64_t result = (WTF::StringImpl *)WebCore::SWClientConnection::notifyClientsOfControllerChange();
  if (v55)
  {
    if (v54)
    {
      uint64_t result = v50;
      uint64_t v50 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    if (*(void *)v49) {
      return (WTF::StringImpl *)WTF::fastFree((WTF *)(*(void *)v49 - 16), v30);
    }
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::WebSWClientConnection::UpdateBackgroundFetchRegistration,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WebCore::BackgroundFetchInformation const&)>(uint64_t *a1)
{
  IPC::Decoder::decode<WebCore::BackgroundFetchInformation>(a1, (uint64_t)v8);
  if (v9)
  {
    int v7 = (WTF::StringImpl *)v8[1];
    WebCore::SWClientConnection::updateBackgroundFetchRegistration();
    uint64_t result = (uint64_t)v7;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        return WTF::StringImpl::destroy(v7, v2);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  else
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v6 = v5 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v4);
    }
  }
  return result;
}

void IPC::handleMessage<Messages::WebSWClientConnection::SetSWOriginTableSharedMemory,WebKit::WebSWClientConnection,WebKit::WebSWClientConnection,void ()(WebCore::SharedMemoryHandle &&)>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(a1, (uint64_t)v3);
  if (v4)
  {
    WebKit::WebSWClientConnection::setSWOriginTableSharedMemory(a2);
    if (v4) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v3);
    }
  }
}

unsigned int *IPC::handleMessage<Messages::WebSWClientConnection::PostMessageToServiceWorkerClient,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WebCore::ProcessQualified<WTF::UUID>,WebCore::MessageWithMessagePorts &&,WebCore::ServiceWorkerData &&,WTF::String &&)>(IPC::Decoder *a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a1, (uint64_t)v31);
  if (!v32) {
    goto LABEL_30;
  }
  IPC::Decoder::decode<WebCore::MessageWithMessagePorts>(a1, (uint64_t)&v15);
  if (!v17) {
    goto LABEL_29;
  }
  IPC::Decoder::decode<WebCore::ServiceWorkerData>((uint64_t *)a1, (uint64_t)&v33);
  if (!v36) {
    goto LABEL_29;
  }
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v18);
  int v3 = v19;
  if (v19)
  {
    if (v32 && v17 && v36)
    {
      long long v20 = v31[0];
      long long v21 = v31[1];
      long long v4 = v15;
      long long v15 = 0uLL;
      *(_OWORD *)long long v22 = v4;
      *(void *)&long long v4 = v16;
      uint64_t v16 = 0;
      uint64_t v23 = v4;
      long long v24 = v33;
      uint64_t v5 = (WTF::StringImpl *)v34[0];
      v34[0] = 0;
      uint64_t v25 = v5;
      long long v26 = *(_OWORD *)&v34[1];
      long long v27 = *(_OWORD *)&v34[3];
      LODWORD(v34[1]) &= ~1u;
      __int16 v28 = v35;
      uint64_t v29 = v18;
      char v30 = 1;
      goto LABEL_9;
    }
    __break(1u);
  }
  LOBYTE(v20) = 0;
  char v30 = 0;
  if (!v36)
  {
LABEL_29:
    std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v2);
    goto LABEL_30;
  }
LABEL_9:
  BOOL v6 = (WTF::StringImpl *)v34[0];
  v34[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v2);
  if (v3)
  {
    long long v33 = v20;
    *(_OWORD *)uint64_t v34 = v21;
    uint64_t result = (unsigned int *)WebCore::SWClientConnection::postMessageToServiceWorkerClient();
    if (v30)
    {
      char v9 = v29;
      uint64_t v29 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v8);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      uint64_t v10 = v25;
      uint64_t v25 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v8);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      unsigned int v11 = v22[1];
      if (v22[1])
      {
        v22[1] = 0;
        LODWORD(v23) = 0;
        WTF::fastFree(v11, v8);
      }
      uint64_t result = (unsigned int *)v22[0];
      v22[0] = 0;
      if (result) {
        return WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(result);
      }
    }
    return result;
  }
LABEL_30:
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (unsigned int *)*((void *)a1 + 3);
  if (result) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14) {
    return (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)result + 16))(result, v12);
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::WebSWClientConnection::SetServiceWorkerClientIsControlled,WebKit::WebSWClientConnection,WebKit::WebSWClientConnection,void ()(WebCore::ProcessQualified<WTF::UUID>,WebCore::ServiceWorkerRegistrationData &&,WTF::CompletionHandler<void ()(BOOL)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  long long v4 = (uint64_t *)a2;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a2, (uint64_t)v36);
  if (!v37) {
    goto LABEL_43;
  }
  IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationData>(v4, &v38);
  if (v48)
  {
    if (!v37) {
      goto LABEL_42;
    }
    long long v23 = v36[0];
    long long v24 = v36[1];
    WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)v25, (uint64_t)&v38);
    char v35 = 1;
    if (v48)
    {
      if (v47)
      {
        int v7 = v46;
        __int16 v46 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2) {
            WTF::StringImpl::destroy(v7, v6);
          }
          else {
            *(_DWORD *)v7 -= 2;
          }
        }
      }
      if (v45)
      {
        int v18 = v44;
        long long v44 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v6);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
      }
      if (v43)
      {
        unsigned __int8 v19 = v42;
        long long v42 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v6);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
      }
      long long v20 = v41;
      uint64_t v41 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v6);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      long long v21 = v40;
      uint64_t v40 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v6);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      if (DWORD2(v39) != -1) {
        ((void (*)(char *, long long *))off_1EEA0D078[DWORD2(v39)])(&v22, &v38);
      }
    }
  }
  else
  {
    LOBYTE(v23) = 0;
    char v35 = 0;
  }
  if (!v35) {
    goto LABEL_44;
  }
  while (1)
  {
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
    if (!(_BYTE)v9) {
      break;
    }
    *(void *)&long long v38 = result;
    long long v4 = (uint64_t *)&v38 + 1;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v38 + 1, a1);
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v10 = &unk_1EEA0D098;
    v10[1] = v38;
    uint64_t v11 = *((void *)&v38 + 1);
    *((void *)&v38 + 1) = 0;
    v10[2] = v11;
    *(void *)&v36[0] = v10;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v38 + 1);
    if (v35)
    {
      long long v38 = v23;
      long long v39 = v24;
      WebKit::WebSWClientConnection::setServiceWorkerClientIsControlled(a3, (uint64_t)&v38, (uint64_t)v25, (uint64_t *)v36);
      uint64_t result = *(WTF::StringImpl **)&v36[0];
      *(void *)&v36[0] = 0;
      if (result) {
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
      }
      break;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    LOBYTE(v23) = 0;
    char v35 = 0;
LABEL_44:
    uint64_t v16 = *v4;
    uint64_t v17 = v4[1];
    *long long v4 = 0;
    v4[1] = 0;
    uint64_t result = (WTF::StringImpl *)v4[3];
    if (result)
    {
      if (v17)
      {
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v16);
        if (v35) {
          continue;
        }
      }
    }
    return result;
  }
  if (v35)
  {
    if (v34)
    {
      uint64_t v12 = v33;
      long long v33 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v9);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    if (v32)
    {
      uint64_t v13 = v31;
      uint64_t v31 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v9);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
    }
    if (v30)
    {
      BOOL v14 = v29;
      uint64_t v29 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v9);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    long long v15 = v28;
    __int16 v28 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v9);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t result = v27;
    long long v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    if (v26 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(long long *, unsigned char *))off_1EEA0D078[v26])(&v38, v25);
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebSWClientConnection::FocusServiceWorkerClient,WebKit::WebSWClientConnection,WebKit::WebSWClientConnection,void ()(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, WebCore::Document *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t result = IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::UUID>>>(a2, (uint64_t)v11);
  if (v12)
  {
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if (v7)
    {
      *(void *)&v13[0] = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v13 + 1, a1);
      int v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v8 = &unk_1EEA0D0C0;
      v8[1] = *(void *)&v13[0];
      uint64_t v9 = *((void *)&v13[0] + 1);
      *((void *)&v13[0] + 1) = 0;
      void v8[2] = v9;
      uint64_t v10 = v8;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v13 + 1);
      if (!v12) {
        __break(1u);
      }
      v13[0] = v11[0];
      v13[1] = v11[1];
      WebKit::WebSWClientConnection::focusServiceWorkerClient(a3, v13, (uint64_t *)&v10);
      uint64_t result = (uint64_t)v10;
      uint64_t v10 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

void IPC::handleMessage<Messages::WebSWClientConnection::NotifyRecordResponseBodyChunk,WebKit::WebSWClientConnection,WebKit::WebSWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::SharedBufferReference &&)>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  if (v5)
  {
    uint64_t v6 = v4;
    IPC::Decoder::decode<IPC::SharedBufferReference>((IPC::Decoder *)a1, (uint64_t)&v19);
    if (v21)
    {
      uint64_t v16 = v19;
      long long v8 = v20;
      long long v20 = 0uLL;
      long long v17 = v8;
      char v18 = 1;
      std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v7);
      WebKit::WebSWClientConnection::notifyRecordResponseBodyChunk(a2, v6, (unsigned int *)&v16);
      if (v18)
      {
        uint64_t v10 = (unsigned int *)*((void *)&v17 + 1);
        *((void *)&v17 + 1) = 0;
        if (v10) {
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v10);
        }
        uint64_t v11 = (unsigned int *)v17;
        *(void *)&long long v17 = 0;
        if (v11) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v11, v9);
        }
      }
      return;
    }
    std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v7);
  }
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t v14 = a1[3];
  if (v14) {
    BOOL v15 = v13 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12);
  }
}

void IPC::handleMessage<Messages::WebSWClientConnection::NotifyRecordResponseBodyEnd,WebKit::WebSWClientConnection,WebKit::WebSWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceError &&)>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  if (v5)
  {
    uint64_t v6 = v4;
    IPC::Decoder::decode<WebCore::ResourceError>((IPC::Decoder *)a1, (uint64_t)&v28);
    if (v36)
    {
      long long v8 = v28;
      long long v28 = 0uLL;
      *(_OWORD *)uint64_t v19 = v8;
      long long v20 = v29;
      long long v21 = v30;
      LODWORD(v29) = v29 & 0xFFFFFFFE;
      char v22 = v31;
      int v23 = v32;
      __int16 v24 = v33;
      uint64_t v9 = v34;
      uint64_t v31 = 0;
      char v34 = 0;
      CFTypeRef cf = v9;
      char v26 = v35;
      char v27 = 1;
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v7);
      WebKit::WebSWClientConnection::notifyRecordResponseBodyEnd(a2, v6, (uint64_t)v19);
      if (v27)
      {
        CFTypeRef v11 = cf;
        CFTypeRef cf = 0;
        if (v11) {
          CFRelease(v11);
        }
        uint64_t v12 = v22;
        char v22 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v10);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
        long long v17 = v19[1];
        v19[1] = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy(v17, v10);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
        char v18 = v19[0];
        v19[0] = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v10);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
      }
      return;
    }
    std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v7);
  }
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t v15 = a1[3];
  if (v15) {
    BOOL v16 = v14 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
  }
}

void non-virtual thunk to'WebKit::WebSWClientConnection::didReceiveMessage(WebKit::WebSWClientConnection *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[88])
  {
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5 && v4 != 0)
    {
      char v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  v5[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1, (uint64_t)v5, a2);
  }
  else
  {
    *a2 = 0;
    a2[88] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unsigned __int16 v6 = IPC::Decoder::decode<WebCore::NotificationDirection>(a1);
  if (v6 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationState>(a1, a2, (char *)&v6, a3);
  }
  else
  {
    *a3 = 0;
    a3[88] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationState>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, unsigned char *a4@<X8>)
{
  IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerData>>(a1, (uint64_t)v10);
  if (v13)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>(a2, a3, (uint64_t)v10, (uint64_t)a4);
    if (v13) {
      BOOL v8 = v12 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      uint64_t v9 = v11;
      CFTypeRef v11 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v7);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[88] = 0;
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>@<X0>(uint64_t a1@<X1>, char *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result = a4;
  if (*(unsigned char *)(a1 + 8) && a2[1] && *(unsigned char *)(a3 + 72))
  {
    uint64_t result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN3WTF23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS3_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS3_33SupportsObjectIdentifierNullStateE0EEENS5_30ServiceWorkerRegistrationStateENS_8optionalINS5_17ServiceWorkerDataEEEEEC2B8sn180100IJLm0ELm1ELm2EEJSA_SB_SE_EJEJEJSA_SB_SE_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSI_IJDpT2_EEEDpOT3_(a4, (void *)a1, a2, a3);
    *(unsigned char *)(result + 88) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN3WTF23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS3_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS3_33SupportsObjectIdentifierNullStateE0EEENS5_30ServiceWorkerRegistrationStateENS_8optionalINS5_17ServiceWorkerDataEEEEEC2B8sn180100IJLm0ELm1ELm2EEJSA_SB_SE_EJEJEJSA_SB_SE_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSI_IJDpT2_EEEDpOT3_(uint64_t a1, void *a2, char *a3, uint64_t a4)
{
  *(void *)a1 = *a2;
  char v5 = *a3;
  *(unsigned char *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  *(unsigned char *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 80) = 0;
  if (*(unsigned char *)(a4 + 64))
  {
    *(_OWORD *)(a1 + ++*(_DWORD *)(this + 16) = *(_OWORD *)a4;
    WTF::URL::URL(a1 + 32, (uint64_t *)(a4 + 16));
    *(_WORD *)(a1 + 72) = *(_WORD *)(a4 + 56);
    *(unsigned char *)(a1 + 80) = 1;
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ServiceWorkerState>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ServiceWorkerState>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ServiceWorkerState>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  if (v5
    && (v6 = result, uint64_t result = IPC::Decoder::decode<WebCore::ServiceWorkerState>(a1), (unsigned __int16)result > 0xFFu))
  {
    *(void *)a2 = v6;
    *(unsigned char *)(a2 + 8) = result;
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + ++*(_DWORD *)(this + 16) = v7;
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WallTime>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WallTime>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WallTime>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  if (v5 && (v6 = result, uint64_t result = IPC::Decoder::decode<WTF::MonotonicTime>(a1), v7))
  {
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = result;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + ++*(_DWORD *)(this + 16) = v8;
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerUpdateViaCache>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerUpdateViaCache>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerUpdateViaCache>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  if (v5 && (v6 = result, uint64_t result = IPC::Decoder::decode<WebCore::CDMRequirement>(a1), (unsigned __int16)result > 0xFFu))
  {
    *(void *)a2 = v6;
    *(unsigned char *)(a2 + 8) = result;
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + ++*(_DWORD *)(this + 16) = v7;
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WebCore::ProcessQualified<WTF::UUID>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = v5;
  uint64_t result = WTF::fastMalloc((WTF *)((32 * v5) | 0x10));
  if (v5)
  {
    uint64_t v9 = (void *)(result + 16);
    do
    {
      *uint64_t v9 = 0;
      v9[1] = 0;
      uint64_t v9[2] = 0;
      v9 += 4;
      --v6;
    }
    while (v6);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v3;
    do
    {
      uint64_t v12 = v2 + 32 * v10;
      uint64_t v13 = *(void *)(v12 + 16);
      if (v13 != -1 && (v13 || *(_OWORD *)v12 != 0))
      {
        uint64_t v15 = *a1;
        if (*a1) {
          unsigned int v16 = *(_DWORD *)(v15 - 8);
        }
        else {
          unsigned int v16 = 0;
        }
        int v23 = -1640531527;
        __int16 v24 = 0;
        char v25 = 0;
        WTF::addArgs<WTF::UUID>(&v23, (void *)(v2 + 32 * v10));
        int v17 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v23);
        int v18 = 0;
        do
        {
          uint64_t v19 = v17 & v16;
          uint64_t v20 = v15 + 32 * v19;
          int v17 = ++v18 + v19;
        }
        while (*(_OWORD *)v20 != 0 || *(void *)(v20 + 16) != 0);
        long long v22 = *(_OWORD *)(v12 + 16);
        *(_OWORD *)uint64_t v20 = *(_OWORD *)v12;
        *(_OWORD *)(v20 + ++*(_DWORD *)(this + 16) = v22;
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), v8);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWClientConnection34SetServiceWorkerClientIsControlledEN6WebKit21WebSWClientConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEEONS9_29ServiceWorkerRegistrationDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D098;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWClientConnection34SetServiceWorkerClientIsControlledEN6WebKit21WebSWClientConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEEONS9_29ServiceWorkerRegistrationDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D098;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWClientConnection34SetServiceWorkerClientIsControlledEN6WebKit21WebSWClientConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEEONS9_29ServiceWorkerRegistrationDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 3554;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWClientConnection24FocusServiceWorkerClientEN6WebKit21WebSWClientConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_23ServiceWorkerClientDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D0C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWClientConnection24FocusServiceWorkerClientEN6WebKit21WebSWClientConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_23ServiceWorkerClientDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D0C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWClientConnection24FocusServiceWorkerClientEN6WebKit21WebSWClientConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_23ServiceWorkerClientDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 3553;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerClientData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerClientData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerClientData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerClientData>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 192);
  unsigned int v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x199414FB8);
    }
    *unsigned int v5 = 1;
    if (*(unsigned char *)(a2 + 192))
    {
      IPC::ArgumentCoder<WebCore::ServiceWorkerClientData,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v7 = (atomic_uchar *volatile *)std::__throw_bad_optional_access[abi:sn180100]();
      WebKit::WebSWContextManagerConnection::didReceiveMessage(v7, v8, v9);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x199414FD8);
    }
    *unsigned int v5 = 0;
  }
}

void WebKit::WebSWContextManagerConnection::didReceiveMessage(atomic_uchar *volatile *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v6 = (unsigned int *)this;
  uint64_t v378 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (atomic_uchar **)(this + 4);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 4);
  switch(*((_WORD *)a3 + 25))
  {
    case 0xAB1:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t)v298, (uint64_t *)a3);
      if (v298[24]) {
        WebKit::WebSWContextManagerConnection::cancelFetch(v6, *(uint64_t *)v298, *(uint64_t *)&v298[8], *(uint64_t *)&v298[16]);
      }
      goto LABEL_402;
    case 0xAB2:
      WebKit::WebSWContextManagerConnection::close((WebKit::WebSWContextManagerConnection *)v6);
      goto LABEL_402;
    case 0xAB3:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t)v298, (uint64_t *)a3);
      if (v298[24]) {
        WebKit::WebSWContextManagerConnection::continueDidReceiveFetchResponse((uint64_t)v6, *(uint64_t *)v298, *(uint64_t *)&v298[8], *(uint64_t *)&v298[16]);
      }
      goto LABEL_402;
    case 0xAB4:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t)v298, (uint64_t *)a3);
      if (v298[24]) {
        WebKit::WebSWContextManagerConnection::convertFetchToDownload((uint64_t)v6, *(uint64_t *)v298, *(uint64_t *)&v298[8], *(uint64_t *)&v298[16]);
      }
      goto LABEL_402;
    case 0xAB5:
      uint64_t v37 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v38) {
        goto LABEL_361;
      }
      uint64_t v3 = v37;
      IPC::Decoder::decode<WebCore::ScriptBuffer>((uint64_t *)a3, &v374);
      if (!BYTE8(v374)) {
        goto LABEL_361;
      }
      unint64_t v39 = *((void *)a3 + 1);
      uint64_t v40 = *(void *)a3;
      unint64_t v41 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
      if (v39 < v41 || v39 - v41 <= 3)
      {
        unint64_t v279 = 0;
        uint64_t v280 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v281 = *((void *)a3 + 3);
        if (v281)
        {
          if (v39)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v281 + 16))(v281, v40, v39);
            uint64_t v280 = *(void *)a3;
            unint64_t v279 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v279 = 0;
            uint64_t v280 = 0;
          }
        }
        goto LABEL_416;
      }
      char v43 = (int *)(v40 + v41);
      *((void *)a3 + 2) = v43 + 1;
      if (!v40)
      {
        unint64_t v279 = v39;
        uint64_t v280 = 0;
LABEL_416:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v282 = *((void *)a3 + 3);
        if (v282 && v279) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v282 + 16))(v282, v280);
        }
LABEL_289:
        uint64_t v213 = *(void **)a3;
        uint64_t v214 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v215 = *((void *)a3 + 3);
        if (v215 && v214) {
          (*(void (**)(uint64_t, void *))(*(void *)v215 + 16))(v215, v213);
        }
        if (BYTE8(v374))
        {
          uint64_t v216 = (unsigned int *)v374;
          *(void *)&long long v374 = 0;
          if (v216) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v216, v213);
          }
        }
        goto LABEL_361;
      }
      int v44 = *v43;
      unint64_t v296 = 0;
      int v287 = v44;
      if (!v44)
      {
        v212 = 0;
        goto LABEL_297;
      }
      uint64_t v285 = v3;
      uint64_t v286 = v7;
      int v45 = 0;
      uint64_t v288 = v6;
      do
      {
        IPC::Decoder::decode<WTF::URL>(a3, v298);
        if (!v298[40])
        {
LABEL_287:
          if (v296) {
            WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable((uint64_t)v296, v46);
          }
          goto LABEL_289;
        }
        IPC::Decoder::decode<WebCore::ScriptBuffer>((uint64_t *)a3, v344);
        if (!v344[8])
        {
          int v62 = 1;
          goto LABEL_81;
        }
        if (!v298[40]) {
          goto LABEL_320;
        }
        if (*(void *)v298 == -1
          || (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v298) & 1) != 0)
        {
          int v62 = 1;
          goto LABEL_78;
        }
        if (!v298[40] || !v344[8]) {
          goto LABEL_320;
        }
        char v47 = v296;
        if (v296
          || (WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand((uint64_t *)&v296, 0), (char v47 = v296) != 0))
        {
          int v48 = *((_DWORD *)v47 - 2);
        }
        else
        {
          int v48 = 0;
        }
        unsigned int v49 = *(_DWORD *)(*(void *)v298 + 16);
        if (v49 >= 0x100) {
          unsigned int v50 = v49 >> 8;
        }
        else {
          unsigned int v50 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v298);
        }
        unsigned int v51 = v50 & v48;
        uint64_t v52 = (uint64_t)v47 + 48 * (v50 & v48);
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v52) & 1) == 0)
        {
          char v54 = 0;
          uint64_t v3 = 1;
          do
          {
            char v55 = (WTF::URL *)v52;
            if (*(void *)v52 != -1)
            {
              char v55 = v54;
              if (WTF::equal(*(WTF **)v52, *(const WTF::StringImpl **)v298, v53))
              {
                int v62 = 1;
                uint64_t v7 = v286;
                uint64_t v6 = v288;
                goto LABEL_78;
              }
            }
            unsigned int v51 = (v51 + v3) & v48;
            uint64_t v52 = (uint64_t)v47 + 48 * v51;
            uint64_t v3 = (v3 + 1);
            char v54 = v55;
          }
          while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v52));
          uint64_t v6 = v288;
          if (v55)
          {
            *(void *)char v55 = 0;
            WTF::URL::invalidate(v55);
            *((void *)v55 + 5) = 0;
            --*((_DWORD *)v296 - 4);
            uint64_t v52 = (uint64_t)v55;
          }
        }
        WTF::URL::operator=(v52, (uint64_t)v298);
        uint64_t v56 = *(void *)v344;
        *(void *)v344 = 0;
        char v57 = *(unsigned int **)(v52 + 40);
        *(void *)(v52 + ++*(_DWORD *)(this + 40) = v56;
        if (v57) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v57, v46);
        }
        if (v296) {
          int v58 = *((_DWORD *)v296 - 3) + 1;
        }
        else {
          int v58 = 1;
        }
        *((_DWORD *)v296 - 3) = v58;
        if (v296) {
          int v59 = *((_DWORD *)v296 - 3);
        }
        else {
          int v59 = 0;
        }
        uint64_t v60 = (*((_DWORD *)v296 - 4) + v59);
        unint64_t v61 = *((unsigned int *)v296 - 1);
        if (v61 > 0x400)
        {
          if (v61 > 2 * v60) {
            goto LABEL_77;
          }
LABEL_76:
          WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand((uint64_t *)&v296, v52);
          goto LABEL_77;
        }
        if (3 * v61 <= 4 * v60) {
          goto LABEL_76;
        }
LABEL_77:
        int v62 = 0;
        uint64_t v7 = v286;
LABEL_78:
        if (v344[8])
        {
          int v63 = *(unsigned int **)v344;
          *(void *)v344 = 0;
          if (v63) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v63, v46);
          }
        }
LABEL_81:
        if (!v298[40]) {
          goto LABEL_85;
        }
        int v64 = *(WTF::StringImpl **)v298;
        *(void *)uint64_t v298 = 0;
        if (!v64) {
          goto LABEL_85;
        }
        if (*(_DWORD *)v64 != 2)
        {
          *(_DWORD *)v64 -= 2;
LABEL_85:
          if (v62) {
            goto LABEL_287;
          }
          goto LABEL_88;
        }
        WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v46);
        if (v62) {
          goto LABEL_287;
        }
LABEL_88:
        ++v45;
      }
      while (v45 != v287);
      uint64_t v3 = v285;
      if (!BYTE8(v374)) {
        goto LABEL_320;
      }
      v212 = v296;
LABEL_297:
      *(void *)uint64_t v298 = v3;
      *(void *)&v298[8] = v374;
      *(void *)&v298[16] = v212;
      v298[24] = 1;
      WebKit::WebSWContextManagerConnection::didSaveScriptsToDisk((WebCore::SWContextManager *)v6);
      if (v298[24])
      {
        if (*(void *)&v298[16]) {
          WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable(*(uint64_t *)&v298[16], v8);
        }
        v219 = *(unsigned int **)&v298[8];
        *(void *)&v298[8] = 0;
        if (v219) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v219, v8);
        }
      }
LABEL_402:
      if (v6) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*v7, v8);
      }
      return;
    case 0xAB6:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)v8) {
        WebKit::WebSWContextManagerConnection::fireActivateEvent((WebCore::SWContextManager *)v6);
      }
      goto LABEL_402;
    case 0xAB7:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation>>((uint64_t)v298, (uint64_t *)a3);
      if (!v298[64]) {
        goto LABEL_402;
      }
      uint64_t v143 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!(_BYTE)v8) {
        goto LABEL_172;
      }
      *(void *)v344 = v143;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v344[8], a2);
      uint64_t v144 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v144 = &unk_1EEA0D180;
      v144[1] = *(void *)v344;
      uint64_t v145 = *(void *)&v344[8];
      *(void *)&v344[8] = 0;
      v144[2] = v145;
      *(void *)&long long v374 = v144;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v344[8]);
      WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent((uint64_t)v6, *(uint64_t *)v298, (uint64_t)&v298[8], (uint64_t *)&v374);
      goto LABEL_169;
    case 0xAB8:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation>>((uint64_t)v298, (uint64_t *)a3);
      if (!v298[64]) {
        goto LABEL_402;
      }
      uint64_t v116 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!(_BYTE)v8) {
        goto LABEL_172;
      }
      *(void *)v344 = v116;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v344[8], a2);
      uint64_t v117 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v117 = &unk_1EEA0D158;
      v117[1] = *(void *)v344;
      uint64_t v118 = *(void *)&v344[8];
      *(void *)&v344[8] = 0;
      v117[2] = v118;
      *(void *)&long long v374 = v117;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v344[8]);
      WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent((uint64_t)v6, *(uint64_t *)v298, (uint64_t)&v298[8], (uint64_t *)&v374);
LABEL_169:
      uint64_t v146 = v374;
      *(void *)&long long v374 = 0;
      if (v146) {
        (*(void (**)(uint64_t))(*(void *)v146 + 8))(v146);
      }
      if (!v298[64]) {
        goto LABEL_402;
      }
LABEL_172:
      uint64_t v9 = *(WTF::StringImpl **)&v298[16];
      *(void *)&v298[16] = 0;
      if (!v9) {
        goto LABEL_402;
      }
      goto LABEL_308;
    case 0xAB9:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)v8) {
        WebKit::WebSWContextManagerConnection::fireInstallEvent((WebCore::SWContextManager *)v6);
      }
      goto LABEL_402;
    case 0xABA:
      uint64_t v3 = (uint64_t)v6;
      uint64_t v84 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v85) {
        goto LABEL_230;
      }
      uint64_t v86 = v84;
      IPC::Decoder::decode<WebCore::NotificationData>(a3, v344);
      if (!v351) {
        goto LABEL_230;
      }
      unsigned __int16 v87 = IPC::Decoder::decode<WebKit::UseDownloadPlaceholder>((uint64_t *)a3);
      unsigned __int16 v89 = v87;
      if (v87 > 0xFFu)
      {
        if (!v351) {
          goto LABEL_320;
        }
        uint64_t v195 = *(void *)&v344[72];
        *(void *)uint64_t v298 = v86;
        *(void *)&v298[16] = *(void *)v344;
        *(_OWORD *)&v298[24] = *(_OWORD *)&v344[8];
        *(_DWORD *)&v344[8] &= ~1u;
        *(void *)v344 = 0;
        *(_OWORD *)&v298[40] = *(_OWORD *)&v344[24];
        long long v196 = *(_OWORD *)&v344[40];
        memset(&v344[40], 0, 40);
        *(_OWORD *)&v298[56] = v196;
        *(_OWORD *)uint64_t v299 = *(_OWORD *)&v344[56];
        *(void *)&v299[16] = v195;
        v299[24] = v344[80];
        long long v197 = v345;
        long long v345 = 0u;
        *(_OWORD *)&v299[32] = v197;
        *(_OWORD *)&v299[48] = v346;
        long long v300 = v347;
        LODWORD(v346) = v346 & 0xFFFFFFFE;
        *(_OWORD *)CFTypeRef cf = *(_OWORD *)&v348[56];
        *(_OWORD *)v305 = *(_OWORD *)&v348[72];
        long long v302 = *(_OWORD *)&v348[24];
        long long v303 = *(_OWORD *)&v348[40];
        *(_OWORD *)&v301[8] = *(_OWORD *)&v348[8];
        uint64_t v198 = *(void *)&v348[88];
        *(void *)&v348[88] = 0;
        *(void *)uint64_t v306 = v198;
        *(void *)&long long v197 = *(void *)&v348[96];
        *(void *)&v348[96] = 0;
        *(void *)&v306[8] = v197;
        *(_WORD *)&v306[16] = v349;
        char v90 = 1;
        LOBYTE(v307) = v87;
      }
      else
      {
        char v90 = 0;
        v298[0] = 0;
      }
      char v309 = v90;
      if (v351) {
        WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v344, v88);
      }
      if (v89 <= 0xFFu) {
        goto LABEL_230;
      }
      uint64_t v199 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      uint64_t v6 = (unsigned int *)v3;
      if (!(_BYTE)v8) {
        goto LABEL_248;
      }
      *(void *)v344 = v199;
      a3 = (IPC::Decoder *)&v344[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v344[8], a2);
      uint64_t v200 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v200 = &unk_1EEA0D130;
      v200[1] = *(void *)v344;
      uint64_t v201 = *(void *)&v344[8];
      *(void *)&v344[8] = 0;
      v200[2] = v201;
      *(void *)&long long v374 = v200;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v344[8]);
      if (!v309) {
        goto LABEL_320;
      }
      WebKit::WebSWContextManagerConnection::fireNotificationEvent(v3, *(uint64_t *)v298, (uint64_t)&v298[16], (char)v307, (uint64_t *)&v374);
      uint64_t v202 = v374;
      *(void *)&long long v374 = 0;
      if (v202) {
        (*(void (**)(uint64_t))(*(void *)v202 + 8))(v202);
      }
      if (v309) {
LABEL_248:
      }
        WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&v298[16], v8);
      goto LABEL_402;
    case 0xABB:
      uint64_t v148 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v149
        && (uint64_t v150 = v148,
            IPC::Decoder::decode<std::optional<std::span<unsigned char const,18446744073709551615ul>>>(a3, (uint64_t)&v374), v375[8])&& (IPC::Decoder::decode<std::optional<WebCore::NotificationPayload>>(a3, v344), v348[8]))
      {
        if (!v375[8]) {
          goto LABEL_320;
        }
        *(void *)uint64_t v298 = v150;
        *(_OWORD *)&v298[8] = v374;
        *(void *)&v298[24] = *(void *)v375;
        std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v298[32], (uint64_t)v344);
        LOBYTE(v302) = 1;
        if (!v348[8]) {
          goto LABEL_182;
        }
        std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v344, v151);
        if ((_BYTE)v302) {
          goto LABEL_182;
        }
      }
      else
      {
        v298[0] = 0;
        LOBYTE(v302) = 0;
      }
      char v8 = *(void **)a3;
      uint64_t v188 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v189 = *((void *)a3 + 3);
      if (!v189) {
        goto LABEL_402;
      }
      if (!v188) {
        goto LABEL_402;
      }
      (*(void (**)(uint64_t, void *))(*(void *)v189 + 16))(v189, v8);
      if (!(_BYTE)v302) {
        goto LABEL_402;
      }
LABEL_182:
      uint64_t v152 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)v8)
      {
        *(void *)v344 = v152;
        a3 = (IPC::Decoder *)&v344[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v344[8], a2);
        v153 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v153 = &unk_1EEA0D108;
        v153[1] = *(void *)v344;
        uint64_t v154 = *(void *)&v344[8];
        *(void *)&v344[8] = 0;
        v153[2] = v154;
        *(void *)&long long v374 = v153;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v344[8]);
        if (!(_BYTE)v302) {
          goto LABEL_320;
        }
        *(_OWORD *)v344 = *(_OWORD *)&v298[8];
        *(void *)&v344[16] = *(void *)&v298[24];
        WebKit::WebSWContextManagerConnection::firePushEvent((WTF *)v6, *(WTF **)v298, (uint64_t)v344, (uint64_t)&v298[32], (uint64_t *)&v374);
        uint64_t v155 = v374;
        *(void *)&long long v374 = 0;
        if (v155) {
          (*(void (**)(uint64_t))(*(void *)v155 + 8))(v155);
        }
      }
      if ((_BYTE)v302) {
        std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v298[32], (WTF::StringImpl *)v8);
      }
      goto LABEL_402;
    case 0xABC:
      char v36 = (WebCore::SWContextManager *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)v8)
      {
        WebCore::SWContextManager::singleton(v36);
        WebCore::SWContextManager::fireUpdateFoundEvent();
      }
      goto LABEL_402;
    case 0xABD:
      IPC::ArgumentCoder<WebCore::ServiceWorkerContextData,void>::decode((uint64_t *)a3, (uint64_t)v344);
      if (!v373)
      {
        uint64_t v227 = *(void *)a3;
        uint64_t v228 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v229 = *((void *)a3 + 3);
        if (!v229 || !v228 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v229 + 16))(v229, v227), !v373))
        {
          v298[0] = 0;
          char v343 = 0;
          goto LABEL_391;
        }
      }
      IPC::Decoder::decode<WebCore::ServiceWorkerData>((uint64_t *)a3, (uint64_t)&v374);
      if (!v377)
      {
        v298[0] = 0;
        char v343 = 0;
        goto LABEL_389;
      }
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v296);
      if (!v297)
      {
        v298[0] = 0;
        char v343 = 0;
        goto LABEL_384;
      }
      unint64_t v66 = *((void *)a3 + 1);
      CFTypeRef v65 = *(WTF::StringImpl **)a3;
      unint64_t v67 = *((void *)a3 + 2) - *(void *)a3;
      if (v66 <= v67)
      {
        uint64_t v3 = (uint64_t)v6;
        unint64_t v263 = 0;
        uint64_t v264 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v265 = *((void *)a3 + 3);
        if (v265)
        {
          if (v66)
          {
            (*(void (**)(uint64_t))(*(void *)v265 + 16))(v265);
            uint64_t v264 = *(void *)a3;
            unint64_t v263 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v263 = 0;
            uint64_t v264 = 0;
          }
        }
      }
      else
      {
        long long v68 = (unsigned __int8 *)v65 + v67;
        *((void *)a3 + 2) = v68 + 1;
        uint64_t v3 = (uint64_t)v6;
        if (v65)
        {
          unsigned int v69 = *v68;
          if (v69 < 2)
          {
            BOOL v70 = v69 != 0;
            unsigned __int16 v71 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(a3);
            if (v71 > 0xFFu)
            {
              char v72 = v71;
              uint64_t v73 = IPC::Decoder::decode<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>(a3);
              if ((v73 & 0xFF0000) != 0)
              {
                if (!v373 || !v377 || !v297) {
                  goto LABEL_320;
                }
                __int16 v74 = v73;
                *(_OWORD *)uint64_t v298 = *(_OWORD *)v344;
                *(void *)&v298[16] = *(void *)&v344[16];
                WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)&v298[24], (uint64_t)&v344[24]);
                uint64_t v313 = v352;
                long long v75 = v353;
                long long v353 = 0u;
                long long v314 = v75;
                uint64_t v76 = v354;
                uint64_t v354 = 0;
                uint64_t v315 = v76;
                uint64_t v316 = v355;
                long long v77 = v359;
                long long v78 = v360;
                long long v359 = 0u;
                long long v360 = 0u;
                uint64_t v355 = 0;
                int v317 = v356;
                char v318 = v357;
                __int16 v319 = v358;
                long long v320 = v77;
                long long v321 = v78;
                long long v322 = v361;
                long long v323 = v362;
                LODWORD(v361) = v361 & 0xFFFFFFFE;
                int v324 = v363;
                uint64_t v79 = v364;
                uint64_t v364 = 0;
                uint64_t v325 = v79;
                *(void *)&long long v77 = v365;
                uint64_t v365 = 0;
                uint64_t v326 = v77;
                LODWORD(v79) = v366;
                int v366 = 0;
                int v327 = v79;
                LOBYTE(v79) = v367;
                char v367 = 0;
                char v328 = v79;
                long long v330 = v369;
                long long v331 = v370;
                long long v329 = v368;
                char v332 = v371;
                uint64_t v80 = v372;
                uint64_t v372 = 0;
                uint64_t v333 = v80;
                long long v334 = v374;
                unsigned __int8 v81 = *(WTF::StringImpl **)v375;
                *(void *)v375 = 0;
                v335 = v81;
                long long v336 = *(_OWORD *)&v375[8];
                long long v337 = *(_OWORD *)&v375[24];
                *(_DWORD *)&v375[8] &= ~1u;
                __int16 v338 = v376;
                uint64_t v82 = v296;
                unint64_t v296 = 0;
                v339 = v82;
                char v340 = v70;
                char v341 = v72;
                char v83 = 1;
                __int16 v342 = v74;
LABEL_379:
                char v343 = v83;
                uint64_t v6 = (unsigned int *)v3;
                if (v297)
                {
                  unint64_t v268 = v296;
                  unint64_t v296 = 0;
                  if (v268)
                  {
                    if (*(_DWORD *)v268 == 2) {
                      WTF::StringImpl::destroy(v268, v65);
                    }
                    else {
                      *(_DWORD *)v268 -= 2;
                    }
                  }
                }
LABEL_384:
                if (v377)
                {
                  unint64_t v269 = *(WTF::StringImpl **)v375;
                  *(void *)v375 = 0;
                  if (v269)
                  {
                    if (*(_DWORD *)v269 == 2) {
                      WTF::StringImpl::destroy(v269, v65);
                    }
                    else {
                      *(_DWORD *)v269 -= 2;
                    }
                  }
                }
LABEL_389:
                if (v373) {
                  WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)v344, v65);
                }
LABEL_391:
                if (v343
                  || (char v8 = *(void **)a3,
                      uint64_t v272 = *((void *)a3 + 1),
                      *(void *)a3 = 0,
                      *((void *)a3 + 1) = 0,
                      (uint64_t v273 = *((void *)a3 + 3)) != 0)
                  && v272
                  && ((*(void (**)(uint64_t, void *))(*(void *)v273 + 16))(v273, v8), v343))
                {
                  WebKit::WebSWContextManagerConnection::installServiceWorker((uint64_t)v6, (uint64_t)v298, (uint64_t)&v334, (uint64_t)&v339, v340, v341, v342);
                  if (v343)
                  {
                    unint64_t v270 = v339;
                    v339 = 0;
                    if (v270)
                    {
                      if (*(_DWORD *)v270 == 2) {
                        WTF::StringImpl::destroy(v270, (WTF::StringImpl *)v8);
                      }
                      else {
                        *(_DWORD *)v270 -= 2;
                      }
                    }
                    v271 = v335;
                    v335 = 0;
                    if (v271)
                    {
                      if (*(_DWORD *)v271 == 2) {
                        WTF::StringImpl::destroy(v271, (WTF::StringImpl *)v8);
                      }
                      else {
                        *(_DWORD *)v271 -= 2;
                      }
                    }
                    WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)v298, (WTF::StringImpl *)v8);
                  }
                }
                goto LABEL_402;
              }
            }
LABEL_378:
            char v83 = 0;
            v298[0] = 0;
            goto LABEL_379;
          }
LABEL_377:
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v267 = *((void *)a3 + 3);
          if (v267)
          {
            if (v66)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v267 + 16))(v267, v65);
              uint64_t v283 = *((void *)a3 + 3);
              CFTypeRef v65 = *(WTF::StringImpl **)a3;
              uint64_t v284 = *((void *)a3 + 1);
              *(void *)a3 = 0;
              *((void *)a3 + 1) = 0;
              if (v283)
              {
                if (v284) {
                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v283 + 16))(v283, v65);
                }
              }
            }
          }
          goto LABEL_378;
        }
        unint64_t v263 = v66;
        uint64_t v264 = 0;
      }
      unint64_t v66 = 0;
      CFTypeRef v65 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v266 = *((void *)a3 + 3);
      if (v266)
      {
        if (v263)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v266 + 16))(v266, v264, v263);
          CFTypeRef v65 = *(WTF::StringImpl **)a3;
          unint64_t v66 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v66 = 0;
          CFTypeRef v65 = 0;
        }
      }
      goto LABEL_377;
    case 0xABE:
      unint64_t v121 = *((void *)a3 + 1);
      uint64_t v122 = *(char **)a3;
      unint64_t v123 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v121 < v123 || v121 - v123 <= 7)
      {
        unint64_t v230 = 0;
        uint64_t v231 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v232 = *((void *)a3 + 3);
        if (v232)
        {
          if (v121)
          {
            (*(void (**)(uint64_t))(*(void *)v232 + 16))(v232);
            uint64_t v231 = *(void *)a3;
            unint64_t v230 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v230 = 0;
            uint64_t v231 = 0;
          }
        }
        goto LABEL_341;
      }
      uint64_t v125 = (uint64_t *)&v122[v123];
      *((void *)a3 + 2) = v125 + 1;
      if (!v122)
      {
        unint64_t v230 = v121;
        uint64_t v231 = 0;
LABEL_341:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v233 = *((void *)a3 + 3);
        if (v233 && v230) {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v233 + 16))(v233, v231, v230);
        }
        goto LABEL_361;
      }
      unint64_t v126 = (((unint64_t)v125 + 15) & 0xFFFFFFFFFFFFFFF8) - (void)v122;
      if (v121 >= v126 && v121 - v126 > 7)
      {
        uint64_t v128 = (unint64_t *)(((unint64_t)v125 + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v129 = *v128;
        uint64_t v130 = *v125;
        *((void *)a3 + 2) = v128 + 1;
        long long v374 = 0uLL;
        uint64_t v289 = (uint64_t)v6;
        if (v129 < 0x1555)
        {
          if (v129)
          {
            DWORD2(v374) = 192 * (int)v129 / 0xC0u;
            *(void *)&long long v374 = WTF::fastMalloc((WTF *)(192 * v129));
            do
            {
              IPC::Decoder::decode<WebCore::ServiceWorkerClientData>(a3, v298);
              if (!(_BYTE)v303) {
                goto LABEL_359;
              }
              int v132 = HIDWORD(v374);
              if (HIDWORD(v374) == DWORD2(v374))
              {
                WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerClientData>((unsigned int *)&v374, (unint64_t)v298);
              }
              else
              {
                uint64_t v134 = v374 + 192 * HIDWORD(v374);
                long long v135 = *(_OWORD *)v298;
                long long v136 = *(_OWORD *)&v298[16];
                *(_WORD *)(v134 + 32) = *(_WORD *)&v298[32];
                *(_OWORD *)uint64_t v134 = v135;
                *(_OWORD *)(v134 + ++*(_DWORD *)(this + 16) = v136;
                WTF::URL::URL(v134 + 40, (uint64_t *)&v298[40]);
                WTF::URL::URL(v134 + 80, (uint64_t *)&v299[8]);
                long long v137 = *(_OWORD *)&v299[48];
                long long v138 = v300;
                uint64_t v139 = *(void *)&v301[16];
                *(_OWORD *)(v134 + 152) = *(_OWORD *)v301;
                *(_OWORD *)(v134 + 136) = v138;
                *(_OWORD *)(v134 + 120) = v137;
                *(void *)(v134 + 176) = 0;
                *(void *)(v134 + 184) = 0;
                *(void *)(v134 + 168) = v139;
                uint64_t v140 = v302;
                *(void *)&long long v302 = 0;
                *(void *)(v134 + 176) = v140;
                LODWORD(v1++*(_DWORD *)(this + 40) = DWORD2(v302);
                DWORD2(v302) = 0;
                *(_DWORD *)(v134 + 184) = v140;
                LODWORD(v1++*(_DWORD *)(this + 40) = HIDWORD(v302);
                HIDWORD(v302) = 0;
                *(_DWORD *)(v134 + 188) = v140;
                HIDWORD(v374) = v132 + 1;
              }
              std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v298, v133);
              --v129;
            }
            while (v129);
            v141 = (WTF::StringImpl *)v374;
            unsigned int v142 = DWORD2(v374);
            LODWORD(v129) = HIDWORD(v374);
          }
          else
          {
            unsigned int v142 = 0;
            v141 = 0;
          }
LABEL_233:
          long long v374 = 0uLL;
          v344[16] = 1;
          WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v374, v122);
          *(_OWORD *)v344 = 0uLL;
          *(void *)uint64_t v298 = v130;
          *(void *)&v298[8] = v141;
          *(_DWORD *)&v298[16] = v142;
          *(_DWORD *)&v298[20] = v129;
          v298[24] = 1;
          WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v344, v192);
          uint64_t v6 = (unsigned int *)v289;
          WebKit::WebSWContextManagerConnection::matchAllCompleted(v289, v130, (uint64_t *)&v298[8]);
          if (v298[24]) {
            WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v298[8], v8);
          }
          goto LABEL_402;
        }
        while (1)
        {
          IPC::Decoder::decode<WebCore::ServiceWorkerClientData>(a3, v298);
          if (!(_BYTE)v303) {
            break;
          }
          int v238 = HIDWORD(v374);
          if (HIDWORD(v374) == DWORD2(v374))
          {
            WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerClientData>((unsigned int *)&v374, (unint64_t)v298);
          }
          else
          {
            uint64_t v240 = v374 + 192 * HIDWORD(v374);
            long long v241 = *(_OWORD *)v298;
            long long v242 = *(_OWORD *)&v298[16];
            *(_WORD *)(v240 + 32) = *(_WORD *)&v298[32];
            *(_OWORD *)uint64_t v240 = v241;
            *(_OWORD *)(v240 + ++*(_DWORD *)(this + 16) = v242;
            WTF::URL::URL(v240 + 40, (uint64_t *)&v298[40]);
            WTF::URL::URL(v240 + 80, (uint64_t *)&v299[8]);
            long long v243 = *(_OWORD *)&v299[48];
            long long v244 = v300;
            uint64_t v245 = *(void *)&v301[16];
            *(_OWORD *)(v240 + 152) = *(_OWORD *)v301;
            *(_OWORD *)(v240 + 136) = v244;
            *(_OWORD *)(v240 + 120) = v243;
            *(void *)(v240 + 176) = 0;
            *(void *)(v240 + 184) = 0;
            *(void *)(v240 + 168) = v245;
            uint64_t v246 = v302;
            *(void *)&long long v302 = 0;
            *(void *)(v240 + 176) = v246;
            LODWORD(v246) = DWORD2(v302);
            DWORD2(v302) = 0;
            *(_DWORD *)(v240 + 184) = v246;
            LODWORD(v246) = HIDWORD(v302);
            HIDWORD(v302) = 0;
            *(_DWORD *)(v240 + 188) = v246;
            HIDWORD(v374) = v238 + 1;
          }
          std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v298, v239);
          if (!--v129)
          {
            unsigned int v142 = DWORD2(v374);
            LODWORD(v129) = HIDWORD(v374);
            v141 = (WTF::StringImpl *)v374;
            if (DWORD2(v374) > HIDWORD(v374))
            {
              v247 = (WTF::StringImpl *)v374;
              if (HIDWORD(v374))
              {
                if (HIDWORD(v374) >= 0x1555556)
                {
                  __break(0xC471u);
                  JUMPOUT(0x199417414);
                }
                int v248 = 192 * HIDWORD(v374);
                uint64_t v249 = WTF::fastMalloc((WTF *)(192 * HIDWORD(v374)));
                unsigned int v142 = (v248 & 0xFFFFFFC0) / 0xC0;
                if ((WTF::StringImpl *)v249 == v141)
                {
                  v247 = v141;
                }
                else
                {
                  v247 = (WTF::StringImpl *)v249;
                  WTF::VectorMover<false,WebCore::ServiceWorkerClientData>::move(v141, (WTF::StringImpl *)((char *)v141 + 192 * v129), v249);
                }
              }
              if (v141)
              {
                if (v247 == v141)
                {
                  unsigned int v142 = 0;
                  v247 = 0;
                  *(void *)&long long v374 = 0;
                  DWORD2(v374) = 0;
                }
                WTF::fastFree(v141, v122);
              }
              v141 = v247;
            }
            goto LABEL_233;
          }
        }
LABEL_359:
        std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v298, v131);
        WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v374, v250);
      }
      else
      {
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v234 = *((void *)a3 + 3);
        if (v234)
        {
          if (v121)
          {
            (*(void (**)(uint64_t))(*(void *)v234 + 16))(v234);
            uint64_t v235 = *(void *)a3;
            uint64_t v236 = *((void *)a3 + 1);
            uint64_t v237 = *((void *)a3 + 3);
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            if (v237)
            {
              if (v236) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v237 + 16))(v237, v235);
              }
            }
          }
        }
      }
      uint64_t v251 = *(void *)a3;
      uint64_t v252 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v253 = *((void *)a3 + 3);
      if (v253) {
        goto LABEL_369;
      }
      goto LABEL_361;
    case 0xABF:
      uint64_t v3 = (uint64_t)v6;
      uint64_t v22 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a3);
      if (!v23) {
        goto LABEL_230;
      }
      uint64_t v24 = v22;
      uint64_t v25 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v26) {
        goto LABEL_230;
      }
      uint64_t v27 = v25;
      uint64_t v28 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v29) {
        goto LABEL_230;
      }
      uint64_t v30 = v28;
      IPC::Decoder::decode<WebCore::ResourceError>(a3, (uint64_t)v344);
      if (!v344[80])
      {
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v344, v31);
        goto LABEL_230;
      }
      *(void *)uint64_t v298 = v24;
      *(void *)&v298[8] = v27;
      *(void *)&v298[16] = v30;
      long long v32 = *(_OWORD *)v344;
      *(_OWORD *)v344 = 0uLL;
      *(_OWORD *)&v298[24] = v32;
      *(_OWORD *)&v298[40] = *(_OWORD *)&v344[16];
      *(_OWORD *)&v298[56] = *(_OWORD *)&v344[32];
      *(_DWORD *)&v344[16] &= ~1u;
      *(void *)uint64_t v299 = *(void *)&v344[48];
      *(_DWORD *)&v299[8] = *(_DWORD *)&v344[56];
      *(_WORD *)&v299[12] = *(_WORD *)&v344[60];
      uint64_t v33 = *(void *)&v344[64];
      *(void *)&v344[48] = 0;
      *(void *)&v344[64] = 0;
      *(void *)&v299[16] = v33;
      v299[24] = v344[72];
      v299[32] = 1;
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v344, v31);
      uint64_t v6 = (unsigned int *)v3;
      WebKit::WebSWContextManagerConnection::navigationPreloadFailed((WebCore::SWContextManager *)v3);
      char v34 = *(const void **)&v299[16];
      *(void *)&v299[16] = 0;
      if (v34) {
        CFRelease(v34);
      }
      char v35 = *(WTF::StringImpl **)v299;
      *(void *)uint64_t v299 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2) {
          WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v8);
        }
        else {
          *(_DWORD *)v35 -= 2;
        }
      }
      v220 = *(WTF::StringImpl **)&v298[32];
      *(void *)&v298[32] = 0;
      if (v220)
      {
        if (*(_DWORD *)v220 == 2) {
          WTF::StringImpl::destroy(v220, (WTF::StringImpl *)v8);
        }
        else {
          *(_DWORD *)v220 -= 2;
        }
      }
      uint64_t v9 = *(WTF::StringImpl **)&v298[24];
      *(void *)&v298[24] = 0;
      if (v9)
      {
LABEL_308:
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v8);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      goto LABEL_402;
    case 0xAC0:
      uint64_t v3 = (uint64_t)v6;
      uint64_t v99 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a3);
      if (!v100) {
        goto LABEL_230;
      }
      uint64_t v101 = v99;
      uint64_t v102 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v103) {
        goto LABEL_230;
      }
      uint64_t v104 = v102;
      uint64_t v105 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v106) {
        goto LABEL_230;
      }
      uint64_t v107 = v105;
      IPC::Decoder::decode<WebCore::ResourceResponse>(a3, v344);
      if (v351)
      {
        *(_OWORD *)&v298[32] = *(_OWORD *)&v344[8];
        *(_OWORD *)&v298[48] = *(_OWORD *)&v344[24];
        long long v109 = *(_OWORD *)&v344[56];
        memset(&v344[56], 0, 32);
        *(void *)uint64_t v298 = v101;
        *(void *)&v298[8] = v104;
        uint64_t v110 = *(void *)&v344[40];
        *(void *)&v298[16] = v107;
        *(void *)&v298[24] = *(void *)v344;
        *(void *)v344 = 0;
        *(_DWORD *)&v344[8] &= ~1u;
        *(void *)&v344[40] = 0;
        *(void *)&v298[64] = v110;
        *(void *)uint64_t v299 = *(void *)&v344[48];
        *(_OWORD *)&v299[8] = v109;
        *(_OWORD *)&v299[24] = *(_OWORD *)&v344[72];
        uint64_t v111 = *((void *)&v345 + 1);
        *(void *)&v299[40] = v345;
        long long v345 = 0uLL;
        *(void *)&v299[48] = v111;
        uint64_t v112 = *((void *)&v346 + 1);
        *(void *)&v299[56] = v346;
        long long v346 = 0uLL;
        *(void *)&long long v300 = v112;
        BYTE8(v300) = 0;
        v301[0] = 0;
        if (BYTE8(v347))
        {
          uint64_t v221 = v347;
          *(void *)&long long v347 = 0;
          *((void *)&v300 + 1) = v221;
          v301[0] = 1;
        }
        *(_OWORD *)v305 = *(_OWORD *)&v348[64];
        *(_OWORD *)uint64_t v306 = *(_OWORD *)&v348[80];
        *(_DWORD *)&v306[15] = *(_DWORD *)&v348[95];
        *(_OWORD *)&v301[8] = *(_OWORD *)v348;
        long long v302 = *(_OWORD *)&v348[16];
        long long v303 = *(_OWORD *)&v348[32];
        *(_OWORD *)CFTypeRef cf = *(_OWORD *)&v348[48];
        uint64_t v113 = v349;
        uint64_t v349 = 0;
        *(void *)&v306[24] = v113;
        LOBYTE(v307) = v350;
        LOBYTE(v308) = 1;
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v344, v108);
        uint64_t v6 = (unsigned int *)v3;
        WebKit::WebSWContextManagerConnection::navigationPreloadIsReady((WebCore::SWContextManager *)v3);
        uint64_t v115 = *(const void **)&v306[24];
        *(void *)&v306[24] = 0;
        if (v115) {
          CFRelease(v115);
        }
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v298[24], v114);
        goto LABEL_402;
      }
      std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v344, v108);
LABEL_230:
      char v8 = *(void **)a3;
      uint64_t v190 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v191 = *((void *)a3 + 3);
      uint64_t v6 = (unsigned int *)v3;
      if (v191) {
        goto LABEL_362;
      }
      goto LABEL_402;
    case 0xAC1:
      uint64_t v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v11)
      {
        v298[0] = 0;
        v306[0] = 0;
        goto LABEL_334;
      }
      uint64_t v12 = v10;
      IPC::Decoder::decode<WebCore::MessageWithMessagePorts>(a3, (uint64_t)&v374);
      if (!v375[8]) {
        goto LABEL_16;
      }
      unint64_t v14 = *((void *)a3 + 1);
      uint64_t v15 = *(void *)a3;
      unint64_t v16 = *((void *)a3 + 2) - *(void *)a3;
      if (v14 <= v16)
      {
        unint64_t v259 = 0;
        uint64_t v260 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v261 = *((void *)a3 + 3);
        if (v261)
        {
          if (v14)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v261 + 16))(v261, v15, v14);
            uint64_t v260 = *(void *)a3;
            unint64_t v259 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v259 = 0;
            uint64_t v260 = 0;
          }
        }
      }
      else
      {
        int v17 = (unsigned char *)(v15 + v16);
        *((void *)a3 + 2) = v17 + 1;
        if (v15)
        {
          if (*v17 < 2u)
          {
            if (*v17)
            {
              IPC::Decoder::decode<WebCore::ServiceWorkerClientData>(a3, v298);
              char v194 = v303;
              if ((_BYTE)v303)
              {
                std::__variant_detail::__alt<1ul,WebCore::ServiceWorkerClientData>::__alt[abi:sn180100]<WebCore::ServiceWorkerClientData>((uint64_t)v344, (long long *)v298);
                char v194 = 1;
                *(_DWORD *)&v348[56] = 1;
              }
              else
              {
                v344[0] = 0;
              }
              v348[72] = v194;
              std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v298, v193);
              int v217 = v348[72];
            }
            else
            {
              IPC::Decoder::decode<WebCore::ServiceWorkerData>((uint64_t *)a3, (uint64_t)v298);
              int v217 = v298[64];
              if (v298[64])
              {
                *(_OWORD *)v344 = *(_OWORD *)v298;
                uint64_t v218 = *(void *)&v298[16];
                *(void *)&v298[16] = 0;
                *(void *)&v344[16] = v218;
                *(_OWORD *)&v344[24] = *(_OWORD *)&v298[24];
                *(_OWORD *)&v344[40] = *(_OWORD *)&v298[40];
                *(_DWORD *)&v298[24] &= ~1u;
                *(_WORD *)&v344[56] = *(_WORD *)&v298[56];
                *(_DWORD *)&v348[56] = 0;
                int v217 = 1;
              }
              else
              {
                v344[0] = 0;
              }
              v348[72] = v217;
            }
            if (v217) {
              goto LABEL_316;
            }
LABEL_15:
            uint64_t v13 = *(void **)a3;
            uint64_t v18 = *((void *)a3 + 1);
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v19 = *((void *)a3 + 3);
            if (!v19
              || !v18
              || ((*(void (**)(uint64_t, void *))(*(void *)v19 + 16))(v19, v13), !v348[72]))
            {
LABEL_16:
              v298[0] = 0;
              v306[0] = 0;
              goto LABEL_17;
            }
LABEL_316:
            if (!v375[8]) {
              goto LABEL_320;
            }
            *(void *)uint64_t v298 = v12;
            long long v222 = v374;
            long long v374 = 0uLL;
            *(_OWORD *)&v298[8] = v222;
            *(void *)&long long v222 = *(void *)v375;
            *(void *)v375 = 0;
            *(void *)&v298[24] = v222;
            v298[32] = 0;
            LODWORD(v305[0]) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>,(std::__variant_detail::_Trait)1>>((uint64_t)&v298[32], (uint64_t)v344);
            v306[0] = 1;
            if (v348[72] && *(_DWORD *)&v348[56] != -1) {
              ((void (*)(WTF::StringImpl **, unsigned char *))off_1EEA0D0D8[*(unsigned int *)&v348[56]])(&v296, v344);
            }
LABEL_17:
            std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v374, v13);
            if (v306[0]) {
              goto LABEL_18;
            }
LABEL_334:
            char v8 = *(void **)a3;
            uint64_t v225 = *((void *)a3 + 1);
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v226 = *((void *)a3 + 3);
            if (!v226) {
              goto LABEL_402;
            }
            if (!v225) {
              goto LABEL_402;
            }
            (*(void (**)(uint64_t, void *))(*(void *)v226 + 16))(v226, v8);
            if (!v306[0]) {
              goto LABEL_402;
            }
LABEL_18:
            WebKit::WebSWContextManagerConnection::postMessageToServiceWorker((WebCore::SWContextManager *)v6);
            if (v306[0])
            {
              if (LODWORD(v305[0]) != -1) {
                ((void (*)(unsigned char *, unsigned char *))off_1EEA0D0D8[LODWORD(v305[0])])(v344, &v298[32]);
              }
              LODWORD(v305[0]) = -1;
              uint64_t v20 = *(WTF **)&v298[16];
              if (*(void *)&v298[16])
              {
                *(void *)&v298[16] = 0;
                *(_DWORD *)&v298[24] = 0;
                WTF::fastFree(v20, v8);
              }
              long long v21 = *(unsigned int **)&v298[8];
              *(void *)&v298[8] = 0;
              if (v21) {
                WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v21);
              }
            }
            goto LABEL_402;
          }
LABEL_14:
          v344[0] = 0;
          v348[72] = 0;
          goto LABEL_15;
        }
        unint64_t v259 = v14;
        uint64_t v260 = 0;
      }
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v262 = *((void *)a3 + 3);
      if (v262 && v259) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v262 + 16))(v262, v260);
      }
      goto LABEL_14;
    case 0xAC2:
      unsigned __int16 v119 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(a3);
      if (v119 <= 0xFFu) {
        goto LABEL_361;
      }
      WebKit::WebSWContextManagerConnection::setInspectable((uint64_t)v6, v119 != 0);
      goto LABEL_402;
    case 0xAC3:
      uint64_t v147 = (WebCore::SWContextManager *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WallTime>>((uint64_t *)a3, (uint64_t)v298);
      if (v298[16])
      {
        WebCore::SWContextManager::singleton(v147);
        WebCore::SWContextManager::setRegistrationLastUpdateTime();
      }
      goto LABEL_402;
    case 0xAC4:
      unsigned __int16 v157 = (WebCore::SWContextManager *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerUpdateViaCache>>((uint64_t *)a3, (uint64_t)v298);
      if (v298[16])
      {
        WebCore::SWContextManager::singleton(v157);
        WebCore::SWContextManager::setRegistrationUpdateViaCache();
      }
      goto LABEL_402;
    case 0xAC5:
      unsigned __int16 v120 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v120 <= 0xFFu) {
        goto LABEL_361;
      }
      WebKit::WebSWContextManagerConnection::setThrottleState((atomic_uchar *volatile *)v6, v120 != 0);
      goto LABEL_402;
    case 0xAC6:
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)v298);
      if (!v298[8]) {
        goto LABEL_402;
      }
      WebKit::WebSWContextManagerConnection::setUserAgent((uint64_t)v6, (uint64_t *)v298);
      if (!v298[8]) {
        goto LABEL_402;
      }
      uint64_t v9 = *(WTF::StringImpl **)v298;
      *(void *)uint64_t v298 = 0;
      if (!v9) {
        goto LABEL_402;
      }
      goto LABEL_308;
    case 0xAC7:
      unint64_t v156 = IPC::Decoder::decode<std::tuple<unsigned long long>>(a3);
      if ((_BYTE)v8) {
        WebKit::WebSWContextManagerConnection::skipWaitingCompleted((atomic_uchar *volatile *)v6, v156);
      }
      goto LABEL_402;
    case 0xAC8:
      uint64_t v3 = (uint64_t)v6;
      uint64_t v158 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a3);
      if (!v159) {
        goto LABEL_321;
      }
      uint64_t v160 = v158;
      uint64_t v161 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v162) {
        goto LABEL_321;
      }
      uint64_t v163 = v161;
      uint64_t v164 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v165) {
        goto LABEL_321;
      }
      uint64_t v166 = v164;
      IPC::Decoder::decode<WebCore::ResourceRequest>(a3, (uint64_t)v344);
      if (!v348[64] || (IPC::Decoder::decode<WebCore::FetchOptions>(a3, (uint64_t)&v374), !v375[32]))
      {
        v298[0] = 0;
        char v312 = 0;
        uint64_t v6 = (unsigned int *)v3;
        goto LABEL_263;
      }
      IPC::Decoder::decode<IPC::FormDataReference>(a3, &v290);
      if (!v291)
      {
        v298[0] = 0;
        char v312 = 0;
        uint64_t v6 = (unsigned int *)v3;
        goto LABEL_258;
      }
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v292);
      if (!v293)
      {
        v298[0] = 0;
        char v312 = 0;
        uint64_t v6 = (unsigned int *)v3;
        goto LABEL_255;
      }
      unint64_t v168 = *((void *)a3 + 1);
      char v167 = *(WTF::StringImpl **)a3;
      unint64_t v169 = *((void *)a3 + 2) - *(void *)a3;
      if (v168 <= v169)
      {
        unint64_t v274 = 0;
        uint64_t v275 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v276 = *((void *)a3 + 3);
        if (v276)
        {
          if (v168)
          {
            (*(void (**)(uint64_t))(*(void *)v276 + 16))(v276);
            uint64_t v275 = *(void *)a3;
            unint64_t v274 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v274 = 0;
            uint64_t v275 = 0;
          }
        }
      }
      else
      {
        uint64_t v170 = (unsigned __int8 *)v167 + v169;
        *((void *)a3 + 2) = v170 + 1;
        if (v167)
        {
          unsigned int v171 = *v170;
          if (v171 < 2)
          {
            BOOL v172 = v171 != 0;
            IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v294);
            if (v295)
            {
              IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v296);
              char v173 = v297;
              if (v297)
              {
                if (!v348[64] || !v375[32] || !v291 || !v293 || !v295)
                {
LABEL_320:
                  __break(1u);
LABEL_321:
                  v298[0] = 0;
                  char v312 = 0;
                  uint64_t v6 = (unsigned int *)v3;
                  goto LABEL_322;
                }
                *(void *)uint64_t v298 = v160;
                *(void *)&v298[8] = v163;
                uint64_t v174 = *(void *)v344;
                uint64_t v175 = *(void *)&v344[40];
                *(void *)v344 = 0;
                *(void *)&v298[16] = v166;
                *(void *)&v298[24] = v174;
                *(_OWORD *)&v298[32] = *(_OWORD *)&v344[8];
                *(_OWORD *)&v298[48] = *(_OWORD *)&v344[24];
                *(_DWORD *)&v344[8] &= ~1u;
                *(void *)&v344[40] = 0;
                *(void *)&v298[64] = v175;
                *(_OWORD *)uint64_t v299 = *(_OWORD *)&v344[48];
                *(_OWORD *)&v299[16] = *(_OWORD *)&v344[64];
                *(_DWORD *)&v344[48] &= ~1u;
                *(void *)&v299[32] = *(void *)&v344[80];
                long long v176 = v345;
                long long v345 = 0u;
                *(_OWORD *)&v299[40] = v176;
                uint64_t v177 = *((void *)&v346 + 1);
                *(void *)&v299[56] = v346;
                long long v346 = 0uLL;
                *(void *)&long long v300 = v177;
                uint64_t v178 = *((void *)&v347 + 1);
                *((void *)&v300 + 1) = v347;
                long long v347 = 0uLL;
                *(void *)v301 = v178;
                uint64_t v179 = *(void *)v348;
                *(void *)v348 = 0;
                *(void *)&v301[8] = v179;
                v301[20] = v348[12];
                *(_DWORD *)&v301[16] = *(_DWORD *)&v348[8];
                long long v180 = *(_OWORD *)&v348[16];
                memset(&v348[16], 0, 24);
                long long v302 = v180;
                LOBYTE(cf[0]) = v348[48];
                long long v303 = *(_OWORD *)&v348[32];
                char v181 = *(const void **)&v348[56];
                *(void *)&v348[56] = 0;
                cf[1] = v181;
                *(_DWORD *)((char *)v305 + 3) = *(_DWORD *)((char *)&v374 + 3);
                LODWORD(v305[0]) = v374;
                char v182 = (WTF::StringImpl *)*((void *)&v374 + 1);
                *((void *)&v374 + 1) = 0;
                v305[1] = v182;
                *(_OWORD *)uint64_t v306 = *(_OWORD *)v375;
                *(_OWORD *)&v306[16] = *(_OWORD *)&v375[16];
                CFTypeRef v183 = v290;
                uint64_t v290 = 0;
                char v184 = v292;
                uint64_t v292 = 0;
                uint64_t v307 = v183;
                v308 = v184;
                char v309 = v172;
                uint64_t v185 = v294;
                uint64_t v294 = 0;
                char v173 = 1;
                uint64_t v310 = v185;
                uint64_t v311 = v296;
              }
              else
              {
                v298[0] = 0;
              }
              char v312 = v173;
              uint64_t v6 = (unsigned int *)v3;
              if (v295)
              {
                uint64_t v186 = v294;
                uint64_t v294 = 0;
                if (v186)
                {
                  if (*(_DWORD *)v186 == 2) {
                    WTF::StringImpl::destroy(v186, v167);
                  }
                  else {
                    *(_DWORD *)v186 -= 2;
                  }
                }
              }
LABEL_250:
              if (v293)
              {
                v203 = v292;
                uint64_t v292 = 0;
                if (v203)
                {
                  if (*(_DWORD *)v203 == 2) {
                    WTF::StringImpl::destroy(v203, v167);
                  }
                  else {
                    *(_DWORD *)v203 -= 2;
                  }
                }
              }
LABEL_255:
              if (v291)
              {
                uint64_t v204 = (WTF::RefCountedBase *)v290;
                uint64_t v290 = 0;
                if (v204) {
                  WTF::RefCounted<WebCore::FormData>::deref(v204);
                }
              }
LABEL_258:
              if (v375[32])
              {
                v205 = (WTF::StringImpl *)*((void *)&v374 + 1);
                *((void *)&v374 + 1) = 0;
                if (v205)
                {
                  if (*(_DWORD *)v205 == 2) {
                    WTF::StringImpl::destroy(v205, v167);
                  }
                  else {
                    *(_DWORD *)v205 -= 2;
                  }
                }
              }
LABEL_263:
              std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v344);
              if (v312) {
                goto LABEL_264;
              }
LABEL_322:
              char v8 = *(void **)a3;
              uint64_t v223 = *((void *)a3 + 1);
              *(void *)a3 = 0;
              *((void *)a3 + 1) = 0;
              uint64_t v224 = *((void *)a3 + 3);
              if (!v224) {
                goto LABEL_402;
              }
              if (!v223) {
                goto LABEL_402;
              }
              (*(void (**)(uint64_t, void *))(*(void *)v224 + 16))(v224, v8);
              if (!v312) {
                goto LABEL_402;
              }
LABEL_264:
              WebKit::WebSWContextManagerConnection::startFetch((uint64_t *)v6, *(uint64_t *)v298, *(uint64_t *)&v298[8], *(uint64_t *)&v298[16], (uint64_t)&v298[24], (uint64_t)v305, &v307);
              if (v312)
              {
                uint64_t v206 = v311;
                uint64_t v311 = 0;
                if (v206)
                {
                  if (*(_DWORD *)v206 == 2) {
                    WTF::StringImpl::destroy(v206, (WTF::StringImpl *)v8);
                  }
                  else {
                    *(_DWORD *)v206 -= 2;
                  }
                }
                v207 = v310;
                uint64_t v310 = 0;
                if (v207)
                {
                  if (*(_DWORD *)v207 == 2) {
                    WTF::StringImpl::destroy(v207, (WTF::StringImpl *)v8);
                  }
                  else {
                    *(_DWORD *)v207 -= 2;
                  }
                }
                uint64_t v208 = v308;
                v308 = 0;
                if (v208)
                {
                  if (*(_DWORD *)v208 == 2) {
                    WTF::StringImpl::destroy(v208, (WTF::StringImpl *)v8);
                  }
                  else {
                    *(_DWORD *)v208 -= 2;
                  }
                }
                v209 = (WTF::RefCountedBase *)v307;
                uint64_t v307 = 0;
                if (v209) {
                  WTF::RefCounted<WebCore::FormData>::deref(v209);
                }
                uint64_t v210 = v305[1];
                v305[1] = 0;
                if (v210)
                {
                  if (*(_DWORD *)v210 == 2) {
                    WTF::StringImpl::destroy(v210, (WTF::StringImpl *)v8);
                  }
                  else {
                    *(_DWORD *)v210 -= 2;
                  }
                }
                CFTypeRef v211 = cf[1];
                cf[1] = 0;
                if (v211) {
                  CFRelease(v211);
                }
                WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v298[24]);
              }
              goto LABEL_402;
            }
LABEL_412:
            v298[0] = 0;
            char v312 = 0;
            uint64_t v6 = (unsigned int *)v3;
            goto LABEL_250;
          }
LABEL_411:
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v278 = *((void *)a3 + 3);
          if (v278 && v168) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v278 + 16))(v278, v167);
          }
          goto LABEL_412;
        }
        unint64_t v274 = v168;
        uint64_t v275 = 0;
      }
      unint64_t v168 = 0;
      char v167 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v277 = *((void *)a3 + 3);
      if (v277)
      {
        if (v274)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v277 + 16))(v277, v275, v274);
          char v167 = *(WTF::StringImpl **)a3;
          unint64_t v168 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v168 = 0;
          char v167 = 0;
        }
      }
      goto LABEL_411;
    case 0xAC9:
      uint64_t v98 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)v8) {
        WebKit::WebSWContextManagerConnection::terminateWorker((uint64_t)v6, v98);
      }
      goto LABEL_402;
    case 0xACA:
      uint64_t v91 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v92) {
        goto LABEL_361;
      }
      unint64_t v93 = *((void *)a3 + 1);
      uint64_t v94 = *(void *)a3;
      unint64_t v95 = *((void *)a3 + 2) - *(void *)a3;
      if (v93 <= v95)
      {
        unint64_t v254 = 0;
        uint64_t v255 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v256 = *((void *)a3 + 3);
        if (v256)
        {
          if (v93)
          {
            (*(void (**)(uint64_t))(*(void *)v256 + 16))(v256);
            uint64_t v255 = *(void *)a3;
            unint64_t v254 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v254 = 0;
            uint64_t v255 = 0;
          }
        }
      }
      else
      {
        unint64_t v96 = (unsigned __int8 *)(v94 + v95);
        *((void *)a3 + 2) = v96 + 1;
        if (v94)
        {
          unsigned int v97 = *v96;
          if (v97 < 2)
          {
            WebKit::WebSWContextManagerConnection::updateAppInitiatedValue((atomic_uchar *volatile *)v6, v91, v97 != 0);
            goto LABEL_402;
          }
LABEL_366:
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v258 = *((void *)a3 + 3);
          if (v258)
          {
            if (v93)
            {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v258 + 16))(v258, v94);
              uint64_t v253 = *((void *)a3 + 3);
              uint64_t v251 = *(void *)a3;
              uint64_t v252 = *((void *)a3 + 1);
              *(void *)a3 = 0;
              *((void *)a3 + 1) = 0;
              if (v253)
              {
LABEL_369:
                if (v252) {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v253 + 16))(v253, v251);
                }
              }
            }
          }
LABEL_361:
          char v8 = *(void **)a3;
          uint64_t v190 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v191 = *((void *)a3 + 3);
          if (v191)
          {
LABEL_362:
            if (v190) {
              (*(void (**)(uint64_t, void *))(*(void *)v191 + 16))(v191, v8);
            }
          }
          goto LABEL_402;
        }
        unint64_t v254 = v93;
        uint64_t v255 = 0;
      }
      unint64_t v93 = 0;
      uint64_t v94 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v257 = *((void *)a3 + 3);
      if (v257)
      {
        if (v254)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v257 + 16))(v257, v255, v254);
          uint64_t v94 = *(void *)a3;
          unint64_t v93 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v93 = 0;
          uint64_t v94 = 0;
        }
      }
      goto LABEL_366;
    case 0xACB:
      IPC::Decoder::decode<std::tuple<WebKit::WebPreferencesStore>>(a3, (uint64_t)v298);
      if (v298[48]) {
        WebKit::WebSWContextManagerConnection::updatePreferencesStore((uint64_t)v6, (uint64_t *)v298);
      }
      std::optional<WebKit::WebPreferencesStore>::~optional((uint64_t)v298);
      goto LABEL_402;
    case 0xACC:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>>((uint64_t *)a3, v298);
      if (!v299[16]) {
        goto LABEL_402;
      }
      WebKit::WebSWContextManagerConnection::updateRegistrationState((WebCore::SWContextManager *)v6, *(uint64_t *)v298, v298[8], (uint64_t)&v298[16]);
      if (!v299[16]) {
        goto LABEL_402;
      }
      if (!v299[8]) {
        goto LABEL_402;
      }
      uint64_t v9 = *(WTF::StringImpl **)&v298[32];
      *(void *)&v298[32] = 0;
      if (!v9) {
        goto LABEL_402;
      }
      goto LABEL_308;
    case 0xACD:
      uint64_t v187 = (WebCore::SWContextManager *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ServiceWorkerState>>((uint64_t *)a3, (uint64_t)v298);
      if (v298[16])
      {
        WebCore::SWContextManager::singleton(v187);
        WebCore::SWContextManager::updateWorkerState();
      }
      goto LABEL_402;
    default:
      goto LABEL_402;
  }
}

void non-virtual thunk to'WebKit::WebSWContextManagerConnection::didReceiveMessage(atomic_uchar *volatile *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v5
    && (uint64_t v6 = v4,
        uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2),
        v8)
    && (uint64_t v9 = v7,
        uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2),
        v11))
  {
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = result;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    uint64_t v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v13 = v12 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13)
    {
      unint64_t v14 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v14();
    }
  }
  return result;
}

uint64_t std::__variant_detail::__alt<1ul,WebCore::ServiceWorkerClientData>::__alt[abi:sn180100]<WebCore::ServiceWorkerClientData>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + ++*(_DWORD *)(this + 16) = v5;
  WTF::URL::URL(a1 + 40, (uint64_t *)a2 + 5);
  WTF::URL::URL(a1 + 80, (uint64_t *)a2 + 10);
  long long v6 = *(long long *)((char *)a2 + 120);
  long long v7 = *(long long *)((char *)a2 + 136);
  uint64_t v8 = *((void *)a2 + 21);
  *(_OWORD *)(a1 + 152) = *(long long *)((char *)a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = v8;
  uint64_t v9 = *((void *)a2 + 22);
  *((void *)a2 + 22) = 0;
  *(void *)(a1 + 176) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = 0;
  *(_DWORD *)(a1 + 184) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = 0;
  *(_DWORD *)(a1 + 188) = v9;
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 192);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EEA0D0D8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 192) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 192);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EEA0D0E8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 192) = v5;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ServiceWorkerDataENS8_23ServiceWorkerClientDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 2);
  *((void *)a2 + 2) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ServiceWorkerDataENS8_23ServiceWorkerClientDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 22), a2);
  uint64_t v4 = (WTF::StringImpl *)a2[10];
  a2[10] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t result = (WTF::StringImpl *)a2[5];
  a2[5] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ServiceWorkerDataENS8_23ServiceWorkerClientDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  WTF::URL::URL(a2 + 16, (uint64_t *)(a3 + 16));
  *(_WORD *)(a2 + 56) = *(_WORD *)(a3 + 56);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ServiceWorkerDataENS8_23ServiceWorkerClientDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  return std::__variant_detail::__alt<1ul,WebCore::ServiceWorkerClientData>::__alt[abi:sn180100]<WebCore::ServiceWorkerClientData>(a2, a3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection13FirePushEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINSG_4spanIKhLm18446744073709551615EEEEEONSH_INSA_19NotificationPayloadEEEONS_17CompletionHandlerIFvbSO_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSO_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D108;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection13FirePushEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINSG_4spanIKhLm18446744073709551615EEEEEONSH_INSA_19NotificationPayloadEEEONS_17CompletionHandlerIFvbSO_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSO_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D108;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection13FirePushEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINSG_4spanIKhLm18446744073709551615EEEEEONSH_INSA_19NotificationPayloadEEEONS_17CompletionHandlerIFvbSO_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSO_EE4callEbSO_(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 3558;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unint64_t v14 = v7;
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (v9)
  {
    unsigned char *v8 = a2;
    IPC::ArgumentCoder<std::optional<WebCore::NotificationPayload>,void>::encode<IPC::Encoder,std::optional<WebCore::NotificationPayload>>(v7, a3);
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
    uint64_t result = (uint64_t)v14;
    unint64_t v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
      return WTF::fastFree(v12, v13);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection21FireNotificationEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_16NotificationDataENSA_21NotificationEventTypeEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D130;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection21FireNotificationEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_16NotificationDataENSA_21NotificationEventTypeEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D130;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection21FireNotificationEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_16NotificationDataENSA_21NotificationEventTypeEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3557;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v5 && (v6 = v4, uint64_t result = IPC::Decoder::decode<WebCore::BackgroundFetchInformation>(a2, (uint64_t)v14), v17))
  {
    uint64_t v8 = v14[0];
    uint64_t v9 = v14[1];
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = v9;
    long long v10 = *(_OWORD *)v16;
    *(_OWORD *)(a1 + 24) = v15;
    *(_OWORD *)(a1 + ++*(_DWORD *)(this + 40) = v10;
    *(_DWORD *)(a1 + 55) = *(_DWORD *)&v16[15];
    *(unsigned char *)(a1 + 64) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 64) = 0;
    uint64_t v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      BOOL v13 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v13();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection24FireBackgroundFetchEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_26BackgroundFetchInformationEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D158;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection24FireBackgroundFetchEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_26BackgroundFetchInformationEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D158;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection24FireBackgroundFetchEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_26BackgroundFetchInformationEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3556;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    BOOL v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection29FireBackgroundFetchClickEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_26BackgroundFetchInformationEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D180;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection29FireBackgroundFetchClickEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_26BackgroundFetchInformationEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D180;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection29FireBackgroundFetchClickEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_26BackgroundFetchInformationEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3555;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    BOOL v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(a1, v5, a2);
}

WTF::StringImpl **WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t Table = WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    uint64_t v13 = v6;
    do
    {
      if (*(void *)v13 != -1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v13))
        {
          unint64_t v14 = *(unsigned int **)(v13 + 40);
          *(void *)(v13 + ++*(_DWORD *)(this + 40) = 0;
          if (v14) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v10);
          }
          long long v15 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v10);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
        }
        else
        {
          char v17 = (WTF::StringImpl **)WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::lookupForReinsert(a1, (WTF::StringImpl **)v13);
          uint64_t v18 = (unsigned int *)v17[5];
          v17[5] = 0;
          if (v18) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v18, v16);
          }
          uint64_t v19 = *v17;
          *char v17 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v16);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
          WTF::URL::URL((uint64_t)v17, (uint64_t *)v13);
          uint64_t v20 = *(WTF::StringImpl **)(v13 + 40);
          *(void *)(v13 + ++*(_DWORD *)(this + 40) = 0;
          v17[5] = v20;
          long long v21 = *(unsigned int **)(v13 + 40);
          *(void *)(v13 + ++*(_DWORD *)(this + 40) = 0;
          if (v21) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v21, v10);
          }
          uint64_t v22 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v10);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v11 = v17;
          }
        }
      }
      v13 += 48;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::allocateTable(unsigned int a1)
{
  LODWORD(v1) = a1;
  uint64_t v2 = WTF::fastMalloc((WTF *)(48 * a1 + 16));
  uint64_t v3 = v2 + 16;
  if (v1)
  {
    uint64_t v1 = v1;
    int v4 = (void *)(v2 + 56);
    do
    {
      *(v4 - 5) = 0;
      WTF::URL::invalidate((WTF::URL *)(v4 - 5));
      *int v4 = 0;
      v4 += 6;
      --v1;
    }
    while (v1);
  }
  return v3;
}

uint64_t WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::lookupForReinsert(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  unsigned int v4 = *((_DWORD *)*a2 + 4);
  if (v4 >= 0x100) {
    unsigned int v5 = v4 >> 8;
  }
  else {
    unsigned int v5 = WTF::StringImpl::hashSlowCase(*a2);
  }
  int v6 = 0;
  do
  {
    unsigned int v7 = v5 & v3;
    int v8 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)(v2 + 48 * (v5 & v3)));
    unsigned int v5 = ++v6 + v7;
  }
  while (!v8);
  return v2 + 48 * v7;
}

uint64_t WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      unsigned int v5 = *(WTF::StringImpl **)v4;
      if (*(void *)v4 != -1)
      {
        int v6 = *(unsigned int **)(v4 + 40);
        *(void *)(v4 + ++*(_DWORD *)(this + 40) = 0;
        if (v6)
        {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, a2);
          unsigned int v5 = *(WTF::StringImpl **)v4;
        }
        *(void *)uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 48;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

__n128 WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerClientData>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = *(void *)a1 + 192 * a1[3];
  __int16 v5 = *(_WORD *)(v3 + 32);
  long long v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v3;
  *(_OWORD *)(v4 + ++*(_DWORD *)(this + 16) = v6;
  *(_WORD *)(v4 + 32) = v5;
  WTF::URL::URL(v4 + 40, (uint64_t *)(v3 + 40));
  WTF::URL::URL(v4 + 80, (uint64_t *)(v3 + 80));
  __n128 result = *(__n128 *)(v3 + 120);
  long long v8 = *(_OWORD *)(v3 + 136);
  uint64_t v9 = *(void *)(v3 + 168);
  *(_OWORD *)(v4 + 152) = *(_OWORD *)(v3 + 152);
  *(_OWORD *)(v4 + 136) = v8;
  *(__n128 *)(v4 + 120) = result;
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 0;
  *(void *)(v4 + 168) = v9;
  uint64_t v10 = *(void *)(v3 + 176);
  *(void *)(v3 + 176) = 0;
  *(void *)(v4 + 176) = v10;
  LODWORD(v10) = *(_DWORD *)(v3 + 184);
  *(_DWORD *)(v3 + 184) = 0;
  *(_DWORD *)(v4 + 184) = v10;
  LODWORD(v10) = *(_DWORD *)(v3 + 188);
  *(_DWORD *)(v3 + 188) = 0;
  *(_DWORD *)(v4 + 188) = v10;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 192 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x1555556)
    {
      __break(0xC471u);
      JUMPOUT(0x1994183E0);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)result + 192 * *((unsigned int *)result + 3));
    int v5 = 192 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(192 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFC0) / 0xC0;
    *(void *)uint64_t v2 = v6;
    __n128 result = WTF::VectorMover<false,WebCore::ServiceWorkerClientData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ServiceWorkerClientData>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = a3 + 40;
    uint64_t v5 = (uint64_t)result + 176;
    do
    {
      long long v6 = *(_OWORD *)(v5 - 176);
      long long v7 = *(_OWORD *)(v5 - 160);
      *(_WORD *)(v4 - 8) = *(_WORD *)(v5 - 144);
      *(_OWORD *)(v4 - 24) = v7;
      *(_OWORD *)(v4 - ++*(_DWORD *)(this + 40) = v6;
      WTF::URL::URL(v4, (uint64_t *)(v5 - 136));
      WTF::URL::URL(v4 + 40, (uint64_t *)(v5 - 96));
      long long v8 = *(_OWORD *)(v5 - 56);
      long long v9 = *(_OWORD *)(v5 - 24);
      uint64_t v10 = *(void *)(v5 - 8);
      *(_OWORD *)(v4 + 96) = *(_OWORD *)(v5 - 40);
      *(_OWORD *)(v4 + 112) = v9;
      *(_OWORD *)(v4 + 80) = v8;
      *(void *)(v4 + 136) = 0;
      *(void *)(v4 + 144) = 0;
      *(void *)(v4 + 128) = v10;
      uint64_t v11 = *(void *)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)(v4 + 136) = v11;
      LODWORD(v11) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(v4 + 144) = v11;
      LODWORD(v11) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(v4 + 148) = v11;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, v12);
      unint64_t v14 = *(WTF::StringImpl **)(v5 - 96);
      *(void *)(v5 - 96) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      uint64_t v15 = v5 - 176;
      __n128 result = *(WTF::StringImpl **)(v5 - 136);
      *(void *)(v5 - 136) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v4 += 192;
      v5 += 192;
    }
    while ((WTF::StringImpl *)(v15 + 192) != a2);
  }
  return result;
}

unsigned int *WebKit::WebSWOriginStore::addToStore(WebKit::WebSWOriginStore *this, const WebCore::SecurityOriginData *a2)
{
  uint64_t v2 = (WebKit::WebSWOriginStore *)((char *)this + 24);
  WebCore::SecurityOriginData::toString((uint64_t *)&v8, a2);
  int v4 = WebCore::computeSharedStringHash((WebCore *)&v8, v3);
  WebKit::SharedStringHashStore::scheduleAddition(v2, v4);
  long long v6 = v8;
  long long v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return WebKit::SharedStringHashStore::flushPendingChanges(v2);
}

unsigned int *WebKit::WebSWOriginStore::removeFromStore(WebKit::WebSWOriginStore *this, const WebCore::SecurityOriginData *a2)
{
  uint64_t v2 = (WebKit::WebSWOriginStore *)((char *)this + 24);
  WebCore::SecurityOriginData::toString((uint64_t *)&v8, a2);
  int v4 = WebCore::computeSharedStringHash((WebCore *)&v8, v3);
  WebKit::SharedStringHashStore::scheduleRemoval(v2, v4);
  long long v6 = v8;
  long long v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return WebKit::SharedStringHashStore::flushPendingChanges(v2);
}

unsigned int *WebKit::WebSWOriginStore::clearStore(WebKit::WebSWOriginStore *this)
{
  return WebKit::SharedStringHashStore::clear((WebKit::WebSWOriginStore *)((char *)this + 24));
}

void *WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(void *a1, void **a2)
{
  int v4 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  *a1 = a2;
  a1[1] = v4;
  a1[2] = v5;
  long long v6 = *a2;
  if (*a2)
  {
    uint64_t v7 = *((unsigned int *)v6 - 1);
    long long v8 = &v6[v7];
  }
  else
  {
    long long v8 = 0;
    uint64_t v7 = 0;
  }
  a1[3] = v8;
  a1[4] = &v6[v7];

  return WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a1);
}

void *WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  unint64_t v3 = (void *)(a1[1] + 8);
  a1[1] = v3;
  while (v3 != v2 && (unint64_t)(*v3 + 1) <= 1)
    a1[1] = ++v3;
  WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a1);
  ++*(_DWORD *)(*a1 + 8);
  return a1;
}

void WebKit::WebSWOriginStore::sendStoreHandle(WebKit::WebSWOriginStore *this, WebKit::WebSWServerConnection *a2)
{
  WebCore::SharedMemory::createHandle();
  if (v12)
  {
    uint64_t v4 = *((void *)a2 + 7);
    unint64_t v3 = (char *)a2 + 56;
    uint64_t v5 = (*(uint64_t (**)(char *))(v4 + 56))(v3);
    long long v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)long long v6 = 2731;
    *((void *)v6 + 1) = v5;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    uint64_t v13 = v6;
    IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(v6, (unint64_t)v11);
    (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v13, 0);
    long long v8 = v13;
    uint64_t v13 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v9, v10);
    }
    if (v12) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v11);
    }
  }
}

unsigned int **WebKit::WebSWOriginStore::unregisterSWServerConnection(unsigned int **this, WebKit::WebSWServerConnection *a2)
{
  return WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebSWServerConnection>(this + 15, a2);
}

unsigned int **WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebSWServerConnection>(unsigned int **result, void *a2)
{
  unint64_t v3 = result;
  unsigned int v4 = *((_DWORD *)result + 3);
  unsigned int v5 = *((_DWORD *)result + 2) + 1;
  *((_DWORD *)result + 2) = v5;
  if (v5 > v4)
  {
    __n128 result = _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit21WebSWServerConnectionES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(result, a2);
    *((_DWORD *)v3 + 2) = 0;
    uint64_t v6 = (uint64_t)*v3;
    if (*v3)
    {
      LODWORD(v6) = *(_DWORD *)(v6 - 12);
      if (v6 > 0x7FFFFFFE) {
        LODWORD(v6) = 0x7FFFFFFF;
      }
    }
    *((_DWORD *)v3 + 3) = 2 * v6;
  }
  uint64_t v7 = a2[1];
  if (v7 && *(void *)(v7 + 8))
  {
    return (unsigned int **)WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)v3, v7);
  }
  return result;
}

uint64_t WebKit::WebSWOriginStore::didInvalidateSharedMemory(WebKit::WebSWOriginStore *this)
{
  uint64_t v2 = (char *)this + 120;
  WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v16, (void **)this + 15);
  uint64_t v3 = *((void *)this + 15);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    uint64_t v5 = v3 + 8 * v4;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v11 = v2;
  uint64_t v12 = v5;
  uint64_t v13 = v5;
  uint64_t v14 = v5;
  uint64_t v15 = v3 + 8 * v4;
  uint64_t result = (uint64_t)WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v11);
  uint64_t v7 = v17;
  uint64_t v8 = v12;
  while (v7 != v8)
  {
    long long v9 = *(WebKit::WebSWServerConnection **)(*(void *)v7 + 8);
    ++*((_DWORD *)v9 + 4);
    WebKit::WebSWOriginStore::sendStoreHandle(*((WebKit::WebSWOriginStore **)this + 5), v9);
    int v10 = *((_DWORD *)v9 + 4);
    if (!v10)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    *((_DWORD *)v9 + 4) = v10 - 1;
    uint64_t result = (uint64_t)WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v16);
    uint64_t v7 = v17;
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::WebSWOriginStore::didInvalidateSharedMemory(WebKit::WebSWOriginStore *this)
{
  return WebKit::WebSWOriginStore::didInvalidateSharedMemory((WebKit::WebSWOriginStore *)((char *)this - 16));
}

void WebKit::WebSWOriginStore::~WebSWOriginStore(WebKit::WebSWOriginStore *this, void *a2)
{
  uint64_t v3 = (unsigned int **)*((void *)this + 15);
  if (v3) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  }
  *((void *)this + 10) = &unk_1EE9B3390;
  uint64_t v4 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebSWOriginStore *)((char *)this + 80));
  uint64_t v6 = (WTF *)*((void *)this + 8);
  if (v6)
  {
    *((void *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v6, v5);
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v7);
  }
  *(void *)this = &unk_1EEA0D220;
  uint64_t v8 = *((void *)this + 1);
  if (v8) {
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v8, v5);
  }
}

{
  unsigned int **v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t vars8;

  uint64_t v3 = (unsigned int **)*((void *)this + 15);
  if (v3) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  }
  *((void *)this + 10) = &unk_1EE9B3390;
  uint64_t v4 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebSWOriginStore *)((char *)this + 80));
  uint64_t v6 = (WTF *)*((void *)this + 8);
  if (v6)
  {
    *((void *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v6, v5);
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v7);
  }
  *(void *)this = &unk_1EEA0D220;
  uint64_t v8 = *((void *)this + 1);
  if (v8) {
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v8, v5);
  }

  WTF::fastFree(this, v5);
}

void non-virtual thunk to'WebKit::WebSWOriginStore::~WebSWOriginStore(WebKit::WebSWOriginStore *this, void *a2)
{
  uint64_t v3 = (unsigned int **)*((void *)this + 13);
  if (v3) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  }
  *((void *)this + 8) = &unk_1EE9B3390;
  uint64_t v4 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebSWOriginStore *)((char *)this + 64));
  uint64_t v6 = (WTF *)*((void *)this + 6);
  if (v6)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v6, v5);
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v7);
  }
  *((void *)this - 2) = &unk_1EEA0D220;
  uint64_t v8 = *((void *)this - 1);
  if (v8) {
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v8, v5);
  }
}

{
  unsigned int **v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t vars8;

  uint64_t v3 = (unsigned int **)*((void *)this + 13);
  if (v3) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  }
  *((void *)this + 8) = &unk_1EE9B3390;
  uint64_t v4 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebSWOriginStore *)((char *)this + 64));
  uint64_t v6 = (WTF *)*((void *)this + 6);
  if (v6)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v6, v5);
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v7);
  }
  *((void *)this - 2) = &unk_1EEA0D220;
  uint64_t v8 = *((void *)this - 1);
  if (v8) {
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v8, v5);
  }

  WTF::fastFree((WebKit::WebSWOriginStore *)((char *)this - 16), v5);
}

void *WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(void *result)
{
  uint64_t v1 = result[3];
  uint64_t v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(void *)(*(void *)v2 + 8))
  {
    v2 += 8;
    result[1] = v2;
    uint64_t v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(void *)v2 + 1) <= 1)
      {
        v2 += 8;
        result[1] = v2;
        if (v2 == v3)
        {
          uint64_t v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v3 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(a1, &v6);
  if (!*a1)
  {
    if (v3)
    {
      uint64_t v4 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  uint64_t v4 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
  if ((unsigned int **)v4 == v3) {
    return 0;
  }
LABEL_3:
  if ((unsigned int **)v4 != v3) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(a1, v3);
  }
  return 1;
}

void WebKit::WebSWServerConnection::~WebSWServerConnection(WebKit::WebSWServerConnection *this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = WebKit::WebSWServerConnection::session(this);
  if (v2)
  {
    uint64_t v3 = v2;
    ++*(_DWORD *)(v2 + 16);
    WebKit::NetworkSession::unregisterSWServerConnection((unsigned int **)v2, this);
    int v4 = *(_DWORD *)(v3 + 16);
    if (!v4)
    {
      __break(0xC471u);
      JUMPOUT(0x199419098);
    }
    *(_DWORD *)(v3 + ++*(_DWORD *)(this + 16) = v4 - 1;
  }
  uint64_t v5 = *(_DWORD **)(*((void *)this + 3) + 8);
  ++*v5;
  uint64_t v6 = (void *)*((void *)this + 12);
  uint64_t v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::begin(v6);
  uint64_t v8 = v7;
  int v10 = v9;
  if (v6) {
    v6 += 12 * *((unsigned int *)v6 - 1);
  }
  if (v6 != v7)
  {
    do
    {
      long long v11 = *((_OWORD *)v8 + 1);
      long long v29 = *(_OWORD *)v8;
      long long v30 = v11;
      WebCore::SWServer::unregisterServiceWorkerClient();
      while (1)
      {
        v8 += 12;
        if (v8 == v10) {
          break;
        }
        uint64_t v12 = v8[2];
        if (*v8 | v8[1] | v12) {
          BOOL v13 = v12 == -1;
        }
        else {
          BOOL v13 = 1;
        }
        if (!v13) {
          goto LABEL_13;
        }
      }
      uint64_t v8 = v10;
LABEL_13:
      ;
    }
    while (v8 != v6);
  }
  uint64_t v14 = (void *)*((void *)this + 13);
  uint64_t v15 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin(v14);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  if (v14) {
    uint64_t v19 = &v14[2 * *((unsigned int *)v14 - 1)];
  }
  else {
    uint64_t v19 = 0;
  }
  if (v19 != v15)
  {
    do
    {
      v26[0] = 0;
      int v27 = 0;
      uint64_t v25 = v16[1];
      v16[1] = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v25 + 16))(v25, v26);
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      if (v27 != -1) {
        ((void (*)(char *, unsigned char *))off_1EEA0D380[v27])(&v28, v26);
      }
      while (1)
      {
        v16 += 2;
        if (v16 == v18) {
          break;
        }
        if ((unint64_t)(*v16 + 1) > 1) {
          goto LABEL_31;
        }
      }
      uint64_t v16 = v18;
LABEL_31:
      ;
    }
    while (v16 != v19);
  }
  WTF::RefCounted<WebCore::SWServer>::deref(v5);
  uint64_t v21 = *((void *)this + 13);
  if (v21) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::deallocateTable(v21, v20);
  }
  uint64_t v22 = *((void *)this + 12);
  if (v22) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::deallocateTable(v22, v20);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 11);
  uint64_t v24 = (unsigned int *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v24 && atomic_fetch_add((atomic_uint *volatile)v24, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v24);
    WTF::fastFree((WTF *)v24, v23);
  }
  *((void *)this + 8) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 9, v23);
  WTF::isIntegralOrPointerType((WebKit::WebSWServerConnection *)((char *)this + 56));
  WebCore::SWServer::Connection::~Connection(this);
}

void non-virtual thunk to'WebKit::WebSWServerConnection::~WebSWServerConnection(WebKit::WebSWServerConnection *this)
{
}

{
  WebKit::WebSWServerConnection::~WebSWServerConnection((WebKit::WebSWServerConnection *)((char *)this - 64));
}

{
  WebKit::WebSWServerConnection::operator delete((WebKit::WebSWServerConnection *)((char *)this - 56));
}

{
  WebKit::WebSWServerConnection::operator delete((WebKit::WebSWServerConnection *)((char *)this - 64));
}

double WebKit::WebSWServerConnection::operator delete(WebKit::WebSWServerConnection *a1)
{
  WebKit::WebSWServerConnection::~WebSWServerConnection(a1);
  if (*(_DWORD *)(v1 + 16))
  {
    *(void *)(v1 + 112) = 0;
    double result = 0.0;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + ++*(_DWORD *)(this + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)uint64_t v1 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerConnection::rejectJobInClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a2;
  uint64_t v5 = (uint64_t *)(a1 + 104);
  uint64_t v6 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 104), a2);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>><void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::take(&v20, v5, v6);
  uint64_t v7 = v20;
  if (v20)
  {
    char v8 = *(unsigned char *)a3;
    long long v9 = *(IPC::Encoder **)(a3 + 8);
    if (v9) {
      *(_DWORD *)v9 += 2;
    }
    LOBYTE(v18[0]) = v8;
    v18[1] = v9;
    int v19 = 1;
    (*(void (**)(uint64_t, IPC::Encoder **))(*(void *)v7 + 16))(v7, v18);
    double result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
    if (v19 != -1) {
      return (IPC::Encoder *)((uint64_t (*)(char *, IPC::Encoder **))off_1EEA0D380[v19])(&v22, v18);
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v11 = a1 + 56;
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
    uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v14 = 2722;
    *((void *)v14 + 1) = v13;
    *((void *)v14 + 66) = (char *)v14 + 16;
    *((void *)v14 + 67) = 512;
    *((void *)v14 + 68) = 0;
    *((void *)v14 + 70) = 0;
    *((void *)v14 + 69) = 0;
    IPC::Encoder::encodeHeader(v14);
    v18[0] = v14;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v14, &v21);
    IPC::ArgumentCoder<WebCore::Exception,void>::encode(v14, (char *)a3);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v11 + 32))(v11, v18, 0);
    double result = v18[0];
    v18[0] = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v15);
      return (IPC::Encoder *)WTF::fastFree(v16, v17);
    }
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::resolveRegistrationJobInClient(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v15 = a2;
  uint64_t v6 = a1 + 56;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 56) + 56))(a1 + 56);
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2727;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v16 = v8;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, &v15);
  IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationData,void>::encode(v8, a3);
  long long v9 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
  if (v10)
  {
    *long long v9 = a4;
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v16, 0);
    uint64_t result = (uint64_t)v16;
    uint64_t v16 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v11);
      return WTF::fastFree(v13, v14);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void WebKit::WebSWServerConnection::resolveUnregistrationJobInClient(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = a1 + 13;
  char v8 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1[13], a2);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>><void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::take(&v20, v7, v8);
  uint64_t v9 = v20;
  if (v20)
  {
    if (WebKit::WebSWServerConnection::session((WebKit::WebSWServerConnection *)a1))
    {
      uint64_t v10 = *(WTF::StringImpl **)(a3 + 32);
      if (v10) {
        *(_DWORD *)v10 += 2;
      }
      uint64_t v17 = v10;
      long long v18 = *(_OWORD *)(a3 + 40);
      long long v19 = *(_OWORD *)(a3 + 56);
      uint64_t v11 = WebKit::WebSWServerConnection::session((WebKit::WebSWServerConnection *)a1) + 1080;
      uint64_t v12 = WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v12 = &unk_1EEA0D420;
      *(void *)(v12 + 8) = v9;
      *(unsigned char *)(v12 + ++*(_DWORD *)(this + 16) = a4;
      uint64_t v16 = v12;
      WebKit::NetworkNotificationManager::unsubscribeFromPushService(v11, (uint64_t)&v17, 0, 0, &v16);
      uint64_t v14 = v16;
      uint64_t v16 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
      uint64_t v15 = v17;
      uint64_t v17 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
    else
    {
      LOBYTE(v17) = a4;
      DWORD2(v18) = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v9 + 16))(v9, &v17);
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      if (DWORD2(v18) != -1) {
        ((void (*)(uint64_t *, WTF::StringImpl **))off_1EEA0D380[DWORD2(v18)])(&v16, &v17);
      }
    }
  }
}

uint64_t WebKit::WebSWServerConnection::startScriptFetchInClient(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v15 = a2;
  uint64_t v6 = a1 + 56;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 56) + 56))(a1 + 56);
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2733;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v16 = v8;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, &v15);
  IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationKey,void>::encode(v8, a3);
  uint64_t v9 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
  if (v10)
  {
    *uint64_t v9 = a4;
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v16, 0);
    uint64_t result = (uint64_t)v16;
    uint64_t v16 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v11);
      return WTF::fastFree(v13, v14);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::updateRegistrationStateInClient(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v25 = a4;
  uint64_t v26 = a2;
  char v23 = &v26;
  char v24 = a3;
  uint64_t v7 = a1 + 56;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 56) + 56))(a1 + 56);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 2735;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  int v27 = v9;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData> const&>,0ul,1ul,2ul>(v9, (uint64_t)&v23);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v7 + 32))(v7, &v27, 0);
  uint64_t result = (uint64_t)v27;
  int v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
    uint64_t result = WTF::fastFree(v19, v20);
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 80) + 8);
  if (v12) {
    uint64_t v13 = v12 - 48;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void *)(v13 + 224);
  if (v14)
  {
    ++*(_DWORD *)(v14 + 16);
    char v23 = &v26;
    char v24 = a3;
    uint64_t v25 = a4;
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)(v14 + 104) + 56))(v14 + 104);
    uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v16 = 2764;
    *((void *)v16 + 1) = v15;
    *((void *)v16 + 66) = (char *)v16 + 16;
    *((void *)v16 + 67) = 512;
    *((void *)v16 + 68) = 0;
    *((void *)v16 + 70) = 0;
    *((void *)v16 + 69) = 0;
    IPC::Encoder::encodeHeader(v16);
    int v27 = v16;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData> const&>,0ul,1ul,2ul>(v16, (uint64_t)&v23);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v14 + 104) + 32))(v14 + 104, &v27, 0);
    uint64_t result = (uint64_t)v27;
    int v27 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v17);
      uint64_t result = WTF::fastFree(v21, v22);
    }
    int v18 = *(_DWORD *)(v14 + 16);
    if (v18)
    {
      *(_DWORD *)(v14 + ++*(_DWORD *)(this + 16) = v18 - 1;
    }
    else
    {
      uint64_t result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::fireUpdateFoundEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a2;
  uint64_t v3 = a1 + 56;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 56) + 56))(a1 + 56);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2720;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v21 = v5;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v5, &v20);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v21, 0);
  uint64_t result = (uint64_t)v21;
  uint64_t v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v6);
    uint64_t result = WTF::fastFree(v16, v17);
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 80) + 8);
  if (v8) {
    uint64_t v9 = v8 - 48;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void *)(v9 + 224);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 104);
    ++*(_DWORD *)(v10 + 16);
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(v11 + 56))(v10 + 104);
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 2748;
    *((void *)v13 + 1) = v12;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 68) = 0;
    *((void *)v13 + 70) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    uint64_t v21 = v13;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v13, &v20);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v10 + 104) + 32))(v10 + 104, &v21, 0);
    uint64_t result = (uint64_t)v21;
    uint64_t v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
      uint64_t result = WTF::fastFree(v18, v19);
    }
    int v15 = *(_DWORD *)(v10 + 16);
    if (v15)
    {
      *(_DWORD *)(v10 + ++*(_DWORD *)(this + 16) = v15 - 1;
    }
    else
    {
      uint64_t result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::setRegistrationLastUpdateTime(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v22 = a2;
  uint64_t v5 = a1 + 56;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 56) + 56))(a1 + 56);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2728;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v23 = v7;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v7, &v22);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v23, 0);
  uint64_t result = (uint64_t)v23;
  char v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
    uint64_t result = WTF::fastFree(v18, v19);
  }
  uint64_t v10 = *(void *)(*(void *)(a1 + 80) + 8);
  if (v10) {
    uint64_t v11 = v10 - 48;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)(v11 + 224);
  if (v12)
  {
    uint64_t v13 = *(void *)(v12 + 104);
    ++*(_DWORD *)(v12 + 16);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(v13 + 56))(v12 + 104);
    int v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v15 = 2755;
    *((void *)v15 + 1) = v14;
    *((void *)v15 + 66) = (char *)v15 + 16;
    *((void *)v15 + 67) = 512;
    *((void *)v15 + 68) = 0;
    *((void *)v15 + 70) = 0;
    *((void *)v15 + 69) = 0;
    IPC::Encoder::encodeHeader(v15);
    char v23 = v15;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v15, &v22);
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v15, a3);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v12 + 104) + 32))(v12 + 104, &v23, 0);
    uint64_t result = (uint64_t)v23;
    char v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v16);
      uint64_t result = WTF::fastFree(v20, v21);
    }
    int v17 = *(_DWORD *)(v12 + 16);
    if (v17)
    {
      *(_DWORD *)(v12 + ++*(_DWORD *)(this + 16) = v17 - 1;
    }
    else
    {
      uint64_t result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::setRegistrationUpdateViaCache(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v22 = a2;
  uint64_t v5 = a1 + 56;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 56) + 56))(a1 + 56);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2729;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v23 = v7;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v7, &v22);
  IPC::ArgumentCoder<WebCore::ServiceWorkerUpdateViaCache,void>::encode<IPC::Encoder>(v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v23, 0);
  uint64_t result = (uint64_t)v23;
  char v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
    uint64_t result = WTF::fastFree(v18, v19);
  }
  uint64_t v10 = *(void *)(*(void *)(a1 + 80) + 8);
  if (v10) {
    uint64_t v11 = v10 - 48;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)(v11 + 224);
  if (v12)
  {
    uint64_t v13 = *(void *)(v12 + 104);
    ++*(_DWORD *)(v12 + 16);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(v13 + 56))(v12 + 104);
    int v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v15 = 2756;
    *((void *)v15 + 1) = v14;
    *((void *)v15 + 66) = (char *)v15 + 16;
    *((void *)v15 + 67) = 512;
    *((void *)v15 + 68) = 0;
    *((void *)v15 + 70) = 0;
    *((void *)v15 + 69) = 0;
    IPC::Encoder::encodeHeader(v15);
    char v23 = v15;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v15, &v22);
    IPC::ArgumentCoder<WebCore::ServiceWorkerUpdateViaCache,void>::encode<IPC::Encoder>(v15, a3);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v12 + 104) + 32))(v12 + 104, &v23, 0);
    uint64_t result = (uint64_t)v23;
    char v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v16);
      uint64_t result = WTF::fastFree(v20, v21);
    }
    int v17 = *(_DWORD *)(v12 + 16);
    if (v17)
    {
      *(_DWORD *)(v12 + ++*(_DWORD *)(this + 16) = v17 - 1;
    }
    else
    {
      uint64_t result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::notifyClientsOfControllerChange(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v5 = a1 + 56;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 56) + 56))(a1 + 56);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2723;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v26 = v7;
  if (*a2) {
    int v8 = *((_DWORD *)*a2 - 3);
  }
  else {
    int v8 = 0;
  }
  uint64_t v9 = (_DWORD *)IPC::Encoder::grow(v7, 4uLL, 4);
  if (v10 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
    return result;
  }
  *uint64_t v9 = v8;
  uint64_t v11 = *a2;
  if (*a2)
  {
    uint64_t v12 = *((unsigned int *)v11 - 1);
    uint64_t v13 = &v11[4 * v12];
    if (*((_DWORD *)v11 - 3))
    {
      uint64_t v14 = *a2;
      if (v12)
      {
        uint64_t v15 = 32 * v12;
        uint64_t v14 = v11;
        while (1)
        {
          uint64_t v16 = v14[2];
          if (*v14 | v14[1] | v16 && v16 != -1) {
            break;
          }
          v14 += 4;
          v15 -= 32;
          if (!v15)
          {
            uint64_t v14 = v13;
            break;
          }
        }
      }
      if (v11) {
        goto LABEL_17;
      }
LABEL_21:
      int v18 = 0;
      goto LABEL_22;
    }
    uint64_t v14 = &v11[4 * v12];
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v12 = 0;
  }
  uint64_t v13 = &v11[4 * v12];
  if (!v11) {
    goto LABEL_21;
  }
LABEL_17:
  int v18 = &v11[4 * *((unsigned int *)v11 - 1)];
LABEL_22:
  while (v14 != v18)
  {
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(v7, v14);
    long long v19 = v14 + 4;
    uint64_t v14 = v13;
    if (v19 != v13)
    {
      uint64_t v14 = v19;
      while (1)
      {
        uint64_t v20 = v14[2];
        if (*v14 | v14[1] | v20 && v20 != -1) {
          break;
        }
        v14 += 4;
        if (v14 == v13)
        {
          uint64_t v14 = v13;
          break;
        }
      }
    }
  }
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerData> const&>(v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v26, 0);
  uint64_t result = (uint64_t)v26;
  uint64_t v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v22);
    return WTF::fastFree(v24, v25);
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::updateWorkerStateInClient(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v22 = a2;
  uint64_t v5 = a1 + 56;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 56) + 56))(a1 + 56);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2736;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v23 = v7;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v7, &v22);
  IPC::ArgumentCoder<WebCore::ServiceWorkerUpdateViaCache,void>::encode<IPC::Encoder>(v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v23, 0);
  uint64_t result = (uint64_t)v23;
  char v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
    uint64_t result = WTF::fastFree(v18, v19);
  }
  uint64_t v10 = *(void *)(*(void *)(a1 + 80) + 8);
  if (v10) {
    uint64_t v11 = v10 - 48;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)(v11 + 224);
  if (v12)
  {
    uint64_t v13 = *(void *)(v12 + 104);
    ++*(_DWORD *)(v12 + 16);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(v13 + 56))(v12 + 104);
    uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v15 = 2765;
    *((void *)v15 + 1) = v14;
    *((void *)v15 + 66) = (char *)v15 + 16;
    *((void *)v15 + 67) = 512;
    *((void *)v15 + 68) = 0;
    *((void *)v15 + 70) = 0;
    *((void *)v15 + 69) = 0;
    IPC::Encoder::encodeHeader(v15);
    char v23 = v15;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v15, &v22);
    IPC::ArgumentCoder<WebCore::ServiceWorkerUpdateViaCache,void>::encode<IPC::Encoder>(v15, a3);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v12 + 104) + 32))(v12 + 104, &v23, 0);
    uint64_t result = (uint64_t)v23;
    char v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v16);
      uint64_t result = WTF::fastFree(v20, v21);
    }
    int v17 = *(_DWORD *)(v12 + 16);
    if (v17)
    {
      *(_DWORD *)(v12 + ++*(_DWORD *)(this + 16) = v17 - 1;
    }
    else
    {
      uint64_t result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::controlClient(uint64_t a1, uint64_t a2, WebCore::SWServerRegistration *this, WebCore::ResourceRequestBase *a4, uint64_t a5)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  int v5 = *(unsigned __int8 *)(a2 + 3008);
  if (v5 == 19) {
    char v6 = 1;
  }
  else {
    char v6 = 2 * (v5 == 15);
  }
  uint64_t v7 = *(void *)(a2 + 3048);
  if (*(_OWORD *)(a2 + 3040) == 0)
  {
    __break(0xC471u);
    goto LABEL_69;
  }
  *(void *)&long long v82 = *(void *)(a2 + 3040);
  *((void *)&v82 + 1) = v7;
  uint64_t v11 = a1 + 56;
  uint64_t v83 = a5;
  WebCore::SWServerRegistration::data((uint64_t *)&v58, this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v12 = *(atomic_uint **)(a1 + 8);
  if (v12) {
    atomic_fetch_add(v12, 1u);
  }
  long long v53 = v82;
  uint64_t v54 = v83;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 56) + 56))(v11);
  uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v14 = 2732;
  *((void *)v14 + 1) = v13;
  *((void *)v14 + 66) = (char *)v14 + 16;
  *((void *)v14 + 67) = 512;
  *((void *)v14 + 68) = 0;
  *((void *)v14 + 70) = 0;
  *((void *)v14 + 69) = 0;
  IPC::Encoder::encodeHeader(v14);
  unsigned int v51 = v14;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(v14, (uint64_t *)&v82);
  IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationData,void>::encode(v14, (uint64_t)&v58);
  uint64_t v15 = WTF::fastMalloc((WTF *)0x40);
  *(void *)uint64_t v15 = &unk_1EEA0D448;
  *(void *)(v15 + ++*(_DWORD *)(this + 16) = v12;
  *(void *)(v15 + 24) = a1;
  *(_OWORD *)(v15 + 32) = v53;
  *(void *)(v15 + 48) = v54;
  *(void *)&long long v53 = v15;
  *((void *)&v53 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, long long *, void))(*(void *)(a1 + 56) + 40))(v11, &v51, &v53, 0);
  uint64_t v17 = v53;
  *(void *)&long long v53 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  int v18 = v51;
  unsigned int v51 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v16);
    WTF::fastFree(v44, v45);
  }
  if (v81)
  {
    long long v19 = v80;
    uint64_t v80 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v16);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
  if (v79)
  {
    uint64_t v20 = v78;
    long long v78 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v16);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
  }
  if (v77)
  {
    uint64_t v21 = v69;
    unsigned int v69 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v16);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
  }
  uint64_t v22 = v65;
  CFTypeRef v65 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v16);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  char v23 = v61;
  unint64_t v61 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v16);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  if (v60 != -1) {
    ((void (*)(long long *, long long *))off_1EEA0D390[v60])(&v53, &v58);
  }
  unsigned int v51 = 0;
  uint64_t v52 = 0;
  uint64_t v24 = *(unsigned int *)(a2 + 3268);
  char v46 = v6;
  if (!v24)
  {
    LODWORD(v27) = 0;
    uint64_t v25 = 0;
    goto LABEL_44;
  }
  if (v24 >> 29)
  {
    __break(0xC471u);
LABEL_69:
    JUMPOUT(0x19941AA30);
  }
  uint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)(8 * v24));
  LODWORD(v52) = v24;
  unsigned int v51 = v25;
  uint64_t v26 = *(unsigned int *)(a2 + 3268);
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *(void *)(a2 + 3256);
    uint64_t v29 = 8 * v26;
    do
    {
      uint64_t v30 = v27;
      WebCore::SecurityOrigin::toString((uint64_t *)&v58, *(WebCore::SecurityOrigin **)(v28 + 8 * v27++));
      *((void *)v25 + v30) = v58;
      v29 -= 8;
    }
    while (v29);
    HIDWORD(v52) = v27;
  }
  else
  {
    LODWORD(v27) = 0;
  }
LABEL_44:
  uint64_t v31 = *(WebCore::SWServer **)(*(void *)(a1 + 24) + 8);
  WebCore::ServiceWorkerRegistrationKey::clientOrigin((uint64_t *)&v58, (WebCore::SWServerRegistration *)((char *)this + 24));
  __int16 v32 = WebCore::SWServer::advancedPrivacyProtectionsFromClient(v31, (const WebCore::ClientOrigin *)&v58);
  if (DWORD2(v63) != -1) {
    ((void (*)(long long *, WTF::StringImpl **))off_1EEA0D390[DWORD2(v63)])(&v53, &v61);
  }
  DWORD2(v63) = -1;
  if (v60 != -1) {
    ((void (*)(long long *, long long *))off_1EEA0D390[v60])(&v53, &v58);
  }
  long long v58 = v82;
  uint64_t v59 = v83;
  LOBYTE(v61) = v46;
  BYTE1(v61) = 3;
  uint64_t v33 = WebCore::ResourceRequestBase::url(a4);
  char v34 = *(WTF::StringImpl **)v33;
  if (*(void *)v33) {
    *(_DWORD *)v34 += 2;
  }
  int v62 = v34;
  long long v35 = *(_OWORD *)(v33 + 24);
  long long v63 = *(_OWORD *)(v33 + 8);
  long long v64 = v35;
  CFTypeRef v65 = 0;
  WTF::URL::invalidate((WTF::URL *)&v65);
  uint64_t v66 = *(void *)(a2 + 8);
  BOOL v67 = v66 != 0;
  long long v68 = *(_OWORD *)(a2 + 16);
  LOBYTE(v69) = 1;
  BOOL v70 = (*((unsigned char *)a4 + 148) & 4) != 0;
  __int16 v71 = v32;
  __int16 v72 = 0;
  unsigned int v51 = 0;
  uint64_t v52 = 0;
  uint64_t v73 = 0;
  __int16 v74 = v25;
  int v75 = v24;
  int v76 = v27;
  LOBYTE(v53) = 0;
  int v55 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v53, (uint64_t)this + 24);
  char v36 = (WebCore::SecurityOriginData *)WebCore::ResourceRequestBase::url(a4);
  WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(v56, v36, v37);
  uint64_t v49 = *((void *)this + 2);
  char v50 = 1;
  WebCore::ResourceRequestBase::httpUserAgent((uint64_t *)&v48, a4);
  WebKit::WebSWServerConnection::registerServiceWorkerClientInternal(a1, (const WTF::URL *)&v53, &v58, (uint64_t)&v49, (uint64_t)&v48, 1);
  unint64_t v39 = v48;
  int v48 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, v38);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
  if (v57 != -1) {
    ((void (*)(uint64_t *, uint64_t *))off_1EEA0D390[v57])(&v49, v56);
  }
  int v57 = -1;
  if (v55 != -1) {
    ((void (*)(uint64_t *, long long *))off_1EEA0D390[v55])(&v49, &v53);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v38);
  unint64_t v41 = v65;
  CFTypeRef v65 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, v40);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  long long v42 = v62;
  int v62 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, v40);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v40);
}

void WebKit::WebSWServerConnection::registerServiceWorkerClientInternal(uint64_t a1, const WTF::URL *a2, long long *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (const WTF::URL *)((char *)a2 + 32);
  if ((a3[3] & 2) == 0) {
    goto LABEL_2;
  }
  WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((uint64_t *)&buf, (WebCore::SecurityOriginData *)((char *)a3 + 40), a2);
  int v46 = WebCore::operator==();
  if (v69 != -1) {
    ((void (*)(WTF **, long long *))off_1EEA0D390[v69])(&v62, &buf);
  }
  if (v46)
  {
LABEL_2:
    WebCore::SecurityOriginData::isNull(v10);
    if (v11)
    {
      char v50 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = "void WebKit::WebSWServerConnection::registerServiceWorkerClientInternal(WebCore:"
                                        ":ClientOrigin &&, ServiceWorkerClientData &&, const std::optional<ServiceWorkerR"
                                        "egistrationIdentifier> &, String &&, WebCore::SWServer::IsBeingCreatedClient)";
        _os_log_fault_impl(&dword_1985F2000, v50, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/ServiceWorker/WebSWServerConnection.cpp 445: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
      }
      *(unsigned char *)(*(void *)(a1 + 88) + 98) = 1;
      return;
    }
    uint64_t v13 = (uint64_t *)(a1 + 96);
    uint64_t v12 = *(void **)(a1 + 96);
    uint64_t v14 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::begin(v12);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    if (v12) {
      int v18 = &v12[12 * *((unsigned int *)v12 - 1)];
    }
    else {
      int v18 = 0;
    }
    char v60 = a6;
    if (v18 == v14)
    {
LABEL_61:
      uint64_t v22 = *(_DWORD **)(*(void *)(a1 + 24) + 8);
      ++*v22;
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&buf, v10);
      uint64_t v47 = WebCore::SWServer::contextConnectionForRegistrableDomain();
      uint64_t v21 = v47;
      if (v47) {
        ++*(_DWORD *)(v47 + 16);
      }
      uint64_t v49 = (WTF::StringImpl *)buf;
      *(void *)&long long buf = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2) {
          WTF::StringImpl::destroy(v49, v48);
        }
        else {
          *(_DWORD *)v49 -= 2;
        }
      }
    }
    else
    {
      while (!WebCore::operator==())
      {
        while (1)
        {
          v15 += 12;
          if (v15 == v17) {
            break;
          }
          uint64_t v19 = v15[2];
          if (*v15 | v15[1] | v19) {
            BOOL v20 = v19 == -1;
          }
          else {
            BOOL v20 = 1;
          }
          if (!v20) {
            goto LABEL_12;
          }
        }
        uint64_t v15 = v17;
LABEL_12:
        if (v15 == v18) {
          goto LABEL_61;
        }
      }
      uint64_t v21 = 0;
      uint64_t v22 = *(_DWORD **)(*(void *)(a1 + 24) + 8);
      ++*v22;
    }
    uint64_t v23 = *v13;
    uint64_t v59 = v21;
    if (*v13
      || (WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand((uint64_t *)(a1 + 96), 0), (uint64_t v23 = *v13) != 0))
    {
      int v24 = *(_DWORD *)(v23 - 8);
    }
    else
    {
      int v24 = 0;
    }
    LODWORD(buf) = -1640531527;
    WORD2(buf) = 0;
    BYTE6(buf) = 0;
    WTF::addArgs<WTF::UUID>(&buf, a3);
    unsigned int v25 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&buf) & v24;
    uint64_t v26 = (void *)(v23 + 96 * v25);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = v26[2];
    if (*(_OWORD *)v26 == 0 && v29 == 0)
    {
LABEL_39:
      long long v36 = *a3;
      v26[2] = *((void *)a3 + 2);
      *(_OWORD *)uint64_t v26 = v36;
      LOBYTE(buf) = 0;
      LODWORD(v69) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&buf, (uint64_t)a2);
      v70[0] = 0;
      int v71 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v70, (uint64_t)v10);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v26 + 4), (uint64_t)&buf);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v26 + 8), (uint64_t)v70);
      if (v71 != -1) {
        ((void (*)(WTF **, unsigned char *))off_1EEA0D390[v71])(&v62, v70);
      }
      int v71 = -1;
      if (v69 != -1) {
        ((void (*)(WTF **, long long *))off_1EEA0D390[v69])(&v62, &buf);
      }
      uint64_t v37 = *v13;
      if (*v13) {
        int v38 = *(_DWORD *)(v37 - 12) + 1;
      }
      else {
        int v38 = 1;
      }
      *(_DWORD *)(v37 - 12) = v38;
      uint64_t v39 = *v13;
      if (*v13) {
        int v40 = *(_DWORD *)(v39 - 12);
      }
      else {
        int v40 = 0;
      }
      uint64_t v41 = (*(_DWORD *)(v39 - 16) + v40);
      unint64_t v42 = *(unsigned int *)(v39 - 4);
      if (v42 > 0x400)
      {
        if (v42 > 2 * v41) {
          goto LABEL_49;
        }
      }
      else if (3 * v42 > 4 * v41)
      {
        goto LABEL_49;
      }
      WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand((uint64_t *)(a1 + 96), (uint64_t)v26);
    }
    else
    {
      uint64_t v31 = 0;
      int v32 = 1;
      while (1)
      {
        BOOL v33 = v27 == *((void *)a3 + 1) && v28 == *(void *)a3;
        if (v33 && v29 == *((void *)a3 + 2)) {
          break;
        }
        if (v29 == -1) {
          uint64_t v31 = v26;
        }
        unsigned int v25 = (v25 + v32) & v24;
        uint64_t v26 = (void *)(v23 + 96 * v25);
        uint64_t v28 = *v26;
        uint64_t v27 = v26[1];
        uint64_t v29 = v26[2];
        ++v32;
        if (*(_OWORD *)v26 == 0 && v29 == 0)
        {
          if (v31)
          {
            void *v31 = 0;
            v31[1] = 0;
            _OWORD v31[2] = 0;
            *((_OWORD *)v31 + 2) = 0u;
            *((_OWORD *)v31 + 3) = 0u;
            *((_OWORD *)v31 + 4) = 0u;
            *((_OWORD *)v31 + 5) = 0u;
            --*(_DWORD *)(*v13 - 16);
            uint64_t v26 = v31;
          }
          goto LABEL_39;
        }
      }
    }
LABEL_49:
    if ((v60 & 1) == 0)
    {
      long long v43 = a3[1];
      long long v65 = *a3;
      long long v66 = v43;
      WebCore::SWServer::releaseServiceWorkerClientPendingMessage();
      int v45 = v62;
      if (v64)
      {
        long long v58 = (WTF *)((char *)v62 + 96 * v64);
        do
        {
          *(void *)&long long buf = a3;
          *((void *)&buf + 1) = v45;
          long long v68 = (uint64_t *)((char *)v45 + 24);
          unsigned int v69 = (char *)v45 + 88;
          IPC::MessageSender::send<Messages::WebSWClientConnection::PostMessageToServiceWorkerClient>(a1 + 56, (uint64_t)&buf);
          int v45 = (WTF *)((char *)v45 + 96);
        }
        while (v45 != v58);
        int v45 = v62;
        if (v64)
        {
          WTF::VectorDestructor<true,WebCore::ServiceWorkerClientPendingMessage>::destruct((unsigned int *)v62, (WTF *)((char *)v62 + 96 * v64));
          int v45 = v62;
        }
      }
      if (v45)
      {
        int v62 = 0;
        int v63 = 0;
        WTF::fastFree(v45, v44);
      }
    }
    WebCore::SWServer::registerServiceWorkerClient();
    if (!*(unsigned char *)(a1 + 112)) {
      WebKit::WebSWServerConnection::updateThrottleState((WebKit::WebSWServerConnection *)a1);
    }
    if (v59)
    {
      uint64_t v51 = *(void *)(*(void *)(a1 + 80) + 8);
      if (v51) {
        uint64_t v52 = v51 - 48;
      }
      else {
        uint64_t v52 = 0;
      }
      uint64_t v53 = *(void *)(*(void *)(v52 + 80) + 40);
      uint64_t v54 = *(WTF **)(a1 + 32);
      uint64_t v55 = *(void *)(*(void *)(v59 + 128) + 8);
      if (v55) {
        uint64_t v56 = v55 - 48;
      }
      else {
        uint64_t v56 = 0;
      }
      uint64_t v61 = *(void *)(v56 + 264);
      int v62 = v54;
      LOBYTE(buf) = 1;
      *((void *)&buf + 1) = &v62;
      long long v68 = &v61;
      IPC::Connection::send<Messages::NetworkProcessProxy::RegisterRemoteWorkerClientProcess>(v53, (uint64_t)&buf);
      int v57 = *(_DWORD *)(v59 + 16);
      if (!v57)
      {
        __break(0xC471u);
        return;
      }
      *(_DWORD *)(v59 + ++*(_DWORD *)(this + 16) = v57 - 1;
    }
    WTF::RefCounted<WebCore::SWServer>::deref(v22);
  }
}

void WebKit::WebSWServerConnection::createFetchTask(WebKit::WebSWServerConnection *this@<X0>, WebKit::NetworkResourceLoader *a2@<X1>, const WebCore::ResourceRequest *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a2 + 3760) == 1)
  {
    if (*((unsigned char *)a2 + 315) == 3)
    {
      unsigned int v31 = *((unsigned __int8 *)a2 + 3088);
      BOOL v32 = v31 > 0xA;
      int v33 = (1 << v31) & 0x498;
      if (!v32 && v33 != 0)
      {
        long long v35 = (const WebCore::ResourceRequest *)WebKit::WebSWServerConnection::session(this);
        WebKit::ServiceWorkerFetchTask::fromNavigationPreloader(this, a2, v35, a4);
        if (*a4) {
          return;
        }
      }
    }
    goto LABEL_5;
  }
  int v8 = *(_DWORD **)(*((void *)this + 3) + 8);
  ++*v8;
  uint64_t v9 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebKit::NetworkResourceLoader *)((char *)a2 + 168));
  WTF::URL::protocol(v9);
  char canHandleScheme = WebCore::SWServer::canHandleScheme();
  WTF::RefCounted<WebCore::SWServer>::deref(v8);
  if ((canHandleScheme & 1) == 0) {
    goto LABEL_5;
  }
  if (*((_OWORD *)a2 + 195) != 0)
  {
    if (*((unsigned char *)a2 + 374))
    {
      uint64_t v37 = (WebCore::SecurityOriginData *)WebCore::ResourceRequestBase::url(a3);
      WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((uint64_t *)buf, v37, v38);
    }
    else
    {
      uint64_t v11 = *((void *)a2 + 14) + 8;
      buf[0] = 0;
      int v45 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v11);
    }
    uint64_t v12 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a3);
    WebCore::SWServer::Connection::doRegistrationMatching((uint64_t *)&v41, this, (const WebCore::SecurityOriginData *)buf, v12);
    uint64_t v13 = v41;
    if (v41)
    {
      uint64_t v14 = *((void *)v41 + 2);
      WebKit::WebSWServerConnection::controlClient((uint64_t)this, (uint64_t)a2 + 80, v41, a3, *(void *)(*((void *)a2 + 484) + 264));
      WebKit::NetworkResourceLoader::setServiceWorkerRegistration(a2, v41);
      uint64_t v39 = v41;
      uint64_t v41 = 0;
      if (v39) {
        WTF::RefCounted<WebCore::SWServerRegistration>::deref(v39);
      }
    }
    else
    {
      uint64_t v14 = 0;
      *a4 = 0;
    }
    if (v45 != -1) {
      ((void (*)(WebCore::SWServerRegistration **, unsigned char *))off_1EEA0D390[v45])(&v41, buf);
    }
    if (!v13) {
      return;
    }
    goto LABEL_14;
  }
  if (!*((unsigned char *)a2 + 3776) || (int v36 = *((unsigned __int8 *)a2 + 3088), v36 == 10) || v36 == 4)
  {
LABEL_5:
    *a4 = 0;
    return;
  }
  uint64_t v14 = *((void *)a2 + 471);
LABEL_14:
  uint64_t v15 = *(_DWORD **)(*((void *)this + 3) + 8);
  ++*v15;
  Registration = (_DWORD *)WebCore::SWServer::getRegistration();
  uint64_t v17 = (uint64_t)Registration;
  if (Registration)
  {
    ++*Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v15);
    uint64_t v18 = *(void *)(v17 + 264);
    if (v18)
    {
      ++*(_DWORD *)v18;
      if (*(unsigned char *)(v18 + 376))
      {
        if (WebCore::SWServerRegistration::shouldSoftUpdate()) {
          WebCore::SWServerRegistration::scheduleSoftUpdate();
        }
      }
      else
      {
        if (!*(unsigned char *)(v18 + 377))
        {
          if (*(_DWORD *)(v18 + 244)) {
            unsigned __int8 v22 = 0;
          }
          else {
            unsigned __int8 v22 = *(unsigned char *)(v18 + 160) == 4;
          }
          WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const String *)a3);
          uint64_t v23 = *((void *)this + 4);
          uint64_t v24 = *(void *)(v18 + 104);
          uint64_t v25 = WebKit::WebSWServerConnection::session(this);
          uint64_t v19 = WTF::fastMalloc((WTF *)0x128);
          WebKit::ServiceWorkerFetchTask::ServiceWorkerFetchTask(v19, (uint64_t)this, (uint64_t)a2, (uint64_t)buf, v23, v24, v17, v25, v22);
          CFTypeRef v26 = cf;
          CFTypeRef cf = 0;
          if (v26) {
            CFRelease(v26);
          }
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
          uint64_t v27 = (atomic_uint *)*((void *)this + 1);
          if (v27) {
            atomic_fetch_add(v27, 1u);
          }
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v19 + 8), v19);
          uint64_t v28 = *(atomic_uint **)(v19 + 8);
          if (v28) {
            atomic_fetch_add(v28, 1u);
          }
          uint64_t v29 = (void *)WTF::fastMalloc((WTF *)0x20);
          void *v29 = &unk_1EEA0D470;
          v29[1] = v27;
          void v29[2] = this;
          v29[3] = v28;
          *(void *)long long buf = v29;
          WebCore::SWServerWorker::whenActivated();
          uint64_t v30 = *(void *)buf;
          *(void *)long long buf = 0;
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          goto LABEL_20;
        }
        BOOL v20 = qword_1EB358550;
        if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_ERROR))
        {
          uint64_t v21 = *(void *)(v18 + 104);
          *(_DWORD *)long long buf = 134218240;
          *(void *)&uint8_t buf[4] = this;
          __int16 v43 = 2048;
          uint64_t v44 = v21;
          _os_log_error_impl(&dword_1985F2000, v20, OS_LOG_TYPE_ERROR, "%p - WebSWServerConnection::startFetch: DidNotHandle because worker %llu has some timeouts", buf, 0x16u);
        }
      }
      uint64_t v19 = 0;
LABEL_20:
      *a4 = v19;
      WTF::RefCounted<WebCore::SWServerWorker>::deref((_DWORD *)v18);
LABEL_21:
      WTF::RefCounted<WebCore::SWServerRegistration>::deref((_DWORD *)v17);
      return;
    }
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v15);
  }
  int v40 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = this;
    __int16 v43 = 2048;
    uint64_t v44 = v14;
    _os_log_error_impl(&dword_1985F2000, v40, OS_LOG_TYPE_ERROR, "%p - WebSWServerConnection::startFetch: DidNotHandle because no active worker for registration %llu", buf, 0x16u);
  }
  *a4 = 0;
  if (v17) {
    goto LABEL_21;
  }
}

uint64_t WebKit::NetworkResourceLoader::setServiceWorkerRegistration(WebKit::NetworkResourceLoader *this, WebCore::SWServerRegistration *a2)
{
  uint64_t result = *((void *)a2 + 1);
  if (result) {
    goto LABEL_6;
  }
  uint64_t result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t result = 1;
  *(void *)(result + 8) = a2;
  int v5 = (unsigned int *)*((void *)a2 + 1);
  *((void *)a2 + 1) = result;
  if (!v5) {
    goto LABEL_6;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t result = *((void *)a2 + 1);
  if (result) {
LABEL_6:
  }
    atomic_fetch_add((atomic_uint *volatile)result, 1u);
  char v6 = (unsigned int *)*((void *)this + 550);
  *((void *)this + 550) = result;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    return WTF::fastFree((WTF *)v6, a2);
  }
  return result;
}

void WebKit::WebSWServerConnection::postMessageToServiceWorker(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(_DWORD **)(*(void *)(a1 + 24) + 8);
  ++*v7;
  WebCore::SWServer::workerByID();
  if (!v26)
  {
LABEL_32:
    WTF::RefCounted<WebCore::SWServer>::deref(v7);
    return;
  }
  v41[0] = 0;
  char v43 = 0;
  int v8 = *(_DWORD *)(a4 + 32);
  if (v8 == 1)
  {
    long long v13 = *(_OWORD *)(a4 + 16);
    v44[0] = *(_OWORD *)a4;
    v44[1] = v13;
    WebCore::SWServerWorker::findClientByIdentifier();
    if ((_BYTE)v39)
    {
      v45[0] = *(_OWORD *)v28;
      v45[1] = *(_OWORD *)&v28[16];
      __int16 v46 = *(_WORD *)&v28[32];
      uint64_t v15 = *(void *)v29;
      if (*(void *)v29) {
        **(_DWORD **)v29 += 2;
      }
      uint64_t v47 = v15;
      long long v48 = *(_OWORD *)&v29[8];
      long long v49 = v30;
      uint64_t v16 = v31;
      if (v31) {
        *v31 += 2;
      }
      long long v51 = v32;
      long long v52 = v33;
      long long v53 = v34;
      long long v54 = v35;
      long long v55 = v36;
      char v50 = v16;
      uint64_t v56 = v37;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v57, (uint64_t)&v38);
      int v58 = 1;
      std::optional<std::variant<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>>::operator=[abi:sn180100]<std::variant<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>,void>((uint64_t)v41, (uint64_t)v45);
      if (v58 != -1) {
        ((void (*)(char *, _OWORD *))off_1EEA0D3A0[v58])(&v27, v45);
      }
    }
    std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v28, v14);
    goto LABEL_19;
  }
  if (!v8)
  {
    WebCore::SWServer::workerByID();
    uint64_t v9 = *(void *)&v45[0];
    if (*(void *)&v45[0])
    {
      *(_OWORD *)uint64_t v28 = *(_OWORD *)(*(void *)&v45[0] + 104);
      uint64_t v10 = *(_DWORD **)(*(void *)&v45[0] + 120);
      if (v10) {
        *v10 += 2;
      }
      *(void *)&v28[16] = v10;
      long long v11 = *(_OWORD *)(v9 + 144);
      *(_OWORD *)&v28[24] = *(_OWORD *)(v9 + 128);
      *(_OWORD *)uint64_t v29 = v11;
      *(_WORD *)&v29[16] = *(_WORD *)(v9 + 160);
      int v39 = 0;
      std::optional<std::variant<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>>::operator=[abi:sn180100]<std::variant<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>,void>((uint64_t)v41, (uint64_t)v28);
      if (v39 != -1) {
        ((void (*)(_OWORD *, unsigned char *))off_1EEA0D3A0[v39])(v44, v28);
      }
      uint64_t v12 = *(_DWORD **)&v45[0];
      *(void *)&v45[0] = 0;
      if (v12) {
        WTF::RefCounted<WebCore::SWServerWorker>::deref(v12);
      }
    }
LABEL_19:
    if (v43)
    {
      *(void *)uint64_t v28 = a2;
      long long v17 = *a3;
      *a3 = 0u;
      *(_OWORD *)&v28[8] = v17;
      *(void *)&long long v17 = *((void *)a3 + 2);
      *((void *)a3 + 2) = 0;
      *(void *)&v28[24] = v17;
      v28[32] = 0;
      int v40 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>,(std::__variant_detail::_Trait)1>>((uint64_t)&v28[32], (uint64_t)v41);
      uint64_t v18 = WTF::fastMalloc((WTF *)0x100);
      *(void *)uint64_t v18 = &unk_1EEA0D4D0;
      *(void *)(v18 + ++*(_DWORD *)(this + 16) = *(void *)v28;
      long long v19 = *(_OWORD *)&v28[8];
      *(_OWORD *)&v28[8] = 0u;
      *(_OWORD *)(v18 + 24) = v19;
      *(void *)&long long v19 = *(void *)&v28[24];
      *(void *)&v28[24] = 0;
      *(void *)(v18 + ++*(_DWORD *)(this + 40) = v19;
      *(unsigned char *)(v18 + 48) = 0;
      *(_DWORD *)(v18 + 2++*(_DWORD *)(this + 40) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>,(std::__variant_detail::_Trait)1>>(v18 + 48, (uint64_t)&v28[32]);
      *(void *)&v45[0] = v18;
      WebCore::SWServer::runServiceWorkerIfNecessary();
      uint64_t v21 = *(void *)&v45[0];
      *(void *)&v45[0] = 0;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
      if (v40 != -1) {
        ((void (*)(_OWORD *, unsigned char *))off_1EEA0D3A0[v40])(v44, &v28[32]);
      }
      int v40 = -1;
      unsigned __int8 v22 = *(WTF **)&v28[16];
      if (*(void *)&v28[16])
      {
        *(void *)&v28[16] = 0;
        *(_DWORD *)&v28[24] = 0;
        WTF::fastFree(v22, v20);
      }
      uint64_t v23 = *(unsigned int **)&v28[8];
      *(void *)&v28[8] = 0;
      if (v23) {
        WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v23);
      }
      if (v43)
      {
        if (v42 != -1) {
          ((void (*)(unsigned char *, unsigned char *))off_1EEA0D3A0[v42])(v28, v41);
        }
      }
    }
    WTF::RefCounted<WebCore::SWServerWorker>::deref(v26);
    goto LABEL_32;
  }
  uint64_t v24 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
  WebKit::WebSWServerConnection::scheduleJobInServer(v24, v25);
}

void WebKit::WebSWServerConnection::scheduleJobInServer(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1[10] + 8);
  if (v4) {
    uint64_t v5 = v4 - 48;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(v5 + 80);
  uint64_t v7 = a1[4];
  int v8 = *(_DWORD *)(a2 + 104);
  if (v8)
  {
    if (v8 != 1) {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    uint64_t v9 = (WebCore::RegistrableDomain *)MEMORY[0x1E4F30980];
  }
  else
  {
    uint64_t v9 = (WebCore::RegistrableDomain *)(a2 + 88);
  }
  WebCore::RegistrableDomain::uncheckedCreateFromHost(v9, (WTF::StringImpl **)buf);
  int PartyForCookies = WebKit::NetworkProcess::allowsFirstPartyForCookies(v6, v7, (WTF::ASCIICaseInsensitiveHash **)buf);
  uint64_t v12 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (PartyForCookies == 2)
  {
    CFTypeRef v26 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebSWServerConnection::scheduleJobInServer(ServiceWorkerJobData &&)";
      _os_log_fault_impl(&dword_1985F2000, v26, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/ServiceWorker/WebSWServerConnection.cpp 355: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a1[11] + 98) = 1;
  }
  else if (*(void *)(a2 + 112))
  {
    long long v13 = qword_1EB358550;
    if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(WTF::String **)(a2 + 264);
      WTF::String::number(*(WTF::String **)(a2 + 256));
      WTF::String::number(v14);
      WTF::makeString<WTF::String,char,WTF::String>((uint64_t *)buf, 45, (uint64_t *)&v28, &v27);
      uint64_t v16 = v28;
      uint64_t v28 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v15);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      BOOL v20 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v15);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      WTF::String::utf8();
      if (v28) {
        uint64_t v21 = (char *)v28 + 16;
      }
      else {
        uint64_t v21 = 0;
      }
      *(_DWORD *)long long buf = 134218242;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v21;
      _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%p - WebSWServerConnection::Scheduling ServiceWorker job %s in server", buf, 0x16u);
      uint64_t v23 = v28;
      uint64_t v28 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1) {
          WTF::fastFree(v23, v22);
        }
        else {
          --*(_DWORD *)v23;
        }
      }
      uint64_t v24 = v27;
      char v27 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v22);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
    }
    uint64_t v25 = *(_DWORD **)(a1[3] + 8);
    ++*v25;
    WebCore::SWServer::scheduleJob();
    WTF::RefCounted<WebCore::SWServer>::deref(v25);
  }
  else
  {
    uint64_t v17 = *(void *)(a2 + 264);
    buf[0] = 8;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::WebSWServerConnection::rejectJobInClient((uint64_t)a1, v17, (uint64_t)buf);
    long long v19 = *(WTF::StringImpl **)&buf[8];
    *(void *)&uint8_t buf[8] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v18);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
}

_DWORD *WebKit::WebSWServerConnection::scheduleUnregisterJobInServer(void *a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t *a5)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = a1;
    _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%p - WebSWServerConnection::Scheduling unregister ServiceWorker job in server", buf, 0xCu);
  }
  uint64_t v10 = *(_DWORD **)(a1[3] + 8);
  ++*v10;
  Registration = (_DWORD *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    uint64_t v12 = Registration;
    ++*Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v10);
    int v13 = *((_DWORD *)a4 + 8);
    if (v13 == 1)
    {
      uint64_t v56 = *(void *)a4;
      long long v57 = *(long long *)((char *)a4 + 8);
      uint64_t v58 = *((void *)a4 + 3);
      uint64_t v18 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(a1 + 12, &v56);
      long long v19 = (uint64_t *)a1[12];
      if (v19) {
        v19 += 12 * *((unsigned int *)v19 - 1);
      }
      if (v19 == v18)
      {
        char v50 = 0;
        WTF::URL::invalidate((WTF::URL *)&v50);
      }
      else
      {
        BOOL v20 = *(_DWORD **)(a1[3] + 8);
        ++*v20;
        WebCore::SWServer::serviceWorkerClientWithOriginByID();
        WTF::RefCounted<WebCore::SWServer>::deref(v20);
        if (v64)
        {
          unsigned __int8 v22 = v61;
          if (v61) {
            *(_DWORD *)v61 += 2;
          }
          char v50 = v22;
          long long v51 = v62;
          long long v52 = v63;
        }
        else
        {
          char v50 = 0;
          WTF::URL::invalidate((WTF::URL *)&v50);
        }
        std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v21);
      }
    }
    else
    {
      if (v13)
      {
        uint64_t v49 = std::__throw_bad_variant_access[abi:sn180100]();
        return (_DWORD *)WebKit::WebSWServerConnection::postMessageToServiceWorkerClient(v49);
      }
      uint64_t v14 = *(_DWORD **)(a1[3] + 8);
      ++*v14;
      WebCore::SWServer::workerByID();
      WTF::RefCounted<WebCore::SWServer>::deref(v14);
      uint64_t v15 = *(void *)buf;
      if (*(void *)buf)
      {
        uint64_t v16 = *(WTF::StringImpl **)(*(void *)buf + 120);
        if (v16) {
          *(_DWORD *)v16 += 2;
        }
        char v50 = v16;
        long long v17 = *(_OWORD *)(v15 + 144);
        long long v51 = *(_OWORD *)(v15 + 128);
        long long v52 = v17;
        *(void *)long long buf = 0;
      }
      else
      {
        char v50 = 0;
        WTF::URL::invalidate((WTF::URL *)&v50);
        uint64_t v15 = *(void *)buf;
        *(void *)long long buf = 0;
        if (!v15) {
          goto LABEL_22;
        }
      }
      WTF::RefCounted<WebCore::SWServerWorker>::deref((_DWORD *)v15);
    }
LABEL_22:
    if ((v51 & 1) == 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      buf[0] = 8;
      int v60 = 1;
      uint64_t v23 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v23 + 16))(v23, buf);
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      if (v60 != -1) {
        ((void (*)(uint64_t *, uint8_t *))off_1EEA0D380[v60])(&v56, buf);
      }
      goto LABEL_46;
    }
    CFTypeRef v26 = a1 + 13;
    uint64_t v25 = a1[13];
    if (v25
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(a1 + 13),
          (uint64_t v25 = *v26) != 0))
    {
      int v27 = *(_DWORD *)(v25 - 8);
    }
    else
    {
      int v27 = 0;
    }
    unint64_t v28 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
    unint64_t v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
    unsigned int v31 = v27 & ((v30 >> 31) ^ v30);
    long long v32 = (void *)(v25 + 16 * v31);
    uint64_t v33 = *v32;
    if (*v32)
    {
      long long v34 = 0;
      int v35 = 1;
      while (v33 != a2)
      {
        if (v33 == -1) {
          long long v34 = v32;
        }
        unsigned int v31 = (v31 + v35) & v27;
        long long v32 = (void *)(v25 + 16 * v31);
        uint64_t v33 = *v32;
        ++v35;
        if (!*v32)
        {
          if (v34)
          {
            void *v34 = 0;
            v34[1] = 0;
            --*(_DWORD *)(*v26 - 16);
            long long v32 = v34;
          }
          goto LABEL_36;
        }
      }
      goto LABEL_45;
    }
LABEL_36:
    void *v32 = a2;
    uint64_t v36 = *a5;
    *a5 = 0;
    uint64_t v37 = v32[1];
    v32[1] = v36;
    if (v37) {
      (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
    }
    uint64_t v38 = *v26;
    if (*v26) {
      int v39 = *(_DWORD *)(v38 - 12) + 1;
    }
    else {
      int v39 = 1;
    }
    *(_DWORD *)(v38 - 12) = v39;
    uint64_t v40 = *v26;
    if (*v26) {
      int v41 = *(_DWORD *)(v40 - 12);
    }
    else {
      int v41 = 0;
    }
    uint64_t v42 = (*(_DWORD *)(v40 - 16) + v41);
    unint64_t v43 = *(unsigned int *)(v40 - 4);
    if (v43 > 0x400)
    {
      if (v43 > 2 * v42) {
        goto LABEL_45;
      }
    }
    else if (3 * v43 > 4 * v42)
    {
LABEL_45:
      uint64_t v44 = *(_DWORD **)(a1[3] + 8);
      ++*v44;
      long long v45 = a4[1];
      long long v53 = *a4;
      long long v54 = v45;
      long long v55 = a4[2];
      WebCore::SWServer::scheduleUnregisterJob();
      WTF::RefCounted<WebCore::SWServer>::deref(v44);
LABEL_46:
      __int16 v46 = v50;
      char v50 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2) {
          WTF::StringImpl::destroy(v46, v24);
        }
        else {
          *(_DWORD *)v46 -= 2;
        }
      }
      return WTF::RefCounted<WebCore::SWServerRegistration>::deref(v12);
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(a1 + 13);
    goto LABEL_45;
  }
  WTF::RefCounted<WebCore::SWServer>::deref(v10);
  buf[0] = 0;
  int v60 = 0;
  uint64_t v48 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v48 + 16))(v48, buf);
  uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v48 + 8))(v48);
  if (v60 != -1) {
    return (_DWORD *)((uint64_t (*)(WTF::StringImpl **, uint8_t *))off_1EEA0D380[v60])(&v50, buf);
  }
  return result;
}

_DWORD *WebKit::WebSWServerConnection::postMessageToServiceWorkerClient(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(*(void *)(a1 + 24) + 8);
  ++*v2;
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v3 = &unk_1EEA0D4F8;
  v3[1] = a1;
  uint64_t v5 = v3;
  WebCore::SWServer::postMessageToServiceWorkerClient();
  if (v5) {
    (*(void (**)(void *))(*v5 + 8))(v5);
  }
  return WTF::RefCounted<WebCore::SWServer>::deref(v2);
}

WebCore::SWServerRegistration *WebKit::WebSWServerConnection::matchRegistration(WebCore::SWServer::Connection *a1, const WebCore::SecurityOriginData *a2, const WTF::URL *a3, uint64_t *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  WebCore::SWServer::Connection::doRegistrationMatching((uint64_t *)&v24, a1, a2, a3);
  if (v24)
  {
    WebCore::SWServerRegistration::data(v26, v24);
    WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)v36, (uint64_t)v26);
    char v46 = 1;
    uint64_t v5 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v5 + 16))(v5, v36);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    if (v46)
    {
      if (v45)
      {
        uint64_t v16 = v44;
        uint64_t v44 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            WTF::StringImpl::destroy(v16, v6);
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
      }
      if (v43)
      {
        long long v17 = v42;
        uint64_t v42 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy(v17, v6);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
      }
      if (v41)
      {
        uint64_t v18 = v40;
        uint64_t v40 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v6);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
      }
      long long v19 = v39;
      int v39 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v6);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      BOOL v20 = v38;
      uint64_t v38 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v6);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      if (v37 != -1) {
        ((void (*)(char *, unsigned char *))off_1EEA0D390[v37])(&v25, v36);
      }
      int v37 = -1;
    }
    if (v35)
    {
      uint64_t v7 = v34;
      long long v34 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v6);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
    }
    if (v33)
    {
      uint64_t v12 = v32;
      long long v32 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v6);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    if (v31)
    {
      int v13 = v30;
      unint64_t v30 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v6);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
    }
    uint64_t v14 = v29;
    unint64_t v29 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v6);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t v15 = v28;
    unint64_t v28 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v6);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    if (v27 != -1) {
      ((void (*)(char *, uint64_t *))off_1EEA0D390[v27])(&v25, v26);
    }
    uint64_t result = v24;
    uint64_t v24 = 0;
    if (result) {
      return (WebCore::SWServerRegistration *)WTF::RefCounted<WebCore::SWServerRegistration>::deref(result);
    }
  }
  else
  {
    v36[0] = 0;
    char v46 = 0;
    uint64_t v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v8 + 16))(v8, v36);
    uint64_t result = (WebCore::SWServerRegistration *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    if (v46)
    {
      if (v45)
      {
        long long v11 = v44;
        uint64_t v44 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2) {
            WTF::StringImpl::destroy(v11, v10);
          }
          else {
            *(_DWORD *)v11 -= 2;
          }
        }
      }
      if (v43)
      {
        uint64_t v21 = v42;
        uint64_t v42 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v10);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
      }
      if (v41)
      {
        unsigned __int8 v22 = v40;
        uint64_t v40 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, v10);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
      }
      uint64_t v23 = v39;
      int v39 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v10);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      uint64_t result = v38;
      uint64_t v38 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WebCore::SWServerRegistration *)WTF::StringImpl::destroy(result, v10);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      if (v37 != -1) {
        return (WebCore::SWServerRegistration *)((uint64_t (*)(uint64_t *, unsigned char *))off_1EEA0D390[v37])(v26, v36);
      }
    }
  }
  return result;
}

_DWORD *WebKit::WebSWServerConnection::getRegistrations(uint64_t a1, const WebCore::SecurityOriginData *a2, const WTF::URL *a3, uint64_t *a4)
{
  uint64_t v5 = *(WebCore::SWServer **)(*(void *)(a1 + 24) + 8);
  ++*(_DWORD *)v5;
  WebCore::SWServer::getRegistrations(v9, v5, a2, a3);
  uint64_t v6 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 16))(v6, v9);
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v7);
  return WTF::RefCounted<WebCore::SWServer>::deref(v5);
}

void WebKit::WebSWServerConnection::registerServiceWorkerClient(uint64_t a1, WebCore::SecurityOriginData *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a3 + 16) != *(void *)(a1 + 32))
  {
    long long v11 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_9:
      *(unsigned char *)(*(void *)(a1 + 88) + 98) = 1;
      return;
    }
    int v13 = 136446210;
    uint64_t v14 = "void WebKit::WebSWServerConnection::registerServiceWorkerClient(WebCore::ClientOrigin &&, ServiceWorkerClientD"
          "ata &&, const std::optional<ServiceWorkerRegistrationIdentifier> &, String &&)";
    uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/ServiceWorker/WebSWServerConnection."
          "cpp 430: Invalid message dispatched %{public}s";
LABEL_11:
    _os_log_fault_impl(&dword_1985F2000, v11, OS_LOG_TYPE_FAULT, v12, (uint8_t *)&v13, 0xCu);
    goto LABEL_9;
  }
  WebCore::SecurityOriginData::isNull(this);
  if (v10)
  {
    long long v11 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_9;
    }
    int v13 = 136446210;
    uint64_t v14 = "void WebKit::WebSWServerConnection::registerServiceWorkerClient(WebCore::ClientOrigin &&, ServiceWorkerClientD"
          "ata &&, const std::optional<ServiceWorkerRegistrationIdentifier> &, String &&)";
    uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/ServiceWorker/WebSWServerConnection."
          "cpp 431: Invalid message dispatched %{public}s";
    goto LABEL_11;
  }

  WebKit::WebSWServerConnection::registerServiceWorkerClientInternal(a1, this, (long long *)a3, a4, a5, 0);
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebSWClientConnection::PostMessageToServiceWorkerClient>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2726;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::UUID> const&,WebCore::MessageWithMessagePorts const&,WebCore::ServiceWorkerData const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::UUID> const&,WebCore::MessageWithMessagePorts const&,WebCore::ServiceWorkerData const&,WTF::String const&>,0ul,1ul,2ul,3ul>(v4, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v9, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkProcessProxy::RegisterRemoteWorkerClientProcess>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 341;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,0ul,1ul,2ul>(v4, a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void WebKit::WebSWServerConnection::unregisterServiceWorkerClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (a2[2] != *(void *)(a1 + 32))
  {
    uint64_t v42 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      long long v53 = "void WebKit::WebSWServerConnection::unregisterServiceWorkerClient(const ScriptExecutionContextIdentifier &)";
      _os_log_fault_impl(&dword_1985F2000, v42, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/ServiceWorker/WebSWServerConnection.cpp 473: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(*(void *)(a1 + 88) + 98) = 1;
    return;
  }
  uint64_t v4 = (WebKit::WebSWServerConnection **)(a1 + 96);
  uint64_t v5 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(a1 + 96), a2);
  uint64_t v6 = v5;
  uint64_t v7 = *(uint64_t **)(a1 + 96);
  if (v7) {
    v7 += 12 * *((unsigned int *)v7 - 1);
  }
  if (v7 == v5) {
    return;
  }
  buf[0] = 0;
  int v54 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, (uint64_t)(v5 + 4));
  v55[0] = 0;
  int v56 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v55, (uint64_t)(v6 + 8));
  uint64_t v8 = *(_DWORD **)(*(void *)(a1 + 24) + 8);
  ++*v8;
  long long v9 = *((_OWORD *)a2 + 1);
  long long v50 = *(_OWORD *)a2;
  long long v51 = v9;
  WebCore::SWServer::unregisterServiceWorkerClient();
  WTF::RefCounted<WebCore::SWServer>::deref(v8);
  uint64_t v10 = *(void *)(a1 + 96);
  if (v10)
  {
    long long v11 = (uint64_t *)(v10 + 96 * *(unsigned int *)(v10 - 4));
    if (v11 != v6) {
      goto LABEL_7;
    }
  }
  else if (v6)
  {
    long long v11 = 0;
LABEL_7:
    if (v11 != v6)
    {
      *uint64_t v6 = 1;
      v6[1] = 0;
      void v6[2] = -1;
      uint64_t v12 = *((unsigned int *)v6 + 22);
      if (v12 != -1) {
        ((void (*)(char *, uint64_t *))off_1EEA0D390[v12])(v45, v6 + 8);
      }
      int v13 = -1;
      *((_DWORD *)v6 + 22) = -1;
      uint64_t v14 = *((unsigned int *)v6 + 14);
      if (v14 != -1) {
        ((void (*)(char *, uint64_t *))off_1EEA0D390[v14])(v45, v6 + 4);
      }
      *((_DWORD *)v6 + 14) = -1;
      ++*((_DWORD *)*v4 - 4);
      uint64_t v15 = *v4;
      if (*v4) {
        int v13 = *((_DWORD *)v15 - 3) - 1;
      }
      *((_DWORD *)v15 - 3) = v13;
      uint64_t v16 = *v4;
      if (*v4)
      {
        unsigned int v17 = 6 * *((_DWORD *)v16 - 3);
        unsigned int v18 = *((_DWORD *)v16 - 1);
        if (v17 < v18 && v18 >= 9) {
          WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash((uint64_t *)(a1 + 96), v18 >> 1, 0);
        }
      }
    }
  }
  if (!*(unsigned char *)(a1 + 112)) {
    WebKit::WebSWServerConnection::updateThrottleState((WebKit::WebSWServerConnection *)a1);
  }
  long long v19 = *v4;
  BOOL v20 = (WebKit::WebSWServerConnection *)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::begin(*v4);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  if (v19) {
    long long v19 = (WebKit::WebSWServerConnection *)((char *)v19 + 96 * *((unsigned int *)v19 - 1));
  }
  if (v19 == v20)
  {
LABEL_32:
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v48, (const WebCore::SecurityOriginData *)v55);
    if ((WebKit::WebSWServerConnection::hasMatchingClient(*v4, (const WebCore::RegistrableDomain *)&v48) & 1) == 0)
    {
      int v27 = *(_DWORD **)(*(void *)(a1 + 24) + 8);
      ++*v27;
      uint64_t v28 = WebCore::SWServer::contextConnectionForRegistrableDomain();
      if (v28)
      {
        uint64_t v29 = v28;
        ++*(_DWORD *)(v28 + 16);
        WTF::RefCounted<WebCore::SWServer>::deref(v27);
        uint64_t v30 = *(void *)(*(void *)(a1 + 80) + 8);
        if (v30) {
          uint64_t v31 = v30 - 48;
        }
        else {
          uint64_t v31 = 0;
        }
        uint64_t v32 = *(void *)(*(void *)(v31 + 80) + 40);
        uint64_t v33 = *(void *)(a1 + 32);
        uint64_t v34 = *(void *)(*(void *)(v29 + 128) + 8);
        if (v34) {
          uint64_t v35 = v34 - 48;
        }
        else {
          uint64_t v35 = 0;
        }
        uint64_t v43 = *(void *)(v35 + 264);
        uint64_t v44 = v33;
        v45[0] = 1;
        char v46 = &v44;
        uint64_t v47 = &v43;
        uint64_t v36 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v36 = 360;
        *((void *)v36 + 1) = 0;
        *((void *)v36 + 66) = (char *)v36 + 16;
        *((void *)v36 + 67) = 512;
        *((void *)v36 + 68) = 0;
        *((void *)v36 + 70) = 0;
        *((void *)v36 + 69) = 0;
        IPC::Encoder::encodeHeader(v36);
        uint64_t v49 = v36;
        IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,0ul,1ul,2ul>(v36, (uint64_t)v45);
        IPC::Connection::sendMessageImpl(v32, (uint64_t *)&v49, 0, 0);
        int v37 = v49;
        uint64_t v49 = 0;
        if (v37)
        {
          IPC::Encoder::~Encoder(v37, v26);
          WTF::fastFree(v40, v41);
        }
        int v38 = *(_DWORD *)(v29 + 16);
        if (!v38)
        {
          __break(0xC471u);
          JUMPOUT(0x19941CF74);
        }
        *(_DWORD *)(v29 + ++*(_DWORD *)(this + 16) = v38 - 1;
      }
      else
      {
        WTF::RefCounted<WebCore::SWServer>::deref(v27);
      }
    }
    int v39 = v48;
    uint64_t v48 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v26);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
    }
  }
  else
  {
    while ((WebCore::operator==() & 1) == 0)
    {
      while (1)
      {
        uint64_t v21 = (WebKit::WebSWServerConnection *)((char *)v21 + 96);
        if (v21 == v23) {
          break;
        }
        uint64_t v24 = *((void *)v21 + 2);
        if (*(void *)v21 | *((void *)v21 + 1) | v24) {
          BOOL v25 = v24 == -1;
        }
        else {
          BOOL v25 = 1;
        }
        if (!v25) {
          goto LABEL_29;
        }
      }
      uint64_t v21 = v23;
LABEL_29:
      if (v21 == v19) {
        goto LABEL_32;
      }
    }
  }
  if (v56 != -1) {
    ((void (*)(char *, unsigned char *))off_1EEA0D390[v56])(v45, v55);
  }
  int v56 = -1;
  if (v54 != -1) {
    ((void (*)(char *, uint8_t *))off_1EEA0D390[v54])(v45, buf);
  }
}

uint64_t WebKit::WebSWServerConnection::hasMatchingClient(WebKit::WebSWServerConnection *this, const WebCore::RegistrableDomain *a2)
{
  if (!this)
  {
    uint64_t v5 = 0;
    LODWORD(v3) = 0;
    goto LABEL_13;
  }
  uint64_t v3 = *((unsigned int *)this - 1);
  uint64_t v4 = (WebKit::WebSWServerConnection *)((char *)this + 96 * v3);
  if (!*((_DWORD *)this - 3))
  {
    uint64_t v5 = (WebKit::WebSWServerConnection *)((char *)this + 96 * v3);
LABEL_13:
    uint64_t v4 = (WebKit::WebSWServerConnection *)((char *)this + 96 * v3);
    goto LABEL_14;
  }
  uint64_t v5 = this;
  if (v3)
  {
    uint64_t v6 = 96 * v3;
    uint64_t v5 = this;
    while (1)
    {
      uint64_t v7 = *((void *)v5 + 2);
      if (*(void *)v5 | *((void *)v5 + 1) | v7 && v7 != -1) {
        break;
      }
      uint64_t v5 = (WebKit::WebSWServerConnection *)((char *)v5 + 96);
      v6 -= 96;
      if (!v6)
      {
        uint64_t v5 = v4;
        break;
      }
    }
  }
LABEL_14:
  if (this) {
    long long v9 = (WebKit::WebSWServerConnection *)((char *)this + 96 * *((unsigned int *)this - 1));
  }
  else {
    long long v9 = 0;
  }
  if (v9 == v5) {
    return 0;
  }
  while (1)
  {
    uint64_t result = WebCore::RegistrableDomain::matches(a2, (WebKit::WebSWServerConnection *)((char *)v5 + 64));
    if (result) {
      return 1;
    }
    long long v11 = (WebKit::WebSWServerConnection *)((char *)v5 + 96);
    uint64_t v5 = v4;
    if (v11 != v4)
    {
      uint64_t v5 = v11;
      while (1)
      {
        uint64_t v12 = *((void *)v5 + 2);
        if (*(void *)v5 | *((void *)v5 + 1) | v12 && v12 != -1) {
          break;
        }
        uint64_t v5 = (WebKit::WebSWServerConnection *)((char *)v5 + 96);
        if (v5 == v4)
        {
          uint64_t v5 = v4;
          break;
        }
      }
    }
    if (v5 == v9) {
      return result;
    }
  }
}

uint64_t WebKit::WebSWServerConnection::computeThrottleState(WebKit::WebSWServerConnection *this, const WebCore::RegistrableDomain *a2)
{
  ++*(_DWORD *)this;
  uint64_t v4 = *((void *)this + 3);
  if (!v4)
  {
    uint64_t v7 = 0;
    uint64_t v5 = 0;
LABEL_10:
    uint64_t v6 = (void *)(v4 + 16 * v5);
    goto LABEL_11;
  }
  uint64_t v5 = *(unsigned int *)(v4 - 4);
  uint64_t v6 = (void *)(v4 + 16 * v5);
  if (!*(_DWORD *)(v4 - 12))
  {
    uint64_t v7 = (void *)(v4 + 16 * v5);
    goto LABEL_10;
  }
  uint64_t v7 = (void *)*((void *)this + 3);
  if (v5)
  {
    uint64_t v8 = 16 * v5;
    uint64_t v7 = (void *)*((void *)this + 3);
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      v7 += 2;
      v8 -= 16;
      if (!v8)
      {
        uint64_t v7 = v6;
        break;
      }
    }
  }
LABEL_11:
  if (v4) {
    long long v9 = (void *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  }
  else {
    long long v9 = 0;
  }
  if (v9 == v7)
  {
LABEL_23:
    uint64_t v12 = 1;
  }
  else
  {
    while (1)
    {
      uint64_t v10 = v7[1];
      if (!*(unsigned char *)(v10 + 112)
        && (WebKit::WebSWServerConnection::hasMatchingClient(*(WebKit::WebSWServerConnection **)(v10 + 96), a2) & 1) != 0)
      {
        break;
      }
      long long v11 = v7 + 2;
      uint64_t v7 = v6;
      if (v11 != v6)
      {
        uint64_t v7 = v11;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          v7 += 2;
          if (v7 == v6)
          {
            uint64_t v7 = v6;
            break;
          }
        }
      }
      if (v7 == v9) {
        goto LABEL_23;
      }
    }
    uint64_t v12 = 0;
  }
  WTF::RefCounted<WebCore::SWServer>::deref(this);
  return v12;
}

_DWORD *WebKit::WebSWServerConnection::subscribeToPushService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(_DWORD **)(*(void *)(a1 + 24) + 8);
  ++*v7;
  Registration = (_DWORD *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    long long v9 = Registration;
    ++*Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v7);
    if (WebKit::WebSWServerConnection::session((WebKit::WebSWServerConnection *)a1))
    {
      uint64_t v10 = WebKit::WebSWServerConnection::session((WebKit::WebSWServerConnection *)a1) + 1080;
      long long v11 = (WTF::StringImpl *)*((void *)v9 + 13);
      if (v11) {
        *(_DWORD *)v11 += 2;
      }
      uint64_t v33 = v11;
      long long v12 = *((_OWORD *)v9 + 8);
      long long v34 = *((_OWORD *)v9 + 7);
      long long v35 = v12;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
      int v13 = *(atomic_uint **)(a1 + 8);
      if (v13) {
        atomic_fetch_add(v13, 1u);
      }
      uint64_t v14 = *a4;
      *a4 = 0;
      uint64_t v29 = (WTF *)v13;
      uint64_t v30 = v14;
      WebCore::SWServerRegistration::data(v37, (WebCore::SWServerRegistration *)v9);
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v31, (const WTF::URL *)&v40);
      uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x20);
      *uint64_t v15 = &unk_1EEA0D520;
      v15[1] = v29;
      void v15[2] = v30;
      uint64_t v16 = v31;
      uint64_t v31 = 0;
      uint64_t v15[3] = v16;
      uint64_t v32 = v15;
      WebKit::NetworkNotificationManager::subscribeToPushService(v10, (uint64_t)&v33, a3, (uint64_t *)&v32);
      uint64_t v18 = (uint64_t)v32;
      uint64_t v32 = 0;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
      long long v19 = v31;
      uint64_t v31 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v17);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      if (v46)
      {
        uint64_t v21 = v45;
        char v45 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v17);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
      }
      if (v44)
      {
        unsigned __int8 v22 = v43;
        uint64_t v43 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, v17);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
      }
      if (v42)
      {
        uint64_t v23 = v41;
        char v41 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2) {
            WTF::StringImpl::destroy(v23, v17);
          }
          else {
            *(_DWORD *)v23 -= 2;
          }
        }
      }
      uint64_t v24 = v40;
      uint64_t v40 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v17);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      BOOL v25 = v39;
      int v39 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v17);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
      if (v38 != -1) {
        ((void (*)(char *, uint64_t *))off_1EEA0D390[v38])(&v36, v37);
      }
      CFTypeRef v26 = v33;
      uint64_t v33 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, v17);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v37[0]) = 8;
      LODWORD(v++*(_DWORD *)(this + 40) = 1;
      uint64_t v20 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v20 + 16))(v20, v37);
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      if (v40 != -1) {
        ((void (*)(WTF::StringImpl **, uint64_t *))off_1EEA0D3B0[v40])(&v33, v37);
      }
    }
    return WTF::RefCounted<WebCore::SWServerRegistration>::deref(v9);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v7);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v37[0]) = 8;
    LODWORD(v++*(_DWORD *)(this + 40) = 1;
    uint64_t v28 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v28 + 16))(v28, v37);
    uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v28 + 8))(v28);
    if (v40 != -1) {
      return (_DWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1EEA0D3B0[v40])(&v33, v37);
    }
  }
  return result;
}

_DWORD *WebKit::WebSWServerConnection::unsubscribeFromPushService(WebKit::WebSWServerConnection *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *(_DWORD **)(*((void *)a1 + 3) + 8);
  ++*v7;
  Registration = (_DWORD *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    long long v9 = Registration;
    ++*Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v7);
    if (WebKit::WebSWServerConnection::session(a1))
    {
      uint64_t v10 = WebKit::WebSWServerConnection::session(a1) + 1080;
      long long v11 = (WTF::StringImpl *)*((void *)v9 + 13);
      if (v11) {
        *(_DWORD *)v11 += 2;
      }
      uint64_t v18 = v11;
      long long v12 = *((_OWORD *)v9 + 8);
      long long v19 = *((_OWORD *)v9 + 7);
      long long v20 = v12;
      WebKit::NetworkNotificationManager::unsubscribeFromPushService(v10, (uint64_t)&v18, a3, 1, a4);
      uint64_t v14 = v18;
      uint64_t v18 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v18) = 8;
      DWORD2(v19) = 1;
      uint64_t v15 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v15 + 16))(v15, &v18);
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      if (DWORD2(v19) != -1) {
        ((void (*)(char *, WTF::StringImpl **))off_1EEA0D380[DWORD2(v19)])(&v21, &v18);
      }
    }
    return WTF::RefCounted<WebCore::SWServerRegistration>::deref(v9);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v7);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v18) = 8;
    DWORD2(v19) = 1;
    uint64_t v17 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v17 + 16))(v17, &v18);
    uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
    if (DWORD2(v19) != -1) {
      return (_DWORD *)((uint64_t (*)(char *, WTF::StringImpl **))off_1EEA0D380[DWORD2(v19)])(&v21, &v18);
    }
  }
  return result;
}

_DWORD *WebKit::WebSWServerConnection::getPushSubscription(WebKit::WebSWServerConnection *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(_DWORD **)(*((void *)a1 + 3) + 8);
  ++*v5;
  Registration = (_DWORD *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    uint64_t v7 = Registration;
    ++*Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v5);
    if (WebKit::WebSWServerConnection::session(a1))
    {
      uint64_t v8 = WebKit::WebSWServerConnection::session(a1) + 1080;
      long long v9 = (WTF::StringImpl *)*((void *)v7 + 13);
      if (v9) {
        *(_DWORD *)v9 += 2;
      }
      uint64_t v17 = v9;
      long long v10 = *((_OWORD *)v7 + 8);
      v18[0] = *((_OWORD *)v7 + 7);
      v18[1] = v10;
      WebKit::NetworkNotificationManager::getPushSubscription(v8, (uint64_t *)&v17, a3);
      long long v12 = v17;
      uint64_t v17 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v11);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v18[0]) = 8;
      int v19 = 1;
      uint64_t v13 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v13 + 16))(v13, &v17);
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      if (v19 != -1) {
        ((void (*)(char *, _OWORD *))off_1EEA0D3C0[v19])(&v16, v18);
      }
    }
    return WTF::RefCounted<WebCore::SWServerRegistration>::deref(v7);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v5);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v18[0]) = 8;
    int v19 = 1;
    uint64_t v15 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v15 + 16))(v15, &v17);
    uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 8))(v15);
    if (v19 != -1) {
      return (_DWORD *)((uint64_t (*)(char *, _OWORD *))off_1EEA0D3C0[v19])(&v16, v18);
    }
  }
  return result;
}

_DWORD *WebKit::WebSWServerConnection::getPushPermissionState(WebKit::WebSWServerConnection *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(_DWORD **)(*((void *)a1 + 3) + 8);
  ++*v5;
  Registration = (_DWORD *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    uint64_t v7 = Registration;
    ++*Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v5);
    if (WebKit::WebSWServerConnection::session(a1))
    {
      uint64_t v9 = WebKit::WebSWServerConnection::session(a1);
      long long v10 = (WTF::StringImpl *)*((void *)v7 + 13);
      if (v10) {
        *(_DWORD *)v10 += 2;
      }
      char v21 = v10;
      long long v11 = *((_OWORD *)v7 + 8);
      long long v22 = *((_OWORD *)v7 + 7);
      long long v23 = v11;
      WebCore::SecurityOriginData::fromURL(v24, (WebCore::SecurityOriginData *)&v21, v8);
      uint64_t v12 = *a3;
      *a3 = 0;
      uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v13 = &unk_1EEA0D570;
      v13[1] = v12;
      uint64_t v20 = v13;
      WebKit::getPushPermissionStateImpl(*(void *)(v9 + 1096), (uint64_t)v24, (uint64_t *)&v20);
      uint64_t v15 = (uint64_t)v20;
      uint64_t v20 = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      if (v25 != -1) {
        ((void (*)(void **, uint64_t *))off_1EEA0D390[v25])(&v20, v24);
      }
      int v25 = -1;
      char v16 = v21;
      char v21 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v14);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v21) = 8;
      DWORD2(v22) = 1;
      uint64_t v17 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v17 + 16))(v17, &v21);
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      if (DWORD2(v22) != -1) {
        ((void (*)(uint64_t *, WTF::StringImpl **))off_1EEA0D3D0[DWORD2(v22)])(v24, &v21);
      }
    }
    return WTF::RefCounted<WebCore::SWServerRegistration>::deref(v7);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v5);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v21) = 8;
    DWORD2(v22) = 1;
    uint64_t v19 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v19 + 16))(v19, &v21);
    uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 8))(v19);
    if (DWORD2(v22) != -1) {
      return (_DWORD *)((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1EEA0D3D0[DWORD2(v22)])(v24, &v21);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerConnection::contextConnectionCreated(WebKit::WebSWServerConnection *this, WebCore::SWServerToContextConnection *a2)
{
  uint64_t v4 = (WebCore::SWServerToContextConnection *)((char *)a2 + 40);
  char v5 = WebKit::WebSWServerConnection::computeThrottleState(*(WebKit::WebSWServerConnection **)(*((void *)this + 3) + 8), (WebCore::SWServerToContextConnection *)((char *)a2 + 40));
  WebKit::WebSWServerToContextConnection::setThrottleState(a2, v5);
  uint64_t result = (IPC::Encoder *)WebKit::WebSWServerConnection::hasMatchingClient(*((WebKit::WebSWServerConnection **)this + 12), v4);
  if (result)
  {
    uint64_t v7 = *(void *)(*((void *)this + 10) + 8);
    if (v7) {
      uint64_t v8 = v7 - 48;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void *)(*(void *)(v8 + 80) + 40);
    uint64_t v10 = *((void *)this + 4);
    uint64_t v11 = *(void *)(*((void *)a2 + 16) + 8);
    if (v11) {
      uint64_t v12 = v11 - 48;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void *)(v12 + 264);
    uint64_t v14 = v10;
    v15[0] = 1;
    char v16 = &v14;
    uint64_t v17 = &v13;
    return IPC::Connection::send<Messages::NetworkProcessProxy::RegisterRemoteWorkerClientProcess>(v9, (uint64_t)v15);
  }
  return result;
}

_DWORD *WebKit::WebSWServerConnection::terminateWorkerFromClient(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::SWServer::workerByID();
  if (v6)
  {
    WebCore::SWServerWorker::terminate();
  }
  else
  {
    uint64_t v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = v6;
  if (v6) {
    return WTF::RefCounted<WebCore::SWServerWorker>::deref(v6);
  }
  return result;
}

_DWORD *WebKit::WebSWServerConnection::whenServiceWorkerIsTerminatedForTesting(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (_DWORD *)WebCore::SWServerWorker::existingWorkerForIdentifier();
  char v5 = v4;
  if (v4 && (++*v4, v4[61] != 2))
  {
    WebCore::SWServerWorker::whenTerminated();
  }
  else
  {
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
    if (!v5) {
      return result;
    }
  }

  return WTF::RefCounted<WebCore::SWServerWorker>::deref(v5);
}

_DWORD *WebKit::WebSWServerConnection::fetchTaskTimedOut(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(*(void *)(a1 + 24) + 8);
  ++*v1;
  WebCore::SWServer::workerByID();
  uint64_t result = WTF::RefCounted<WebCore::SWServer>::deref(v1);
  if (v5)
  {
    *(unsigned char *)(v5 + 377) = 1;
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v3 = &unk_1EEA0D598;
    uint64_t v4 = v3;
    WebCore::SWServerWorker::terminate();
    if (v4) {
      (*(void (**)(void *))(*v4 + 8))(v4);
    }
    return WTF::RefCounted<WebCore::SWServerWorker>::deref((_DWORD *)v5);
  }
  return result;
}

WTF::StringImpl *WebKit::WebSWServerConnection::enableNavigationPreload(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(_DWORD **)(*(void *)(a1 + 24) + 8);
  ++*v4;
  Registration = (WebCore::SWServerRegistration *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    uint64_t v6 = Registration;
    ++*(_DWORD *)Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v4);
    WebCore::SWServerRegistration::enableNavigationPreload(&v13, v6);
    uint64_t v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 16))(v7, &v13);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    if (v15)
    {
      uint64_t v9 = v14;
      uint64_t v14 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v8);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
    }
    return (WTF::StringImpl *)WTF::RefCounted<WebCore::SWServerRegistration>::deref(v6);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v4);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v13) = 8;
    char v15 = 1;
    uint64_t v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 16))(v11, &v13);
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
    if (v15)
    {
      uint64_t result = v14;
      uint64_t v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebSWServerConnection::disableNavigationPreload(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(_DWORD **)(*(void *)(a1 + 24) + 8);
  ++*v4;
  Registration = (WebCore::SWServerRegistration *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    uint64_t v6 = Registration;
    ++*(_DWORD *)Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v4);
    WebCore::SWServerRegistration::disableNavigationPreload(&v13, v6);
    uint64_t v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 16))(v7, &v13);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    if (v15)
    {
      uint64_t v9 = v14;
      uint64_t v14 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v8);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
    }
    return (WTF::StringImpl *)WTF::RefCounted<WebCore::SWServerRegistration>::deref(v6);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v4);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v13) = 8;
    char v15 = 1;
    uint64_t v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 16))(v11, &v13);
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
    if (v15)
    {
      uint64_t result = v14;
      uint64_t v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebSWServerConnection::setNavigationPreloadHeaderValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(_DWORD **)(*(void *)(a1 + 24) + 8);
  ++*v5;
  Registration = (_DWORD *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    uint64_t v7 = Registration;
    ++*Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v5);
    WebCore::SWServerRegistration::setNavigationPreloadHeaderValue();
    uint64_t v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v8 + 16))(v8, v14);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    if (v16)
    {
      uint64_t v10 = v15;
      char v15 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    return (WTF::StringImpl *)WTF::RefCounted<WebCore::SWServerRegistration>::deref(v7);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v5);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14[0] = 8;
    char v16 = 1;
    uint64_t v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v12 + 16))(v12, v14);
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
    if (v16)
    {
      uint64_t result = v15;
      char v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

_DWORD *WebKit::WebSWServerConnection::getNavigationPreloadState(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(_DWORD **)(*(void *)(a1 + 24) + 8);
  ++*v4;
  Registration = (_DWORD *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    uint64_t v6 = Registration;
    ++*Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v4);
    v11[0] = *((unsigned char *)v6 + 384);
    uint64_t v7 = (_DWORD *)*((void *)v6 + 49);
    if (v7) {
      *v7 += 2;
    }
    uint64_t v12 = v7;
    int v13 = 0;
    uint64_t v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v8 + 16))(v8, v11);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    if (v13 != -1) {
      ((void (*)(char *, char *))off_1EEA0D3E0[v13])(&v14, v11);
    }
    return WTF::RefCounted<WebCore::SWServerRegistration>::deref(v6);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v4);
    v11[0] = 8;
    uint64_t v12 = 0;
    int v13 = 1;
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v10 + 16))(v10, v11);
    uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
    if (v13 != -1) {
      return (_DWORD *)((uint64_t (*)(char *, char *))off_1EEA0D3E0[v13])(&v14, v11);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerConnection::focusServiceWorkerClient(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = a1 + 56;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 56) + 56))(a1 + 56);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2721;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v16 = v7;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(v7, a2);
  uint64_t v8 = *a3;
  *a3 = 0;
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v9 = &unk_1EEA0D5C0;
  v9[1] = v8;
  v15[0] = v9;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v5 + 40))(v5, &v16, v15, 0);
  uint64_t v11 = v15[0];
  v15[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t *WebKit::WebSWServerConnection::gatherClientData@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(a1 + 96), a2);
  uint64_t v6 = *(uint64_t **)(a1 + 96);
  if (v6) {
    v6 += 12 * *((unsigned int *)v6 - 1);
  }
  if (v6 == result)
  {
    *a3 = 0;
    a3[288] = 0;
  }
  else
  {
    uint64_t v7 = *(_DWORD **)(*(void *)(a1 + 24) + 8);
    ++*v7;
    WebCore::SWServer::gatherClientData();
    return (uint64_t *)WTF::RefCounted<WebCore::SWServer>::deref(v7);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerConnection::updateBackgroundFetchRegistration(WebKit::WebSWServerConnection *this, const WebCore::BackgroundFetchInformation *a2)
{
  uint64_t v3 = (char *)this + 56;
  uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 7) + 56))((char *)this + 56);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2734;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::BackgroundFetchInformation,void>::encode(v5, (uint64_t)a2);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::retrieveRecordResponseBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v5 = *(atomic_uint **)(a1 + 8);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v6 = &unk_1EEA0D5E8;
  v6[1] = v5;
  void v6[2] = a3;
  uint64_t v8 = v6;
  WebCore::SWServer::Connection::retrieveRecordResponseBody();
  uint64_t result = (uint64_t)v8;
  if (v8) {
    return (*(uint64_t (**)(void *))(*v8 + 8))(v8);
  }
  return result;
}

WTF::StringImpl *WebKit::WebSWServerConnection::addCookieChangeSubscriptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(_DWORD **)(*(void *)(a1 + 24) + 8);
  ++*v7;
  Registration = (_DWORD *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    uint64_t v9 = Registration;
    ++*Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v7);
    WebCore::SWServerRegistration::addCookieChangeSubscriptions();
    LOBYTE(v17) = 0;
    v18[12] = 0;
    uint64_t v10 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, int *))(*(void *)v10 + 16))(v10, &v17);
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    if (v18[12])
    {
      uint64_t v12 = *(WTF::StringImpl **)&v18[4];
      *(void *)&void v18[4] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v11);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    return (WTF::StringImpl *)WTF::RefCounted<WebCore::SWServerRegistration>::deref(v9);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v7);
    char v14 = qword_1EB358550;
    if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_ERROR))
    {
      int v17 = 134218240;
      *(void *)uint64_t v18 = a1;
      *(_WORD *)&unsigned char v18[8] = 2048;
      *(void *)&v18[10] = a2;
      _os_log_error_impl(&dword_1985F2000, v14, OS_LOG_TYPE_ERROR, "%p - WebSWServerConnection::AddCookieChangeSubscriptions: Did not handle because no valid registration for registration identifier %llu", (uint8_t *)&v17, 0x16u);
    }
    LOBYTE(v17) = 0;
    v18[12] = 0;
    uint64_t v15 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, int *))(*(void *)v15 + 16))(v15, &v17);
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 8))(v15);
    if (v18[12])
    {
      uint64_t result = *(WTF::StringImpl **)&v18[4];
      *(void *)&void v18[4] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebSWServerConnection::removeCookieChangeSubscriptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(_DWORD **)(*(void *)(a1 + 24) + 8);
  ++*v7;
  Registration = (_DWORD *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    uint64_t v9 = Registration;
    ++*Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v7);
    WebCore::SWServerRegistration::removeCookieChangeSubscriptions();
    LOBYTE(v17) = 0;
    v18[12] = 0;
    uint64_t v10 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, int *))(*(void *)v10 + 16))(v10, &v17);
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    if (v18[12])
    {
      uint64_t v12 = *(WTF::StringImpl **)&v18[4];
      *(void *)&void v18[4] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v11);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    return (WTF::StringImpl *)WTF::RefCounted<WebCore::SWServerRegistration>::deref(v9);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v7);
    char v14 = qword_1EB358550;
    if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_ERROR))
    {
      int v17 = 134218240;
      *(void *)uint64_t v18 = a1;
      *(_WORD *)&unsigned char v18[8] = 2048;
      *(void *)&v18[10] = a2;
      _os_log_error_impl(&dword_1985F2000, v14, OS_LOG_TYPE_ERROR, "%p - WebSWServerConnection::RemoveCookieChangeSubscriptions: Did not handle because no valid registration for registration identifier %llu", (uint8_t *)&v17, 0x16u);
    }
    LOBYTE(v17) = 0;
    v18[12] = 0;
    uint64_t v15 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, int *))(*(void *)v15 + 16))(v15, &v17);
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 8))(v15);
    if (v18[12])
    {
      uint64_t result = *(WTF::StringImpl **)&v18[4];
      *(void *)&void v18[4] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

_DWORD *WebKit::WebSWServerConnection::cookieChangeSubscriptions(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(_DWORD **)(*(void *)(a1 + 24) + 8);
  ++*v6;
  Registration = (WebCore::SWServerRegistration *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    uint64_t v8 = Registration;
    ++*(_DWORD *)Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v6);
    WebCore::SWServerRegistration::cookieChangeSubscriptions(&v15, v8);
    *(void *)long long buf = v15;
    uint64_t v9 = v16;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    *(void *)&uint8_t buf[8] = v9;
    *(_DWORD *)&uint8_t buf[16] = 0;
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v10 + 16))(v10, buf);
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    if (*(_DWORD *)&buf[16] != -1) {
      ((void (*)(char *, uint8_t *))off_1EEA0D3F0[*(unsigned int *)&buf[16]])(&v17, buf);
    }
    *(_DWORD *)&uint8_t buf[16] = -1;
    WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v11);
    return WTF::RefCounted<WebCore::SWServerRegistration>::deref(v8);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v6);
    int v13 = qword_1EB358550;
    if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a2;
      _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "%p - WebSWServerConnection::CookieChangeSubscriptions: Did not handle because no valid registration for registration identifier %llu", buf, 0x16u);
    }
    memset(buf, 0, 20);
    uint64_t v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v14 + 16))(v14, buf);
    uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
    if (*(_DWORD *)&buf[16] != -1) {
      return (_DWORD *)((uint64_t (*)(uint64_t *, uint8_t *))off_1EEA0D3F0[*(unsigned int *)&buf[16]])(&v15, buf);
    }
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::getNotifications(WebKit::WebSWServerConnection *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (WebKit::WebSWServerConnection::session(a1))
  {
    uint64_t v8 = WebKit::WebSWServerConnection::session(a1) + 1080;
    return WebKit::NetworkNotificationManager::getNotifications(v8, a2, a3, a4);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11[0] = 8;
    int v12 = 1;
    uint64_t v10 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v10 + 16))(v10, v11);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
    if (v12 != -1) {
      return ((uint64_t (*)(char *, unsigned char *))off_1EEA0D400[v12])(&v13, v11);
    }
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::messageSenderConnection(WebKit::WebSWServerConnection *this)
{
  return *((void *)this + 11);
}

uint64_t WebKit::WebSWServerConnection::messageSenderDestinationID(WebKit::WebSWServerConnection *this)
{
  return 0;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (_DWORD *)(a1 + 88);
    do
    {
      if (*((void *)v4 - 9) != -1)
      {
        uint64_t v5 = *v4;
        if (v5 != -1) {
          ((void (*)(char *, _DWORD *))off_1EEA0D390[v5])(&v8, v4 - 6);
        }
        *uint64_t v4 = -1;
        uint64_t v6 = *(v4 - 8);
        if (v6 != -1) {
          ((void (*)(char *, _DWORD *))off_1EEA0D390[v6])(&v9, v4 - 14);
        }
        *(v4 - 8) = -1;
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>><void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::take(void *a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  if (*a2) {
    v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  if ((void *)v3 == a3)
  {
    *a1 = 0;
    return;
  }
  uint64_t v4 = a3[1];
  a3[1] = 0;
  *a1 = v4;
  if (*a2)
  {
    uint64_t v5 = *a2 + 16 * *(unsigned int *)(*a2 - 4);
    if ((void *)v5 == a3) {
      return;
    }
  }
  else
  {
    if (!a3) {
      return;
    }
    uint64_t v5 = 0;
  }
  if ((void *)v5 != a3)
  {
    *a3 = -1;
    a3[1] = 0;
    ++*(_DWORD *)(*a2 - 16);
    uint64_t v6 = *a2;
    int v7 = *a2 ? *(_DWORD *)(v6 - 12) - 1 : -1;
    *(_DWORD *)(v6 - 12) = v7;
    uint64_t v8 = *a2;
    if (*a2)
    {
      unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
      unsigned int v10 = *(_DWORD *)(v8 - 4);
      if (v9 < v10 && v10 >= 9) {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a2, v10 >> 1);
      }
    }
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 16 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    while (1)
    {
      char v13 = (uint64_t *)(v4 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          uint64_t v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
          uint64_t *v26 = *v13;
          uint64_t v28 = v4 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v16 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (!v16) {
            goto LABEL_20;
          }
LABEL_19:
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          goto LABEL_20;
        }
        uint64_t v15 = v4 + 16 * v11;
        uint64_t v16 = *(void *)(v15 + 8);
        *(void *)(v15 + 8) = 0;
        if (v16) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if (++v11 == v12) {
        goto LABEL_23;
      }
    }
  }
  if (v4)
  {
LABEL_23:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::resolveUnregistrationJobInClient(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationKey const&,BOOL)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA0D420;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::resolveUnregistrationJobInClient(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationKey const&,BOOL)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA0D420;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::resolveUnregistrationJobInClient(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ServiceWorkerRegistrationKey const&,BOOL)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&>::call(uint64_t a1)
{
  v3[0] = *(unsigned char *)(a1 + 16);
  int v4 = 0;
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v4 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EEA0D380[v4])(&v5, v3);
  }
  return result;
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, *(uint64_t **)a2);
  char v4 = *(unsigned char *)(a2 + 8);
  char v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *char v5 = v4;
    uint64_t v7 = *(void *)(a2 + 16);
    IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerData> const&>(a1, v7);
  }
  else
  {
    __break(0xC471u);
  }
}

unint64_t IPC::ArgumentCoder<WebCore::ServiceWorkerUpdateViaCache,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWClientConnection::SetServiceWorkerClientIsControlled,WebKit::WebSWServerConnection::controlClient(WebKit::NetworkResourceLoadParameters const&,WebCore::SWServerRegistration &,WebCore::ResourceRequest const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_1>(WebKit::WebSWServerConnection::controlClient(WebKit::NetworkResourceLoadParameters const&,WebCore::SWServerRegistration &,WebCore::ResourceRequest const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EEA0D448;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWClientConnection::SetServiceWorkerClientIsControlled,WebKit::WebSWServerConnection::controlClient(WebKit::NetworkResourceLoadParameters const&,WebCore::SWServerRegistration &,WebCore::ResourceRequest const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_1>(WebKit::WebSWServerConnection::controlClient(WebKit::NetworkResourceLoadParameters const&,WebCore::SWServerRegistration &,WebCore::ResourceRequest const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA0D448;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWClientConnection::SetServiceWorkerClientIsControlled,WebKit::WebSWServerConnection::controlClient(WebKit::NetworkResourceLoadParameters const&,WebCore::SWServerRegistration &,WebCore::ResourceRequest const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_1>(WebKit::WebSWServerConnection::controlClient(WebKit::NetworkResourceLoadParameters const&,WebCore::SWServerRegistration &,WebCore::ResourceRequest const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(void *a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = a1[2];
      if (!v5 || (_BYTE)v4) {
        return;
      }
      goto LABEL_9;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = a1[2];
  if (!v5) {
    return;
  }
LABEL_9:
  if (*(void *)(v5 + 8))
  {
    uint64_t v9 = a1[3];
    WebKit::WebSWServerConnection::unregisterServiceWorkerClient(v9, a1 + 4);
  }
}

_DWORD *WTF::RefCounted<WebCore::SWServerWorker>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    uint64_t v1 = (WTF *)MEMORY[0x199732290]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::startFetch(WebKit::ServiceWorkerFetchTask &,WebCore::SWServerWorker &)::$_0,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EEA0D470;
  uint64_t v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  unsigned __int16 v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::startFetch(WebKit::ServiceWorkerFetchTask &,WebCore::SWServerWorker &)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA0D470;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  unsigned __int16 v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::startFetch(WebKit::ServiceWorkerFetchTask &,WebCore::SWServerWorker &)::$_0,void,BOOL>::call(void *result, char a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = result[3];
  if (v2)
  {
    uint64_t v3 = *(WebKit::ServiceWorkerFetchTask **)(v2 + 8);
    if (v3)
    {
      unsigned __int16 v4 = result;
      uint64_t v5 = result[1];
      if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0)
      {
        uint64_t v7 = result[2];
        ++*(_DWORD *)(v6 + 16);
        if (a2)
        {
          uint64_t v8 = *(_DWORD **)(*(void *)(v7 + 24) + 8);
          ++*v8;
          WebCore::SWServer::workerByID();
          if (v19 && !*((unsigned char *)v19 + 377))
          {
            if (!WebCore::SWServerWorker::contextConnection(v19))
            {
              WebCore::SWServerWorker::serviceWorkerPageIdentifier((uint64_t *)buf, v19);
              WebCore::SWServer::createContextConnection();
            }
            uint64_t v13 = v4[3];
            uint64_t v14 = v4[1];
            v4[1] = 0;
            v4[3] = 0;
            uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x20);
            *uint64_t v15 = &unk_1EEA0D498;
            v15[1] = v14;
            void v15[2] = v7;
            uint64_t v15[3] = v13;
            int v18 = v15;
            WebCore::SWServer::runServiceWorkerIfNecessary();
            if (v18) {
              (*(void (**)(void *))(*v18 + 8))(v18);
            }
          }
          else
          {
            uint64_t v9 = v4[3];
            if (v9) {
              uint64_t v10 = *(WebKit::ServiceWorkerFetchTask **)(v9 + 8);
            }
            else {
              uint64_t v10 = 0;
            }
            WebKit::ServiceWorkerFetchTask::cannotHandle(v10);
          }
          if (v19) {
            WTF::RefCounted<WebCore::SWServerWorker>::deref(v19);
          }
          unint64_t result = WTF::RefCounted<WebCore::SWServer>::deref(v8);
        }
        else
        {
          uint64_t v11 = qword_1EB358550;
          if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_ERROR))
          {
            uint64_t v16 = *((void *)v3 + 5);
            *(_DWORD *)long long buf = 134218240;
            uint64_t v21 = v7;
            __int16 v22 = 2048;
            uint64_t v23 = v16;
            _os_log_error_impl(&dword_1985F2000, v11, OS_LOG_TYPE_ERROR, "%p - WebSWServerConnection::startFetch: fetchIdentifier=%llu DidNotHandle because worker did not become activated", buf, 0x16u);
            uint64_t v17 = v4[3];
            if (v17) {
              uint64_t v3 = *(WebKit::ServiceWorkerFetchTask **)(v17 + 8);
            }
            else {
              uint64_t v3 = 0;
            }
          }
          unint64_t result = (void *)WebKit::ServiceWorkerFetchTask::cannotHandle(v3);
        }
        int v12 = *(_DWORD *)(v6 + 16);
        if (!v12)
        {
          __break(0xC471u);
          JUMPOUT(0x199420090);
        }
        *(_DWORD *)(v6 + ++*(_DWORD *)(this + 16) = v12 - 1;
      }
      else
      {
        return (void *)WebKit::ServiceWorkerFetchTask::cannotHandle(v3);
      }
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit21WebSWServerConnection10startFetchERNS2_22ServiceWorkerFetchTaskERN7WebCore14SWServerWorkerEEN3__0clEbEUlPT_E_vJPNS6_27SWServerToContextConnectionEEED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EEA0D498;
  uint64_t v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  unsigned __int16 v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21WebSWServerConnection10startFetchERNS2_22ServiceWorkerFetchTaskERN7WebCore14SWServerWorkerEEN3__0clEbEUlPT_E_vJPNS6_27SWServerToContextConnectionEEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA0D498;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  unsigned __int16 v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit21WebSWServerConnection10startFetchERNS2_22ServiceWorkerFetchTaskERN7WebCore14SWServerWorkerEEN3__0clEbEUlPT_E_vJPNS6_27SWServerToContextConnectionEEE4callESE_(void *result, WebKit::WebSWServerToContextConnection *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = result[3];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      unsigned __int16 v4 = result;
      uint64_t v5 = result[1];
      if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0)
      {
        uint64_t v8 = result[2];
        ++*(_DWORD *)(v6 + 16);
        uint64_t v9 = qword_1EB358550;
        if (a2)
        {
          if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v10 = *(char **)(v3 + 40);
            uint64_t v11 = *(void *)(v3 + 56);
            *(_DWORD *)long long buf = 134218496;
            uint64_t v19 = v8;
            __int16 v20 = 2048;
            uint64_t v21 = v10;
            __int16 v22 = 2048;
            uint64_t v23 = v11;
            _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%p - WebSWServerConnection::startFetch: Starting fetch %llu via service worker %llu", buf, 0x20u);
            uint64_t v3 = *(void *)(v4[3] + 8);
          }
          unint64_t result = WebKit::ServiceWorkerFetchTask::start((WebKit::ServiceWorkerFetchTask *)v3, a2);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_ERROR))
          {
            WTF::String::number(*(WTF::String **)(v3 + 40));
            WTF::String::utf8();
            if (v17) {
              uint64_t v13 = (char *)v17 + 16;
            }
            else {
              uint64_t v13 = 0;
            }
            *(_DWORD *)long long buf = 134218242;
            uint64_t v19 = v8;
            __int16 v20 = 2080;
            uint64_t v21 = v13;
            _os_log_error_impl(&dword_1985F2000, v9, OS_LOG_TYPE_ERROR, "%p - WebSWServerConnection::startFetch: fetchIdentifier=%s DidNotHandle because failed to run service worker", buf, 0x16u);
            if (v17)
            {
              if (*(_DWORD *)v17 == 1) {
                WTF::fastFree(v17, v14);
              }
              else {
                --*(_DWORD *)v17;
              }
            }
            if (v16)
            {
              if (*(_DWORD *)v16 == 2) {
                WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v14);
              }
              else {
                *(_DWORD *)v16 -= 2;
              }
            }
            uint64_t v15 = v4[3];
            if (v15) {
              uint64_t v3 = *(void *)(v15 + 8);
            }
            else {
              uint64_t v3 = 0;
            }
          }
          unint64_t result = (void *)WebKit::ServiceWorkerFetchTask::cannotHandle((WebKit::ServiceWorkerFetchTask *)v3);
        }
        int v12 = *(_DWORD *)(v6 + 16);
        if (!v12)
        {
          __break(0xC471u);
          JUMPOUT(0x199420478);
        }
        *(_DWORD *)(v6 + ++*(_DWORD *)(this + 16) = v12 - 1;
      }
      else
      {
        return (void *)WebKit::ServiceWorkerFetchTask::cannotHandle((WebKit::ServiceWorkerFetchTask *)v3);
      }
    }
  }
  return result;
}

uint64_t std::optional<std::variant<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>>::operator=[abi:sn180100]<std::variant<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>,void>(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 208))
  {
    *(unsigned char *)a1 = 0;
    *(_DWORD *)(a1 + 192) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>,(std::__variant_detail::_Trait)1>>(a1, a2);
    *(unsigned char *)(a1 + 208) = 1;
    return a1;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  uint64_t v4 = *(unsigned int *)(a2 + 192);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return a1;
    }
LABEL_7:
    uint64_t v6 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1EEA0D4B0[v4])(&v6, a1, a2);
    return a1;
  }
  if (v4 != -1) {
    goto LABEL_7;
  }
  ((void (*)(char *, uint64_t, uint64_t))off_1EEA0D3A0[v3])(&v7, a1, a2);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ServiceWorkerDataENS8_23ServiceWorkerClientDataEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 192);
  if (v5 != -1)
  {
    if (!v5)
    {
      *(_OWORD *)a2 = *(_OWORD *)a3;
      WTF::URL::operator=(a2 + 16, a3 + 16);
      *(_WORD *)(a2 + 56) = *(_WORD *)(a3 + 56);
      return;
    }
    ((void (*)(char *, uint64_t))off_1EEA0D3A0[v5])(&v7, v4);
  }
  *(_DWORD *)(v4 + 192) = -1;
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a3;
  WTF::URL::URL(v4 + 16, (uint64_t *)(a3 + 16));
  *(_WORD *)(v4 + 56) = *(_WORD *)(a3 + 56);
  *(_DWORD *)(v4 + 192) = 0;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ServiceWorkerDataENS8_23ServiceWorkerClientDataEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 192);
  if (v5 == -1) {
    goto LABEL_9;
  }
  if (v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_1EEA0D3A0[v5])(&v14, v4);
LABEL_9:
    *(_DWORD *)(v4 + 192) = -1;
    unint64_t result = (WTF *)std::__variant_detail::__alt<1ul,WebCore::ServiceWorkerClientData>::__alt[abi:sn180100]<WebCore::ServiceWorkerClientData>(v4, (long long *)a3);
    *(_DWORD *)(v4 + 192) = 1;
    return result;
  }
  long long v7 = *(_OWORD *)a3;
  long long v8 = *(_OWORD *)(a3 + 16);
  *(_WORD *)(a2 + 32) = *(_WORD *)(a3 + 32);
  *(_OWORD *)a2 = v7;
  *(_OWORD *)(a2 + ++*(_DWORD *)(this + 16) = v8;
  WTF::URL::operator=(a2 + 40, a3 + 40);
  WTF::URL::operator=(a2 + 80, a3 + 80);
  long long v9 = *(_OWORD *)(a3 + 136);
  long long v10 = *(_OWORD *)(a3 + 152);
  uint64_t v11 = *(void *)(a3 + 168);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a3 + 120);
  *(void *)(a2 + 168) = v11;
  *(_OWORD *)(a2 + 152) = v10;
  *(_OWORD *)(a2 + 136) = v9;
  uint64_t v12 = *(unsigned int *)(a2 + 188);
  if (v12) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(a2 + 176), (WTF::StringImpl *)(*(void *)(a2 + 176) + 8 * v12));
  }

  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2 + 176, (_DWORD *)(a3 + 176));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::postMessageToServiceWorker(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::MessageWithMessagePorts &&,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>> const&)::$_2,void,WebCore::SWServerToContextConnection *>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EEA0D4D0;
  uint64_t v3 = *(unsigned int *)(a1 + 240);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1EEA0D3A0[v3])(&v7, a1 + 48);
  }
  *(_DWORD *)(a1 + 2++*(_DWORD *)(this + 40) = -1;
  uint64_t v4 = *(WTF **)(a1 + 32);
  if (v4)
  {
    *(void *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 40) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = *(unsigned int **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::postMessageToServiceWorker(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::MessageWithMessagePorts &&,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>> const&)::$_2,void,WebCore::SWServerToContextConnection *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA0D4D0;
  uint64_t v3 = *((unsigned int *)this + 60);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1EEA0D3A0[v3])(&v7, (char *)this + 48);
  }
  *((_DWORD *)this + 60) = -1;
  uint64_t v4 = (WTF *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v5);
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::postMessageToServiceWorker(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::MessageWithMessagePorts &&,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>> const&)::$_2,void,WebCore::SWServerToContextConnection *>::call(IPC::Encoder *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = (uint64_t *)((char *)result + 16);
    uint64_t v4 = (uint64_t *)((char *)result + 24);
    uint64_t v5 = (uint64_t)result + 48;
    uint64_t v6 = a2 + 104;
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 104) + 56))(a2 + 104);
    long long v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)long long v8 = 2753;
    *((void *)v8 + 1) = v7;
    *((void *)v8 + 66) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 68) = 0;
    *((void *)v8 + 70) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    char v14 = v8;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, v3);
    IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>(v8, v4);
    IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v8, (uint64_t)v2 + 32);
    char v15 = *((_DWORD *)v2 + 60);
    IPC::Encoder::operator<<<BOOL>(v8, &v15);
    if (v15 == 1)
    {
      if (*((_DWORD *)v2 + 60) == 1)
      {
        IPC::ArgumentCoder<WebCore::ServiceWorkerClientData,void>::encode(v8, v5);
LABEL_8:
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v14, 0);
        unint64_t result = v14;
        char v14 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder(result, v9);
          return (IPC::Encoder *)WTF::fastFree(v10, v11);
        }
        return result;
      }
    }
    else
    {
      if (v15) {
        goto LABEL_8;
      }
      if (!*((_DWORD *)v2 + 60))
      {
        IPC::ArgumentCoder<WebCore::ServiceWorkerData,void>::encode(v8, v5);
        goto LABEL_8;
      }
    }
    uint64_t v12 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(v12, v13);
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  int v20 = -1640531527;
  __int16 v21 = 0;
  char v22 = 0;
  WTF::addArgs<WTF::UUID>(&v20, a2);
  int v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v20);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  unsigned int v10 = v6 & v5;
  unint64_t result = (uint64_t *)(v2 + 96 * (v6 & v5));
  uint64_t v12 = *result;
  uint64_t v13 = result[1];
  BOOL v14 = v13 == v8 && v12 == v7;
  uint64_t v15 = result[2];
  if (!v14 || v15 != v9)
  {
    int v17 = 1;
    while (v12 | v13 || v15)
    {
      unsigned int v10 = (v10 + v17) & v5;
      unint64_t result = (uint64_t *)(v2 + 96 * v10);
      uint64_t v12 = *result;
      uint64_t v13 = result[1];
      BOOL v18 = v13 == v8 && v12 == v7;
      uint64_t v15 = result[2];
      ++v17;
      if (v18 && v15 == v9) {
        return result;
      }
    }
    if (*a1) {
      return (uint64_t *)(*a1 + 96 * *(unsigned int *)(*a1 - 4));
    }
    else {
      return 0;
    }
  }
  return result;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v3 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v2 = v3 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v3));
  }
  else {
    unsigned int v2 = 8;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1, v2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::postMessageToServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WebCore::MessageWithMessagePorts const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&)::$_0,void,WebCore::ProcessQualified<WTF::UUID>,WebCore::MessageWithMessagePorts const&,WebCore::ServiceWorkerData const&,WTF::String const&>::call(uint64_t a1, _OWORD *a2, uint64_t a3, long long *a4, uint64_t a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v5 = a2[1];
  v21[0] = *a2;
  v21[1] = v5;
  long long v14 = *a4;
  int v6 = (WTF::StringImpl *)*((void *)a4 + 2);
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v15 = v6;
  long long v16 = *(long long *)((char *)a4 + 24);
  long long v17 = *(long long *)((char *)a4 + 40);
  __int16 v18 = *((_WORD *)a4 + 28);
  uint64_t v7 = *(void *)(a1 + 8);
  v19[0] = v21;
  v19[1] = a3;
  v19[2] = &v14;
  v19[3] = a5;
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2726;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v20 = v8;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::UUID> const&,WebCore::MessageWithMessagePorts const&,WebCore::ServiceWorkerData const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::UUID> const&,WebCore::MessageWithMessagePorts const&,WebCore::ServiceWorkerData const&,WTF::String const&>,0ul,1ul,2ul,3ul>(v8, (uint64_t)v19);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v7 + 56) + 32))(v7 + 56, &v20, 0);
  unsigned int v10 = v20;
  int v20 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v12, v13);
  }
  unint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)((96 * a2) | 0x10));
  if (a2)
  {
    uint64_t v9 = a2;
    unsigned int v10 = (_OWORD *)(result + 48);
    do
    {
      *((void *)v10 - 4) = 0;
      *((void *)v10 - 3) = 0;
      *((void *)v10 - 2) = 0;
      *unsigned int v10 = 0uLL;
      v10[1] = 0uLL;
      v10[2] = 0uLL;
      v10[3] = 0uLL;
      v10 += 6;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    uint64_t v51 = v5;
    uint64_t v52 = v4;
    do
    {
      uint64_t v14 = v4 + 96 * v11;
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15 != -1)
      {
        if (v15) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = *(_OWORD *)v14 == 0;
        }
        if (v16)
        {
          uint64_t v17 = v4 + 96 * v11;
          unsigned int v20 = *(_DWORD *)(v17 + 88);
          uint64_t v19 = (_DWORD *)(v17 + 88);
          uint64_t v18 = v20;
          if (v20 != -1) {
            ((void (*)(char *, uint64_t))off_1EEA0D390[v18])(&v56, v4 + 96 * v11 + 64);
          }
          *uint64_t v19 = -1;
          uint64_t v21 = v4 + 96 * v11;
          unsigned int v24 = *(_DWORD *)(v21 + 56);
          uint64_t v23 = (_DWORD *)(v21 + 56);
          uint64_t v22 = v24;
          if (v24 != -1) {
            ((void (*)(char *, _DWORD *))off_1EEA0D390[v22])(&v57, v19 - 14);
          }
          _DWORD *v23 = -1;
        }
        else
        {
          uint64_t v25 = *a1;
          uint64_t v55 = v12;
          if (*a1) {
            unsigned int v26 = *(_DWORD *)(v25 - 8);
          }
          else {
            unsigned int v26 = 0;
          }
          int v62 = -1640531527;
          __int16 v63 = 0;
          char v64 = 0;
          WTF::addArgs<WTF::UUID>(&v62, (void *)(v4 + 96 * v11));
          int v27 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v62);
          int v28 = 0;
          do
          {
            unsigned int v29 = v27 & v26;
            uint64_t v12 = v25 + 96 * (v27 & v26);
            int v27 = ++v28 + (v27 & v26);
          }
          while (*(_OWORD *)v12 != 0 || *(void *)(v12 + 16) != 0);
          uint64_t v31 = v25 + 96 * v29;
          unsigned int v34 = *(_DWORD *)(v31 + 88);
          uint64_t v33 = (_DWORD *)(v31 + 88);
          uint64_t v32 = v34;
          if (v34 != -1) {
            ((void (*)(char *, uint64_t))off_1EEA0D390[v32])(&v58, v25 + 96 * v29 + 64);
          }
          _DWORD *v33 = -1;
          uint64_t v35 = v25 + 96 * v29;
          unsigned int v38 = *(_DWORD *)(v35 + 56);
          int v37 = (_DWORD *)(v35 + 56);
          uint64_t v36 = v38;
          if (v38 != -1) {
            ((void (*)(char *, _DWORD *))off_1EEA0D390[v36])(&v59, v33 - 14);
          }
          _DWORD *v37 = -1;
          long long v39 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)uint64_t v12 = *(_OWORD *)v14;
          *(_OWORD *)(v12 + ++*(_DWORD *)(this + 16) = v39;
          uint64_t v40 = v4 + 96 * v11;
          *((unsigned char *)v33 - 56) = 0;
          _DWORD *v37 = -1;
          uint64_t v41 = v40 + 32;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v33 - 14), v40 + 32);
          uint64_t v42 = v25 + 96 * v29;
          uint64_t v43 = v40 + 64;
          *(unsigned char *)(v42 + 64) = 0;
          _DWORD *v33 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v42 + 64, v40 + 64);
          unsigned int v46 = *(_DWORD *)(v40 + 88);
          char v45 = (_DWORD *)(v40 + 88);
          uint64_t v44 = v46;
          if (v46 != -1) {
            ((void (*)(char *, uint64_t))off_1EEA0D390[v44])(&v60, v43);
          }
          _DWORD *v45 = -1;
          uint64_t v4 = v52;
          uint64_t v47 = v52 + 96 * v11;
          unsigned int v50 = *(_DWORD *)(v47 + 56);
          uint64_t v49 = (_DWORD *)(v47 + 56);
          uint64_t v48 = v50;
          if (v50 != -1) {
            ((void (*)(char *, uint64_t))off_1EEA0D390[v48])(&v61, v41);
          }
          _DWORD *v49 = -1;
          if (v14 != a3) {
            uint64_t v12 = v55;
          }
          uint64_t v13 = v51;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

unsigned int *WTF::VectorDestructor<true,WebCore::ServiceWorkerClientPendingMessage>::destruct(unsigned int *result, WTF::StringImpl *a2)
{
  if (result != (unsigned int *)a2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = (WTF::StringImpl *)*((void *)v3 + 11);
      *((void *)v3 + 11) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      unsigned int v5 = (WTF::StringImpl *)*((void *)v3 + 5);
      *((void *)v3 + 5) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, a2);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
      int v6 = (WTF *)*((void *)v3 + 1);
      if (v6)
      {
        *((void *)v3 + 1) = 0;
        v3[4] = 0;
        WTF::fastFree(v6, a2);
      }
      uint64_t result = *(unsigned int **)v3;
      *(void *)uint64_t v3 = 0;
      if (result) {
        uint64_t result = WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(result);
      }
      v3 += 24;
    }
    while (v3 != (unsigned int *)a2);
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::UUID> const&,WebCore::MessageWithMessagePorts const&,WebCore::ServiceWorkerData const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::UUID> const&,WebCore::MessageWithMessagePorts const&,WebCore::ServiceWorkerData const&,WTF::String const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(a1, *(uint64_t **)a2);
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>(a1, v4);
  IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v4 + 1));
  IPC::ArgumentCoder<WebCore::ServiceWorkerData,void>::encode(a1, *(void *)(a2 + 16));
  unsigned int v5 = *(uint64_t **)(a2 + 24);

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v5);
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA0D520;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  unsigned int v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA0D520;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  unsigned int v5 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4
    && (unsigned int v5 = *(WebKit::WebSWServerConnection **)(v4 + 8)) != 0
    && WebKit::WebSWServerConnection::session(v5)
    && ((uint64_t v6 = *(void *)(a1 + 8)) == 0 ? (v7 = 0) : (v7 = *(WebKit::WebSWServerConnection **)(v6 + 8)),
        (v8 = WebKit::WebSWServerConnection::session(v7), !*(_DWORD *)(a2 + 80)) && (uint64_t v9 = *(void *)(v8 + 72)) != 0))
  {
    v16[0] = 0;
    int v17 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>((uint64_t)v16, a2);
    uint64_t v10 = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    uint64_t v18 = v10;
    uint64_t v11 = WTF::fastMalloc((WTF *)0x68);
    *(void *)uint64_t v11 = &unk_1EEA0D548;
    *(unsigned char *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 88) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(v11 + 8, (uint64_t)v16);
    uint64_t v12 = v18;
    uint64_t v18 = 0;
    *(void *)(v11 + 96) = v12;
    uint64_t v19 = v11;
    WebKit::WebResourceLoadStatisticsStore::setMostRecentWebPushInteractionTime(v9, a1 + 24, &v19);
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    uint64_t result = v18;
    uint64_t v18 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    if (v17 != -1) {
      return ((uint64_t (*)(char *, unsigned char *))off_1EEA0D3B0[v17])(&v20, v16);
    }
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, a2);
    uint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 8);
    return v15(v14);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)::$_0::operator()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D548;
  uint64_t v2 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 88);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1EEA0D3B0[v3])(&v5, a1 + 8);
  }
  *(_DWORD *)(a1 + 88) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)::$_0::operator()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA0D548;
  uint64_t v3 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((unsigned int *)this + 22);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1EEA0D3B0[v4])(&v6, (char *)this + 8);
  }
  *((_DWORD *)this + 22) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)::$_0::operator()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)> &&)::$_0,void,WebCore::PushPermissionState>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA0D570;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)> &&)::$_0,void,WebCore::PushPermissionState>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA0D570;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)> &&)::$_0,void,WebCore::PushPermissionState>::call(uint64_t a1, char a2)
{
  v4[0] = a2;
  int v5 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v5 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EEA0D3D0[v5])(&v6, v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWClientConnection::FocusServiceWorkerClient,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA0D5C0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWClientConnection::FocusServiceWorkerClient,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA0D5C0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWClientConnection::FocusServiceWorkerClient,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerClientData>>>(a2, v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8) {
        return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::FindClientByVisibleIdentifier,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(v2);
    }
  }
  else
  {
    char v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::FindClientByVisibleIdentifier,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::retrieveRecordResponseBody(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EEA0D5E8;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::retrieveRecordResponseBody(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EEA0D5E8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void IPC::handleMessage<Messages::WebSWServerConnection::ScheduleJobInServer,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WebCore::ServiceWorkerJobData &&)>(uint64_t *a1, void *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  IPC::ArgumentCoder<WebCore::ServiceWorkerJobData,void>::decode(a1, (uint64_t)&v40);
  if (v60
    || ((uint64_t v11 = *a1, v12 = a1[1], *a1 = 0, a1[1] = 0, (v13 = a1[3]) != 0) ? (v14 = v12 == 0) : (v14 = 1),
        !v14 && ((*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11), v60)))
  {
    uint64_t v4 = v40;
    uint64_t v5 = v43;
    uint64_t v40 = 0;
    uint64_t v18 = v4;
    long long v19 = v41;
    long long v20 = v42;
    LODWORD(v41) = v41 & 0xFFFFFFFE;
    uint64_t v43 = 0;
    uint64_t v21 = v5;
    long long v22 = v44;
    long long v23 = v45;
    LODWORD(v44) = v44 & 0xFFFFFFFE;
    v24[0] = 0;
    int v25 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v24, (uint64_t)&v46);
    uint64_t v7 = v47;
    uint64_t v47 = 0;
    uint64_t v26 = v7;
    long long v27 = v48;
    long long v28 = v49;
    LODWORD(v48) = v48 & 0xFFFFFFFE;
    long long v29 = v50;
    long long v30 = v51;
    long long v31 = v52;
    __int16 v32 = v53;
    uint64_t v8 = v54;
    uint64_t v54 = 0;
    uint64_t v33 = v8;
    char v34 = v55;
    LOBYTE(v35) = 0;
    char v37 = 0;
    if (v58)
    {
      uint64_t v9 = v56;
      uint64_t v56 = 0;
      uint64_t v35 = v9;
      __int16 v36 = v57;
      char v37 = 1;
    }
    long long v38 = v59;
    char v39 = 1;
    if (!v60) {
      goto LABEL_6;
    }
    WebCore::ServiceWorkerJobData::~ServiceWorkerJobData((WebCore::ServiceWorkerJobData *)&v40, v6);
    if (v39) {
      goto LABEL_6;
    }
  }
  else
  {
    LOBYTE(v18) = 0;
    char v39 = 0;
  }
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t v17 = a1[3];
  if (v17)
  {
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15);
      if (v39)
      {
LABEL_6:
        WebKit::WebSWServerConnection::scheduleJobInServer(a2, (uint64_t)&v18);
        if (v39) {
          WebCore::ServiceWorkerJobData::~ServiceWorkerJobData((WebCore::ServiceWorkerJobData *)&v18, v10);
        }
      }
    }
  }
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v7
    && (uint64_t v8 = v6,
        uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2),
        v10)
    && (uint64_t v11 = v9,
        IPC::Decoder::decode<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>>((IPC::Decoder *)a2, &v23), v26))
  {
    long long v20 = v23;
    long long v21 = v24;
    long long v22 = v25;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v13)
    {
      *(void *)&long long v23 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v23 + 1, a1);
      BOOL v14 = (void *)WTF::fastMalloc((WTF *)0x18);
      *BOOL v14 = &unk_1EEA0D620;
      v14[1] = v23;
      uint64_t v15 = *((void *)&v23 + 1);
      *((void *)&v23 + 1) = 0;
      void v14[2] = v15;
      long long v19 = v14;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23 + 1);
      long long v23 = v20;
      long long v24 = v21;
      long long v25 = v22;
      WebKit::WebSWServerConnection::scheduleUnregisterJobInServer(a3, v8, v11, &v23, (uint64_t *)&v19);
      uint64_t result = (uint64_t)v19;
      long long v19 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  else
  {
    uint64_t v16 = *a2;
    uint64_t v17 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v18 = v17 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v16);
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::WebSWServerConnection::FinishFetchingScriptInServer,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WebCore::ServiceWorkerJobDataIdentifier const&,WebCore::ServiceWorkerRegistrationKey const&,WebCore::WorkerFetchResult &&)>(uint64_t *a1)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a1, (uint64_t)&v15);
  if (!v16)
  {
    LOBYTE(v36) = 0;
    char v57 = 0;
    goto LABEL_19;
  }
  IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationKey>(a1, v58);
  if (v62 && (IPC::Decoder::decode<WebCore::WorkerFetchResult>(a1, (uint64_t)&v17), v35))
  {
    if (!v16 || !v62) {
      __break(1u);
    }
    long long v36 = v15;
    v37[0] = 0;
    int v38 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v37, (uint64_t)v58);
    uint64_t v3 = v59;
    long long v59 = 0;
    char v39 = v3;
    long long v40 = v60;
    long long v41 = v61;
    LODWORD(v60) = v60 & 0xFFFFFFFE;
    v42[0] = v17;
    long long v4 = v20;
    __n128 v42[2] = v19;
    long long v17 = 0u;
    v42[1] = v18;
    LODWORD(v18) = v18 & 0xFFFFFFFE;
    long long v20 = 0u;
    v42[3] = v4;
    uint64_t v5 = v21;
    uint64_t v21 = 0;
    uint64_t v43 = v5;
    char v45 = v23;
    int v44 = v22;
    __int16 v46 = v24;
    long long v6 = v25;
    long long v25 = 0u;
    long long v7 = v26;
    long long v26 = 0u;
    long long v47 = v6;
    long long v48 = v7;
    uint64_t v8 = v27;
    uint64_t v27 = 0;
    long long v50 = v28;
    long long v51 = v29;
    LODWORD(v28) = v28 & 0xFFFFFFFE;
    uint64_t v49 = v8;
    uint64_t v52 = v30;
    __int16 v54 = v32;
    int v53 = v31;
    uint64_t v9 = v33;
    uint64_t v30 = 0;
    uint64_t v33 = 0;
    uint64_t v55 = v9;
    char v56 = v34;
    char v57 = 1;
    if (v35) {
      WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)&v17, v2);
    }
  }
  else
  {
    LOBYTE(v36) = 0;
    char v57 = 0;
  }
  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationKey,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v58, v2);
  if (!v57)
  {
LABEL_19:
    uint64_t v13 = *a1;
    uint64_t v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (!result) {
      return result;
    }
    if (!v14) {
      return result;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v13);
    if (!v57) {
      return result;
    }
  }
  uint64_t result = (WTF::StringImpl *)WebCore::SWServer::Connection::finishFetchingScriptInServer();
  if (v57)
  {
    WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)v42, v11);
    uint64_t result = v39;
    char v39 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    if (v38 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(long long *, unsigned char *))off_1EEA0D600[v38])(&v17, v37);
    }
  }
  return result;
}

void IPC::handleMessage<Messages::WebSWServerConnection::PostMessageToServiceWorker,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::MessageWithMessagePorts &&,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>> const&)>(uint64_t *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  if (v5)
  {
    uint64_t v6 = v4;
    IPC::Decoder::decode<WebCore::MessageWithMessagePorts>((IPC::Decoder *)a1, (uint64_t)&v16);
    if (v18)
    {
      IPC::Decoder::decode<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>>((IPC::Decoder *)a1, v24);
      if (v25)
      {
        if (!v18) {
          __break(1u);
        }
        uint64_t v19 = v6;
        long long v8 = v16;
        long long v16 = 0uLL;
        *(_OWORD *)long long v20 = v8;
        *(void *)&long long v8 = v17;
        uint64_t v17 = 0;
        uint64_t v21 = v8;
        v22[0] = v24[0];
        v22[1] = v24[1];
        v22[2] = v24[2];
        char v23 = 1;
        std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v16, v7);
        WebKit::WebSWServerConnection::postMessageToServiceWorker(a2, v19, (long long *)v20, (uint64_t)v22);
        if (v23)
        {
          char v10 = v20[1];
          if (v20[1])
          {
            v20[1] = 0;
            LODWORD(v21) = 0;
            WTF::fastFree(v10, v9);
          }
          uint64_t v11 = (unsigned int *)v20[0];
          v20[0] = 0;
          if (v11) {
            WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v11);
          }
        }
        return;
      }
    }
    std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v16, v7);
  }
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t v14 = a1[3];
  if (v14) {
    BOOL v15 = v13 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12);
  }
}

WTF::StringImpl *IPC::handleMessage<Messages::WebSWServerConnection::DidResolveRegistrationPromise,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WebCore::ServiceWorkerRegistrationKey const&)>(uint64_t *a1, WebCore::SWServer::Connection *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationKey>(a1, v17);
  char v5 = v21;
  v11[0] = 0;
  if (v21)
  {
    int v12 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v11, (uint64_t)v17);
    uint64_t v6 = v18;
    char v18 = 0;
    uint64_t v13 = v6;
    long long v14 = v19;
    long long v15 = v20;
    LODWORD(v19) = v19 & 0xFFFFFFFE;
    char v5 = 1;
  }
  char v16 = v5;
  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationKey,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v4);
  if (v16
    || (v9 = *a1, v10 = a1[1], *a1 = 0, a1[1] = 0, (uint64_t result = (WTF::StringImpl *)a1[3]) != 0)
    && v10
    && (uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v9), v16))
  {
    uint64_t result = (WTF::StringImpl *)WebCore::SWServer::Connection::didResolveRegistrationPromise(a2, (const WebCore::ServiceWorkerRegistrationKey *)v11);
    if (v16)
    {
      uint64_t result = v13;
      uint64_t v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      if (v12 != -1) {
        return (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unsigned char *))off_1EEA0D600[v12])(v17, v11);
      }
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::MatchRegistration,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, WebCore::SWServer::Connection *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData,WTF::URL>>((uint64_t)v15, a2);
  if (v17)
  {
    uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if ((_BYTE)v6)
    {
      uint64_t v12 = v7;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      long long v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v8 = &unk_1EEA0D648;
      v8[1] = v12;
      uint64_t v9 = v13;
      uint64_t v13 = 0;
      long long v14 = v8;
      void v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v17) {
        __break(1u);
      }
      WebKit::WebSWServerConnection::matchRegistration(a3, (const WebCore::SecurityOriginData *)v15, (const WTF::URL *)&v16, (uint64_t *)&v14);
      uint64_t v10 = (uint64_t)v14;
      long long v14 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::SecurityOriginData,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v6);
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::WhenRegistrationReady,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData,WTF::URL>>((uint64_t)v13, a2);
  if (v14)
  {
    uint64_t v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if ((_BYTE)v4)
    {
      uint64_t v10 = v5;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, a1);
      uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v6 = &unk_1EEA0D670;
      v6[1] = v10;
      uint64_t v7 = v11;
      uint64_t v11 = 0;
      uint64_t v12 = v6;
      void v6[2] = v7;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
      if (!v14) {
        __break(1u);
      }
      WebCore::SWServer::Connection::whenRegistrationReady();
      long long v8 = v12;
      uint64_t v12 = 0;
      if (v8) {
        (*(void (**)(void *))(*v8 + 8))(v8);
      }
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::SecurityOriginData,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v4);
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::GetRegistrations,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData,WTF::URL>>((uint64_t)v15, a2);
  if (v17)
  {
    uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if ((_BYTE)v6)
    {
      uint64_t v12 = v7;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      long long v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v8 = &unk_1EEA0D698;
      v8[1] = v12;
      uint64_t v9 = v13;
      uint64_t v13 = 0;
      char v14 = v8;
      void v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v17) {
        __break(1u);
      }
      WebKit::WebSWServerConnection::getRegistrations(a3, (const WebCore::SecurityOriginData *)v15, (const WTF::URL *)&v16, (uint64_t *)&v14);
      uint64_t v10 = (uint64_t)v14;
      char v14 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::SecurityOriginData,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v6);
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::TerminateWorkerFromClient,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  if (v7)
  {
    uint64_t v8 = result;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v9)
    {
      uint64_t v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v10 = &unk_1EEA0D6C0;
      v10[1] = v12;
      uint64_t v11 = v13;
      uint64_t v13 = 0;
      char v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebSWServerConnection::terminateWorkerFromClient(a3, v8, (uint64_t *)&v14);
      uint64_t result = (uint64_t)v14;
      char v14 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::WhenServiceWorkerIsTerminatedForTesting,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  if (v7)
  {
    uint64_t v8 = result;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v9)
    {
      uint64_t v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v10 = &unk_1EEA0D6E8;
      v10[1] = v12;
      uint64_t v11 = v13;
      uint64_t v13 = 0;
      char v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebSWServerConnection::whenServiceWorkerIsTerminatedForTesting(a3, v8, (uint64_t *)&v14);
      uint64_t result = (uint64_t)v14;
      char v14 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::StoreRegistrationsOnDisk,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v4)
  {
    uint64_t v7 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v8, a1);
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v5 = &unk_1EEA0D710;
    v5[1] = v7;
    uint64_t v6 = v8;
    uint64_t v8 = 0;
    char v9 = v5;
    void v5[2] = v6;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v8);
    WebCore::SWServer::Connection::storeRegistrationsOnDisk();
    uint64_t result = (uint64_t)v9;
    char v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

WTF *IPC::handleMessageAsync<Messages::WebSWServerConnection::SubscribeToPushService,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v7
    && (uint64_t v8 = v6,
        IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a2, &v22), v24))
  {
    uint64_t v18 = v8;
    long long v19 = v22;
    long long v20 = v23;
    char v21 = 1;
    uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (!(_BYTE)v10) {
      goto LABEL_7;
    }
    uint64_t v22 = (WTF *)v9;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v23, a1);
    uint64_t v11 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v11 = &unk_1EEA0D738;
    *((void *)v11 + 1) = v22;
    uint64_t v12 = v23;
    char v23 = 0;
    *((void *)v11 + 2) = v12;
    char v17 = v11;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v23);
    WebKit::WebSWServerConnection::subscribeToPushService(a3, v18, (uint64_t)&v19, (uint64_t *)&v17);
    uint64_t result = v17;
    char v17 = 0;
    if (result) {
      uint64_t result = (WTF *)(*(uint64_t (**)(WTF *))(*(void *)result + 8))(result);
    }
    if (v21)
    {
LABEL_7:
      uint64_t result = v19;
      if (v19)
      {
        long long v19 = 0;
        LODWORD(v20) = 0;
        return (WTF *)WTF::fastFree(result, v10);
      }
    }
  }
  else
  {
    uint64_t v14 = *a2;
    uint64_t v15 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF *)a2[3];
    if (result) {
      BOOL v16 = v15 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16) {
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(void *)result + 16))(result, v14);
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::UnsubscribeFromPushService,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, WebKit::WebSWServerConnection *a3)
{
  uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v7
    && (uint64_t v8 = v6,
        uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2),
        v10))
  {
    uint64_t v11 = v9;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v13)
    {
      uint64_t v19 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v20, a1);
      uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v14 = &unk_1EEA0D760;
      v14[1] = v19;
      uint64_t v15 = v20;
      long long v20 = 0;
      char v21 = v14;
      void v14[2] = v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v20);
      WebKit::WebSWServerConnection::unsubscribeFromPushService(a3, v8, v11, (uint64_t *)&v21);
      uint64_t result = (uint64_t)v21;
      char v21 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  else
  {
    uint64_t v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17)
    {
      uint64_t v18 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v18();
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::GetPushSubscription,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, WebKit::WebSWServerConnection *a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  if (v7)
  {
    uint64_t v8 = result;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v9)
    {
      uint64_t v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      char v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *char v10 = &unk_1EEA0D788;
      v10[1] = v12;
      uint64_t v11 = v13;
      char v13 = 0;
      uint64_t v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebSWServerConnection::getPushSubscription(a3, v8, (uint64_t *)&v14);
      uint64_t result = (uint64_t)v14;
      uint64_t v14 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::GetPushPermissionState,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, WebKit::WebSWServerConnection *a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  if (v7)
  {
    uint64_t v8 = result;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v9)
    {
      uint64_t v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      char v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *char v10 = &unk_1EEA0D7B0;
      v10[1] = v12;
      uint64_t v11 = v13;
      char v13 = 0;
      uint64_t v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebSWServerConnection::getPushPermissionState(a3, v8, (uint64_t *)&v14);
      uint64_t result = (uint64_t)v14;
      uint64_t v14 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::EnableNavigationPreload,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::optional<WebCore::ExceptionData> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  if (v7)
  {
    uint64_t v8 = result;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v9)
    {
      uint64_t v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      char v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *char v10 = &unk_1EEA0D7D8;
      v10[1] = v12;
      uint64_t v11 = v13;
      char v13 = 0;
      uint64_t v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebSWServerConnection::enableNavigationPreload(a3, v8, (uint64_t *)&v14);
      uint64_t result = (uint64_t)v14;
      uint64_t v14 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::DisableNavigationPreload,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::optional<WebCore::ExceptionData> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  if (v7)
  {
    uint64_t v8 = result;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v9)
    {
      uint64_t v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      char v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *char v10 = &unk_1EEA0D800;
      v10[1] = v12;
      uint64_t v11 = v13;
      char v13 = 0;
      uint64_t v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebSWServerConnection::disableNavigationPreload(a3, v8, (uint64_t *)&v14);
      uint64_t result = (uint64_t)v14;
      uint64_t v14 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::WebSWServerConnection::SetNavigationPreloadHeaderValue,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String &&,WTF::CompletionHandler<void ()(std::optional<WebCore::ExceptionData> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>((uint64_t)&v14, a2);
  if (v16)
  {
    uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (!(_BYTE)v8) {
      goto LABEL_6;
    }
    uint64_t v11 = v7;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a1);
    char v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)char v9 = &unk_1EEA0D828;
    *((void *)v9 + 1) = v11;
    char v10 = v12;
    uint64_t v12 = 0;
    char v13 = v9;
    *((void *)v9 + 2) = v10;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
    WebKit::WebSWServerConnection::setNavigationPreloadHeaderValue(a3, v14, (uint64_t)&v15, (uint64_t *)&v13);
    uint64_t result = v13;
    char v13 = 0;
    if (result) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
    if (v16)
    {
LABEL_6:
      uint64_t result = v15;
      uint64_t v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::NavigationPreloadState,WebCore::ExceptionData> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  if (v7)
  {
    uint64_t v8 = result;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v9)
    {
      uint64_t v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      char v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *char v10 = &unk_1EEA0D850;
      v10[1] = v12;
      uint64_t v11 = v13;
      char v13 = 0;
      uint64_t v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebSWServerConnection::getNavigationPreloadState(a3, v8, (uint64_t *)&v14);
      uint64_t result = (uint64_t)v14;
      uint64_t v14 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::BackgroundFetchInformation>,WebCore::ExceptionData> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (!v5) {
    goto LABEL_55;
  }
  uint64_t v6 = v4;
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v53);
  if (!v54) {
    goto LABEL_55;
  }
  unint64_t v8 = a2[1];
  uint64_t v9 = *a2;
  unint64_t v10 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v8 < v10 || v8 - v10 <= 7)
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v33 = a2[3];
    if (v33)
    {
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v33 + 16))(v33, v9, v8);
        uint64_t v32 = *a2;
        uint64_t v31 = a2[1];
      }
      else
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
      }
    }
    goto LABEL_25;
  }
  uint64_t v12 = (unint64_t *)(v9 + v10);
  a2[2] = (uint64_t)(v12 + 1);
  if (!v9)
  {
    uint64_t v31 = v8;
    uint64_t v32 = 0;
LABEL_25:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v34 = a2[3];
    if (v34 && v31) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32);
    }
    goto LABEL_39;
  }
  unint64_t v13 = *v12;
  char v58 = 0;
  long long v59 = 0;
  if (v13 >= 0xC30)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::BackgroundFetchRequest>((uint64_t)&v63, (IPC::Decoder *)a2);
      if (!v72) {
        goto LABEL_38;
      }
      int v35 = HIDWORD(v59);
      if (HIDWORD(v59) == v59)
      {
        WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BackgroundFetchRequest>((uint64_t)&v58, (unint64_t)&v63);
      }
      else
      {
        WebCore::BackgroundFetchRequest::BackgroundFetchRequest((uint64_t)v58 + 336 * HIDWORD(v59), (uint64_t)&v63);
        HIDWORD(v59) = v35 + 1;
      }
      uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::BackgroundFetchRequest,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v63, v36);
      if (!--v13)
      {
        unsigned int v19 = v59;
        unsigned int v20 = HIDWORD(v59);
        uint64_t v18 = v58;
        if (v59 <= HIDWORD(v59)) {
          goto LABEL_19;
        }
        char v37 = v58;
        if (HIDWORD(v59))
        {
          if (HIDWORD(v59) >= 0xC30C31)
          {
            __break(0xC471u);
            goto LABEL_79;
          }
          uint64_t v38 = WTF::fastMalloc((WTF *)(336 * HIDWORD(v59)));
          unsigned int v19 = 336 * v20 / 0x150;
          if ((WTF *)v38 == v18)
          {
            char v37 = v18;
          }
          else
          {
            char v37 = (WTF *)v38;
            WTF::VectorMover<false,WebCore::BackgroundFetchRequest>::move((uint64_t)v18, (uint64_t)v18 + 336 * v20, v38);
          }
        }
        if (v18)
        {
          if (v37 == v18)
          {
            unsigned int v19 = 0;
            char v37 = 0;
            char v58 = 0;
          }
          WTF::fastFree(v18, v7);
        }
        uint64_t v18 = v37;
        goto LABEL_19;
      }
    }
  }
  if (v13)
  {
    uint64_t v14 = (WTF *)WTF::fastMalloc((WTF *)(336 * v13));
    LODWORD(v59) = 336 * (int)v13 / 0x150u;
    char v58 = v14;
    while (1)
    {
      IPC::Decoder::decode<WebCore::BackgroundFetchRequest>((uint64_t)&v63, (IPC::Decoder *)a2);
      if (!v72) {
        break;
      }
      int v16 = HIDWORD(v59);
      if (HIDWORD(v59) == v59)
      {
        WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BackgroundFetchRequest>((uint64_t)&v58, (unint64_t)&v63);
      }
      else
      {
        WebCore::BackgroundFetchRequest::BackgroundFetchRequest((uint64_t)v58 + 336 * HIDWORD(v59), (uint64_t)&v63);
        HIDWORD(v59) = v16 + 1;
      }
      std::__optional_destruct_base<WebCore::BackgroundFetchRequest,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v63, v17);
      if (!--v13)
      {
        uint64_t v18 = v58;
        unsigned int v19 = v59;
        unsigned int v20 = HIDWORD(v59);
        goto LABEL_19;
      }
    }
LABEL_38:
    std::__optional_destruct_base<WebCore::BackgroundFetchRequest,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v63, v15);
    WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v39);
LABEL_39:
    uint64_t v30 = (WTF::StringImpl *)*a2;
    uint64_t v40 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v41 = a2[3];
    if (v41 && v40) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v41 + 16))(v41, v30);
    }
    int v28 = 0;
    LOBYTE(v63) = 0;
    char v71 = 0;
    goto LABEL_41;
  }
  unsigned int v20 = 0;
  unsigned int v19 = 0;
  uint64_t v18 = 0;
LABEL_19:
  char v58 = 0;
  long long v59 = 0;
  uint64_t v55 = v18;
  unint64_t v56 = __PAIR64__(v20, v19);
  char v57 = 1;
  WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v7);
  uint64_t result = IPC::Decoder::decode<WebCore::BackgroundFetchOptions>((IPC::Decoder *)a2, v21, (uint64_t)&v58);
  if (v62)
  {
    if (!v54) {
      goto LABEL_79;
    }
    char v24 = v53;
    int v53 = 0;
    uint64_t v63 = v6;
    char v64 = v24;
    uint64_t v55 = 0;
    uint64_t v65 = v18;
    unint64_t v56 = 0;
    unsigned int v66 = v19;
    unsigned int v67 = v20;
    char v25 = v58;
    char v58 = 0;
    v68[0] = v25;
    uint64_t v26 = v59;
    long long v59 = 0;
    v68[1] = v26;
    uint64_t v27 = v60;
    long long v60 = 0;
    int v28 = 1;
    unsigned int v69 = v27;
    uint64_t v70 = v61;
  }
  else
  {
    int v28 = 0;
    LOBYTE(v63) = 0;
  }
  char v71 = v28;
  std::__optional_destruct_base<WebCore::BackgroundFetchOptions,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v58, v23);
  WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v29);
LABEL_41:
  if (!v54 || (long long v42 = v53, v53 = 0, !v42))
  {
LABEL_45:
    if (v28) {
      goto LABEL_46;
    }
LABEL_55:
    uint64_t v48 = *a2;
    uint64_t v49 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF::StringImpl *)a2[3];
    if (result) {
      BOOL v50 = v49 == 0;
    }
    else {
      BOOL v50 = 1;
    }
    if (!v50) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v48);
    }
    return result;
  }
  if (*(_DWORD *)v42 != 2)
  {
    *(_DWORD *)v42 -= 2;
    goto LABEL_45;
  }
  WTF::StringImpl::destroy(v42, v30);
  if (!v28) {
    goto LABEL_55;
  }
LABEL_46:
  uint64_t v43 = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
  if (!(_BYTE)v44)
  {
LABEL_51:
    long long v47 = v69;
    unsigned int v69 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2) {
        WTF::StringImpl::destroy(v47, v44);
      }
      else {
        *(_DWORD *)v47 -= 2;
      }
    }
    WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v44);
    WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v51);
    uint64_t result = v64;
    char v64 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v52);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  char v58 = v43;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v59, a1);
  char v45 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(void *)char v45 = &unk_1EEA0D878;
  *((void *)v45 + 1) = v58;
  __int16 v46 = v59;
  long long v59 = 0;
  *((void *)v45 + 2) = v46;
  uint64_t v55 = v45;
  uint64_t result = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v59);
  if (!v71)
  {
LABEL_79:
    __break(1u);
    return result;
  }
  WebCore::SWServer::Connection::startBackgroundFetch();
  uint64_t result = v55;
  uint64_t v55 = 0;
  if (result) {
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  if (v71) {
    goto LABEL_51;
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::WebSWServerConnection::BackgroundFetchInformation,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::BackgroundFetchInformation>,WebCore::ExceptionData> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>((uint64_t)&v12, a2);
  if (v14)
  {
    uint64_t v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (!(_BYTE)v6) {
      goto LABEL_6;
    }
    uint64_t v9 = v5;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v10, a1);
    char v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)char v7 = &unk_1EEA0D8A0;
    *((void *)v7 + 1) = v9;
    unint64_t v8 = v10;
    unint64_t v10 = 0;
    uint64_t v11 = v7;
    *((void *)v7 + 2) = v8;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v10);
    WebCore::SWServer::Connection::backgroundFetchInformation();
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
    if (v14)
    {
LABEL_6:
      uint64_t result = v13;
      unint64_t v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::BackgroundFetchIdentifiers,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  if (v5)
  {
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v6)
    {
      uint64_t v9 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v10, a1);
      char v7 = (void *)WTF::fastMalloc((WTF *)0x18);
      *char v7 = &unk_1EEA0D8C8;
      v7[1] = v9;
      unint64_t v8 = v10;
      unint64_t v10 = 0;
      uint64_t v11 = v7;
      uint64_t v7[2] = v8;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v10);
      WebCore::SWServer::Connection::backgroundFetchIdentifiers();
      uint64_t result = (uint64_t)v11;
      uint64_t v11 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::WebSWServerConnection::AbortBackgroundFetch,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>((uint64_t)&v12, a2);
  if (v14)
  {
    uint64_t v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (!(_BYTE)v6) {
      goto LABEL_6;
    }
    uint64_t v9 = v5;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v10, a1);
    char v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)char v7 = &unk_1EEA0D8F0;
    *((void *)v7 + 1) = v9;
    unint64_t v8 = v10;
    unint64_t v10 = 0;
    uint64_t v11 = v7;
    *((void *)v7 + 2) = v8;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v10);
    WebCore::SWServer::Connection::abortBackgroundFetch();
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
    if (v14)
    {
LABEL_6:
      uint64_t result = v13;
      unint64_t v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::MatchBackgroundFetch,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WebCore::RetrieveRecordsOptions &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (!v4) {
    goto LABEL_35;
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v62);
  if (v63)
  {
    IPC::Decoder::decode<WebCore::RetrieveRecordsOptions>((IPC::Decoder *)v2, (uint64_t)&v64);
    char v6 = v87;
    if (v87)
    {
      if (!v63) {
        goto LABEL_34;
      }
      char v7 = v62;
      char v62 = 0;
      long long v36 = v7;
      uint64_t v8 = v64;
      uint64_t v9 = v66;
      uint64_t v64 = 0;
      uint64_t v37 = v8;
      long long v38 = v65[0];
      long long v39 = v65[1];
      LODWORD(v65[0]) &= ~1u;
      uint64_t v66 = 0;
      uint64_t v40 = v9;
      long long v41 = v67;
      long long v42 = v68;
      LODWORD(v67) = v67 & 0xFFFFFFFE;
      uint64_t v10 = v71;
      uint64_t v43 = v69;
      long long v11 = v70;
      long long v70 = 0u;
      long long v44 = v11;
      uint64_t v71 = 0;
      uint64_t v45 = v10;
      uint64_t v12 = v72;
      uint64_t v72 = 0;
      uint64_t v46 = v12;
      uint64_t v13 = v73;
      uint64_t v73 = 0;
      uint64_t v47 = v13;
      uint64_t v14 = v74;
      uint64_t v74 = 0;
      uint64_t v48 = v14;
      uint64_t v15 = v75;
      uint64_t v75 = 0;
      uint64_t v49 = v15;
      char v51 = v77;
      int v50 = v76;
      long long v16 = v78;
      long long v78 = 0u;
      long long v52 = v16;
      char v55 = v81;
      uint64_t v53 = v79;
      uint64_t v54 = v80;
      BOOL v17 = v82;
      uint64_t v79 = 0;
      long long v82 = 0;
      CFTypeRef cf = v17;
      __int16 v57 = v83;
      long long v18 = v84;
      long long v84 = 0u;
      *(_OWORD *)char v58 = v18;
      unsigned int v19 = v85;
      char v85 = 0;
      long long v59 = v19;
      char v6 = 1;
      int v60 = v86;
    }
    char v61 = v6;
    std::__optional_destruct_base<WebCore::RetrieveRecordsOptions,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&v64, v5);
    if (v63)
    {
      char v21 = v62;
      char v62 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v20);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
    }
  }
  else
  {
    char v61 = 0;
  }
  if (!v61) {
    goto LABEL_36;
  }
  while (1)
  {
    uint64_t v22 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v2);
    if (!(_BYTE)v23) {
      break;
    }
    uint64_t v64 = v22;
    uint64_t v2 = (uint64_t *)v65;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v65, a1);
    char v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)char v24 = &unk_1EEA0D918;
    *((void *)v24 + 1) = v64;
    uint64_t v25 = *(void *)&v65[0];
    *(void *)&v65[0] = 0;
    *((void *)v24 + 2) = v25;
    char v62 = v24;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v65);
    if (v61)
    {
      WebCore::SWServer::Connection::matchBackgroundFetch();
      uint64_t v26 = v62;
      char v62 = 0;
      if (v26) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v26 + 8))(v26);
      }
      break;
    }
LABEL_34:
    __break(1u);
LABEL_35:
    char v61 = 0;
LABEL_36:
    uint64_t v33 = *v2;
    uint64_t v34 = v2[1];
    uint64_t *v2 = 0;
    v2[1] = 0;
    uint64_t result = v2[3];
    if (result) {
      BOOL v35 = v34 == 0;
    }
    else {
      BOOL v35 = 1;
    }
    if (!v35)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v33);
      if (v61) {
        continue;
      }
    }
    return result;
  }
  uint64_t v27 = v59;
  long long v59 = 0;
  if (v27) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v27, v23);
  }
  int v28 = v58[1];
  v58[1] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v23);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  long long v29 = v58[0];
  v58[0] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v23);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  CFTypeRef v30 = cf;
  CFTypeRef cf = 0;
  if (v30) {
    CFRelease(v30);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v37);
  uint64_t result = (uint64_t)v36;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      return WTF::StringImpl::destroy(v36, v31);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ResourceResponse,WebCore::ExceptionData> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2)
{
  IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v4)
  {
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v6)
    {
      uint64_t v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      char v7 = (void *)WTF::fastMalloc((WTF *)0x18);
      *char v7 = &unk_1EEA0D940;
      v7[1] = v12;
      uint64_t v8 = v13;
      uint64_t v13 = 0;
      uint64_t v14 = v7;
      uint64_t v7[2] = v8;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebCore::SWServer::Connection::retrieveRecordResponse();
      uint64_t result = (uint64_t)v14;
      uint64_t v14 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  else
  {
    uint64_t v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      long long v11 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v11();
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::AddCookieChangeSubscriptions,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WebCore::ExceptionData> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v14, a2);
  if (v16)
  {
    uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (!(_BYTE)v8) {
      return WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v8);
    }
    uint64_t v11 = v7;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a1);
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v9 = &unk_1EEA0D968;
    v9[1] = v11;
    BOOL v10 = v12;
    uint64_t v12 = 0;
    uint64_t v13 = v9;
    uint64_t v9[2] = v10;
    uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
    if (!v16)
    {
      __break(1u);
      return result;
    }
    WebKit::WebSWServerConnection::addCookieChangeSubscriptions(a3, v14, (uint64_t)v15, (uint64_t *)&v13);
    uint64_t result = (uint64_t)v13;
    uint64_t v13 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    if (v16) {
      return WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v8);
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::RemoveCookieChangeSubscriptions,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WebCore::ExceptionData> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v14, a2);
  if (v16)
  {
    uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (!(_BYTE)v8) {
      return WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v8);
    }
    uint64_t v11 = v7;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a1);
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v9 = &unk_1EEA0D990;
    v9[1] = v11;
    BOOL v10 = v12;
    uint64_t v12 = 0;
    uint64_t v13 = v9;
    uint64_t v9[2] = v10;
    uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
    if (!v16)
    {
      __break(1u);
      return result;
    }
    WebKit::WebSWServerConnection::removeCookieChangeSubscriptions(a3, v14, (uint64_t)v15, (uint64_t *)&v13);
    uint64_t result = (uint64_t)v13;
    uint64_t v13 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    if (v16) {
      return WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v8);
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::CookieChangeSubscriptions,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  if (v7)
  {
    uint64_t v8 = result;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v9)
    {
      uint64_t v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      BOOL v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *BOOL v10 = &unk_1EEA0D9B8;
      v10[1] = v12;
      uint64_t v11 = v13;
      uint64_t v13 = 0;
      uint64_t v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebSWServerConnection::cookieChangeSubscriptions(a3, v8, (uint64_t *)&v14);
      uint64_t result = (uint64_t)v14;
      uint64_t v14 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

atomic_uchar *volatile **IPC::handleMessageAsync<Messages::WebSWServerConnection::GetNotifications,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, WebKit::WebSWServerConnection *a3)
{
  IPC::Decoder::decode<std::tuple<WTF::URL,WTF::String>>(a2, v15);
  if (!v17) {
    return (atomic_uchar *volatile **)std::__optional_destruct_base<WebCore::PasteboardURL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v6);
  }
  uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (!(_BYTE)v6) {
    return (atomic_uchar *volatile **)std::__optional_destruct_base<WebCore::PasteboardURL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v6);
  }
  uint64_t v12 = v7;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EEA0D9E0;
  v8[1] = v12;
  char v9 = v13;
  uint64_t v13 = 0;
  uint64_t v14 = v8;
  void v8[2] = v9;
  uint64_t result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
  if (v17)
  {
    WebKit::WebSWServerConnection::getNotifications(a3, v15, &v16, (uint64_t *)&v14);
    uint64_t v11 = (uint64_t)v14;
    uint64_t v14 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    return (atomic_uchar *volatile **)std::__optional_destruct_base<WebCore::PasteboardURL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v6);
  }
  __break(1u);
  return result;
}

void non-virtual thunk to'WebKit::WebSWServerConnection::didReceiveMessage(WebKit::WebSWServerConnection *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection29ScheduleUnregisterJobInServerEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore30ServiceWorkerJobIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENS9_INSA_39ServiceWorkerRegistrationIdentifierTypeESD_yLSE_0EEENSt3__17variantIJNS9_INSA_27ServiceWorkerIdentifierTypeESD_yLSE_1EEENSA_16ProcessQualifiedINS_4UUIDEEEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D620;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection29ScheduleUnregisterJobInServerEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore30ServiceWorkerJobIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENS9_INSA_39ServiceWorkerRegistrationIdentifierTypeESD_yLSE_0EEENSt3__17variantIJNS9_INSA_27ServiceWorkerIdentifierTypeESD_yLSE_1EEENSA_16ProcessQualifiedINS_4UUIDEEEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D620;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection29ScheduleUnregisterJobInServerEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore30ServiceWorkerJobIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENS9_INSA_39ServiceWorkerRegistrationIdentifierTypeESD_yLSE_0EEENSt3__17variantIJNS9_INSA_27ServiceWorkerIdentifierTypeESD_yLSE_1EEENSA_16ProcessQualifiedINS_4UUIDEEEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EE4callESW_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3575;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData,WTF::URL>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::SecurityOriginData>(a2, v12);
  if (!v14)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 72) = 0;
    goto LABEL_13;
  }
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a2, v10);
  if (v11)
  {
    if (v14)
    {
      *(unsigned char *)a1 = 0;
      *(_DWORD *)(a1 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v12);
      v4.n128_f64[0] = WTF::URL::URL(a1 + 32, (uint64_t *)v10);
      *(unsigned char *)(a1 + 72) = 1;
      if (v11)
      {
        char v6 = v10[0];
        v10[0] = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2) {
            WTF::StringImpl::destroy(v6, v5);
          }
          else {
            *(_DWORD *)v6 -= 2;
          }
        }
      }
      goto LABEL_10;
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 72) = 0;
LABEL_10:
  if (v14 && v13 != -1) {
    ((void (*)(WTF::StringImpl **, unsigned char *, __n128))off_1EEA0D600[v13])(v10, v12, v4);
  }
LABEL_13:
  if (!*(unsigned char *)(a1 + 72))
  {
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8)
    {
      if (v7)
      {
        char v9 = *(void (**)(void))(*(void *)v8 + 16);
        v9();
      }
    }
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection17MatchRegistrationEN6WebKit21WebSWServerConnectionES8_FvRKN7WebCore18SecurityOriginDataERKNS_3URLEONS_17CompletionHandlerIFvONSt3__18optionalINS9_29ServiceWorkerRegistrationDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D648;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection17MatchRegistrationEN6WebKit21WebSWServerConnectionES8_FvRKN7WebCore18SecurityOriginDataERKNS_3URLEONS_17CompletionHandlerIFvONSt3__18optionalINS9_29ServiceWorkerRegistrationDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D648;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection17MatchRegistrationEN6WebKit21WebSWServerConnectionES8_FvRKN7WebCore18SecurityOriginDataERKNS_3URLEONS_17CompletionHandlerIFvONSt3__18optionalINS9_29ServiceWorkerRegistrationDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3572;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerRegistrationData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerRegistrationData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerRegistrationData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerRegistrationData>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 352);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x199424DA4);
    }
    *uint64_t v5 = 1;
    if (*(unsigned char *)(a2 + 352))
    {
      IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationData,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      std::__optional_destruct_base<std::tuple<WebCore::SecurityOriginData,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100](v7, v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x199424DC4);
    }
    *uint64_t v5 = 0;
  }
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::SecurityOriginData,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(unsigned int *)(a1 + 24);
    if (v4 != -1) {
      ((void (*)(char *, uint64_t))off_1EEA0D600[v4])(&v6, a1);
    }
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection21WhenRegistrationReadyEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvRKNS9_18SecurityOriginDataERKNS_3URLEONS_17CompletionHandlerIFvONSt3__18optionalINS9_29ServiceWorkerRegistrationDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D670;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection21WhenRegistrationReadyEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvRKNS9_18SecurityOriginDataERKNS_3URLEONS_17CompletionHandlerIFvONSt3__18optionalINS9_29ServiceWorkerRegistrationDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D670;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection21WhenRegistrationReadyEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvRKNS9_18SecurityOriginDataERKNS_3URLEONS_17CompletionHandlerIFvONSt3__18optionalINS9_29ServiceWorkerRegistrationDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3582;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerRegistrationData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerRegistrationData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection16GetRegistrationsEN6WebKit21WebSWServerConnectionES8_FvRKN7WebCore18SecurityOriginDataERKNS_3URLEONS_17CompletionHandlerIFvRKNS_6VectorINS9_29ServiceWorkerRegistrationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D698;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection16GetRegistrationsEN6WebKit21WebSWServerConnectionES8_FvRKN7WebCore18SecurityOriginDataERKNS_3URLEONS_17CompletionHandlerIFvRKNS_6VectorINS9_29ServiceWorkerRegistrationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D698;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection16GetRegistrationsEN6WebKit21WebSWServerConnectionES8_FvRKN7WebCore18SecurityOriginDataERKNS_3URLEONS_17CompletionHandlerIFvRKNS_6VectorINS9_29ServiceWorkerRegistrationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3570;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v13 = v5;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
  unsigned int v6 = *(_DWORD *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = 352 * v6;
    do
    {
      IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationData,void>::encode(v5, v7);
      v7 += 352;
      v8 -= 352;
    }
    while (v8);
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  int v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection25TerminateWorkerFromClientEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D6C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection25TerminateWorkerFromClientEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D6C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection25TerminateWorkerFromClientEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3580;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection39WhenServiceWorkerIsTerminatedForTestingEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D6E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection39WhenServiceWorkerIsTerminatedForTestingEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D6E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection39WhenServiceWorkerIsTerminatedForTestingEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3583;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection24StoreRegistrationsOnDiskEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D710;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection24StoreRegistrationsOnDiskEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D710;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection24StoreRegistrationsOnDiskEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3578;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection22SubscribeToPushServiceEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_20PushSubscriptionDataENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D738;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection22SubscribeToPushServiceEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_20PushSubscriptionDataENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D738;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection22SubscribeToPushServiceEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_20PushSubscriptionDataENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3579;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26UnsubscribeFromPushServiceEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENS9_INSA_30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLSE_1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D760;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26UnsubscribeFromPushServiceEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENS9_INSA_30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLSE_1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D760;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26UnsubscribeFromPushServiceEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENS9_INSA_30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLSE_1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3581;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection19GetPushSubscriptionEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINSA_20PushSubscriptionDataEEENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D788;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection19GetPushSubscriptionEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINSA_20PushSubscriptionDataEEENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D788;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection19GetPushSubscriptionEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINSA_20PushSubscriptionDataEEENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3569;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection22GetPushPermissionStateEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIhNSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D7B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection22GetPushPermissionStateEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIhNSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D7B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection22GetPushPermissionStateEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIhNSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3568;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection23EnableNavigationPreloadEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D7D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection23EnableNavigationPreloadEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D7D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection23EnableNavigationPreloadEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3565;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ExceptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::ExceptionData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection24DisableNavigationPreloadEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D800;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection24DisableNavigationPreloadEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D800;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection24DisableNavigationPreloadEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3564;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ExceptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::ExceptionData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v5 && (v6 = v4, uint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v12), v13))
  {
    uint64_t v8 = v12;
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + ++*(_DWORD *)(this + 16) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    uint64_t v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (IPC::Decoder *)a2[3];
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      char v11 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (IPC::Decoder *)v11();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection31SetNavigationPreloadHeaderValueEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D828;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection31SetNavigationPreloadHeaderValueEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D828;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection31SetNavigationPreloadHeaderValueEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3576;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ExceptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::ExceptionData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection25GetNavigationPreloadStateEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_22NavigationPreloadStateENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D850;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection25GetNavigationPreloadStateEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_22NavigationPreloadStateENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D850;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

WebCore::ResourceRequestBase *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection25GetNavigationPreloadStateEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_22NavigationPreloadStateENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3566;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v14 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x19942600CLL);
    }
    *uint64_t v6 = 0;
    if (*(_DWORD *)(a2 + 16) == 1)
    {
      IPC::ArgumentCoder<WebCore::Exception,void>::encode(v5, (char *)a2);
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Decoder::decode<WebCore::BackgroundFetchRequest>(v12, v13);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19942602CLL);
  }
  *uint64_t v6 = 1;
  if (*(_DWORD *)(a2 + 16)) {
    goto LABEL_13;
  }
  IPC::Encoder::operator<<<BOOL>(v5, (char *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)(a2 + 8));
LABEL_8:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  uint64_t result = v14;
  char v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (WebCore::ResourceRequestBase *)WTF::fastFree(v10, v11);
  }
  return result;
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<WebCore::BackgroundFetchRequest>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::BackgroundFetchRequest,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 336))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WebCore::ResourceRequestBase *)*((void *)a2 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WebCore::ResourceRequestBase *)v7();
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BackgroundFetchRequest>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t result = WebCore::BackgroundFetchRequest::BackgroundFetchRequest(*(void *)a1 + 336 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WebCore::BackgroundFetchRequest::BackgroundFetchRequest(uint64_t a1, uint64_t a2)
{
  WTF::URL::URL(a1, (uint64_t *)a2);
  WTF::URL::URL(v4 + 40, (uint64_t *)(a2 + 40));
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = v5;
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 96) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 104) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(a1 + 108) = v6;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(void *)(a1 + 112) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 120) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_DWORD *)(a1 + 124) = v7;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v8 = *(void *)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  *(void *)(a1 + 128) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 136) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 1++*(_DWORD *)(this + 40) = 0;
  *(_DWORD *)(a1 + 1++*(_DWORD *)(this + 40) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v8;
  uint64_t v9 = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  *(void *)(a1 + 152) = v9;
  uint64_t v10 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(a1 + 160) = v10;
  uint64_t v11 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  *(void *)(a1 + 168) = v11;
  uint64_t v12 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v12;
  uint64_t v13 = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  *(void *)(a1 + 192) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 211) = *(_DWORD *)(a2 + 211);
  *(_DWORD *)(a1 + 208) = v13;
  uint64_t v14 = *(void *)(a2 + 216);
  *(void *)(a2 + 2++*(_DWORD *)(this + 16) = 0;
  *(void *)(a1 + 2++*(_DWORD *)(this + 16) = v14;
  long long v15 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 2++*(_DWORD *)(this + 40) = v15;
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  uint64_t v16 = *(void *)(a2 + 264);
  *(void *)(a2 + 264) = 0;
  *(void *)(a1 + 264) = v16;
  LODWORD(v++*(_DWORD *)(this + 16) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a2 + 272) = 0;
  *(_DWORD *)(a1 + 272) = v16;
  LODWORD(v++*(_DWORD *)(this + 16) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a2 + 276) = 0;
  *(_DWORD *)(a1 + 276) = v16;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  uint64_t v17 = *(void *)(a2 + 280);
  *(void *)(a2 + 280) = 0;
  *(void *)(a1 + 280) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a2 + 288) = 0;
  *(_DWORD *)(a1 + 288) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a2 + 292) = 0;
  *(_DWORD *)(a1 + 292) = v17;
  uint64_t v18 = *(void *)(a2 + 296);
  *(void *)(a2 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = v18;
  uint64_t v19 = *(void *)(a2 + 304);
  *(void *)(a2 + 304) = 0;
  *(void *)(a1 + 304) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 312);
  *(_DWORD *)(a2 + 312) = 0;
  *(_DWORD *)(a1 + 312) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 316);
  *(_DWORD *)(a2 + 3++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(a1 + 3++*(_DWORD *)(this + 16) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 320);
  *(unsigned char *)(a1 + 324) = *(unsigned char *)(a2 + 324);
  *(_DWORD *)(a1 + 320) = v19;
  return a1;
}

unint64_t WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 336 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xC30C31)
    {
      __break(0xC471u);
      JUMPOUT(0x199426454);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = *(void *)a1 + 336 * *(unsigned int *)(a1 + 12);
    unsigned int v5 = 336 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(336 * a2));
    *(_DWORD *)(a1 + 8) = v5 / 0x150;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::BackgroundFetchRequest>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
}

void WTF::VectorMover<false,WebCore::BackgroundFetchRequest>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 304;
    do
    {
      WebCore::BackgroundFetchRequest::BackgroundFetchRequest(a3, v5 - 304);
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, v6);
      unint64_t v8 = *(WTF::StringImpl **)(v5 - 8);
      *(void *)(v5 - 8) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v5 - 24));
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v5 - 40));
      unint64_t v10 = *(WTF::StringImpl **)(v5 - 88);
      *(void *)(v5 - 88) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      uint64_t v11 = *(const void **)(v5 - 112);
      *(void *)(v5 - 112) = 0;
      if (v11) {
        CFRelease(v11);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(v5 - 304));
      a3 += 336;
      uint64_t v12 = v5 + 32;
      v5 += 336;
    }
    while (v12 != a2);
  }
}

uint64_t std::__optional_destruct_base<WebCore::BackgroundFetchRequest,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 336))
  {
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 304, a2);
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 296);
    *(void *)(a1 + 296) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a1 + 280));
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a1 + 264));
    uint64_t v6 = *(WTF::StringImpl **)(a1 + 216);
    *(void *)(a1 + 2++*(_DWORD *)(this + 16) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    unint64_t v7 = *(const void **)(a1 + 192);
    *(void *)(a1 + 192) = 0;
    if (v7) {
      CFRelease(v7);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)a1);
  }
  return a1;
}

void WTF::VectorDestructor<true,WebCore::BackgroundFetchRequest>::destruct(void *a1, void *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = (uint64_t)a1 + 304;
    do
    {
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
      uint64_t v5 = *(WTF::StringImpl **)(v3 - 8);
      *(void *)(v3 - 8) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, v4);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v3 - 24));
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v3 - 40));
      unint64_t v7 = *(WTF::StringImpl **)(v3 - 88);
      *(void *)(v3 - 88) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v6);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
      unint64_t v8 = *(const void **)(v3 - 112);
      *(void *)(v3 - 112) = 0;
      if (v8) {
        CFRelease(v8);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(v3 - 304));
      unint64_t v9 = (void *)(v3 + 32);
      v3 += 336;
    }
    while (v9 != a2);
  }
}

uint64_t WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::BackgroundFetchRequest>::destruct(*(void **)a1, (void *)(*(void *)a1 + 336 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection20StartBackgroundFetchEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEERKNS_6StringEONS_6VectorINS9_22BackgroundFetchRequestELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS9_22BackgroundFetchOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS9_26BackgroundFetchInformationEEENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJS13_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D878;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection20StartBackgroundFetchEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEERKNS_6StringEONS_6VectorINS9_22BackgroundFetchRequestELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS9_22BackgroundFetchOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS9_26BackgroundFetchInformationEEENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJS13_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D878;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection20StartBackgroundFetchEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEERKNS_6StringEONS_6VectorINS9_22BackgroundFetchRequestELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS9_22BackgroundFetchOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS9_26BackgroundFetchInformationEEENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJS13_EE4callES13_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3577;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::BackgroundFetchInformation>,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::BackgroundFetchInformation>,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 72);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x199426958);
    }
    *uint64_t v5 = 0;
    if (*(_DWORD *)(a2 + 72) == 1)
    {
      return IPC::ArgumentCoder<WebCore::Exception,void>::encode(a1, (char *)(a2 + 8));
    }
    goto LABEL_21;
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x199426978);
  }
  *uint64_t v5 = 1;
  if (*(_DWORD *)(a2 + 72))
  {
LABEL_21:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_22:
    uint64_t v10 = std::__throw_bad_optional_access[abi:sn180100]();
    return (_DWORD *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26BackgroundFetchInformationEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS9_26BackgroundFetchInformationEEENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(v10);
  }
  int v8 = *(unsigned __int8 *)(a2 + 64);
  uint64_t result = (_DWORD *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v8)
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x199426998);
    }
    *(unsigned char *)uint64_t result = 1;
    if (!*(unsigned char *)(a2 + 64)) {
      goto LABEL_22;
    }
    return (_DWORD *)IPC::ArgumentCoder<WebCore::BackgroundFetchInformation,void>::encode(a1, a2 + 8);
  }
  else
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1994269B8);
    }
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26BackgroundFetchInformationEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS9_26BackgroundFetchInformationEEENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D8A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26BackgroundFetchInformationEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS9_26BackgroundFetchInformationEEENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D8A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26BackgroundFetchInformationEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS9_26BackgroundFetchInformationEEENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EE4callESV_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3562;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::BackgroundFetchInformation>,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26BackgroundFetchIdentifiersEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D8C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26BackgroundFetchIdentifiersEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D8C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26BackgroundFetchIdentifiersEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3561;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection20AbortBackgroundFetchEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D8F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection20AbortBackgroundFetchEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D8F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection20AbortBackgroundFetchEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3559;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection20MatchBackgroundFetchEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEERKNS_6StringEONS9_22RetrieveRecordsOptionsEONS_17CompletionHandlerIFvONS_6VectorINS9_32BackgroundFetchRecordInformationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D918;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection20MatchBackgroundFetchEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEERKNS_6StringEONS9_22RetrieveRecordsOptionsEONS_17CompletionHandlerIFvONS_6VectorINS9_32BackgroundFetchRecordInformationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D918;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection20MatchBackgroundFetchEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEERKNS_6StringEONS9_22RetrieveRecordsOptionsEONS_17CompletionHandlerIFvONS_6VectorINS9_32BackgroundFetchRecordInformationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3571;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
  unsigned int v6 = *(_DWORD *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = 304 * v6;
    do
    {
      IPC::ArgumentCoder<WebCore::BackgroundFetchRecordInformation,void>::encode(v5, v7);
      v7 += 304;
      v8 -= 304;
    }
    while (v8);
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection22RetrieveRecordResponseEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_35BackgroundFetchRecordIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_16ResourceResponseENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D940;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection22RetrieveRecordResponseEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_35BackgroundFetchRecordIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_16ResourceResponseENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D940;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection22RetrieveRecordResponseEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_35BackgroundFetchRecordIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_16ResourceResponseENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3574;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v14 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 256);
  unsigned int v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1994270DCLL);
    }
    *unsigned int v6 = 0;
    if (*(_DWORD *)(a2 + 256) == 1)
    {
      IPC::ArgumentCoder<WebCore::Exception,void>::encode(v5, (char *)a2);
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v12, v13);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1994270FCLL);
  }
  *unsigned int v6 = 1;
  if (*(_DWORD *)(a2 + 256)) {
    goto LABEL_13;
  }
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v5, (WebCore::ResourceResponseBase *)a2);
LABEL_8:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if ((_BYTE)v5
    && (uint64_t v6 = v4,
        IPC::Decoder::decode<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a2, v5, (uint64_t)&v14), v16))
  {
    uint64_t v8 = v14;
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v8;
    uint64_t v9 = v15;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = v9;
    uint64_t result = WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v7);
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    uint64_t v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      uint64_t v13 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v13();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection28AddCookieChangeSubscriptionsEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_6VectorINSA_24CookieChangeSubscriptionELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D968;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection28AddCookieChangeSubscriptionsEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_6VectorINSA_24CookieChangeSubscriptionELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D968;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection28AddCookieChangeSubscriptionsEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_6VectorINSA_24CookieChangeSubscriptionELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3560;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ExceptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::ExceptionData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection31RemoveCookieChangeSubscriptionsEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_6VectorINSA_24CookieChangeSubscriptionELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D990;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection31RemoveCookieChangeSubscriptionsEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_6VectorINSA_24CookieChangeSubscriptionELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D990;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection31RemoveCookieChangeSubscriptionsEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_6VectorINSA_24CookieChangeSubscriptionELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3573;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ExceptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::ExceptionData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection25CookieChangeSubscriptionsEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINSA_24CookieChangeSubscriptionELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D9B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection25CookieChangeSubscriptionsEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINSA_24CookieChangeSubscriptionELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D9B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection25CookieChangeSubscriptionsEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINSA_24CookieChangeSubscriptionELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3563;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v16 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (!v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x199427678);
    }
    *uint64_t v6 = 1;
    if (!*(_DWORD *)(a2 + 16))
    {
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
      uint64_t v8 = *(unsigned int *)(a2 + 12);
      if (v8)
      {
        uint64_t v9 = *(uint64_t **)a2;
        uint64_t v10 = &v9[2 * v8];
        do
        {
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, v9);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, v9 + 1);
          v9 += 2;
        }
        while (v9 != v10);
      }
      goto LABEL_10;
    }
LABEL_15:
    uint64_t v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection16GetNotificationsEN6WebKit21WebSWServerConnectionES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorIN7WebCore16NotificationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSK_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(v15);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x199427658);
  }
  *uint64_t v6 = 0;
  if (*(_DWORD *)(a2 + 16) != 1) {
    goto LABEL_15;
  }
  IPC::ArgumentCoder<WebCore::Exception,void>::encode(v5, (char *)a2);
LABEL_10:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  uint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection16GetNotificationsEN6WebKit21WebSWServerConnectionES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorIN7WebCore16NotificationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSK_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0D9E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection16GetNotificationsEN6WebKit21WebSWServerConnectionES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorIN7WebCore16NotificationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSK_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0D9E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection16GetNotificationsEN6WebKit21WebSWServerConnectionES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorIN7WebCore16NotificationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSK_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3567;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::WebSWServerToContextConnection::WebSWServerToContextConnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)WebCore::SWServerToContextConnection::SWServerToContextConnection();
  *uint64_t v6 = &unk_1EEA0DA08;
  v6[13] = &unk_1EEA0DAC8;
  v6[14] = &unk_1EEA0DB18;
  v6[15] = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 56), a2 + 48);
  uint64_t v7 = *(atomic_uint **)(a2 + 56);
  atomic_fetch_add(v7, 1u);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = v7;
  *(unsigned char *)(a1 + 152) = 1;
  *(void *)(a1 + 160) = a3;
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = 1;
  WebCore::SWServer::addContextConnection();
  return a1;
}

void WebKit::WebSWServerToContextConnection::~WebSWServerToContextConnection(WebKit::WebSWServerToContextConnection *this)
{
  uint64_t v2 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v2 - 4);
    uint64_t v4 = (void *)(v2 + 16 * v3);
    if (*(_DWORD *)(v2 - 12))
    {
      uint64_t v5 = (void *)v2;
      if (v3)
      {
        uint64_t v6 = 16 * v3;
        uint64_t v5 = (void *)v2;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          v6 -= 16;
          if (!v6)
          {
            uint64_t v5 = v4;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    uint64_t v5 = (void *)(v2 + 16 * v3);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v3 = 0;
  }
  uint64_t v4 = (void *)(v2 + 16 * v3);
  if (v2)
  {
LABEL_8:
    uint64_t v7 = (void *)(v2 + 16 * *(unsigned int *)(v2 - 4));
    goto LABEL_13;
  }
  uint64_t v7 = 0;
LABEL_13:
  while (v5 != v7)
  {
    uint64_t v8 = v5[1];
    if (v8)
    {
      uint64_t v9 = *(WebKit::ServiceWorkerFetchTask **)(v8 + 8);
      if (v9)
      {
        ++*(_DWORD *)v9;
        WebKit::ServiceWorkerFetchTask::contextClosed(v9);
        WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v9);
      }
    }
    uint64_t v10 = v5 + 2;
    uint64_t v5 = v4;
    if (v10 != v4)
    {
      uint64_t v5 = v10;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        v5 += 2;
        if (v5 == v4)
        {
          uint64_t v5 = v4;
          break;
        }
      }
    }
  }
  uint64_t v11 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v11)
  {
    uint64_t v12 = *(unsigned int *)(v11 - 4);
    uint64_t v13 = (void *)(v11 + 24 * v12);
    if (*(_DWORD *)(v11 - 12))
    {
      uint64_t v14 = (void *)v11;
      if (v12)
      {
        uint64_t v15 = 24 * v12;
        uint64_t v14 = (void *)v11;
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          v14 += 3;
          v15 -= 24;
          if (!v15)
          {
            uint64_t v14 = v13;
            goto LABEL_30;
          }
        }
      }
      goto LABEL_30;
    }
    uint64_t v14 = (void *)(v11 + 24 * v12);
  }
  else
  {
    uint64_t v14 = 0;
    LODWORD(v12) = 0;
  }
  uint64_t v13 = (void *)(v11 + 24 * v12);
  if (v11)
  {
LABEL_30:
    char v16 = (void *)(v11 + 24 * *(unsigned int *)(v11 - 4));
    goto LABEL_35;
  }
  char v16 = 0;
LABEL_35:
  while (v14 != v16)
  {
    uint64_t v17 = v14[1];
    if (v17)
    {
      char v18 = 0;
      uint64_t v19 = v14[2];
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v18, 1u, memory_order_acquire, memory_order_acquire);
      if (v18) {
        MEMORY[0x19972E8D0](v17);
      }
      if (*(void *)(v17 + 24)) {
        ++*(void *)(v17 + 8);
      }
      else {
        uint64_t v19 = 0;
      }
      int v20 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
      if (v20 != 1)
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v17);
        if (!v19) {
          goto LABEL_45;
        }
LABEL_44:
        WebKit::ServiceWorkerDownloadTask::cancel((atomic_uchar *volatile *)v19);
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v19 + 8));
        goto LABEL_45;
      }
      if (v19) {
        goto LABEL_44;
      }
    }
LABEL_45:
    char v21 = v14 + 3;
    uint64_t v14 = v13;
    if (v21 != v13)
    {
      uint64_t v14 = v21;
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        v14 += 3;
        if (v14 == v13)
        {
          uint64_t v14 = v13;
          break;
        }
      }
    }
  }
  uint64_t v22 = (_DWORD *)WebCore::SWServerToContextConnection::server(this);
  if (v22)
  {
    char v24 = v22;
    ++*v22;
    if ((WebKit::WebSWServerToContextConnection *)WebCore::SWServer::contextConnectionForRegistrableDomain() == this) {
      WebCore::SWServer::removeContextConnection();
    }
    WTF::RefCounted<WebCore::SWServer>::deref(v24);
  }
  if (v11) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v11, v23);
  }
  if (v2) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v2, v23);
  }
  uint64_t v25 = *((void *)this + 18);
  if (v25) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v25, v23);
  }
  uint64_t v26 = *((void *)this + 17);
  if (v26) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v26, v23);
  }
  uint64_t v27 = (unsigned int *)*((void *)this + 16);
  *((void *)this + ++*(_DWORD *)(this + 16) = 0;
  if (v27 && atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v27);
    WTF::fastFree((WTF *)v27, v23);
  }
  *((void *)this + 14) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 15, v23);

  MEMORY[0x1F41719D8](this);
}

void non-virtual thunk to'WebKit::WebSWServerToContextConnection::~WebSWServerToContextConnection(WebKit::WebSWServerToContextConnection *this)
{
}

{
  WebKit::WebSWServerToContextConnection::~WebSWServerToContextConnection((WebKit::WebSWServerToContextConnection *)((char *)this - 112));
}

{
  WebKit::WebSWServerToContextConnection::operator delete((WebKit::WebSWServerToContextConnection *)((char *)this - 104));
}

{
  WebKit::WebSWServerToContextConnection::operator delete((WebKit::WebSWServerToContextConnection *)((char *)this - 112));
}

double WebKit::WebSWServerToContextConnection::operator delete(WebKit::WebSWServerToContextConnection *a1)
{
  WebKit::WebSWServerToContextConnection::~WebSWServerToContextConnection(a1);
  if (*((_DWORD *)v1 + 4))
  {
    double result = 0.0;
    *((_OWORD *)v1 + 10) = 0u;
    *((_OWORD *)v1 + 11) = 0u;
    *((_OWORD *)v1 + 8) = 0u;
    *((_OWORD *)v1 + 9) = 0u;
    *((_OWORD *)v1 + 6) = 0u;
    *((_OWORD *)v1 + 7) = 0u;
    *((_OWORD *)v1 + 4) = 0u;
    *((_OWORD *)v1 + 5) = 0u;
    *((_OWORD *)v1 + 2) = 0u;
    *((_OWORD *)v1 + 3) = 0u;
    *(_OWORD *)uint64_t v1 = 0u;
    *((_OWORD *)v1 + 1) = 0u;
  }
  else
  {
    WTF::fastFree(v1, v2);
  }
  return result;
}

uint64_t WebKit::WebSWServerToContextConnection::messageSenderConnection(WebKit::WebSWServerToContextConnection *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 16) + 8);
  if (v1) {
    uint64_t v2 = v1 - 48;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(void *)(v2 + 72);
}

uint64_t non-virtual thunk to'WebKit::WebSWServerToContextConnection::messageSenderConnection(WebKit::WebSWServerToContextConnection *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 3) + 8);
  if (v1) {
    uint64_t v2 = v1 - 48;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(void *)(v2 + 72);
}

uint64_t WebKit::WebSWServerToContextConnection::messageSenderDestinationID(WebKit::WebSWServerToContextConnection *this)
{
  return 0;
}

uint64_t non-virtual thunk to'WebKit::WebSWServerToContextConnection::messageSenderDestinationID(WebKit::WebSWServerToContextConnection *this)
{
  return 0;
}

_DWORD *WebKit::WebSWServerToContextConnection::postMessageToServiceWorkerClient(WebCore::SWServerToContextConnection *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  double result = (_DWORD *)WebCore::SWServerToContextConnection::server(a1);
  if (result)
  {
    uint64_t v10 = result;
    ++*result;
    uint64_t v11 = (_DWORD *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*((void *)result + 3), *(void *)(a2 + 16));
    if (v11)
    {
      uint64_t v12 = v11;
      ++v11[4];
      long long v13 = *(_OWORD *)(a2 + 16);
      v15[0] = *(_OWORD *)a2;
      v15[1] = v13;
      (*(void (**)(_DWORD *, _OWORD *, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 64))(v11, v15, a3, a4, a5);
      int v14 = v12[4];
      if (!v14)
      {
        __break(0xC471u);
        JUMPOUT(0x199427E08);
      }
      float v12[4] = v14 - 1;
    }
    return WTF::RefCounted<WebCore::SWServer>::deref(v10);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::skipWaiting(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (WebCore::SWServerWorker *)WebCore::SWServerWorker::existingWorkerForIdentifier();
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = v4;
  ++*(_DWORD *)v4;
  if (*((_DWORD *)v4 + 61) == 1 || WebCore::SWServerWorker::registration(v4))
  {
    WebCore::SWServerWorker::skipWaiting(v5);
    WTF::RefCounted<WebCore::SWServerWorker>::deref(v5);
LABEL_5:
    uint64_t v17 = a2;
    uint64_t v7 = *(void *)(a1 + 104);
    uint64_t v6 = a1 + 104;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 2759;
    *((void *)v9 + 1) = v8;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    *(void *)long long buf = v9;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, &v17);
    (*(void (**)(uint64_t, uint8_t *, void))(*(void *)v6 + 32))(v6, buf, 0);
    double result = *(IPC::Encoder **)buf;
    *(void *)long long buf = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v10);
      return (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
    return result;
  }
  int v14 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebSWServerToContextConnection::skipWaiting(uint64_t, ServiceWorkerIdentifier)";
    _os_log_fault_impl(&dword_1985F2000, v14, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/ServiceWorker/WebSWServerToContextConnection.cpp 116: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  uint64_t v15 = *(void *)(*(void *)(a1 + 128) + 8);
  if (v15) {
    uint64_t v16 = v15 - 48;
  }
  else {
    uint64_t v16 = 0;
  }
  *(unsigned char *)(*(void *)(v16 + 72) + 98) = 1;
  return (IPC::Encoder *)WTF::RefCounted<WebCore::SWServerWorker>::deref(v5);
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::close(WebKit::WebSWServerToContextConnection *this)
{
  uint64_t v1 = (char *)this + 104;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 13) + 56))((char *)this + 104);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2738;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v1 + 32))(v1, &v8, 0);
  double result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t WebKit::WebSWServerToContextConnection::installServiceWorkerContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5, __int16 a6)
{
  uint64_t v11 = a1 + 104;
  int v12 = *(unsigned __int8 *)(a1 + 176);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 104) + 56))(a1 + 104);
  int v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v14 = 2749;
  *((void *)v14 + 1) = v13;
  *((void *)v14 + 66) = (char *)v14 + 16;
  *((void *)v14 + 67) = 512;
  *((void *)v14 + 68) = 0;
  *((void *)v14 + 70) = 0;
  *((void *)v14 + 69) = 0;
  IPC::Encoder::encodeHeader(v14);
  char v21 = v14;
  IPC::ArgumentCoder<WebCore::ServiceWorkerContextData,void>::encode(v14, a2);
  IPC::ArgumentCoder<WebCore::ServiceWorkerData,void>::encode(v14, a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a4);
  uint64_t v15 = (unsigned char *)IPC::Encoder::grow(v14, 1uLL, 1);
  if (v16)
  {
    *uint64_t v15 = a5;
    IPC::ArgumentCoder<WebCore::ServiceWorkerIsInspectable,void>::encode<IPC::Encoder>(v14, v12 != 0);
    IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v14, a6);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v11 + 32))(v11, &v21, 0);
    uint64_t result = (uint64_t)v21;
    char v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v17);
      return WTF::fastFree(v19, v20);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::updateAppInitiatedValue(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v11 = a2;
  uint64_t v4 = a1 + 104;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 104) + 56))(a1 + 104);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2762;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  int v12 = v6;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v11);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v6, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v4 + 32))(v4, &v12, 0);
  uint64_t result = v12;
  int v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::fireInstallEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v2 = a1 + 104;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 104) + 56))(a1 + 104);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2745;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, &v9);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v2 + 32))(v2, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::fireActivateEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v2 = a1 + 104;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 104) + 56))(a1 + 104);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2742;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, &v9);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v2 + 32))(v2, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::firePushEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v30 = a2;
  uint64_t v9 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v9 + 1;
  if (!v9)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 128) + 8);
    if (v10) {
      uint64_t v11 = v10 - 48;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(void *)(*(void *)(v11 + 80) + 40);
    uint64_t v32 = *(IPC::Encoder **)(v11 + 264);
    v31[0] = (uint64_t *)&v32;
    IPC::Connection::send<Messages::NetworkProcessProxy::StartServiceWorkerBackgroundProcessing>(v12, v31);
  }
  int v13 = *(unsigned __int8 *)(a3 + 16);
  int v14 = *(const void **)a3;
  uint64_t v15 = a1 + 104;
  size_t v16 = *(unsigned int *)(a3 + 12);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v17 = *(atomic_uint **)(a1 + 8);
  if (v17) {
    atomic_fetch_add(v17, 1u);
  }
  uint64_t v18 = *a5;
  *a5 = 0;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 56))(a1 + 104);
  int v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v20 = 2747;
  *((void *)v20 + 1) = v19;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 68) = 0;
  *((void *)v20 + 70) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  uint64_t v32 = v20;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v20, &v30);
  char v21 = (unsigned char *)IPC::Encoder::grow(v20, 1uLL, 1);
  if (v13)
  {
    if (v22)
    {
      unsigned char *v21 = 1;
      IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v20, v14, v16);
      goto LABEL_13;
    }
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x19942879CLL);
  }
  if (!v22) {
    goto LABEL_18;
  }
  unsigned char *v21 = 0;
LABEL_13:
  IPC::ArgumentCoder<std::optional<WebCore::NotificationPayload>,void>::encode<IPC::Encoder,std::optional<WebCore::NotificationPayload> const&>(v20, a4);
  char v23 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  uint64_t *v23 = (uint64_t)&unk_1EEA0DB70;
  v23[1] = (uint64_t)v17;
  v23[2] = v18;
  char v24 = (uint64_t *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v31[0] = v23;
  v31[1] = v24;
  (*(void (**)(uint64_t, IPC::Encoder **, uint64_t **, void))(*(void *)v15 + 40))(v15, &v32, v31, 0);
  uint64_t v26 = v31[0];
  v31[0] = 0;
  if (v26) {
    (*(void (**)(uint64_t *))(*v26 + 8))(v26);
  }
  uint64_t result = v32;
  uint64_t v32 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v25);
    return (IPC::Encoder *)WTF::fastFree(v28, v29);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkProcessProxy::StartServiceWorkerBackgroundProcessing>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 356;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::WebSWServerToContextConnection::webProcessIdentifier(WebKit::WebSWServerToContextConnection *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 16) + 8);
  if (v1) {
    uint64_t v2 = v1 - 48;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(void *)(v2 + 264);
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::fireNotificationEvent(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v25 = a2;
  uint64_t v9 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v9 + 1;
  if (!v9)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 128) + 8);
    if (v10) {
      uint64_t v11 = v10 - 48;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(void *)(*(void *)(v11 + 80) + 40);
    uint64_t v27 = *(IPC::Encoder **)(v11 + 264);
    v26[0] = (uint64_t *)&v27;
    IPC::Connection::send<Messages::NetworkProcessProxy::StartServiceWorkerBackgroundProcessing>(v12, v26);
  }
  uint64_t v13 = a1 + 104;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  int v14 = *(atomic_uint **)(a1 + 8);
  if (v14) {
    atomic_fetch_add(v14, 1u);
  }
  uint64_t v15 = *a5;
  *a5 = 0;
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 56))(a1 + 104);
  uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v17 = 2746;
  *((void *)v17 + 1) = v16;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  uint64_t v27 = v17;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v17, &v25);
  IPC::ArgumentCoder<WebCore::NotificationData,void>::encode(v17, a3);
  IPC::ArgumentCoder<WebKit::ShouldGrandfatherStatistics,void>::encode<IPC::Encoder>(v17, a4);
  uint64_t v18 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v18 = &unk_1EEA0DB98;
  *(void *)(v18 + 8) = v14;
  *(unsigned char *)(v18 + ++*(_DWORD *)(this + 16) = a4;
  *(void *)(v18 + 24) = v15;
  uint64_t v19 = (uint64_t *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v26[0] = (uint64_t *)v18;
  v26[1] = v19;
  (*(void (**)(uint64_t, IPC::Encoder **, uint64_t **, void))(*(void *)v13 + 40))(v13, &v27, v26, 0);
  char v21 = v26[0];
  v26[0] = 0;
  if (v21) {
    (*(void (**)(uint64_t *))(*v21 + 8))(v21);
  }
  uint64_t result = v27;
  uint64_t v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v20);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v23 = a2;
  uint64_t v7 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v7 + 1;
  if (!v7)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 128) + 8);
    if (v8) {
      uint64_t v9 = v8 - 48;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void *)(*(void *)(v9 + 80) + 40);
    uint64_t v25 = *(IPC::Encoder **)(v9 + 264);
    v24[0] = (uint64_t *)&v25;
    IPC::Connection::send<Messages::NetworkProcessProxy::StartServiceWorkerBackgroundProcessing>(v10, v24);
  }
  uint64_t v11 = a1 + 104;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v12 = *(atomic_uint **)(a1 + 8);
  if (v12) {
    atomic_fetch_add(v12, 1u);
  }
  uint64_t v13 = *a4;
  *a4 = 0;
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 56))(a1 + 104);
  uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v15 = 2744;
  *((void *)v15 + 1) = v14;
  *((void *)v15 + 66) = (char *)v15 + 16;
  *((void *)v15 + 67) = 512;
  *((void *)v15 + 68) = 0;
  *((void *)v15 + 70) = 0;
  *((void *)v15 + 69) = 0;
  IPC::Encoder::encodeHeader(v15);
  uint64_t v25 = v15;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v15, &v23);
  IPC::ArgumentCoder<WebCore::BackgroundFetchInformation,void>::encode(v15, a3);
  uint64_t v16 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v16 = (uint64_t)&unk_1EEA0DBE8;
  v16[1] = (uint64_t)v12;
  void v16[2] = v13;
  uint64_t v17 = (uint64_t *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v24[0] = v16;
  v24[1] = v17;
  (*(void (**)(uint64_t, IPC::Encoder **, uint64_t **, void))(*(void *)v11 + 40))(v11, &v25, v24, 0);
  uint64_t v19 = v24[0];
  v24[0] = 0;
  if (v19) {
    (*(void (**)(uint64_t *))(*v19 + 8))(v19);
  }
  uint64_t result = v25;
  uint64_t v25 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v18);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::fireBackgroundFetchClickEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v23 = a2;
  uint64_t v7 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v7 + 1;
  if (!v7)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 128) + 8);
    if (v8) {
      uint64_t v9 = v8 - 48;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void *)(*(void *)(v9 + 80) + 40);
    uint64_t v25 = *(IPC::Encoder **)(v9 + 264);
    v24[0] = (uint64_t *)&v25;
    IPC::Connection::send<Messages::NetworkProcessProxy::StartServiceWorkerBackgroundProcessing>(v10, v24);
  }
  uint64_t v11 = a1 + 104;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v12 = *(atomic_uint **)(a1 + 8);
  if (v12) {
    atomic_fetch_add(v12, 1u);
  }
  uint64_t v13 = *a4;
  *a4 = 0;
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 56))(a1 + 104);
  uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v15 = 2743;
  *((void *)v15 + 1) = v14;
  *((void *)v15 + 66) = (char *)v15 + 16;
  *((void *)v15 + 67) = 512;
  *((void *)v15 + 68) = 0;
  *((void *)v15 + 70) = 0;
  *((void *)v15 + 69) = 0;
  IPC::Encoder::encodeHeader(v15);
  uint64_t v25 = v15;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v15, &v23);
  IPC::ArgumentCoder<WebCore::BackgroundFetchInformation,void>::encode(v15, a3);
  uint64_t v16 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v16 = (uint64_t)&unk_1EEA0DC10;
  v16[1] = (uint64_t)v12;
  void v16[2] = v13;
  uint64_t v17 = (uint64_t *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v24[0] = v16;
  v24[1] = v17;
  (*(void (**)(uint64_t, IPC::Encoder **, uint64_t **, void))(*(void *)v11 + 40))(v11, &v25, v24, 0);
  uint64_t v19 = v24[0];
  v24[0] = 0;
  if (v19) {
    (*(void (**)(uint64_t *))(*v19 + 8))(v19);
  }
  uint64_t result = v25;
  uint64_t v25 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v18);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::terminateWorker(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v2 = a1 + 104;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 104) + 56))(a1 + 104);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2761;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, &v9);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v2 + 32))(v2, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

_DWORD *WebKit::WebSWServerToContextConnection::didFinishActivation(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t result = (_DWORD *)WebCore::SWServerWorker::existingWorkerForIdentifier();
  if (result)
  {
    uint64_t v3 = result;
    ++*result;
    int v4 = *((unsigned __int8 *)result + 160);
    if (v4 != 5)
    {
      if (v4 == 3)
      {
        WebCore::SWServerToContextConnection::didFinishActivation();
      }
      else
      {
        uint64_t v5 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          int v8 = 136446210;
          uint64_t v9 = "void WebKit::WebSWServerToContextConnection::didFinishActivation(WebCore::ServiceWorkerIdentifier)";
          _os_log_fault_impl(&dword_1985F2000, v5, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/ServiceWorker/WebSWServerToContextConnection.cpp 237: Invalid message dispatched %{public}s", (uint8_t *)&v8, 0xCu);
        }
        uint64_t v6 = *(void *)(*(void *)(a1 + 128) + 8);
        if (v6) {
          uint64_t v7 = v6 - 48;
        }
        else {
          uint64_t v7 = 0;
        }
        *(unsigned char *)(*(void *)(v7 + 72) + 98) = 1;
      }
    }
    return WTF::RefCounted<WebCore::SWServerWorker>::deref(v3);
  }
  return result;
}

_DWORD *WebKit::WebSWServerToContextConnection::didFinishInstall(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t result = (_DWORD *)WebCore::SWServerWorker::existingWorkerForIdentifier();
  if (result)
  {
    uint64_t v3 = result;
    ++*result;
    int v4 = *((unsigned __int8 *)result + 160);
    if (v4 != 5)
    {
      if (v4 == 1)
      {
        WebCore::SWServerToContextConnection::didFinishInstall();
      }
      else
      {
        uint64_t v5 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          int v8 = 136446210;
          uint64_t v9 = "void WebKit::WebSWServerToContextConnection::didFinishInstall(const std::optional<WebCore::ServiceWorkerJ"
               "obDataIdentifier> &, WebCore::ServiceWorkerIdentifier, BOOL)";
          _os_log_fault_impl(&dword_1985F2000, v5, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/ServiceWorker/WebSWServerToContextConnection.cpp 251: Invalid message dispatched %{public}s", (uint8_t *)&v8, 0xCu);
        }
        uint64_t v6 = *(void *)(*(void *)(a1 + 128) + 8);
        if (v6) {
          uint64_t v7 = v6 - 48;
        }
        else {
          uint64_t v7 = 0;
        }
        *(unsigned char *)(*(void *)(v7 + 72) + 98) = 1;
      }
    }
    return WTF::RefCounted<WebCore::SWServerWorker>::deref(v3);
  }
  return result;
}

uint64_t WebKit::WebSWServerToContextConnection::didSaveScriptsToDisk(uint64_t a1, uint64_t a2, atomic_uint **this, uint64_t a4)
{
  uint64_t v47 = a2;
  if (WebCore::ScriptBuffer::containsSingleFileMappedSegment((WebCore::ScriptBuffer *)this))
  {
    uint64_t v6 = *this;
    if (*this) {
      atomic_fetch_add(v6, 1u);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v45 = 0;
  uint64_t v46 = (uint64_t)v6;
  uint64_t v7 = WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::begin(a4);
  uint64_t v44 = *(void *)a4 + 48 * *(unsigned int *)(a4 + 8);
  if ((WTF **)v44 != v7)
  {
    uint64_t v9 = v7;
    uint64_t v10 = v8;
    do
    {
      if (!WebCore::ScriptBuffer::containsSingleFileMappedSegment((WebCore::ScriptBuffer *)(v9 + 5))) {
        goto LABEL_34;
      }
      uint64_t v11 = (uint64_t)v45;
      if (v45
        || (WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand((uint64_t *)&v45, 0), (uint64_t v11 = (uint64_t)v45) != 0))
      {
        int v12 = *(_DWORD *)(v11 - 8);
      }
      else
      {
        int v12 = 0;
      }
      unsigned int v13 = *((_DWORD *)*v9 + 4);
      if (v13 >= 0x100) {
        unsigned int v14 = v13 >> 8;
      }
      else {
        unsigned int v14 = WTF::StringImpl::hashSlowCase(*v9);
      }
      unsigned int v15 = v14 & v12;
      uint64_t v16 = v11 + 48 * (v14 & v12);
      if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v16))
      {
LABEL_21:
        WTF::String::operator=((uint64_t *)v16, v9);
        long long v21 = *(_OWORD *)(v9 + 1);
        *(_OWORD *)(v16 + 24) = *(_OWORD *)(v9 + 3);
        *(_OWORD *)(v16 + 8) = v21;
        uint64_t v22 = (atomic_uint *)v9[5];
        if (v22) {
          atomic_fetch_add(v22, 1u);
        }
        uint64_t v23 = *(unsigned int **)(v16 + 40);
        *(void *)(v16 + ++*(_DWORD *)(this + 40) = v22;
        if (v23) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v23, v8);
        }
        if (v45) {
          int v24 = *((_DWORD *)v45 - 3) + 1;
        }
        else {
          int v24 = 1;
        }
        *((_DWORD *)v45 - 3) = v24;
        if (v45) {
          int v25 = *((_DWORD *)v45 - 3);
        }
        else {
          int v25 = 0;
        }
        uint64_t v26 = (*((_DWORD *)v45 - 4) + v25);
        unint64_t v27 = *((unsigned int *)v45 - 1);
        if (v27 > 0x400)
        {
          if (v27 > 2 * v26) {
            goto LABEL_34;
          }
        }
        else if (3 * v27 > 4 * v26)
        {
          goto LABEL_34;
        }
        WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand((uint64_t *)&v45, v16);
        goto LABEL_34;
      }
      uint64_t v18 = 0;
      int v19 = 1;
      while (1)
      {
        int v20 = (WTF::URL *)v16;
        if (*(void *)v16 != -1)
        {
          int v20 = v18;
          if (WTF::equal(*(WTF **)v16, *v9, v17)) {
            break;
          }
        }
        unsigned int v15 = (v15 + v19) & v12;
        uint64_t v16 = v11 + 48 * v15;
        ++v19;
        uint64_t v18 = v20;
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v16))
        {
          if (v20)
          {
            *(void *)int v20 = 0;
            WTF::URL::invalidate(v20);
            *((void *)v20 + 5) = 0;
            --*((_DWORD *)v45 - 4);
            uint64_t v16 = (uint64_t)v20;
          }
          goto LABEL_21;
        }
      }
LABEL_34:
      while (1)
      {
        v9 += 6;
        if (v9 == v10) {
          break;
        }
        if (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v9)) {
          goto LABEL_38;
        }
      }
      uint64_t v9 = v10;
LABEL_38:
      ;
    }
    while (v9 != (WTF **)v44);
    uint64_t v6 = (atomic_uint *)v46;
  }
  if (v6) {
    goto LABEL_44;
  }
  uint64_t result = (uint64_t)v45;
  if (!v45) {
    return result;
  }
  if (*((_DWORD *)v45 - 3))
  {
LABEL_44:
    uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 104) + 56))(a1 + 104);
    long long v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)long long v29 = 2741;
    *((void *)v29 + 1) = v28;
    *((void *)v29 + 66) = (char *)v29 + 16;
    *((void *)v29 + 67) = 512;
    *((void *)v29 + 68) = 0;
    *((void *)v29 + 70) = 0;
    *((void *)v29 + 69) = 0;
    IPC::Encoder::encodeHeader(v29);
    uint64_t v48 = v29;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v29, &v47);
    IPC::ArgumentCoder<WebCore::ScriptBuffer,void>::encode(v29, (WebCore::ScriptBuffer *)&v46);
    if (v45) {
      int v30 = *((_DWORD *)v45 - 3);
    }
    else {
      int v30 = 0;
    }
    uint64_t v32 = (_DWORD *)IPC::Encoder::grow(v29, 4uLL, 4);
    if (v33 <= 3)
    {
      uint64_t result = 831;
      __break(0xC471u);
      return result;
    }
    _DWORD *v32 = v30;
    uint64_t v34 = v45;
    if (v45)
    {
      uint64_t v35 = *((unsigned int *)v45 - 1);
      long long v36 = &v45[6 * v35];
      if (*((_DWORD *)v45 - 3))
      {
        if (v35)
        {
          uint64_t v37 = 48 * v35;
          while ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v34) & 1) != 0
               || *v34 == (WTF *)-1)
          {
            v34 += 6;
            v37 -= 48;
            if (!v37)
            {
              uint64_t v34 = v36;
              break;
            }
          }
          long long v38 = (uint64_t *)v34;
          uint64_t v34 = v45;
          if (!v45)
          {
LABEL_65:
            while (v38 != (uint64_t *)v34)
            {
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v29, v38);
              IPC::ArgumentCoder<WebCore::ScriptBuffer,void>::encode(v29, (WebCore::ScriptBuffer *)(v38 + 5));
              long long v39 = v38 + 6;
              long long v38 = (uint64_t *)v36;
              if (v39 != (uint64_t *)v36)
              {
                long long v38 = v39;
                while ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v38) & 1) != 0
                     || *v38 == -1)
                {
                  v38 += 6;
                  if (v38 == (uint64_t *)v36)
                  {
                    long long v38 = (uint64_t *)v36;
                    break;
                  }
                }
              }
            }
            (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(a1 + 104) + 32))(a1 + 104, &v48, 0);
            uint64_t v40 = v48;
            uint64_t v48 = 0;
            if (v40)
            {
              IPC::Encoder::~Encoder(v40, v8);
              WTF::fastFree(v41, v42);
            }
            uint64_t result = (uint64_t)v45;
            if (!v45) {
              goto LABEL_77;
            }
            goto LABEL_76;
          }
        }
        else
        {
          long long v38 = (uint64_t *)v45;
        }
LABEL_64:
        v34 += 6 * *((unsigned int *)v34 - 1);
        goto LABEL_65;
      }
      long long v38 = (uint64_t *)&v45[6 * v35];
    }
    else
    {
      long long v38 = 0;
      LODWORD(v35) = 0;
    }
    long long v36 = &v45[6 * v35];
    if (!v45) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
LABEL_76:
  WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable(result, v8);
LABEL_77:
  uint64_t result = v46;
  uint64_t v46 = 0;
  if (result) {
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v8);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::terminateDueToUnresponsiveness(WebKit::WebSWServerToContextConnection *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 16) + 8);
  if (v1) {
    uint64_t v2 = v1 - 48;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void *)(*(void *)(v2 + 80) + 40);
  uint64_t v9 = *(void *)(v2 + 264);
  int v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v4 = 357;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, &v9);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

_DWORD *WebKit::WebSWServerToContextConnection::openWindow(WebCore::SWServerToContextConnection *a1, uint64_t a2, uint64_t *a3, WTF **a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (_DWORD *)WebCore::SWServerToContextConnection::server(a1);
  if (v7)
  {
    int v8 = v7;
    ++*v7;
    WebCore::SWServer::workerByID();
    if (v37)
    {
      uint64_t v9 = *a4;
      *a4 = 0;
      v39[0] = v9;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v8 + 2, (uint64_t)v8);
      uint64_t v10 = (atomic_uint *)*((void *)v8 + 1);
      if (v10) {
        atomic_fetch_add(v10, 1u);
      }
      v39[1] = (WTF *)v10;
      uint64_t v11 = WebCore::SWServerWorker::origin(v37);
      v40[0] = 0;
      int v41 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v40, v11);
      v42[0] = 0;
      int v43 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v42, v11 + 32);
      uint64_t v12 = *(void *)(*((void *)a1 + 16) + 8);
      if (v12) {
        uint64_t v13 = v12 - 48;
      }
      else {
        uint64_t v13 = 0;
      }
      unsigned int v14 = *(os_unfair_lock_s **)(*(void *)(v13 + 80) + 40);
      uint64_t v36 = *(void *)(v13 + 88);
      uint64_t v15 = WebCore::SWServerWorker::origin(v37);
      long long v16 = *(_OWORD *)v39;
      *(_OWORD *)long long v39 = 0u;
      *(_OWORD *)uint64_t v44 = v16;
      v45[0] = 0;
      int v46 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v45, (uint64_t)v40);
      v47[0] = 0;
      int v48 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v47, (uint64_t)v42);
      uint64_t v17 = WTF::fastMalloc((WTF *)0x58);
      *(void *)uint64_t v17 = &unk_1EEA0DC38;
      *(WTF **)(v17 + 8) = v44[0];
      uint64_t v18 = v44[1];
      *(_OWORD *)uint64_t v44 = 0u;
      *(void *)(v17 + ++*(_DWORD *)(this + 16) = v18;
      *(unsigned char *)(v17 + 24) = 0;
      *(_DWORD *)(v17 + 48) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v17 + 24, (uint64_t)v45);
      *(unsigned char *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 80) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v17 + 56, (uint64_t)v47);
      if (v48 != -1) {
        ((void (*)(IPC::Encoder **, unsigned char *))off_1EEA0DB50[v48])(&v38, v47);
      }
      int v48 = -1;
      if (v46 != -1) {
        ((void (*)(IPC::Encoder **, unsigned char *))off_1EEA0DB50[v46])(&v38, v45);
      }
      uint64_t v20 = v15 + 32;
      int v46 = -1;
      long long v21 = (unsigned int *)v44[1];
      v44[1] = 0;
      if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, v19);
      }
      uint64_t v22 = v44[0];
      v44[0] = 0;
      if (v22) {
        (*(void (**)(WTF *))(*(void *)v22 + 8))(v22);
      }
      uint64_t v23 = (WTF *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      int v24 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)int v24 = 340;
      *((void *)v24 + 1) = 0;
      *((void *)v24 + 66) = (char *)v24 + 16;
      *((void *)v24 + 67) = 512;
      *((void *)v24 + 68) = 0;
      *((void *)v24 + 70) = 0;
      *((void *)v24 + 69) = 0;
      IPC::Encoder::encodeHeader(v24);
      long long v38 = v24;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v24, &v36);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v24, a3);
      IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v24, v20);
      v44[0] = (WTF *)v17;
      v44[1] = v23;
      IPC::Connection::sendMessageWithAsyncReply(v14, &v38, (uint64_t *)v44, 0, 0);
      uint64_t v26 = v44[0];
      v44[0] = 0;
      if (v26) {
        (*(void (**)(WTF *))(*(void *)v26 + 8))(v26);
      }
      unint64_t v27 = v38;
      long long v38 = 0;
      if (v27)
      {
        IPC::Encoder::~Encoder(v27, v25);
        WTF::fastFree(v33, v34);
      }
      if (v43 != -1) {
        ((void (*)(WTF **, unsigned char *))off_1EEA0DB50[v43])(v44, v42);
      }
      int v43 = -1;
      if (v41 != -1) {
        ((void (*)(WTF **, unsigned char *))off_1EEA0DB50[v41])(v44, v40);
      }
      int v41 = -1;
      uint64_t v28 = (unsigned int *)v39[1];
      v39[1] = 0;
      if (v28 && atomic_fetch_add((atomic_uint *volatile)v28, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, v25);
      }
      long long v29 = v39[0];
      v39[0] = 0;
      if (v29) {
        (*(void (**)(WTF *))(*(void *)v29 + 8))(v29);
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v45[0] = 33;
      int v49 = 1;
      int v30 = *a4;
      *a4 = 0;
      (*(void (**)(WTF *, WTF **))(*(void *)v30 + 16))(v30, v44);
      (*(void (**)(WTF *))(*(void *)v30 + 8))(v30);
      if (v49 != -1) {
        ((void (*)(WTF **, unsigned char *))off_1EEA0DB40[v49])(v39, v45);
      }
    }
    uint64_t v31 = v37;
    uint64_t v37 = 0;
    if (v31) {
      WTF::RefCounted<WebCore::SWServerWorker>::deref(v31);
    }
    return WTF::RefCounted<WebCore::SWServer>::deref(v8);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v45[0] = 33;
    int v49 = 1;
    uint64_t v35 = *a4;
    *a4 = 0;
    (*(void (**)(WTF *, WTF **))(*(void *)v35 + 16))(v35, v44);
    uint64_t result = (_DWORD *)(*(uint64_t (**)(WTF *))(*(void *)v35 + 8))(v35);
    if (v49 != -1) {
      return (_DWORD *)((uint64_t (*)(WTF **, unsigned char *))off_1EEA0DB40[v49])(v39, v45);
    }
  }
  return result;
}

_DWORD *WebKit::WebSWServerToContextConnection::reportConsoleMessage(WebCore::SWServerToContextConnection *a1, uint64_t a2, char a3, char a4, uint64_t *a5, uint64_t a6)
{
  uint64_t result = (_DWORD *)WebCore::SWServerToContextConnection::server(a1);
  if (result)
  {
    uint64_t v12 = result;
    ++*result;
    WebCore::SWServer::workerByID();
    if (v25)
    {
      uint64_t v13 = *(void *)(*((void *)a1 + 16) + 8);
      if (v13) {
        uint64_t v14 = v13 - 48;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = *(void *)(*(void *)(v14 + 80) + 40);
      uint64_t v24 = *(void *)(v14 + 88);
      long long v16 = (uint64_t *)((char *)v25 + 120);
      uint64_t v17 = WebCore::SWServerWorker::origin(v25) + 32;
      uint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v18 = 344;
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 66) = (char *)v18 + 16;
      *((void *)v18 + 67) = 512;
      *((void *)v18 + 68) = 0;
      *((void *)v18 + 70) = 0;
      *((void *)v18 + 69) = 0;
      IPC::Encoder::encodeHeader(v18);
      uint64_t v26 = v18;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v18, &v24);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v18, v16);
      IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v18, v17);
      IPC::ArgumentCoder<JSC::MessageSource,void>::encode<IPC::Encoder>(v18, a3);
      IPC::ArgumentCoder<JSC::MessageSource,void>::encode<IPC::Encoder>(v18, a4);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v18, a5);
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v18, a6);
      IPC::Connection::sendMessageImpl(v15, (uint64_t *)&v26, 0, 0);
      uint64_t v20 = v26;
      uint64_t v26 = 0;
      if (v20)
      {
        IPC::Encoder::~Encoder(v20, v19);
        WTF::fastFree(v22, v23);
      }
      long long v21 = v25;
      int v25 = 0;
      if (v21) {
        WTF::RefCounted<WebCore::SWServerWorker>::deref(v21);
      }
    }
    return WTF::RefCounted<WebCore::SWServer>::deref(v12);
  }
  return result;
}

uint64_t WebKit::WebSWServerToContextConnection::matchAllCompleted(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 104;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 104) + 56))(a1 + 104);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2750;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  int v8 = (void *)IPC::Encoder::grow(v7, 8uLL, 8);
  if (v9 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    void *v8 = a2;
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v7, *(unsigned int *)(a3 + 12));
    uint64_t v10 = *(unsigned int *)(a3 + 12);
    if (v10)
    {
      uint64_t v11 = *(void *)a3;
      uint64_t v12 = 192 * v10;
      do
      {
        IPC::ArgumentCoder<WebCore::ServiceWorkerClientData,void>::encode(v7, v11);
        v11 += 192;
        v12 -= 192;
      }
      while (v12);
    }
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v17, 0);
    uint64_t result = (uint64_t)v17;
    uint64_t v17 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
      return WTF::fastFree(v15, v16);
    }
  }
  return result;
}

uint64_t WebKit::WebSWServerToContextConnection::connectionIsNoLongerNeeded(WebKit::WebSWServerToContextConnection *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 16) + 8);
  if (v1) {
    return WebKit::NetworkConnectionToWebProcess::serviceWorkerServerToContextConnectionNoLongerNeeded((WebKit::NetworkConnectionToWebProcess *)(v1 - 48));
  }
  else {
    return WebKit::NetworkConnectionToWebProcess::serviceWorkerServerToContextConnectionNoLongerNeeded(0);
  }
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::setThrottleState(WebKit::WebSWServerToContextConnection *this, char a2)
{
  *((unsigned char *)this + 152) = a2;
  char v9 = a2;
  uint64_t v2 = (char *)this + 104;
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 13) + 56))((char *)this + 104);
  int v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v4 = 2757;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v4, &v9);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v2 + 32))(v2, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void WebKit::WebSWServerToContextConnection::didReceiveFetchTaskMessage(WebKit::WebSWServerToContextConnection *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(*((void *)a3 + 8) - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v10 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v13 = 136446210;
      *(void *)&v13[4] = "void WebKit::WebSWServerToContextConnection::didReceiveFetchTaskMessage(IPC::Connection &, IPC::Decoder &)";
      _os_log_fault_impl(&dword_1985F2000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/ServiceWorker/WebSWServerToContextConnection.cpp 343: Invalid message dispatched %{public}s", v13, 0xCu);
    }
    uint64_t v11 = *(void *)(*((void *)this + 16) + 8);
    if (v11) {
      uint64_t v12 = v11 - 48;
    }
    else {
      uint64_t v12 = 0;
    }
    *(unsigned char *)(*(void *)(v12 + 72) + 98) = 1;
  }
  else
  {
    *(void *)uint64_t v13 = *((void *)a3 + 8);
    uint64_t v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 17, v13);
    uint64_t v7 = *((void *)this + 17);
    if (v7) {
      v7 += 16 * *(unsigned int *)(v7 - 4);
    }
    if (v7 != v6)
    {
      uint64_t v8 = *(void *)(v6 + 8);
      if (v8) {
        char v9 = *(WebKit::ServiceWorkerFetchTask **)(v8 + 8);
      }
      else {
        char v9 = 0;
      }
      WebKit::ServiceWorkerFetchTask::didReceiveMessage(v9, a2, a3);
    }
  }
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakPtr<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakPtr<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::ServiceWorkerFetchTask&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  long long v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = *(unsigned int *)(v8 - 4);
        }
        char v29 = 0;
        uint64_t v30 = v8 + 16 * v24;
        goto LABEL_34;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      long long v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      long long v16 = v18;
    }
  }
  *long long v16 = v11;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  long long v21 = *(atomic_uint **)(a3 + 8);
  if (v21) {
    atomic_fetch_add(v21, 1u);
  }
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v21;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
  }
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v25 = *v6;
  if (*v6) {
    int v26 = *(_DWORD *)(v25 - 12);
  }
  else {
    int v26 = 0;
  }
  uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
  unint64_t v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_27:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
      long long v16 = result;
      uint64_t v25 = *v6;
      if (*v6) {
        unint64_t v28 = *(unsigned int *)(v25 - 4);
      }
      else {
        unint64_t v28 = 0;
      }
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_27;
  }
  uint64_t v30 = v25 + 16 * v28;
  char v29 = 1;
LABEL_34:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v30;
  *(unsigned char *)(a4 + ++*(_DWORD *)(this + 16) = v29;
  return result;
}

uint64_t *WebKit::WebSWServerToContextConnection::unregisterFetch(WebKit::WebSWServerToContextConnection *this, WebKit::ServiceWorkerFetchTask *a2)
{
  uint64_t v3 = (uint64_t *)((char *)this + 136);
  uint64_t v7 = *((void *)a2 + 5);
  uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 17, &v7);
  uint64_t v5 = *((void *)this + 17);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (v6 != result) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, result);
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ThreadSafeWeakPtr<WebKit::ServiceWorkerDownloadTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::ServiceWorkerDownloadTask>>,WTF::HashTableTraits>::add<WebKit::ServiceWorkerDownloadTask&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  unint64_t v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  unsigned int v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~(v14 << 27)));
  long long v16 = (uint64_t *)(v8 + 24 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          unsigned int v23 = 0;
        }
        else {
          unsigned int v23 = *(_DWORD *)(v8 - 4);
        }
        char v28 = 0;
        uint64_t v29 = v8 + 24 * v23;
        goto LABEL_33;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      long long v16 = (uint64_t *)(v8 + 24 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      _OWORD v18[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      long long v16 = v18;
    }
  }
  *long long v16 = v11;
  uint64_t result = *(uint64_t **)(a3 + 8);
  if (result) {
    uint64_t result = (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::weakRef((atomic_uchar *)result);
  }
  uint64_t v20 = (atomic_uchar *)v16[1];
  v16[1] = (uint64_t)result;
  if (v20) {
    uint64_t result = (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v20, a2);
  }
  void v16[2] = a3;
  uint64_t v21 = *v6;
  if (*v6) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v24 = *v6;
  if (*v6) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_26:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
      long long v16 = result;
      uint64_t v24 = *v6;
      if (*v6) {
        LODWORD(v27) = *(_DWORD *)(v24 - 4);
      }
      else {
        LODWORD(v27) = 0;
      }
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_26;
  }
  uint64_t v29 = v24 + 24 * v27;
  char v28 = 1;
LABEL_33:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v29;
  *(unsigned char *)(a4 + ++*(_DWORD *)(this + 16) = v28;
  return result;
}

uint64_t *WebKit::WebSWServerToContextConnection::unregisterDownload(WebKit::WebSWServerToContextConnection *this, WebKit::ServiceWorkerDownloadTask *a2)
{
  uint64_t v3 = (uint64_t *)((char *)this + 144);
  uint64_t v7 = *((void *)a2 + 75);
  uint64_t result = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)this + 18, &v7);
  uint64_t v5 = *((void *)this + 18);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v5 + 24 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (v6 != result) {
    return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, result);
  }
  return result;
}

_DWORD *WebKit::WebSWServerToContextConnection::focus(WebCore::SWServerToContextConnection *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = WebCore::SWServerToContextConnection::server(a1);
  uint64_t v6 = (_DWORD *)v5;
  if (v5)
  {
    ++*(_DWORD *)v5;
    uint64_t v7 = (_DWORD *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(v5 + 24), *(void *)(a2 + 16));
    if (v7)
    {
      uint64_t v8 = v7;
      ++v7[4];
      long long v9 = *(_OWORD *)(a2 + 16);
      v14[0] = *(_OWORD *)a2;
      v14[1] = v9;
      (*(void (**)(_DWORD *, _OWORD *, uint64_t *))(*(void *)v7 + 72))(v7, v14, a3);
      int v10 = v8[4];
      if (!v10)
      {
        __break(0xC471u);
        JUMPOUT(0x19942A7E8);
      }
      v8[4] = v10 - 1;
      return WTF::RefCounted<WebCore::SWServer>::deref(v6);
    }
  }
  v15[0] = 0;
  v15[192] = 0;
  uint64_t v12 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v12 + 16))(v12, v15);
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  uint64_t result = (_DWORD *)std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v13);
  if (v6) {
    return WTF::RefCounted<WebCore::SWServer>::deref(v6);
  }
  return result;
}

_DWORD *WebKit::WebSWServerToContextConnection::navigate(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  long long v9 = (WebCore::SWServerWorker *)WebCore::SWServerWorker::existingWorkerForIdentifier();
  if (v9)
  {
    int v10 = v9;
    ++*(_DWORD *)v9;
    long long v11 = *((_OWORD *)a2 + 1);
    long long v60 = *(_OWORD *)a2;
    long long v61 = v11;
    if (WebCore::SWServerWorker::isClientActiveServiceWorker())
    {
      WebCore::SWServerWorker::findClientByIdentifier();
      if (v59 && v56[128] && v58)
      {
        long long v45 = v57;
        uint64_t v12 = *(void *)(*(void *)(a1 + 128) + 8);
        if (v12) {
          uint64_t v13 = v12 - 48;
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v44 = *(os_unfair_lock_s **)(*(void *)(v13 + 80) + 40);
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
        unint64_t v14 = *(atomic_uint **)(a1 + 8);
        if (v14) {
          atomic_fetch_add(v14, 1u);
        }
        uint64_t v47 = (WTF *)v14;
        unsigned int v15 = *(WTF::StringImpl **)a4;
        if (*(void *)a4) {
          *(_DWORD *)v15 += 2;
        }
        int v48 = v15;
        long long v16 = *(_OWORD *)(a4 + 24);
        long long v49 = *(_OWORD *)(a4 + 8);
        long long v50 = v16;
        uint64_t v17 = WebCore::SWServerWorker::origin(v10);
        v51[0] = 0;
        int v52 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v51, v17);
        v53[0] = 0;
        int v54 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v53, v17 + 32);
        uint64_t v18 = *a5;
        *a5 = 0;
        uint64_t v20 = v47;
        int v19 = v48;
        uint64_t v55 = v18;
        uint64_t v47 = 0;
        char v62 = v20;
        if (v48) {
          *(_DWORD *)v48 += 2;
        }
        char v63 = v19;
        long long v64 = v49;
        long long v65 = v50;
        v66[0] = 0;
        int v67 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v66, (uint64_t)v51);
        v68[0] = 0;
        int v69 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v68, (uint64_t)v53);
        uint64_t v21 = v55;
        uint64_t v55 = 0;
        uint64_t v70 = v21;
        uint64_t v22 = WTF::fastMalloc((WTF *)0x80);
        uint64_t v23 = v22;
        *(void *)uint64_t v22 = &unk_1EEA0DC60;
        uint64_t v24 = v62;
        char v62 = 0;
        *(void *)(v22 + 8) = v24;
        int v25 = v63;
        if (v63) {
          *(_DWORD *)v63 += 2;
        }
        *(void *)(v22 + ++*(_DWORD *)(this + 16) = v25;
        long long v26 = v64;
        *(_OWORD *)(v22 + ++*(_DWORD *)(this + 40) = v65;
        *(_OWORD *)(v22 + 24) = v26;
        *(unsigned char *)(v22 + 56) = 0;
        *(_DWORD *)(v22 + 80) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v22 + 56, (uint64_t)v66);
        *(unsigned char *)(v23 + 88) = 0;
        *(_DWORD *)(v23 + 112) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v23 + 88, (uint64_t)v68);
        *(void *)(v23 + 120) = v70;
        uint64_t v70 = 0;
        if (v69 != -1) {
          ((void (*)(IPC::Encoder **, unsigned char *))off_1EEA0DB50[v69])(&v46, v68);
        }
        int v69 = -1;
        if (v67 != -1) {
          ((void (*)(IPC::Encoder **, unsigned char *))off_1EEA0DB50[v67])(&v46, v66);
        }
        int v67 = -1;
        char v28 = v63;
        char v63 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2) {
            WTF::StringImpl::destroy(v28, v27);
          }
          else {
            *(_DWORD *)v28 -= 2;
          }
        }
        uint64_t v32 = (unsigned int *)v62;
        char v62 = 0;
        if (v32 && atomic_fetch_add((atomic_uint *volatile)v32, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v32);
          WTF::fastFree((WTF *)v32, v27);
        }
        unint64_t v33 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        uint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v34 = 337;
        *((void *)v34 + 1) = 0;
        *((void *)v34 + 66) = (char *)v34 + 16;
        *((void *)v34 + 67) = 512;
        *((void *)v34 + 68) = 0;
        *((void *)v34 + 70) = 0;
        *((void *)v34 + 69) = 0;
        IPC::Encoder::encodeHeader(v34);
        int v46 = v34;
        IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v34, (uint64_t *)&v45);
        IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(v34, a2);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v34, (uint64_t *)a4);
        char v62 = (WTF *)v23;
        char v63 = v33;
        IPC::Connection::sendMessageWithAsyncReply(v44, &v46, (uint64_t *)&v62, 0, 0);
        uint64_t v35 = v62;
        char v62 = 0;
        if (v35) {
          (*(void (**)(WTF *))(*(void *)v35 + 8))(v35);
        }
        uint64_t v36 = v46;
        int v46 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v31);
          WTF::fastFree(v41, v42);
        }
        uint64_t v37 = v55;
        uint64_t v55 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
        }
        if (v54 != -1) {
          ((void (*)(WTF **, unsigned char *))off_1EEA0DB50[v54])(&v62, v53);
        }
        int v54 = -1;
        if (v52 != -1) {
          ((void (*)(WTF **, unsigned char *))off_1EEA0DB50[v52])(&v62, v51);
        }
        int v52 = -1;
        long long v38 = v48;
        int v48 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2) {
            WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v31);
          }
          else {
            *(_DWORD *)v38 -= 2;
          }
        }
        long long v39 = (unsigned int *)v47;
        uint64_t v47 = 0;
        if (v39)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v39, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v39);
            WTF::fastFree((WTF *)v39, v31);
          }
        }
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        LOBYTE(v64) = 33;
        int v71 = 1;
        uint64_t v30 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t, WTF **))(*(void *)v30 + 16))(v30, &v62);
        (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
        if (v71 != -1) {
          ((void (*)(WTF **, long long *))off_1EEA0DB40[v71])(&v47, &v64);
        }
      }
      std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v56, v31);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v64) = 33;
      int v71 = 1;
      uint64_t v29 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, WTF **))(*(void *)v29 + 16))(v29, &v62);
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
      if (v71 != -1) {
        ((void (*)(unsigned char *, long long *))off_1EEA0DB40[v71])(v56, &v64);
      }
    }
    return WTF::RefCounted<WebCore::SWServerWorker>::deref(v10);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v64) = 33;
    int v71 = 1;
    uint64_t v43 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF **))(*(void *)v43 + 16))(v43, &v62);
    uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v43 + 8))(v43);
    if (v71 != -1) {
      return (_DWORD *)((uint64_t (*)(unsigned char *, long long *))off_1EEA0DB40[v71])(v56, &v64);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::setInspectable(IPC::Encoder *result, int a2)
{
  if ((((*((unsigned char *)result + 176) == 0) ^ a2) & 1) == 0)
  {
    char v2 = a2;
    int v4 = (char *)result + 104;
    uint64_t v3 = *((void *)result + 13);
    *((unsigned char *)result + 176) = a2;
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(v3 + 56))((uint64_t)result + 104);
    uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v6 = 2754;
    *((void *)v6 + 1) = v5;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    int v10 = v6;
    IPC::ArgumentCoder<WebCore::ServiceWorkerIsInspectable,void>::encode<IPC::Encoder>(v6, v2);
    (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v4 + 32))(v4, &v10, 0);
    uint64_t result = v10;
    int v10 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v7);
      return (IPC::Encoder *)WTF::fastFree(v8, v9);
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::ServiceWorkerIsInspectable,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::optional<WebCore::NotificationPayload>,void>::encode<IPC::Encoder,std::optional<WebCore::NotificationPayload> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 136);
  unint64_t result = (WTF::StringImpl *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19942B0C8);
    }
    *(unsigned char *)unint64_t result = 1;
    if (*(unsigned char *)(a2 + 136))
    {
      return IPC::ArgumentCoder<WebCore::NotificationPayload,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (WTF::StringImpl *)WTF::Detail::CallableWrapper<std::optional<WebCore::NotificationPayload> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FirePushEvent,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>(WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>::~CallableWrapper(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19942B0E8);
    }
    *(unsigned char *)unint64_t result = 0;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<std::optional<WebCore::NotificationPayload> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FirePushEvent,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>(WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EEA0DB70;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::optional<WebCore::NotificationPayload> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FirePushEvent,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>(WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA0DB70;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<std::optional<WebCore::NotificationPayload> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FirePushEvent,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>(WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>::call(uint64_t a1, void *a2)
{
  char v2 = (void *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<BOOL,std::optional<WebCore::NotificationPayload>>>(a2, v16);
    if (v18)
    {
      int v4 = v16[0];
      if (*v2)
      {
        uint64_t v5 = *(void *)(*v2 + 8);
        if (v5)
        {
          int v6 = *(_DWORD *)(v5 + 16) + 1;
          *(_DWORD *)(v5 + ++*(_DWORD *)(this + 16) = v6;
          uint64_t v7 = *(void *)(v5 + 168) - 1;
          *(void *)(v5 + 168) = v7;
          if (!v7)
          {
            uint64_t v8 = *(void *)(*(void *)(v5 + 128) + 8);
            if (v8) {
              uint64_t v9 = v8 - 48;
            }
            else {
              uint64_t v9 = 0;
            }
            uint64_t v10 = *(void *)(*(void *)(v9 + 80) + 40);
            uint64_t v19 = *(void *)(v9 + 264);
            uint64_t v20 = &v19;
            IPC::Connection::send<Messages::NetworkProcessProxy::EndServiceWorkerBackgroundProcessing>(v10, &v20);
            int v6 = *(_DWORD *)(v5 + 16);
          }
          if (!v6)
          {
            uint64_t result = 286;
            __break(0xC471u);
            return result;
          }
          *(_DWORD *)(v5 + ++*(_DWORD *)(this + 16) = v6 - 1;
        }
      }
      BOOL v11 = v4 != 0;
      uint64_t v12 = *(void *)(a1 + 16);
      *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
      (*(void (**)(uint64_t, BOOL, unsigned char *))(*(void *)v12 + 16))(v12, v11, v17);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
      if (v18) {
        return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v14);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebSWContextManagerConnection::FirePushEvent,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>(v2);
    }
  }
  else
  {
    unsigned int v15 = (void *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebSWContextManagerConnection::FirePushEvent,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>(v15);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWContextManagerConnection::FirePushEvent,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>(void *a1)
{
  v11[0] = 0;
  v11[136] = 0;
  if (!*a1) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)(*a1 + 8);
  if (!v2) {
    goto LABEL_10;
  }
  int v3 = *(_DWORD *)(v2 + 16) + 1;
  *(_DWORD *)(v2 + ++*(_DWORD *)(this + 16) = v3;
  uint64_t v4 = *(void *)(v2 + 168) - 1;
  *(void *)(v2 + 168) = v4;
  if (!v4)
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 128) + 8);
    if (v5) {
      uint64_t v6 = v5 - 48;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void *)(*(void *)(v6 + 80) + 40);
    uint64_t v12 = *(void *)(v6 + 264);
    uint64_t v13 = &v12;
    IPC::Connection::send<Messages::NetworkProcessProxy::EndServiceWorkerBackgroundProcessing>(v7, &v13);
    int v3 = *(_DWORD *)(v2 + 16);
  }
  if (v3)
  {
    *(_DWORD *)(v2 + ++*(_DWORD *)(this + 16) = v3 - 1;
LABEL_10:
    uint64_t v8 = a1[1];
    a1[1] = 0;
    (*(void (**)(uint64_t, void, unsigned char *))(*(void *)v8 + 16))(v8, 0, v11);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v9);
  }
  uint64_t result = 286;
  __break(0xC471u);
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkProcessProxy::EndServiceWorkerBackgroundProcessing>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 328;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FireNotificationEvent,WebKit::WebSWServerToContextConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebSWServerToContextConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EEA0DB98;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FireNotificationEvent,WebKit::WebSWServerToContextConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebSWServerToContextConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA0DB98;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FireNotificationEvent,WebKit::WebSWServerToContextConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebSWServerToContextConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, void *a2)
{
  unint64_t v2 = (unint64_t)a2;
  if (a2)
  {
    if (*a2)
    {
      unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
      if (v4 > 0xFFu)
      {
        unint64_t v2 = v4 != 0;
        goto LABEL_7;
      }
      uint64_t v5 = *(void *)v2;
      uint64_t v6 = *(void *)(v2 + 8);
      *(void *)unint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      uint64_t v7 = *(void *)(v2 + 24);
      if (v7 && v6) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
      }
    }
    unint64_t v2 = 0;
  }
LABEL_7:
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9)
    {
      ++*(_DWORD *)(v9 + 16);
      uint64_t v10 = *(void *)(v9 + 168) - 1;
      *(void *)(v9 + 168) = v10;
      if (!v10)
      {
        uint64_t v11 = *(void *)(*(void *)(v9 + 128) + 8);
        if (v11) {
          uint64_t v12 = v11 - 48;
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v13 = *(void *)(*(void *)(v12 + 80) + 40);
        uint64_t v30 = *(void *)(v12 + 264);
        uint64_t v31 = (WTF::StringImpl *)&v30;
        IPC::Connection::send<Messages::NetworkProcessProxy::EndServiceWorkerBackgroundProcessing>(v13, (uint64_t **)&v31);
      }
      uint64_t v14 = *(void *)(*(void *)(v9 + 128) + 8);
      if (v14) {
        uint64_t v15 = v14 - 48;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(void *)(v15 + 80);
      uint64_t v31 = *(WTF::StringImpl **)(v15 + 88);
      uint64_t v17 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v16 + 224), &v31);
      uint64_t v18 = v17;
      if (v17 && (++*(_DWORD *)(v17 + 16), v2) && (uint64_t v19 = *(void *)(v17 + 72)) != 0 && !*(unsigned char *)(a1 + 16))
      {
        uint64_t v24 = *(WTF::StringImpl **)(v9 + 40);
        if (v24) {
          *(_DWORD *)v24 += 2;
        }
        uint64_t v31 = v24;
        uint64_t v25 = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = 0;
        uint64_t v26 = WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v26 = &unk_1EEA0DBC0;
        *(void *)(v26 + 8) = v25;
        *(unsigned char *)(v26 + ++*(_DWORD *)(this + 16) = v2;
        uint64_t v30 = v26;
        WebKit::WebResourceLoadStatisticsStore::setMostRecentWebPushInteractionTime(v19, (uint64_t)&v31, &v30);
        if (v30) {
          (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
        }
        uint64_t result = v31;
        uint64_t v31 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      else
      {
        uint64_t v20 = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = 0;
        (*(void (**)(uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v2);
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 8))(v20);
        if (!v18)
        {
LABEL_24:
          int v23 = *(_DWORD *)(v9 + 16);
          if (!v23)
          {
            __break(0xC471u);
            JUMPOUT(0x19942B9F0);
          }
          *(_DWORD *)(v9 + ++*(_DWORD *)(this + 16) = v23 - 1;
          return result;
        }
      }
      int v22 = *(_DWORD *)(v18 + 16);
      if (!v22)
      {
        __break(0xC471u);
        JUMPOUT(0x19942B9D0);
      }
      *(_DWORD *)(v18 + ++*(_DWORD *)(this + 16) = v22 - 1;
      goto LABEL_24;
    }
  }
  uint64_t v28 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, unint64_t))(*(void *)v28 + 16))(v28, v2);
  uint64_t v29 = *(uint64_t (**)(uint64_t))(*(void *)v28 + 8);

  return (WTF::StringImpl *)v29(v28);
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWServerToContextConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA0DBC0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerToContextConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA0DBC0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerToContextConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FireBackgroundFetchEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EEA0DBE8;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned __int16 v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FireBackgroundFetchEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA0DBE8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned __int16 v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FireBackgroundFetchEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, void *a2)
{
  unint64_t v2 = (unint64_t)a2;
  if (a2)
  {
    if (*a2)
    {
      unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
      if (v4 > 0xFFu)
      {
        unint64_t v2 = v4 != 0;
        goto LABEL_7;
      }
      uint64_t v5 = *(void *)v2;
      uint64_t v6 = *(void *)(v2 + 8);
      *(void *)unint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      uint64_t v7 = *(void *)(v2 + 24);
      if (v7 && v6) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
      }
    }
    unint64_t v2 = 0;
  }
LABEL_7:
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8 && (uint64_t v9 = *(void *)(v8 + 8)) != 0)
  {
    ++*(_DWORD *)(v9 + 16);
    uint64_t v10 = *(void *)(v9 + 168) - 1;
    *(void *)(v9 + 168) = v10;
    if (!v10)
    {
      uint64_t v11 = *(void *)(*(void *)(v9 + 128) + 8);
      if (v11) {
        uint64_t v12 = v11 - 48;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(void *)(*(void *)(v12 + 80) + 40);
      uint64_t v19 = *(void *)(v12 + 264);
      uint64_t v20 = &v19;
      IPC::Connection::send<Messages::NetworkProcessProxy::EndServiceWorkerBackgroundProcessing>(v13, &v20);
    }
    uint64_t v14 = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    (*(void (**)(uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v2);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
    int v16 = *(_DWORD *)(v9 + 16);
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x19942BEB0);
    }
    *(_DWORD *)(v9 + ++*(_DWORD *)(this + 16) = v16 - 1;
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    (*(void (**)(uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v2);
    uint64_t v18 = *(uint64_t (**)(uint64_t))(*(void *)v17 + 8);
    return v18(v17);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FireBackgroundFetchClickEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebSWServerToContextConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EEA0DC10;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned __int16 v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FireBackgroundFetchClickEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebSWServerToContextConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA0DC10;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned __int16 v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FireBackgroundFetchClickEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebSWServerToContextConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, void *a2)
{
  unint64_t v2 = (unint64_t)a2;
  if (a2)
  {
    if (*a2)
    {
      unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
      if (v4 > 0xFFu)
      {
        unint64_t v2 = v4 != 0;
        goto LABEL_7;
      }
      uint64_t v5 = *(void *)v2;
      uint64_t v6 = *(void *)(v2 + 8);
      *(void *)unint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      uint64_t v7 = *(void *)(v2 + 24);
      if (v7 && v6) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
      }
    }
    unint64_t v2 = 0;
  }
LABEL_7:
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8 && (uint64_t v9 = *(void *)(v8 + 8)) != 0)
  {
    ++*(_DWORD *)(v9 + 16);
    uint64_t v10 = *(void *)(v9 + 168) - 1;
    *(void *)(v9 + 168) = v10;
    if (!v10)
    {
      uint64_t v11 = *(void *)(*(void *)(v9 + 128) + 8);
      if (v11) {
        uint64_t v12 = v11 - 48;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(void *)(*(void *)(v12 + 80) + 40);
      uint64_t v19 = *(void *)(v12 + 264);
      uint64_t v20 = &v19;
      IPC::Connection::send<Messages::NetworkProcessProxy::EndServiceWorkerBackgroundProcessing>(v13, &v20);
    }
    uint64_t v14 = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    (*(void (**)(uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v2);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
    int v16 = *(_DWORD *)(v9 + 16);
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x19942C1FCLL);
    }
    *(_DWORD *)(v9 + ++*(_DWORD *)(this + 16) = v16 - 1;
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    (*(void (**)(uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v2);
    uint64_t v18 = *(uint64_t (**)(uint64_t))(*(void *)v17 + 8);
    return v18(v17);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::OpenWindowFromServiceWorker,WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>(WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EEA0DC38;
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1EEA0DB50[v3])(&v8, a1 + 56);
  }
  *(_DWORD *)(a1 + 80) = -1;
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1EEA0DB50[v4])(&v9, a1 + 24);
  }
  *(_DWORD *)(a1 + 48) = -1;
  uint64_t v5 = *(unsigned int **)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::OpenWindowFromServiceWorker,WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>(WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA0DC38;
  uint64_t v3 = *((unsigned int *)this + 20);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1EEA0DB50[v3])(&v8, (char *)this + 56);
  }
  *((_DWORD *)this + 20) = -1;
  uint64_t v4 = *((unsigned int *)this + 12);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1EEA0DB50[v4])(&v9, (char *)this + 24);
  }
  *((_DWORD *)this + 12) = -1;
  uint64_t v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::OpenWindowFromServiceWorker,WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>(WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>::call(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*(void *)a2)
  {
LABEL_6:
    long long v11 = 0uLL;
    uint64_t v4 = &v11;
    return WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0::operator()(v2, (uint64_t)v4);
  }
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, &v11);
  if (!v12)
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v7 = *((void *)a2 + 3);
    if (v7 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
    }
    goto LABEL_6;
  }
  long long v9 = v11;
  char v10 = 1;
  uint64_t v4 = &v9;
  return WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0::operator()(v2, (uint64_t)v4);
}

_DWORD *WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a2 + 8))
  {
    v15[0] = 0;
    char v16 = 0;
    unsigned int v17 = 0;
    uint64_t v8 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v8 + 16))(v8, v14);
    uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    uint64_t v9 = v17;
    if (v17 == -1) {
      return result;
    }
    return (_DWORD *)((uint64_t (*)(long long *, unsigned char *))off_1EEA0DB40[v9])(v12, v15);
  }
  uint64_t v3 = a1[1];
  if (!v3 || (uint64_t v4 = *(_DWORD **)(v3 + 8)) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15[0] = 33;
    unsigned int v17 = 1;
    uint64_t v10 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v10 + 16))(v10, v14);
    uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
    uint64_t v9 = v17;
    if (v17 == -1) {
      return result;
    }
    return (_DWORD *)((uint64_t (*)(long long *, unsigned char *))off_1EEA0DB40[v9])(v12, v15);
  }
  ++*v4;
  WebCore::SWServer::topLevelServiceWorkerClientFromPageIdentifier();
  v15[0] = 0;
  char v16 = 0;
  if (v13)
  {
    std::construct_at[abi:sn180100]<WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData*>((uint64_t)v15, v12);
    char v16 = 1;
  }
  unsigned int v17 = 0;
  uint64_t v5 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v5 + 16))(v5, v14);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  if (v17 != -1) {
    ((void (*)(char *, unsigned char *))off_1EEA0DB40[v17])(&v11, v15);
  }
  unsigned int v17 = -1;
  std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12, v6);
  return WTF::RefCounted<WebCore::SWServer>::deref(v4);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::NavigateServiceWorkerClient,WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>(WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EEA0DC60;
  uint64_t v3 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 112);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1EEA0DB50[v4])(&v9, a1 + 88);
  }
  *(_DWORD *)(a1 + 112) = -1;
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5 != -1) {
    ((void (*)(char *, uint64_t))off_1EEA0DB50[v5])(&v10, a1 + 56);
  }
  *(_DWORD *)(a1 + 80) = -1;
  uint64_t v6 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::NavigateServiceWorkerClient,WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>(WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA0DC60;
  uint64_t v3 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((unsigned int *)this + 28);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1EEA0DB50[v4])(&v9, (char *)this + 88);
  }
  *((_DWORD *)this + 28) = -1;
  uint64_t v5 = *((unsigned int *)this + 20);
  if (v5 != -1) {
    ((void (*)(char *, char *))off_1EEA0DB50[v5])(&v10, (char *)this + 56);
  }
  *((_DWORD *)this + 20) = -1;
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, a2);
  }
  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::NavigateServiceWorkerClient,WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>(WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = a1 + 8;
  if (!a2 || !*(void *)a2)
  {
LABEL_8:
    LOBYTE(v17) = 0;
    LOBYTE(v18) = 0;
    uint64_t v7 = &v17;
    uint64_t v8 = v2;
    uint64_t v5 = 0;
    char v6 = 0;
    return (void *)WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0::operator()<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::PageIdentifierType,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v8, v5, v6, (uint64_t)v7);
  }
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, &v14);
  if (!v16
    || (uint64_t result = IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a2, (uint64_t)&v17), !v19))
  {
    uint64_t v9 = *(void *)a2;
    uint64_t v10 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v11 = *((void *)a2 + 3);
    if (v11)
    {
      if (v10) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
      }
    }
    goto LABEL_8;
  }
  if (v16)
  {
    uint64_t v5 = v14;
    char v6 = v15;
    long long v12 = v17;
    uint64_t v13 = v18;
    uint64_t v7 = &v12;
    uint64_t v8 = v2;
    return (void *)WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0::operator()<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::PageIdentifierType,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v8, v5, v6, (uint64_t)v7);
  }
  __break(1u);
  return result;
}

uint64_t WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0::operator()<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::PageIdentifierType,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!*(void *)a1)
  {
    uint64_t v5 = 0;
    goto LABEL_16;
  }
  uint64_t v5 = *(WebCore::SWServerToContextConnection **)(*(void *)a1 + 8);
  if (!v5)
  {
LABEL_16:
    char v14 = 1;
    goto LABEL_20;
  }
  ++*((_DWORD *)v5 + 4);
  if (WebCore::SWServerToContextConnection::server(v5))
  {
    if (a3 && *(unsigned char *)(a4 + 16))
    {
      LOBYTE(v23[0]) = 0;
      char v24 = 0;
      WebCore::SWServerToContextConnection::server(v5);
      *(_OWORD *)&v22[7] = *(_OWORD *)a4;
      v22[23] = *(unsigned char *)(a4 + 16);
      uint64_t v9 = *(WTF::StringImpl **)(a1 + 8);
      if (v9) {
        *(_DWORD *)v9 += 2;
      }
      long long v10 = *(_OWORD *)(a1 + 32);
      long long v25 = *(_OWORD *)(a1 + 16);
      v26[0] = v10;
      uint64_t v11 = WTF::fastMalloc((WTF *)0x60);
      *(void *)uint64_t v11 = &unk_1EEA0DC88;
      *(void *)(v11 + 8) = a2;
      *(unsigned char *)(v11 + ++*(_DWORD *)(this + 16) = a3;
      *(_OWORD *)(v11 + 17) = *(_OWORD *)v22;
      *(void *)(v11 + 33) = *(void *)&v22[16];
      if (v9) {
        *(_DWORD *)v9 += 2;
      }
      *(void *)(v11 + 48) = v9;
      long long v12 = v26[0];
      *(_OWORD *)(v11 + 56) = v25;
      *(_OWORD *)(v11 + 72) = v12;
      *(void *)(v11 + 88) = v23;
      uint64_t v21 = v11;
      WebCore::SWServer::forEachClientForOrigin();
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v13);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      LOBYTE(v26[0]) = 0;
      char v27 = 0;
      if (v24)
      {
        std::construct_at[abi:sn180100]<WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData*>((uint64_t)v26, v23);
        char v27 = 1;
      }
      int v28 = 0;
      uint64_t v18 = *(void *)(a1 + 112);
      *(void *)(a1 + 112) = 0;
      (*(void (**)(uint64_t, long long *))(*(void *)v18 + 16))(v18, &v25);
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      if (v28 != -1) {
        ((void (*)(unsigned char *, _OWORD *))off_1EEA0DB40[v28])(v22, v26);
      }
      uint64_t result = std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v23, v19);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v26[0]) = 33;
      int v28 = 1;
      uint64_t v15 = *(void *)(a1 + 112);
      *(void *)(a1 + 112) = 0;
      (*(void (**)(uint64_t, long long *))(*(void *)v15 + 16))(v15, &v25);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 8))(v15);
      if (v28 != -1) {
        uint64_t result = ((uint64_t (*)(long long *, _OWORD *))off_1EEA0DB40[v28])(v23, v26);
      }
    }
LABEL_30:
    int v20 = *((_DWORD *)v5 + 4);
    if (!v20)
    {
      __break(0xC471u);
      JUMPOUT(0x19942CE78);
    }
    *((_DWORD *)v5 + 4) = v20 - 1;
    return result;
  }
  char v14 = 0;
LABEL_20:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v26[0]) = 33;
  int v28 = 1;
  uint64_t v17 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)v17 + 16))(v17, &v25);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
  if (v28 != -1) {
    uint64_t result = ((uint64_t (*)(long long *, _OWORD *))off_1EEA0DB40[v28])(v23, v26);
  }
  if ((v14 & 1) == 0) {
    goto LABEL_30;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit30WebSWServerToContextConnection8navigateEN7WebCore16ProcessQualifiedINS_4UUIDEEENS_23ObjectIdentifierGenericINS4_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS4_23ServiceWorkerClientDataEEENS4_13ExceptionDataEEEEEEEN3__0clINSM_INS8_INS4_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLSC_0EEEEENSM_INS5_INS8_INS4_19FrameIdentifierTypeESZ_yLSC_1EEEEEEEEEDaT_T0_EUlRS17_E_vJRSN_EED1Ev(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA0DC88;
  uint64_t v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit30WebSWServerToContextConnection8navigateEN7WebCore16ProcessQualifiedINS_4UUIDEEENS_23ObjectIdentifierGenericINS4_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS4_23ServiceWorkerClientDataEEENS4_13ExceptionDataEEEEEEEN3__0clINSM_INS8_INS4_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLSC_0EEEEENSM_INS5_INS8_INS4_19FrameIdentifierTypeESZ_yLSC_1EEEEEEEEEDaT_T0_EUlRS17_E_vJRSN_EED0Ev(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA0DC88;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit30WebSWServerToContextConnection8navigateEN7WebCore16ProcessQualifiedINS_4UUIDEEENS_23ObjectIdentifierGenericINS4_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS4_23ServiceWorkerClientDataEEENS4_13ExceptionDataEEEEEEEN3__0clINSM_INS8_INS4_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLSC_0EEEEENSM_INS5_INS8_INS4_19FrameIdentifierTypeESZ_yLSC_1EEEEEEEEEDaT_T0_EUlRS17_E_vJRSN_EE4callES1B_(unsigned int *result, uint64_t a2, const URL *a3)
{
  if (!*(unsigned char *)(*((void *)result + 11) + 192) && *(unsigned char *)(a2 + 128))
  {
    uint64_t v4 = result;
    if (!*((unsigned char *)result + 16)) {
      goto LABEL_20;
    }
    uint64_t v5 = (_OWORD *)(a2 + 120);
    if (*(void *)(a2 + 120) != *((void *)result + 1) || !*(unsigned char *)(a2 + 152)) {
      return result;
    }
    if (!*((unsigned char *)result + 40))
    {
LABEL_20:
      __break(1u);
      return result;
    }
    if (*(void *)(a2 + 136) == *((void *)result + 3) && *(void *)(a2 + 144) == *((void *)result + 4))
    {
      char v6 = (_DWORD **)(a2 + 40);
      uint64_t result = (unsigned int *)WTF::equalIgnoringFragmentIdentifier((WTF *)(a2 + 40), (const URL *)(result + 12), a3);
      if (result)
      {
        uint64_t v7 = *((void *)v4 + 11);
        int v8 = *(unsigned __int8 *)(v7 + 192);
        __int16 v9 = *(_WORD *)(a2 + 32);
        long long v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
        *(_OWORD *)(v7 + ++*(_DWORD *)(this + 16) = v10;
        *(_WORD *)(v7 + 32) = v9;
        if (v8)
        {
          WTF::String::operator=((uint64_t *)(v7 + 40), (WTF::StringImpl **)(a2 + 40));
          long long v11 = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(v7 + 64) = v11;
          WTF::String::operator=((uint64_t *)(v7 + 80), (WTF::StringImpl **)(a2 + 80));
          long long v12 = *(_OWORD *)(a2 + 88);
          *(_OWORD *)(v7 + 104) = *(_OWORD *)(a2 + 104);
          *(_OWORD *)(v7 + 88) = v12;
          uint64_t v13 = *(void *)(a2 + 168);
          long long v15 = *(_OWORD *)(a2 + 136);
          long long v14 = *(_OWORD *)(a2 + 152);
          *(_OWORD *)(v7 + 120) = *v5;
          *(_OWORD *)(v7 + 136) = v15;
          *(_OWORD *)(v7 + 152) = v14;
          *(void *)(v7 + 168) = v13;
          return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v7 + 176), a2 + 176);
        }
        else
        {
          char v16 = *v6;
          if (*v6) {
            *v16 += 2;
          }
          *(void *)(v7 + ++*(_DWORD *)(this + 40) = v16;
          long long v17 = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(v7 + 64) = v17;
          uint64_t v18 = *(_DWORD **)(a2 + 80);
          if (v18) {
            *v18 += 2;
          }
          *(void *)(v7 + 80) = v18;
          long long v19 = *(_OWORD *)(a2 + 88);
          *(_OWORD *)(v7 + 104) = *(_OWORD *)(a2 + 104);
          *(_OWORD *)(v7 + 88) = v19;
          long long v20 = *v5;
          long long v21 = *(_OWORD *)(a2 + 136);
          long long v22 = *(_OWORD *)(a2 + 152);
          *(void *)(v7 + 168) = *(void *)(a2 + 168);
          *(_OWORD *)(v7 + 152) = v22;
          *(_OWORD *)(v7 + 136) = v21;
          *(_OWORD *)(v7 + 120) = v20;
          uint64_t result = (unsigned int *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v7 + 176, a2 + 176);
          *(unsigned char *)(v7 + 192) = 1;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebSWServerToContextConnection::didReceiveMessage(WTF::StringImpl *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a3;
  uint64_t v5 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0xAF1:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v6)
      {
        this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
        if (v7)
        {
          *(void *)&long long v107 = this;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v107 + 1, a2);
          int v8 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v8 = &unk_1EEA0DCD8;
          v8[1] = v107;
          uint64_t v9 = *((void *)&v107 + 1);
          *((void *)&v107 + 1) = 0;
          void v8[2] = v9;
          *(void *)uint64_t v117 = v8;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v107 + 1);
          WebCore::SWServerToContextConnection::claim();
          this = *(WTF::StringImpl **)v117;
          *(void *)uint64_t v117 = 0;
          if (this) {
            return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
          }
        }
      }
      return this;
    case 0xAF2:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v48)
      {
        return (WTF::StringImpl *)MEMORY[0x1F41719A0](v5, this);
      }
      return this;
    case 0xAF3:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v42)
      {
        return (WTF::StringImpl *)WebKit::WebSWServerToContextConnection::didFinishActivation((uint64_t)v5);
      }
      return this;
    case 0xAF4:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerJobDataIdentifier>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t)&v107, (uint64_t *)a3);
      if (LOBYTE(v109[1])) {
        return (WTF::StringImpl *)WebKit::WebSWServerToContextConnection::didFinishInstall((uint64_t)v5);
      }
      return this;
    case 0xAF5:
      uint64_t v30 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v31) {
        goto LABEL_164;
      }
      uint64_t v32 = v30;
      IPC::Decoder::decode<WTF::String>(v3, (uint64_t)v117);
      if (!v117[8]) {
        goto LABEL_164;
      }
      unint64_t v33 = *(WTF **)v117;
      *(void *)&long long v107 = v32;
      *((void *)&v107 + 1) = *(void *)v117;
      LOBYTE(v108) = 1;
      this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
      if (!(_BYTE)v29) {
        goto LABEL_106;
      }
      *(void *)uint64_t v117 = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v117[8], a2);
      uint64_t v34 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v34 = &unk_1EEA0DCB0;
      v34[1] = *(void *)v117;
      uint64_t v35 = *(void *)&v117[8];
      *(void *)&v117[8] = 0;
      v34[2] = v35;
      *(void *)uint64_t v115 = v34;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v117[8]);
      WebCore::SWServerToContextConnection::findClientByVisibleIdentifier();
      this = *(WTF::StringImpl **)v115;
      *(void *)uint64_t v115 = 0;
      if (this) {
        this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
      }
      if ((_BYTE)v108) {
        goto LABEL_105;
      }
      return this;
    case 0xAF6:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::UUID>>>(a3, (uint64_t)&v107);
      if (LOBYTE(v109[0]))
      {
        this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
        if (v50)
        {
          *(void *)uint64_t v117 = this;
          uint64_t v3 = (IPC::Decoder *)&v117[8];
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v117[8], a2);
          char v51 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v51 = &unk_1EEA0DD00;
          v51[1] = *(void *)v117;
          uint64_t v52 = *(void *)&v117[8];
          *(void *)&v117[8] = 0;
          v51[2] = v52;
          *(void *)uint64_t v115 = v51;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v117[8]);
          uint64_t v11 = LOBYTE(v109[0]);
          if (!LOBYTE(v109[0])) {
            goto LABEL_142;
          }
          *(_OWORD *)uint64_t v117 = v107;
          *(_OWORD *)&v117[16] = v108;
          WebKit::WebSWServerToContextConnection::focus(v5, (uint64_t)v117, (uint64_t *)v115);
          this = *(WTF::StringImpl **)v115;
          *(void *)uint64_t v115 = 0;
          if (this) {
            return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
          }
        }
      }
      return this;
    case 0xAF7:
      unint64_t v53 = *((void *)a3 + 1);
      uint64_t v54 = *(void *)a3;
      unint64_t v55 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v53 < v55 || v53 - v55 <= 7)
      {
        unint64_t v94 = 0;
        unint64_t v95 = 0;
        *(void *)uint64_t v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v96 = *((void *)v3 + 3);
        if (!v96)
        {
LABEL_154:
          *(void *)uint64_t v3 = 0;
          *((void *)v3 + 1) = 0;
          uint64_t v97 = *((void *)v3 + 3);
          if (v97 && v94) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v97 + 16))(v97, v95);
          }
          goto LABEL_110;
        }
        if (!v53)
        {
          unint64_t v94 = 0;
          unint64_t v95 = 0;
          goto LABEL_154;
        }
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v96 + 16))(v96, v54, v53);
LABEL_153:
        unint64_t v95 = *(WTF::StringImpl **)v3;
        unint64_t v94 = *((void *)v3 + 1);
        goto LABEL_154;
      }
      long long v57 = (uint64_t *)(v54 + v55);
      *((void *)a3 + 2) = v57 + 1;
      if (!v54)
      {
        unint64_t v94 = v53;
        unint64_t v95 = 0;
        goto LABEL_154;
      }
      uint64_t v58 = *v57;
      uint64_t v59 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v60) {
        goto LABEL_110;
      }
      uint64_t v61 = v59;
      uint64_t v62 = IPC::ArgumentCoder<WebCore::ServiceWorkerClientQueryOptions,void>::decode(v3);
      if ((v62 & 0xFF0000) == 0) {
        goto LABEL_153;
      }
      *(void *)&long long v107 = v58;
      *((void *)&v107 + 1) = v61;
      LOWORD(v108) = v62;
      BYTE8(v108) = 1;
      return (WTF::StringImpl *)WebCore::SWServerToContextConnection::matchAll();
    case 0xAF8:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a3, (uint64_t)v115);
      if (!v115[32]) {
        goto LABEL_164;
      }
      uint64_t v43 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v3);
      if (!v44) {
        goto LABEL_164;
      }
      long long v45 = (WTF *)v43;
      IPC::Decoder::decode<WTF::URL>(v3, v117);
      if (!v117[40]) {
        goto LABEL_164;
      }
      uint64_t v11 = v115[32];
      if (!v115[32]) {
        goto LABEL_142;
      }
      long long v107 = *(_OWORD *)v115;
      long long v108 = *(_OWORD *)&v115[16];
      unint64_t v33 = *(WTF **)v117;
      v109[0] = v45;
      v109[1] = *(WTF **)v117;
      *(_OWORD *)uint64_t v110 = *(_OWORD *)&v117[8];
      *(_OWORD *)uint64_t v111 = *(_OWORD *)&v117[24];
      LOBYTE(v112) = 1;
      this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
      if (!(_BYTE)v29) {
        goto LABEL_63;
      }
      *(void *)uint64_t v117 = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v117[8], a2);
      int v46 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v46 = &unk_1EEA0DD28;
      v46[1] = *(void *)v117;
      uint64_t v47 = *(void *)&v117[8];
      *(void *)&v117[8] = 0;
      v46[2] = v47;
      *(void *)uint64_t v115 = v46;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v117[8]);
      *(_OWORD *)uint64_t v117 = v107;
      *(_OWORD *)&v117[16] = v108;
      WebKit::WebSWServerToContextConnection::navigate((uint64_t)v5, (uint64_t *)v117, (uint64_t)v45, (uint64_t)&v109[1], (uint64_t *)v115);
      this = *(WTF::StringImpl **)v115;
      *(void *)uint64_t v115 = 0;
      if (this) {
        this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
      }
      if (!(_BYTE)v112) {
        return this;
      }
      unint64_t v33 = v109[1];
LABEL_63:
      v109[1] = 0;
      if (!v33) {
        return this;
      }
      goto LABEL_107;
    case 0xAF9:
      uint64_t v75 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v76) {
        goto LABEL_164;
      }
      uint64_t v77 = v75;
      IPC::Decoder::decode<WTF::URL>(v3, v117);
      if (!v117[40]) {
        goto LABEL_164;
      }
      unint64_t v33 = *(WTF **)v117;
      *(void *)&long long v107 = v77;
      *((void *)&v107 + 1) = *(void *)v117;
      long long v108 = *(_OWORD *)&v117[8];
      *(_OWORD *)long long v109 = *(_OWORD *)&v117[24];
      LOBYTE(v110[0]) = 1;
      this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
      if (!(_BYTE)v29) {
        goto LABEL_106;
      }
      *(void *)uint64_t v117 = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v117[8], a2);
      long long v78 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v78 = &unk_1EEA0DD50;
      v78[1] = *(void *)v117;
      uint64_t v79 = *(void *)&v117[8];
      *(void *)&v117[8] = 0;
      v78[2] = v79;
      *(void *)uint64_t v115 = v78;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v117[8]);
      (*(void (**)(WebCore::SWServerToContextConnection *, uint64_t, char *, unsigned char *))(*(void *)v5 + 112))(v5, v77, (char *)&v107 + 8, v115);
      this = *(WTF::StringImpl **)v115;
      *(void *)uint64_t v115 = 0;
      if (this) {
        this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
      }
      if (!LOBYTE(v110[0])) {
        return this;
      }
LABEL_105:
      unint64_t v33 = (WTF *)*((void *)&v107 + 1);
LABEL_106:
      *((void *)&v107 + 1) = 0;
      if (!v33) {
        return this;
      }
LABEL_107:
      if (*(_DWORD *)v33 != 2)
      {
        *(_DWORD *)v33 -= 2;
        return this;
      }
      this = v33;
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v29);
    case 0xAFA:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a3, (uint64_t)v117);
      if (!v117[32]) {
        goto LABEL_110;
      }
      IPC::Decoder::decode<WebCore::MessageWithMessagePorts>(v3, (uint64_t)v115);
      if (v115[24]
        && (uint64_t v37 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v3),
            (_BYTE)v36)
        && (long long v38 = (WTF::StringImpl *)v37, IPC::Decoder::decode<WTF::String>(v3, (uint64_t)&v105), v106))
      {
        uint64_t v11 = v117[32];
        if (!v117[32]) {
          goto LABEL_142;
        }
        uint64_t v11 = v115[24];
        if (!v115[24]) {
          goto LABEL_142;
        }
        long long v107 = *(_OWORD *)v117;
        long long v108 = *(_OWORD *)&v117[16];
        long long v39 = *(_OWORD *)v115;
        memset(v115, 0, 24);
        *(_OWORD *)long long v109 = v39;
        v110[0] = *(WTF::StringImpl **)&v115[16];
        v110[1] = v38;
        v111[0] = v105;
        LOBYTE(v112) = 1;
        std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v115, v36);
        this = (WTF::StringImpl *)WebKit::WebSWServerToContextConnection::postMessageToServiceWorkerClient(v5, (uint64_t)&v107, (uint64_t)v109, (uint64_t)v38, (uint64_t)v111);
        if ((_BYTE)v112)
        {
          int v41 = v111[0];
          v111[0] = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2) {
              WTF::StringImpl::destroy(v41, v40);
            }
            else {
              *(_DWORD *)v41 -= 2;
            }
          }
          char v87 = v109[1];
          if (v109[1])
          {
            v109[1] = 0;
            LODWORD(v110[0]) = 0;
            WTF::fastFree(v87, v40);
          }
          this = v109[0];
          v109[0] = 0;
          if (this) {
            return (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref((unsigned int *)this);
          }
        }
      }
      else
      {
        std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v115, v36);
LABEL_110:
        uint64_t v80 = *(WTF::StringImpl **)v3;
        uint64_t v81 = *((void *)v3 + 1);
        *(void *)uint64_t v3 = 0;
        *((void *)v3 + 1) = 0;
        this = (WTF::StringImpl *)*((void *)v3 + 3);
        if (this && v81) {
          return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)this + 16))(this, v80);
        }
      }
      return this;
    case 0xAFB:
      uint64_t v63 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v64) {
        goto LABEL_164;
      }
      uint64_t v65 = v63;
      unsigned __int16 v66 = IPC::Decoder::decode<JSC::MessageSource>((uint64_t *)v3);
      if (v66 < 0x100u) {
        goto LABEL_164;
      }
      char v67 = v66;
      unsigned __int16 v68 = IPC::Decoder::decode<JSC::MessageLevel>((uint64_t *)v3);
      if (v68 < 0x100u) {
        goto LABEL_164;
      }
      char v69 = v68;
      IPC::Decoder::decode<WTF::String>(v3, (uint64_t)v117);
      if (!v117[8]) {
        goto LABEL_164;
      }
      unint64_t v70 = *((void *)v3 + 1);
      int v71 = *(WTF::StringImpl **)v3;
      unint64_t v72 = ((*((void *)v3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v3;
      if (v70 < v72 || v70 - v72 <= 7)
      {
        unint64_t v98 = 0;
        uint64_t v99 = 0;
        *(void *)uint64_t v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v100 = *((void *)v3 + 3);
        if (v100)
        {
          if (v70)
          {
            (*(void (**)(uint64_t))(*(void *)v100 + 16))(v100);
            uint64_t v99 = *(WTF::StringImpl **)v3;
            unint64_t v98 = *((void *)v3 + 1);
          }
          else
          {
            unint64_t v98 = 0;
            uint64_t v99 = 0;
          }
        }
      }
      else
      {
        uint64_t v73 = (uint64_t *)((char *)v71 + v72);
        *((void *)v3 + 2) = v73 + 1;
        if (v71)
        {
          uint64_t v74 = *v73;
          *(void *)&long long v107 = v65;
          BYTE8(v107) = v67;
          BYTE9(v107) = v69;
          *(void *)&long long v108 = *(void *)v117;
          *((void *)&v108 + 1) = v74;
          LOBYTE(v109[0]) = 1;
          this = (WTF::StringImpl *)WebKit::WebSWServerToContextConnection::reportConsoleMessage(v5, v65, v67, v69, (uint64_t *)&v108, v74);
          if (LOBYTE(v109[0]))
          {
            this = (WTF::StringImpl *)v108;
            *(void *)&long long v108 = 0;
            if (this) {
              goto LABEL_134;
            }
          }
          return this;
        }
        unint64_t v98 = v70;
        uint64_t v99 = 0;
      }
      *(void *)uint64_t v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v101 = *((void *)v3 + 3);
      if (v101 && v98) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v101 + 16))(v101, v99);
      }
      if (v117[8])
      {
        uint64_t v102 = *(WTF::StringImpl **)v117;
        *(void *)uint64_t v117 = 0;
        if (v102)
        {
          if (*(_DWORD *)v102 == 2) {
            WTF::StringImpl::destroy(v102, v71);
          }
          else {
            *(_DWORD *)v102 -= 2;
          }
        }
      }
      goto LABEL_164;
    case 0xAFC:
      IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerJobDataIdentifier>>((uint64_t *)a3, (uint64_t)v117);
      if (!v117[24]) {
        goto LABEL_164;
      }
      uint64_t v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v3);
      if (!v27) {
        goto LABEL_164;
      }
      uint64_t v28 = v26;
      IPC::Decoder::decode<WTF::String>(v3, (uint64_t)v115);
      if (!v115[8]) {
        goto LABEL_164;
      }
      uint64_t v11 = v117[24];
      if (!v117[24]) {
        goto LABEL_142;
      }
      long long v107 = *(_OWORD *)v117;
      *(void *)&long long v108 = *(void *)&v117[16];
      *((void *)&v108 + 1) = v28;
      v109[0] = *(WTF **)v115;
      LOBYTE(v109[1]) = 1;
      WebCore::SWServerToContextConnection::scriptContextFailedToStart();
      this = v109[0];
      v109[0] = 0;
      if (!this) {
        return this;
      }
      goto LABEL_134;
    case 0xAFD:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerJobDataIdentifier>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t)&v107, (uint64_t *)a3);
      if (LOBYTE(v109[1])) {
        return (WTF::StringImpl *)WebCore::SWServerToContextConnection::scriptContextStarted();
      }
      return this;
    case 0xAFE:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t)&v107, (uint64_t *)a3);
      if ((_BYTE)v108) {
        return (WTF::StringImpl *)WebCore::SWServerToContextConnection::setAsInspected();
      }
      return this;
    case 0xAFF:
      uint64_t v17 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v18) {
        goto LABEL_164;
      }
      uint64_t v19 = v17;
      IPC::Decoder::decode<WTF::URL>(v3, v115);
      if (!v116) {
        goto LABEL_164;
      }
      IPC::Decoder::decode<WebCore::ServiceWorkerImportedScript>((uint64_t *)v3, (uint64_t)v117);
      int v21 = v119;
      if (v119)
      {
        uint64_t v11 = v116;
        if (!v116)
        {
LABEL_142:
          __break(1u);
LABEL_143:
          unint64_t v88 = 0;
          unsigned __int16 v89 = 0;
          *(void *)uint64_t v3 = 0;
          *((void *)v3 + 1) = 0;
          uint64_t v90 = *((void *)v3 + 3);
          if (v90)
          {
            if (v10)
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v90 + 16))(v90, v11, v10);
              unsigned __int16 v89 = *(WTF::StringImpl **)v3;
              unint64_t v88 = *((void *)v3 + 1);
            }
            else
            {
              unint64_t v88 = 0;
              unsigned __int16 v89 = 0;
            }
          }
          goto LABEL_144;
        }
        uint64_t v22 = *(void *)v115;
        *(void *)uint64_t v115 = 0;
        *(void *)&long long v107 = v19;
        *((void *)&v107 + 1) = v22;
        long long v108 = *(_OWORD *)&v115[8];
        *(_OWORD *)long long v109 = *(_OWORD *)&v115[24];
        *(_DWORD *)&v115[8] &= ~1u;
        long long v23 = *(_OWORD *)v117;
        *(_OWORD *)uint64_t v117 = 0uLL;
        *(_OWORD *)uint64_t v110 = v23;
        *(_OWORD *)uint64_t v111 = *(_OWORD *)&v117[16];
        long long v112 = *(_OWORD *)&v117[32];
        *(_DWORD *)&v117[16] &= ~1u;
        char v24 = v118;
        uint64_t v118 = 0;
        char v25 = 1;
        uint64_t v113 = v24;
      }
      else
      {
        char v25 = 0;
        LOBYTE(v107) = 0;
      }
      char v114 = v25;
      std::__optional_destruct_base<WebCore::ServiceWorkerImportedScript,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v117, v20);
      if (!v116) {
        goto LABEL_118;
      }
      __int16 v83 = *(WTF::StringImpl **)v115;
      *(void *)uint64_t v115 = 0;
      if (!v83) {
        goto LABEL_118;
      }
      if (*(_DWORD *)v83 == 2)
      {
        WTF::StringImpl::destroy(v83, v82);
        if (!v21)
        {
LABEL_164:
          uint64_t v80 = *(WTF::StringImpl **)v3;
          uint64_t v103 = *((void *)v3 + 1);
          *(void *)uint64_t v3 = 0;
          *((void *)v3 + 1) = 0;
          this = (WTF::StringImpl *)*((void *)v3 + 3);
          if (this) {
            BOOL v104 = v103 == 0;
          }
          else {
            BOOL v104 = 1;
          }
          if (!v104) {
            return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)this + 16))(this, v80);
          }
          return this;
        }
      }
      else
      {
        *(_DWORD *)v83 -= 2;
LABEL_118:
        if (!v21) {
          goto LABEL_164;
        }
      }
      this = (WTF::StringImpl *)WebCore::SWServerToContextConnection::setScriptResource();
      if (v114)
      {
        long long v84 = v113;
        uint64_t v113 = 0;
        if (v84)
        {
          if (*(_DWORD *)v84 == 2) {
            WTF::StringImpl::destroy(v84, v29);
          }
          else {
            *(_DWORD *)v84 -= 2;
          }
        }
        char v85 = v110[1];
        v110[1] = 0;
        if (v85)
        {
          if (*(_DWORD *)v85 == 2) {
            WTF::StringImpl::destroy(v85, v29);
          }
          else {
            *(_DWORD *)v85 -= 2;
          }
        }
        int v86 = (unsigned int *)v110[0];
        v110[0] = 0;
        if (v86) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v86, v29);
        }
        this = (WTF::StringImpl *)*((void *)&v107 + 1);
        *((void *)&v107 + 1) = 0;
        if (this)
        {
LABEL_134:
          if (*(_DWORD *)this == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v29);
          }
          else {
            *(_DWORD *)this -= 2;
          }
        }
      }
      return this;
    case 0xB00:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t)&v107, (uint64_t *)a3);
      if ((_BYTE)v108) {
        return (WTF::StringImpl *)WebCore::SWServerToContextConnection::setServiceWorkerHasPendingEvents();
      }
      return this;
    case 0xB01:
      unint64_t v10 = *((void *)a3 + 1);
      uint64_t v11 = *(void *)a3;
      unint64_t v12 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v10 < v12 || v10 - v12 <= 7) {
        goto LABEL_143;
      }
      long long v14 = (uint64_t *)(v11 + v12);
      *((void *)a3 + 2) = v14 + 1;
      if (v11)
      {
        uint64_t v15 = *v14;
        IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
        if (v16)
        {
          return WebKit::WebSWServerToContextConnection::skipWaiting((uint64_t)v5, v15);
        }
      }
      else
      {
        unint64_t v88 = v10;
        unsigned __int16 v89 = 0;
LABEL_144:
        *(void *)uint64_t v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v91 = *((void *)v3 + 3);
        if (v91 && v88) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v91 + 16))(v91, v89);
        }
      }
      uint64_t v92 = *((void *)v3 + 1);
      *(void *)uint64_t v3 = 0;
      *((void *)v3 + 1) = 0;
      this = (WTF::StringImpl *)*((void *)v3 + 3);
      if (this && v92)
      {
        unint64_t v93 = *(uint64_t (**)(void))(*(void *)this + 16);
        return (WTF::StringImpl *)v93();
      }
      return this;
    case 0xB02:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v49)
      {
        return (WTF::StringImpl *)MEMORY[0x1F4171980](v5, this);
      }
      return this;
    default:
      return this;
  }
}

WTF::StringImpl *non-virtual thunk to'WebKit::WebSWServerToContextConnection::didReceiveMessage(WebKit::WebSWServerToContextConnection *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  return WebKit::WebSWServerToContextConnection::didReceiveMessage((WebKit::WebSWServerToContextConnection *)((char *)this - 112), a2, a3);
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerJobDataIdentifier>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerJobDataIdentifier>>(a2, (uint64_t)&v18);
  if (!v20) {
    goto LABEL_11;
  }
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (!v5) {
    goto LABEL_11;
  }
  unint64_t v6 = a2[1];
  uint64_t v7 = *a2;
  unint64_t v8 = a2[2] - *a2;
  if (v6 <= v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v13 = a2[3];
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        uint64_t v12 = *a2;
        uint64_t v11 = a2[1];
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)(v7 + v8);
    a2[2] = (uint64_t)(v9 + 1);
    if (v7)
    {
      unsigned int v10 = *v9;
      if (v10 < 2)
      {
        if (v20)
        {
          *(_OWORD *)a1 = v18;
          *(void *)(a1 + ++*(_DWORD *)(this + 16) = v19;
          *(void *)(a1 + 24) = result;
          *(unsigned char *)(a1 + 32) = v10 != 0;
          *(unsigned char *)(a1 + ++*(_DWORD *)(this + 40) = 1;
          return result;
        }
        __break(1u);
        goto LABEL_21;
      }
      goto LABEL_10;
    }
    uint64_t v11 = v6;
    uint64_t v12 = 0;
  }
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v14 = a2[3];
  if (v14)
  {
    if (v11)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12, v11);
      uint64_t v7 = *a2;
      unint64_t v6 = a2[1];
    }
    else
    {
      unint64_t v6 = 0;
      uint64_t v7 = 0;
    }
  }
LABEL_10:
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result)
  {
LABEL_21:
    if (v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v7);
    }
  }
LABEL_11:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + ++*(_DWORD *)(this + 40) = 0;
  uint64_t v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    uint64_t v17 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v17();
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v5)
  {
    unint64_t v6 = a2[1];
    uint64_t v7 = *a2;
    unint64_t v8 = a2[2] - *a2;
    if (v6 <= v8)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v13 = a2[3];
      if (v13)
      {
        if (v6)
        {
          (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
          uint64_t v12 = *a2;
          uint64_t v11 = a2[1];
        }
        else
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
        }
      }
    }
    else
    {
      uint64_t v9 = (unsigned __int8 *)(v7 + v8);
      a2[2] = (uint64_t)(v9 + 1);
      if (v7)
      {
        unsigned int v10 = *v9;
        if (v10 < 2)
        {
          *(void *)a1 = result;
          *(unsigned char *)(a1 + 8) = v10 != 0;
          *(unsigned char *)(a1 + ++*(_DWORD *)(this + 16) = 1;
          return result;
        }
        goto LABEL_8;
      }
      uint64_t v11 = v6;
      uint64_t v12 = 0;
    }
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        uint64_t v7 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v7 = 0;
      }
    }
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v7);
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  uint64_t v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result) {
    BOOL v17 = v16 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17)
  {
    long long v18 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v18();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection29FindClientByVisibleIdentifierEN6WebKit30WebSWServerToContextConnectionEN7WebCore27SWServerToContextConnectionEFvNS_23ObjectIdentifierGenericINS9_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS9_23ServiceWorkerClientDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0DCB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection29FindClientByVisibleIdentifierEN6WebKit30WebSWServerToContextConnectionEN7WebCore27SWServerToContextConnectionEFvNS_23ObjectIdentifierGenericINS9_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS9_23ServiceWorkerClientDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0DCB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection29FindClientByVisibleIdentifierEN6WebKit30WebSWServerToContextConnectionEN7WebCore27SWServerToContextConnectionEFvNS_23ObjectIdentifierGenericINS9_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS9_23ServiceWorkerClientDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3585;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unsigned int v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerClientData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerClientData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unsigned int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection5ClaimEN6WebKit30WebSWServerToContextConnectionEN7WebCore27SWServerToContextConnectionEFvNS_23ObjectIdentifierGenericINS9_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0DCD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection5ClaimEN6WebKit30WebSWServerToContextConnectionEN7WebCore27SWServerToContextConnectionEFvNS_23ObjectIdentifierGenericINS9_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0DCD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection5ClaimEN6WebKit30WebSWServerToContextConnectionEN7WebCore27SWServerToContextConnectionEFvNS_23ObjectIdentifierGenericINS9_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3584;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unsigned int v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ExceptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::ExceptionData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unsigned int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection5FocusEN6WebKit30WebSWServerToContextConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_23ServiceWorkerClientDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0DD00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection5FocusEN6WebKit30WebSWServerToContextConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_23ServiceWorkerClientDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0DD00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection5FocusEN6WebKit30WebSWServerToContextConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_23ServiceWorkerClientDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3586;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unsigned int v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerClientData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerClientData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unsigned int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection8NavigateEN6WebKit30WebSWServerToContextConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEENS_23ObjectIdentifierGenericINS9_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS9_23ServiceWorkerClientDataEEENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0DD28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection8NavigateEN6WebKit30WebSWServerToContextConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEENS_23ObjectIdentifierGenericINS9_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS9_23ServiceWorkerClientDataEEENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0DD28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection8NavigateEN6WebKit30WebSWServerToContextConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEENS_23ObjectIdentifierGenericINS9_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS9_23ServiceWorkerClientDataEEENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EE4callESW_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3587;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unsigned int v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unsigned int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 224);
  char v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19942EA98);
    }
    *char v5 = 0;
    if (*(_DWORD *)(a2 + 224) == 1)
    {
      char v8 = *(unsigned char *)(a2 + 16);
      IPC::Encoder::operator<<<BOOL>(a1, &v8);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
      return;
    }
    goto LABEL_12;
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19942EAB8);
  }
  *char v5 = 1;
  if (*(_DWORD *)(a2 + 224))
  {
LABEL_12:
    uint64_t v7 = std::__throw_bad_variant_access[abi:sn180100]();
    _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection10OpenWindowEN6WebKit30WebSWServerToContextConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINSA_23ServiceWorkerClientDataEEENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(v7);
    return;
  }

  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerClientData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerClientData>>(a1, a2 + 16);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection10OpenWindowEN6WebKit30WebSWServerToContextConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINSA_23ServiceWorkerClientDataEEENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0DD50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection10OpenWindowEN6WebKit30WebSWServerToContextConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINSA_23ServiceWorkerClientDataEEENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0DD50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection10OpenWindowEN6WebKit30WebSWServerToContextConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINSA_23ServiceWorkerClientDataEEENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3588;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unsigned int v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unsigned int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::WebUserContentController::didReceiveMessage(WebKit::WebUserContentController *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  ++*((_DWORD *)this + 2);
  uint64_t v4 = (uint64_t *)a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0xB25:
      IPC::Decoder::decode<WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a3, (uint64_t)&v46);
      if (!v48) {
        goto LABEL_58;
      }
      char v50 = v46;
      uint64_t v6 = v47;
      int v46 = 0;
      uint64_t v47 = 0;
      uint64_t v51 = v6;
      WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v5);
      char v52 = 1;
      WebKit::WebUserContentController::addContentRuleLists((uint64_t)this, (uint64_t)&v50);
      if (v52) {
        WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, a2);
      }
      goto LABEL_59;
    case 0xB26:
      IPC::Decoder::decode<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, (uint64_t)&v46);
      if (!v48) {
        goto LABEL_58;
      }
      char v50 = v46;
      uint64_t v29 = v47;
      int v46 = 0;
      uint64_t v47 = 0;
      uint64_t v51 = v29;
      WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v28);
      char v52 = 1;
      WebKit::WebUserContentController::addContentWorlds(this, (uint64_t)&v50);
      if (v52) {
        WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, a2);
      }
      goto LABEL_59;
    case 0xB27:
      IPC::Decoder::decode<WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, (uint64_t)&v46);
      if (!v48) {
        goto LABEL_58;
      }
      char v50 = v46;
      uint64_t v20 = v47;
      int v46 = 0;
      uint64_t v47 = 0;
      uint64_t v51 = v20;
      WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v19);
      char v52 = 1;
      WebKit::WebUserContentController::addUserScriptMessageHandlers(this, (uint64_t)&v50);
      if (v52) {
        WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, a2);
      }
      goto LABEL_59;
    case 0xB28:
      IPC::Decoder::decode<WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, (uint64_t)&v50);
      if (!v52) {
        goto LABEL_58;
      }
      unint64_t v21 = v4[1];
      uint64_t v22 = (IPC::Connection *)*v4;
      unint64_t v23 = v4[2] - *v4;
      if (v21 <= v23)
      {
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        *uint64_t v4 = 0;
        v4[1] = 0;
        uint64_t v41 = v4[3];
        if (v41)
        {
          if (v21)
          {
            (*(void (**)(uint64_t))(*(void *)v41 + 16))(v41);
            uint64_t v40 = *v4;
            uint64_t v39 = v4[1];
          }
          else
          {
            uint64_t v39 = 0;
            uint64_t v40 = 0;
          }
        }
        goto LABEL_54;
      }
      char v24 = (unsigned __int8 *)v22 + v23;
      v4[2] = (uint64_t)(v24 + 1);
      if (!v22)
      {
        uint64_t v39 = v21;
        uint64_t v40 = 0;
LABEL_54:
        unint64_t v21 = 0;
        uint64_t v22 = 0;
        *uint64_t v4 = 0;
        v4[1] = 0;
        uint64_t v42 = v4[3];
        if (v42)
        {
          if (v39)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v40, v39);
            uint64_t v22 = (IPC::Connection *)*v4;
            unint64_t v21 = v4[1];
          }
          else
          {
            unint64_t v21 = 0;
            uint64_t v22 = 0;
          }
        }
        goto LABEL_55;
      }
      unsigned int v25 = *v24;
      if (v25 >= 2)
      {
LABEL_55:
        *uint64_t v4 = 0;
        v4[1] = 0;
        uint64_t v43 = v4[3];
        if (v43)
        {
          if (v21)
          {
            (*(void (**)(uint64_t, IPC::Connection *))(*(void *)v43 + 16))(v43, v22);
            uint64_t v44 = v4[3];
            uint64_t v22 = (IPC::Connection *)*v4;
            uint64_t v45 = v4[1];
            *uint64_t v4 = 0;
            v4[1] = 0;
            if (v44)
            {
              if (v45) {
                (*(void (**)(uint64_t, IPC::Connection *))(*(void *)v44 + 16))(v44, v22);
              }
            }
          }
        }
        if (v52) {
          WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v50, v22);
        }
        goto LABEL_58;
      }
      BOOL v26 = v25 != 0;
      int v46 = v50;
      uint64_t v27 = v51;
      char v50 = 0;
      uint64_t v51 = 0;
      uint64_t v47 = v27;
      BOOL v48 = v25 != 0;
      char v49 = 1;
      WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v50, v22);
      WebKit::WebUserContentController::addUserScripts(this, &v46, v26);
      if (v49) {
        WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v46, a2);
      }
LABEL_59:
      if (*((_DWORD *)this + 2) == 1) {
        (*(void (**)(WebKit::WebUserContentController *, IPC::Connection *, IPC::Decoder *))(*(void *)this + 8))(this, a2, a3);
      }
      else {
        --*((_DWORD *)this + 2);
      }
      return;
    case 0xB29:
      IPC::Decoder::decode<WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, (uint64_t)&v46);
      if (v48)
      {
        char v50 = v46;
        uint64_t v13 = v47;
        int v46 = 0;
        uint64_t v47 = 0;
        uint64_t v51 = v13;
        WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v12);
        char v52 = 1;
        WebKit::WebUserContentController::addUserStyleSheets(this, (unsigned int *)&v50);
        if (v52) {
          WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, a2);
        }
        goto LABEL_59;
      }
LABEL_58:
      a2 = (IPC::Connection *)*v4;
      a3 = (IPC::Decoder *)v4[1];
      *uint64_t v4 = 0;
      v4[1] = 0;
      uint64_t v35 = v4[3];
      if (!v35 || !a3) {
        goto LABEL_59;
      }
      goto LABEL_64;
    case 0xB2A:
      WebCore::ContentExtensions::ContentExtensionsBackend::removeAllContentExtensions((WebKit::WebUserContentController *)((char *)this + 96));
      goto LABEL_59;
    case 0xB2B:
      WebKit::WebUserContentController::removeAllUserScriptMessageHandlers(this, a2);
      goto LABEL_59;
    case 0xB2C:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v46, (uint64_t *)a3);
      if (!v48) {
        goto LABEL_59;
      }
      WebKit::WebUserContentController::removeAllUserScriptMessageHandlersForWorlds(this, (uint64_t)&v46);
      goto LABEL_49;
    case 0xB2D:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v46, (uint64_t *)a3);
      if (!v48) {
        goto LABEL_59;
      }
      WebKit::WebUserContentController::removeAllUserScripts(this, (uint64_t)&v46);
      goto LABEL_49;
    case 0xB2E:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v46, (uint64_t *)a3);
      if (!v48) {
        goto LABEL_59;
      }
      WebKit::WebUserContentController::removeAllUserStyleSheets(this, (uint64_t)&v46);
      goto LABEL_49;
    case 0xB2F:
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v46);
      if ((_BYTE)v47)
      {
        WebKit::WebUserContentController::removeContentRuleList(this, (const WTF::String *)&v46);
        if ((_BYTE)v47)
        {
          uint64_t v37 = v46;
          int v46 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2) {
              WTF::StringImpl::destroy(v37, a2);
            }
            else {
              *(_DWORD *)v37 -= 2;
            }
          }
        }
      }
      goto LABEL_59;
    case 0xB30:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v46, (uint64_t *)a3);
      if (!v48) {
        goto LABEL_59;
      }
      WebKit::WebUserContentController::removeContentWorlds((uint64_t *)this, (uint64_t)&v46);
LABEL_49:
      if (v48)
      {
        long long v38 = v46;
        if (v46)
        {
          int v46 = 0;
          LODWORD(v47) = 0;
          WTF::fastFree(v38, a2);
        }
      }
      goto LABEL_59;
    case 0xB31:
      uint64_t v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a3);
      if (!v15) {
        goto LABEL_36;
      }
      uint64_t v16 = v14;
      uint64_t v17 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v4);
      if (!v18) {
        goto LABEL_36;
      }
      WebKit::WebUserContentController::removeUserScript(this, v16, v17);
      goto LABEL_59;
    case 0xB32:
      uint64_t v30 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a3);
      if (!v31) {
        goto LABEL_36;
      }
      uint64_t v32 = v30;
      uint64_t v33 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v4);
      if (!v34) {
        goto LABEL_36;
      }
      WebKit::WebUserContentController::removeUserScriptMessageHandler(this, v32, v33);
      goto LABEL_59;
    case 0xB33:
      uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a3);
      if (v8
        && (uint64_t v9 = v7,
            uint64_t v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v4),
            v11))
      {
        WebKit::WebUserContentController::removeUserStyleSheet(this, v9, v10);
      }
      else
      {
LABEL_36:
        a2 = (IPC::Connection *)*v4;
        a3 = (IPC::Decoder *)v4[1];
        *uint64_t v4 = 0;
        v4[1] = 0;
        uint64_t v35 = v4[3];
        if (v35) {
          BOOL v36 = a3 == 0;
        }
        else {
          BOOL v36 = 1;
        }
        if (!v36) {
LABEL_64:
        }
          (*(void (**)(uint64_t, IPC::Connection *))(*(void *)v35 + 16))(v35, a2);
      }
      goto LABEL_59;
    default:
      goto LABEL_59;
  }
}

void non-virtual thunk to'WebKit::WebUserContentController::didReceiveMessage(WebKit::WebUserContentController *this, IPC::Connection *a2, IPC::Decoder *a3)
{
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v17 = a2[3];
    if (v17)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v5, v4);
        uint64_t v16 = *a2;
        uint64_t v15 = a2[1];
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
      }
    }
    goto LABEL_19;
  }
  char v8 = (unint64_t *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v15 = v4;
    uint64_t v16 = 0;
LABEL_19:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v18 = a2[3];
    if (v18 && v15) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
    }
LABEL_38:
    uint64_t v22 = *a2;
    uint64_t v23 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result)
    {
      if (v23)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v22);
        uint64_t v23 = a2[1];
        uint64_t result = a2[3];
      }
    }
    else
    {
      uint64_t v23 = 0;
    }
    *(unsigned char *)uint64_t v3 = 0;
    *(unsigned char *)(v3 + ++*(_DWORD *)(this + 16) = 0;
    *a2 = 0;
    a2[1] = 0;
    if (result && v23)
    {
      char v24 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v24();
    }
    return result;
  }
  unint64_t v9 = *v8;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  if (v9 >= 0x20000)
  {
    uint64_t v19 = 0;
    LODWORD(v11) = 0;
    do
    {
      uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
      uint64_t v25 = result;
      BOOL v26 = v12;
      if (!(_BYTE)v12)
      {
        uint64_t v10 = v27;
        if (!v27) {
          goto LABEL_38;
        }
        goto LABEL_37;
      }
      if (v11 == v28)
      {
        uint64_t result = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v27, v11 + 1, (unint64_t)&v25);
        int v20 = HIDWORD(v28);
        uint64_t v19 = v27;
        *((void *)v27 + HIDWORD(v2WebKit::WebSocketChannel::~WebSocketChannel((WebKit::WebSocketChannel *)((char *)this - 8)) = *(void *)result;
      }
      else
      {
        *((void *)v19 + v11) = result;
        int v20 = HIDWORD(v28);
      }
      uint64_t v11 = (v20 + 1);
      HIDWORD(v28) = v20 + 1;
      --v9;
    }
    while (v9);
    int v14 = v28;
    if (v28 <= v11) {
      goto LABEL_50;
    }
    if (!v11) {
      goto LABEL_48;
    }
    if (!(v11 >> 29))
    {
      uint64_t result = WTF::fastMalloc((WTF *)(8 * v11));
      LODWORD(v28) = v11;
      uint64_t v27 = (WTF *)result;
      if ((WTF *)result != v19)
      {
        uint64_t v21 = 0;
        do
        {
          *(void *)(result + v21) = *(void *)((char *)v19 + v21);
          v21 += 8;
        }
        while (8 * v11 != v21);
        int v14 = v11;
        if (!v19) {
          goto LABEL_50;
        }
LABEL_49:
        uint64_t result = WTF::fastFree(v19, v12);
        int v14 = v28;
        LODWORD(v11) = HIDWORD(v28);
LABEL_50:
        uint64_t v10 = v27;
        goto LABEL_17;
      }
LABEL_48:
      uint64_t v27 = 0;
      LODWORD(v28) = 0;
      goto LABEL_49;
    }
    __break(0xC471u);
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = (WTF *)WTF::fastMalloc((WTF *)(8 * v9));
      LODWORD(v11) = 0;
      LODWORD(v28) = v9;
      uint64_t v27 = v10;
      while (1)
      {
        uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
        uint64_t v25 = result;
        BOOL v26 = v12;
        if (!(_BYTE)v12) {
          break;
        }
        if (v11 == v28)
        {
          uint64_t result = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v27, v11 + 1, (unint64_t)&v25);
          int v13 = HIDWORD(v28);
          uint64_t v10 = v27;
          *((void *)v27 + HIDWORD(v2WebKit::WebSocketChannel::~WebSocketChannel((WebKit::WebSocketChannel *)((char *)this - 8)) = *(void *)result;
        }
        else
        {
          *((void *)v10 + v11) = result;
          int v13 = HIDWORD(v28);
        }
        LODWORD(v11) = v13 + 1;
        HIDWORD(v28) = v13 + 1;
        if (!--v9)
        {
          int v14 = v28;
          goto LABEL_17;
        }
      }
LABEL_37:
      uint64_t v27 = 0;
      LODWORD(v28) = 0;
      WTF::fastFree(v10, v12);
      goto LABEL_38;
    }
    uint64_t v10 = 0;
    int v14 = 0;
    LODWORD(v11) = 0;
LABEL_17:
    *(void *)uint64_t v3 = v10;
    *(_DWORD *)(v3 + 8) = v14;
    *(_DWORD *)(v3 + 12) = v11;
    *(unsigned char *)(v3 + ++*(_DWORD *)(this + 16) = 1;
  }
  return result;
}

void WebKit::WebUserContentControllerProxy::didReceiveMessage(CFTypeRef *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  CFRetain(this[1]);
  if (*((_WORD *)a3 + 25) == 2852)
  {
    uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
    if (!v7) {
      goto LABEL_30;
    }
    uint64_t v8 = v6;
    IPC::Decoder::decode<WebKit::FrameInfoData>(a3, (uint64_t)&v36);
    if (v38
      && (uint64_t v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3),
          (_BYTE)v9))
    {
      uint64_t v11 = v10;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a3, (uint64_t)&v24);
      char v12 = v25;
      if (v25)
      {
        if (!v38) {
          goto LABEL_29;
        }
        uint64_t v26 = v8;
        std::__tuple_leaf<1ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>((uint64_t)&v27, (uint64_t)&v36);
        uint64_t v33 = v11;
        long long v34 = v24;
        char v12 = 1;
      }
      else
      {
        LOBYTE(v26) = 0;
      }
      char v35 = v12;
    }
    else
    {
      LOBYTE(v26) = 0;
      char v35 = 0;
    }
    std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36, v9);
    if (!v35) {
      goto LABEL_31;
    }
    while (1)
    {
      uint64_t v13 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!(_BYTE)v14) {
        break;
      }
      uint64_t v36 = v13;
      a3 = (IPC::Decoder *)v37;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v37, a2);
      uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v15 = &unk_1EEA0DD88;
      v15[1] = v36;
      uint64_t v16 = v37[0];
      v37[0] = 0;
      _OWORD v15[2] = v16;
      *(void *)&long long v24 = v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v37);
      if (v35)
      {
        WebKit::WebUserContentControllerProxy::didPostMessage((uint64_t)this, v26, (uint64_t)&v27, v33, (char *)v34, *((WTF **)&v34 + 1), (uint64_t *)&v24);
        uint64_t v17 = v24;
        *(void *)&long long v24 = 0;
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
        break;
      }
LABEL_29:
      __break(1u);
LABEL_30:
      LOBYTE(v26) = 0;
      char v35 = 0;
LABEL_31:
      uint64_t v21 = *(void *)a3;
      uint64_t v22 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v23 = *((void *)a3 + 3);
      if (v23)
      {
        if (v22)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v21);
          if (v35) {
            continue;
          }
        }
      }
      goto LABEL_26;
    }
    if (v35)
    {
      uint64_t v18 = v32;
      uint64_t v32 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v14);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
      if (v31 != -1) {
        ((void (*)(uint64_t *, uint64_t *))off_1EEA0DD68[v31])(&v36, &v30);
      }
      int v31 = -1;
      CFTypeRef v19 = cf;
      CFTypeRef cf = 0;
      if (v19) {
        CFRelease(v19);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v28);
    }
  }
LABEL_26:
  CFTypeRef v20 = this[1];

  CFRelease(v20);
}

void non-virtual thunk to'WebKit::WebUserContentControllerProxy::didReceiveMessage(CFTypeRef *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebUserContentControllerProxy14DidPostMessageEN6WebKit29WebUserContentControllerProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_13FrameInfoDataENS9_INS7_34ScriptMessageHandlerIdentifierTypeESC_yLSD_1EEENSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvSM_RKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_SQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0DD88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebUserContentControllerProxy14DidPostMessageEN6WebKit29WebUserContentControllerProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_13FrameInfoDataENS9_INS7_34ScriptMessageHandlerIdentifierTypeESC_yLSD_1EEENSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvSM_RKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_SQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA0DD88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebUserContentControllerProxy14DidPostMessageEN6WebKit29WebUserContentControllerProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_13FrameInfoDataENS9_INS7_34ScriptMessageHandlerIdentifierTypeESC_yLSD_1EEENSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvSM_RKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_SQ_EE4callESM_SQ_(uint64_t a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v9 = 3592;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  int v14 = v9;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v9, a2, a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a4);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  uint64_t result = v14;
  int v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WKBundlePageGetPDFDocumentInFrame()
{
  return 0;
}

void sub_19942FC44(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

void sub_19942FCB0(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

id keyCommandsPlaceholderHackForEvernote(objc_object *a1, objc_selector *a2)
{
  v4.receiver = a1;
  Class = object_getClass(a1);
  v4.super_class = class_getSuperclass(Class);
  return [(objc_object *)&v4 keyCommands];
}

void sub_199430224(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v14);
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v15);
  _Unwind_Resume(a1);
}

void sub_199430990(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_199431FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_19943209C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_19943218C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1994322DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_199432570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, int a13)
{
  if (a13 != -1) {
    ((void (*)(uint64_t *, char *))off_1EEA0DF08[a13])(&a10, &a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_199432708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_199432960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, int a13)
{
  if (a13 != -1) {
    ((void (*)(uint64_t *, char *))off_1EEA0DF08[a13])(&a10, &a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_199432AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_199432C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  if (v13) {
    CFRelease(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZZ49__WKContentView__removeTemporaryFilesIfNecessary_ENK3__0clEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  return [*(id *)(a1 + 32) removeItemAtURL:a2 error:&v3];
}

CFTypeRef __copy_helper_block_e8_32c37_ZTSN3WTF9RetainPtrI13NSFileManagerEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c37_ZTSN3WTF9RetainPtrI13NSFileManagerEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 88);
    *(void *)(a1 + 88) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    objc_super v4 = *(const void **)(a1 + 80);
    *(void *)(a1 + 80) = 0;
    if (v4) {
      CFRelease(v4);
    }
  }
  return a1;
}

void WebKit::DragDropInteractionState::~DragDropInteractionState(WebKit::DragDropInteractionState *this, void *a2)
{
  uint64_t v3 = *((void *)this + 53);
  if (v3) {
    WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 52);
  if (v4) {
    WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::deallocateTable(v4, a2);
  }
  WTF::Vector<WebKit::DragSourceState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 400, a2);
  std::__optional_destruct_base<WebKit::DragSourceState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 80, v5);
  uint64_t v6 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v6) {
    CFRelease(v6);
  }
  _Block_release(*((const void **)this + 8));
  _Block_release(*((const void **)this + 7));
  char v7 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v8) {
    CFRelease(v8);
  }
}

uint64_t WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *(const void **)v4;
      if (*(void *)v4 != -1)
      {
        uint64_t v6 = *(const void **)(v4 + 8);
        *(void *)(v4 + 8) = 0;
        if (v6)
        {
          CFRelease(v6);
          uint64_t v5 = *(const void **)v4;
        }
        *(void *)uint64_t v4 = 0;
        if (v5) {
          CFRelease(v5);
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Vector<WebKit::DragSourceState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::DragSourceState>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 312 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WTF::VectorDestructor<true,WebKit::DragSourceState>::destruct(WTF::StringImpl *a1, WTF::StringImpl *a2)
{
  if (a1 != a2)
  {
    uint64_t v11 = v2;
    uint64_t v12 = v3;
    uint64_t v5 = a1;
    do
    {
      uint64_t v6 = (WTF::StringImpl *)*((void *)v5 + 32);
      *((void *)v5 + 32) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      char v7 = (WTF::StringImpl *)*((void *)v5 + 31);
      *((void *)v5 + 31) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, a2);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
      if (*((unsigned char *)v5 + 240))
      {
        uint64_t v8 = *((unsigned int *)v5 + 58);
        if (v8 != -1) {
          ((void (*)(char *, char *))off_1EEA0DDF0[v8])(&v10, (char *)v5 + 176);
        }
        *((_DWORD *)v5 + 58) = -1;
      }
      if (*((unsigned char *)v5 + 160)) {
        WebCore::TextIndicatorData::~TextIndicatorData((WTF::StringImpl *)((char *)v5 + 48), a2);
      }
      unint64_t v9 = (const void *)*((void *)v5 + 5);
      *((void *)v5 + 5) = 0;
      if (v9) {
        CFRelease(v9);
      }
      uint64_t v5 = (WTF::StringImpl *)((char *)v5 + 312);
    }
    while (v5 != a2);
  }
}

WebKit::GestureRecognizerConsistencyEnforcer *std::unique_ptr<WebKit::GestureRecognizerConsistencyEnforcer>::reset[abi:sn180100](WebKit::GestureRecognizerConsistencyEnforcer **a1, WebKit::GestureRecognizerConsistencyEnforcer *a2)
{
  CFTypeRef result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::GestureRecognizerConsistencyEnforcer::~GestureRecognizerConsistencyEnforcer(result, a2);
    return (WebKit::GestureRecognizerConsistencyEnforcer *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::KeyEventAndCompletionBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::KeyEventAndCompletionBlock>::destruct(*(const void ***)a1, (const void **)(*(void *)a1 + 16 * v3));
  }
  uint64_t v4 = *(const void ***)a1;
  if (a1 + 16 != *(void *)a1 && v4 != 0)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

void WTF::VectorDestructor<true,WebKit::KeyEventAndCompletionBlock>::destruct(const void **a1, const void **a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1;
    do
    {
      _Block_release(v3[1]);
      uint64_t v4 = *v3;
      *uint64_t v3 = 0;
      if (v4) {
        CFRelease(v4);
      }
      v3 += 2;
    }
    while (v3 != a2);
  }
}

void sub_199433564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1994337D8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF *a10)
{
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_199433A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_199433CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_1994346E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_19943562C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,WTF::StringImpl *a41,uint64_t a42,uint64_t a43,uint64_t a44,WTF::StringImpl *a45,uint64_t a46,WTF::StringImpl *a47)
{
}

uint64_t existingLocalDragSessionContext(void *a1)
{
  [a1 localContext];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return [a1 localContext];
}

void sub_1994358B4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::Vector<WebKit::KeyEventAndCompletionBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  WTF::Vector<WebKit::KeyEventAndCompletionBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v14);
  _Unwind_Resume(a1);
}

void sub_1994358F8()
{
  if (!v0) {
    JUMPOUT(0x1994358E8);
  }
  JUMPOUT(0x1994358E0);
}

void sub_1994365E8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  WTF::fastFree(v9, a2);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_1994368DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14 = a10;
  a10 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  objc_destroyWeak((id *)&a9);
  *(unsigned char *)(v10 + v11) = v12;
  _Unwind_Resume(a1);
}

void sub_19943721C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 208));
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c69_ZTSKZ55__WKContentView_WKInteraction___touchEventsRecognized__E4__15(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c69_ZTSKZ55__WKContentView_WKInteraction___touchEventsRecognized__E4__15(uint64_t a1)
{
}

void sub_199437938(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_199437A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

float inflateQuad(const FloatQuad *a1, float a2, float *a3)
{
  float v3 = a3[6];
  float v4 = a3[7];
  float v5 = a3[4];
  if (*a3 <= v3)
  {
    float v6 = a3[7];
    float v7 = a3[6];
    float v4 = a3[1];
    float v3 = *a3;
  }
  else
  {
    float v6 = a3[1];
    float v7 = *a3;
  }
  float v8 = a3[5];
  if (a3[2] <= v5)
  {
    float v9 = a3[5];
    float v10 = a3[4];
    float v8 = a3[3];
    float v5 = a3[2];
  }
  else
  {
    float v9 = a3[3];
    float v10 = a3[2];
  }
  if (v3 <= v5)
  {
    float v11 = v8;
    float v12 = v5;
    float v8 = v4;
    float v5 = v3;
  }
  else
  {
    float v11 = v4;
    float v12 = v3;
  }
  if (v7 <= v10)
  {
    float v13 = v9;
    float v14 = v10;
    float v9 = v6;
    float v10 = v7;
  }
  else
  {
    float v13 = v6;
    float v14 = v7;
  }
  if (v10 <= v12)
  {
    float v15 = v11;
    float v16 = v12;
    float v11 = v9;
    float v12 = v10;
  }
  else
  {
    float v15 = v9;
    float v16 = v10;
  }
  if (v11 >= v8)
  {
    float v17 = v11;
    float v18 = v12;
    float v11 = v8;
    float v12 = v5;
  }
  else
  {
    float v17 = v8;
    float v18 = v5;
  }
  if (v13 >= v15)
  {
    float v19 = v13;
    float v20 = v14;
    float v13 = v15;
    float v14 = v16;
  }
  else
  {
    float v19 = v15;
    float v20 = v16;
  }
  a1->m_p1.m_x = v18 + -2.0;
  a1->m_p1.m_y = v17 + 2.0;
  a1->m_p2.m_x = v12 + -2.0;
  a1->m_p2.m_y = v11 + -2.0;
  a1->m_p3.m_x = v14 + 2.0;
  a1->m_p3.m_y = v13 + -2.0;
  float result = v19 + 2.0;
  a1->m_p4.m_x = v20 + 2.0;
  a1->m_p4.m_y = result;
  return result;
}

void sub_199438108(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    float v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199438A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

uint64_t isBuiltInScrollViewPanGestureRecognizer(UIGestureRecognizer *a1)
{
  if (qword_1E93CFA00 != -1) {
    dispatch_once(&qword_1E93CFA00, &__block_literal_global_2911);
  }
  return objc_opt_isKindOfClass() & 1;
}

void sub_1994397FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_199439A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Block_release(v13);
  _Unwind_Resume(a1);
}

void sub_199439CA4(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_19943A040(_Unwind_Exception *a1)
{
}

void sub_19943A3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19943A4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:sn180100]<WebCore::ElementContext,WebCore::ElementContext>(uint64_t a1, const ElementContext *a2)
{
  if (*(unsigned char *)(a1 + 80)) {
    BOOL v2 = a2[1].documentIdentifier.m_object[8] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*(unsigned char *)(a1 + 80) != 0) == (a2[1].documentIdentifier.m_object[8] != 0);
  }
  BOOL v4 = *(float *)a1 == a2->boundingRect.m_location.m_x && *(float *)(a1 + 4) == a2->boundingRect.m_location.m_y;
  if (v4
    && (*(float *)(a1 + 8) == a2->boundingRect.m_size.m_width
      ? (BOOL v5 = *(float *)(a1 + 12) == a2->boundingRect.m_size.m_height)
      : (BOOL v5 = 0),
        v5))
  {
    return WebCore::ElementContext::isSameElement((WebCore::ElementContext *)a1, a2);
  }
  else
  {
    return 0;
  }
}

void sub_19943B300(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *cancelPotentialTapIfNecessary(unsigned char *result)
{
  if (result[2956])
  {
    uint64_t v1 = result;
    [result _endPotentialTapAndEnableDoubleTapGesturesIfNecessary];
    [v1 _cancelInteraction];
    uint64_t v2 = v1[53];
    uint64_t v3 = *(void *)(v2 + 256);
    char v4 = 0;
    return (unsigned char *)WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CancelPotentialTap>(v3, (uint64_t)&v4, *(void *)(*(void *)(v2 + 32) + 1928), 0);
  }
  return result;
}

void sub_19943BE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id location)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19943C788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v13);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v13);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_19943CA8C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18)
{
}

void sub_19943CBD0(_Unwind_Exception *exception_object)
{
}

void sub_19943CF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_19943E860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19943EA64(_Unwind_Exception *a1)
{
  CFRelease(v1);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19943EC48(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  WTF::fastFree(v10, a2);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19943EF50(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19943F0B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19943F520(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19943F618(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19943F710(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19943F808(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19943F900(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19943F9F8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19943FAF0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19943FBE8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19943FCE0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19943FDD8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19943FED0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19943FFF8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199440104(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199440218(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199440444(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199440674(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if ((a11 & 0x8000000000000) != 0)
  {
    float v13 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199440940(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_199440BDC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a57) {
    WebKit::EditorState::PostLayoutData::~PostLayoutData(v57, a2);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199441808(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100](v3, a2);
  if (LOBYTE(STACK[0x220])) {
    WebKit::EditorState::PostLayoutData::~PostLayoutData(v2, v5);
  }
  _Unwind_Resume(a1);
}

void sub_199441A50(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199441B8C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199441C90(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199441DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_199442290(_Unwind_Exception *a1)
{
  CFRelease(v1);
  CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1994423BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_199442530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Block_release(0);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_199442860(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WebCore::DOMPasteAccessResponse)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_19944298C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_199442B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *logTextInteraction(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, char a10, int a11, char a12, int a13, char a14)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  long long v34 = 0;
  char v35 = 0;
  int v36 = 0;
  char v37 = 1;
  int v38 = 0;
  __int16 v39 = 0;
  int v40 = 0;
  uint64_t v20 = WTF::TextStream::operator<<();
  unint64_t v21 = [a2 state];
  if (v21 >= 6) {
    unsigned __int8 v22 = 0;
  }
  else {
    unsigned __int8 v22 = v21;
  }
  operator<<(v20, v22);
  if (*(unsigned char *)(a3 + 16))
  {
    WTF::TextStream::operator<<();
    if (!*(unsigned char *)(a3 + 16) || (WTF::TextStream::operator<<(), WTF::TextStream::operator<<(), !*(unsigned char *)(a3 + 16))) {
      __break(1u);
    }
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (a5)
  {
    WTF::TextStream::operator<<();
    uint64_t v23 = WTF::TextStream::operator<<();
    if (a4 >= 6) {
      unsigned __int8 v24 = 0;
    }
    else {
      unsigned __int8 v24 = a4;
    }
    operator<<(v23, v24);
  }
  if (a7)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (a10)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (a14)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    if (a12)
    {
      WTF::TextStream::operator<<();
      if ((a12 & 2) == 0)
      {
LABEL_24:
        if ((a12 & 4) == 0) {
          goto LABEL_27;
        }
        WTF::TextStream::operator<<();
        goto LABEL_26;
      }
      WTF::TextStream::operator<<();
    }
    else if ((a12 & 2) == 0)
    {
LABEL_26:
      WTF::TextStream::operator<<();
      goto LABEL_27;
    }
    WTF::TextStream::operator<<();
    goto LABEL_24;
  }
LABEL_27:
  char v25 = qword_1EB3586B8;
  if (os_log_type_enabled((os_log_t)qword_1EB3586B8, OS_LOG_TYPE_DEFAULT))
  {
    WTF::TextStream::release((uint64_t *)&v32, (WTF::TextStream *)&v34);
    WTF::String::utf8();
    if (v33) {
      uint64_t v27 = (char *)v33 + 16;
    }
    else {
      uint64_t v27 = 0;
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v42 = a1;
    __int16 v43 = 2080;
    uint64_t v44 = v27;
    _os_log_impl(&dword_1985F2000, v25, OS_LOG_TYPE_DEFAULT, "Text interaction changing selection using '%s' (%s).", buf, 0x16u);
    uint64_t v28 = v33;
    uint64_t v33 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 1) {
        WTF::fastFree(v28, v26);
      }
      else {
        --*(_DWORD *)v28;
      }
    }
    uint64_t v29 = v32;
    uint64_t v32 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v26);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
  }
  uint64_t v30 = v35;
  char v35 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v26);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  float result = v34;
  long long v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v26);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_199442F74(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199443138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1994432E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_199443400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_19944360C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_19944366C()
{
  if (!v0) {
    JUMPOUT(0x199443664);
  }
  JUMPOUT(0x19944365CLL);
}

void sub_1994437BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, int a12)
{
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1994439B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Block_release(aBlock);
  objc_destroyWeak(v12);
  _Unwind_Resume(a1);
}

void sub_199443BFC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199443EEC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v23 = v22;
  uint64_t v25 = *((void *)v23 + 12);
  uint64_t v26 = v23;
  *((void *)v23 + 12) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  WTF::fastFree(v26, a2);
  objc_destroyWeak(v21);
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  _Unwind_Resume(a1);
}

void sub_1994441F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1994443E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1994445B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1994447BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_199444958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_199444CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1994451B4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199445398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _Block_release(v9);
  _Unwind_Resume(a1);
}

void sub_199445558(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199445654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WebKit::RequestAutocorrectionContextResult)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_19944570C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1994458D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _Block_release(v11);
  _Unwind_Resume(a1);
}

void sub_199445C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_199445E4C(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

void sub_1994460F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  if (a23) {
    WebKit::WebKeyboardEvent::~WebKeyboardEvent((WebKit::WebKeyboardEvent *)&a11, v24);
  }
  _Unwind_Resume(a1);
}

void sub_199446368(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199446494(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    uint64_t v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199446660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1994468A8(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + v2) = 0;
  _Unwind_Resume(a1);
}

void sub_199446D6C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  WTF::fastFree(v9, a2);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_199447324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, WTF::StringImpl *a19)
{
  if (v19) {
    CFRelease(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_1994476FC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)v10 == 2) {
    WTF::StringImpl::destroy(v10, a2);
  }
  else {
    *(_DWORD *)v10 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

id textSelectionRects(uint64_t *a1, double a2)
{
  char v4 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)a1 + 3)];
  unsigned int v5 = *((_DWORD *)a1 + 3);
  if (v5)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = 84 * v5;
    do
    {
      float v8 = [[WKTextSelectionRect alloc] initWithSelectionGeometry:v6 scaleFactor:a2];
      if (v8)
      {
        [v4 addObject:v8];
        CFRelease(v8);
      }
      v6 += 84;
      v7 -= 84;
    }
    while (v7);
  }
  float v9 = (void *)CFMakeCollectable(v4);

  return v9;
}

void sub_19944791C(_Unwind_Exception *a1)
{
  CFRelease(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void sub_1994482B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if ((a25 & 0x8000000000000) != 0)
  {
    uint64_t v28 = (unsigned int *)(a25 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a25 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, a2);
    }
  }
  if ((a22 & 0x8000000000000) != 0)
  {
    uint64_t v29 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, a2);
    }
  }
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a27, v30);
  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v31);
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, v32);
  _Unwind_Resume(a1);
}

void sub_1994485AC(_Unwind_Exception *exception_object)
{
  if (v4)
  {
    CFRelease(v4);
    if (!v3)
    {
LABEL_3:
      if (!v2) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  CFRelease(v3);
  if (!v2)
  {
LABEL_4:
    if (!v1) {
LABEL_10:
    }
      _Unwind_Resume(exception_object);
LABEL_9:
    CFRelease(v1);
    goto LABEL_10;
  }
LABEL_8:
  CFRelease(v2);
  if (!v1) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_199448780(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v5);
  _Unwind_Resume(a1);
}

void sub_199448E48(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19944921C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf, uint64_t a19, uint64_t a20,CFTypeRef a21)
{
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  if (cf)
  {
    CFRelease(cf);
    if (!v22)
    {
LABEL_7:
      if (!v21) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if (!v22)
  {
    goto LABEL_7;
  }
  CFRelease(v22);
  if (!v21) {
LABEL_9:
  }
    _Unwind_Resume(exception_object);
LABEL_8:
  CFRelease(v21);
  goto LABEL_9;
}

void sub_1994492B4()
{
  if (v0) {
    JUMPOUT(0x1994492A4);
  }
  JUMPOUT(0x199449288);
}

void sub_1994492C0()
{
  if (!v0) {
    JUMPOUT(0x199449294);
  }
  JUMPOUT(0x19944928CLL);
}

void sub_199449424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  CFRelease(v12);
  _Unwind_Resume(a1);
}

void sub_199449510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_199449C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location, CFTypeRef cf, void *aBlock)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(aBlock);
  CFTypeRef v15 = cf;
  CFTypeRef cf = 0;
  if (v15) {
    CFRelease(v15);
  }
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_199449CCC()
{
}

void sub_199449CD4()
{
}

void sub_199449E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id location, void *aBlock)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(aBlock);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19944A288(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19944A8EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19944ABC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, void *aBlock)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

void sub_19944AFAC(_Unwind_Exception *exception_object)
{
  *(unsigned char *)(v1 + v2) = v3;
  _Unwind_Resume(exception_object);
}

void sub_19944B3BC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19944CE00(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

void sub_19944D9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char a15, uint64_t a16, uint64_t *a17, uint64_t a18, void *a19)
{
  if (v20) {
    CFRelease(v20);
  }
  [a19 stopDeferringInputViewUpdates:5];
  WTF::ScopeExit<-[WKContentView(WKInteraction) _elementDidFocus:userIsInteracting:blurPreviousNode:activityStateChanges:userObject:]::$_69>::~ScopeExit(&a17);
  *(unsigned char *)(v19 + v22) = a14;
  *(unsigned char *)(v19 + v21) = a15;
  _Unwind_Resume(a1);
}

void sub_19944DAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19944DCF8(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

void sub_19944E334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 8))(a23);
  }
  _Unwind_Resume(exception_object);
}

void sub_19944E474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
}

void sub_19944E554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Block_release(v11);
  WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v13);
  _Unwind_Resume(a1);
}

void sub_19944E74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  objc_destroyWeak(v14);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19944EBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, uint64_t a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19944F1B4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18)
{
  if (a17) {
    WTF::fastFree(a17, a2);
  }
  if ((a16 & 0x8000000000000) != 0)
  {
    uint64_t v19 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19944F3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *aBlock)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  objc_destroyWeak(v11);
  _Block_release(aBlock);
  _Unwind_Resume(a1);
}

void sub_19944F5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock)
{
  _Block_release(aBlock);
  _Block_release(v14);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c113_ZTSKZ99__WKContentView_WKInteraction__prepareSelectionForContextMenuWithLocationInView_completionHandler__E4__77(uint64_t a1, uint64_t a2)
{
  float result = _Block_copy(*(const void **)(a2 + 32));
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c113_ZTSKZ99__WKContentView_WKInteraction__prepareSelectionForContextMenuWithLocationInView_completionHandler__E4__77(uint64_t a1)
{
}

void sub_19944F7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, uint64_t a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  _Block_release(aBlock);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_19944FD74(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19944FF7C(_Unwind_Exception *exception_object)
{
}

void sub_1994502F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFRelease(*(CFTypeRef *)(v11 + 8));
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(a1);
}

void sub_199450F64(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, WTF::StringImpl *a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, a2);
  if (a29)
  {
    uint64_t v32 = a24;
    a24 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v31);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
  }
  WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, v31);
  if (a21)
  {
    if (*(_DWORD *)a21 == 2) {
      WTF::StringImpl::destroy(a21, v33);
    }
    else {
      *(_DWORD *)a21 -= 2;
    }
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, v33);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, v33);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_1994513F8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned int *a18, WTF::StringImpl *a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  uint64_t v33 = *(unsigned int **)(v30 - 96);
  *(void *)(v30 - 96) = 0;
  if (v33) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v33, v32);
  }
  long long v34 = *(WTF::StringImpl **)(v30 - 104);
  *(void *)(v30 - 104) = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v32);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  char v35 = a18;
  a18 = 0;
  if (v35) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v35, v32);
  }
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, v32);
  if (a29)
  {
    char v37 = a24;
    a24 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v36);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
  }
  WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, v36);
  __int16 v39 = a21;
  a21 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, v38);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
  int v40 = a20;
  a20 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2) {
      WTF::StringImpl::destroy(v40, v38);
    }
    else {
      *(_DWORD *)v40 -= 2;
    }
  }
  uint64_t v41 = a19;
  a19 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, v38);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_1994517CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_199451AB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_199451F00(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_199452000(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1994520F8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1994521FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_199452284(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_199452AFC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_199452EF4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF *a25,int a26,uint64_t a27,_DWORD *a28,_DWORD *a29,_DWORD *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,int a43,char a44,WTF::StringImpl *a45,WTF::StringImpl *a46)
{
  BOOL v48 = a46;
  a46 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2) {
      WTF::StringImpl::destroy(v48, a2);
    }
    else {
      *(_DWORD *)v48 -= 2;
    }
  }
  char v49 = a45;
  a45 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2) {
      WTF::StringImpl::destroy(v49, a2);
    }
    else {
      *(_DWORD *)v49 -= 2;
    }
  }
  if (a44)
  {
    if (a42 != -1) {
      ((void (*)(uint64_t *, uint64_t *))off_1EEA0E610[a42])(&a9, &a35);
    }
    a42 = -1;
  }
  if (a33)
  {
    if ((a31 & 0x8000000000000) != 0)
    {
      unint64_t v55 = (unsigned int *)(a31 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a31 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v55);
        WTF::fastFree((WTF *)v55, a2);
      }
    }
    char v50 = a30;
    a30 = 0;
    if (v50)
    {
      if (v50[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v50 + 8))(v50);
      }
      else {
        --v50[2];
      }
    }
    uint64_t v51 = a29;
    a29 = 0;
    if (v51)
    {
      if (v51[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v51 + 8))(v51);
      }
      else {
        --v51[2];
      }
    }
    char v52 = a28;
    a28 = 0;
    if (v52)
    {
      if (v52[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v52 + 8))(v52);
      }
      else {
        --v52[2];
      }
    }
    unint64_t v53 = a25;
    if (a25)
    {
      a25 = 0;
      a26 = 0;
      WTF::fastFree(v53, a2);
    }
  }
  CFTypeRef v54 = cf;
  CFTypeRef cf = 0;
  if (v54) {
    CFRelease(v54);
  }
  _Block_release(v46);
  _Unwind_Resume(a1);
}

void sub_199453270(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_199453738(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_199453930(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1994539F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_199453BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _Block_release(v24);
  _Unwind_Resume(a1);
}

void sub_199453F94(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    CFRelease(v11);
  }
  if (a10)
  {
    char v13 = 0;
    uint64_t v14 = *(void *)(a10 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
    if (v13) {
      MEMORY[0x19972E8D0](v14);
    }
    uint64_t v15 = *(void *)(v14 + 8);
    int v16 = 1;
    uint64_t v17 = v15 - 1;
    *(void *)(v14 + 8) = v15 - 1;
    if (v15 == 1)
    {
      uint64_t v20 = *(void *)(v14 + 16);
      uint64_t v18 = *(void *)(v14 + 24);
      *(void *)(v14 + 24) = 0;
      BOOL v19 = v20 != 0;
    }
    else
    {
      uint64_t v18 = 0;
      BOOL v19 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
    if (v16 == 1)
    {
      if (v17) {
        goto LABEL_14;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v14);
      if (v17) {
        goto LABEL_14;
      }
    }
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    if (!v19) {
      WTF::fastFree((WTF *)v14, a2);
    }
  }
LABEL_14:
  if (v10[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
  }
  else {
    --v10[2];
  }
  _Unwind_Resume(exception_object);
}

void sub_199454460(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_199454918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,CFTypeRef cf,uint64_t a22,WTF::StringImpl *a23)
{
  CFRelease(v23);
  _Unwind_Resume(a1);
}

void sub_199454D94(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  CFRelease(*(CFTypeRef *)(v3 + 8));
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c79_ZTSKZ65__WKContentView_WKInteraction___prepareToDragPromisedAttachment__E4__80(uint64_t a1, uint64_t a2)
{
  char v4 = *(const void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    CFRetain(v4);
  }
  *(void *)(a1 + ++*(_DWORD *)(this + 40) = 0;
  objc_copyWeak((id *)(a1 + 40), (id *)(a2 + 40));
  unsigned int v5 = *(_DWORD **)(a2 + 48);
  if (v5) {
    *v5 += 2;
  }
  *(void *)(a1 + 48) = v5;
  return WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 56, a2 + 56);
}

void sub_199454E80(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  unsigned int v5 = *(WTF::StringImpl **)(v2 + 48);
  *(void *)(v2 + 48) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  objc_destroyWeak(v3);
  uint64_t v6 = *(const void **)(v2 + 32);
  *(void *)(v2 + 32) = 0;
  if (v6) {
    CFRelease(v6);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c79_ZTSKZ65__WKContentView_WKInteraction___prepareToDragPromisedAttachment__E4__80(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, a2);
  char v4 = *(WTF::StringImpl **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  objc_destroyWeak((id *)(a1 + 40));
  unsigned int v5 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v5)
  {
    CFRelease(v5);
  }
}

void sub_1994554C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf,CFTypeRef a34)
{
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v35);
  if (!v34 || (CFRelease(v34), v35)) {
    CFRelease(v35);
  }
  if (v34) {
    CFRelease(v34);
  }
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c121_ZTSKZ106__WKContentView_WKInteraction___itemsForBeginningOrAddingToSessionWithRegistrationLists_stagedDragSource__E4__81(uint64_t a1, uint64_t a2)
{
  char v4 = *(const void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    CFRetain(v4);
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_1994556B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c121_ZTSKZ106__WKContentView_WKInteraction___itemsForBeginningOrAddingToSessionWithRegistrationLists_stagedDragSource__E4__81(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_199455824(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  WTF::fastFree(v10, a2);
  _Block_release(aBlock);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_199455988(_Unwind_Exception *a1)
{
  _Block_release(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_199455D3C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,int a24,uint64_t a25)
{
  if (a23) {
    WTF::fastFree(a23, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1994562C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, CFTypeRef cf, void *aBlock, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef a18, void *a19)
{
  objc_destroyWeak(v19);
  _Block_release(aBlock);
  CFTypeRef v21 = cf;
  CFTypeRef cf = 0;
  if (v21) {
    CFRelease(v21);
  }
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1994567C0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF *a25,int a26,uint64_t a27,_DWORD *a28,_DWORD *a29,_DWORD *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,int a43,char a44,WTF::StringImpl *a45,WTF::StringImpl *a46)
{
  uint64_t v47 = a46;
  a46 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2) {
      WTF::StringImpl::destroy(v47, a2);
    }
    else {
      *(_DWORD *)v47 -= 2;
    }
  }
  BOOL v48 = a45;
  a45 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2) {
      WTF::StringImpl::destroy(v48, a2);
    }
    else {
      *(_DWORD *)v48 -= 2;
    }
  }
  if (a44)
  {
    if (a42 != -1) {
      ((void (*)(uint64_t *, uint64_t *))off_1EEA0E610[a42])(&a9, &a35);
    }
    a42 = -1;
  }
  if (a33)
  {
    if ((a31 & 0x8000000000000) != 0)
    {
      CFTypeRef v54 = (unsigned int *)(a31 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a31 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v54);
        WTF::fastFree((WTF *)v54, a2);
      }
    }
    char v49 = a30;
    a30 = 0;
    if (v49)
    {
      if (v49[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v49 + 8))(v49);
      }
      else {
        --v49[2];
      }
    }
    char v50 = a29;
    a29 = 0;
    if (v50)
    {
      if (v50[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v50 + 8))(v50);
      }
      else {
        --v50[2];
      }
    }
    uint64_t v51 = a28;
    a28 = 0;
    if (v51)
    {
      if (v51[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v51 + 8))(v51);
      }
      else {
        --v51[2];
      }
    }
    char v52 = a25;
    if (a25)
    {
      a25 = 0;
      a26 = 0;
      WTF::fastFree(v52, a2);
    }
  }
  CFTypeRef v53 = cf;
  CFTypeRef cf = 0;
  if (v53) {
    CFRelease(v53);
  }
  _Unwind_Resume(exception_object);
}

void sub_199456C88(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17, _DWORD *a18, _DWORD *a19, _DWORD *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF *a30,int a31,uint64_t a32,_DWORD *a33,_DWORD *a34,_DWORD *a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a38)
  {
    if ((a36 & 0x8000000000000) != 0)
    {
      __int16 v39 = (unsigned int *)(a36 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a36 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v39);
        WTF::fastFree((WTF *)v39, a2);
      }
    }
    if (a35)
    {
      if (a35[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a35 + 8))(a35);
      }
      else {
        --a35[2];
      }
    }
    if (a34)
    {
      if (a34[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a34 + 8))(a34);
      }
      else {
        --a34[2];
      }
    }
    if (a33)
    {
      if (a33[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a33 + 8))(a33);
      }
      else {
        --a33[2];
      }
    }
    if (a30) {
      WTF::fastFree(a30, a2);
    }
  }
  if (a23)
  {
    if ((a21 & 0x8000000000000) != 0)
    {
      int v40 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v40);
        WTF::fastFree((WTF *)v40, a2);
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a18)
    {
      if (a18[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a18 + 8))(a18);
      }
      else {
        --a18[2];
      }
    }
    if (a15) {
      WTF::fastFree(a15, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199457134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, uint64_t a17)
{
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(*(CFTypeRef *)(v18 + 8));
  CFRelease(v17);
  CFRelease(v17);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c98_ZTSKZ84__WKContentView_WKInteraction__dragInteraction_willAnimateLiftWithAnimator_session__E4__85(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  uint64_t v5 = *(void *)(a2 + 56);
  if (v5) {
    CFTypeRef result = CFRetain(*(CFTypeRef *)(v5 + 8));
  }
  *(void *)(a1 + 56) = v5;
  return result;
}

void sub_199457328(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c98_ZTSKZ84__WKContentView_WKInteraction__dragInteraction_willAnimateLiftWithAnimator_session__E4__85(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = *(const void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_19945797C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, CFTypeRef a15, uint64_t a16)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(*(CFTypeRef *)(v18 + 8));
  }
  if (v17) {
    CFRelease(v17);
  }
  CFRelease(v16);
  _Unwind_Resume(a1);
}

void sub_199457A00()
{
  if (!v0) {
    JUMPOUT(0x1994579F8);
  }
  JUMPOUT(0x1994579F0);
}

void sub_199457B1C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c97_ZTSKZ83__WKContentView_WKInteraction__dragInteraction_item_willAnimateCancelWithAnimator__E4__86(void *a1, void *a2)
{
  char v4 = (const void *)a2[4];
  a1[4] = v4;
  if (v4) {
    CFRetain(v4);
  }
  CFTypeRef result = (CFTypeRef)a2[5];
  a1[5] = result;
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  uint64_t v6 = a2[6];
  if (v6) {
    CFTypeRef result = CFRetain(*(CFTypeRef *)(v6 + 8));
  }
  a1[6] = v6;
  return result;
}

void sub_199457BA0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c97_ZTSKZ83__WKContentView_WKInteraction__dragInteraction_item_willAnimateCancelWithAnimator__E4__86(void *a1)
{
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = (const void *)a1[5];
  a1[5] = 0;
  if (v3) {
    CFRelease(v3);
  }
  char v4 = (const void *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    CFRelease(v4);
  }
}

void sub_199457D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock)
{
  _Block_release(aBlock);
  _Block_release(v14);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c92_ZTSKZ78__WKContentView_WKInteraction__dragInteraction_prepareDragSession_completion__E4__87(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = _Block_copy(*(const void **)(a2 + 32));
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c92_ZTSKZ78__WKContentView_WKInteraction__dragInteraction_prepareDragSession_completion__E4__87(uint64_t a1)
{
}

void sub_199457E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock)
{
  _Block_release(aBlock);
  _Block_release(v14);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c113_ZTSKZ99__WKContentView_WKInteraction__dragInteraction_itemsForAddingToSession_forTouchAtPoint_completion__E4__88(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = _Block_copy(*(const void **)(a2 + 32));
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c113_ZTSKZ99__WKContentView_WKInteraction__dragInteraction_itemsForAddingToSession_forTouchAtPoint_completion__E4__88(uint64_t a1)
{
}

void sub_1994581DC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  CFTypeRef v21 = a20;
  a20 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, a2);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_199458508(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  CFTypeRef v21 = a20;
  a20 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, a2);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_199458AB4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::StringImpl *a35)
{
  int v36 = a35;
  a35 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, a2);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a30, a2);
  _Unwind_Resume(a1);
}

void sub_199458B9C()
{
}

void *extractItemProvidersFromDragItems(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(a1);
        }
        uint64_t v7 = [*(id *)(*((void *)&v9 + 1) + 8 * v6) itemProvider];
        if (v7) {
          [v2 addObject:v7];
        }
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
  return v2;
}

void sub_199458F50(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

uint64_t __copy_helper_block_e8_32c74_ZTSKZ60__WKContentView_WKInteraction__dropInteraction_performDrop__E4__89(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    CFRetain(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 50) = *(_OWORD *)(a2 + 50);
  *(_OWORD *)(a1 + ++*(_DWORD *)(this + 40) = v5;
  uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 72, a2 + 72);
  long long v7 = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v7;
  uint64_t v8 = *(_DWORD **)(a2 + 112);
  if (v8) {
    *v8 += 2;
  }
  *(void *)(a1 + 112) = v8;
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  return result;
}

void sub_199459040(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c74_ZTSKZ60__WKContentView_WKInteraction__dropInteraction_performDrop__E4__89(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 72, a2);
  uint64_t v4 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v4)
  {
    CFRelease(v4);
  }
}

void sub_199459188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v14);
  _Unwind_Resume(a1);
}

void sub_199459228(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c95_ZTSKZ81__WKContentView_WKInteraction__dropInteraction_item_willAnimateDropWithAnimator__E4__90(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c95_ZTSKZ81__WKContentView_WKInteraction__dropInteraction_item_willAnimateDropWithAnimator__E4__90(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_19945930C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1994594CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_199459930(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_199459CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (v26) {
    CFRelease(v26);
  }
  _Unwind_Resume(exception_object);
}

void createTargetedPreview(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(float *)(a5 + 8) <= 0.0) {
    goto LABEL_14;
  }
  if (!a2) {
    goto LABEL_14;
  }
  if (*(float *)(a5 + 12) <= 0.0) {
    goto LABEL_14;
  }
  if (![a4 window]) {
    goto LABEL_14;
  }
  WebCore::FloatRect::operator CGRect();
  objc_msgSend(a3, "convertRect:toView:", a4);
  v35.origin.x = v14;
  v35.origin.y = v15;
  v35.size.width = v16;
  v35.size.height = v17;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v36, &v35);
  float v18 = v37;
  if (v37 <= 0.0) {
    goto LABEL_14;
  }
  float v19 = v38;
  if (v38 > 0.0)
  {
    float v21 = *(float *)(a5 + 8);
    float v20 = *(float *)(a5 + 12);
    uint64_t v22 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a6 + 12)];
    uint64_t v23 = *(unsigned int *)(a6 + 12);
    if (v23)
    {
      float v24 = v18 / v21;
      uint64_t v25 = *(CGPoint **)a6;
      uint64_t v26 = 16 * v23;
      float v27 = v19 / v20;
      do
      {
        v35.origin = *v25;
        WebCore::FloatRect::scale((WebCore::FloatRect *)&v35, v24, v27);
        uint64_t v28 = (void *)MEMORY[0x1E4F29238];
        WebCore::FloatRect::operator CGRect();
        uint64_t v29 = objc_msgSend(v28, "valueWithCGRect:");
        if (v29) {
          [v22 addObject:v29];
        }
        ++v25;
        v26 -= 16;
      }
      while (v26);
    }
    if ([v22 count]) {
      id v30 = (id)[objc_alloc(MEMORY[0x1E4F42CF8]) initWithTextLineRects:v22];
    }
    else {
      id v30 = objc_alloc_init(MEMORY[0x1E4F42CF8]);
    }
    int v31 = v30;
    if (!a7) {
      a7 = [MEMORY[0x1E4F428B8] clearColor];
    }
    [v31 setBackgroundColor:a7];
    WebCore::FloatRect::operator CGRect();
    double MidX = CGRectGetMidX(v39);
    WebCore::FloatRect::operator CGRect();
    uint64_t v33 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E4F42D00]), "initWithContainer:center:", a4, MidX, CGRectGetMidY(v40));
    long long v34 = (void *)[objc_alloc(MEMORY[0x1E4F42AA0]) initWithImage:a2];
    WebCore::FloatRect::operator CGRect();
    objc_msgSend(v34, "setFrame:");
    *a1 = [objc_alloc(MEMORY[0x1E4F42ED8]) initWithView:v34 parameters:v31 target:v33];
    if (v34) {
      CFRelease(v34);
    }
    if (v33) {
      CFRelease(v33);
    }
    if (v31) {
      CFRelease(v31);
    }
    if (v22) {
      CFRelease(v22);
    }
  }
  else
  {
LABEL_14:
    *a1 = 0;
  }
}

void sub_19945A100(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19945A204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

WebCore::TextIndicatorData *__copy_helper_block_e8_32c33_ZTSN7WebCore17TextIndicatorDataE(uint64_t a1, uint64_t a2)
{
  return WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)(a1 + 32), (const WebCore::TextIndicatorData *)(a2 + 32));
}

void __destroy_helper_block_e8_32c33_ZTSN7WebCore17TextIndicatorDataE(uint64_t a1, void *a2)
{
}

void sub_19945A3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void createFallbackTargetedPreview(UIView *a1, UIView *a2, const WebCore::FloatRect *a3, UIColor *a4, uint64_t a5)
{
  if ([(WebCore::FloatRect *)a3 window]
    && *(float *)&a4[1].super.isa > 0.0
    && *((float *)&a4[1].super.isa + 1) > 0.0)
  {
    id v10 = objc_alloc_init(MEMORY[0x1E4F42CF8]);
    long long v11 = v10;
    if (a5) {
      [v10 setBackgroundColor:a5];
    }
    WebCore::FloatRect::operator CGRect();
    long long v12 = -[UIView resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:](a2, "resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:", 0);
    char v13 = v12;
    if (v12) {
      CFRetain(v12);
    }
    else {
      char v13 = objc_opt_new();
    }
    WebCore::FloatRect::operator CGRect();
    -[UIView convertRect:toView:](a2, "convertRect:toView:", a3);
    double x = v21.origin.x;
    double y = v21.origin.y;
    double width = v21.size.width;
    double height = v21.size.height;
    if (CGRectIsEmpty(v21))
    {
      a1->super.super.isa = 0;
    }
    else
    {
      objc_msgSend(v13, "setFrame:", x, y, width, height);
      v22.origin.double x = x;
      v22.origin.double y = y;
      v22.size.double width = width;
      v22.size.double height = height;
      double MidX = CGRectGetMidX(v22);
      v23.origin.double x = x;
      v23.origin.double y = y;
      v23.size.double width = width;
      v23.size.double height = height;
      float v19 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E4F42D00]), "initWithContainer:center:", a3, MidX, CGRectGetMidY(v23));
      a1->super.super.isa = (Class)[objc_alloc(MEMORY[0x1E4F42ED8]) initWithView:v13 parameters:v11 target:v19];
      if (v19) {
        CFRelease(v19);
      }
    }
    if (v13) {
      CFRelease(v13);
    }
    if (v11)
    {
      CFRelease(v11);
    }
  }
  else
  {
    a1->super.super.isa = 0;
  }
}

void sub_19945A5E4(_Unwind_Exception *a1)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void sub_19945AAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (v29) {
    CFRelease(v29);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_19945B144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_19945B310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, CFTypeRef a18, void *aBlock)
{
  if (cf) {
    CFRelease(cf);
  }
  _Block_release(v21);
  if (v20) {
    CFRelease(v20);
  }
  if (v19) {
    CFRelease(v19);
  }
  _Unwind_Resume(a1);
}

void sub_19945B384()
{
  if (!v0) {
    JUMPOUT(0x19945B370);
  }
  JUMPOUT(0x19945B368);
}

void sub_19945B438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock)
{
  _Block_release(aBlock);
  _Block_release(v14);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c105_ZTSKZ91__WKContentView_WKInteraction__selectPositionAtPoint_withContextRequest_completionHandler__E4__94(void *a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  a1[4] = v4;
  if (v4) {
    CFRetain(v4);
  }
  long long v5 = *(const void **)(a2 + 40);
  a1[5] = v5;
  if (v5) {
    CFRetain(v5);
  }
  CFTypeRef result = _Block_copy(*(const void **)(a2 + 48));
  a1[6] = result;
  return result;
}

void sub_19945B4AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c105_ZTSKZ91__WKContentView_WKInteraction__selectPositionAtPoint_withContextRequest_completionHandler__E4__94(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 48));
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_19945B7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _Block_release(v12);
  objc_destroyWeak(v11);
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(a1);
}

void sub_19945BA58(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19945BC20(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19945C11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(v10);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19945C1F4(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_e8_32c79_ZTSKZ65__WKContentView_WKInteraction___updateLastPointerRegionIfNeeded__E4__98(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = a1 + 32;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v3 + 8) = result;
  return result;
}

void __destroy_helper_block_e8_32c79_ZTSKZ65__WKContentView_WKInteraction___updateLastPointerRegionIfNeeded__E4__98(uint64_t a1)
{
}

void sub_19945CC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,CFTypeRef a25)
{
  if (a20) {
    CFRelease(*(CFTypeRef *)(a20 + 8));
  }
  CFRelease(*(CFTypeRef *)(v25 + 8));
  if (v26) {
    CFRelease(v26);
  }
  CFRelease(*(CFTypeRef *)(v25 + 8));
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c38_ZTSN3WTF9RetainPtrI14NSItemProviderEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c38_ZTSN3WTF9RetainPtrI14NSItemProviderEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_19945CF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
}

void sub_19945D010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Block_release(v11);
  WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v13);
  _Unwind_Resume(a1);
}

void sub_19945D248(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::TextIndicator>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_19945D3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_19945D420(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c58_ZTSKZ44__WKContentView_WKInteraction__startFadeOut_E4__99(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c58_ZTSKZ44__WKContentView_WKInteraction__startFadeOut_E4__99(uint64_t a1)
{
}

void sub_19945D844(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10) {
    CFRelease(v10);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19945D98C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19945DE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  _Block_release(v12);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v14);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::valueOrDefault<std::optional<WebKit::ImageAnalysisContextMenuActionData> &>(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(unsigned char *)(a2 + 24))
  {
    *(_WORD *)CFTypeRef result = *(_WORD *)a2;
    uint64_t v4 = *(const void **)(a2 + 8);
    result[1] = v4;
    if (v4) {
      CFRetain(v4);
    }
    CFTypeRef result = *(void **)(a2 + 16);
    v2[2] = result;
    if (result) {
      return CFRetain(result);
    }
  }
  else
  {
    *(_WORD *)CFTypeRef result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  return result;
}

void sub_19945DF20(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = 0;
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19945E4B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19945E5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_19945E80C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19945EA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  *id v10 = 0;
  if (v11) {
    CFRelease(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_19945EF24(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, CFTypeRef cf, CFTypeRef a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef a17)
{
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v19 = *(void *)(v17 - 56);
  *(void *)(v17 - 56) = 0;
  if (v19) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v19, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19945F2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19) {
    WTF::RefCounted<WebKit::ImageAnalysisGestureDeferralToken>::deref(a19);
  }
  objc_destroyWeak(v20);
  if (a12) {
    WTF::RefCounted<WebKit::ImageAnalysisGestureDeferralToken>::deref(a12);
  }
  objc_destroyWeak(v19);
  _Unwind_Resume(a1);
}

void sub_19945F730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,CFTypeRef cf,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,CFTypeRef a44,uint64_t a45)
{
  objc_destroyWeak(v46);
  if (a25) {
    WTF::RefCounted<WebKit::ImageAnalysisGestureDeferralToken>::deref(a25);
  }
  if (cf) {
    CFRelease(cf);
  }
  objc_destroyWeak(v47);
  if (a9) {
    CFRelease(a9);
  }
  if (a10) {
    CFRelease(a10);
  }
  CFRelease(v45);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c76_ZTSKZ61__WKContentView_WKInteraction__imageAnalysisGestureDidBegin__E5__102(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 32);
  *(void *)(a1 + ++*(_DWORD *)(this + 40) = 0;
  long long v5 = (id *)(a1 + 40);
  *(v5 - 1) = v4;
  objc_copyWeak(v5, (id *)(a2 + 40));
  uint64_t v6 = *(_DWORD **)(a2 + 48);
  if (v6) {
    ++*v6;
  }
  *(void *)(a1 + 48) = v6;
}

void __destroy_helper_block_e8_32c76_ZTSKZ61__WKContentView_WKInteraction__imageAnalysisGestureDidBegin__E5__102(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    WTF::RefCounted<WebKit::ImageAnalysisGestureDeferralToken>::deref(v2);
  }

  objc_destroyWeak((id *)(a1 + 40));
}

void sub_19945FCB8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id location, WTF *a12, WTF *a13, uint64_t a14, WTF *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned int *a25,WTF *a26)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  int v31 = a13;
  a13 = 0;
  if (v31) {
    WTF::ThreadSafeRefCounted<WTF::Box<WebKit::ImageAnalysisContextMenuActionData>::Data,(WTF::DestructionThread)0>::deref(v31, a2);
  }
  uint64_t v32 = (unsigned int *)a12;
  a12 = 0;
  if (v32) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v32);
  }
  objc_destroyWeak(&location);
  long long v34 = a26;
  a26 = 0;
  if (v34) {
    WTF::ThreadSafeRefCounted<WTF::Box<WebKit::ImageAnalysisContextMenuActionData>::Data,(WTF::DestructionThread)0>::deref(v34, v33);
  }
  CGRect v35 = a25;
  a25 = 0;
  if (v35) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v35);
  }
  objc_destroyWeak(v28);
  int v36 = *(const void **)(v29 - 128);
  *(void *)(v29 - 128) = 0;
  if (v36) {
    CFRelease(v36);
  }
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v27);
  objc_destroyWeak((id *)(v29 - 120));
  WTF::ThreadSafeRefCounted<WTF::Box<WebKit::ImageAnalysisContextMenuActionData>::Data,(WTF::DestructionThread)0>::deref(v26, v37);
  _Unwind_Resume(a1);
}

void sub_19945FFF4(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_e8_32c125_ZTSKZ109__WKContentView_WKInteraction___completeImageAnalysisRequestForContextMenu_requestIdentifier_hasTextResults__E5__104(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + ++*(_DWORD *)(this + 40) = 0;
  uint64_t v5 = a1 + 40;
  *(void *)(a1 + 32) = v4;
  objc_copyWeak((id *)(a1 + 40), (id *)(a2 + 40));
  *(void *)(v5 + 8) = *(void *)(a2 + 48);
  uint64_t v6 = *(atomic_uint **)(a2 + 56);
  atomic_fetch_add(v6, 1u);
  *(void *)(v5 + ++*(_DWORD *)(this + 16) = v6;
  long long v7 = *(atomic_uint **)(a2 + 64);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  *(void *)(a1 + 64) = v7;
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  return result;
}

void __destroy_helper_block_e8_32c125_ZTSKZ109__WKContentView_WKInteraction___completeImageAnalysisRequestForContextMenu_requestIdentifier_hasTextResults__E5__104(uint64_t a1, void *a2)
{
  uint64_t v3 = *(WTF **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::Box<WebKit::ImageAnalysisContextMenuActionData>::Data,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  uint64_t v4 = *(unsigned int **)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v4);
  }

  objc_destroyWeak((id *)(a1 + 40));
}

void sub_1994601A8(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_199460394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, CFTypeRef a15, WTF::StringImpl *a16)
{
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v17);
  if (v16) {
    CFRelease(v16);
  }
  float v20 = *(const void **)(v18 - 40);
  *(void *)(v18 - ++*(_DWORD *)(this + 40) = 0;
  if (v20) {
    CFRelease(v20);
  }
  CGRect v21 = *(const void **)(v18 - 48);
  *(void *)(v18 - 48) = 0;
  if (v21) {
    CFRelease(v21);
  }
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c95_ZTSKZ80__WKContentView_WKInteraction__actionSheetAssistant_copySubject_sourceMIMEType__E5__106(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    CFRetain(v4);
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_1994604D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c95_ZTSKZ80__WKContentView_WKInteraction__actionSheetAssistant_copySubject_sourceMIMEType__E5__106(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_199460810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, CFTypeRef a11, CFTypeRef cf, CFTypeRef a13, WTF *a14, id a15, CFTypeRef a16)
{
  objc_destroyWeak(&location);
  CFTypeRef v18 = cf;
  CFTypeRef cf = 0;
  if (v18) {
    CFRelease(v18);
  }
  CFTypeRef v19 = a13;
  a13 = 0;
  if (v19) {
    CFRelease(v19);
  }
  float v20 = a14;
  a14 = 0;
  if (v20) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v20, v17);
  }
  _Unwind_Resume(a1);
}

void sub_199460B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf, WTF *a20)
{
  objc_destroyWeak(v21);
  objc_destroyWeak((id *)&a9);
  if (v20) {
    CFRelease(v20);
  }
  CFTypeRef v24 = cf;
  CFTypeRef cf = 0;
  if (v24) {
    CFRelease(v24);
  }
  uint64_t v25 = a20;
  a20 = 0;
  if (v25) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v25, v23);
  }
  _Unwind_Resume(a1);
}

void sub_199460C3C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_e8_32c102_ZTSKZ87__WKContentView_WKInteraction__beginTextRecognitionForVideoInElementFullscreen_bounds__E5__107(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = a1 + 32;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v3 + 8) = result;
  return result;
}

void __destroy_helper_block_e8_32c102_ZTSKZ87__WKContentView_WKInteraction__beginTextRecognitionForVideoInElementFullscreen_bounds__E5__107(uint64_t a1)
{
}

void sub_199460F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_199461010(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c79_ZTSKZ64__WKContentView_WKInteraction__installImageAnalysisInteraction__E5__108(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c79_ZTSKZ64__WKContentView_WKInteraction__installImageAnalysisInteraction__E5__108(uint64_t a1)
{
}

void sub_199461288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c79_ZTSKZ64__WKContentView_WKInteraction__willPresentEditMenuWithAnimator__E5__109(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c79_ZTSKZ64__WKContentView_WKInteraction__willPresentEditMenuWithAnimator__E5__109(uint64_t a1)
{
}

void sub_199461400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c79_ZTSKZ64__WKContentView_WKInteraction__willDismissEditMenuWithAnimator__E5__110(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c79_ZTSKZ64__WKContentView_WKInteraction__willDismissEditMenuWithAnimator__E5__110(uint64_t a1)
{
}

void sub_1994616CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1994618A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, CFTypeRef cf)
{
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_199461A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, void *aBlock)
{
  _Block_release(v16);
  CFRelease(v15);
  if (v14) {
    CFRelease(v14);
  }
  _Unwind_Resume(a1);
}

void sub_199461AFC()
{
  if (!v0) {
    JUMPOUT(0x199461AE8);
  }
  JUMPOUT(0x199461AE0);
}

void *__copy_helper_block_e8_32c84_ZTSKZ69__WKContentView_WKInteraction__handleKeyEntry_withCompletionHandler__E5__112(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    CFRetain(v4);
  }
  __n128 result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + ++*(_DWORD *)(this + 40) = result;
  return result;
}

void sub_199461B58(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c84_ZTSKZ69__WKContentView_WKInteraction__handleKeyEntry_withCompletionHandler__E5__112(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2)
  {
    CFRelease(v2);
  }
}

void sub_199461CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_199461D08()
{
  if (!v0) {
    JUMPOUT(0x199461D00);
  }
  JUMPOUT(0x199461CF8);
}

void sub_199461DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_199461E38()
{
  if (!v0) {
    JUMPOUT(0x199461E30);
  }
  JUMPOUT(0x199461E28);
}

void sub_199461F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Block_release(v10);
  _Unwind_Resume(a1);
}

void sub_1994620A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock)
{
  _Block_release(aBlock);
  _Block_release(v14);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c108_ZTSKZ93__WKContentView_WKInteraction__selectTextForContextMenuWithLocationInView_completionHandler__E5__116(uint64_t a1, uint64_t a2)
{
  __n128 result = _Block_copy(*(const void **)(a2 + 32));
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c108_ZTSKZ93__WKContentView_WKInteraction__selectTextForContextMenuWithLocationInView_completionHandler__E5__116(uint64_t a1)
{
}

void sub_199462880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_199462A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_199462BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_199462E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_199463608(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_19946385C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf)
{
  CFRelease(v16);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c77_ZTSKZ62__WKContentView_WKTesting___simulateElementAction_atLocation__E5__121(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c77_ZTSKZ62__WKContentView_WKTesting___simulateElementAction_atLocation__E5__121(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_199463A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  CFRelease(v14);
  CFRelease(v14);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c78_ZTSKZ63__WKContentView_WKTesting___simulateLongPressActionAtLocation__E5__122(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c78_ZTSKZ63__WKContentView_WKTesting___simulateLongPressActionAtLocation__E5__122(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_199464364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c72_ZTSKZ57__WKContentView_WKTesting___contentsOfUserInterfaceItem__E5__123(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_199464FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef a17, CFTypeRef a18, CFTypeRef cf, uint64_t a20,uint64_t a21,CFTypeRef a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,CFTypeRef a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,CFTypeRef a38)
{
  if (a18) {
    CFRelease(a18);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a29) {
    CFRelease(a29);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (a38)
  {
    CFRelease(a38);
    if (!v39)
    {
LABEL_12:
      if (v40) {
        CFRelease(v40);
      }
      _Unwind_Resume(exception_object);
    }
  }
  else if (!v39)
  {
    goto LABEL_12;
  }
  CFRelease(v39);
  goto LABEL_12;
}

void *menuElementsFromDefaultActions(id *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = *a1;
  if (!v3 || ![v3 count]) {
    return 0;
  }
  uint64_t v5 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(*a1, "count"));
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v6 = *a1;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v13 != v9) {
          objc_enumerationMutation(v6);
        }
        objc_msgSend(v5, "addObject:", objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * i), "uiActionForElementInfo:", *a2));
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v8);
  }
  return v5;
}

uint64_t menuFromLegacyPreviewOrDefaultActions(void *a1, id *a2, const void **a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    goto LABEL_12;
  }
  uint64_t v7 = (void *)[a1 previewActionItems];
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = v7;
  if (![v7 count]) {
    goto LABEL_12;
  }
  CFTypeRef v19 = a3;
  float v20 = a2;
  uint64_t v9 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v8, "count"));
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id obj = v8;
  uint64_t v10 = [v8 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v25 != v11) {
          objc_enumerationMutation(obj);
        }
        long long v13 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        long long v14 = (void *)MEMORY[0x1E4F426E8];
        uint64_t v15 = [v13 title];
        uint64_t v16 = [v13 image];
        v28[0] = MEMORY[0x1E4F143A8];
        v28[1] = 3221225472;
        v28[2] = ___ZL30uiActionForLegacyPreviewActionP15UIPreviewActionP16UIViewController_block_invoke;
        v28[3] = &unk_1E5814040;
        v28[4] = v13;
        v28[5] = a1;
        objc_msgSend(v9, "addObject:", objc_msgSend(v14, "actionWithTitle:image:identifier:handler:", v15, v16, 0, v28));
      }
      uint64_t v10 = [obj countByEnumeratingWithState:&v24 objects:v29 count:16];
    }
    while (v10);
  }
  a3 = v19;
  a2 = v20;
  if (!v9)
  {
LABEL_12:
    uint64_t v17 = *a3;
    CGRect v23 = v17;
    if (v17) {
      CFRetain(v17);
    }
    uint64_t v9 = menuElementsFromDefaultActions(a2, &v23);
    if (v17) {
      CFRelease(v17);
    }
  }
  return [MEMORY[0x1E4F42B80] menuWithTitle:a4 children:v9];
}

void sub_199465608(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_199465744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v14);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c108_ZTSKZ93__WKContentView_WKInteractionPreview__contextMenuInteraction_configurationForMenuAtLocation__E5__127(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c108_ZTSKZ93__WKContentView_WKInteractionPreview__contextMenuInteraction_configurationForMenuAtLocation__E5__127(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_199465974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, void *aBlock, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef a17, void *a18)
{
  objc_destroyWeak(v18);
  _Block_release(aBlock);
  CFTypeRef v20 = cf;
  CFTypeRef cf = 0;
  if (v20) {
    CFRelease(v20);
  }
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_199465A90(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_199466340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *aBlock,WTF::StringImpl *a32)
{
  CFRelease(*(CFTypeRef *)(v33 + 8));
  _Block_release(v32);
  if (a26)
  {
    if (*(_DWORD *)a26 == 2) {
      WTF::StringImpl::destroy(a26, v35);
    }
    else {
      *(_DWORD *)a26 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t needsDeprecatedPreviewAPI(uint64_t a1)
{
  if (a1)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0
      || (objc_opt_respondsToSelector() & 1) != 0
      || (objc_opt_respondsToSelector() & 1) != 0
      || (objc_opt_respondsToSelector() & 1) != 0
      || (objc_opt_respondsToSelector() & 1) != 0
      || (objc_opt_respondsToSelector() & 1) != 0)
    {
      LOBYTE(a1) = 0;
    }
    else if ((objc_opt_respondsToSelector() & 1) != 0 {
           || (objc_opt_respondsToSelector() & 1) != 0
    }
           || (objc_opt_respondsToSelector() & 1) != 0
           || (objc_opt_respondsToSelector() & 1) != 0
           || (objc_opt_respondsToSelector() & 1) != 0)
    {
      LOBYTE(a1) = 1;
    }
    else
    {
      LOBYTE(a1) = objc_opt_respondsToSelector();
    }
  }
  return a1 & 1;
}

void sub_1994666D4(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c85_ZTSKZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__E5__129(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c85_ZTSKZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__E5__129(uint64_t a1)
{
}

void sub_199466760(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c85_ZTSKZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__E5__130(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c85_ZTSKZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__E5__130(uint64_t a1)
{
}

void sub_199466944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  CGRect v22 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v22);
  objc_end_catch();
}

void sub_199466BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_199466CA0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c119_ZTSKZ103__WKContentView_WKInteractionPreview__contextMenuInteraction_willDisplayMenuForConfiguration_animator__E5__131(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c119_ZTSKZ103__WKContentView_WKInteractionPreview__contextMenuInteraction_willDisplayMenuForConfiguration_animator__E5__131(uint64_t a1)
{
}

void sub_19946713C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf, CFTypeRef a20)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v21) {
    CFRelease(v21);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16UIViewControllerEE40c40_ZTSN3WTF9RetainPtrI16UIViewControllerEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    CFRetain(v4);
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_1994671FC(_Unwind_Exception *exception_object)
{
  id v3 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16UIViewControllerEE40c40_ZTSN3WTF9RetainPtrI16UIViewControllerEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
  id v3 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_1994674D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  CFRelease(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_1994676E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_199467BF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_199468404(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, uint64_t a14, CFTypeRef a15, CFTypeRef a16, CFTypeRef a17, CFTypeRef a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,WTF::StringImpl *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,CFTypeRef cf)
{
  if (v39) {
    CFRelease(v39);
  }
  if (a34)
  {
    if (*(_DWORD *)a34 == 2) {
      WTF::StringImpl::destroy(a34, a2);
    }
    else {
      *(_DWORD *)a34 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

NSString *previewIdentifierForElementAction(_WKElementAction *a1)
{
  int64_t v1 = [(_WKElementAction *)a1 type];
  CFTypeRef result = 0;
  switch(v1)
  {
    case 1:
      id v3 = &WKPreviewActionItemIdentifierOpen;
      goto LABEL_6;
    case 2:
      id v3 = &WKPreviewActionItemIdentifierCopy;
      goto LABEL_6;
    case 4:
      id v3 = &WKPreviewActionItemIdentifierAddToReadingList;
      goto LABEL_6;
    case 7:
      id v3 = &WKPreviewActionItemIdentifierShare;
LABEL_6:
      CFTypeRef result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

CFTypeRef __copy_helper_block_e8_40c47_ZTSN3WTF9RetainPtrI23_WKActivatedElementInfoEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSN3WTF9RetainPtrI23_WKActivatedElementInfoEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_199468B4C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    char v11 = 0;
    uint64_t v12 = *(void *)(a10 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
    if (v11) {
      MEMORY[0x19972E8D0](v12);
    }
    uint64_t v13 = *(void *)(v12 + 8);
    int v14 = 1;
    uint64_t v15 = v13 - 1;
    *(void *)(v12 + 8) = v13 - 1;
    if (v13 == 1)
    {
      uint64_t v18 = *(void *)(v12 + 16);
      uint64_t v16 = *(void *)(v12 + 24);
      *(void *)(v12 + 24) = 0;
      BOOL v17 = v18 != 0;
    }
    else
    {
      uint64_t v16 = 0;
      BOOL v17 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 == 1)
    {
      if (v15) {
        goto LABEL_12;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v12);
      if (v15) {
        goto LABEL_12;
      }
    }
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    if (!v17) {
      WTF::fastFree((WTF *)v12, a2);
    }
  }
LABEL_12:
  _Unwind_Resume(exception_object);
}

void sub_199468DBC(_Unwind_Exception *exception_object)
{
}

void sub_199468F4C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1994693C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1994695D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_199469774(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  *(void *)(v2 + ++*(_DWORD *)(this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199469888(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_199469990(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_199469A80(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199469C20(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WTF::VectorMover<false,WebKit::KeyEventAndCompletionBlock>::move(const void **a1, const void **a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      id v6 = *v5;
      *uint64_t v5 = 0;
      *a3 = v6;
      uint64_t v7 = v5[1];
      v5[1] = 0;
      a3[1] = v7;
      _Block_release(v5[1]);
      uint64_t v8 = *v5;
      *uint64_t v5 = 0;
      if (v8) {
        CFRelease(v8);
      }
      v5 += 2;
      a3 += 2;
    }
    while (v5 != a2);
  }
}

Class ___ZL36isBuiltInScrollViewGestureRecognizerP19UIGestureRecognizer_block_invoke()
{
  qword_1E93CF9E0 = (uint64_t)NSClassFromString(&cfstr_Uiscrollviewpi.isa);
  Class result = NSClassFromString(&cfstr_Uiscrollviewkn.isa);
  qword_1E93CF9E8 = (uint64_t)result;
  return result;
}

Class ___ZL39isBuiltInScrollViewPanGestureRecognizerP19UIGestureRecognizer_block_invoke()
{
  Class result = NSClassFromString(&cfstr_Uiscrollviewpa.isa);
  qword_1E93CF9F8 = (uint64_t)result;
  return result;
}

uint64_t initNSForegroundColorAttributeName(void)
{
  if (byte_1E93CF9CE == 1)
  {
    uint64_t v0 = (void *)qword_1E93CFA20;
  }
  else
  {
    uint64_t v0 = (void *)___ZL19UIFoundationLibraryv_block_invoke_0();
    qword_1E93CFA20 = (uint64_t)v0;
    byte_1E93CF9CE = 1;
  }
  int64_t v1 = (uint64_t *)dlsym(v0, "NSForegroundColorAttributeName");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x199469D98);
  }
  uint64_t result = *v1;
  qword_1E93CFA18 = result;
  _MergedGlobals_877_0 = NSForegroundColorAttributeNameFunction;
  return result;
}

uint64_t NSForegroundColorAttributeNameFunction(void)
{
  return qword_1E93CFA18;
}

uint64_t ___ZL19UIFoundationLibraryv_block_invoke_0()
{
  uint64_t result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
  if (!result)
  {
    uint64_t result = 32;
    __break(0xC471u);
  }
  return result;
}

uint64_t initNSFontAttributeName(void)
{
  if (byte_1E93CF9CE == 1)
  {
    uint64_t v0 = (void *)qword_1E93CFA20;
  }
  else
  {
    uint64_t v0 = (void *)___ZL19UIFoundationLibraryv_block_invoke_0();
    qword_1E93CFA20 = (uint64_t)v0;
    byte_1E93CF9CE = 1;
  }
  int64_t v1 = (uint64_t *)dlsym(v0, "NSFontAttributeName");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x199469E84);
  }
  uint64_t result = *v1;
  qword_1E93CFA28 = result;
  off_1EC2B2188 = NSFontAttributeNameFunction;
  return result;
}

uint64_t NSFontAttributeNameFunction(void)
{
  return qword_1E93CFA28;
}

unsigned char *std::__optional_copy_base<WebKit::EditorState::PostLayoutData,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[304] = 0;
  if (*(unsigned char *)(a2 + 304))
  {
    WebKit::EditorState::PostLayoutData::PostLayoutData((uint64_t)a1, (long long *)a2);
    a1[304] = 1;
  }
  return a1;
}

void sub_199469F9C(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 304)) {
    WebKit::EditorState::PostLayoutData::~PostLayoutData(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19946A16C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v11 = *v9;
  if ((*v9 & 0x8000000000000) != 0)
  {
    uint64_t v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  uint64_t v13 = *v8;
  if ((*v8 & 0x8000000000000) != 0)
  {
    int v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  uint64_t v15 = *v7;
  if ((*v7 & 0x8000000000000) != 0)
  {
    uint64_t v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, a2);
    }
  }
  BOOL v17 = (_DWORD *)*v6;
  *id v6 = 0;
  if (v17) {
    WTF::RefCounted<WebCore::Font>::deref(v17);
  }
  std::__optional_destruct_base<WebCore::FontAttributes,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, a2);
  uint64_t v19 = *v5;
  if ((*v5 & 0x8000000000000) != 0)
  {
    CFTypeRef v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v18);
    }
  }
  CGRect v21 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 72) = 0;
    *(_DWORD *)(v2 + 80) = 0;
    WTF::fastFree(v21, v18);
  }
  CGRect v22 = *(WTF::StringImpl **)(v2 + 48);
  *(void *)(v2 + 48) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v18);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  uint64_t v23 = *(WTF::StringImpl **)(v2 + 40);
  *(void *)(v2 + ++*(_DWORD *)(this + 40) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v18);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  uint64_t v24 = *v3;
  if ((*v3 & 0x8000000000000) != 0)
  {
    long long v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v18);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__optional_copy_base<WebKit::EditorState::VisualData,false>::__optional_copy_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 112) = 0;
  if (*(unsigned char *)(a2 + 112))
  {
    std::construct_at[abi:sn180100]<WebKit::EditorState::VisualData,WebKit::EditorState::VisualData const&,WebKit::EditorState::VisualData*>((_OWORD *)a1, (uint64_t *)a2);
    *(unsigned char *)(a1 + 112) = 1;
  }
  return a1;
}

void sub_19946A310(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t operator<<(uint64_t a1, unsigned int a2)
{
  if (a2 <= 5) {
    WTF::TextStream::operator<<();
  }
  return a1;
}

uint64_t WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char32_t,void>>(WTF::StringBuilder *a1, unsigned int *a2)
{
  unsigned int v3 = *a2;
  uint64_t v4 = *((void *)a1 + 1);
  if (v4 || (uint64_t v4 = *(void *)a1) != 0)
  {
    int v5 = *(_DWORD *)(v4 + 16) & 4;
    if (v3 <= 0xFF && v5 != 0) {
      goto LABEL_13;
    }
  }
  else if (v3 <= 0xFF)
  {
LABEL_13:
    uint64_t result = MEMORY[0x19972DE60]();
    if (result) {
      *(unsigned char *)uint64_t result = *a2;
    }
    return result;
  }
  uint64_t result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (result)
  {
    unsigned int v8 = *a2;
    if (HIWORD(*a2))
    {
      __int16 v9 = v8 & 0x3FF | 0xDC00;
      unsigned int v8 = (v8 >> 10) - 10304;
      *(_WORD *)(result + 2) = v9;
    }
    *(_WORD *)uint64_t result = v8;
  }
  return result;
}

uint64_t initNSBackgroundColorAttributeName(void)
{
  if (byte_1E93CF9CE == 1)
  {
    uint64_t v0 = (void *)qword_1E93CFA20;
  }
  else
  {
    uint64_t v0 = (void *)___ZL19UIFoundationLibraryv_block_invoke_0();
    qword_1E93CFA20 = (uint64_t)v0;
    byte_1E93CF9CE = 1;
  }
  int64_t v1 = (uint64_t *)dlsym(v0, "NSBackgroundColorAttributeName");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x19946A48CLL);
  }
  uint64_t result = *v1;
  qword_1E93CFA38 = result;
  off_1EC2B2198[0] = NSBackgroundColorAttributeNameFunction;
  return result;
}

uint64_t NSBackgroundColorAttributeNameFunction(void)
{
  return qword_1E93CFA38;
}

uint64_t ___ZL32shouldUseHighlightsForMarkedTextP18NSAttributedString_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v8 = [a2 objectForKey:off_1EC2B2190()];
  uint64_t v9 = v8 | [a2 objectForKey:*MEMORY[0x1E4F425C0]];
  uint64_t v10 = [a2 objectForKey:off_1EC2B2198[0]()];
  uint64_t result = [a2 objectForKey:_MergedGlobals_877_0()];
  if (v9)
  {
    char v12 = 0;
  }
  else
  {
    if (!(v10 | result)) {
      return result;
    }
    char v12 = 1;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v12;
  *a5 = 1;
  return result;
}

unsigned int *___ZL17extractUnderlinesP18NSAttributedString_block_invoke(uint64_t a1, void *a2, int a3, int a4)
{
  uint64_t v7 = *(void *)(a1 + 32);
  v14.m_colorAndFlags = 0x11040000000000FFLL;
  BOOL v8 = (objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", off_1EC2B2190()), "isEqual:", &unk_1EEA52FC0) & 1) != 0
    || [a2 objectForKeyedSubscript:off_1EC2B2198[0]()] != 0;
  LODWORD(v15) = a3;
  HIDWORD(v15) = a3 + a4;
  char v16 = 0;
  WebCore::Color::Color((WebCore::Color *)&v17, &v14);
  BOOL v18 = v8;
  uint64_t v9 = *(unsigned int *)(v7 + 12);
  if (v9 == *(_DWORD *)(v7 + 8))
  {
    uint64_t result = (unsigned int *)WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionUnderline>(v7, (unint64_t)&v15);
  }
  else
  {
    uint64_t v12 = *(void *)v7 + 32 * v9;
    uint64_t v13 = v15;
    *(unsigned char *)(v12 + 8) = v16;
    *(void *)uint64_t v12 = v13;
    uint64_t result = (unsigned int *)WebCore::Color::Color();
    *(unsigned char *)(v12 + 24) = v18;
    ++*(_DWORD *)(v7 + 12);
  }
  if ((v17 & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
  }
  if ((v14.m_colorAndFlags & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v14.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v14.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
  }
  return result;
}

void sub_19946A6E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if ((a13 & 0x8000000000000) != 0)
  {
    Color v14 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  if ((a10 & 0x8000000000000) != 0)
  {
    uint64_t v15 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c52_ZTSKZL17extractUnderlinesP18NSAttributedStringE3__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

unsigned int *std::__introsort<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *,false>(unsigned int *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (uint64_t)result;
  while (2)
  {
    uint64_t v9 = (unsigned int *)(a2 - 4);
    unint64_t k = v8;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = k;
        uint64_t v11 = (uint64_t)a2 - k;
        unint64_t v12 = (uint64_t)((uint64_t)a2 - k) >> 5;
        if (v5 || !v4)
        {
          switch(v12)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              unsigned int v37 = *((_DWORD *)a2 - 8);
              if (v37 < *(_DWORD *)v8 || v37 <= *(_DWORD *)v8 && *((_DWORD *)a2 - 7) < *(_DWORD *)(v8 + 4)) {
                return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)v8, a2 - 4);
              }
              return result;
            case 3uLL:
              return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)v8, (unsigned int *)(v8 + 32), (uint64_t)(a2 - 4));
            case 4uLL:
              return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)v8, (unsigned int *)(v8 + 32), v8 + 64, (uint64_t)(a2 - 4));
            case 5uLL:
              return std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *,0>((unsigned int *)v8, (unsigned int *)(v8 + 32), v8 + 64, v8 + 96, (uint64_t)(a2 - 4));
            default:
              goto LABEL_215;
          }
        }
        if (v11 <= 767)
        {
          if (a4)
          {
            if ((uint64_t *)v8 != a2)
            {
              uint64_t v38 = v8 + 32;
              if ((uint64_t *)(v8 + 32) != a2)
              {
                uint64_t v39 = 0;
                uint64_t v40 = v8;
                do
                {
                  uint64_t v41 = v40;
                  uint64_t v40 = v38;
                  unsigned int v42 = *(_DWORD *)(v41 + 32);
                  if (v42 < *(_DWORD *)v41 || v42 <= *(_DWORD *)v41 && *(_DWORD *)(v41 + 36) < *(_DWORD *)(v41 + 4))
                  {
                    char v104 = *(unsigned char *)(v40 + 8);
                    uint64_t v97 = *(void *)v40;
                    WebCore::Color::Color();
                    char v112 = *(unsigned char *)(v41 + 56);
                    for (uint64_t i = v39; ; i -= 32)
                    {
                      uint64_t v44 = v8 + i;
                      *(void *)(v44 + 32) = *(void *)(v8 + i);
                      *(unsigned char *)(v44 + ++*(_DWORD *)(this + 40) = *(unsigned char *)(v8 + i + 8);
                      WebCore::Color::operator=();
                      *(unsigned char *)(v44 + 56) = *(unsigned char *)(v44 + 24);
                      if (!i)
                      {
                        uint64_t v46 = v8;
                        goto LABEL_135;
                      }
                      unsigned int v45 = *(_DWORD *)(v8 + i - 32);
                      if (v97 >= v45
                        && (v97 > v45 || HIDWORD(v97) >= *(_DWORD *)(v8 + i - 28)))
                      {
                        break;
                      }
                    }
                    uint64_t v46 = v8 + i;
LABEL_135:
                    *(unsigned char *)(v46 + 8) = v104;
                    *(void *)uint64_t v46 = v97;
                    uint64_t result = (unsigned int *)WebCore::Color::operator=();
                    *(unsigned char *)(v46 + 24) = v112;
                    if ((*(void *)v108 & 0x8000000000000) != 0)
                    {
                      uint64_t result = (unsigned int *)(*(void *)v108 & 0xFFFFFFFFFFFFLL);
                      if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v108 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                      {
                        atomic_store(1u, result);
                        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v47);
                      }
                    }
                  }
                  uint64_t v38 = v40 + 32;
                  v39 += 32;
                }
                while ((uint64_t *)(v40 + 32) != a2);
              }
            }
          }
          else if ((uint64_t *)v8 != a2)
          {
            uint64_t v78 = v8 + 32;
            if ((uint64_t *)(v8 + 32) != a2)
            {
              uint64_t v79 = 0;
              uint64_t v80 = v8 - 32;
              uint64_t v81 = -1;
              uint64_t v82 = 1;
              uint64_t v83 = v8;
              do
              {
                uint64_t v84 = v79;
                uint64_t v79 = v82;
                if (*(_DWORD *)v78 < *(_DWORD *)v83
                  || *(_DWORD *)v78 <= *(_DWORD *)v83 && *(_DWORD *)(v83 + 36) < *(_DWORD *)(v8 + 32 * v84 + 4))
                {
                  char v107 = *(unsigned char *)(v78 + 8);
                  uint64_t v100 = *(void *)v78;
                  WebCore::Color::Color();
                  char v115 = *(unsigned char *)(v83 + 56);
                  uint64_t v85 = v81;
                  for (uint64_t j = v80; ; j -= 32)
                  {
                    *(void *)(j + 64) = *(void *)(j + 32);
                    *(unsigned char *)(j + 72) = *(unsigned char *)(j + 40);
                    WebCore::Color::operator=();
                    *(unsigned char *)(j + 88) = *(unsigned char *)(j + 56);
                    if (!v85) {
                      goto LABEL_214;
                    }
                    if (v100 >= *(_DWORD *)j
                      && (v100 > *(_DWORD *)j || HIDWORD(v100) >= *(_DWORD *)(j + 4)))
                    {
                      break;
                    }
                    ++v85;
                  }
                  *(unsigned char *)(j + ++*(_DWORD *)(this + 40) = v107;
                  *(void *)(j + 32) = v100;
                  uint64_t result = (unsigned int *)WebCore::Color::operator=();
                  *(unsigned char *)(j + 56) = v115;
                  if ((*(void *)v108 & 0x8000000000000) != 0)
                  {
                    uint64_t result = (unsigned int *)(*(void *)v108 & 0xFFFFFFFFFFFFLL);
                    if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v108 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                    {
                      atomic_store(1u, result);
                      uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v87);
                    }
                  }
                }
                uint64_t v83 = v8 + 32 * v79;
                uint64_t v82 = v79 + 1;
                uint64_t v78 = v8 + 32 * (v79 + 1);
                v80 += 32;
                --v81;
              }
              while ((uint64_t *)v78 != a2);
            }
          }
          return result;
        }
        if (!a3)
        {
          if ((uint64_t *)v8 != a2)
          {
            int64_t v89 = (v12 - 2) >> 1;
            int64_t v48 = v89;
            do
            {
              int64_t v49 = v48;
              if (v89 >= v48)
              {
                uint64_t v50 = (2 * v48) | 1;
                uint64_t v51 = v8 + 32 * v50;
                if (2 * v48 + 2 < (uint64_t)v12)
                {
                  unsigned int v52 = *(_DWORD *)(v51 + 32);
                  if (*(_DWORD *)v51 < v52
                    || *(_DWORD *)v51 <= v52 && *(_DWORD *)(v8 + 32 * v50 + 4) < *(_DWORD *)(v51 + 36))
                  {
                    v51 += 32;
                    uint64_t v50 = 2 * v48 + 2;
                  }
                }
                uint64_t v53 = v8 + 32 * v48;
                if (*(_DWORD *)v51 >= *(_DWORD *)v53
                  && (*(_DWORD *)v51 > *(_DWORD *)v53 || *(_DWORD *)(v51 + 4) >= *(_DWORD *)(v8 + 32 * v48 + 4)))
                {
                  char v105 = *(unsigned char *)(v53 + 8);
                  uint64_t v98 = *(void *)v53;
                  WebCore::Color::Color();
                  char v113 = *(unsigned char *)(v8 + 32 * v49 + 24);
                  while (1)
                  {
                    uint64_t v54 = v51;
                    uint64_t v55 = *(void *)v51;
                    *(unsigned char *)(v53 + 8) = *(unsigned char *)(v51 + 8);
                    *(void *)uint64_t v53 = v55;
                    WebCore::Color::operator=();
                    *(unsigned char *)(v53 + 24) = *(unsigned char *)(v51 + 24);
                    if (v89 < v50) {
                      break;
                    }
                    uint64_t v56 = (2 * v50) | 1;
                    uint64_t v51 = v8 + 32 * v56;
                    if (2 * v50 + 2 < (uint64_t)v12)
                    {
                      unsigned int v57 = *(_DWORD *)(v51 + 32);
                      if (*(_DWORD *)v51 < v57
                        || *(_DWORD *)v51 <= v57 && *(_DWORD *)(v8 + 32 * v56 + 4) < *(_DWORD *)(v51 + 36))
                      {
                        v51 += 32;
                        uint64_t v56 = 2 * v50 + 2;
                      }
                    }
                    if (*(_DWORD *)v51 < v98) {
                      break;
                    }
                    uint64_t v53 = v54;
                    uint64_t v50 = v56;
                    if (*(_DWORD *)v51 <= v98)
                    {
                      uint64_t v53 = v54;
                      uint64_t v50 = v56;
                      if (*(_DWORD *)(v51 + 4) < HIDWORD(v98)) {
                        break;
                      }
                    }
                  }
                  *(unsigned char *)(v54 + 8) = v105;
                  *(void *)uint64_t v54 = v98;
                  WebCore::Color::operator=();
                  *(unsigned char *)(v54 + 24) = v113;
                  if ((*(void *)v108 & 0x8000000000000) != 0)
                  {
                    uint64_t v59 = (unsigned int *)(*(void *)v108 & 0xFFFFFFFFFFFFLL);
                    if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v108 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                    {
                      atomic_store(1u, v59);
                      WTF::fastFree((WTF *)v59, v58);
                    }
                  }
                }
              }
              int64_t v48 = v49 - 1;
            }
            while (v49);
            uint64_t v60 = (unint64_t)v11 >> 5;
            do
            {
              uint64_t v61 = a2;
              char v91 = *(unsigned char *)(v8 + 8);
              uint64_t v90 = *(void *)v8;
              WebCore::Color::Color();
              uint64_t v62 = 0;
              char v93 = *(unsigned char *)(v8 + 24);
              uint64_t v63 = v8;
              do
              {
                uint64_t v64 = v62 + 1;
                uint64_t v65 = v63 + 32 * (v62 + 1);
                uint64_t v66 = 2 * v62;
                uint64_t v62 = (2 * v62) | 1;
                uint64_t v67 = v66 + 2;
                if (v67 < v60)
                {
                  unsigned int v68 = *(_DWORD *)(v65 + 32);
                  if (*(_DWORD *)v65 < v68
                    || *(_DWORD *)v65 <= v68 && *(_DWORD *)(v63 + 32 * v64 + 4) < *(_DWORD *)(v65 + 36))
                  {
                    v65 += 32;
                    uint64_t v62 = v67;
                  }
                }
                uint64_t v69 = *(void *)v65;
                *(unsigned char *)(v63 + 8) = *(unsigned char *)(v65 + 8);
                *(void *)uint64_t v63 = v69;
                WebCore::Color::operator=();
                *(unsigned char *)(v63 + 24) = *(unsigned char *)(v65 + 24);
                uint64_t v63 = v65;
              }
              while (v62 <= (uint64_t)((unint64_t)(v60 - 2) >> 1));
              a2 -= 4;
              if ((uint64_t *)v65 == v61 - 4)
              {
                *(unsigned char *)(v65 + 8) = v91;
                *(void *)uint64_t v65 = v90;
                uint64_t result = (unsigned int *)WebCore::Color::operator=();
                *(unsigned char *)(v65 + 24) = v93;
              }
              else
              {
                uint64_t v70 = *a2;
                *(unsigned char *)(v65 + 8) = *((unsigned char *)v61 - 24);
                *(void *)uint64_t v65 = v70;
                WebCore::Color::operator=();
                *(unsigned char *)(v65 + 24) = *((unsigned char *)v61 - 8);
                *((unsigned char *)v61 - 24) = v91;
                *a2 = v90;
                uint64_t result = (unsigned int *)WebCore::Color::operator=();
                *((unsigned char *)v61 - 8) = v93;
                uint64_t v72 = v65 - v8 + 32;
                if (v72 >= 33)
                {
                  unint64_t v73 = (((unint64_t)v72 >> 5) - 2) >> 1;
                  unint64_t v74 = v8 + 32 * v73;
                  if (*(_DWORD *)v74 < *(_DWORD *)v65
                    || *(_DWORD *)v74 <= *(_DWORD *)v65 && *(_DWORD *)(v8 + 32 * v73 + 4) < *(_DWORD *)(v65 + 4))
                  {
                    char v106 = *(unsigned char *)(v65 + 8);
                    uint64_t v99 = *(void *)v65;
                    WebCore::Color::Color();
                    char v114 = *(unsigned char *)(v65 + 24);
                    while (1)
                    {
                      unint64_t v75 = v74;
                      uint64_t v76 = *(void *)v74;
                      *(unsigned char *)(v65 + 8) = *(unsigned char *)(v74 + 8);
                      *(void *)uint64_t v65 = v76;
                      WebCore::Color::operator=();
                      *(unsigned char *)(v65 + 24) = *(unsigned char *)(v74 + 24);
                      if (!v73) {
                        break;
                      }
                      unint64_t v73 = (v73 - 1) >> 1;
                      unint64_t v74 = v8 + 32 * v73;
                      uint64_t v65 = v75;
                      if (*(_DWORD *)v74 >= v99)
                      {
                        if (*(_DWORD *)v74 > v99) {
                          break;
                        }
                        uint64_t v65 = v75;
                        if (*(_DWORD *)(v8 + 32 * v73 + 4) >= HIDWORD(v99)) {
                          break;
                        }
                      }
                    }
                    *(unsigned char *)(v75 + 8) = v106;
                    *(void *)unint64_t v75 = v99;
                    uint64_t result = (unsigned int *)WebCore::Color::operator=();
                    *(unsigned char *)(v75 + 24) = v114;
                    if ((*(void *)v108 & 0x8000000000000) != 0)
                    {
                      uint64_t result = (unsigned int *)(*(void *)v108 & 0xFFFFFFFFFFFFLL);
                      if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v108 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                      {
                        atomic_store(1u, result);
                        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v71);
                      }
                    }
                  }
                }
              }
              if ((*(void *)v92 & 0x8000000000000) != 0)
              {
                uint64_t result = (unsigned int *)(*(void *)v92 & 0xFFFFFFFFFFFFLL);
                if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v92 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, result);
                  uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v71);
                }
              }
            }
            while (v60-- > 2);
          }
          return result;
        }
        unint64_t v13 = v12 >> 1;
        unint64_t v14 = v8 + 32 * (v12 >> 1);
        if ((unint64_t)v11 > 0x1000)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)v8, (unsigned int *)(v8 + 32 * (v12 >> 1)), (uint64_t)(a2 - 4));
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)(v8 + 32), (unsigned int *)(v14 - 32), (uint64_t)(a2 - 8));
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)(v8 + 64), (unsigned int *)(v8 + 32 + 32 * v13), (uint64_t)(a2 - 12));
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)(v14 - 32), (unsigned int *)(v8 + 32 * (v12 >> 1)), v8 + 32 + 32 * v13);
          char v101 = *(unsigned char *)(v8 + 8);
          uint64_t v94 = *(void *)v8;
          WebCore::Color::Color();
          char v109 = *(unsigned char *)(v8 + 24);
          uint64_t v15 = *(void *)v14;
          *(unsigned char *)(v8 + 8) = *(unsigned char *)(v14 + 8);
          *(void *)uint64_t v8 = v15;
          WebCore::Color::operator=();
          char v16 = (unsigned char *)(v8 + 24 + 32 * v13);
          *(unsigned char *)(v8 + 24) = *v16;
          *(void *)unint64_t v14 = v94;
          *(unsigned char *)(v14 + 8) = v101;
          WebCore::Color::operator=();
          *char v16 = v109;
          if ((*(void *)v108 & 0x8000000000000) != 0)
          {
            BOOL v18 = (unsigned int *)(*(void *)v108 & 0xFFFFFFFFFFFFLL);
            if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v108 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v18);
              WTF::fastFree((WTF *)v18, v17);
            }
          }
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)(v8 + 32 * (v12 >> 1)), (unsigned int *)v8, (uint64_t)(a2 - 4));
        }
        --a3;
        if (a4) {
          break;
        }
        unsigned int v19 = *(_DWORD *)(v8 - 32);
        if (v19 < *(_DWORD *)v8 || v19 <= *(_DWORD *)v8 && *(_DWORD *)(v8 - 28) < *(_DWORD *)(v8 + 4)) {
          break;
        }
        char v103 = *(unsigned char *)(v8 + 8);
        uint64_t v96 = *(void *)v8;
        WebCore::Color::Color();
        char v111 = *(unsigned char *)(v8 + 24);
        if (v96 < *v9 || v96 <= *v9 && HIDWORD(v96) < *((_DWORD *)a2 - 7))
        {
          unint64_t k = v8 + 32;
          if ((uint64_t *)(v8 + 32) == a2) {
            goto LABEL_214;
          }
          while (v96 >= *(_DWORD *)k
               && (v96 > *(_DWORD *)k || HIDWORD(v96) >= *(_DWORD *)(k + 4)))
          {
            k += 32;
            if ((uint64_t *)k == a2) {
              goto LABEL_214;
            }
          }
        }
        else
        {
          for (unint64_t k = v8 + 32; k < (unint64_t)a2; k += 32)
          {
            if (v96 < *(_DWORD *)k
              || v96 <= *(_DWORD *)k && HIDWORD(v96) < *(_DWORD *)(k + 4))
            {
              break;
            }
          }
        }
        int v31 = a2;
        if (k >= (unint64_t)a2) {
          goto LABEL_88;
        }
        if (a2 == (uint64_t *)v8) {
          goto LABEL_214;
        }
        int v31 = a2 - 4;
        while (v96 < *(_DWORD *)v31
             || v96 <= *(_DWORD *)v31 && HIDWORD(v96) < *((_DWORD *)v31 + 1))
        {
          BOOL v5 = v31 == (uint64_t *)v8;
          v31 -= 4;
          if (v5) {
            goto LABEL_214;
          }
        }
LABEL_88:
        while (k < (unint64_t)v31)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)k, v31);
          k += 32;
          if ((uint64_t *)k == a2) {
            goto LABEL_214;
          }
          while (v96 >= *(_DWORD *)k
               && (v96 > *(_DWORD *)k || HIDWORD(v96) >= *(_DWORD *)(k + 4)))
          {
            k += 32;
            if ((uint64_t *)k == a2) {
              goto LABEL_214;
            }
          }
          if (v31 == (uint64_t *)v8) {
            goto LABEL_214;
          }
          v31 -= 4;
          while (v96 < *(_DWORD *)v31
               || v96 <= *(_DWORD *)v31 && HIDWORD(v96) < *((_DWORD *)v31 + 1))
          {
            BOOL v5 = v31 == (uint64_t *)v8;
            v31 -= 4;
            if (v5) {
              goto LABEL_214;
            }
          }
        }
        uint64_t v32 = (uint64_t *)(k - 32);
        if (k - 32 != v8)
        {
          uint64_t v33 = *v32;
          *(unsigned char *)(v8 + 8) = *(unsigned char *)(k - 24);
          *(void *)uint64_t v8 = v33;
          WebCore::Color::operator=();
          *(unsigned char *)(v8 + 24) = *(unsigned char *)(k - 8);
        }
        *(unsigned char *)(k - 24) = v103;
        uint64_t *v32 = v96;
        uint64_t result = (unsigned int *)WebCore::Color::operator=();
        *(unsigned char *)(k - 8) = v111;
        if ((*(void *)v108 & 0x8000000000000) != 0)
        {
          uint64_t result = (unsigned int *)(*(void *)v108 & 0xFFFFFFFFFFFFLL);
          unsigned int add = atomic_fetch_add((atomic_uint *volatile)(*(void *)v108 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF);
          BOOL v4 = add != 0;
          BOOL v5 = add == 1;
          if (add == 1)
          {
            atomic_store(1u, result);
            uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v34);
          }
        }
LABEL_106:
        a4 = 0;
      }
      char v102 = *(unsigned char *)(v8 + 8);
      uint64_t v95 = *(void *)v8;
      WebCore::Color::Color();
      char v110 = *(unsigned char *)(v8 + 24);
      if ((uint64_t *)(v8 + 32) == a2) {
        goto LABEL_214;
      }
      uint64_t v20 = 0;
      while (1)
      {
        unsigned int v21 = *(_DWORD *)(v8 + v20 + 32);
        if (v21 >= v95 && (v21 > v95 || *(_DWORD *)(v8 + v20 + 36) >= HIDWORD(v95))) {
          break;
        }
        v20 += 32;
        if ((uint64_t *)(v8 + v20 + 32) == a2) {
          goto LABEL_214;
        }
      }
      unint64_t v22 = v8 + v20 + 32;
      if (v20)
      {
        uint64_t v23 = a2 - 4;
        if (a2 == (uint64_t *)v8) {
          goto LABEL_214;
        }
        while (*(_DWORD *)v23 >= v95
             && (*(_DWORD *)v23 > v95 || *((_DWORD *)v23 + 1) >= HIDWORD(v95)))
        {
          BOOL v5 = v23 == (uint64_t *)v8;
          v23 -= 4;
          if (v5) {
            goto LABEL_214;
          }
        }
      }
      else
      {
        uint64_t v23 = a2;
        if (v22 < (unint64_t)a2)
        {
          unsigned int v24 = *v9;
          uint64_t v23 = a2 - 4;
          if (*v9 >= v95)
          {
            uint64_t v23 = a2 - 4;
            do
            {
              if (v24 <= v95)
              {
                if (v22 >= (unint64_t)v23 || *((_DWORD *)v23 + 1) < HIDWORD(v95)) {
                  break;
                }
              }
              else if (v22 >= (unint64_t)v23)
              {
                break;
              }
              unsigned int v25 = *((_DWORD *)v23 - 8);
              v23 -= 4;
              unsigned int v24 = v25;
            }
            while (v25 >= v95);
          }
        }
      }
      if (v22 < (unint64_t)v23)
      {
        long long v26 = v23;
        unint64_t k = v22;
        while (1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)k, v26);
          k += 32;
          if ((uint64_t *)k == a2) {
            break;
          }
          while (*(_DWORD *)k < v95
               || *(_DWORD *)k <= v95 && *(_DWORD *)(k + 4) < HIDWORD(v95))
          {
            k += 32;
            if ((uint64_t *)k == a2) {
              goto LABEL_214;
            }
          }
          if (v26 == (uint64_t *)v8) {
            break;
          }
          v26 -= 4;
          while (*(_DWORD *)v26 >= v95
               && (*(_DWORD *)v26 > v95 || *((_DWORD *)v26 + 1) >= HIDWORD(v95)))
          {
            BOOL v5 = v26 == (uint64_t *)v8;
            v26 -= 4;
            if (v5) {
              goto LABEL_214;
            }
          }
          if (k >= (unint64_t)v26) {
            goto LABEL_58;
          }
        }
LABEL_214:
        __break(1u);
LABEL_215:
        JUMPOUT(0);
      }
      unint64_t k = v22;
LABEL_58:
      long long v27 = (uint64_t *)(k - 32);
      if (k - 32 != v8)
      {
        uint64_t v28 = *v27;
        *(unsigned char *)(v8 + 8) = *(unsigned char *)(k - 24);
        *(void *)uint64_t v8 = v28;
        WebCore::Color::operator=();
        *(unsigned char *)(v8 + 24) = *(unsigned char *)(k - 8);
      }
      *(unsigned char *)(k - 24) = v102;
      uint64_t *v27 = v95;
      WebCore::Color::operator=();
      *(unsigned char *)(k - 8) = v110;
      if ((*(void *)v108 & 0x8000000000000) != 0)
      {
        CGRect v35 = (unsigned int *)(*(void *)v108 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v108 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v35);
          WTF::fastFree((WTF *)v35, v29);
        }
      }
      if (v22 < (unint64_t)v23)
      {
LABEL_64:
        uint64_t result = (unsigned int *)std::__introsort<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *,false>(v8, k - 32, a3, a4 & 1);
        goto LABEL_106;
      }
      char v30 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>(v8, k - 32);
      uint64_t result = (unsigned int *)std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>(k, (uint64_t)a2);
      if (result) {
        break;
      }
      if ((v30 & 1) == 0) {
        goto LABEL_64;
      }
    }
    a2 = (uint64_t *)(k - 32);
    if ((v30 & 1) == 0) {
      continue;
    }
    return result;
  }
}

void sub_19946B5D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if ((a19 & 0x8000000000000) != 0)
  {
    uint64_t v20 = (unsigned int *)(a19 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a19 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v7 = *a1;
  char v8 = *((unsigned char *)a1 + 8);
  WebCore::Color::Color();
  char v10 = *((unsigned char *)a1 + 24);
  char v4 = *((unsigned char *)a2 + 8);
  *a1 = *a2;
  *((unsigned char *)a1 + 8) = v4;
  WebCore::Color::operator=();
  *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
  *a2 = v7;
  *((unsigned char *)a2 + 8) = v8;
  uint64_t result = (unsigned int *)WebCore::Color::operator=();
  *((unsigned char *)a2 + 24) = v10;
  if ((*(void *)v9 & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(*(void *)v9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
  }
  return result;
}

void sub_19946B76C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if ((a11 & 0x8000000000000) != 0)
  {
    unint64_t v12 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *,0>(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>(a1, a2, a3, a4);
  if (*(_DWORD *)a5 < *(_DWORD *)a4 || *(_DWORD *)a5 <= *(_DWORD *)a4 && *(_DWORD *)(a5 + 4) < *(_DWORD *)(a4 + 4))
  {
    uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)a4, (uint64_t *)a5);
    if (*(_DWORD *)a4 < *(_DWORD *)a3 || *(_DWORD *)a4 <= *(_DWORD *)a3 && *(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
    {
      uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)a3, (uint64_t *)a4);
      if (*(_DWORD *)a3 < *a2 || *(_DWORD *)a3 <= *a2 && *(_DWORD *)(a3 + 4) < a2[1])
      {
        uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)a2, (uint64_t *)a3);
        if (*a2 < *a1 || *a2 <= *a1 && a2[1] < a1[1])
        {
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)a1, (uint64_t *)a2);
        }
      }
    }
  }
  return result;
}

unsigned int *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  BOOL v5 = result;
  unsigned int v6 = *a2;
  if (*a2 < *result || v6 <= *result && a2[1] < result[1])
  {
    if (*(_DWORD *)a3 >= v6 && (*(_DWORD *)a3 > v6 || *(_DWORD *)(a3 + 4) >= a2[1]))
    {
      uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)result, (uint64_t *)a2);
      if (*(_DWORD *)a3 >= *a2 && (*(_DWORD *)a3 > *a2 || *(_DWORD *)(a3 + 4) >= a2[1])) {
        return result;
      }
      uint64_t result = a2;
    }
    uint64_t v7 = (uint64_t *)a3;
    goto LABEL_18;
  }
  if (*(_DWORD *)a3 < v6 || *(_DWORD *)a3 <= v6 && *(_DWORD *)(a3 + 4) < a2[1])
  {
    uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)a2, (uint64_t *)a3);
    if (*a2 < *v5 || *a2 <= *v5 && a2[1] < v5[1])
    {
      uint64_t result = v5;
      uint64_t v7 = (uint64_t *)a2;
LABEL_18:
      return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)result, v7);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>(uint64_t a1, uint64_t a2)
{
  BOOL v4 = 1;
  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      BOOL v5 = (uint64_t *)(a2 - 32);
      unsigned int v6 = *(_DWORD *)(a2 - 32);
      if (v6 < *(_DWORD *)a1 || v6 <= *(_DWORD *)a1 && *(_DWORD *)(a2 - 28) < *(_DWORD *)(a1 + 4)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)a1, v5);
      }
      break;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)a1, (unsigned int *)(a1 + 32), a2 - 32);
      break;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)a1, (unsigned int *)(a1 + 32), a1 + 64, a2 - 32);
      break;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *,0>((unsigned int *)a1, (unsigned int *)(a1 + 32), a1 + 64, a1 + 96, a2 - 32);
      break;
    default:
      uint64_t v7 = (_DWORD *)(a1 + 64);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)a1, (unsigned int *)(a1 + 32), a1 + 64);
      uint64_t v8 = a1 + 96;
      BOOL v4 = 1;
      if (a1 + 96 != a2)
      {
        uint64_t v9 = 0;
        int v10 = 0;
        while (1)
        {
          if (*(_DWORD *)v8 < *v7 || *(_DWORD *)v8 <= *v7 && *(_DWORD *)(v8 + 4) < v7[1])
          {
            uint64_t v18 = *(void *)v8;
            char v19 = *(unsigned char *)(v8 + 8);
            WebCore::Color::Color();
            char v21 = *(unsigned char *)(v8 + 24);
            for (uint64_t i = v9; ; i -= 32)
            {
              uint64_t v12 = a1 + i;
              *(void *)(v12 + 96) = *(void *)(a1 + i + 64);
              *(unsigned char *)(v12 + 104) = *(unsigned char *)(a1 + i + 72);
              WebCore::Color::operator=();
              *(unsigned char *)(v12 + 120) = *(unsigned char *)(v12 + 88);
              if (i == -64)
              {
                uint64_t v14 = a1;
                goto LABEL_20;
              }
              unsigned int v13 = *(_DWORD *)(a1 + i + 32);
              if (v18 >= v13 && (v18 > v13 || HIDWORD(v18) >= *(_DWORD *)(a1 + i + 36))) {
                break;
              }
            }
            uint64_t v14 = a1 + i + 64;
LABEL_20:
            *(void *)uint64_t v14 = v18;
            *(unsigned char *)(v14 + 8) = v19;
            WebCore::Color::operator=();
            *(unsigned char *)(v14 + 24) = v21;
            if ((*(void *)v20 & 0x8000000000000) != 0)
            {
              char v16 = (unsigned int *)(*(void *)v20 & 0xFFFFFFFFFFFFLL);
              if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v20 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
              {
                atomic_store(1u, v16);
                WTF::fastFree((WTF *)v16, v15);
              }
            }
            if (++v10 == 8) {
              break;
            }
          }
          uint64_t v7 = (_DWORD *)v8;
          v9 += 32;
          v8 += 32;
          if (v8 == a2) {
            return 1;
          }
        }
        BOOL v4 = v8 + 32 == a2;
      }
      break;
  }
  return v4;
}

void sub_19946BC88(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if ((a11 & 0x8000000000000) != 0)
  {
    uint64_t v12 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>(a1, a2, a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3 || *(_DWORD *)a4 <= *(_DWORD *)a3 && *(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
  {
    uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)a3, (uint64_t *)a4);
    if (*(_DWORD *)a3 < *a2 || *(_DWORD *)a3 <= *a2 && *(_DWORD *)(a3 + 4) < a2[1])
    {
      uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)a2, (uint64_t *)a3);
      if (*a2 < *a1 || *a2 <= *a1 && a2[1] < a1[1])
      {
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
  return result;
}

unsigned int *___ZL21compositionHighlightsP18NSAttributedString_block_invoke(uint64_t a1, void *a2, int a3, int a4)
{
  v31.m_colorAndFlags = 0x11040000AFC0E33CLL;
  uint64_t v8 = (WebCore *)[a2 objectForKeyedSubscript:off_1EC2B2198[0]()];
  if (v8)
  {
    WebCore::colorFromCocoaColor(&v24, v8, v9);
    WebCore::Color::operator=();
    if ((v24 & 0x8000000000000) != 0)
    {
      uint64_t v20 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v10);
      }
    }
  }
  LOBYTE(v29) = 0;
  char v30 = 0;
  uint64_t v11 = (WebCore *)[a2 objectForKeyedSubscript:_MergedGlobals_877_0()];
  if (v11)
  {
    WebCore::colorFromCocoaColor(&v24, v11, v12);
    std::optional<WebCore::Color>::operator=[abi:sn180100]<WebCore::Color,void>((uint64_t)&v29);
    if ((v24 & 0x8000000000000) != 0)
    {
      char v21 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, v13);
      }
    }
  }
  uint64_t v14 = *(void *)(a1 + 32);
  WebCore::Color::Color((WebCore::Color *)&v22, &v31);
  char v23 = 1;
  WebCore::CompositionHighlight::CompositionHighlight(&v24, a3, a3 + a4, (uint64_t)&v22, (uint64_t)&v29);
  unsigned int v15 = *(_DWORD *)(v14 + 12);
  if (v15 == *(_DWORD *)(v14 + 8))
  {
    uint64_t result = (unsigned int *)WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight>(v14, (unint64_t)&v24);
  }
  else
  {
    uint64_t v18 = *(void *)v14;
    uint64_t v19 = *(void *)v14 + 40 * v15;
    *(void *)uint64_t v19 = v24;
    std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v19 + 8), (uint64_t)&v25);
    uint64_t result = (unsigned int *)std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v18 + 40 * v15 + 24), (uint64_t)&v27);
    ++*(_DWORD *)(v14 + 12);
  }
  if (v28)
  {
    if ((v27 & 0x8000000000000) != 0)
    {
      uint64_t result = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v17);
      }
    }
  }
  if (v26)
  {
    if ((v25 & 0x8000000000000) != 0)
    {
      uint64_t result = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v17);
      }
    }
  }
  if (v23)
  {
    if ((v22 & 0x8000000000000) != 0)
    {
      uint64_t result = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v17);
      }
    }
  }
  if (v30)
  {
    if ((v29 & 0x8000000000000) != 0)
    {
      uint64_t result = (unsigned int *)(v29 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v17);
      }
    }
  }
  if ((v31.m_colorAndFlags & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v31.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v31.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v17);
    }
  }
  return result;
}

void sub_19946C044(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v21 = v17;
  if (*(unsigned char *)(v21 + 40 * v19 + 16))
  {
    uint64_t v23 = *v18;
    if ((*v18 & 0x8000000000000) != 0)
    {
      uint64_t v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, a2);
      }
    }
  }
  if (a15)
  {
    if ((a14 & 0x8000000000000) != 0)
    {
      char v26 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v26);
        WTF::fastFree((WTF *)v26, a2);
      }
    }
  }
  if (a13)
  {
    if ((a12 & 0x8000000000000) != 0)
    {
      uint64_t v25 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, a2);
      }
    }
  }
  if (a10)
  {
    if ((a9 & 0x8000000000000) != 0)
    {
      uint64_t v27 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, a2);
      }
    }
  }
  if (a17)
  {
    if ((a16 & 0x8000000000000) != 0)
    {
      char v28 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, a2);
      }
    }
  }
  uint64_t v29 = *(void *)(v20 - 56);
  if ((v29 & 0x8000000000000) != 0)
  {
    char v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c56_ZTSKZL21compositionHighlightsP18NSAttributedStringE3__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

BOOL std::operator!=[abi:sn180100]<WebCore::Color,WebCore::Color>(unint64_t a1, char a2, unint64_t a3, char a4)
{
  uint64_t v4 = (a2 != 0) ^ (a4 != 0);
  if (a2 && a4)
  {
    if ((a1 & 0x8000000000000) != 0)
    {
      BOOL v6 = 0;
      if ((a3 & 0x8000000000000) != 0)
      {
        unint64_t v8 = 0;
        long long v9 = *(_OWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
        long long v11 = *(_OWORD *)((a3 & 0xFFFFFFFFFFFFLL) + 4);
        long long v12 = v9;
        do
        {
          if (*((float *)&v12 + v8) != *((float *)&v11 + v8)) {
            break;
          }
          LOBYTE(v6) = v8++ > 2;
        }
        while (v8 != 4);
        BOOL v10 = HIBYTE(a1) == HIBYTE(a3) && BYTE6(a1) == BYTE6(a3);
        BOOL v6 = v6 && v10;
      }
    }
    else
    {
      BOOL v6 = (a3 & 0x8000000000000) == 0 && a1 == a3;
    }
    return !v6;
  }
  return v4;
}

unsigned int *std::__introsort<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *,false>(unsigned int *result, _DWORD *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (uint64_t)result;
  while (2)
  {
    long long v9 = a2 - 10;
    unint64_t k = v8;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = k;
        uint64_t v11 = (uint64_t)a2 - k;
        unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - k) >> 3);
        if (v5 || !v4)
        {
          switch(v12)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              unsigned int v29 = *(a2 - 10);
              if (v29 < *(_DWORD *)v8 || v29 <= *(_DWORD *)v8 && *(a2 - 9) < *(_DWORD *)(v8 + 4)) {
                return std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)v8, (uint64_t)(a2 - 10));
              }
              return result;
            case 3uLL:
              return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>((unsigned int *)v8, v8 + 40, a2 - 10);
            case 4uLL:
              return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>((unsigned int *)v8, v8 + 40, (unsigned int *)(v8 + 80), a2 - 10);
            case 5uLL:
              return std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *,0>((unsigned int *)v8, v8 + 40, (unsigned int *)(v8 + 80), (unsigned int *)(v8 + 120), a2 - 10);
            default:
              goto LABEL_249;
          }
        }
        if (v11 <= 959)
        {
          if (a4)
          {
            if ((_DWORD *)v8 != a2)
            {
              char v30 = (void *)(v8 + 40);
              if ((_DWORD *)(v8 + 40) != a2)
              {
                uint64_t v31 = 0;
                uint64_t v32 = (void *)v8;
                do
                {
                  uint64_t v33 = (unsigned int *)v32;
                  uint64_t v32 = v30;
                  unsigned int v34 = v33[10];
                  if (v34 < *v33 || v34 <= *v33 && v33[11] < v33[1])
                  {
                    uint64_t v90 = *v32;
                    std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](&v91, (uint64_t)(v33 + 12));
                    std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](&v93, (uint64_t)(v33 + 16));
                    for (uint64_t i = v31; ; i -= 40)
                    {
                      *(void *)(v8 + i + ++*(_DWORD *)(this + 40) = *(void *)(v8 + i);
                      std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v8 + i + 48, (unsigned __int8 *)(v8 + i + 8));
                      std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v8 + i + 64, (unsigned __int8 *)(v8 + i + 24));
                      if (!i)
                      {
                        unsigned int v37 = (void *)v8;
                        goto LABEL_142;
                      }
                      unsigned int v36 = *(_DWORD *)(v8 + i - 40);
                      if (v90 >= v36
                        && (v90 > v36 || HIDWORD(v90) >= *(_DWORD *)(v8 + i - 36)))
                      {
                        break;
                      }
                    }
                    unsigned int v37 = (void *)(v8 + i);
LABEL_142:
                    void *v37 = v90;
                    uint64_t v38 = v8 + i;
                    std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v38 + 8, (unsigned __int8 *)&v91);
                    uint64_t result = (unsigned int *)std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v38 + 24, (unsigned __int8 *)&v93);
                    if (v94)
                    {
                      if ((v93 & 0x8000000000000) != 0)
                      {
                        uint64_t result = (unsigned int *)(v93 & 0xFFFFFFFFFFFFLL);
                        if (atomic_fetch_add((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                        {
                          atomic_store(1u, result);
                          uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v39);
                        }
                      }
                    }
                    if (v92)
                    {
                      if ((v91 & 0x8000000000000) != 0)
                      {
                        uint64_t result = (unsigned int *)(v91 & 0xFFFFFFFFFFFFLL);
                        if (atomic_fetch_add((atomic_uint *volatile)(v91 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                        {
                          atomic_store(1u, result);
                          uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v39);
                        }
                      }
                    }
                  }
                  char v30 = v32 + 5;
                  v31 += 40;
                }
                while (v32 + 5 != (void *)a2);
              }
            }
          }
          else if ((_DWORD *)v8 != a2)
          {
            uint64_t v72 = (uint64_t *)(v8 + 40);
            if ((_DWORD *)(v8 + 40) != a2)
            {
              uint64_t v73 = 0;
              uint64_t v74 = v8 - 40;
              uint64_t v75 = -1;
              uint64_t v76 = 1;
              uint64_t v77 = (_DWORD *)v8;
              do
              {
                uint64_t v78 = v73;
                uint64_t v73 = v76;
                if (*(_DWORD *)v72 < *v77 || *(_DWORD *)v72 <= *v77 && v77[11] < *(_DWORD *)(v8 + 40 * v78 + 4))
                {
                  uint64_t v90 = *v72;
                  std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](&v91, (uint64_t)(v77 + 12));
                  std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](&v93, (uint64_t)(v77 + 16));
                  uint64_t v79 = v75;
                  for (uint64_t j = v74; ; j -= 40)
                  {
                    *(void *)(j + 80) = *(void *)(j + 40);
                    std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(j + 88, (unsigned __int8 *)(j + 48));
                    std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(j + 104, (unsigned __int8 *)(j + 64));
                    if (!v79) {
                      goto LABEL_248;
                    }
                    if (v90 >= *(_DWORD *)j
                      && (v90 > *(_DWORD *)j || HIDWORD(v90) >= *(_DWORD *)(j + 4)))
                    {
                      break;
                    }
                    ++v79;
                  }
                  *(void *)(j + ++*(_DWORD *)(this + 40) = v90;
                  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(j + 48, (unsigned __int8 *)&v91);
                  uint64_t result = (unsigned int *)std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(j + 64, (unsigned __int8 *)&v93);
                  if (v94)
                  {
                    if ((v93 & 0x8000000000000) != 0)
                    {
                      uint64_t result = (unsigned int *)(v93 & 0xFFFFFFFFFFFFLL);
                      if (atomic_fetch_add((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                      {
                        atomic_store(1u, result);
                        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v81);
                      }
                    }
                  }
                  if (v92)
                  {
                    if ((v91 & 0x8000000000000) != 0)
                    {
                      uint64_t result = (unsigned int *)(v91 & 0xFFFFFFFFFFFFLL);
                      if (atomic_fetch_add((atomic_uint *volatile)(v91 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                      {
                        atomic_store(1u, result);
                        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v81);
                      }
                    }
                  }
                }
                uint64_t v77 = (_DWORD *)(v8 + 40 * v73);
                uint64_t v76 = v73 + 1;
                uint64_t v72 = (uint64_t *)(v77 + 10);
                v74 += 40;
                --v75;
              }
              while (v77 + 10 != a2);
            }
          }
          return result;
        }
        if (!a3)
        {
          if ((_DWORD *)v8 != a2)
          {
            int64_t v84 = (v12 - 2) >> 1;
            int64_t v40 = v84;
            do
            {
              int64_t v41 = v40;
              if (v84 >= v40)
              {
                uint64_t v42 = (2 * v40) | 1;
                uint64_t v43 = v8 + 40 * v42;
                if (2 * v40 + 2 < (uint64_t)v12)
                {
                  unsigned int v44 = *(_DWORD *)(v43 + 40);
                  if (*(_DWORD *)v43 < v44
                    || *(_DWORD *)v43 <= v44 && *(_DWORD *)(v8 + 40 * v42 + 4) < *(_DWORD *)(v43 + 44))
                  {
                    v43 += 40;
                    uint64_t v42 = 2 * v40 + 2;
                  }
                }
                unsigned int v45 = (uint64_t *)(v8 + 40 * v40);
                if (*(_DWORD *)v43 >= *(_DWORD *)v45
                  && (*(_DWORD *)v43 > *(_DWORD *)v45 || *(_DWORD *)(v43 + 4) >= *(_DWORD *)(v8 + 40 * v40 + 4)))
                {
                  uint64_t v90 = *v45;
                  int64_t v83 = v40;
                  uint64_t v46 = v8 + 40 * v40;
                  std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](&v91, v46 + 8);
                  std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](&v93, v46 + 24);
                  while (1)
                  {
                    uint64_t v47 = (uint64_t *)v43;
                    uint64_t v48 = v43 + 8;
                    uint64_t *v45 = *(void *)v43;
                    std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v45 + 1), (unsigned __int8 *)(v43 + 8));
                    std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v45 + 3), (unsigned __int8 *)(v43 + 24));
                    if (v84 < v42) {
                      break;
                    }
                    uint64_t v49 = (2 * v42) | 1;
                    uint64_t v43 = v8 + 40 * v49;
                    if (2 * v42 + 2 < (uint64_t)v12)
                    {
                      unsigned int v50 = *(_DWORD *)(v43 + 40);
                      if (*(_DWORD *)v43 < v50
                        || *(_DWORD *)v43 <= v50 && *(_DWORD *)(v8 + 40 * v49 + 4) < *(_DWORD *)(v43 + 44))
                      {
                        v43 += 40;
                        uint64_t v49 = 2 * v42 + 2;
                      }
                    }
                    if (*(_DWORD *)v43 < v90) {
                      break;
                    }
                    unsigned int v45 = v47;
                    uint64_t v42 = v49;
                    if (*(_DWORD *)v43 <= v90)
                    {
                      unsigned int v45 = v47;
                      uint64_t v42 = v49;
                      if (*(_DWORD *)(v43 + 4) < HIDWORD(v90)) {
                        break;
                      }
                    }
                  }
                  uint64_t *v47 = v90;
                  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v48, (unsigned __int8 *)&v91);
                  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v47 + 3), (unsigned __int8 *)&v93);
                  if (v94)
                  {
                    if ((v93 & 0x8000000000000) != 0)
                    {
                      unsigned int v52 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFLL);
                      if (atomic_fetch_add((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                      {
                        atomic_store(1u, v52);
                        WTF::fastFree((WTF *)v52, v51);
                      }
                    }
                  }
                  if (v92)
                  {
                    if ((v91 & 0x8000000000000) != 0)
                    {
                      uint64_t v53 = (unsigned int *)(v91 & 0xFFFFFFFFFFFFLL);
                      if (atomic_fetch_add((atomic_uint *volatile)(v91 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                      {
                        atomic_store(1u, v53);
                        WTF::fastFree((WTF *)v53, v51);
                      }
                    }
                  }
                  int64_t v41 = v83;
                }
              }
              int64_t v40 = v41 - 1;
            }
            while (v41);
            int64_t v54 = v11 / 0x28uLL;
            do
            {
              uint64_t v55 = a2;
              uint64_t v85 = *(void *)v8;
              std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](&v86, v8 + 8);
              std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](&v88, v8 + 24);
              uint64_t v56 = 0;
              unsigned int v57 = (void *)v8;
              do
              {
                uint64_t v58 = v56 + 1;
                uint64_t v59 = &v57[5 * v56 + 5];
                uint64_t v60 = 2 * v56;
                uint64_t v56 = (2 * v56) | 1;
                int64_t v61 = v60 + 2;
                if (v61 < v54)
                {
                  unsigned int v62 = *((_DWORD *)v59 + 10);
                  if (*(_DWORD *)v59 < v62 || *(_DWORD *)v59 <= v62 && HIDWORD(v57[5 * v58]) < *((_DWORD *)v59 + 11))
                  {
                    v59 += 5;
                    uint64_t v56 = v61;
                  }
                }
                *unsigned int v57 = *v59;
                std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v57 + 1), (unsigned __int8 *)v59 + 8);
                std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v57 + 3), (unsigned __int8 *)v59 + 24);
                unsigned int v57 = v59;
              }
              while (v56 <= (uint64_t)((unint64_t)(v54 - 2) >> 1));
              a2 -= 10;
              if (v59 == (uint64_t *)(v55 - 10))
              {
                *uint64_t v59 = v85;
                std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v59 + 1), (unsigned __int8 *)&v86);
                uint64_t result = (unsigned int *)std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v59 + 3), (unsigned __int8 *)&v88);
              }
              else
              {
                *uint64_t v59 = *((void *)v55 - 5);
                uint64_t v63 = (uint64_t)(v55 - 8);
                std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v59 + 1), (unsigned __int8 *)v55 - 32);
                uint64_t v64 = (unsigned __int8 *)(v55 - 4);
                std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v59 + 3), v64);
                *(void *)a2 = v85;
                std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v63, (unsigned __int8 *)&v86);
                uint64_t result = (unsigned int *)std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)v64, (unsigned __int8 *)&v88);
                uint64_t v66 = (uint64_t)v59 - v8 + 40;
                if (v66 >= 41)
                {
                  unint64_t v67 = (v66 / 0x28uLL - 2) >> 1;
                  unint64_t v68 = v8 + 40 * v67;
                  if (*(_DWORD *)v68 < *(_DWORD *)v59
                    || *(_DWORD *)v68 <= *(_DWORD *)v59 && *(_DWORD *)(v8 + 40 * v67 + 4) < *((_DWORD *)v59 + 1))
                  {
                    uint64_t v90 = *v59;
                    std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](&v91, (uint64_t)(v59 + 1));
                    std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](&v93, (uint64_t)(v59 + 3));
                    while (1)
                    {
                      uint64_t v69 = (uint64_t *)v68;
                      uint64_t v70 = v68 + 8;
                      *uint64_t v59 = *(void *)v68;
                      std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v59 + 1), (unsigned __int8 *)(v68 + 8));
                      std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v59 + 3), (unsigned __int8 *)(v68 + 24));
                      if (!v67) {
                        break;
                      }
                      unint64_t v67 = (v67 - 1) >> 1;
                      unint64_t v68 = v8 + 40 * v67;
                      uint64_t v59 = v69;
                      if (*(_DWORD *)v68 >= v90)
                      {
                        if (*(_DWORD *)v68 > v90) {
                          break;
                        }
                        uint64_t v59 = v69;
                        if (*(_DWORD *)(v8 + 40 * v67 + 4) >= HIDWORD(v90)) {
                          break;
                        }
                      }
                    }
                    uint64_t *v69 = v90;
                    std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v70, (unsigned __int8 *)&v91);
                    uint64_t result = (unsigned int *)std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v69 + 3), (unsigned __int8 *)&v93);
                    if (v94)
                    {
                      if ((v93 & 0x8000000000000) != 0)
                      {
                        uint64_t result = (unsigned int *)(v93 & 0xFFFFFFFFFFFFLL);
                        if (atomic_fetch_add((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                        {
                          atomic_store(1u, result);
                          uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v65);
                        }
                      }
                    }
                    if (v92)
                    {
                      if ((v91 & 0x8000000000000) != 0)
                      {
                        uint64_t result = (unsigned int *)(v91 & 0xFFFFFFFFFFFFLL);
                        if (atomic_fetch_add((atomic_uint *volatile)(v91 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                        {
                          atomic_store(1u, result);
                          uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v65);
                        }
                      }
                    }
                  }
                }
              }
              if (v89)
              {
                if ((v88 & 0x8000000000000) != 0)
                {
                  uint64_t result = (unsigned int *)(v88 & 0xFFFFFFFFFFFFLL);
                  if (atomic_fetch_add((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                  {
                    atomic_store(1u, result);
                    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v65);
                  }
                }
              }
              if (v87)
              {
                if ((v86 & 0x8000000000000) != 0)
                {
                  uint64_t result = (unsigned int *)(v86 & 0xFFFFFFFFFFFFLL);
                  if (atomic_fetch_add((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                  {
                    atomic_store(1u, result);
                    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v65);
                  }
                }
              }
            }
            while (v54-- > 2);
          }
          return result;
        }
        if ((unint64_t)v11 >= 0x1401)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>((unsigned int *)v8, v8 + 40 * (v12 >> 1), a2 - 10);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>((unsigned int *)(v8 + 40), v8 + 40 * (v12 >> 1) - 40, a2 - 20);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>((unsigned int *)(v8 + 80), v8 + 40 + 40 * (v12 >> 1), a2 - 30);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>((unsigned int *)(v8 + 40 * (v12 >> 1) - 40), v8 + 40 * (v12 >> 1), (unsigned int *)(v8 + 40 + 40 * (v12 >> 1)));
          std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)v8, v8 + 40 * (v12 >> 1));
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>((unsigned int *)(v8 + 40 * (v12 >> 1)), v8, a2 - 10);
        }
        --a3;
        if (a4) {
          break;
        }
        unsigned int v13 = *(_DWORD *)(v8 - 40);
        if (v13 < *(_DWORD *)v8 || v13 <= *(_DWORD *)v8 && *(_DWORD *)(v8 - 36) < *(_DWORD *)(v8 + 4)) {
          break;
        }
        uint64_t v90 = *(void *)v8;
        std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](&v91, v8 + 8);
        std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](&v93, v8 + 24);
        if (v90 < *v9 || v90 <= *v9 && HIDWORD(v90) < *(a2 - 9))
        {
          unint64_t k = v8 + 40;
          if ((_DWORD *)(v8 + 40) == a2) {
            goto LABEL_248;
          }
          while (v90 >= *(_DWORD *)k
               && (v90 > *(_DWORD *)k || HIDWORD(v90) >= *(_DWORD *)(k + 4)))
          {
            k += 40;
            if ((_DWORD *)k == a2) {
              goto LABEL_248;
            }
          }
        }
        else
        {
          for (unint64_t k = v8 + 40; k < (unint64_t)a2; k += 40)
          {
            if (v90 < *(_DWORD *)k
              || v90 <= *(_DWORD *)k && HIDWORD(v90) < *(_DWORD *)(k + 4))
            {
              break;
            }
          }
        }
        uint64_t v23 = a2;
        if (k >= (unint64_t)a2) {
          goto LABEL_88;
        }
        if (a2 == (_DWORD *)v8) {
          goto LABEL_248;
        }
        uint64_t v23 = a2 - 10;
        while (v90 < *v23 || v90 <= *v23 && HIDWORD(v90) < v23[1])
        {
          BOOL v5 = v23 == (_DWORD *)v8;
          v23 -= 10;
          if (v5) {
            goto LABEL_248;
          }
        }
LABEL_88:
        while (k < (unint64_t)v23)
        {
          std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)k, (uint64_t)v23);
          k += 40;
          if ((_DWORD *)k == a2) {
            goto LABEL_248;
          }
          while (v90 >= *(_DWORD *)k
               && (v90 > *(_DWORD *)k || HIDWORD(v90) >= *(_DWORD *)(k + 4)))
          {
            k += 40;
            if ((_DWORD *)k == a2) {
              goto LABEL_248;
            }
          }
          if (v23 == (_DWORD *)v8) {
            goto LABEL_248;
          }
          v23 -= 10;
          while (v90 < *v23 || v90 <= *v23 && HIDWORD(v90) < v23[1])
          {
            BOOL v5 = v23 == (_DWORD *)v8;
            v23 -= 10;
            if (v5) {
              goto LABEL_248;
            }
          }
        }
        if (k - 40 != v8)
        {
          *(void *)uint64_t v8 = *(void *)(k - 40);
          std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v8 + 8, (unsigned __int8 *)(k - 32));
          std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v8 + 24, (unsigned __int8 *)(k - 16));
        }
        *(void *)(k - ++*(_DWORD *)(this + 40) = v90;
        std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(k - 32, (unsigned __int8 *)&v91);
        uint64_t result = (unsigned int *)std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(k - 16, (unsigned __int8 *)&v93);
        if (v94)
        {
          if ((v93 & 0x8000000000000) != 0)
          {
            uint64_t result = (unsigned int *)(v93 & 0xFFFFFFFFFFFFLL);
            unsigned int add = atomic_fetch_add((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF);
            BOOL v4 = add != 0;
            BOOL v5 = add == 1;
            if (add == 1)
            {
              atomic_store(1u, result);
              uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v24);
            }
          }
        }
        if (v92)
        {
          if ((v91 & 0x8000000000000) != 0)
          {
            uint64_t result = (unsigned int *)(v91 & 0xFFFFFFFFFFFFLL);
            unsigned int v28 = atomic_fetch_add((atomic_uint *volatile)(v91 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF);
            BOOL v4 = v28 != 0;
            BOOL v5 = v28 == 1;
            if (v28 == 1)
            {
              atomic_store(1u, result);
              uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v24);
            }
          }
        }
LABEL_109:
        a4 = 0;
      }
      uint64_t v90 = *(void *)v8;
      std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](&v91, v8 + 8);
      std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](&v93, v8 + 24);
      if ((_DWORD *)(v8 + 40) == a2) {
        goto LABEL_248;
      }
      uint64_t v14 = 0;
      while (1)
      {
        unsigned int v15 = *(_DWORD *)(v8 + v14 + 40);
        if (v15 >= v90 && (v15 > v90 || *(_DWORD *)(v8 + v14 + 44) >= HIDWORD(v90))) {
          break;
        }
        v14 += 40;
        if ((_DWORD *)(v8 + v14 + 40) == a2) {
          goto LABEL_248;
        }
      }
      unint64_t v16 = v8 + v14 + 40;
      if (v14)
      {
        uint64_t v17 = a2 - 10;
        if (a2 == (_DWORD *)v8) {
          goto LABEL_248;
        }
        while (*v17 >= v90 && (*v17 > v90 || v17[1] >= HIDWORD(v90)))
        {
          BOOL v5 = v17 == (_DWORD *)v8;
          v17 -= 10;
          if (v5) {
            goto LABEL_248;
          }
        }
      }
      else
      {
        uint64_t v17 = a2;
        if (v16 < (unint64_t)a2)
        {
          unsigned int v18 = *v9;
          uint64_t v17 = a2 - 10;
          if (*v9 >= v90)
          {
            uint64_t v17 = a2 - 10;
            do
            {
              if (v18 <= v90)
              {
                if (v16 >= (unint64_t)v17 || v17[1] < HIDWORD(v90)) {
                  break;
                }
              }
              else if (v16 >= (unint64_t)v17)
              {
                break;
              }
              unsigned int v19 = *(v17 - 10);
              v17 -= 10;
              unsigned int v18 = v19;
            }
            while (v19 >= v90);
          }
        }
      }
      unint64_t k = v16;
      if (v16 < (unint64_t)v17)
      {
        uint64_t v20 = v17;
        while (1)
        {
          std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)k, (uint64_t)v20);
          k += 40;
          if ((_DWORD *)k == a2) {
            break;
          }
          while (*(_DWORD *)k < v90
               || *(_DWORD *)k <= v90 && *(_DWORD *)(k + 4) < HIDWORD(v90))
          {
            k += 40;
            if ((_DWORD *)k == a2) {
              goto LABEL_248;
            }
          }
          if (v20 == (_DWORD *)v8) {
            break;
          }
          v20 -= 10;
          while (*v20 >= v90 && (*v20 > v90 || v20[1] >= HIDWORD(v90)))
          {
            BOOL v5 = v20 == (_DWORD *)v8;
            v20 -= 10;
            if (v5) {
              goto LABEL_248;
            }
          }
          if (k >= (unint64_t)v20) {
            goto LABEL_55;
          }
        }
LABEL_248:
        __break(1u);
LABEL_249:
        JUMPOUT(0);
      }
LABEL_55:
      if (k - 40 != v8)
      {
        *(void *)uint64_t v8 = *(void *)(k - 40);
        std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v8 + 8, (unsigned __int8 *)(k - 32));
        std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v8 + 24, (unsigned __int8 *)(k - 16));
      }
      *(void *)(k - ++*(_DWORD *)(this + 40) = v90;
      std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(k - 32, (unsigned __int8 *)&v91);
      std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(k - 16, (unsigned __int8 *)&v93);
      if (v94)
      {
        if ((v93 & 0x8000000000000) != 0)
        {
          uint64_t v25 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v25);
            WTF::fastFree((WTF *)v25, v21);
          }
        }
      }
      if (v92)
      {
        if ((v91 & 0x8000000000000) != 0)
        {
          char v26 = (unsigned int *)(v91 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v91 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v26);
            WTF::fastFree((WTF *)v26, v21);
          }
        }
      }
      if (v16 < (unint64_t)v17)
      {
LABEL_64:
        uint64_t result = (unsigned int *)std::__introsort<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *,false>(v8, k - 40, a3, a4 & 1);
        goto LABEL_109;
      }
      char v22 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(v8, (_DWORD *)(k - 40));
      uint64_t result = (unsigned int *)std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(k, a2);
      if (result) {
        break;
      }
      if ((v22 & 1) == 0) {
        goto LABEL_64;
      }
    }
    a2 = (_DWORD *)(k - 40);
    if ((v22 & 1) == 0) {
      continue;
    }
    return result;
  }
}