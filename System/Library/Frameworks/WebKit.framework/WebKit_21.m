IPC::Encoder *WTF::Detail::CallableWrapper<void WebKit::WebProcessPool::sendToAllProcessesForSession<Messages::WebProcess::SetTrackingPreventionEnabled>(Messages::WebProcess::SetTrackingPreventionEnabled const&,PAL::SessionID,WebKit::ShouldSkipSuspendedProcesses)::{lambda(Messages::WebProcess::SetTrackingPreventionEnabled&)#1},void,WebKit::WebProcessProxy &>::call(IPC::Encoder *result, uint64_t a2)
{
  BOOL v3;
  IPC::Encoder *v4;
  void *v5;
  uint64_t v6;
  WTF *v7;
  void *v8;
  char v9;
  uint64_t v10;
  char v11;
  IPC::Encoder *v12;

  if (!**((unsigned char **)result + 1) || (*(unsigned char *)(a2 + 389) ? (v3 = *(void *)(a2 + 224) == 0) : (v3 = 0), !v3))
  {
    v9 = **((unsigned char **)result + 2);
    v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)v4 = 2694;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    v12 = v4;
    IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v4, &v9);
    LOBYTE(v10) = 0;
    v11 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v12, 0, (uint64_t)&v10, 1);
    if (v11)
    {
      v6 = v10;
      v10 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
    result = v12;
    v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v5);
      return (IPC::Encoder *)WTF::fastFree(v7, v8);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClosePCMDatabase,WebKit::WebsiteDataStore::closeDatabases(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebsiteDataStore::closeDatabases(WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E6488;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClosePCMDatabase,WebKit::WebsiteDataStore::closeDatabases(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebsiteDataStore::closeDatabases(WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E6488;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CloseITPDatabase,WebKit::WebsiteDataStore::closeDatabases(WTF::CompletionHandler<void ()(void)> &&)::$_1>(WebKit::WebsiteDataStore::closeDatabases(WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E64B0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CloseITPDatabase,WebKit::WebsiteDataStore::closeDatabases(WTF::CompletionHandler<void ()(void)> &&)::$_1>(WebKit::WebsiteDataStore::closeDatabases(WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E64B0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<void WebKit::WebProcessPool::sendToAllProcessesForSession<Messages::WebProcess::ClearResourceLoadStatistics>(Messages::WebProcess::ClearResourceLoadStatistics const&,PAL::SessionID,WebKit::ShouldSkipSuspendedProcesses)::{lambda(Messages::WebProcess::ClearResourceLoadStatistics&)#1},void,WebKit::WebProcessProxy &>::call(IPC::Encoder *result, uint64_t a2)
{
  if (!**((unsigned char **)result + 1) || (*(unsigned char *)(a2 + 389) ? (BOOL v3 = *(void *)(a2 + 224) == 0) : (BOOL v3 = 0), !v3))
  {
    v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)v4 = 2621;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    v11 = v4;
    LOBYTE(v9) = 0;
    char v10 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v11, 0, (uint64_t)&v9, 1);
    if (v10)
    {
      uint64_t v6 = v9;
      uint64_t v9 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
    result = v11;
    v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v5);
      return (IPC::Encoder *)WTF::fastFree(v7, v8);
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashMap(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reserveInitialCapacity(a1, a3);
  if (a3)
  {
    uint64_t v6 = a2 + 16 * a3;
    do
    {
      WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String const&>(a1, (WTF::ASCIICaseInsensitiveHash **)a2, (_DWORD **)(a2 + 8), (uint64_t)v8);
      a2 += 16;
    }
    while (a2 != v6);
  }
  return a1;
}

WTF::StringImpl *WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String const&>@<X0>(uint64_t *a1@<X0>, WTF::ASCIICaseInsensitiveHash **a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v9;
  v11 = (WTF::StringImpl *)(v8 + 16 * v10);
  if ((WTF::equal(*(WTF **)v11, 0, v12) & 1) == 0)
  {
    v14 = 0;
    int v15 = 1;
    do
    {
      if (*(void *)v11 == -1)
      {
        v14 = v11;
      }
      else
      {
        result = (WTF::StringImpl *)WTF::equalIgnoringASCIICase(*(WTF **)v11, *a2, v13);
        if (result)
        {
          uint64_t v27 = *a1;
          if (*a1) {
            uint64_t v28 = *(unsigned int *)(v27 - 4);
          }
          else {
            uint64_t v28 = 0;
          }
          char v26 = 0;
          uint64_t v25 = v27 + 16 * v28;
          goto LABEL_30;
        }
      }
      unsigned int v10 = (v10 + v15) & v9;
      v11 = (WTF::StringImpl *)(v8 + 16 * v10);
      ++v15;
    }
    while (!WTF::equal(*(WTF **)v11, 0, v13));
    if (v14)
    {
      *(void *)v14 = 0;
      *((void *)v14 + 1) = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = v14;
    }
  }
  WTF::String::operator=((uint64_t *)v11, a2);
  v18 = *a3;
  if (*a3) {
    *v18 += 2;
  }
  result = (WTF::StringImpl *)*((void *)v11 + 1);
  *((void *)v11 + 1) = v18;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  uint64_t v19 = *a1;
  if (*a1) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v21 = *a1;
  if (*a1) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_27:
      result = (WTF::StringImpl *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, (WTF::StringImpl **)v11);
      v11 = result;
      uint64_t v21 = *a1;
      if (*a1) {
        unint64_t v24 = *(unsigned int *)(v21 - 4);
      }
      else {
        unint64_t v24 = 0;
      }
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_27;
  }
  uint64_t v25 = v21 + 16 * v24;
  char v26 = 1;
LABEL_30:
  *(void *)a4 = v11;
  *(void *)(a4 + 8) = v25;
  *(unsigned char *)(a4 + 16) = v26;
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CountNonDefaultSessionSets,WTF::CompletionHandler<void ()(unsigned long)>>(WTF::CompletionHandler<void ()(unsigned long)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E6500;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CountNonDefaultSessionSets,WTF::CompletionHandler<void ()(unsigned long)>>(WTF::CompletionHandler<void ()(unsigned long)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E6500;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CountNonDefaultSessionSets,WTF::CompletionHandler<void ()(unsigned long)>>(WTF::CompletionHandler<void ()(unsigned long)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2 && (unint64_t v3 = IPC::Decoder::decode<std::tuple<double>>(a2), v4))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, unint64_t))(*(void *)v5 + 16))(v5, v3);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>)> &&)::$_0,void,WebKit::WebPageProxy *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E6528;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>)> &&)::$_0,void,WebKit::WebPageProxy *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E6528;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>)> &&)::$_0,void,WebKit::WebPageProxy *>::call(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
LABEL_10:
    uint64_t v9 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    unsigned int v10 = *(void (**)(uint64_t))(*(void *)v9 + 8);
    v10(v9);
    return;
  }
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(void *)(v3 + 1016) || *(unsigned __int8 *)(v3 + 1000) < 2u)
  {
    uint64_t v4 = *(void *)(a2 + 328);
    if (v4)
    {
      CFRetain(*(CFTypeRef *)(v4 + 8));
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v6 = &unk_1EE9E6550;
      v6[1] = v5;
      uint64_t v7 = *(void *)(v4 + 424);
      *(void *)(v4 + 424) = v6;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      uint64_t v8 = *(const void **)(v4 + 8);
      CFRelease(v8);
      return;
    }
    goto LABEL_10;
  }
  v11 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "The WKWebView provided in response to a ServiceWorker openWindow request was not in the loading state", v13, 2u);
  }
  uint64_t v12 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void, void))(*(void *)v12 + 16))(v12, 0, 0);
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit16WebsiteDataStore27openWindowFromServiceWorkerERKNS_6StringERKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEEEEEN3__0clEPNS2_12WebPageProxyEEUlT_T0_E_vJSK_NSD_INS7_16ProcessQualifiedINSE_INS7_19FrameIdentifierTypeESH_yLSI_1EEEEEEEEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E6550;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit16WebsiteDataStore27openWindowFromServiceWorkerERKNS_6StringERKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEEEEEN3__0clEPNS2_12WebPageProxyEEUlT_T0_E_vJSK_NSD_INS7_16ProcessQualifiedINSE_INS7_19FrameIdentifierTypeESH_yLSI_1EEEEEEEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E6550;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit16WebsiteDataStore27openWindowFromServiceWorkerERKNS_6StringERKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEEEEEN3__0clEPNS2_12WebPageProxyEEUlT_T0_E_vJSK_NSD_INS7_16ProcessQualifiedINSE_INS7_19FrameIdentifierTypeESH_yLSI_1EEEEEEEEE4callESK_SY_(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

unint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::span<unsigned char const,18446744073709551615ul> const&,WTF::String const&,WebKit::SandboxExtensionHandle &&,WebKit::CallDownloadDidStart,std::span<unsigned char const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,WebKit::CallDownloadDidStart,0ul,1ul,2ul,3ul,4ul,5ul,6ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, **(const void ***)(a2 + 16), *(void *)(*(void *)(a2 + 16) + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 24));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, *(const char ****)(a2 + 32));
  IPC::ArgumentCoder<WebKit::CallDownloadDidStart,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 40));
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(const void **)v4;
  size_t v6 = *(void *)(v4 + 8);

  return IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v5, v6);
}

unint64_t IPC::ArgumentCoder<WebKit::CallDownloadDidStart,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *((unsigned int *)a2 + 3));
  uint64_t v5 = *((unsigned int *)a2 + 3);
  if (v5)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = v6 + 32 * v5;
    do
    {
      IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)v6, *(unsigned int *)(v6 + 12));
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)(v6 + 16));
      v6 += 32;
    }
    while (v6 != v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetOriginQuotaRatioEnabledForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E6578;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetOriginQuotaRatioEnabledForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E6578;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetOriginQuotaRatioEnabledForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetAppBadgeForTesting,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)>>(WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E65A0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetAppBadgeForTesting,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)>>(WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E65A0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetAppBadgeForTesting,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)>>(WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<unsigned long long>>>(a2, (uint64_t)v9);
    if (v10)
    {
      uint64_t v3 = v9[0];
      uint64_t v4 = v9[1];
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3, v4);
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, void, void))(*(void *)v5 + 16))(v5, 0, 0);
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void, void))(*(void *)v6 + 16))(v6, 0, 0);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL,std::optional<WebCore::NotificationPayload> &&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9E65C8;
  WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL,std::optional<WebCore::NotificationPayload> &&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9E65C8;
  WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL,std::optional<WebCore::NotificationPayload> &&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(a1 + 8, a2, a3);
}

uint64_t WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::inlineSet<WebCore::RegistrableDomain const&,WebKit::RestrictedOpenerType&>@<X0>(uint64_t *a1@<X0>, WTF::ASCIICaseInsensitiveHash **a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    unsigned int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  uint64_t v10 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v9;
  uint64_t v11 = v8 + 16 * v10;
  if ((WTF::equal(*(WTF **)v11, 0, v12) & 1) == 0)
  {
    uint64_t v14 = 0;
    int v15 = 1;
    do
    {
      if (*(void *)v11 == -1)
      {
        uint64_t v14 = v11;
      }
      else
      {
        uint64_t result = WTF::equalIgnoringASCIICase(*(WTF **)v11, *a2, v13);
        if (result)
        {
          uint64_t v23 = *a1;
          if (*a1) {
            uint64_t v24 = *(unsigned int *)(v23 - 4);
          }
          else {
            uint64_t v24 = 0;
          }
          *(void *)a4 = v11;
          *(void *)(a4 + 8) = v23 + 16 * v24;
          *(unsigned char *)(a4 + 16) = 0;
          *(unsigned char *)(v8 + 16 * v10 + 8) = *a3;
          return result;
        }
      }
      uint64_t v10 = (v10 + v15) & v9;
      uint64_t v11 = v8 + 16 * v10;
      ++v15;
    }
    while (!WTF::equal(*(WTF **)v11, 0, v13));
    if (v14)
    {
      *(void *)uint64_t v14 = 0;
      *(unsigned char *)(v14 + 8) = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v11 = v14;
    }
  }
  uint64_t result = (uint64_t)WTF::String::operator=((uint64_t *)v11, a2);
  *(unsigned char *)(v11 + 8) = *a3;
  uint64_t v17 = *a1;
  if (*a1) {
    int v18 = *(_DWORD *)(v17 - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(v17 - 12) = v18;
  uint64_t v19 = *a1;
  if (*a1) {
    int v20 = *(_DWORD *)(v19 - 12);
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
  unint64_t v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_21:
      uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, v11);
      uint64_t v11 = result;
      uint64_t v19 = *a1;
      if (*a1) {
        unint64_t v22 = *(unsigned int *)(v19 - 4);
      }
      else {
        unint64_t v22 = 0;
      }
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_21;
  }
  *(void *)a4 = v11;
  *(void *)(a4 + 8) = v19 + 16 * v22;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void WebKit::FullscreenTouchSecheuristic::scoreOfNextTouch(WebKit::FullscreenTouchSecheuristic *this, CGPoint a2)
{
  CGFloat y = a2.y;
  CGFloat x = a2.x;
  WTF::MonotonicTime::now(this);
  double v6 = *((double *)this + 10);
  if (v6 == 0.0)
  {
    *((double *)this + 10) = v5;
  }
  else
  {
    double v7 = v5 - v6;
    *((double *)this + 10) = v5;
    v8.CGFloat x = x;
    v8.CGFloat y = y;
    WebKit::FullscreenTouchSecheuristic::scoreOfNextTouch(this, v8, (const WTF::Seconds *)&v7);
  }
}

void WebKit::FullscreenTouchSecheuristic::scoreOfNextTouch(WebKit::FullscreenTouchSecheuristic *this, CGPoint a2, const WTF::Seconds *a3)
{
  CGPoint v6 = a2;
  uint64_t v3 = (CGPoint *)((char *)this + 88);
  if (*((double *)this + 11) != -1.0 || *((double *)this + 12) != -1.0)
  {
    double v4 = *(double *)a3 / *((double *)this + 2) * *(double *)this;
    if (v4 > 1.0) {
      double v4 = 1.0;
    }
    if (v4 >= 0.0) {
      double v5 = v4;
    }
    else {
      double v5 = 0.0;
    }
    *((double *)this + 13) = *((double *)this + 13) * (1.0 - v5)
                           + v5
                           * WebKit::FullscreenTouchSecheuristic::distanceScore(this, &v6, (const CGPoint *)((char *)this + 88), a3);
  }
  CGPoint *v3 = v6;
}

double WebKit::FullscreenTouchSecheuristic::attenuationFactor(double *a1, double a2)
{
  double result = a2 / a1[2] * *a1;
  if (result > 1.0) {
    double result = 1.0;
  }
  if (result < 0.0) {
    return 0.0;
  }
  return result;
}

double WebKit::FullscreenTouchSecheuristic::distanceScore(WebKit::FullscreenTouchSecheuristic *this, const CGPoint *a2, const CGPoint *a3, const WTF::Seconds *a4)
{
  CGFloat v6 = a2->y - a3->y;
  double v7 = sqrt(*((double *)this + 4) * (v6 * v6) + *((double *)this + 3) * ((a2->x - a3->x) * (a2->x - a3->x)))
     / sqrt(*((double *)this + 4) * (*((double *)this + 9) * *((double *)this + 9))+ *((double *)this + 3) * (*((double *)this + 8) * *((double *)this + 8)));
  double v8 = *((double *)this + 6);
  if (v7 > v8) {
    double v7 = v8 + pow((v7 - v8) / (1.0 - v8), *((long double *)this + 5));
  }
  return v7 * (*((double *)this + 1) / *(double *)a4);
}

double WebKit::FullscreenTouchSecheuristic::reset(WebKit::FullscreenTouchSecheuristic *this)
{
  double result = 0.0;
  *((_OWORD *)this + 5) = xmmword_1994F6F60;
  *((_OWORD *)this + 6) = xmmword_1994F6F70;
  return result;
}

void WebKit::encodeLegacySessionState(WebKit *this@<X0>, WebKit **a2@<X8>)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &WebKit::sessionHistoryVersion);
  CFNumberRef v7 = v6;
  if (*((unsigned char *)this + 20))
  {
    CFNumberRef v47 = v6;
    v48 = a2;
    CFArrayRef Mutable = CFArrayCreateMutable(v5, *((unsigned int *)this + 3), MEMORY[0x1E4F1D510]);
    v49 = this;
    unsigned int v9 = *((_DWORD *)this + 3);
    if (v9)
    {
      unint64_t v10 = 0;
      uint64_t v11 = 312 * v9;
      uint64_t v12 = (unsigned __int8 *)(*(void *)v49 + 272);
      while (1)
      {
        WTF::String::createCFString((uint64_t *)&v53, (WTF::String *)(v12 - 248));
        WTF::String::createCFString((uint64_t *)&v52, (WTF::String *)(v12 - 256));
        WTF::String::createCFString((uint64_t *)&cf, (WTF::String *)(v12 - 240));
        if (v10 > 0x200000) {
          goto LABEL_13;
        }
        if ((_MergedGlobals_105 & 1) == 0)
        {
          qword_1EB359DE8 = 0;
          _MergedGlobals_105 = 1;
        }
        if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB359DF0, memory_order_acquire) != -1)
        {
          *(void *)&long long v55 = &value;
          valuePtr = &v55;
          std::__call_once(&qword_1EB359DF0, &valuePtr, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::encodeSessionHistoryEntryData(WebKit::FrameState const&)::$_0 &&>>);
        }
        long long v55 = xmmword_1994F76D0;
        v56 = (__CFString *)WTF::fastMalloc((WTF *)0x200);
        CFTypeRef v57 = v56;
        valuePtr = 0;
        WebKit::HistoryEntryDataEncoder::encodeFixedLengthData((size_t *)&v55, &valuePtr, 8uLL, 8u);
        LODWORD(valuePtr) = 2;
        WebKit::HistoryEntryDataEncoder::encodeFixedLengthData((size_t *)&v55, &valuePtr, 4uLL, 4u);
        WebKit::encodeFrameStateNode((size_t *)&v55, (uint64_t)(v12 - 248));
        CFIndex v13 = v55;
        uint64_t v14 = (const UInt8 *)v56;
        v56 = 0;
        WTF::fastFree(0, v15);
        CFDataRef v16 = CFDataCreateWithBytesNoCopy(v5, v14, v13, (CFAllocatorRef)qword_1EB359DE8);
        WTF::fastFree(0, v17);
        if (v16)
        {
          v10 += CFDataGetLength(v16);
          if (v10 > 0x200000 && CFArrayGetCount(Mutable) >= 1) {
            break;
          }
        }
LABEL_14:
        valuePtr = (long long *)*v12;
        CFNumberRef v18 = CFNumberCreate(v5, kCFNumberSInt64Type, &valuePtr);
        CFNumberRef v19 = v18;
        *(void *)&long long v55 = @"SessionHistoryEntryURL";
        *((void *)&v55 + 1) = v53;
        v56 = @"SessionHistoryEntryTitle";
        CFTypeRef v57 = v52;
        v58 = @"SessionHistoryEntryOriginalURL";
        CFTypeRef v59 = cf;
        if (v16)
        {
          v60 = @"SessionHistoryEntryData";
          CFDataRef v61 = v16;
          v62 = @"SessionHistoryEntryShouldOpenExternalURLsPolicyKey";
          CFNumberRef v63 = v18;
          unint64_t v20 = 5;
        }
        else
        {
          v60 = @"SessionHistoryEntryShouldOpenExternalURLsPolicyKey";
          CFDataRef v61 = v18;
          unint64_t v20 = 4;
        }
        WebKit::createDictionary((CFDictionaryRef)&value, (uint64_t)&v55, v20);
        uint64_t v21 = value;
        CFArrayAppendValue(Mutable, value);
        if (v21)
        {
          CFRelease(v21);
          if (!v19)
          {
LABEL_19:
            if (v16) {
              goto LABEL_30;
            }
            goto LABEL_20;
          }
        }
        else if (!v19)
        {
          goto LABEL_19;
        }
        CFRelease(v19);
        if (v16) {
LABEL_30:
        }
          CFRelease(v16);
LABEL_20:
        CFTypeRef v22 = cf;
        CFTypeRef cf = 0;
        if (v22) {
          CFRelease(v22);
        }
        CFTypeRef v23 = v52;
        CFTypeRef v52 = 0;
        if (v23) {
          CFRelease(v23);
        }
        CFTypeRef v24 = v53;
        CFTypeRef v53 = 0;
        if (v24) {
          CFRelease(v24);
        }
        v12 += 312;
        v11 -= 312;
        if (!v11) {
          goto LABEL_31;
        }
      }
      CFRelease(v16);
LABEL_13:
      CFDataRef v16 = 0;
      goto LABEL_14;
    }
LABEL_31:
    this = v49;
    if (!*((unsigned char *)v49 + 20))
    {
      CFDictionaryRef v44 = (const __CFDictionary *)std::__throw_bad_optional_access[abi:sn180100]();
      WebKit::createDictionary(v44, v45, v46);
      return;
    }
    LODWORD(v53) = *((_DWORD *)v49 + 4);
    CFNumberRef v25 = CFNumberCreate(v5, kCFNumberSInt32Type, &v53);
    CFNumberRef v7 = v47;
    *(void *)&long long v55 = @"SessionHistoryVersion";
    *((void *)&v55 + 1) = v47;
    v56 = @"SessionHistoryCurrentIndex";
    CFTypeRef v57 = v25;
    v58 = @"SessionHistoryEntries";
    CFTypeRef v59 = Mutable;
    WebKit::createDictionary((CFDictionaryRef)&valuePtr, (uint64_t)&v55, 3uLL);
    if (v25) {
      CFRelease(v25);
    }
    a2 = v48;
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    *(void *)&long long v55 = @"SessionHistoryVersion";
    *((void *)&v55 + 1) = v6;
    WebKit::createDictionary((CFDictionaryRef)&valuePtr, (uint64_t)&v55, 1uLL);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (*((void *)this + 4)) {
    WTF::String::createCFString((uint64_t *)&v53, (WebKit *)((char *)this + 32));
  }
  else {
    CFTypeRef v53 = 0;
  }
  CFNumberRef v26 = CFNumberCreate(v5, kCFNumberSInt64Type, (char *)this + 24);
  CFNumberRef v27 = v26;
  if (*((unsigned char *)this + 72)) {
    uint64_t v28 = (const void **)MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v28 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDataRef v29 = (const __CFData *)*v28;
  v30 = valuePtr;
  *(void *)&long long v55 = @"SessionHistory";
  *((void *)&v55 + 1) = valuePtr;
  if (v53)
  {
    v56 = @"ProvisionalURL";
    CFTypeRef v57 = v53;
    v58 = @"RenderTreeSize";
    CFTypeRef v59 = v26;
    v60 = @"IsAppInitiated";
    CFDataRef v61 = v29;
    unint64_t v31 = 4;
  }
  else
  {
    v56 = @"RenderTreeSize";
    CFTypeRef v57 = v26;
    v58 = @"IsAppInitiated";
    CFTypeRef v59 = v29;
    unint64_t v31 = 3;
  }
  WebKit::createDictionary((CFDictionaryRef)&v52, (uint64_t)&v55, v31);
  CFTypeRef v32 = v52;
  v33 = CFWriteStreamCreateWithAllocatedBuffers(v5, 0);
  if (!v33)
  {
    *a2 = 0;
    if (!v32) {
      goto LABEL_60;
    }
    goto LABEL_55;
  }
  v34 = v33;
  if (CFWriteStreamOpen(v33) && CFPropertyListWrite(v32, v34, kCFPropertyListBinaryFormat_v1_0, 0, 0))
  {
    CFTypeRef v35 = CFWriteStreamCopyProperty(v34, (CFStreamPropertyKey)*MEMORY[0x1E4F1D440]);
    CFDataRef v36 = (const __CFData *)WTF::checked_cf_cast<__CFData const*>(v35);
    CFIndex Length = CFDataGetLength(v36);
    CFIndex v38 = Length + 4;
    WTF::tryFastMalloc((WTF *)(Length + 4));
    if ((void)v55)
    {
      *(unsigned char *)long long v55 = 0;
      *(unsigned char *)(v55 + 1) = 0;
      *(unsigned char *)(v55 + 2) = 0;
      *(unsigned char *)(v55 + 3) = 2;
      v65.location = 0;
      v65.length = Length;
      CFDataGetBytes(v36, v65, (UInt8 *)(v55 + 4));
      uint64_t v40 = v55;
      *(void *)&long long v55 = 0;
      v41 = (WebKit *)API::Object::newObject(0x30uLL, 8);
      *(void *)v41 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2(v41);
      *(void *)v41 = &unk_1EE9B5358;
      *((void *)v41 + 2) = v40;
      *((void *)v41 + 3) = v38;
      *((void *)v41 + 4) = WebKit::encodeLegacySessionState(WebKit::SessionState const&)::$_0::__invoke;
      *((void *)v41 + 5) = 0;
      v42 = (WTF *)v55;
    }
    else
    {
      v42 = 0;
      v41 = 0;
    }
    *a2 = v41;
    WTF::fastFree(v42, v39);
    if (v36) {
      CFRelease(v36);
    }
  }
  else
  {
    *a2 = 0;
  }
  CFRelease(v34);
  if (v32) {
LABEL_55:
  }
    CFRelease(v32);
LABEL_60:
  if (v29) {
    CFRelease(v29);
  }
  if (v27) {
    CFRelease(v27);
  }
  CFTypeRef v43 = v53;
  CFTypeRef v53 = 0;
  if (!v43)
  {
    if (!v30) {
      return;
    }
LABEL_68:
    CFRelease(v30);
    return;
  }
  CFRelease(v43);
  if (v30) {
    goto LABEL_68;
  }
}

CFDictionaryRef WebKit::createDictionary(CFDictionaryRef result, uint64_t a2, unint64_t a3)
{
  double v4 = result;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  if (a3)
  {
    if (a3 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    LODWORD(v22) = a3;
    keys = (void **)WTF::fastMalloc((WTF *)(8 * a3));
    CFNumberRef v6 = (void **)WTF::fastMalloc((WTF *)(8 * a3));
    unsigned int v7 = 0;
    LODWORD(v20) = a3;
    values = v6;
    unint64_t v8 = a2 + 8;
    uint64_t v9 = 16 * a3;
    do
    {
      int v10 = HIDWORD(v22);
      if (HIDWORD(v22) == v22)
      {
        unint64_t v11 = HIDWORD(v22) + ((unint64_t)HIDWORD(v22) >> 2);
        if (v11 >= 0x10) {
          unint64_t v12 = v11 + 1;
        }
        else {
          unint64_t v12 = 16;
        }
        if (v12 <= (unint64_t)HIDWORD(v22) + 1) {
          unint64_t v13 = HIDWORD(v22) + 1;
        }
        else {
          unint64_t v13 = v12;
        }
        WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)&keys, v13);
        int v10 = HIDWORD(v22);
        uint64_t v14 = &keys[HIDWORD(v22)];
      }
      else
      {
        uint64_t v14 = &keys[HIDWORD(v22)];
      }
      const UInt8 *v14 = *(void **)(v8 - 8);
      HIDWORD(v22) = v10 + 1;
      if (v7 == v20)
      {
        int v15 = (void **)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&values, v7 + 1, v8);
        unsigned int v7 = HIDWORD(v20);
        CFNumberRef v6 = values;
        CFDataRef v16 = &values[HIDWORD(v20)];
      }
      else
      {
        CFDataRef v16 = &v6[v7];
        int v15 = (void **)v8;
      }
      *CFDataRef v16 = *v15;
      HIDWORD(v20) = ++v7;
      v8 += 16;
      v9 -= 16;
    }
    while (v9);
    uint64_t v17 = keys;
  }
  else
  {
    CFNumberRef v6 = 0;
    uint64_t v17 = 0;
  }
  double result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v17, (const void **)v6, a3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  void *v4 = result;
  if (v6) {
    double result = (CFDictionaryRef)WTF::fastFree((WTF *)v6, v18);
  }
  if (v17)
  {
    return (CFDictionaryRef)WTF::fastFree((WTF *)v17, v18);
  }
  return result;
}

uint64_t WTF::checked_cf_cast<__CFData const*>(CFTypeRef cf)
{
  if (!cf) {
    return (uint64_t)cf;
  }
  CFTypeID v2 = CFGetTypeID(cf);
  if (v2 == CFDataGetTypeID()) {
    return (uint64_t)cf;
  }
  uint64_t result = 71;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::decodeLegacySessionState(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 < 4 || bswap32(*(_DWORD *)a1) != 2) {
    return 0;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDataRef v5 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)(a1 + 4), a2 - 4);
  CFPropertyListRef v6 = CFPropertyListCreateWithData(v4, v5, 0, 0, 0);
  if (v5) {
    CFRelease(v5);
  }
  CFDictionaryRef v7 = (const __CFDictionary *)WTF::dynamic_cf_cast<__CFDictionary const*>(v6);
  uint64_t v8 = (uint64_t)v7;
  if (v7)
  {
    Value = CFDictionaryGetValue(v7, @"SessionHistory");
    CFDictionaryRef v10 = (const __CFDictionary *)WTF::dynamic_cf_cast<__CFDictionary const*>(Value);
    if (v10)
    {
      CFDictionaryRef v11 = v10;
      unint64_t v12 = CFDictionaryGetValue(v10, @"SessionHistoryVersion");
      CFNumberRef v13 = (const __CFNumber *)WTF::dynamic_cf_cast<__CFNumber const*>(v12);
      if (!v13)
      {
        uint64_t v22 = CFDictionaryGetValue(v11, @"SessionHistoryCurrentIndex");
        CFNumberRef v23 = (const __CFNumber *)WTF::dynamic_cf_cast<__CFNumber const*>(v22);
        if (!v23) {
          goto LABEL_49;
        }
        v42[0] = 0;
        if (!CFNumberGetValue(v23, kCFNumberCFIndexType, v42) || (uint64_t)v42[0] < -1) {
          goto LABEL_49;
        }
        CFNumberRef v25 = CFDictionaryGetValue(v11, @"SessionHistoryEntries");
        CFArrayRef v26 = (const __CFArray *)WTF::dynamic_cf_cast<__CFArray const*>(v25);
        if (!v26) {
          goto LABEL_49;
        }
        CFArrayRef v27 = v26;
        uint64_t v28 = v42[0];
        if (!WebKit::decodeSessionHistoryEntries(v26, a3)) {
          goto LABEL_49;
        }
        if (v28 == (WTF::StringImpl *)-1)
        {
          if (!CFArrayGetCount(v27)) {
            goto LABEL_39;
          }
        }
        else if (LODWORD(v42[0]) < (unint64_t)*(unsigned int *)(a3 + 12))
        {
          *(_DWORD *)(a3 + 16) = v42[0];
          *(unsigned char *)(a3 + 20) = 1;
          goto LABEL_39;
        }
LABEL_49:
        uint64_t v8 = 0;
        goto LABEL_57;
      }
      valuePtr = 0;
      if (CFNumberGetValue(v13, kCFNumberCFIndexType, &valuePtr)) {
        BOOL v14 = valuePtr == (WTF::StringImpl *)1;
      }
      else {
        BOOL v14 = 0;
      }
      if (!v14) {
        goto LABEL_49;
      }
      int v15 = CFDictionaryGetValue(v11, @"SessionHistoryCurrentIndex");
      CFNumberRef v16 = (const __CFNumber *)WTF::dynamic_cf_cast<__CFNumber const*>(v15);
      if (v16)
      {
        v42[0] = 0;
        if (!CFNumberGetValue(v16, kCFNumberCFIndexType, v42)) {
          goto LABEL_49;
        }
        if (((unint64_t)v42[0] & 0x8000000000000000) != 0) {
          goto LABEL_49;
        }
        CFNumberRef v18 = CFDictionaryGetValue(v11, @"SessionHistoryEntries");
        CFArrayRef v19 = (const __CFArray *)WTF::dynamic_cf_cast<__CFArray const*>(v18);
        if (!v19) {
          goto LABEL_49;
        }
        if ((WebKit::decodeSessionHistoryEntries(v19, a3) & 1) == 0) {
          goto LABEL_49;
        }
        unsigned int v20 = v42[0];
        *(_DWORD *)(a3 + 16) = v42[0];
        *(unsigned char *)(a3 + 20) = 1;
        if (*(unsigned int *)(a3 + 12) <= (unint64_t)v20) {
          goto LABEL_49;
        }
      }
      else
      {
        if (*(unsigned char *)(a3 + 20)) {
          *(unsigned char *)(a3 + 20) = 0;
        }
        unsigned int v29 = *(_DWORD *)(a3 + 12);
        if (v29) {
          WTF::VectorDestructor<true,WebKit::BackForwardListItemState>::destruct(*(WTF::StringImpl **)a3, (WTF::StringImpl *)(*(void *)a3 + 312 * v29));
        }
        v30 = *(WTF **)a3;
        if (*(void *)a3)
        {
          *(void *)a3 = 0;
          *(_DWORD *)(a3 + 8) = 0;
          WTF::fastFree(v30, v17);
        }
        v42[0] = 0;
        *(void *)a3 = 0;
        v42[1] = 0;
        *(void *)(a3 + 8) = 0;
        WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v17);
      }
    }
LABEL_39:
    unint64_t v31 = CFDictionaryGetValue((CFDictionaryRef)v8, @"ProvisionalURL");
    CFTypeRef v32 = WTF::dynamic_cf_cast<__CFString const*>(v31);
    if (!v32) {
      goto LABEL_50;
    }
    MEMORY[0x19972EAD0](&valuePtr, v32);
    MEMORY[0x19972E890](v42, &valuePtr, 0);
    WTF::URL::operator=(a3 + 32, (uint64_t)v42);
    v34 = v42[0];
    v42[0] = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, v33);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
    CFTypeRef v35 = valuePtr;
    valuePtr = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2) {
        WTF::StringImpl::destroy(v35, v33);
      }
      else {
        *(_DWORD *)v35 -= 2;
      }
    }
    if (*(unsigned char *)(a3 + 40))
    {
LABEL_50:
      CFDataRef v36 = CFDictionaryGetValue((CFDictionaryRef)v8, @"RenderTreeSize");
      CFNumberRef v37 = (const __CFNumber *)WTF::dynamic_cf_cast<__CFNumber const*>(v36);
      CFIndex v38 = (void *)(a3 + 24);
      if (v37) {
        CFNumberGetValue(v37, kCFNumberSInt64Type, v38);
      }
      else {
        *CFIndex v38 = 0;
      }
      v39 = CFDictionaryGetValue((CFDictionaryRef)v8, @"IsAppInitiated");
      if (v39 && (uint64_t v40 = v39, v41 = CFGetTypeID(v39), v41 == CFBooleanGetTypeID()))
      {
        *(unsigned char *)(a3 + 72) = v40 == (const void *)*MEMORY[0x1E4F1CFD0];
        uint64_t v8 = 1;
      }
      else
      {
        uint64_t v8 = 1;
        *(unsigned char *)(a3 + 72) = 1;
      }
      goto LABEL_57;
    }
    goto LABEL_49;
  }
LABEL_57:
  if (v6) {
    CFRelease(v6);
  }
  return v8;
}

const void *WTF::dynamic_cf_cast<__CFDictionary const*>(const void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CFDictionaryGetTypeID()) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

const void *WTF::dynamic_cf_cast<__CFString const*>(const void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CFStringGetTypeID()) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

const void *WTF::dynamic_cf_cast<__CFNumber const*>(const void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CFNumberGetTypeID()) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

void WebKit::SecItemShimProxy::~SecItemShimProxy(WebKit::SecItemShimProxy *this, void *a2)
{
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t vars8;

  WebKit::SecItemShimProxy::~SecItemShimProxy(this, a2);

  JUMPOUT(0x199740C10);
}

void WebKit::SecItemShimProxy::secItemRequest(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (WebKit::dictionaryContainsInMemoryObject(*(const __CFDictionary **)(a3 + 8), a2))
  {
    v34 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_59;
    }
    *(_DWORD *)CFTypeRef cf = 136446210;
    *(void *)&cf[4] = "void WebKit::SecItemShimProxy::secItemRequest(IPC::Connection &, const SecItemRequestData &, Com"
                        "pletionHandler<void (std::optional<SecItemResponseData> &&)> &&)";
    CFTypeRef v35 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/mac/SecItemShimProxy.cpp 95: Invalid mess"
          "age dispatched %{public}s";
    goto LABEL_61;
  }
  if (WebKit::dictionaryContainsInMemoryObject(*(const __CFDictionary **)(a3 + 16), v7))
  {
    v34 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_59;
    }
    *(_DWORD *)CFTypeRef cf = 136446210;
    *(void *)&cf[4] = "void WebKit::SecItemShimProxy::secItemRequest(IPC::Connection &, const SecItemRequestData &, Com"
                        "pletionHandler<void (std::optional<SecItemResponseData> &&)> &&)";
    CFTypeRef v35 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/mac/SecItemShimProxy.cpp 96: Invalid mess"
          "age dispatched %{public}s";
LABEL_61:
    _os_log_fault_impl(&dword_1985F2000, v34, OS_LOG_TYPE_FAULT, v35, cf, 0xCu);
LABEL_59:
    *((unsigned char *)a2 + 98) = 1;
    v38[0] = 0;
    int v39 = 0;
    LODWORD(v40) = -50;
    LOBYTE(v41[0]) = 0;
    int v42 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)v41, (uint64_t)v38);
    *(_DWORD *)CFTypeRef cf = v40;
    cf[8] = 0;
    int v45 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf[8], (uint64_t)v41);
    char v46 = 1;
LABEL_17:
    uint64_t v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v11 + 16))(v11, cf);
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    if (v46)
    {
      if (v45 != -1) {
        ((void (*)(CFTypeRef *, unsigned char *))off_1EE9E6698[v45])(&result, &cf[8]);
      }
      int v45 = -1;
    }
    if (v42 != -1) {
      ((void (*)(CFTypeRef *, void *))off_1EE9E6698[v42])(&result, v41);
    }
    int v42 = -1;
    if (v39 != -1) {
LABEL_12:
    }
      ((void (*)(CFTypeRef *, const void **))off_1EE9E6698[v39])(&result, v38);
    return;
  }
  switch(*(unsigned char *)a3)
  {
    case 0:
      v38[0] = 0;
      int v39 = 0;
      LODWORD(v40) = -50;
      goto LABEL_16;
    case 1:
      CFTypeRef result = 0;
      OSStatus v12 = SecItemCopyMatching(*(CFDictionaryRef *)(a3 + 8), &result);
      CFArrayRef v13 = (const __CFArray *)result;
      CFTypeRef v36 = result;
      v38[0] = 0;
      int v39 = 0;
      if (!result) {
        goto LABEL_43;
      }
      CFTypeID v14 = CFGetTypeID(result);
      if (v14 != CFArrayGetTypeID()
        || !CFArrayGetCount(v13)
        || (ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(v13, 0),
            CFTypeID v16 = CFGetTypeID(ValueAtIndex),
            v16 != SecCertificateGetTypeID()))
      {
        std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<2ul,WTF::RetainPtr<void const*>,WTF::RetainPtr<void const*>>((uint64_t)v38, v38, &v36);
        goto LABEL_43;
      }
      uint64_t v40 = 0;
      v41[0] = 0;
      unint64_t Count = CFArrayGetCount(v13);
      if (Count)
      {
        unint64_t v18 = Count;
        if (Count >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x198FF3FB4);
        }
        uint64_t v19 = WTF::fastMalloc((WTF *)(8 * Count));
        CFIndex v20 = 0;
        LODWORD(v41[0]) = v18;
        uint64_t v40 = v19;
        while (1)
        {
          uint64_t v21 = CFArrayGetValueAtIndex(v13, v20);
          if (v21)
          {
            uint64_t v22 = v21;
            CFTypeID v23 = CFGetTypeID(v21);
            if (v23 == SecCertificateGetTypeID())
            {
              CFRetain(v22);
              *(void *)CFTypeRef cf = v22;
              cf[8] = 1;
              int v24 = HIDWORD(v41[0]);
              if (HIDWORD(v41[0]) != LODWORD(v41[0]))
              {
                *(void *)CFTypeRef cf = 0;
                *(void *)(v40 + 8 * HIDWORD(v41[0])) = v22;
                HIDWORD(v41[0]) = v24 + 1;
LABEL_38:
                unsigned int v29 = *(const void **)cf;
                *(void *)CFTypeRef cf = 0;
                if (v29) {
                  CFRelease(v29);
                }
                goto LABEL_40;
              }
              CFNumberRef v25 = (uint64_t *)WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, HIDWORD(v41[0]) + 1, (unint64_t)cf);
              uint64_t v26 = HIDWORD(v41[0]);
              uint64_t v27 = v40;
              uint64_t v28 = *v25;
              *CFNumberRef v25 = 0;
              *(void *)(v27 + 8 * v26) = v28;
              HIDWORD(v41[0]) = v26 + 1;
              if (cf[8]) {
                goto LABEL_38;
              }
            }
          }
LABEL_40:
          if (v18 == ++v20)
          {
            unint64_t v30 = HIDWORD(v41[0]);
            goto LABEL_55;
          }
        }
      }
      unint64_t v30 = 0;
LABEL_55:
      WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v40, v30);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<1ul,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v38, (uint64_t)v38, &v40);
      WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v33);
LABEL_43:
      LODWORD(v40) = v12;
      LOBYTE(v41[0]) = 0;
      int v42 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)v41, (uint64_t)v38);
      *(_DWORD *)CFTypeRef cf = v40;
      cf[8] = 0;
      int v45 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf[8], (uint64_t)v41);
      char v46 = 1;
      uint64_t v31 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v31 + 16))(v31, cf);
      (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
      if (v46)
      {
        if (v45 != -1) {
          ((void (*)(char *, unsigned char *))off_1EE9E6698[v45])(&v43, &cf[8]);
        }
        int v45 = -1;
      }
      if (v42 != -1) {
        ((void (*)(char *, void *))off_1EE9E6698[v42])(&v43, v41);
      }
      if (v39 != -1) {
        ((void (*)(unsigned char *, const void **))off_1EE9E6698[v39])(cf, v38);
      }
      CFTypeRef v32 = v36;
      CFTypeRef v36 = 0;
      if (v32) {
        CFRelease(v32);
      }
      break;
    case 2:
      OSStatus v10 = SecItemAdd(*(CFDictionaryRef *)(a3 + 8), 0);
      goto LABEL_15;
    case 3:
      OSStatus v10 = SecItemUpdate(*(CFDictionaryRef *)(a3 + 8), *(CFDictionaryRef *)(a3 + 16));
LABEL_15:
      v38[0] = 0;
      int v39 = 0;
      LODWORD(v40) = v10;
LABEL_16:
      LOBYTE(v41[0]) = 0;
      int v42 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)v41, (uint64_t)v38);
      *(_DWORD *)CFTypeRef cf = v40;
      cf[8] = 0;
      int v45 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf[8], (uint64_t)v41);
      char v46 = 1;
      goto LABEL_17;
    case 4:
      OSStatus v8 = SecItemDelete(*(CFDictionaryRef *)(a3 + 8));
      v38[0] = 0;
      int v39 = 0;
      LODWORD(v40) = v8;
      LOBYTE(v41[0]) = 0;
      int v42 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)v41, (uint64_t)v38);
      *(_DWORD *)CFTypeRef cf = v40;
      cf[8] = 0;
      int v45 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf[8], (uint64_t)v41);
      char v46 = 1;
      uint64_t v9 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 16))(v9, cf);
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      if (v46)
      {
        if (v45 != -1) {
          ((void (*)(CFTypeRef *, unsigned char *))off_1EE9E6698[v45])(&result, &cf[8]);
        }
        int v45 = -1;
      }
      if (v42 != -1) {
        ((void (*)(CFTypeRef *, void *))off_1EE9E6698[v42])(&result, v41);
      }
      int v42 = -1;
      if (v39 != -1) {
        goto LABEL_12;
      }
      return;
    default:
      return;
  }
}

const __CFDictionary *WebKit::dictionaryContainsInMemoryObject(const __CFDictionary *this, const __CFDictionary *a2)
{
  if (this)
  {
    CFDictionaryRef v2 = this;
    if (CFDictionaryContainsKey(this, (const void *)*MEMORY[0x1E4F3BD10])) {
      return (const __CFDictionary *)1;
    }
    else {
      return (const __CFDictionary *)(CFDictionaryContainsKey(v2, (const void *)*MEMORY[0x1E4F3BD48]) != 0);
    }
  }
  return this;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::encodeSessionHistoryEntryData(WebKit::FrameState const&)::$_0 &&>>()
{
  CFAllocatorContext v2 = *(CFAllocatorContext *)byte_1EE9E6638;
  CFAllocatorRef v0 = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &v2);
  uint64_t v1 = (const void *)qword_1EB359DE8;
  qword_1EB359DE8 = (uint64_t)v0;
  if (v1) {
    CFRelease(v1);
  }
}

void *WebKit::encodeFrameStateNode(size_t *a1, uint64_t a2)
{
  v44[0] = *(unsigned int *)(a2 + 228);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 8uLL, 8u);
  uint64_t v4 = *(unsigned int *)(a2 + 228);
  if (v4)
  {
    CFDataRef v5 = *(uint64_t **)(a2 + 216);
    uint64_t v6 = 248 * v4;
    do
    {
      CFDictionaryRef v7 = WebKit::HistoryEntryDataEncoder::operator<<(a1, v5 + 1);
      OSStatus v8 = WebKit::HistoryEntryDataEncoder::operator<<(v7, v5);
      WebKit::encodeFrameStateNode(v8, v5);
      v5 += 31;
      v6 -= 248;
    }
    while (v6);
  }
  v44[0] = *(void *)(a2 + 80);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 8uLL, 8u);
  v44[0] = *(unsigned int *)(a2 + 244);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 8uLL, 8u);
  uint64_t v9 = *(unsigned int *)(a2 + 244);
  if (v9)
  {
    OSStatus v10 = *(uint64_t **)(a2 + 232);
    uint64_t v11 = 8 * v9;
    do
    {
      WebKit::HistoryEntryDataEncoder::operator<<(a1, v10++);
      v11 -= 8;
    }
    while (v11);
  }
  if (!*(unsigned char *)(a2 + 136))
  {
    v44[0] = 0;
    CFNumberRef v25 = WebKit::HistoryEntryDataEncoder::operator<<(a1, v44);
    LOBYTE(v44[0]) = 0;
    size_t v26 = 1;
    unsigned int v27 = 1;
    goto LABEL_30;
  }
  OSStatus v12 = WebKit::HistoryEntryDataEncoder::operator<<(a1, (uint64_t *)(a2 + 112));
  LOBYTE(v44[0]) = 1;
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(v12, v44, 1uLL, 1u);
  if (!*(unsigned char *)(a2 + 136)) {
    goto LABEL_37;
  }
  LOBYTE(v44[0]) = 0;
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 1uLL, 1u);
  v44[0] = 0;
  v44[1] = 0;
  CFArrayRef v13 = WebKit::HistoryEntryDataEncoder::operator<<(a1, (uint64_t)v44);
  v44[0] = *(unsigned int *)(a2 + 132);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(v13, v44, 8uLL, 8u);
  uint64_t v14 = *(unsigned int *)(a2 + 132);
  if (!v14)
  {
LABEL_28:
    LOBYTE(v44[0]) = 0;
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 1uLL, 1u);
    v44[0] = 0;
    CFNumberRef v25 = a1;
    size_t v26 = 8;
    unsigned int v27 = 8;
LABEL_30:
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(v25, v44, v26, v27);
    v44[0] = *(void *)(a2 + 88);
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 8uLL, 8u);
    uint64_t v28 = WebKit::HistoryEntryDataEncoder::operator<<(a1, (uint64_t *)(a2 + 16));
    LODWORD(v44[0]) = *(_DWORD *)(a2 + 96);
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(v28, v44, 4uLL, 4u);
    LODWORD(v44[0]) = *(_DWORD *)(a2 + 100);
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 4uLL, 4u);
    LODWORD(v44[0]) = *(_DWORD *)(a2 + 108);
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 4uLL, 4u);
    LOBYTE(v44[0]) = *(unsigned char *)(a2 + 72);
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 1uLL, 1u);
    if (*(unsigned char *)(a2 + 72)) {
      WebKit::HistoryEntryDataEncoder::operator<<(a1, a2 + 56);
    }
    unsigned int v29 = (uint64_t *)(a2 + 24);
    uint64_t v30 = *(void *)(a2 + 24);
    if (v30)
    {
      if (*(_DWORD *)(v30 + 4) >= 0x4000u) {
        unsigned int v29 = (uint64_t *)MEMORY[0x1E4F30970];
      }
    }
    uint64_t v31 = WebKit::HistoryEntryDataEncoder::operator<<(a1, v29);
    int v32 = *(_DWORD *)(a2 + 148);
    int v33 = *(_DWORD *)(a2 + 152);
    int v34 = *(_DWORD *)(a2 + 156);
    LODWORD(v44[0]) = *(_DWORD *)(a2 + 144);
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(v31, v44, 4uLL, 4u);
    LODWORD(v44[0]) = v32;
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 4uLL, 4u);
    LODWORD(v44[0]) = v33;
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 4uLL, 4u);
    LODWORD(v44[0]) = v34;
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 4uLL, 4u);
    uint64_t v35 = *(void *)(a2 + 168);
    uint64_t v36 = HIDWORD(*(void *)(a2 + 160));
    LODWORD(v44[0]) = *(void *)(a2 + 160);
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 4uLL, 4u);
    LODWORD(v44[0]) = v36;
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 4uLL, 4u);
    LODWORD(v44[0]) = v35;
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 4uLL, 4u);
    LODWORD(v44[0]) = HIDWORD(v35);
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 4uLL, 4u);
    int v37 = *(_DWORD *)(a2 + 180);
    LODWORD(v44[0]) = *(_DWORD *)(a2 + 176);
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 4uLL, 4u);
    LODWORD(v44[0]) = v37;
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 4uLL, 4u);
    uint64_t v38 = HIDWORD(*(void *)(a2 + 184));
    LODWORD(v44[0]) = *(void *)(a2 + 184);
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 4uLL, 4u);
    LODWORD(v44[0]) = v38;
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 4uLL, 4u);
    LOBYTE(v44[0]) = *(unsigned char *)(a2 + 192);
    return WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 1uLL, 1u);
  }
  uint64_t v15 = 0;
  uint64_t v16 = *(void *)(a2 + 120);
  uint64_t v17 = 56 * v14;
  while (1)
  {
    LODWORD(v44[0]) = *(_DWORD *)(v16 + v15 + 48);
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 4uLL, 4u);
    int v18 = *(_DWORD *)(v16 + v15 + 48);
    uint64_t v19 = v18 == -1 ? -1 : *(unsigned int *)(v16 + v15 + 48);
    if (v19 != 2) {
      break;
    }
    if (v18 != 2) {
      goto LABEL_36;
    }
    WebKit::HistoryEntryDataEncoder::operator<<(a1, (uint64_t *)(v16 + v15));
LABEL_27:
    v15 += 56;
    if (v17 == v15) {
      goto LABEL_28;
    }
  }
  if (v19 == 1)
  {
    if (v18 != 1) {
      goto LABEL_36;
    }
    CFIndex v20 = WebKit::HistoryEntryDataEncoder::operator<<(a1, (uint64_t *)(v16 + v15));
    v44[0] = 0;
    uint64_t v21 = WebKit::HistoryEntryDataEncoder::operator<<(v20, v44);
    LOBYTE(v44[0]) = 0;
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(v21, v44, 1uLL, 1u);
    uint64_t v22 = v16 + v15;
    v44[0] = *(void *)(v16 + v15 + 8);
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 8uLL, 8u);
    if (*(unsigned char *)(v16 + v15 + 24)) {
      uint64_t v23 = *(void *)(v22 + 16);
    }
    else {
      uint64_t v23 = -1;
    }
    v44[0] = v23;
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 8uLL, 8u);
    double v24 = *(double *)(v22 + 32);
    if (!*(unsigned char *)(v22 + 40)) {
      double v24 = NAN;
    }
    *(double *)CFDictionaryRef v44 = v24;
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v44, 8uLL, 8u);
    goto LABEL_27;
  }
  if (!v18)
  {
    WebKit::HistoryEntryDataEncoder::operator<<(a1, v16 + v15);
    goto LABEL_27;
  }
LABEL_36:
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_37:
  uint64_t v40 = (size_t *)std::__throw_bad_optional_access[abi:sn180100]();
  return WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(v40, v41, v42, v43);
}

void *WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(size_t *a1, const void *a2, size_t a3, unsigned int a4)
{
  if (!a2 && a3 || (v7 = *a1, v8 = (*a1 + a4 - 1) / a4 * a4, size_t v9 = a3 + v8, __CFADD__(a3, v8)))
  {
    __break(0xC471u);
    JUMPOUT(0x198FF46C0);
  }
  unint64_t v10 = a1[1];
  if (v10 >= v9)
  {
    uint64_t v11 = a1[2];
  }
  else
  {
    do
    {
      if ((v10 & 0x8000000000000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198FF46C8);
      }
      v10 *= 2;
    }
    while (v10 < v9);
    uint64_t v11 = WTF::fastRealloc((WTF *)a1[2], (void *)v10);
    a1[1] = v10;
    a1[2] = v11;
    size_t v7 = *a1;
  }
  bzero((void *)(v11 + v7), v8 - v7);
  *a1 = v9;
  size_t v12 = a1[2];
  a1[3] = v12 + v9;

  return memcpy((void *)(v12 + v8), a2, a3);
}

size_t *WebKit::HistoryEntryDataEncoder::operator<<(size_t *a1, uint64_t *a2)
{
  if (!*a2)
  {
    LODWORD(v25) = -1;
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v25, 4uLL, 4u);
    return a1;
  }
  LODWORD(v25) = *(_DWORD *)(*a2 + 4);
  uint64_t v4 = v25;
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v25, 4uLL, 4u);
  CFNumberRef v25 = (WTF *)(2 * v4);
  CFTypeRef result = (size_t *)WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v25, 8uLL, 8u);
  uint64_t v6 = *a2;
  if (*a2)
  {
    size_t v7 = *(WTF **)(v6 + 8);
    unint64_t v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    size_t v7 = 0;
    unint64_t v8 = 0x100000000;
  }
  CFNumberRef v25 = (WTF *)v27;
  unint64_t v26 = 32;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v9 = v8;
  if ((v8 & 0x100000000) == 0)
  {
LABEL_20:
    uint64_t v28 = v7;
    uint64_t v29 = v9;
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v7, 2 * v9, 2u);
    uint64_t v23 = v25;
    if (v27 != (unsigned char *)v25 && v25 != 0)
    {
      CFNumberRef v25 = 0;
      LODWORD(v26) = 0;
      WTF::fastFree(v23, v22);
    }
    return a1;
  }
  if (v8 <= 0x20uLL)
  {
    HIDWORD(v26) = v8;
    uint64_t v11 = (WTF *)v27;
    size_t v12 = (WTF *)v27;
    goto LABEL_17;
  }
  if (v8 <= 0x29uLL) {
    unint64_t v10 = 41;
  }
  else {
    unint64_t v10 = v8;
  }
  if (!(v10 >> 31))
  {
    uint64_t v11 = (WTF *)WTF::fastMalloc((WTF *)(2 * v10));
    CFNumberRef v25 = v11;
    unint64_t v26 = __PAIR64__(v8, v10);
    if (v8 < 0x40uLL)
    {
      size_t v12 = v11;
    }
    else
    {
      size_t v12 = (WTF *)((char *)v11 + 2 * (v8 & 0xFFFFFFC0));
      long long v13 = 0uLL;
      uint64_t v14 = (char *)v11;
      do
      {
        v30.val[0] = *(int8x16_t *)v7;
        int8x16_t v15 = *((int8x16_t *)v7 + 1);
        v31.val[0] = (int8x16_t)*((_OWORD *)v7 + 2);
        long long v16 = *((_OWORD *)v7 + 3);
        size_t v7 = (WTF *)((char *)v7 + 64);
        long long v17 = v16;
        v31.val[1] = 0uLL;
        v32.val[0] = v15;
        v30.val[1] = 0uLL;
        int v18 = v14;
        vst2q_s8(v18, v30);
        v18 += 32;
        v32.val[1] = 0uLL;
        vst2q_s8(v18, v32);
        uint64_t v19 = v14 + 64;
        vst2q_s8(v19, v31);
        CFIndex v20 = v14 + 96;
        vst2q_s8(v20, *(int8x16x2_t *)(&v13 - 1));
        v14 += 128;
      }
      while (v14 != (char *)v12);
    }
LABEL_17:
    while (v12 != (WTF *)((char *)v11 + 2 * v8))
    {
      __int16 v21 = *(unsigned __int8 *)v7;
      size_t v7 = (WTF *)((char *)v7 + 1);
      *(_WORD *)size_t v12 = v21;
      size_t v12 = (WTF *)((char *)v12 + 2);
    }
    size_t v7 = v25;
    uint64_t v9 = HIDWORD(v26);
    goto LABEL_20;
  }
  __break(0xC471u);
  return result;
}

size_t *WebKit::HistoryEntryDataEncoder::operator<<(size_t *a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v5, 8uLL, 8u);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, *(const void **)a2, *(unsigned int *)(a2 + 12), 1u);
  return a1;
}

CFIndex WebKit::decodeSessionHistoryEntries(const __CFArray *a1, uint64_t a2)
{
  CFArrayRef v2 = a1;
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 1;
  }
  CFIndex v4 = Count;
  ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(v2, 0);
  CFDictionaryRef v6 = (const __CFDictionary *)WTF::dynamic_cf_cast<__CFDictionary const*>(ValueAtIndex);
  if (!v6) {
    return 0;
  }
  CFDictionaryRef v7 = v6;
  BOOL v8 = 0;
  CFIndex v9 = 1;
  CFArrayRef v56 = v2;
  while (1)
  {
    long long v57 = 0uLL;
    v58 = 0;
    WebKit::FrameState::FrameState((WebKit::FrameState *)&v59);
    char v61 = 0;
    v62 = 0;
    char v63 = 0;
    char v64 = 0;
    CFRange v65 = 0;
    Value = CFDictionaryGetValue(v7, @"SessionHistoryEntryTitle");
    uint64_t v11 = WTF::dynamic_cf_cast<__CFString const*>(Value);
    if (!v11
      || (size_t v12 = v11,
          long long v13 = CFDictionaryGetValue(v7, @"SessionHistoryEntryURL"),
          (uint64_t v14 = WTF::dynamic_cf_cast<__CFString const*>(v13)) == 0))
    {
      char v22 = 0;
      goto LABEL_38;
    }
    int8x16_t v15 = v14;
    long long v16 = CFDictionaryGetValue(v7, @"SessionHistoryEntryOriginalURL");
    long long v17 = WTF::dynamic_cf_cast<__CFString const*>(v16);
    if (!v17)
    {
LABEL_18:
      char v22 = 0;
      CFArrayRef v2 = v56;
      goto LABEL_38;
    }
    int v18 = v17;
    uint64_t v19 = CFDictionaryGetValue(v7, @"SessionHistoryEntryShouldOpenExternalURLsPolicyKey");
    CFNumberRef v20 = (const __CFNumber *)WTF::dynamic_cf_cast<__CFNumber const*>(v19);
    if (v20)
    {
      valuePtr = 0;
      CFNumberGetValue(v20, kCFNumberSInt64Type, &valuePtr);
      char v21 = (char)valuePtr;
    }
    else
    {
      char v21 = 1;
    }
    CFDataRef v23 = (const __CFData *)CFDictionaryGetValue(v7, @"SessionHistoryEntryData");
    if (!v23) {
      goto LABEL_19;
    }
    CFDataRef v24 = v23;
    char v25 = v21;
    CFTypeID v26 = CFGetTypeID(v23);
    BOOL v27 = v26 == CFDataGetTypeID();
    char v21 = v25;
    if (!v27) {
      goto LABEL_19;
    }
    BytePtr = CFDataGetBytePtr(v24);
    CFIndex result = CFDataGetLength(v24);
    if (result < 0) {
      break;
    }
    valuePtr = (WTF::StringImpl *)BytePtr;
    CFIndex v67 = result;
    char v68 = 1;
    __dst[0] = 0;
    WebKit::HistoryEntryDataDecoder::decodeFixedLengthData(&valuePtr, __dst, 8uLL, 8);
    LODWORD(__dst[0]) = 0;
    WebKit::HistoryEntryDataDecoder::decodeFixedLengthData(&valuePtr, __dst, 4uLL, 4);
    if (LODWORD(__dst[0]) != 2) {
      goto LABEL_18;
    }
    WebKit::decodeBackForwardTreeNode((uint64_t)&valuePtr, (uint64_t)&v59);
    if (!v68) {
      goto LABEL_18;
    }
    char v21 = v25;
    if (v67) {
      goto LABEL_18;
    }
LABEL_19:
    MEMORY[0x19972EAD0](&valuePtr, v12);
    int8x16x2_t v31 = valuePtr;
    valuePtr = 0;
    int8x16x2_t v32 = v58;
    v58 = v31;
    if (v32)
    {
      int v33 = *(_DWORD *)v32 - 2;
      if (*(_DWORD *)v32 != 2) {
        goto LABEL_23;
      }
      WTF::StringImpl::destroy(v32, v30);
      int8x16x2_t v32 = valuePtr;
      valuePtr = 0;
      if (v32)
      {
        int v33 = *(_DWORD *)v32 - 2;
        if (*(_DWORD *)v32 == 2)
        {
          WTF::StringImpl::destroy(v32, v34);
          goto LABEL_24;
        }
LABEL_23:
        *(_DWORD *)int8x16x2_t v32 = v33;
      }
    }
LABEL_24:
    char v61 = v21;
    MEMORY[0x19972EAD0](&valuePtr, v15);
    uint64_t v36 = valuePtr;
    valuePtr = 0;
    int v37 = v59;
    CFTypeRef v59 = v36;
    if (v37)
    {
      int v38 = *(_DWORD *)v37 - 2;
      if (*(_DWORD *)v37 != 2) {
        goto LABEL_28;
      }
      WTF::StringImpl::destroy(v37, v35);
      int v37 = valuePtr;
      valuePtr = 0;
      if (v37)
      {
        int v38 = *(_DWORD *)v37 - 2;
        if (*(_DWORD *)v37 == 2)
        {
          WTF::StringImpl::destroy(v37, v39);
          goto LABEL_29;
        }
LABEL_28:
        *(_DWORD *)int v37 = v38;
      }
    }
LABEL_29:
    MEMORY[0x19972EAD0](&valuePtr, v18);
    CFTypeID v41 = valuePtr;
    valuePtr = 0;
    size_t v42 = v60;
    v60 = v41;
    CFArrayRef v2 = v56;
    if (v42)
    {
      int v43 = *(_DWORD *)v42 - 2;
      if (*(_DWORD *)v42 != 2) {
        goto LABEL_33;
      }
      WTF::StringImpl::destroy(v42, v40);
      size_t v42 = valuePtr;
      valuePtr = 0;
      if (v42)
      {
        int v43 = *(_DWORD *)v42 - 2;
        if (*(_DWORD *)v42 == 2)
        {
          WTF::StringImpl::destroy(v42, v44);
          goto LABEL_34;
        }
LABEL_33:
        *(_DWORD *)size_t v42 = v43;
      }
    }
LABEL_34:
    unsigned int v45 = *(_DWORD *)(a2 + 12);
    if (v45 == *(_DWORD *)(a2 + 8))
    {
      WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::BackForwardListItemState>(a2, (unint64_t)&v57);
    }
    else
    {
      uint64_t v46 = *(void *)a2 + 312 * v45;
      *(_OWORD *)uint64_t v46 = v57;
      uint64_t v47 = v58;
      v58 = 0;
      *(void *)(v46 + 16) = v47;
      WebKit::FrameState::FrameState(v46 + 24, (uint64_t *)&v59);
      *(unsigned char *)(v46 + 272) = v61;
      v48 = v62;
      v62 = 0;
      *(void *)(v46 + 280) = v48;
      *(unsigned char *)(v46 + 288) = v63;
      *(unsigned char *)(v46 + 296) = v64;
      v49 = v65;
      CFRange v65 = 0;
      *(void *)(v46 + 304) = v49;
      ++*(_DWORD *)(a2 + 12);
    }
    char v22 = 1;
LABEL_38:
    v50 = v65;
    CFRange v65 = 0;
    if (v50) {
      WTF::RefCounted<WebKit::ViewSnapshot>::deref(v50);
    }
    v51 = v62;
    v62 = 0;
    if (v51) {
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v51);
    }
    WebKit::FrameState::~FrameState(&v59);
    CFTypeRef v53 = v58;
    v58 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
      {
        WTF::StringImpl::destroy(v53, v52);
        if ((v22 & 1) == 0) {
          return v8;
        }
        goto LABEL_48;
      }
      *(_DWORD *)v53 -= 2;
    }
    if ((v22 & 1) == 0) {
      return v8;
    }
LABEL_48:
    BOOL v8 = v9 >= v4;
    if (v4 != v9)
    {
      v54 = CFArrayGetValueAtIndex(v2, v9);
      CFDictionaryRef v7 = (const __CFDictionary *)WTF::dynamic_cf_cast<__CFDictionary const*>(v54);
      ++v9;
      if (v7) {
        continue;
      }
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WebKit::decodeBackForwardTreeNode(uint64_t a1, uint64_t a2)
{
  unint64_t __dst = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &__dst, 8uLL, 8);
  if (__dst)
  {
    for (unint64_t i = 0; i < __dst; ++i)
    {
      WebKit::FrameState::FrameState((WebKit::FrameState *)&v53);
      uint64_t v5 = WebKit::HistoryEntryDataDecoder::operator>>(a1, (WTF::StringImpl *)v54);
      uint64_t v6 = WebKit::HistoryEntryDataDecoder::operator>>(v5, (WTF::StringImpl *)&v53);
      WebKit::decodeBackForwardTreeNode(v6, &v53);
      if (!*(unsigned char *)(a1 + 16))
      {
        WebKit::FrameState::~FrameState(&v53);
        return;
      }
      unsigned int v7 = *(_DWORD *)(a2 + 228);
      if (v7 == *(_DWORD *)(a2 + 224))
      {
        WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameState>(a2 + 216, (unint64_t)&v53);
      }
      else
      {
        WebKit::FrameState::FrameState(*(void *)(a2 + 216) + 248 * v7, (uint64_t *)&v53);
        ++*(_DWORD *)(a2 + 228);
      }
      WebKit::FrameState::~FrameState(&v53);
    }
  }
  *(void *)(a2 + 80) = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, (void *)(a2 + 80), 8uLL, 8);
  unint64_t v52 = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v52, 8uLL, 8);
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  if (v52)
  {
    for (unint64_t j = 0; j < v52; ++j)
    {
      CFTypeRef v53 = 0;
      WebKit::HistoryEntryDataDecoder::operator>>(a1, &v53);
      if (!*(unsigned char *)(a1 + 16))
      {
        uint64_t v28 = v53;
        CFTypeRef v53 = 0;
        if (v28) {
          goto LABEL_79;
        }
        goto LABEL_82;
      }
      LODWORD(v10) = HIDWORD(v51);
      if (HIDWORD(v51) == v51)
      {
        uint64_t v11 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v50, HIDWORD(v51) + 1, (unint64_t)&v53);
        uint64_t v10 = HIDWORD(v51);
        uint64_t v12 = v50;
        uint64_t v13 = *v11;
        uint64_t *v11 = 0;
        *(void *)(v12 + 8 * v10) = v13;
      }
      else
      {
        uint64_t v14 = v53;
        CFTypeRef v53 = 0;
        *(void *)(v50 + 8 * HIDWORD(v51)) = v14;
      }
      HIDWORD(v51) = v10 + 1;
      int8x16_t v15 = v53;
      CFTypeRef v53 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v9);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
  }
  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a2 + 232), (uint64_t)&v50);
  v49 = 0;
  long long v16 = (void *)WebKit::HistoryEntryDataDecoder::operator>>(a1, (WTF::StringImpl *)&v49);
  char v48 = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData(v16, &v48, 1uLL, 1);
  if (!v48) {
    goto LABEL_75;
  }
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  long long v17 = v49;
  v49 = 0;
  unsigned int v45 = v17;
  char v60 = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v60, 1uLL, 1);
  v58 = 0;
  uint64_t v59 = 0;
  int v18 = WebKit::HistoryEntryDataDecoder::operator>>((char **)a1, (uint64_t)&v58);
  unint64_t v57 = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData(v18, &v57, 8uLL, 8);
  if (!v57)
  {
LABEL_63:
    LOBYTE(v65) = 0;
    WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v65, 1uLL, 1);
    CFTypeRef v53 = 0;
    WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v53, 8uLL, 8);
    goto LABEL_69;
  }
  uint64_t v19 = 0;
  while (1)
  {
    CFTypeRef v53 = 0;
    v54[0] = 0;
    int v55 = 0;
    v71[0] = 0;
    WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, v71, 4uLL, 4);
    if (!*(unsigned char *)(a1 + 16)) {
      break;
    }
    if (v71[0])
    {
      if (v71[0] != 1)
      {
        if (v71[0] != 2) {
          goto LABEL_57;
        }
        CFRange v65 = 0;
        WebKit::HistoryEntryDataDecoder::operator>>(a1, (WTF::StringImpl *)&v65);
        if (v55 == -1) {
          goto LABEL_52;
        }
        if (v55 != 2)
        {
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9E6680[v55])(&v64, &v53);
LABEL_52:
          CFTypeRef v53 = v65;
          int v55 = 2;
          goto LABEL_56;
        }
        char v21 = v65;
        CFRange v65 = 0;
        char v22 = v53;
        CFTypeRef v53 = v21;
        if (!v22) {
          goto LABEL_56;
        }
        int v23 = *(_DWORD *)v22 - 2;
        if (*(_DWORD *)v22 != 2) {
          goto LABEL_50;
        }
LABEL_47:
        WTF::StringImpl::destroy(v22, v20);
        goto LABEL_48;
      }
      CFRange v65 = 0;
      LOBYTE(v67) = 0;
      char v68 = 0;
      LOBYTE(v69) = 0;
      char v70 = 0;
      uint64_t v25 = WebKit::HistoryEntryDataDecoder::operator>>(a1, (WTF::StringImpl *)&v65);
      char v64 = 0;
      CFTypeID v26 = (void *)WebKit::HistoryEntryDataDecoder::operator>>(v25, (WTF::StringImpl *)&v64);
      char v63 = 0;
      WebKit::HistoryEntryDataDecoder::decodeFixedLengthData(v26, &v63, 1uLL, 1);
      uint64_t v66 = 0;
      WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v66, 8uLL, 8);
      if (v66 < 0)
      {
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(unsigned char *)(a1 + 16) = 0;
      }
      else
      {
        uint64_t v62 = 0;
        WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v62, 8uLL, 8);
        if (v62 == -1) {
          goto LABEL_40;
        }
        if (v62 >= v66)
        {
          uint64_t v67 = v62;
          char v68 = 1;
LABEL_40:
          uint64_t v61 = 0;
          WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v61, 8uLL, 8);
          if (!v70) {
            char v70 = 1;
          }
          uint64_t v69 = v61;
          std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<1ul,WebKit::HTTPBody::Element::FileData,WebKit::HTTPBody::Element::FileData>((uint64_t)&v53, (uint64_t)&v53, (uint64_t)&v65);
        }
      }
      char v22 = v64;
      char v64 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          goto LABEL_47;
        }
        *(_DWORD *)v22 -= 2;
      }
LABEL_48:
      char v22 = v65;
      CFRange v65 = 0;
      if (!v22) {
        goto LABEL_56;
      }
      int v23 = *(_DWORD *)v22 - 2;
      if (*(_DWORD *)v22 != 2)
      {
LABEL_50:
        *(_DWORD *)char v22 = v23;
        goto LABEL_56;
      }
      WTF::StringImpl::destroy(v22, v20);
      goto LABEL_56;
    }
    CFRange v65 = 0;
    uint64_t v66 = 0;
    WebKit::HistoryEntryDataDecoder::operator>>((char **)a1, (uint64_t)&v65);
    if (v55 == -1) {
      goto LABEL_54;
    }
    if (v55)
    {
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9E6680[v55])(&v64, &v53);
LABEL_54:
      CFTypeRef v53 = v65;
      v54[0] = v66;
      int v55 = 0;
      goto LABEL_56;
    }
    CFDataRef v24 = v53;
    if (v53)
    {
      CFTypeRef v53 = 0;
      LODWORD(v54[0]) = 0;
      WTF::fastFree(v24, v20);
    }
    CFTypeRef v53 = v65;
    v54[0] = v66;
LABEL_56:
    if (!*(unsigned char *)(a1 + 16)) {
      break;
    }
LABEL_57:
    if (HIDWORD(v47) == v47)
    {
      WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::HTTPBody::Element>((uint64_t)&v46, (unint64_t)&v53);
    }
    else
    {
      uint64_t v27 = v46 + 56 * HIDWORD(v47);
      *(unsigned char *)uint64_t v27 = 0;
      *(_DWORD *)(v27 + 48) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>,(std::__variant_detail::_Trait)1>>(v27, (uint64_t)&v53);
      ++HIDWORD(v47);
    }
    if (v55 != -1) {
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9E6680[v55])(&v65, &v53);
    }
    if (++v19 >= v57) {
      goto LABEL_63;
    }
  }
  if (v55 != -1) {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9E6680[v55])(&v65, &v53);
  }
LABEL_69:
  uint64_t v29 = v58;
  if (v58)
  {
    v58 = 0;
    LODWORD(v59) = 0;
    WTF::fastFree(v29, v20);
  }
  std::optional<WebKit::HTTPBody>::operator=[abi:sn180100]<WebKit::HTTPBody,void>(a2 + 112, (uint64_t)&v45);
  WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v30);
  int8x16x2_t v32 = v45;
  unsigned int v45 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v31);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
LABEL_75:
  *(void *)(a2 + 88) = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, (void *)(a2 + 88), 8uLL, 8);
  int v33 = (void *)WebKit::HistoryEntryDataDecoder::operator>>(a1, (WTF::StringImpl *)(a2 + 16));
  LODWORD(v64) = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData(v33, &v64, 4uLL, 4);
  LODWORD(v62) = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v62, 4uLL, 4);
  unint64_t v34 = v64 | ((unint64_t)v62 << 32);
  *(_DWORD *)(a2 + 108) = 0;
  *(void *)(a2 + 96) = v34;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, (void *)(a2 + 108), 4uLL, 4);
  LOBYTE(v61) = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v61, 1uLL, 1);
  if ((_BYTE)v61)
  {
    CFTypeRef v53 = 0;
    v54[0] = 0;
    WebKit::HistoryEntryDataDecoder::operator>>((char **)a1, (uint64_t)&v53);
    std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(a2 + 56, (uint64_t)&v53);
    uint64_t v36 = v53;
    if (v53)
    {
      CFTypeRef v53 = 0;
      LODWORD(v54[0]) = 0;
      WTF::fastFree(v36, v35);
    }
  }
  int v37 = (void *)WebKit::HistoryEntryDataDecoder::operator>>(a1, (WTF::StringImpl **)(a2 + 24));
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  LODWORD(v53) = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData(v37, &v53, 4uLL, 4);
  LODWORD(v65) = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v65, 4uLL, 4);
  LODWORD(v45) = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v45, 4uLL, 4);
  LODWORD(v58) = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v58, 4uLL, 4);
  int v38 = (int)v65;
  int v39 = (int)v45;
  int v40 = (int)v58;
  *(_DWORD *)(a2 + 144) = v53;
  *(_DWORD *)(a2 + 148) = v38;
  *(_DWORD *)(a2 + 152) = v39;
  *(_DWORD *)(a2 + 156) = v40;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  LODWORD(v53) = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v53, 4uLL, 4);
  LODWORD(v65) = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v65, 4uLL, 4);
  LODWORD(v45) = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v45, 4uLL, 4);
  LODWORD(v58) = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v58, 4uLL, 4);
  int v41 = (int)v65;
  int v42 = (int)v45;
  int v43 = (int)v58;
  *(_DWORD *)(a2 + 160) = v53;
  *(_DWORD *)(a2 + 164) = v41;
  *(_DWORD *)(a2 + 168) = v42;
  *(_DWORD *)(a2 + 172) = v43;
  *(void *)(a2 + 176) = 0;
  LODWORD(v53) = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v53, 4uLL, 4);
  LODWORD(v65) = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v65, 4uLL, 4);
  int v44 = (int)v65;
  *(_DWORD *)(a2 + 176) = v53;
  *(_DWORD *)(a2 + 180) = v44;
  *(void *)(a2 + 184) = 0;
  LODWORD(v53) = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v53, 4uLL, 4);
  LODWORD(v65) = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v65, 4uLL, 4);
  *(void *)(a2 + 184) = v53 | ((unint64_t)v65 << 32);
  *(unsigned char *)(a2 + 192) = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, (void *)(a2 + 192), 1uLL, 1);
  uint64_t v28 = v49;
  v49 = 0;
  if (v28)
  {
LABEL_79:
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v9);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
LABEL_82:
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v9);
}

void *WebKit::HistoryEntryDataDecoder::decodeFixedLengthData(void *result, void *__dst, size_t __n, int a4)
{
  CFIndex v4 = result;
  uint64_t v5 = *result;
  unint64_t v6 = result[1];
  unint64_t v7 = (*result + (a4 - 1)) & ~(unint64_t)(a4 - 1);
  unint64_t v8 = *result + v6;
  BOOL v10 = v8 >= v7;
  size_t v9 = v8 - v7;
  BOOL v10 = v10 && v9 >= __n;
  if (v10)
  {
    unint64_t v11 = v7 - v5;
    BOOL v10 = v6 >= v11;
    size_t v12 = v6 - v11;
    if (v10
      && (v14 = (const void *)(v5 + v11), size_t *result = v14, result[1] = v12, v12 >= __n)
      && (result = memcpy(__dst, v14, __n), v15 = v4[1], BOOL v10 = v15 >= __n, v16 = v15 - __n, v10))
    {
      *v4 += __n;
      v4[1] = v16;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    size_t *result = 0;
    result[1] = 0;
    *((unsigned char *)result + 16) = 0;
  }
  return result;
}

uint64_t WebKit::HistoryEntryDataDecoder::operator>>(uint64_t a1, WTF::StringImpl *a2)
{
  CFIndex v4 = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unsigned int __dst = 0;
  WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &__dst, 4uLL, 4);
  if (__dst == -1)
  {
    BOOL v10 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    if (!v10) {
      return a1;
    }
  }
  else
  {
    unint64_t v13 = 0;
    WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, &v13, 8uLL, 8);
    if ((v13 & 1) != 0
      || v13 >> 1 != __dst
      || ((unint64_t v6 = (*(void *)a1 + 1) & 0xFFFFFFFFFFFFFFFELL,
           unint64_t v7 = *(void *)a1 + *(void *)(a1 + 8),
           BOOL v9 = v7 >= v6,
           unint64_t v8 = v7 - v6,
           v9)
        ? (BOOL v9 = v8 >= (v13 & 0xFFFFFFFFFFFFFFFELL))
        : (BOOL v9 = 0),
          !v9))
    {
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 16) = 0;
      return a1;
    }
    v12[1] = 0;
    WTF::StringImpl::createUninitialized();
    WebKit::HistoryEntryDataDecoder::decodeFixedLengthData((void *)a1, 0, 2 * __dst, 2);
    WTF::String::operator=((uint64_t *)a2, v12);
    BOOL v10 = v12[0];
    v12[0] = 0;
    if (!v10) {
      return a1;
    }
  }
  if (*(_DWORD *)v10 == 2) {
    WTF::StringImpl::destroy(v10, v5);
  }
  else {
    *(_DWORD *)v10 -= 2;
  }
  return a1;
}

uint64_t WebKit::HistoryEntryDataDecoder::operator>>(uint64_t a1, WTF::StringImpl **a2)
{
  unint64_t v11 = 0;
  WebKit::HistoryEntryDataDecoder::operator>>(a1, (WTF::StringImpl *)&v11);
  WTF::AtomString::AtomString((WTF::AtomString *)&v10, &v11);
  uint64_t v5 = v10;
  BOOL v10 = 0;
  unint64_t v6 = *a2;
  *a2 = v5;
  if (v6)
  {
    int v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 != 2) {
      goto LABEL_5;
    }
    WTF::StringImpl::destroy(v6, v4);
    unint64_t v6 = v10;
    BOOL v10 = 0;
    if (!v6) {
      goto LABEL_6;
    }
    int v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
LABEL_5:
    }
      *(_DWORD *)unint64_t v6 = v7;
  }
LABEL_6:
  unint64_t v8 = v11;
  unint64_t v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v4);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return a1;
}

uint64_t std::optional<WebKit::HTTPBody>::operator=[abi:sn180100]<WebKit::HTTPBody,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    WTF::String::operator=((uint64_t *)a1, (uint64_t *)a2);
    uint64_t v4 = *(unsigned int *)(a1 + 20);
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      uint64_t v6 = 56 * v4;
      do
      {
        uint64_t v7 = *(unsigned int *)(v5 + 48);
        if (v7 != -1) {
          ((void (*)(char *, uint64_t))off_1EE9E6680[v7])(&v11, v5);
        }
        *(_DWORD *)(v5 + 48) = -1;
        v5 += 56;
        v6 -= 56;
      }
      while (v6);
    }
    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 8, (_DWORD *)(a2 + 8));
  }
  else
  {
    uint64_t v8 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = v8;
    uint64_t v9 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a1 + 8) = v9;
    LODWORD(v9) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a1 + 16) = v9;
    LODWORD(v9) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    *(_DWORD *)(a1 + 20) = v9;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

char **WebKit::HistoryEntryDataDecoder::operator>>(char **a1, uint64_t a2)
{
  uint64_t v4 = *(WTF **)a2;
  if (*(void *)a2)
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    WTF::fastFree(v4, (void *)a2);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  size_t __n = 0;
  CFIndex result = (char **)WebKit::HistoryEntryDataDecoder::decodeFixedLengthData(a1, &__n, 8uLL, 8);
  size_t v6 = (size_t)a1[1];
  if ((v6 & 0x8000000000000000) != 0 || (size_t v7 = __n, v6 < __n))
  {
    *a1 = 0;
    a1[1] = 0;
    *((unsigned char *)a1 + 16) = 0;
    return a1;
  }
  uint64_t v8 = *a1;
  if (!__n)
  {
    size_t v15 = 0;
    goto LABEL_17;
  }
  size_t v10 = *(unsigned int *)(a2 + 8);
  uint64_t v9 = (WTF::FastMalloc *)*(unsigned int *)(a2 + 12);
  char v11 = (WTF::FastMalloc *)((char *)v9 + __n);
  if ((unint64_t)v9 + __n > v10)
  {
    unint64_t v12 = v10 + (v10 >> 2);
    if (v12 >= 0x10) {
      unint64_t v13 = v12 + 1;
    }
    else {
      unint64_t v13 = 16;
    }
    if (v13 <= (unint64_t)v11) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = (WTF::FastMalloc *)v13;
    }
    CFIndex result = (char **)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)a2, v14);
    uint64_t v9 = (WTF::FastMalloc *)*(unsigned int *)(a2 + 12);
  }
  if (v11 < v9)
  {
    __break(0xC471u);
  }
  else
  {
    CFIndex result = (char **)memcpy((char *)v9 + *(void *)a2, v8, v7);
    *(_DWORD *)(a2 + 12) = v11;
    size_t v15 = __n;
    size_t v6 = (size_t)a1[1];
    if (v6 >= __n)
    {
      uint64_t v8 = *a1;
LABEL_17:
      *a1 = &v8[v15];
      a1[1] = (char *)(v6 - v15);
      return a1;
    }
  }
  __break(1u);
  return result;
}

uint64_t std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(a1, (uint64_t *)a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v3 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)a1 = v3;
    LODWORD(v3) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a1 + 8) = v3;
    LODWORD(v3) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    *(_DWORD *)(a1 + 12) = v3;
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

__n128 std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<1ul,WebKit::HTTPBody::Element::FileData,WebKit::HTTPBody::Element::FileData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 48);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      WTF::String::operator=((uint64_t *)a2, (uint64_t *)a3);
      char v7 = *(unsigned char *)(a3 + 40);
      __n128 result = *(__n128 *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(__n128 *)(a2 + 24) = result;
      *(unsigned char *)(a2 + 40) = v7;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1EE9E6680[v5])(&v11, a1);
  }
  *(_DWORD *)(a1 + 48) = -1;
  uint64_t v9 = *(void *)a3;
  *(void *)a3 = 0;
  *(void *)a1 = v9;
  __n128 result = *(__n128 *)(a3 + 8);
  long long v10 = *(_OWORD *)(a3 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a3 + 40);
  *(_OWORD *)(a1 + 24) = v10;
  *(__n128 *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 48) = 1;
  return result;
}

void WebKit::WebProcess::~WebProcess(WebKit::WebProcess *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9E66C0;
  *((void *)this + 3) = &unk_1EE9E6788;
  uint64_t v3 = (WTF::StringImpl **)*((void *)this + 101);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 100);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      size_t v6 = (unsigned int **)(v4 + 8);
      do
      {
        if (*(v6 - 1) != (unsigned int *)-1)
        {
          char v7 = *v6;
          *size_t v6 = 0;
          if (v7)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v7);
              WTF::fastFree((WTF *)v7, a2);
            }
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v8 = (WTF::StringImpl *)*((void *)this + 98);
  *((void *)this + 98) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager>::reset[abi:sn180100]((WebKit::SpeechRecognitionRealtimeMediaSourceManager **)this + 96, 0);
  long long v10 = (const void *)*((void *)this + 94);
  *((void *)this + 94) = 0;
  if (v10) {
    CFRelease(v10);
  }
  char v11 = (WTF::StringImpl **)*((void *)this + 88);
  if (v11) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v9);
  }
  WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 688, v9);
  uint64_t v13 = *((void *)this + 82);
  if (v13)
  {
    uint64_t v14 = *(unsigned int *)(v13 - 4);
    if (v14)
    {
      size_t v15 = (unsigned int **)(v13 + 8);
      do
      {
        if (*(v15 - 1) != (unsigned int *)-1)
        {
          size_t v16 = *v15;
          *size_t v15 = 0;
          if (v16)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v16);
              WTF::fastFree((WTF *)v16, v12);
            }
          }
        }
        v15 += 2;
        --v14;
      }
      while (v14);
    }
    WTF::fastFree((WTF *)(v13 - 16), v12);
  }
  uint64_t v17 = *((void *)this + 81);
  if (v17) {
    WTF::fastFree((WTF *)(v17 - 16), v12);
  }
  int v18 = (const char ***)*((void *)this + 79);
  *((void *)this + 79) = 0;
  if (v18) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v18);
  }
  uint64_t v19 = *((void *)this + 78);
  if (v19)
  {
    uint64_t v20 = *(unsigned int *)(v19 - 4);
    if (v20)
    {
      uint64_t v21 = *((void *)this + 78);
      do
      {
        char v22 = *(WTF::StringImpl **)v21;
        if (*(void *)v21 != -1)
        {
          int v23 = *(const char ****)(v21 + 8);
          *(void *)(v21 + 8) = 0;
          if (v23)
          {
            WTF::RefCounted<WebKit::SandboxExtension>::deref(v23);
            char v22 = *(WTF::StringImpl **)v21;
          }
          *(void *)uint64_t v21 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v12);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
        }
        v21 += 16;
        --v20;
      }
      while (v20);
    }
    WTF::fastFree((WTF *)(v19 - 16), v12);
  }
  uint64_t v24 = *((void *)this + 75);
  if (v24)
  {
    uint64_t v25 = *(unsigned int *)(v24 - 4);
    if (v25)
    {
      CFTypeID v26 = (unsigned int **)*((void *)this + 75);
      do
      {
        uint64_t v27 = *v26;
        if (*v26 != (unsigned int *)-1)
        {
          *CFTypeID v26 = 0;
          if (v27)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v27);
              WTF::fastFree((WTF *)v27, v12);
            }
          }
        }
        v26 += 3;
        --v25;
      }
      while (v25);
    }
    WTF::fastFree((WTF *)(v24 - 16), v12);
  }
  if (*((unsigned char *)this + 584))
  {
    *((void *)this + 65) = &unk_1EE9E76C8;
    uint64_t v28 = *((void *)this + 71);
    *((void *)this + 71) = 0;
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
    WebCore::TimerBase::~TimerBase((WebKit::WebProcess *)((char *)this + 520));
  }
  uint64_t v29 = *((void *)this + 64);
  if (v29) {
    WTF::fastFree((WTF *)(v29 - 16), v12);
  }
  uint64_t v30 = *((void *)this + 62);
  *((void *)this + 62) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  *((void *)this + 57) = &unk_1EE9B3390;
  uint64_t v31 = *((void *)this + 60);
  *((void *)this + 60) = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebProcess *)((char *)this + 456));
  uint64_t v33 = *((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  unint64_t v34 = (WTF::StringImpl **)*((void *)this + 54);
  if (v34) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v34, v32);
  }
  uint64_t v35 = *((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = *((void *)this + 52);
  if (v36) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v36, v32);
  }
  int v37 = (_DWORD *)*((void *)this + 51);
  *((void *)this + 51) = 0;
  if (v37)
  {
    if (v37[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v37 + 120))(v37);
    }
    else {
      --v37[2];
    }
  }
  int v38 = (_DWORD *)*((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v38)
  {
    if (v38[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v38 + 8))(v38);
    }
    else {
      --v38[2];
    }
  }
  uint64_t v39 = *((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v39) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteImageDecoderAVFManager,(WTF::DestructionThread)0>(*(atomic_uchar **)(v39 + 24), v32);
  }
  uint64_t v40 = *((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v40) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteMediaPlayerManager,(WTF::DestructionThread)0>(*(atomic_uchar **)(v40 + 8), v32);
  }
  int v41 = (_DWORD *)*((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v41)
  {
    if (v41[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v41 + 8))(v41);
    }
    else {
      --v41[2];
    }
  }
  int v42 = (_DWORD *)*((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v42)
  {
    if (v42[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v42 + 16))(v42);
    }
    else {
      --v42[2];
    }
  }
  std::unique_ptr<WebKit::AudioMediaStreamTrackRendererInternalUnitManager>::reset[abi:sn180100]((uint64_t **)this + 45, 0);
  uint64_t v44 = *((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v44) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v44 + 16), v43);
  }
  uint64_t v45 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v45) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v45 + 24), v43);
  }
  uint64_t v46 = (unsigned int *)*((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v46 && atomic_fetch_add((atomic_uint *volatile)v46 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v46 + 2);
    (*(void (**)(unsigned int *))(*(void *)v46 + 8))(v46);
  }
  uint64_t v47 = (_DWORD *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v47)
  {
    if (v47[5] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v47 + 8))(v47);
    }
    else {
      --v47[5];
    }
  }
  char v48 = (WTF::StringImpl *)*((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2) {
      WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v43);
    }
    else {
      *(_DWORD *)v48 -= 2;
    }
  }
  uint64_t v49 = *((void *)this + 34);
  if (v49)
  {
    uint64_t v50 = *(unsigned int *)(v49 - 4);
    if (v50)
    {
      uint64_t v51 = (uint64_t *)(v49 + 16);
      do
      {
        if (*(v51 - 2) != -1)
        {
          uint64_t v52 = *v51;
          uint64_t *v51 = 0;
          if (v52) {
            (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
          }
        }
        v51 += 3;
        --v50;
      }
      while (v50);
    }
    WTF::fastFree((WTF *)(v49 - 16), v43);
  }
  uint64_t v53 = *((void *)this + 33);
  if (v53)
  {
    uint64_t v54 = *(unsigned int *)(v53 - 4);
    if (v54)
    {
      int v55 = (unsigned int **)(v53 + 16);
      do
      {
        if (*(v55 - 1) != (unsigned int *)-1)
        {
          CFArrayRef v56 = *v55;
          *int v55 = 0;
          if (v56)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v56, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v56);
              WTF::fastFree((WTF *)v56, v43);
            }
          }
        }
        v55 += 3;
        --v54;
      }
      while (v54);
    }
    WTF::fastFree((WTF *)(v53 - 16), v43);
  }
  WebKit::SecItemShimProxy::~SecItemShimProxy((WebKit::WebProcess *)((char *)this + 232), v43);
  WebKit::ViewUpdateDispatcher::~ViewUpdateDispatcher((WebKit::WebProcess *)((char *)this + 192), v57);
  WebKit::EventDispatcher::~EventDispatcher((WebKit::WebProcess *)((char *)this + 144), v58);
  uint64_t v60 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v60) {
    CFRelease(*(CFTypeRef *)(v60 + 8));
  }
  uint64_t v61 = *((void *)this + 16);
  if (v61)
  {
    uint64_t v62 = *(unsigned int *)(v61 - 4);
    if (v62)
    {
      char v63 = (_DWORD **)(v61 + 8);
      do
      {
        if (*(v63 - 1) != (_DWORD *)-1)
        {
          char v64 = *v63;
          *char v63 = 0;
          if (v64)
          {
            if (v64[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v64 + 8))(v64);
            }
            else {
              --v64[2];
            }
          }
        }
        v63 += 2;
        --v62;
      }
      while (v62);
    }
    WTF::fastFree((WTF *)(v61 - 16), v59);
  }
  uint64_t v65 = *((void *)this + 15);
  if (v65)
  {
    uint64_t v66 = *(unsigned int *)(v65 - 4);
    if (v66)
    {
      uint64_t v67 = (uint64_t *)(v65 + 8);
      do
      {
        if (*(v67 - 1) != -1)
        {
          uint64_t v68 = *v67;
          *uint64_t v67 = 0;
          if (v68) {
            CFRelease(*(CFTypeRef *)(v68 + 8));
          }
        }
        v67 += 2;
        --v66;
      }
      while (v66);
    }
    WTF::fastFree((WTF *)(v65 - 16), v59);
  }

  WebKit::AuxiliaryProcess::~AuxiliaryProcess(this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebProcess::~WebProcess(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::WebProcess::~WebProcess(WebKit::WebProcess *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebProcess::~WebProcess((WebKit::WebProcess *)((char *)this - 24), a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::callExit(WebKit *this, IPC::Connection *a2)
{
  CFArrayRef v2 = (WebKit::WebProcess *)WTF::terminateProcess(0);
  return WebKit::WebProcess::registerURLSchemeAsEmptyDocument(v2, v3);
}

uint64_t WebKit::WebProcess::registerURLSchemeAsEmptyDocument(WebKit::WebProcess *this, const WTF::String *a2)
{
  return WebCore::LegacySchemeRegistry::registerURLSchemeAsEmptyDocument(a2, a2);
}

uint64_t WebKit::WebProcess::registerURLSchemeAsDisplayIsolated(WebKit::WebProcess *this, const WTF::String *a2)
{
  return WebCore::LegacySchemeRegistry::registerURLSchemeAsDisplayIsolated(a2, a2);
}

uint64_t WebKit::WebProcess::registerURLSchemeAsCachePartitioned(WebKit::WebProcess *this, const WTF::String *a2)
{
  return WebCore::LegacySchemeRegistry::registerURLSchemeAsCachePartitioned(a2, a2);
}

uint64_t WebKit::WebProcess::registerURLSchemeAsCanDisplayOnlyIfCanRequest(WebKit::WebProcess *this, const WTF::String *a2)
{
  return WebCore::LegacySchemeRegistry::registerAsCanDisplayOnlyIfCanRequest(a2, a2);
}

uint64_t WebKit::WebProcess::setAlwaysUsesComplexTextCodePath(WebKit::WebProcess *this)
{
  return WebCore::FontCascade::setCodePath();
}

uint64_t WebKit::WebProcess::setDisableFontSubpixelAntialiasingForTesting(WebKit::WebProcess *this, WebCore::FontCascade *a2)
{
  return WebCore::FontCascade::setDisableFontSubpixelAntialiasingForTesting(a2);
}

uint64_t WebKit::WebProcess::setHasSuspendedPageProxy(uint64_t this, char a2)
{
  *(unsigned char *)(this + 616) = a2;
  return this;
}

uint64_t WebKit::WebProcess::setIsInProcessCache(WebKit::WebProcess *a1, uint64_t a2, uint64_t *a3)
{
  if (a2) {
    int v4 = 3;
  }
  else {
    int v4 = 4;
  }
  *((_DWORD *)a1 + 149) = v4;
  WebKit::WebProcess::accessibilityRelayProcessSuspended(a1, a2);
  uint64_t v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  size_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

uint64_t WebKit::WebProcess::prewarmWithDomainInformation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F416DC00](a2);
}

WTF::StringImpl *WebKit::WebProcess::registerURLSchemeAsCORSEnabled(WebKit::WebProcess *this, const WTF::String *a2)
{
  v11[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  WebCore::LegacySchemeRegistry::registerURLSchemeAsCORSEnabled(a2, a2);
  uint64_t v4 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection(this) + 24);
  uint64_t v5 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v5 += 2;
  }
  v11[0] = v5;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v9, (_DWORD **)v11, 1uLL);
  long long v10 = v9;
  IPC::Connection::send<Messages::NetworkConnectionToWebProcess::RegisterURLSchemesAsCORSEnabled>(v4, (uint64_t *)&v10);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
  __n128 result = v11[0];
  v11[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebProcess::registerURLSchemeAsWebExtension(WebKit::WebProcess *this, WTF::StringImpl **a2)
{
  CFArrayRef v2 = *a2;
  if (*a2) {
    *(_DWORD *)v2 += 2;
  }
  uint64_t v5 = v2;
  WebKit::WebExtensionMatchPattern::registerCustomURLScheme((uint64_t *)&v5);
  __n128 result = v5;
  uint64_t v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebProcess::fullKeyboardAccessModeChanged(uint64_t this, char a2)
{
  *(unsigned char *)(this + 258) = a2;
  return this;
}

uint64_t WebKit::WebProcess::focusedWebPage(WebKit::WebProcess *this)
{
  CFArrayRef v2 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 15);
  uint64_t v4 = *((void *)this + 15);
  if (v4) {
    uint64_t v5 = (void *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5 == v2) {
    return 0;
  }
  while (1)
  {
    uint64_t v6 = v2[1];
    if ((*(_WORD *)(v6 + 1824) & 4) != 0
      && (~*(unsigned __int16 *)(*(void *)(*(void *)(v6 + 48) + 72) + 26) & 3) == 0)
    {
      return v6;
    }
    while (1)
    {
      v2 += 2;
      if (v2 == v3) {
        break;
      }
      if ((unint64_t)(*v2 + 1) > 1) {
        goto LABEL_11;
      }
    }
    CFArrayRef v2 = v3;
LABEL_11:
    if (v2 == v5) {
      return 0;
    }
  }
}

uint64_t WebKit::WebProcess::webPage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 120), &v3);
}

uint64_t WebKit::WebProcess::removeWebPage(uint64_t *a1, uint64_t a2)
{
  uint64_t v8 = a2;
  WebKit::WebProcess::flushResourceLoadStatistics((WebKit::WebProcess *)a1);
  WebKit::WebProcess::pageWillLeaveWindow(a1, a2);
  uint64_t v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1 + 15, &v8);
  uint64_t v5 = a1[15];
  if (v5)
  {
    uint64_t v6 = (void *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == v4) {
      goto LABEL_7;
    }
  }
  else
  {
    if (!v4) {
      goto LABEL_7;
    }
    uint64_t v6 = 0;
  }
  if (v6 != v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(a1 + 15, v4);
  }
LABEL_7:
  WebKit::AuxiliaryProcess::enableTermination((uint64_t)a1);
  return WebKit::WebProcess::updateIsWebTransportEnabled((WebKit::WebProcess *)a1);
}

void *WebKit::WebProcess::pageWillLeaveWindow(void *result, uint64_t a2)
{
  CFArrayRef v2 = result;
  uint64_t v3 = result[64];
  if (!v3) {
    goto LABEL_27;
  }
  unsigned int v4 = *(_DWORD *)(v3 - 8);
  unint64_t v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  uint64_t v8 = v4 & ((v7 >> 31) ^ v7);
  uint64_t v9 = *(void *)(v3 + 8 * v8);
  if (v9 != a2)
  {
    int v10 = 1;
    while (v9)
    {
      uint64_t v8 = (v8 + v10) & v4;
      uint64_t v9 = *(void *)(v3 + 8 * v8);
      ++v10;
      if (v9 == a2) {
        goto LABEL_8;
      }
    }
    uint64_t v8 = *(unsigned int *)(v3 - 4);
  }
LABEL_8:
  if (v8 != *(_DWORD *)(v3 - 4))
  {
    *(void *)(v3 + 8 * v8) = -1;
    char v11 = result + 64;
    ++*(_DWORD *)(result[64] - 16);
    uint64_t v12 = result[64];
    int v13 = v12 ? *(_DWORD *)(v12 - 12) - 1 : -1;
    *(_DWORD *)(v12 - 12) = v13;
    uint64_t v3 = *v11;
    if (!*v11) {
      goto LABEL_27;
    }
    unsigned int v14 = *(_DWORD *)(v3 - 4);
    if (6 * *(_DWORD *)(v3 - 12) < v14 && v14 >= 9)
    {
      __n128 result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(result + 64, v14 >> 1, 0);
      uint64_t v3 = *v11;
      if (!*v11) {
        goto LABEL_27;
      }
    }
  }
  if (!*(_DWORD *)(v3 - 12))
  {
LABEL_27:
    if (!*((unsigned char *)v2 + 584))
    {
      size_t v16 = (void *)WTF::fastMalloc((WTF *)0x20);
      *size_t v16 = &unk_1EE9E6F10;
      v16[1] = WebKit::WebProcess::nonVisibleProcessEarlyMemoryCleanupTimerFired;
      v16[2] = 0;
      v16[3] = v2;
      WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(v2 + 65));
      v2[65] = &unk_1EE9E76C8;
      v2[71] = v16;
      v2[72] = 0x4024000000000000;
      *((unsigned char *)v2 + 584) = 1;
    }
    return (void *)WebCore::DeferrableOneShotTimer::restart((uint64_t)(v2 + 65));
  }
  return result;
}

uint64_t WebKit::WebProcess::shouldTerminate(WebKit::WebProcess *this)
{
  uint64_t v1 = *((void *)this + 5);
  uint64_t v19 = 0;
  IPC::Connection::createSyncMessageEncoder(3823, 0, &v19, &v18);
  IPC::Connection::sendSyncMessage(v1, v19, (uint64_t *)&v18, 0, (uint64_t)&v16, INFINITY);
  if (v17)
  {
    if (v17 == 1)
    {
      int v2 = 0;
      LOBYTE(v12) = (_BYTE)v16;
      int v3 = 1;
      int v14 = 1;
      int v4 = 1;
LABEL_8:
      ((void (*)(__int16 *, uint64_t **))off_1EE9E6EE0[v4])(&v15, &v16);
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  __int16 v15 = 0;
  IPC::Decoder::operator>><std::tuple<BOOL>>(v16, &v15);
  if (HIBYTE(v15))
  {
    int v4 = v17;
    if (!v17)
    {
      int v3 = 0;
      unint64_t v6 = v16;
      size_t v16 = 0;
      int v2 = v15;
      uint64_t v12 = v6;
      char v13 = v15;
      int v14 = 0;
      goto LABEL_8;
    }
LABEL_12:
    char v11 = (WebKit::WebProcess *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebProcess::terminate(v11);
  }
  int v2 = 0;
  LOBYTE(v12) = 13;
  int v3 = 1;
  int v14 = 1;
  int v4 = v17;
  if (v17 != -1) {
    goto LABEL_8;
  }
LABEL_9:
  unint64_t v7 = v18;
  int v18 = 0;
  if (v7)
  {
    IPC::Encoder::~Encoder(v7, v5);
    WTF::fastFree(v9, v10);
  }
  ((void (*)(uint64_t **, uint64_t **))off_1EE9E6ED0[v3])(&v16, &v12);
  return (v3 | v2) != 0;
}

uint64_t WebKit::WebProcess::terminate(WebKit::WebProcess *this)
{
  WebKit::WebProcess::platformTerminate(this);
  IPC::Connection::invalidate(*((void *)this + 5));
  int v2 = *(uint64_t (**)(WebKit::WebProcess *))(*(void *)this + 120);

  return v2(this);
}

uint64_t WebKit::WebProcess::didReceiveSyncMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return IPC::MessageReceiverMap::dispatchSyncMessage((uint64_t *)(a1 + 48), a2, a3, a4);
}

uint64_t WebKit::WebProcess::didClose(WebKit::WebProcess *this, IPC::Connection *a2)
{
  int v2 = (WTF::FileSystemImpl *)WebCore::HTMLMediaElement::mediaCacheDirectory(this);
  WTF::FileSystemImpl::markPurgeable(v2, v3);
  uint64_t v4 = WTF::terminateProcess(0);
  return WebKit::WebProcess::removeWebFrame(v4);
}

unsigned int *WebKit::WebProcess::removeWebFrame(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5 = a5;
  v21[0] = a2;
  v21[1] = a3;
  v20[0] = a4;
  v20[1] = a5;
  unint64_t v7 = a1 + 33;
  uint64_t v8 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1 + 33, v21);
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::take(v7, v8, &v19);
  if (v19)
  {
    uint64_t v10 = *((void *)v19 + 1);
    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 24);
      if (v11)
      {
        uint64_t v12 = *(void *)(v11 + 8);
        if (v12)
        {
          if (!*(unsigned char *)(v12 + 144))
          {
            uint64_t v13 = a1[37];
            if (v13)
            {
              uint64_t v14 = *(void *)(v13 + 24);
              v18[0] = v21;
              IPC::Connection::send<Messages::NetworkConnectionToWebProcess::ClearFrameLoadRecordsForStorageAccess>(v14, v18, 0, 0, 0);
            }
          }
        }
      }
    }
  }
  uint64_t v15 = a1[5];
  if (v15) {
    BOOL v16 = v5 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    v18[0] = v21;
    v18[1] = v20;
    IPC::Connection::send<Messages::WebProcessProxy::DidDestroyFrame>(v15, v18, 0, 0, 0);
  }
  __n128 result = (unsigned int *)v19;
  uint64_t v19 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v9);
    }
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::NetworkConnectionToWebProcess::ClearFrameLoadRecordsForStorageAccess>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 225;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  int v17 = v10;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v10, *a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  int v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t IPC::Connection::send<Messages::WebProcessProxy::DidDestroyFrame>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2594;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  int v17 = v10;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v10, *a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, a2[1]);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  int v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

__n128 WebKit::WebProcess::userGestureTokenIdentifier@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, __n128 *a5@<X8>)
{
  if (a3 && (uint64_t v5 = *a4) != 0 && !*(_DWORD *)(v5 + 68) && *(unsigned char *)(v5 + 16) == 1)
  {
    WTF::WeakHashMap<WebCore::UserGestureToken,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultWeakPtrImpl>::ensure<WebKit::WebProcess::userGestureTokenIdentifier(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RefPtr<WebCore::UserGestureToken,WTF::RawPtrTraits<WebCore::UserGestureToken>,WTF::DefaultRefDerefTraits<WebCore::UserGestureToken>>)::$_0>(a1 + 600, (void *)v5, (uint64_t)v16);
    uint64_t v8 = v17;
    if (v18)
    {
      uint64_t v13 = v17;
      uint64_t v9 = *(unsigned int **)(*(void *)v17 + 8);
      uint64_t v10 = WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v10 = &unk_1EE9E7180;
      *(void *)(v10 + 8) = a2;
      *(unsigned char *)(v10 + 16) = a3;
      uint64_t v15 = v10;
      WebCore::UserGestureToken::addDestructionObserver(v9, (unint64_t)&v15);
      uint64_t v11 = v15;
      uint64_t v15 = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      uint64_t v8 = v13;
    }
    __n128 result = *(__n128 *)(v8 + 8);
    *a5 = result;
    a5[1].n128_u8[0] = 1;
  }
  else
  {
    a5->n128_u8[0] = 0;
    a5[1].n128_u8[0] = 0;
  }
  return result;
}

unsigned int **WTF::WeakHashMap<WebCore::UserGestureToken,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultWeakPtrImpl>::ensure<WebKit::WebProcess::userGestureTokenIdentifier(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RefPtr<WebCore::UserGestureToken,WTF::RawPtrTraits<WebCore::UserGestureToken>,WTF::DefaultRefDerefTraits<WebCore::UserGestureToken>>)::$_0>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (v6 > v7) {
    WTF::WeakHashMap<WebCore::UserGestureToken,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultWeakPtrImpl>::removeNullReferences((unsigned int **)a1, a2);
  }
  uint64_t v8 = a2[1];
  if (v8
    || (uint64_t v8 = WTF::fastCompactMalloc((WTF *)0x10),
        *(_DWORD *)uint64_t v8 = 1,
        *(void *)(v8 + 8) = a2,
        uint64_t v9 = (unsigned int *)a2[1],
        a2[1] = v8,
        !v9))
  {
    atomic_fetch_add((atomic_uint *volatile)v8, 1u);
    atomic_fetch_add((atomic_uint *volatile)v8, 1u);
  }
  else
  {
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
    uint64_t v8 = a2[1];
    atomic_fetch_add((atomic_uint *volatile)v8, 1u);
    atomic_fetch_add((atomic_uint *volatile)v8, 1u);
    if (!v8) {
      goto LABEL_11;
    }
  }
  if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v8);
    WTF::fastFree((WTF *)v8, a2);
  }
LABEL_11:
  uint64_t v10 = *(unsigned int **)a1;
  if (*(void *)a1
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)a1, 0), (uint64_t v10 = *(unsigned int **)a1) != 0))
  {
    char v11 = 0;
    int v12 = *(v10 - 2);
  }
  else
  {
    int v12 = 0;
    char v11 = 1;
  }
  uint64_t v13 = 0;
  unint64_t v14 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  unsigned int v17 = (v16 >> 31) ^ v16;
  for (int i = 1; ; ++i)
  {
    unsigned int v19 = v17 & v12;
    uint64_t v20 = (unsigned int ***)&v10[6 * (v17 & v12)];
    __n128 result = *v20;
    if (*v20 != (unsigned int **)-1) {
      break;
    }
    uint64_t v13 = (unsigned int **)&v10[6 * v19];
LABEL_20:
    unsigned int v17 = i + v19;
  }
  if (!result)
  {
    if (v13)
    {
      IPC::Encoder *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      --*(_DWORD *)(*(void *)a1 - 16);
      IPC::Encoder *v13 = (unsigned int *)v8;
    }
    else
    {
      *uint64_t v20 = (unsigned int **)v8;
      uint64_t v13 = (unsigned int **)v20;
    }
    IdentifierInternal = (WebCore::Process *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    __n128 result = (unsigned int **)WebCore::Process::identifier(IdentifierInternal);
    v13[1] = (unsigned int *)IdentifierInternal;
    v13[2] = (unsigned int *)result;
    CFTypeID v26 = *(unsigned int **)a1;
    if (*(void *)a1) {
      int v27 = *(v26 - 3) + 1;
    }
    else {
      int v27 = 1;
    }
    *(v26 - 3) = v27;
    uint64_t v28 = *(unsigned int **)a1;
    if (*(void *)a1) {
      int v29 = *(v28 - 3);
    }
    else {
      int v29 = 0;
    }
    uint64_t v30 = *(v28 - 4) + v29;
    unint64_t v31 = *(v28 - 1);
    if (v31 > 0x400)
    {
      if (v31 <= 2 * v30)
      {
LABEL_37:
        __n128 result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)a1, v13);
        uint64_t v13 = result;
        uint64_t v28 = *(unsigned int **)a1;
        if (*(void *)a1) {
          LODWORD(v31) = *(v28 - 1);
        }
        else {
          LODWORD(v31) = 0;
        }
      }
    }
    else if (3 * v31 <= 4 * v30)
    {
      goto LABEL_37;
    }
    int v23 = &v28[6 * v31];
    char v24 = 1;
    uint64_t v20 = (unsigned int ***)v13;
    goto LABEL_42;
  }
  if (result != (unsigned int **)v8) {
    goto LABEL_20;
  }
  if (v11) {
    int v22 = 0;
  }
  else {
    int v22 = *(v10 - 1);
  }
  int v23 = &v10[6 * v22];
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v8);
    uint64_t v36 = (WTF *)v8;
    int v37 = v20;
    int v38 = v23;
    __n128 result = (unsigned int **)WTF::fastFree(v36, a2);
    int v23 = v38;
    uint64_t v20 = v37;
  }
  char v24 = 0;
LABEL_42:
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = v20;
  *(void *)(a3 + 16) = v23;
  int8x16x2_t v32 = *(unsigned int **)a1;
  if (*(void *)a1)
  {
    int v33 = *(v32 - 1);
    unint64_t v34 = &v32[6 * v33];
  }
  else
  {
    unint64_t v34 = 0;
    int v33 = 0;
  }
  *(void *)(a3 + 24) = v34;
  *(void *)(a3 + 32) = &v32[6 * v33];
  *(_DWORD *)(a3 + 40) = 0;
LABEL_46:
  while (v20 != (unsigned int ***)v34 && !(*v20)[1])
  {
    uint64_t v35 = v20 + 3;
    *(void *)(a3 + 8) = v20 + 3;
    uint64_t v20 = (unsigned int ***)v23;
    if (v35 != (unsigned int ***)v23)
    {
      uint64_t v20 = v35;
      while ((unint64_t)*v20 + 1 <= 1)
      {
        v20 += 3;
        *(void *)(a3 + 8) = v20;
        if (v20 == (unsigned int ***)v23)
        {
          uint64_t v20 = (unsigned int ***)v23;
          goto LABEL_46;
        }
      }
    }
  }
  *(unsigned char *)(a3 + 48) = v24;
  return result;
}

unsigned int *WebCore::UserGestureToken::addDestructionObserver(unsigned int *a1, unint64_t a2)
{
  int v2 = (uint64_t *)a2;
  __n128 result = a1 + 6;
  uint64_t v5 = a1[9];
  if (v5 == a1[8])
  {
    __n128 result = (unsigned int *)WTF::Vector<WTF::Function<void ()(WebCore::UserGestureToken &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v5 + 1, a2);
    int v2 = (uint64_t *)result;
    uint64_t v5 = a1[9];
    unsigned int v6 = (void *)(*((void *)a1 + 3) + 8 * v5);
  }
  else
  {
    unsigned int v6 = (void *)(*(void *)result + 8 * v5);
  }
  uint64_t v7 = *v2;
  uint64_t *v2 = 0;
  *unsigned int v6 = v7;
  a1[9] = v5 + 1;
  return result;
}

uint64_t WebKit::WebProcess::isJITEnabled(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(unsigned __int8 *)(MEMORY[0x1E4F309C0] + 585);
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t IPC::Connection::send<Messages::WebProcessProxy::DidReceiveBackgroundResponsivenessPing>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 2600;
  *((void *)v9 + 1) = a3;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v13 = v9;
  uint64_t v10 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, a4, a5);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v13, v11);
  return v10;
}

uint64_t WebKit::WebProcess::setHasMouseDevice(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 259) != a2)
  {
    *(unsigned char *)(this + 259) = a2;
    return MEMORY[0x1F4172938]();
  }
  return this;
}

uint64_t WebKit::WebProcess::setHasStylusDevice(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 260) != a2)
  {
    *(unsigned char *)(this + 260) = a2;
    return MEMORY[0x1F4172938]();
  }
  return this;
}

void WebKit::WebProcess::setInitialGamepads(uint64_t a1, uint64_t a2)
{
  {
    qword_1EB35A910 = 0;
    unk_1EB35A918 = 0;
    byte_1EB35A920 = 0;
    WebKit::WebGamepadProvider::singleton(void)::provider = (uint64_t)&unk_1EE9F0318;
    xmmword_1EB35A928 = 0u;
    unk_1EB35A938 = 0u;
    xmmword_1EB35A948 = 0u;
  }
  WebKit::WebGamepadProvider::setInitialGamepads((uint64_t)&WebKit::WebGamepadProvider::singleton(void)::provider, a2);
}

void *WebKit::WebProcess::gamepadConnected(uint64_t a1, unsigned int *a2, NSObject *a3)
{
  {
    qword_1EB35A910 = 0;
    unk_1EB35A918 = 0;
    byte_1EB35A920 = 0;
    WebKit::WebGamepadProvider::singleton(void)::provider = (uint64_t)&unk_1EE9F0318;
    xmmword_1EB35A928 = 0u;
    unk_1EB35A938 = 0u;
    xmmword_1EB35A948 = 0u;
  }
  return WebKit::WebGamepadProvider::gamepadConnected((uint64_t)&WebKit::WebGamepadProvider::singleton(void)::provider, a2, a3);
}

uint64_t WebKit::WebProcess::setJavaScriptGarbageCollectorTimerEnabled(WebKit::WebProcess *this, uint64_t a2)
{
  uint64_t v3 = WebCore::GCController::singleton(this);

  return MEMORY[0x1F416CE78](v3, a2);
}

void WebKit::WebProcess::handleInjectedBundleMessage(uint64_t a1, uint64_t a2, const void **a3)
{
  {
    uint64_t v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  uint64_t v5 = *(void *)(WebKit::WebProcess::singleton(void)::process + 136);
  if (v5)
  {
    CFRetain(*(CFTypeRef *)(v5 + 8));
    unsigned int v6 = *a3;
    uint64_t v10 = &unk_1EE9E6F38;
    WebKit::UserData::transform(v6, (uint64_t)&v10, &v9);
    (*(void (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(v5 + 40) + 32))(*(void *)(v5 + 40), v5, a2, &v9);
    uint64_t v7 = v9;
    uint64_t v9 = 0;
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

void WebKit::WebProcess::setInjectedBundleParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  {
    uint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  uint64_t v5 = *(CFTypeRef **)(WebKit::WebProcess::singleton(void)::process + 136);
  if (v5)
  {
    CFRetain(v5[1]);
    WebKit::InjectedBundle::setBundleParameters((WebKit::InjectedBundle *)v5, a2, a3);
    CFTypeRef v6 = v5[1];
    CFRelease(v6);
  }
}

void WebKit::WebProcess::networkProcessConnectionClosed(WebKit::WebProcess *this, WebKit::NetworkProcessConnection *a2)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)this + 672))
    {
      uint64_t v6 = *((void *)this + 83);
      if (a2) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v6 = 0;
      if (a2)
      {
LABEL_4:
        uint64_t v7 = *(_xpc_connection_s **)(*((void *)a2 + 3) + 352);
        if (v7) {
          LODWORD(v7) = xpc_connection_get_pid(v7);
        }
        goto LABEL_8;
      }
    }
    LODWORD(v7) = 0;
LABEL_8:
    *(_DWORD *)buf = 134218496;
    *(void *)&buf[4] = this;
    __int16 v74 = 2048;
    uint64_t v75 = v6;
    __int16 v76 = 1024;
    int v77 = (int)v7;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::networkProcessConnectionClosed: NetworkProcess (%d) closed its connection (Crashed)", buf, 0x1Cu);
  }
  uint64_t v8 = *((void *)this + 82);
  if (v8)
  {
    uint64_t v9 = *(unsigned int *)(v8 - 4);
    uint64_t v10 = (void *)(v8 + 16 * v9);
    if (*(_DWORD *)(v8 - 12))
    {
      char v11 = (void *)*((void *)this + 82);
      if (v9)
      {
        uint64_t v12 = 16 * v9;
        char v11 = (void *)*((void *)this + 82);
        while ((unint64_t)(*v11 + 1) <= 1)
        {
          v11 += 2;
          v12 -= 16;
          if (!v12)
          {
            char v11 = v10;
            goto LABEL_21;
          }
        }
      }
      goto LABEL_21;
    }
    char v11 = (void *)(v8 + 16 * v9);
  }
  else
  {
    char v11 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v10 = (void *)(v8 + 16 * v9);
  if (!v8)
  {
    uint64_t v13 = 0;
LABEL_24:
    unint64_t v15 = 0;
    goto LABEL_25;
  }
LABEL_21:
  uint64_t v13 = (void *)(v8 + 16 * *(unsigned int *)(v8 - 4));
  uint64_t v14 = *(unsigned int *)(v8 - 12);
  if (!v14) {
    goto LABEL_24;
  }
  if (v14 >> 29)
  {
    __break(0xC471u);
    return;
  }
  unint64_t v15 = (WTF *)WTF::fastMalloc((WTF *)(8 * v14));
LABEL_25:
  if (v13 != v11)
  {
    unsigned int v16 = 0;
    int v17 = 1;
    do
    {
      unsigned int v18 = v17;
      unsigned int v19 = v11 + 2;
      *((void *)v15 + v16) = *v11;
      char v11 = v10;
      if (v19 != v10)
      {
        char v11 = v19;
        while ((unint64_t)(*v11 + 1) <= 1)
        {
          v11 += 2;
          if (v11 == v10)
          {
            char v11 = v10;
            break;
          }
        }
      }
      ++v16;
      int v17 = v18 + 1;
    }
    while (v11 != v13);
    if (v16)
    {
      uint64_t v20 = 8 * v18;
      uint64_t v21 = v15;
      do
      {
        *(void *)buf = *(void *)v21;
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((atomic_uint **)this + 82, buf, (atomic_uint **)&v72);
        int v22 = (unsigned int *)v72;
        if (v72)
        {
          if (!*((void *)v72 + 1))
          {
            v72 = 0;
LABEL_40:
            if (atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v22);
              WTF::fastFree((WTF *)v22, v5);
            }
            goto LABEL_42;
          }
          WebKit::StorageAreaMap::disconnect(*((WebKit::StorageAreaMap **)v72 + 1));
          int v22 = (unsigned int *)v72;
          v72 = 0;
          if (v22) {
            goto LABEL_40;
          }
        }
LABEL_42:
        uint64_t v21 = (WTF *)((char *)v21 + 8);
        v20 -= 8;
      }
      while (v20);
    }
  }
  if (v15) {
    WTF::fastFree(v15, v5);
  }
  int v23 = (void *)((char *)this + 120);
  char v24 = (WebCore::SWContextManager *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 15);
  uint64_t v25 = v24;
  int v27 = v26;
  uint64_t v28 = *((void *)this + 15);
  if (v28) {
    int v29 = (WebCore::SWContextManager *)(v28 + 16 * *(unsigned int *)(v28 - 4));
  }
  else {
    int v29 = 0;
  }
  if (v29 != v24)
  {
    do
    {
      char v24 = (WebCore::SWContextManager *)WebCore::Page::optionalIDBConnection(*(WebCore::Page **)(*((void *)v25 + 1)
                                                                                                + 48));
      if (v24 && *((void *)a2 + 9)) {
        char v24 = (WebCore::SWContextManager *)WebCore::Page::clearIDBConnection(*(WebCore::Page **)(*((void *)v25 + 1)
      }
                                                                                               + 48));
      while (1)
      {
        uint64_t v25 = (WebCore::SWContextManager *)((char *)v25 + 16);
        if (v25 == v27) {
          break;
        }
        if ((unint64_t)(*(void *)v25 + 1) > 1) {
          goto LABEL_56;
        }
      }
      uint64_t v25 = v27;
LABEL_56:
      ;
    }
    while (v25 != v29);
  }
  uint64_t v30 = (WebCore::SWContextManager *)WebCore::SWContextManager::singleton(v24);
  unint64_t v31 = (WebCore::SWContextManager *)WebCore::SWContextManager::connection(v30);
  if (v31)
  {
    int8x16x2_t v32 = (WebCore::SWContextManager *)WebCore::SWContextManager::singleton(v31);
    WebCore::SWContextManager::stopAllServiceWorkers(v32);
  }
  int v33 = (_DWORD *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v33)
  {
    if (v33[5] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v33 + 8))(v33);
    }
    else {
      --v33[5];
    }
  }
  WebKit::WebProcess::setNetworkProcessConnectionID((uint64_t)this, 0);
  uint64_t v34 = WebKit::WebProcess::focusedWebPage(this);
  if (!v34 || (uint64_t v35 = *(WebCore::Page **)(v34 + 48)) == 0)
  {
    uint64_t v36 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 15);
    if (*v23) {
      uint64_t v38 = *v23 + 16 * *(unsigned int *)(*v23 - 4);
    }
    else {
      uint64_t v38 = 0;
    }
    if ((void *)v38 == v36) {
      goto LABEL_85;
    }
    while (!*(void *)(v36[1] + 48))
    {
      while (1)
      {
        v36 += 2;
        if (v36 == v37) {
          break;
        }
        if ((unint64_t)(*v36 + 1) > 1) {
          goto LABEL_75;
        }
      }
      uint64_t v36 = v37;
LABEL_75:
      if (v36 == (void *)v38) {
        goto LABEL_85;
      }
    }
    uint64_t v35 = *(WebCore::Page **)(v36[1] + 48);
  }
  uint64_t v39 = (WebCore::DiagnosticLoggingKeys *)WebCore::Page::diagnosticLoggingClient(v35);
  uint64_t v40 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::internalErrorKey((uint64_t *)buf, v39);
  WebCore::DiagnosticLoggingKeys::networkProcessCrashedKey((uint64_t *)&v72, v40);
  (**(void (***)(WebCore::DiagnosticLoggingKeys *, unsigned char *, WTF::StringImpl **, void))v39)(v39, buf, &v72, 0);
  int v42 = v72;
  v72 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, v41);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
  }
  int v43 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2) {
      WTF::StringImpl::destroy(v43, v41);
    }
    else {
      *(_DWORD *)v43 -= 2;
    }
  }
LABEL_85:
  WebKit::WebLoaderStrategy::networkProcessCrashed(*((WebKit::WebLoaderStrategy **)this + 40));
  WebKit::WebSocketChannelManager::networkProcessCrashed((WebKit::WebProcess *)((char *)this + 416), v44);
  WebKit::WebBroadcastChannelRegistry::networkProcessCrashed(*((WebKit::WebBroadcastChannelRegistry **)this + 50));
  uint64_t v45 = (WebKit::LibWebRTCNetwork *)*((void *)this + 53);
  if (v45) {
    WebKit::LibWebRTCNetwork::networkProcessCrashed(v45);
  }
  uint64_t v46 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 15);
  char v48 = v46;
  uint64_t v49 = v47;
  if (*v23) {
    uint64_t v50 = *v23 + 16 * *(unsigned int *)(*v23 - 4);
  }
  else {
    uint64_t v50 = 0;
  }
  if ((void *)v50 != v46)
  {
    do
    {
      WebKit::WebPage::stopAllURLSchemeTasks((WebKit::WebPage *)v48[1]);
      uint64_t v51 = *(void *)(v48[1] + 48);
      if (v51)
      {
        if ((*(unsigned int (**)(void))(**(void **)(*(void *)(v51 + 1240) + 8) + 112))(*(void *)(*(void *)(v51 + 1240) + 8)))
        {
          *(void *)buf = 0;
          WebCore::PaymentCoordinator::didCancelPaymentSession();
          uint64_t v52 = *(const void **)buf;
          *(void *)buf = 0;
          if (v52) {
            CFRelease(v52);
          }
        }
      }
      while (1)
      {
        v48 += 2;
        if (v48 == v49) {
          break;
        }
        if ((unint64_t)(*v48 + 1) > 1) {
          goto LABEL_99;
        }
      }
      char v48 = v49;
LABEL_99:
      ;
    }
    while (v48 != (void *)v50);
  }
  uint64_t v53 = *((void *)this + 41);
  if (v53)
  {
    WebKit::WebFileSystemStorageConnection::connectionClosed(v53);
    uint64_t v54 = (unsigned int *)*((void *)this + 41);
    *((void *)this + 41) = 0;
    if (v54)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v54 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v54 + 2);
        (*(void (**)(unsigned int *))(*(void *)v54 + 8))(v54);
      }
    }
  }
  uint64_t v55 = *(void *)(*((void *)this + 46) + 16);
  if (v55)
  {
    char v56 = 0;
    unint64_t v57 = (atomic_uchar *)(v55 + 24);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v55 + 24), (unsigned __int8 *)&v56, 1u, memory_order_acquire, memory_order_acquire);
    if (v56) {
      MEMORY[0x19972E8D0](v55 + 24);
    }
    uint64_t v58 = *(void *)(v55 + 40);
    if (v58)
    {
      *(void *)(v55 + 40) = 0;
      WTF::fastFree((WTF *)(v58 - 16), v47);
    }
    uint64_t v59 = *(void *)(v55 + 48);
    if (v59)
    {
      *(void *)(v55 + 48) = 0;
      WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,unsigned int,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v59, v47);
    }
    uint64_t v60 = *(atomic_uchar *volatile **)(v55 + 32);
    *(void *)(v55 + 32) = 0;
    if (!v60) {
      goto LABEL_120;
    }
    char v61 = 0;
    atomic_uchar *volatile v62 = *v60;
    atomic_compare_exchange_strong_explicit(*v60, (unsigned __int8 *)&v61, 1u, memory_order_acquire, memory_order_acquire);
    if (v61) {
      MEMORY[0x19972E8D0](v62);
    }
    uint64_t v63 = *((void *)v62 + 1);
    uint64_t v64 = v63 - 1;
    *((void *)v62 + 1) = v63 - 1;
    if (v63 == 1)
    {
      uint64_t v71 = *((void *)v62 + 2);
      uint64_t v66 = *((void *)v62 + 3);
      *((void *)v62 + 3) = 0;
      BOOL v65 = v71 == 0;
    }
    else
    {
      BOOL v65 = 0;
      uint64_t v66 = 0;
    }
    int v67 = 1;
    atomic_compare_exchange_strong_explicit(v62, (unsigned __int8 *)&v67, 0, memory_order_release, memory_order_relaxed);
    if (v67 == 1)
    {
      if (!v64) {
        goto LABEL_118;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v62);
      if (!v64)
      {
LABEL_118:
        uint64_t v68 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v68 = &unk_1EE9B37E8;
        *(void *)(v68 + 8) = v62;
        *(void *)(v68 + 16) = v66;
        *(unsigned char *)(v68 + 24) = v65;
        *(void *)buf = v68;
        WTF::ensureOnMainRunLoop();
        uint64_t v69 = *(void *)buf;
        *(void *)buf = 0;
        if (v69) {
          (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
        }
      }
    }
LABEL_120:
    int v70 = 1;
    atomic_compare_exchange_strong_explicit(v57, (unsigned __int8 *)&v70, 0, memory_order_release, memory_order_relaxed);
    if (v70 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v57);
    }
  }
}

uint64_t WebKit::WebProcess::fileSystemStorageConnection(WebKit::WebProcess *this)
{
  uint64_t result = *((void *)this + 41);
  if (!result)
  {
    uint64_t v3 = WebKit::WebProcess::ensureNetworkProcessConnection(this);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v7, *(atomic_uchar *volatile **)(v3 + 24));
    uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v4 + 8) = 1;
    *(void *)uint64_t v4 = &unk_1EE9F5BF8;
    uint64_t v5 = v7;
    uint64_t v7 = 0;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 24) = v5;
    uint64_t v6 = (unsigned int *)*((void *)this + 41);
    *((void *)this + 41) = v4;
    if (v6)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v6 + 2);
        (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
      }
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v7);
    return *((void *)this + 41);
  }
  return result;
}

IPC::Encoder *WebKit::WebProcess::gpuProcessConnectionClosed(WebKit::WebProcess *this, void *a2)
{
  uint64_t v3 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 24), a2);
  }
  uint64_t v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 15);
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  uint64_t v8 = *((void *)this + 15);
  if (v8) {
    uint64_t v9 = (void *)(v8 + 16 * *(unsigned int *)(v8 - 4));
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 != v4)
  {
    do
    {
      uint64_t v10 = v6[1];
      if (v10)
      {
        uint64_t v11 = *(void *)(v10 + 72);
        if (v11)
        {
          if (!*(unsigned char *)(v11 + 24)) {
            (*(void (**)(void))(**(void **)(*(void *)(v11 + 80) + 88) + 56))(*(void *)(*(void *)(v11 + 80) + 88));
          }
        }
      }
      while (1)
      {
        v6 += 2;
        if (v6 == v7) {
          break;
        }
        if ((unint64_t)(*v6 + 1) > 1) {
          goto LABEL_15;
        }
      }
      uint64_t v6 = v7;
LABEL_15:
      ;
    }
    while (v6 != v9);
  }
  uint64_t result = (IPC::Encoder *)*((void *)this + 45);
  if (result)
  {
    return WebKit::AudioMediaStreamTrackRendererInternalUnitManager::restartAllUnits(result, v5);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::WebProcessProxy::GPUProcessConnectionDidBecomeUnresponsive>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2603;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v20 = v10;
  uint64_t v11 = **a2;
  uint64_t v12 = (void *)IPC::Encoder::grow(v10, 8uLL, 8);
  if (v13 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    void *v12 = v11;
    uint64_t v15 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v20, a4, a5);
    unsigned int v16 = v20;
    uint64_t v20 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v14);
      WTF::fastFree(v18, v19);
    }
    return v15;
  }
  return result;
}

uint64_t *WebKit::WebProcess::audioMediaStreamTrackRendererInternalUnitManager(WebKit::WebProcess *this)
{
  uint64_t result = (uint64_t *)*((void *)this + 45);
  if (!result)
  {
    uint64_t v3 = (uint64_t **)((char *)this + 360);
    uint64_t v4 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    uint64_t *v4 = 0;
    uint64_t v5 = 0;
    std::unique_ptr<WebKit::AudioMediaStreamTrackRendererInternalUnitManager>::reset[abi:sn180100](v3, v4);
    std::unique_ptr<WebKit::AudioMediaStreamTrackRendererInternalUnitManager>::reset[abi:sn180100](&v5, 0);
    return *v3;
  }
  return result;
}

uint64_t WebKit::WebProcess::setEnhancedAccessibility(WebKit::WebProcess *this, WebCore::AXObjectCache *a2)
{
  return WebCore::AXObjectCache::setEnhancedUserInterfaceAccessibility(a2);
}

WebKit::WebMemorySampler *WebKit::WebProcess::startMemorySampler(WebKit::WebMemorySampler *a1, uint64_t *a2, WTF::StringImpl **a3, double a4)
{
  uint64_t v7 = (WebKit::WebMemorySampler *)WebKit::WebMemorySampler::singleton(a1);

  return WebKit::WebMemorySampler::start(v7, a2, a3, a4);
}

uint64_t WebKit::WebProcess::setTextCheckerState(uint64_t result, char a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    int v3 = 0;
    if ((a2 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    int v4 = (*(unsigned __int8 *)(result + 280) >> 1) & 1;
    goto LABEL_6;
  }
  int v3 = *(unsigned char *)(result + 280) & 1;
  if ((a2 & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  int v4 = 0;
LABEL_6:
  *(unsigned char *)(result + 280) = a2;
  if ((v3 | v4) == 1)
  {
    uint64_t result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(result + 120));
    uint64_t v5 = (void *)result;
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v2 + 120);
    uint64_t v9 = v8 ? v8 + 16 * *(unsigned int *)(v8 - 4) : 0;
    if (v9 != result)
    {
      do
      {
        if (v3) {
          uint64_t result = WebKit::WebPage::unmarkAllMisspellings(v5[1]);
        }
        if (v4) {
          uint64_t result = WebKit::WebPage::unmarkAllBadGrammar(v5[1]);
        }
        while (1)
        {
          v5 += 2;
          if (v5 == v7) {
            break;
          }
          if ((unint64_t)(*v5 + 1) > 1) {
            goto LABEL_19;
          }
        }
        uint64_t v5 = v7;
LABEL_19:
        ;
      }
      while (v5 != (void *)v9);
    }
  }
  return result;
}

uint64_t WebKit::WebProcess::fetchWebsiteData(WebCore::MemoryCache *a1, char a2, uint64_t *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v30 = 0;
  *(_OWORD *)uint64_t v28 = 0u;
  long long v29 = 0u;
  if ((a2 & 4) != 0)
  {
    WebCore::MemoryCache::singleton(a1);
    if (!*((unsigned char *)a1 + 672)) {
      __break(1u);
    }
    uint64_t result = WebCore::MemoryCache::originsWithCache();
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v7 = v27;
    if (!v27) {
      goto LABEL_31;
    }
    uint64_t v8 = *((unsigned int *)v27 - 3);
    if (v8)
    {
      if (v8 >= 0x5555556)
      {
        __break(0xC471u);
        return result;
      }
      LODWORD(v26) = 48 * (int)v8 / 0x30u;
      uint64_t v25 = (WTF *)WTF::fastMalloc((WTF *)(48 * v8));
      uint64_t v7 = v27;
      uint64_t v9 = v25;
    }
    else
    {
      uint64_t v9 = 0;
    }
    if (!*((_DWORD *)v7 - 3)) {
      goto LABEL_31;
    }
    uint64_t v10 = *((unsigned int *)v7 - 1);
    uint64_t v11 = v7;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      uint64_t v11 = v7;
      while ((unint64_t)(*v11 + 1) <= 1)
      {
        ++v11;
        v12 -= 8;
        if (!v12) {
          goto LABEL_31;
        }
      }
    }
    unint64_t v13 = &v7[v10];
    if (v13 != v11)
    {
      unsigned int v14 = 0;
LABEL_16:
      uint64_t v15 = *v11 + 8;
      v35[0] = 0;
      int v36 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v35, v15);
      v32[0] = 0;
      int v33 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v32, (uint64_t)v35);
      LODWORD(v34) = 4;
      *((void *)&v34 + 1) = 0;
      if (v36 != -1) {
        ((void (*)(char *, unsigned char *))off_1EE9E7020[v36])(&v31, v35);
      }
      uint64_t v16 = (uint64_t)v9 + 48 * v14;
      *(unsigned char *)uint64_t v16 = 0;
      *(_DWORD *)(v16 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v16, (uint64_t)v32);
      *(_OWORD *)(v16 + 32) = v34;
      if (v33 != -1) {
        ((void (*)(unsigned char *, unsigned char *))off_1EE9E7020[v33])(v35, v32);
      }
      ++v14;
      while (++v11 != v13)
      {
        if ((unint64_t)(*v11 + 1) > 1)
        {
          if (v11 != v13) {
            goto LABEL_16;
          }
          break;
        }
      }
      int v17 = v28[0];
      if (HIDWORD(v28[1]))
      {
        uint64_t v18 = 48 * HIDWORD(v28[1]);
        unsigned int v19 = v28[0];
        do
        {
          uint64_t v20 = *((unsigned int *)v19 + 6);
          if (v20 != -1) {
            ((void (*)(unsigned char *, WTF *))off_1EE9E7020[v20])(v32, v19);
          }
          *((_DWORD *)v19 + 6) = -1;
          unsigned int v19 = (WTF *)((char *)v19 + 48);
          v18 -= 48;
        }
        while (v18);
      }
      if (v17) {
        WTF::fastFree(v17, v6);
      }
    }
    else
    {
LABEL_31:
      unsigned int v14 = 0;
    }
    v28[0] = v25;
    unsigned int v21 = v26;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    v28[1] = (WTF *)__PAIR64__(v14, v21);
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v6);
    if (v27) {
      WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::deallocateTable(v27, v22);
    }
  }
  uint64_t v23 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v23 + 16))(v23, v28);
  (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  if (v30) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v24);
  }
  if (*((void *)&v29 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v29 + 1), v24);
  }
  if ((void)v29) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v29, v24);
  }
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v24);
}

uint64_t WebKit::WebProcess::deleteWebsiteData(WebCore::BackForwardCache *a1, char a2, uint64_t *a3)
{
  if ((a2 & 4) != 0)
  {
    WebCore::BackForwardCache::singleton(a1);
    uint64_t v5 = (WebCore::MemoryCache *)WebCore::BackForwardCache::pruneToSizeNow();
    uint64_t result = WebCore::MemoryCache::singleton(v5);
    if (!*((unsigned char *)a1 + 672))
    {
      __break(1u);
      return result;
    }
    uint64_t v7 = (WebCore::CrossOriginPreflightResultCache *)WebCore::MemoryCache::evictResources();
    uint64_t v8 = (WebCore::CrossOriginPreflightResultCache *)WebCore::CrossOriginPreflightResultCache::singleton(v7);
    WebCore::CrossOriginPreflightResultCache::clear(v8);
  }
  uint64_t v9 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);

  return v10(v9);
}

uint64_t WebKit::WebProcess::deleteAllCookies(uint64_t a1, uint64_t *a2)
{
  WebKit::WebCookieCache::clear((WebKit::WebCookieCache *)(*(void *)(a1 + 408) + 32));
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  int v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t WebKit::WebProcess::deleteWebsiteDataForOrigin(WebCore::MemoryCache *a1, char a2, uint64_t a3, uint64_t *a4)
{
  if ((a2 & 4) == 0) {
    goto LABEL_32;
  }
  uint64_t v6 = (WebCore::MemoryCache *)WebCore::MemoryCache::singleton(a1);
  WebCore::MemoryCache::removeResourcesWithOrigin(v6, (const WebCore::ClientOrigin *)a3);
  uint64_t v7 = (WebCore::BackForwardCache *)WebCore::operator==();
  if (!v7) {
    goto LABEL_32;
  }
  WebCore::BackForwardCache::singleton(v7);
  WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v26, (WebCore::SecurityOriginData *)(a3 + 32));
  uint64_t v8 = v26;
  uint64_t v26 = 0;
  int v27 = 0;
  WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::expand((uint64_t *)&v27);
  uint64_t v9 = v27;
  if (v27) {
    int v10 = *((_DWORD *)v27 - 2);
  }
  else {
    int v10 = 0;
  }
  int v28 = -1640531527;
  __int16 v29 = 0;
  char v30 = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v28, (uint64_t)v8 + 8);
  unsigned int v11 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v28);
  unint64_t v13 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v15 = v11 & v10;
    uint64_t v16 = (WebCore::SecurityOrigin **)&v9[v11 & v10];
    int v17 = *v16;
    if (*v16 == (WebCore::SecurityOrigin *)-1)
    {
      unint64_t v13 = (WebCore::SecurityOrigin **)&v9[v15];
      goto LABEL_13;
    }
    if (!v17) {
      break;
    }
    if (v8 && (WebCore::SecurityOrigin::isSameSchemeHostPort(v17, v8) & 1) != 0) {
      goto LABEL_26;
    }
LABEL_13:
    unsigned int v11 = i + v15;
  }
  if (v13)
  {
    int v17 = 0;
    uint64_t *v13 = 0;
    --*((_DWORD *)v27 - 4);
    uint64_t v16 = v13;
  }
  if (v8)
  {
    atomic_fetch_add((atomic_uint *volatile)v8, 1u);
    int v17 = *v16;
  }
  *uint64_t v16 = v8;
  if (v17) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v17, v12);
  }
  uint64_t v18 = v27;
  if (v27) {
    int v19 = *((_DWORD *)v27 - 3) + 1;
  }
  else {
    int v19 = 1;
  }
  *((_DWORD *)v27 - 3) = v19;
  uint64_t v20 = (*((_DWORD *)v18 - 4) + v19);
  unint64_t v21 = *((unsigned int *)v18 - 1);
  if (v21 > 0x400)
  {
    if (v21 <= 2 * v20) {
LABEL_25:
    }
      WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::expand((uint64_t *)&v27);
  }
  else if (3 * v21 <= 4 * v20)
  {
    goto LABEL_25;
  }
LABEL_26:
  WebCore::BackForwardCache::clearEntriesForOrigins();
  if (v27) {
    WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::deallocateTable(v27, v22);
  }
  if (v8) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v8, v22);
  }
  uint64_t v23 = v26;
  uint64_t v26 = 0;
  if (v23) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v23, v22);
  }
LABEL_32:
  uint64_t v24 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
  return (*(uint64_t (**)(uint64_t))(*(void *)v24 + 8))(v24);
}

uint64_t WebKit::WebProcess::reloadExecutionContextsForOrigin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 120));
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(a1 + 120);
  if (v10) {
    unsigned int v11 = (void *)(v10 + 16 * *(unsigned int *)(v10 - 4));
  }
  else {
    unsigned int v11 = 0;
  }
  if (v11 != v6)
  {
    do
    {
      if (*(void *)(v7[1] + 48)) {
        WebCore::Page::reloadExecutionContextsForOrigin();
      }
      while (1)
      {
        v7 += 2;
        if (v7 == v9) {
          break;
        }
        if ((unint64_t)(*v7 + 1) > 1) {
          goto LABEL_11;
        }
      }
      uint64_t v7 = v9;
LABEL_11:
      ;
    }
    while (v7 != v11);
  }
  uint64_t v12 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
  return (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
}

uint64_t WebKit::WebProcess::deleteWebsiteDataForOrigins(WebCore::MemoryCache *a1, char a2, uint64_t a3, void *a4)
{
  if ((a2 & 4) == 0) {
    goto LABEL_35;
  }
  uint64_t v25 = a4;
  uint64_t v26 = a1;
  int v28 = 0;
  uint64_t v4 = *(unsigned int *)(a3 + 12);
  if (!v4) {
    goto LABEL_31;
  }
  uint64_t v5 = *(WebCore::SecurityOriginData **)a3;
  uint64_t v6 = *(void *)a3 + 32 * v4;
  do
  {
    WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v27, v5);
    uint64_t v7 = v27;
    uint64_t v8 = v28;
    int v27 = 0;
    if (v28
      || (WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::expand((uint64_t *)&v28),
          (uint64_t v8 = v28) != 0))
    {
      int v9 = *((_DWORD *)v8 - 2);
    }
    else
    {
      int v9 = 0;
    }
    int v29 = -1640531527;
    __int16 v30 = 0;
    char v31 = 0;
    WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v29, (uint64_t)v7 + 8);
    unsigned int v10 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
    uint64_t v12 = 0;
    for (int i = 1; ; ++i)
    {
      unsigned int v14 = v10 & v9;
      unsigned int v15 = (WebCore::SecurityOrigin **)&v8[v10 & v9];
      uint64_t v16 = *v15;
      if (*v15 == (WebCore::SecurityOrigin *)-1)
      {
        uint64_t v12 = (WTF **)&v8[v14];
        goto LABEL_14;
      }
      if (!v16) {
        break;
      }
      if (v7 && (WebCore::SecurityOrigin::isSameSchemeHostPort(v16, v7) & 1) != 0)
      {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v7, v11);
        goto LABEL_24;
      }
LABEL_14:
      unsigned int v10 = i + v14;
    }
    if (v12)
    {
      WTF::StringImpl *v12 = 0;
      --*((_DWORD *)v28 - 4);
      WTF::StringImpl *v12 = v7;
    }
    else
    {
      *unsigned int v15 = v7;
    }
    int v17 = v28;
    if (v28) {
      int v18 = *((_DWORD *)v28 - 3) + 1;
    }
    else {
      int v18 = 1;
    }
    *((_DWORD *)v28 - 3) = v18;
    uint64_t v19 = (*((_DWORD *)v17 - 4) + v18);
    unint64_t v20 = *((unsigned int *)v17 - 1);
    if (v20 > 0x400)
    {
      if (v20 <= 2 * v19) {
LABEL_23:
      }
        WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::expand((uint64_t *)&v28);
    }
    else if (3 * v20 <= 4 * v19)
    {
      goto LABEL_23;
    }
LABEL_24:
    a1 = v27;
    int v27 = 0;
    if (a1) {
      a1 = (WebCore::MemoryCache *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)a1, v11);
    }
    uint64_t v5 = (WebCore::SecurityOriginData *)((char *)v5 + 32);
  }
  while (v5 != (WebCore::SecurityOriginData *)v6);
LABEL_31:
  uint64_t result = WebCore::MemoryCache::singleton(a1);
  if (*((unsigned char *)v26 + 672))
  {
    int v22 = (WebCore::BackForwardCache *)WebCore::MemoryCache::removeResourcesWithOrigins();
    WebCore::BackForwardCache::singleton(v22);
    WebCore::BackForwardCache::clearEntriesForOrigins();
    if (v28) {
      WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::deallocateTable(v28, v23);
    }
    a4 = v25;
LABEL_35:
    uint64_t v24 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
    return (*(uint64_t (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebKit::WebProcess::releaseMemory(uint64_t a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358348;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (*(unsigned char *)(a1 + 672)) {
      uint64_t v6 = *(void *)(a1 + 664);
    }
    else {
      uint64_t v6 = 0;
    }
    int v19 = 134218240;
    uint64_t v20 = a1;
    __int16 v21 = 2048;
    uint64_t v22 = v6;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::releaseMemory: BEGIN", (uint8_t *)&v19, 0x16u);
  }
  char v7 = *(unsigned char *)(a1 + 617);
  *(unsigned char *)(a1 + 617) = 0;
  WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)v5);
  WTF::MemoryPressureHandler::releaseMemory();
  uint64_t v8 = (atomic_uchar *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 120));
  unsigned int v10 = v8;
  unsigned int v11 = v9;
  uint64_t v12 = *(void *)(a1 + 120);
  if (v12) {
    unint64_t v13 = (atomic_uchar *)(v12 + 16 * *(unsigned int *)(v12 - 4));
  }
  else {
    unint64_t v13 = 0;
  }
  if (v13 != v8)
  {
    do
    {
      uint64_t v14 = *(void *)(*((void *)v10 + 1) + 2400);
      if (v14) {
        WebKit::RemoteResourceCacheProxy::releaseMemory((WebKit::RemoteRenderingBackendProxy **)(v14 + 72), v9);
      }
      while (1)
      {
        v10 += 16;
        if (v10 == v11) {
          break;
        }
        if ((unint64_t)(*(void *)v10 + 1) > 1) {
          goto LABEL_16;
        }
      }
      unsigned int v10 = v11;
LABEL_16:
      ;
    }
    while (v10 != v13);
  }
  unsigned int v15 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 672)) {
      uint64_t v16 = *(void *)(a1 + 664);
    }
    else {
      uint64_t v16 = 0;
    }
    int v19 = 134218240;
    uint64_t v20 = a1;
    __int16 v21 = 2048;
    uint64_t v22 = v16;
    _os_log_impl(&dword_1985F2000, v15, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::releaseMemory: END", (uint8_t *)&v19, 0x16u);
  }
  uint64_t v17 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
  *(unsigned char *)(a1 + 617) = v7;
  return result;
}

void *WebKit::WebProcess::suspendAllMediaBuffering(WebKit::WebProcess *this)
{
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 15);
  uint64_t v3 = (uint64_t)result;
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)this + 15);
  if (v6) {
    char v7 = (void *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  }
  else {
    char v7 = 0;
  }
  if (v7 != result)
  {
    do
    {
      uint64_t result = (void *)WebKit::WebPage::suspendAllMediaBuffering(*(WebKit::WebPage **)(v3 + 8));
      while (1)
      {
        v3 += 16;
        if (v3 == v5) {
          break;
        }
        if ((unint64_t)(*(void *)v3 + 1) > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v3 = v5;
LABEL_10:
      ;
    }
    while ((void *)v3 != v7);
  }
  return result;
}

void *WebKit::WebProcess::freezeAllLayerTrees(WebKit::WebProcess *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)this + 672)) {
      uint64_t v3 = *((void *)this + 83);
    }
    else {
      uint64_t v3 = 0;
    }
    int v10 = 134218240;
    unsigned int v11 = this;
    __int16 v12 = 2048;
    uint64_t v13 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::freezeAllLayerTrees: WebProcess is freezing all layer trees", (uint8_t *)&v10, 0x16u);
  }
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 15);
  uint64_t v5 = result;
  char v7 = v6;
  uint64_t v8 = *((void *)this + 15);
  if (v8) {
    int v9 = (void *)(v8 + 16 * *(unsigned int *)(v8 - 4));
  }
  else {
    int v9 = 0;
  }
  if (v9 != result)
  {
    do
    {
      uint64_t result = (void *)WebKit::WebPage::freezeLayerTree(v5[1], 4);
      while (1)
      {
        v5 += 2;
        if (v5 == v7) {
          break;
        }
        if ((unint64_t)(*v5 + 1) > 1) {
          goto LABEL_15;
        }
      }
      uint64_t v5 = v7;
LABEL_15:
      ;
    }
    while (v5 != v9);
  }
  return result;
}

unsigned int *WebKit::WebProcess::markAllLayersVolatile(uint64_t a1, uint64_t *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 672)) {
      uint64_t v5 = *(void *)(a1 + 664);
    }
    else {
      uint64_t v5 = 0;
    }
    *(_DWORD *)int v19 = 134218240;
    *(void *)&v19[4] = a1;
    __int16 v20 = 2048;
    uint64_t v21 = v5;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::markAllLayersVolatile:", v19, 0x16u);
  }
  uint64_t v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v6 = 1;
  uint64_t v7 = *a2;
  *a2 = 0;
  *(void *)(v6 + 8) = v7;
  uint64_t v8 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 120));
  int v9 = v8;
  unsigned int v11 = v10;
  __int16 v12 = 0;
  uint64_t v13 = *(void *)(a1 + 120);
  if (v13) {
    __int16 v12 = (void *)(v13 + 16 * *(unsigned int *)(v13 - 4));
  }
  if (v12 != v8)
  {
    do
    {
      uint64_t v15 = v9[1];
      atomic_fetch_add((atomic_uint *volatile)v6, 1u);
      uint64_t v16 = *(void *)(v9[1] + 40);
      uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x20);
      void *v17 = &unk_1EE9E71F8;
      v17[1] = a1;
      v17[2] = v6;
      v17[3] = v16;
      *(void *)int v19 = v17;
      WebKit::WebPage::markLayersVolatile(v15, (uint64_t *)v19);
      uint64_t v18 = *(void *)v19;
      *(void *)int v19 = 0;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
      while (1)
      {
        v9 += 2;
        if (v9 == v11) {
          break;
        }
        if ((unint64_t)(*v9 + 1) > 1) {
          goto LABEL_13;
        }
      }
      int v9 = v11;
LABEL_13:
      ;
    }
    while (v9 != v12);
  }
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v6);
}

WTF::StringImpl *WebKit::WebProcess::sendPrewarmInformation(WebKit::WebProcess *this, const WTF::URL *a2)
{
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v12, a2);
  uint64_t result = v12;
  if (v12)
  {
    if (*((_DWORD *)v12 + 1))
    {
      uint64_t v5 = (WebCore::ProcessWarming *)MEMORY[0x19972E990]();
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *((void *)this + 5);
        WebCore::ProcessWarming::collectPrewarmInformation(v9, v5);
        v11[0] = &v12;
        v11[1] = v9;
        IPC::Connection::send<Messages::WebProcessProxy::DidCollectPrewarmInformation>(v6, v11, 0, 0, 0);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v7);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v8);
      }
    }
    uint64_t result = v12;
    __int16 v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::WebProcessProxy::DidCollectPrewarmInformation>(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2593;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v14 = v10;
  IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::PrewarmInformation const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::PrewarmInformation const&>,0ul,1ul>(v10, a2);
  uint64_t v11 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v14, a4, a5);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v14, v12);
  return v11;
}

void WebKit::WebProcess::nonVisibleProcessEarlyMemoryCleanupTimerFired(WebKit::WebProcess *this)
{
  uint64_t v2 = *((void *)this + 64);
  if (!v2 || !*(_DWORD *)(v2 - 12))
  {
    uint64_t v3 = (void *)((char *)this + 120);
    uint64_t v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 15);
    uint64_t v6 = (void *)*((void *)this + 15);
    if (v6) {
      v6 += 2 * *((unsigned int *)v6 - 1);
    }
    if (v6 == v4)
    {
LABEL_12:
      uint64_t v7 = (WebCore::MemoryCache *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 15);
      uint64_t v8 = v7;
      uint64_t v10 = v9;
      if (*v3) {
        uint64_t v11 = *v3 + 16 * *(unsigned int *)(*v3 - 4);
      }
      else {
        uint64_t v11 = 0;
      }
      if ((WebCore::MemoryCache *)v11 != v7)
      {
        do
        {
          uint64_t v7 = (WebCore::MemoryCache *)WebKit::WebPage::willDestroyDecodedDataForAllImages(*((WebKit::WebPage **)v8 + 1));
          while (1)
          {
            uint64_t v8 = (WebCore::MemoryCache *)((char *)v8 + 16);
            if (v8 == v10) {
              break;
            }
            if ((unint64_t)(*(void *)v8 + 1) > 1) {
              goto LABEL_21;
            }
          }
          uint64_t v8 = v10;
LABEL_21:
          ;
        }
        while (v8 != (WebCore::MemoryCache *)v11);
      }
      __int16 v12 = (WebCore::MemoryCache *)WebCore::MemoryCache::singleton(v7);
      WebCore::MemoryCache::destroyDecodedDataForAllImages(v12);
    }
    else
    {
      while (!*(unsigned char *)(v4[1] + 113))
      {
        while (1)
        {
          v4 += 2;
          if (v4 == v5) {
            break;
          }
          if ((unint64_t)(*v4 + 1) > 1) {
            goto LABEL_11;
          }
        }
        uint64_t v4 = v5;
LABEL_11:
        if (v4 == v6) {
          goto LABEL_12;
        }
      }
    }
    WebKit::WebProcess::destroyRenderingResources(this);
  }
}

uint64_t WebKit::WebProcess::registerStorageAreaMap(WebKit::WebProcess *this, WebKit::StorageAreaMap *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::StorageAreaMap&>((uint64_t)&v3, (uint64_t *)this + 82, &v4, (uint64_t)a2);
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::StorageAreaMap&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v26 = a4;
  uint64_t v7 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (uint64_t v7 = *a2) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  uint64_t result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3);
  unsigned int v10 = result & v8;
  uint64_t v11 = (void *)(v7 + 16 * (result & v8));
  uint64_t v12 = *v11;
  uint64_t v13 = *a3;
  if (*v11)
  {
    uint64_t v22 = 0;
    int v23 = 1;
    do
    {
      if (v12 == v13)
      {
        uint64_t v24 = *a2;
        if (*a2) {
          uint64_t v25 = *(unsigned int *)(v24 - 4);
        }
        else {
          uint64_t v25 = 0;
        }
        char v21 = 0;
        uint64_t v20 = v24 + 16 * v25;
        goto LABEL_12;
      }
      if (v12 == -1) {
        uint64_t v22 = v11;
      }
      unsigned int v10 = (v10 + v23) & v8;
      uint64_t v11 = (void *)(v7 + 16 * v10);
      uint64_t v12 = *v11;
      ++v23;
    }
    while (*v11);
    if (v22)
    {
      *uint64_t v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v13 = *a3;
      uint64_t v11 = v22;
    }
  }
  uint64_t result = (uint64_t)WTF::HashMapTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::translate<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>> WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineAdd<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::StorageAreaMap&>(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::StorageAreaMap&)::{lambda(void)#1}>(v11, v13, &v26);
  uint64_t v14 = *a2;
  if (*a2) {
    int v15 = *(_DWORD *)(v14 - 12) + 1;
  }
  else {
    int v15 = 1;
  }
  *(_DWORD *)(v14 - 12) = v15;
  uint64_t v16 = *a2;
  if (*a2) {
    int v17 = *(_DWORD *)(v16 - 12);
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = (*(_DWORD *)(v16 - 16) + v17);
  unint64_t v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 > 2 * v18) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, v11);
    uint64_t v11 = (void *)result;
    uint64_t v16 = *a2;
    if (*a2) {
      unint64_t v19 = *(unsigned int *)(v16 - 4);
    }
    else {
      unint64_t v19 = 0;
    }
    goto LABEL_11;
  }
  if (3 * v19 <= 4 * v18) {
    goto LABEL_24;
  }
LABEL_11:
  uint64_t v20 = v16 + 16 * v19;
  char v21 = 1;
LABEL_12:
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v20;
  *(unsigned char *)(a1 + 16) = v21;
  return result;
}

unsigned int *WebKit::WebProcess::unregisterStorageAreaMap(WebKit::WebProcess *this, WebKit::StorageAreaMap *a2)
{
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v3 = (uint64_t *)((char *)this + 656);
  uint64_t result = (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 82, &v7);
  uint64_t v5 = *((void *)this + 82);
  if (v5)
  {
    uint64_t v6 = (unsigned int *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (v6 != result) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, result);
  }
  return result;
}

WTF::StringImpl *WebKit::WebProcess::clearResourceLoadStatistics(WebKit::WebProcess *this)
{
  uint64_t v2 = WebCore::ResourceLoadObserver::sharedIfExists(this);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 104))(v2);
  }
  uint64_t result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 15);
  uint64_t v5 = result;
  uint64_t v6 = v4;
  uint64_t v7 = *((void *)this + 15);
  if (v7) {
    int v8 = (WTF::StringImpl *)(v7 + 16 * *(unsigned int *)(v7 - 4));
  }
  else {
    int v8 = 0;
  }
  if (v8 != result)
  {
    do
    {
      uint64_t v9 = *((void *)v5 + 1);
      uint64_t result = *(WTF::StringImpl **)(v9 + 2216);
      if (result)
      {
        *(void *)(v9 + 2216) = 0;
        uint64_t result = (WTF::StringImpl *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable((uint64_t)result, v4);
      }
      while (1)
      {
        uint64_t v5 = (WTF::StringImpl *)((char *)v5 + 16);
        if (v5 == v6) {
          break;
        }
        if ((unint64_t)(*(void *)v5 + 1) > 1) {
          goto LABEL_13;
        }
      }
      uint64_t v5 = v6;
LABEL_13:
      ;
    }
    while (v5 != v8);
  }
  return result;
}

uint64_t WebKit::WebProcess::seedResourceLoadStatisticsForTesting(WebCore::ResourceLoadObserver *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = WebCore::ResourceLoadObserver::sharedIfExists(a1);
  if (v9) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 80))(v9, a2, a3, a4);
  }
  uint64_t v10 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
  uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);

  return v11(v10);
}

uint64_t WebKit::WebProcess::ensureAutomationSessionProxy(WebKit::WebProcess *this, const WTF::String *a2)
{
  uint64_t v4 = (WebKit::WebAutomationSessionProxy *)WTF::fastMalloc((WTF *)0x30);
  WebKit::WebAutomationSessionProxy::WebAutomationSessionProxy(v4, a2);
  uint64_t result = *((void *)this + 62);
  *((void *)this + 62) = v4;
  if (result)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v6();
  }
  return result;
}

uint64_t *WebKit::WebProcess::prefetchDNS(uint64_t *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  if (*a2 && *((_DWORD *)*a2 + 1))
  {
    uint64_t v4 = (WebKit::WebProcess *)this;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(this + 54, a2, a3, (uint64_t)v6);
    if (v7)
    {
      uint64_t v5 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection(v4) + 24);
      v6[0] = (uint64_t *)a2;
      IPC::Connection::send<Messages::NetworkConnectionToWebProcess::PrefetchDNS>(v5, v6, 0, 0, 0);
    }
    return (uint64_t *)PAL::HysteresisActivity::impulse((unsigned char *)v4 + 440);
  }
  return this;
}

uint64_t IPC::Connection::send<Messages::NetworkConnectionToWebProcess::PrefetchDNS>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 260;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  int v17 = v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, *a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  int v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t WebKit::WebProcess::clearCachedPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v10[0] = a2;
  v10[1] = a3;
  {
    WebKit::idToHistoryItemMap(void)::map = 0;
  }
  uint64_t v5 = (WebCore::BackForwardCache *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&WebKit::idToHistoryItemMap(void)::map, v10);
  if (v5)
  {
    uint64_t v6 = v5;
    char v7 = (WebCore::BackForwardCache *)WebCore::BackForwardCache::singleton(v5);
    WebCore::BackForwardCache::remove(v7, v6);
  }
  uint64_t v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
}

atomic_uchar *volatile **WebKit::WebProcess::establishRemoteWorkerContextConnectionToNetworkProcess(WebKit::WebProcess *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, WebKit::WebPage *a6, uint64_t *a7, long long *a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = WebKit::WebProcess::ensureNetworkProcessConnection(a1);
  uint64_t v18 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v29, *(atomic_uchar *volatile **)(v17 + 24));
  if (a2 == 2)
  {
    WebCore::SharedWorkerContextManager::singleton((WebCore::SharedWorkerContextManager *)v18);
    uint64_t v24 = WTF::fastMalloc((WTF *)0x90);
    *(void *)&v30[0] = WebKit::WebSharedWorkerContextManagerConnection::WebSharedWorkerContextManagerConnection(v24, (uint64_t *)&v29, a7, a3, a4, a5, a6, a9);
    WebCore::SharedWorkerContextManager::setConnection();
    uint64_t v25 = *(WebCore::SharedWorkerContextManager **)&v30[0];
    *(void *)&v30[0] = 0;
    if (v25) {
      uint64_t v25 = (WebCore::SharedWorkerContextManager *)(*(uint64_t (**)(WebCore::SharedWorkerContextManager *))(*(void *)v25 + 8))(v25);
    }
    uint64_t v26 = (WebCore::SharedWorkerContextManager *)WebCore::SharedWorkerContextManager::singleton(v25);
    uint64_t v27 = WebCore::SharedWorkerContextManager::connection(v26);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, a10);
  }
  else if (a2 == 1)
  {
    WebCore::SWContextManager::singleton((WebCore::SWContextManager *)v18);
    long long v19 = a8[1];
    v30[0] = *a8;
    v30[1] = v19;
    v30[2] = a8[2];
    uint64_t v20 = WTF::fastMalloc((WTF *)0x110);
    *(void *)&v30[0] = WebKit::WebSWContextManagerConnection::WebSWContextManagerConnection(v20, (uint64_t *)&v29, a7, v30, a3, a4, a5, a6, a9);
    WebCore::SWContextManager::setConnection();
    char v21 = *(WebCore::SWContextManager **)&v30[0];
    *(void *)&v30[0] = 0;
    if (v21) {
      char v21 = (WebCore::SWContextManager *)(*(uint64_t (**)(WebCore::SWContextManager *))(*(void *)v21 + 184))(v21);
    }
    uint64_t v22 = (WebCore::SWContextManager *)WebCore::SWContextManager::singleton(v21);
    uint64_t v23 = WebCore::SWContextManager::connection(v22);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, a10);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v29);
}

uint64_t WebKit::WebProcess::removeServiceWorkerRegistration(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 648);
  uint64_t v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 648), &v11);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 648);
  if (v6) {
    uint64_t v7 = v6 + 16 * *(unsigned int *)(v6 - 4);
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 == v4) {
    return 0;
  }
  int v8 = *(_DWORD *)(v4 + 8) - 1;
  if (*(_DWORD *)(v4 + 8) != 1)
  {
    uint64_t result = 0;
    *(_DWORD *)(v5 + 8) = v8;
    return result;
  }
  if (v6)
  {
    uint64_t v10 = v6 + 16 * *(unsigned int *)(v6 - 4);
    if (v10 == v4) {
      return 1;
    }
LABEL_13:
    if (v10 != v4) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, (void *)v4);
    }
    return 1;
  }
  if (v4)
  {
    uint64_t v10 = 0;
    goto LABEL_13;
  }
  return 1;
}

uint64_t WebKit::WebProcess::grantUserMediaDeviceSandboxExtensions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a2 + 12)) {
    goto LABEL_57;
  }
  unint64_t v4 = 0;
  uint64_t v5 = (uint64_t *)(a1 + 624);
  uint64_t v39 = (uint64_t *)(a1 + 624);
  do
  {
    WebKit::MediaDeviceSandboxExtensions::operator[]((uint64_t *)a2, v4, &v41);
    uint64_t v6 = v42;
    uint64_t v7 = *(void *)(v42 + 16);
    *(void *)(v42 + 16) = v7 + 1;
    if (!v7) {
      WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(v6 + 8));
    }
    int v8 = qword_1EB358820;
    if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(unsigned char *)(v3 + 672) ? *(void *)(v3 + 664) : 0;
      WTF::String::utf8();
      uint64_t v11 = v40 ? (uint64_t)v40 + 16 : 0;
      *(_DWORD *)buf = 134218498;
      uint64_t v44 = v3;
      __int16 v45 = 2048;
      uint64_t v46 = v10;
      __int16 v47 = 2080;
      uint64_t v48 = v11;
      _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::grantUserMediaDeviceSandboxExtensions: granted extension %s", buf, 0x20u);
      uint64_t v13 = v40;
      uint64_t v40 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1) {
          WTF::fastFree(v13, v12);
        }
        else {
          --*(_DWORD *)v13;
        }
      }
    }
    uint64_t v14 = (const char ***)v42;
    if (v42) {
      ++*(_DWORD *)v42;
    }
    uint64_t v15 = v3;
    uint64_t v16 = *v5;
    if (*v5
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v5),
          (uint64_t v16 = *v5) != 0))
    {
      int v17 = *(_DWORD *)(v16 - 8);
    }
    else
    {
      int v17 = 0;
    }
    unsigned int v18 = *((_DWORD *)v41 + 4);
    if (v18 >= 0x100) {
      unsigned int v19 = v18 >> 8;
    }
    else {
      unsigned int v19 = WTF::StringImpl::hashSlowCase(v41);
    }
    uint64_t v20 = 0;
    for (int i = 1; ; ++i)
    {
      unsigned int v22 = v19 & v17;
      uint64_t v23 = (uint64_t *)(v16 + 16 * (v19 & v17));
      uint64_t v24 = (WTF *)*v23;
      if (*v23 == -1)
      {
        uint64_t v20 = (uint64_t *)(v16 + 16 * v22);
        goto LABEL_30;
      }
      if (!v24)
      {
        uint64_t v5 = v39;
        if (v20)
        {
          *uint64_t v20 = 0;
          v20[1] = 0;
          --*(_DWORD *)(*v39 - 16);
          uint64_t v23 = v20;
        }
        WTF::String::operator=(v23, &v41);
        uint64_t v26 = (const char ***)v23[1];
        v23[1] = (uint64_t)v14;
        uint64_t v3 = v15;
        if (v26) {
          WTF::RefCounted<WebKit::SandboxExtension>::deref(v26);
        }
        uint64_t v27 = *v39;
        if (*v39) {
          int v28 = *(_DWORD *)(v27 - 12) + 1;
        }
        else {
          int v28 = 1;
        }
        *(_DWORD *)(v27 - 12) = v28;
        uint64_t v29 = *v39;
        if (*v39) {
          int v30 = *(_DWORD *)(v29 - 12);
        }
        else {
          int v30 = 0;
        }
        uint64_t v31 = (*(_DWORD *)(v29 - 16) + v30);
        unint64_t v32 = *(unsigned int *)(v29 - 4);
        if (v32 > 0x400)
        {
          if (v32 > 2 * v31) {
            goto LABEL_46;
          }
        }
        else if (3 * v32 > 4 * v31)
        {
          goto LABEL_46;
        }
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v39);
        goto LABEL_46;
      }
      if (WTF::equal(v24, v41, v9)) {
        break;
      }
LABEL_30:
      unsigned int v19 = i + v22;
    }
    uint64_t v3 = v15;
    uint64_t v5 = v39;
    if (v14) {
      WTF::RefCounted<WebKit::SandboxExtension>::deref(v14);
    }
LABEL_46:
    int v33 = (const char ***)v42;
    uint64_t v42 = 0;
    if (v33) {
      WTF::RefCounted<WebKit::SandboxExtension>::deref(v33);
    }
    long long v34 = v41;
    int v41 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, v25);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
    ++v4;
  }
  while (v4 < *(unsigned int *)(a2 + 12));
LABEL_57:
  if (*(void *)(a2 + 32))
  {
    uint64_t result = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t result = 1;
    uint64_t v36 = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    *(void *)(result + 8) = v36;
    *(void *)(result + 16) = 0;
  }
  else
  {
    uint64_t result = 0;
  }
  uint64_t v37 = *(const char ****)(v3 + 632);
  *(void *)(v3 + 632) = result;
  if (v37)
  {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v37);
    uint64_t result = *(void *)(v3 + 632);
  }
  if (result)
  {
    uint64_t v38 = *(void *)(result + 16);
    *(void *)(result + 16) = v38 + 1;
    if (!v38) {
      return WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(result + 8));
    }
  }
  return result;
}

uint64_t WebKit::WebProcess::revokeUserMediaDeviceSandboxExtensions(uint64_t result, unsigned int *a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = result;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[3];
  if (v4)
  {
    uint64_t v5 = *(WTF::StringImpl ***)a2;
    uint64_t v6 = *(void *)a2 + 8 * v4;
    uint64_t v7 = (uint64_t *)(result + 624);
    do
    {
      uint64_t v8 = *v7;
      if (*v7)
      {
        int v9 = *(_DWORD *)(v8 - 8);
        unsigned int v10 = *((_DWORD *)*v5 + 4);
        if (v10 >= 0x100) {
          unsigned int v11 = v10 >> 8;
        }
        else {
          unsigned int v11 = WTF::StringImpl::hashSlowCase(*v5);
        }
        for (i = 0; ; unsigned int v11 = i + v13)
        {
          uint64_t v13 = v11 & v9;
          uint64_t result = *(void *)(v8 + 16 * v13);
          if (result != -1)
          {
            if (!result)
            {
              uint64_t v14 = *v7;
              if (!*v7) {
                goto LABEL_44;
              }
              uint64_t v15 = v14 + 16 * *(unsigned int *)(v14 - 4);
              goto LABEL_15;
            }
            uint64_t result = WTF::equal((WTF *)result, *v5, a3);
            if (result) {
              break;
            }
          }
          ++i;
        }
        uint64_t v15 = v8 + 16 * v13;
        uint64_t v14 = *v7;
        if (!*v7) {
          goto LABEL_16;
        }
LABEL_15:
        v14 += 16 * *(unsigned int *)(v14 - 4);
LABEL_16:
        if (v14 != v15)
        {
          uint64_t v16 = *(void *)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          uint64_t v17 = *v7;
          if (!*v7 || (v17 += 16 * *(unsigned int *)(v17 - 4), v17 != v15))
          {
            if (v17 != v15)
            {
              WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)v15, (WTF::StringImpl *)a2);
              uint64_t result = *(void *)(v15 + 8);
              *(void *)(v15 + 8) = 0;
              if (result) {
                uint64_t result = (uint64_t)WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)result);
              }
              ++*(_DWORD *)(*v7 - 16);
              uint64_t v18 = *v7;
              if (*v7) {
                int v19 = *(_DWORD *)(v18 - 12) - 1;
              }
              else {
                int v19 = -1;
              }
              *(_DWORD *)(v18 - 12) = v19;
              uint64_t v20 = *v7;
              if (*v7)
              {
                unsigned int v21 = 6 * *(_DWORD *)(v20 - 12);
                unsigned int v22 = *(_DWORD *)(v20 - 4);
                if (v21 < v22 && v22 >= 9) {
                  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)(v3 + 624), v22 >> 1);
                }
              }
            }
          }
          if (v16)
          {
            uint64_t v23 = *(void *)(v16 + 16) - 1;
            *(void *)(v16 + 16) = v23;
            if (!v23)
            {
              *(void *)(*(void *)(v16 + 8) + 8) = 0;
              sandbox_extension_release();
            }
            uint64_t v24 = qword_1EB358820;
            if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v25 = *(unsigned char *)(v3 + 672) ? *(void *)(v3 + 664) : 0;
              WTF::String::utf8();
              uint64_t v26 = v31 ? (uint64_t)v31 + 16 : 0;
              *(_DWORD *)buf = 134218498;
              uint64_t v33 = v3;
              __int16 v34 = 2048;
              uint64_t v35 = v25;
              __int16 v36 = 2080;
              uint64_t v37 = v26;
              _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::revokeUserMediaDeviceSandboxExtensions: revoked extension %s", buf, 0x20u);
              int v28 = v31;
              uint64_t v31 = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 1) {
                  WTF::fastFree(v28, v27);
                }
                else {
                  --*(_DWORD *)v28;
                }
              }
            }
            uint64_t result = (uint64_t)WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v16);
          }
        }
      }
LABEL_44:
      ++v5;
    }
    while (v5 != (WTF::StringImpl **)v6);
  }
  uint64_t v29 = *(void *)(v3 + 632);
  if (v29)
  {
    uint64_t v30 = *(void *)(v29 + 16) - 1;
    *(void *)(v29 + 16) = v30;
    if (!v30)
    {
      *(void *)(*(void *)(v29 + 8) + 8) = 0;
      return sandbox_extension_release();
    }
  }
  return result;
}

uint64_t WebKit::WebProcess::setAppBadge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v14[0] = a2;
  v14[1] = a3;
  v13[0] = a5;
  v13[1] = a6;
  uint64_t result = WebCore::DeprecatedGlobalSettings::builtInNotificationsEnabled((WebCore::DeprecatedGlobalSettings *)a1);
  if (result)
  {
    if (*(unsigned char *)(a1 + 672))
    {
      uint64_t result = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)a1) + 24);
      unsigned int v10 = (void *)a4;
      unsigned int v11 = v13;
      if (*(unsigned char *)(a1 + 672)) {
        return IPC::Connection::send<Messages::NotificationManagerMessageHandler::SetAppBadge>(result, (uint64_t *)&v10, *(void *)(a1 + 664), 0, 0);
      }
      else {
        __break(1u);
      }
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 40);
    unsigned int v10 = v14;
    unsigned int v11 = (void *)a4;
    uint64_t v12 = v13;
    return IPC::Connection::send<Messages::WebProcessProxy::SetAppBadge>(v9, (uint64_t *)&v10, 0, 0, 0);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::NotificationManagerMessageHandler::SetAppBadge>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  unsigned int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v10 = 608;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v10, *a2);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(v10, a2[1]);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t IPC::Connection::send<Messages::WebProcessProxy::SetAppBadge>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  unsigned int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v10 = 2606;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::SecurityOriginData const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::SecurityOriginData const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>(v10, a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t IPC::Connection::send<Messages::WebProcessProxy::SetClientBadge>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unsigned int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v10 = 2609;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::SecurityOriginData const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::SecurityOriginData const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>(v10, a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t WebKit::WebProcess::setThirdPartyCookieBlockingMode(WebKit::WebProcess *a1, int a2, uint64_t *a3)
{
  if (*((unsigned __int8 *)a1 + 680) != a2)
  {
    *((unsigned char *)a1 + 680) = a2;
    if (a2) {
      WebKit::WebProcess::updateCachedCookiesEnabled(a1);
    }
  }
  uint64_t v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t *WebKit::WebProcess::updateCachedCookiesEnabled(WebKit::WebProcess *this)
{
  uint64_t result = WebCore::Document::allDocuments(&v7, this);
  uint64_t v2 = v8;
  uint64_t v3 = v10;
  if (v8 != v10)
  {
    uint64_t v4 = v9;
    do
    {
      uint64_t result = (uint64_t *)WebCore::Document::updateCachedCookiesEnabled(*(WebCore::Document **)(v2[4] + 8));
      while (1)
      {
        v2 += 6;
        if (v2 == v4) {
          break;
        }
        uint64_t v5 = v2[2];
        if (*v2 | v2[1] | v5) {
          BOOL v6 = v5 == -1;
        }
        else {
          BOOL v6 = 1;
        }
        if (!v6) {
          goto LABEL_11;
        }
      }
      uint64_t v2 = v4;
LABEL_11:
      ;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t WebKit::WebProcess::setDomainsWithUserInteraction(WebCore::ResourceLoadObserver *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)WebCore::ResourceLoadObserver::shared(a1) + 120);

  return v1();
}

uint64_t WebKit::WebProcess::setDomainsWithCrossPageStorageAccess(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  BOOL v6 = (WebCore::ResourceLoadObserver *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, (uint64_t)a2, a3);
  uint64_t v9 = v6;
  v21[0] = v6;
  v21[1] = v7;
  if (*a2) {
    uint64_t v10 = *a2 + 24 * *(unsigned int *)(*a2 - 4);
  }
  else {
    uint64_t v10 = 0;
  }
  if ((WebCore::ResourceLoadObserver *)v10 != v6)
  {
    unsigned int v11 = (void **)(a1 + 120);
    do
    {
      uint64_t v12 = *((unsigned int *)v9 + 5);
      if (v12)
      {
        uint64_t v13 = (WTF::StringImpl **)*((void *)v9 + 1);
        uint64_t v14 = &v13[v12];
        do
        {
          uint64_t v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v11);
          uint64_t v16 = v15;
          uint64_t v17 = v7;
          if (*v11) {
            uint64_t v18 = (uint64_t)&(*v11)[2 * *((unsigned int *)*v11 - 1)];
          }
          else {
            uint64_t v18 = 0;
          }
          if ((void *)v18 != v15)
          {
            do
            {
              WebKit::WebPage::addDomainWithPageLevelStorageAccess((WebKit::WebPage *)v16[1], (WTF::ASCIICaseInsensitiveHash **)v9, v13);
              while (1)
              {
                v16 += 2;
                if (v16 == (void *)v17) {
                  break;
                }
                if ((unint64_t)(*v16 + 1) > 1) {
                  goto LABEL_17;
                }
              }
              uint64_t v16 = (void *)v17;
LABEL_17:
              ;
            }
            while (v16 != (void *)v18);
          }
          ++v13;
        }
        while (v13 != v14);
        uint64_t v9 = (WebCore::ResourceLoadObserver *)v21[0];
      }
      v21[0] = (char *)v9 + 24;
      BOOL v6 = (WebCore::ResourceLoadObserver *)WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v21, v7, v8);
      uint64_t v9 = (WebCore::ResourceLoadObserver *)v21[0];
    }
    while (v21[0] != v10);
  }
  uint64_t v19 = WebCore::ResourceLoadObserver::shared(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t *, const WTF::StringImpl *))(*(void *)v19 + 128))(v19, a2, a3);
}

uint64_t WebKit::WebProcess::sendResourceLoadStatisticsDataImmediately(WebCore::ResourceLoadObserver *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)WebCore::ResourceLoadObserver::shared(a1) + 96);

  return v1();
}

uint64_t WebKit::WebProcess::ensureSpeechRecognitionRealtimeMediaSourceManager(WebKit::WebProcess *this)
{
  uint64_t result = *((void *)this + 96);
  if (!result)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v4, *((atomic_uchar *volatile **)this + 5));
    uint64_t v3 = (WebKit::SpeechRecognitionRealtimeMediaSourceManager *)WTF::fastMalloc((WTF *)0x40);
    WebKit::SpeechRecognitionRealtimeMediaSourceManager::SpeechRecognitionRealtimeMediaSourceManager((uint64_t)v3, (uint64_t *)&v4);
    std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager>::reset[abi:sn180100]((WebKit::SpeechRecognitionRealtimeMediaSourceManager **)this + 96, v3);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v4);
    return *((void *)this + 96);
  }
  return result;
}

uint64_t WebKit::WebProcess::networkProcessConnectionID(atomic_uchar *this)
{
  char v2 = 0;
  uint64_t v3 = this + 304;
  int v4 = 1;
  atomic_compare_exchange_strong_explicit(this + 304, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 304);
  }
  uint64_t v5 = *((void *)this + 39);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v5;
}

uint64_t WebKit::WebProcess::webTransportSession(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((atomic_uint **)(a1 + 800), &v8, (atomic_uint **)&v7);
  uint64_t v3 = (unsigned int *)v7;
  if (!v7) {
    return 0;
  }
  uint64_t v4 = *((void *)v7 + 1);
  if (v4) {
    uint64_t v5 = v4 - 24;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v7 = 0;
  if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }
  return v5;
}

uint64_t *WebKit::WebProcess::removeWebTransportSession(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 800);
  uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 800), &v7);
  uint64_t v5 = *(void *)(a1 + 800);
  if (v5)
  {
    BOOL v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    BOOL v6 = 0;
  }
  if (v6 != result) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, result);
  }
  return result;
}

void WebKit::WebSleepDisablerClient::didCreateSleepDisabler(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, IPC::Encoder *a5, char a6)
{
  uint64_t v19 = a2;
  if (a6)
  {
    {
      uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v18);
    }
    uint64_t v20 = a5;
    uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v20);
    if (v8)
    {
      uint64_t v9 = v8 + 32;
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 32) + 56))(v8 + 32);
      unsigned int v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unsigned int v11 = 1908;
      *((void *)v11 + 1) = v10;
      *((void *)v11 + 66) = (char *)v11 + 16;
      *((void *)v11 + 67) = 512;
      *((void *)v11 + 68) = 0;
      *((void *)v11 + 70) = 0;
      *((void *)v11 + 69) = 0;
      IPC::Encoder::encodeHeader(v11);
      uint64_t v20 = v11;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v19);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a3);
      uint64_t v12 = (unsigned char *)IPC::Encoder::grow(v11, 1uLL, 1);
      if (!v13)
      {
        __break(0xC471u);
        JUMPOUT(0x198FFAE1CLL);
      }
      unsigned char *v12 = a4;
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v9 + 32))(v9, &v20, 0);
      uint64_t v15 = v20;
      uint64_t v20 = 0;
      if (v15)
      {
        IPC::Encoder::~Encoder(v15, v14);
        WTF::fastFree(v16, v17);
      }
    }
  }
}

void WebKit::WebSleepDisablerClient::didDestroySleepDisabler(uint64_t a1, uint64_t a2, IPC::Encoder *a3, char a4)
{
  uint64_t v13 = a2;
  if (a4)
  {
    {
      uint64_t v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v12);
    }
    uint64_t v14 = a3;
    uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v14);
    if (v4)
    {
      uint64_t v5 = v4 + 32;
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(v4 + 32) + 56))(v4 + 32);
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 1911;
      *((void *)v7 + 1) = v6;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      uint64_t v14 = v7;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, &v13);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v14, 0);
      uint64_t v9 = v14;
      uint64_t v14 = 0;
      if (v9)
      {
        IPC::Encoder::~Encoder(v9, v8);
        WTF::fastFree(v10, v11);
      }
    }
  }
}

IPC::Encoder *WebKit::WebSystemSoundDelegate::systemBeep(WebKit::WebSystemSoundDelegate *this)
{
  {
    uint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  uint64_t v1 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  char v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v2 = 2611;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 66) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 68) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 69) = 0;
  IPC::Encoder::encodeHeader(v2);
  uint64_t v8 = v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

void WebKit::WebPaymentCoordinator::~WebPaymentCoordinator(WebKit::WebPaymentCoordinator *this)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  IPC::MessageReceiverMap::removeMessageReceiver((IPC::MessageReceiverMap *)(WebKit::WebProcess::singleton(void)::process + 48), (WebKit::WebPaymentCoordinator *)((char *)this + 8));
  if (*((unsigned char *)this + 48))
  {
    uint64_t v3 = (WTF::StringImpl **)*((void *)this + 5);
    if (v3) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, v2);
    }
  }
  *((void *)this + 1) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebPaymentCoordinator::~WebPaymentCoordinator(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::WebPaymentCoordinator::~WebPaymentCoordinator(WebKit::WebPaymentCoordinator *this)
{
}

{
  WebKit::WebPaymentCoordinator::~WebPaymentCoordinator((WebKit::WebPaymentCoordinator *)((char *)this - 24));
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebPaymentCoordinator::~WebPaymentCoordinator((WebKit::WebPaymentCoordinator *)((char *)this - 8));

  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebPaymentCoordinator::~WebPaymentCoordinator((WebKit::WebPaymentCoordinator *)((char *)this - 24));

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebPaymentCoordinator::didCancelPaymentSession()
{
  return WebCore::PaymentCoordinator::didCancelPaymentSession();
}

WTF::StringImpl **WebKit::WebPaymentCoordinator::validatedPaymentNetwork@<X0>(WebKit::WebPaymentCoordinator *this@<X0>, WTF::ASCIICaseInsensitiveHash **a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = (uint64_t *)((char *)this + 40);
  if (!*((unsigned char *)this + 48))
  {
    WebKit::WebPaymentCoordinator::platformAvailablePaymentNetworks(this, (uint64_t *)&v14);
    uint64_t v8 = v14;
    if (*((unsigned char *)this + 48))
    {
      uint64_t v14 = 0;
      uint64_t result = (WTF::StringImpl **)*v6;
      *uint64_t v6 = (uint64_t)v8;
      if (result)
      {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v7);
        uint64_t result = v14;
        if (v14) {
          uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, v10);
        }
      }
      if (!*((unsigned char *)this + 48)) {
        goto LABEL_18;
      }
    }
    else
    {
      *((void *)this + 5) = v14;
      *((unsigned char *)this + 48) = 1;
    }
  }
  uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(v6, a2);
  if (!*((unsigned char *)this + 48))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  uint64_t v11 = *v6;
  if (*v6) {
    v11 += 8 * *(unsigned int *)(v11 - 4);
  }
  if ((WTF::StringImpl **)v11 == result)
  {
    char v13 = 0;
    *a3 = 0;
  }
  else
  {
    uint64_t v12 = *result;
    if (*result) {
      *(_DWORD *)v12 += 2;
    }
    *(void *)a3 = v12;
    char v13 = 1;
  }
  a3[8] = v13;
  return result;
}

uint64_t WebKit::WebPaymentCoordinator::canMakePayments(WebKit::WebPaymentCoordinator *this)
{
  WTF::MonotonicTime::now(this);
  double v4 = v3;
  if (v3 - *((double *)this + 7) > 60.0 || !*((unsigned char *)this + 65))
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 56))((char *)this + 24);
    uint64_t result = (*(uint64_t (**)(char *))(*((void *)this + 3) + 48))((char *)this + 24);
    if (!result) {
      return result;
    }
    uint64_t v7 = result;
    uint64_t v22 = 0;
    IPC::Connection::createSyncMessageEncoder(3819, v5, &v22, &v21);
    IPC::Connection::sendSyncMessage(v7, v22, (uint64_t *)&v21, 0, (uint64_t)&v19, INFINITY);
    int v8 = v20;
    if (v20)
    {
      if (v20 == 1)
      {
        uint64_t v9 = v19;
        int v10 = 1;
LABEL_11:
        ((void (*)(__int16 *, uint64_t **))off_1EE9E6EE0[v8])(&v18, &v19);
LABEL_12:
        uint64_t v12 = v21;
        unsigned int v21 = 0;
        if (v12)
        {
          IPC::Encoder::~Encoder(v12, v11);
          WTF::fastFree(v13, v14);
          if (v10) {
            return 0;
          }
        }
        else if (v10)
        {
          return 0;
        }
        *((double *)this + 7) = v4;
        *((_WORD *)this + 32) = v1 | 0x100;
        if (v9)
        {
          IPC::Decoder::~Decoder((IPC::Decoder *)v9);
          WTF::fastFree(v15, v16);
          if (!*((unsigned char *)this + 65))
          {
            __break(1u);
            goto LABEL_21;
          }
        }
        return *((unsigned char *)this + 64) != 0;
      }
    }
    else
    {
      __int16 v18 = 0;
      IPC::Decoder::operator>><std::tuple<BOOL>>(v19, &v18);
      int v8 = v20;
      if (!HIBYTE(v18))
      {
        int v10 = 1;
        uint64_t v9 = 13;
        if (v20 == -1) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }
      if (!v20)
      {
        int v10 = 0;
        uint64_t v9 = (uint64_t)v19;
        uint64_t v19 = 0;
        unsigned __int8 v1 = v18;
        goto LABEL_11;
      }
    }
LABEL_21:
    uint64_t v17 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebPaymentCoordinator::canMakePaymentsWithActiveCard(v17);
  }
  return *((unsigned char *)this + 64) != 0;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::canMakePaymentsWithActiveCard(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = a1 + 24;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 2563;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  __int16 v18 = v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a3);
  uint64_t v10 = *a4;
  *a4 = 0;
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v11 = &unk_1EE9E7328;
  v11[1] = v10;
  v17[0] = v11;
  v17[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v7 + 40))(v7, &v18, v17, 0);
  uint64_t v13 = v17[0];
  v17[0] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t result = v18;
  __int16 v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::openPaymentSetup(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = a1 + 24;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 2573;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  __int16 v18 = v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a3);
  uint64_t v10 = *a4;
  *a4 = 0;
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v11 = &unk_1EE9E7350;
  v11[1] = v10;
  v17[0] = v11;
  v17[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v7 + 40))(v7, &v18, v17, 0);
  uint64_t v13 = v17[0];
  v17[0] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t result = v18;
  __int16 v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t WebKit::WebPaymentCoordinator::showPaymentUI(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = result;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v7 = *(unsigned int *)(a3 + 12);
  if (v7)
  {
    if (v7 >> 29) {
      goto LABEL_29;
    }
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
    LODWORD(v39) = v7;
    uint64_t v38 = v9;
    int v10 = *(_DWORD *)(a3 + 12);
    if (v10)
    {
      uint64_t v11 = *(_DWORD ***)a3;
      uint64_t v12 = *(unsigned int *)(a3 + 12);
      do
      {
        uint64_t v13 = *v11;
        if (*v11) {
          *v13 += 2;
        }
        *v9++ = v13;
        v11 += 5;
        --v12;
      }
      while (v12);
      HIDWORD(v39) = v10;
    }
  }
  uint64_t v14 = *(void *)(v6 + 32);
  uint64_t v15 = *(void *)(v14 + 40);
  uint64_t v33 = *(void *)(v14 + 2120);
  uint64_t v34 = v15;
  uint64_t v17 = *(void *)(v6 + 24);
  uint64_t v16 = v6 + 24;
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(v17 + 56))(v16);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 48))(v16);
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v44 = 0;
    IPC::Connection::createSyncMessageEncoder(3820, v18, &v44, &v43);
    unsigned int v21 = v43;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v43, &v34);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v21, &v33);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v21, a2);
    IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v21, (uint64_t)&v38);
    IPC::ArgumentCoder<WebCore::ApplePaySessionPaymentRequest,void>::encode(v21, a4);
    IPC::Connection::sendSyncMessage(v20, v44, (uint64_t *)&v43, 0, (uint64_t)&v41, INFINITY);
    if (v42)
    {
      if (v42 == 1)
      {
        int v22 = 0;
        LOBYTE(v35) = (_BYTE)v41;
        int v23 = 1;
        int v37 = 1;
        int v24 = 1;
LABEL_18:
        ((void (*)(__int16 *, uint64_t **))off_1EE9E6EE0[v24])(&v40, &v41);
LABEL_19:
        uint64_t v27 = v43;
        int v43 = 0;
        if (v27)
        {
          IPC::Encoder::~Encoder(v27, v25);
          WTF::fastFree(v31, v32);
        }
        goto LABEL_21;
      }
    }
    else
    {
      __int16 v40 = 0;
      IPC::Decoder::operator>><std::tuple<BOOL>>(v41, &v40);
      if (!HIBYTE(v40))
      {
        int v22 = 0;
        LOBYTE(v35) = 13;
        int v23 = 1;
        int v37 = 1;
        int v24 = v42;
        if (v42 == -1) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
      int v24 = v42;
      if (!v42)
      {
        int v23 = 0;
        uint64_t v26 = v41;
        int v41 = 0;
        int v22 = v40;
        uint64_t v35 = v26;
        char v36 = v40;
        int v37 = 0;
        goto LABEL_18;
      }
    }
    uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    __break(0xC471u);
    return result;
  }
  int v22 = 0;
  LOBYTE(v35) = 3;
  int v23 = 1;
  int v37 = 1;
LABEL_21:
  ((void (*)(uint64_t **, uint64_t **))off_1EE9E6F88[v23])(&v41, &v35);
  if (v23) {
    BOOL v29 = 1;
  }
  else {
    BOOL v29 = v22 == 0;
  }
  uint64_t v30 = !v29;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v28);
  return v30;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::completeMerchantValidation(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3 = a1 + 24;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2566;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v10 = v5;
  IPC::ArgumentCoder<WebCore::PaymentMerchantSession,void>::encode(v5, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v10, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::completeShippingMethodSelection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 24;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2570;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 632);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198FFBC18);
    }
    *uint64_t v6 = 1;
    if (!*(unsigned char *)(a2 + 632))
    {
      uint64_t v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)WebKit::WebPaymentCoordinator::completeShippingContactSelection(v12);
    }
    IPC::ArgumentCoder<WebCore::ApplePayShippingMethodUpdate,void>::encode(v5, a2);
  }
  else
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198FFBC38);
    }
    *uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v13, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::completeShippingContactSelection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 24;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2569;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 648);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198FFBD84);
    }
    *uint64_t v6 = 1;
    if (!*(unsigned char *)(a2 + 648))
    {
      uint64_t v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)WebKit::WebPaymentCoordinator::completePaymentMethodSelection(v12);
    }
    IPC::ArgumentCoder<WebCore::ApplePayShippingContactUpdate,void>::encode(v5, a2);
  }
  else
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198FFBDA4);
    }
    *uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v13, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::completePaymentMethodSelection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 24;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2567;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 656);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198FFBEF0);
    }
    *uint64_t v6 = 1;
    if (!*(unsigned char *)(a2 + 656))
    {
      uint64_t v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)WebKit::WebPaymentCoordinator::completeCouponCodeChange(v12);
    }
    IPC::ArgumentCoder<WebCore::ApplePayPaymentMethodUpdate,void>::encode(v5, a2);
  }
  else
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198FFBF10);
    }
    *uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v13, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::completeCouponCodeChange(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 24;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2565;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 648);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198FFC05CLL);
    }
    *uint64_t v6 = 1;
    if (!*(unsigned char *)(a2 + 648))
    {
      uint64_t v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)WebKit::WebPaymentCoordinator::completePaymentSession(v12);
    }
    IPC::ArgumentCoder<WebCore::ApplePayShippingContactUpdate,void>::encode(v5, a2);
  }
  else
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198FFC07CLL);
    }
    *uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v13, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::completePaymentSession(uint64_t a1, __int16 *a2)
{
  uint64_t v3 = a1 + 24;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2568;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v10 = v5;
  IPC::ArgumentCoder<WebCore::ApplePayPaymentAuthorizationResult,void>::encode(v5, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v10, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::abortPaymentSession(WebKit::WebPaymentCoordinator *this)
{
  unsigned __int8 v1 = (char *)this + 24;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 56))((char *)this + 24);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2561;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v1 + 32))(v1, &v8, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::cancelPaymentSession(WebKit::WebPaymentCoordinator *this)
{
  unsigned __int8 v1 = (char *)this + 24;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 56))((char *)this + 24);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2564;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v1 + 32))(v1, &v8, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t WebKit::WebPaymentCoordinator::messageSenderConnection(WebKit::WebPaymentCoordinator *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                   + 24);
}

uint64_t WebKit::WebPaymentCoordinator::messageSenderDestinationID(WebKit::WebPaymentCoordinator *this)
{
  return *(void *)(*((void *)this + 4) + 40);
}

uint64_t non-virtual thunk to'WebKit::WebPaymentCoordinator::messageSenderDestinationID(WebKit::WebPaymentCoordinator *this)
{
  return *(void *)(*((void *)this + 1) + 40);
}

WTF::StringImpl *WebKit::WebPaymentCoordinator::validateMerchant(WebKit::WebPaymentCoordinator *this, WTF::StringImpl **a2)
{
  WTF::URL::URL((uint64_t)&v4, a2);
  WebCore::PaymentCoordinator::validateMerchant();
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebPaymentCoordinator::didAuthorizePayment(uint64_t a1)
{
  return MEMORY[0x1F416F2B0](*(void *)(*(void *)(*(void *)(a1 + 32) + 48) + 1240));
}

uint64_t WebKit::WebPaymentCoordinator::didSelectShippingMethod(uint64_t a1)
{
  return MEMORY[0x1F416F2D0](*(void *)(*(void *)(*(void *)(a1 + 32) + 48) + 1240));
}

uint64_t WebKit::WebPaymentCoordinator::didSelectShippingContact(uint64_t a1)
{
  return MEMORY[0x1F416F2D8](*(void *)(*(void *)(*(void *)(a1 + 32) + 48) + 1240));
}

uint64_t WebKit::WebPaymentCoordinator::didSelectPaymentMethod(uint64_t a1)
{
  return MEMORY[0x1F416F2C0](*(void *)(*(void *)(*(void *)(a1 + 32) + 48) + 1240));
}

uint64_t WebKit::WebPaymentCoordinator::didChangeCouponCode(uint64_t a1)
{
  return MEMORY[0x1F416F2B8](*(void *)(*(void *)(*(void *)(a1 + 32) + 48) + 1240));
}

WTF::StringImpl *WebKit::WebPaymentCoordinator::getSetupFeatures(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a1 + 32) + 32;
  WebCore::ApplePaySetupConfiguration::ApplePaySetupConfiguration(&v24, a2);
  uint64_t v7 = *(WTF::StringImpl **)a3;
  if (*(void *)a3) {
    *(_DWORD *)v7 += 2;
  }
  int v28 = v7;
  long long v8 = *(_OWORD *)(a3 + 24);
  long long v29 = *(_OWORD *)(a3 + 8);
  long long v30 = v8;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6);
  int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v10 = 2572;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  unint64_t v32 = v10;
  IPC::ArgumentCoder<WebCore::ApplePaySetupConfiguration,void>::encode(v10, (uint64_t *)&v24);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)&v28);
  uint64_t v11 = *a4;
  *a4 = 0;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v12 = &unk_1EE9E7378;
  v12[1] = v11;
  uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v31[0] = v12;
  v31[1] = v13;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v6 + 40))(v6, &v32, v31, 0);
  uint64_t v15 = v31[0];
  v31[0] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v32;
  unint64_t v32 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v14);
    WTF::fastFree(v22, v23);
  }
  uint64_t v17 = v28;
  int v28 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v14);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v14);
  uint64_t v19 = v26;
  uint64_t v26 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v18);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t v20 = v25;
  uint64_t v25 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v18);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t result = v24;
  int v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebPaymentCoordinator::beginApplePaySetup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = *(void *)(a1 + 32) + 32;
  WebCore::ApplePaySetupConfiguration::ApplePaySetupConfiguration(&v28, a2);
  uint64_t v9 = *(WTF::StringImpl **)a3;
  if (*(void *)a3) {
    *(_DWORD *)v9 += 2;
  }
  unint64_t v32 = v9;
  long long v10 = *(_OWORD *)(a3 + 24);
  long long v33 = *(_OWORD *)(a3 + 8);
  long long v34 = v10;
  WebKit::PaymentSetupFeatures::PaymentSetupFeatures(&cf, a4);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 56))(v8);
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2562;
  *((void *)v12 + 1) = v11;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  char v36 = v12;
  IPC::ArgumentCoder<WebCore::ApplePaySetupConfiguration,void>::encode(v12, (uint64_t *)&v28);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, (uint64_t *)&v32);
  IPC::encodeObjectDirectly<NSArray>(v12, (NSArray *)cf);
  uint64_t v13 = *a5;
  *a5 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v14 = &unk_1EE9E73A0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v35[0] = v14;
  v35[1] = v15;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v8 + 40))(v8, &v36, v35, 0);
  uint64_t v17 = v35[0];
  v35[0] = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = v36;
  char v36 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v16);
    WTF::fastFree(v25, v26);
  }
  CFTypeRef v19 = cf;
  CFTypeRef cf = 0;
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = v32;
  unint64_t v32 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v16);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v16);
  int v22 = v30;
  long long v30 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v21);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  int v23 = v29;
  long long v29 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v21);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  uint64_t result = v28;
  int v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::endApplePaySetup(WebKit::WebPaymentCoordinator *this)
{
  unsigned __int8 v1 = (void *)*((void *)this + 4);
  uint64_t v2 = v1[4];
  v1 += 4;
  uint64_t v3 = (*(uint64_t (**)(void *))(v2 + 56))(v1);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2571;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  (*(void (**)(void *, IPC::Encoder **, void))(*v1 + 32))(v1, &v9, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::WebAutomationDOMWindowObserver::WebAutomationDOMWindowObserver(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)a1 = &unk_1EE9E6928;
  *(void *)(a1 + 8) = 0;
  WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unsigned int *)(a2 + 16), a2);
  uint64_t v6 = (atomic_uint *)(*(void *)(a2 + 16) & 0xFFFFFFFFFFFFLL);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v7 = *a3;
  *a3 = 0;
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8) {
    uint64_t v9 = *(WebCore::LocalDOMWindow **)(v8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  WebCore::LocalDOMWindow::registerObserver(v9, (WebCore::LocalDOMWindowObserver *)a1);
  return a1;
}

void WebKit::WebAutomationDOMWindowObserver::~WebAutomationDOMWindowObserver(WebKit::WebAutomationDOMWindowObserver *this, void *a2)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    uint64_t v4 = *(WebCore::LocalDOMWindow **)(v3 + 8);
    if (v4) {
      WebCore::LocalDOMWindow::unregisterObserver(v4, this);
    }
  }
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6) {
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v6, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebAutomationDOMWindowObserver::~WebAutomationDOMWindowObserver(this, a2);

  WTF::fastFree(v2, v3);
}

_DWORD *WebKit::WebAutomationDOMWindowObserver::willDestroyGlobalObjectInCachedFrame(WebKit::WebAutomationDOMWindowObserver *this, void *a2)
{
  uint64_t v3 = (_DWORD *)((char *)this + 16);
  ++*((_DWORD *)this + 4);
  if (!*((unsigned char *)this + 32)) {
    (*(void (**)(void, WebKit::WebAutomationDOMWindowObserver *))(**((void **)this + 5) + 16))(*((void *)this + 5), this);
  }
  uint64_t v4 = *((void *)this + 3);
  if (!v4)
  {
    *((void *)this + 3) = 0;
    goto LABEL_10;
  }
  if (!*(void *)(v4 + 8))
  {
    *((void *)this + 3) = 0;
    goto LABEL_9;
  }
  WebCore::LocalDOMWindow::unregisterObserver(*(WebCore::LocalDOMWindow **)(v4 + 8), this);
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
LABEL_9:
  }
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref((unsigned int *)v4, a2);
LABEL_10:

  return WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref(v3, a2);
}

_DWORD *WebKit::WebAutomationDOMWindowObserver::willDestroyGlobalObjectInFrame(WebKit::WebAutomationDOMWindowObserver *this, void *a2)
{
  uint64_t v3 = (_DWORD *)((char *)this + 16);
  ++*((_DWORD *)this + 4);
  if (!*((unsigned char *)this + 32)) {
    (*(void (**)(void, WebKit::WebAutomationDOMWindowObserver *))(**((void **)this + 5) + 16))(*((void *)this + 5), this);
  }
  uint64_t v4 = *((void *)this + 3);
  if (!v4)
  {
    *((void *)this + 3) = 0;
    goto LABEL_10;
  }
  if (!*(void *)(v4 + 8))
  {
    *((void *)this + 3) = 0;
    goto LABEL_9;
  }
  WebCore::LocalDOMWindow::unregisterObserver(*(WebCore::LocalDOMWindow **)(v4 + 8), this);
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
LABEL_9:
  }
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref((unsigned int *)v4, a2);
LABEL_10:

  return WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref(v3, a2);
}

_DWORD *WebKit::WebAutomationDOMWindowObserver::willDetachGlobalObjectFromFrame(WebKit::WebAutomationDOMWindowObserver *this)
{
  uint64_t v2 = (_DWORD *)((char *)this + 16);
  ++*((_DWORD *)this + 4);
  *((unsigned char *)this + 32) = 1;
  (*(void (**)(void, WebKit::WebAutomationDOMWindowObserver *))(**((void **)this + 5) + 16))(*((void *)this + 5), this);
  uint64_t v4 = *((void *)this + 3);
  if (!v4)
  {
    *((void *)this + 3) = 0;
    goto LABEL_8;
  }
  if (!*(void *)(v4 + 8))
  {
    *((void *)this + 3) = 0;
    goto LABEL_7;
  }
  WebCore::LocalDOMWindow::unregisterObserver(*(WebCore::LocalDOMWindow **)(v4 + 8), this);
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
LABEL_7:
  }
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref((unsigned int *)v4, v3);
LABEL_8:

  return WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref(v2, v3);
}

void WebKit::WebCacheStorageConnection::~WebCacheStorageConnection(WebKit::WebCacheStorageConnection *this, void *a2)
{
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,unsigned int,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v5 = (atomic_uchar *volatile *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5)
  {
    char v6 = 0;
    atomic_uchar *volatile v7 = *v5;
    atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      MEMORY[0x19972E8D0](v7);
    }
    uint64_t v8 = *((void *)v7 + 1);
    uint64_t v9 = v8 - 1;
    *((void *)v7 + 1) = v8 - 1;
    if (v8 == 1)
    {
      uint64_t v15 = *((void *)v7 + 2);
      uint64_t v11 = *((void *)v7 + 3);
      *((void *)v7 + 3) = 0;
      BOOL v10 = v15 == 0;
    }
    else
    {
      BOOL v10 = 0;
      uint64_t v11 = 0;
    }
    int v12 = 1;
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 == 1)
    {
      if (v9) {
        goto LABEL_14;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (v9) {
        goto LABEL_14;
      }
    }
    uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v13 = &unk_1EE9B37E8;
    *(void *)(v13 + 8) = v7;
    *(void *)(v13 + 16) = v11;
    *(unsigned char *)(v13 + 24) = v10;
    uint64_t v16 = v13;
    WTF::ensureOnMainRunLoop();
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
LABEL_14:
  *(void *)this = &unk_1EE9E6FA8;
  uint64_t v14 = *((void *)this + 2);
  if (v14) {
    WTF::fastFree((WTF *)(v14 - 16), a2);
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebCacheStorageConnection::~WebCacheStorageConnection(this, a2);

  WTF::fastFree(v2, v3);
}

atomic_uchar *volatile **WebKit::WebCacheStorageConnection::connection(atomic_uchar *volatile **this, uint64_t a2)
{
  uint64_t v3 = this;
  char v4 = 0;
  uint64_t v5 = (atomic_uchar *)(a2 + 24);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 24), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    this = (atomic_uchar *volatile **)MEMORY[0x19972E8D0](a2 + 24);
  }
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6) {
    this = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v3, *(atomic_uchar *volatile **)(a2 + 32));
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *volatile **)WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v6) {
      return this;
    }
  }
  BOOL v10 = 0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E73C8;
  v8[1] = a2;
  v8[2] = &v10;
  uint64_t v9 = (uint64_t)v8;
  WTF::callOnMainRunLoopAndWait();
  this = (atomic_uchar *volatile **)v9;
  if (v9) {
    this = (atomic_uchar *volatile **)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  void *v3 = v10;
  return this;
}

atomic_uchar *volatile **WebKit::WebCacheStorageConnection::open@<X0>(WebKit::WebCacheStorageConnection *this@<X0>, const WebCore::ClientOrigin *a2@<X1>, const WTF::String *a3@<X2>, WTF **a4@<X8>)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  WebKit::WebCacheStorageConnection::connection(&v47, (uint64_t)this);
  int v7 = (os_unfair_lock_s *)v47;
  long long v48 = 0uLL;
  *(void *)&long long v49 = "sendWithPromisedReply";
  *((void *)&v49 + 1) = 0;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v8 + 8) = 1;
  *(void *)uint64_t v8 = &unk_1EE9E6A20;
  long long v9 = v49;
  *(_OWORD *)(v8 + 16) = v48;
  *(_OWORD *)(v8 + 32) = v9;
  *(unsigned char *)(v8 + 48) = 0;
  BOOL v10 = (WTF::Lock *)(v8 + 48);
  *(_DWORD *)(v8 + 88) = 0;
  *(void *)(v8 + 96) = v8 + 112;
  *(void *)(v8 + 104) = 1;
  *(void *)(v8 + 120) = 0;
  *(void *)(v8 + 128) = 0;
  *(_WORD *)(v8 + 136) = 0;
  uint64_t v11 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v8);
  if (*v11)
  {
    int v12 = v11;
    if (v11[16] >= 4u)
    {
      WTF::String::String((WTF::String *)&v54, "creating ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v53, v8);
      *(void *)buf = v54;
      uint64_t v50 = v53;
      uint64_t result = (atomic_uchar *volatile **)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v50, &v55);
      if (!v55)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v15 = v53;
      uint64_t v53 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v14);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      uint64_t v16 = v54;
      uint64_t v54 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v14);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      uint64_t v17 = *((void *)v12 + 4);
      uint64_t v18 = (WTF *)os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      if (v18)
      {
        WTF::String::utf8();
        uint64_t v20 = v50 ? (char *)v50 + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v20;
        _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v18 = v50;
        uint64_t v50 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 1) {
            uint64_t v18 = (WTF *)WTF::fastFree(v18, v19);
          }
          else {
            --*(_DWORD *)v18;
          }
        }
      }
      if (*v12 && v12[16] >= 4u)
      {
        unsigned int v21 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v22 = *v21;
          if (v22) {
            break;
          }
          int v23 = *v21;
          atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v23, v22 | 1, memory_order_acquire, memory_order_acquire);
          if (v23 == v22)
          {
            uint64_t v46 = a3;
            uint64_t v24 = WTF::Logger::observers(v18);
            uint64_t v25 = *(unsigned int *)(v24 + 12);
            if (v25)
            {
              uint64_t v26 = *(uint64_t **)v24;
              uint64_t v27 = *(void *)v24 + 8 * v25;
              do
              {
                uint64_t v28 = *v26;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "creating ");
                *(_DWORD *)&buf[16] = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v57, v8);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v50, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(void *)v28 + 16))(v28, v12, 4, &v50);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v29);
                for (uint64_t i = 24; i != -8; i -= 16)
                {
                  uint64_t v31 = *(WTF::StringImpl **)&buf[i];
                  *(void *)&buf[i] = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 2) {
                      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v19);
                    }
                    else {
                      *(_DWORD *)v31 -= 2;
                    }
                  }
                }
                ++v26;
              }
              while (v26 != (uint64_t *)v27);
            }
            int v32 = 1;
            atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
            a3 = v46;
            BOOL v10 = (WTF::Lock *)(v8 + 48);
            if (v32 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      uint64_t v11 = (unsigned __int8 *)v55;
      uint64_t v55 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          uint64_t v11 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)v19);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
    }
  }
  char v33 = 0;
  uint64_t v50 = (WTF *)v8;
  long long v51 = v48;
  long long v52 = v49;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v8 + 48), (unsigned __int8 *)&v33, 1u, memory_order_acquire, memory_order_acquire);
  if (v33) {
    uint64_t v11 = (unsigned __int8 *)MEMORY[0x19972E8D0](v10);
  }
  long long v34 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v11);
  if (*v34 && v34[16] >= 4u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v34, (WTF::Logger::LogSiteIdentifier *)&v48, " runSynchronouslyOnTarget ", v8);
  }
  atomic_store(0, (unsigned __int8 *)(v8 + 137));
  int v35 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v8 + 48), (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
  if (v35 != 1) {
    WTF::Lock::unlockSlow(v10);
  }
  char v36 = v50;
  if (v50)
  {
    atomic_fetch_add((atomic_uint *volatile)v50 + 2, 1u);
    int v37 = v50;
  }
  else
  {
    int v37 = 0;
  }
  *a4 = v36;
  uint64_t v50 = 0;
  *(_OWORD *)&buf[8] = v51;
  long long v57 = v52;
  uint64_t v38 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v38 = &unk_1EE9E73F0;
  *(void *)(v38 + 8) = v37;
  *(void *)buf = 0;
  long long v39 = v57;
  *(_OWORD *)(v38 + 16) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v38 + 32) = v39;
  *(void *)&long long v48 = v38;
  *((void *)&v48 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)buf);
  __int16 v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v40 = 537;
  *((void *)v40 + 1) = 0;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  *(void *)buf = v40;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v40, (uint64_t)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v40, (uint64_t *)a3);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v7, (IPC::Encoder **)buf, (uint64_t *)&v48, 0, 0);
  int v42 = *(IPC::Encoder **)buf;
  *(void *)buf = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v44, v45);
  }
  uint64_t v43 = v48;
  *(void *)&long long v48 = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v50);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v47);
}

atomic_uchar *volatile **WebKit::WebCacheStorageConnection::remove@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WTF **a4@<X8>)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  WebKit::WebCacheStorageConnection::connection(&v44, a1);
  uint64_t v5 = (os_unfair_lock_s *)v44;
  long long v47 = 0uLL;
  *(void *)&long long v48 = "sendWithPromisedReply";
  *((void *)&v48 + 1) = 0;
  uint64_t v6 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v6 + 8) = 1;
  *(void *)uint64_t v6 = &unk_1EE9E6AC0;
  long long v7 = v48;
  *(_OWORD *)(v6 + 16) = v47;
  *(_OWORD *)(v6 + 32) = v7;
  *(unsigned char *)(v6 + 48) = 0;
  uint64_t v8 = (WTF::Lock *)(v6 + 48);
  *(_DWORD *)(v6 + 64) = 0;
  *(void *)(v6 + 72) = v6 + 88;
  *(void *)(v6 + 80) = 1;
  *(void *)(v6 + 96) = 0;
  *(void *)(v6 + 104) = 0;
  *(_WORD *)(v6 + 112) = 0;
  long long v9 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  if (*v9)
  {
    BOOL v10 = v9;
    if (v9[16] >= 4u)
    {
      WTF::String::String((WTF::String *)&v53, "creating ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v52, v6);
      *(void *)buf = v53;
      long long v49 = v52;
      uint64_t result = (atomic_uchar *volatile **)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v49, &v54);
      if (!v54)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v13 = v52;
      long long v52 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      uint64_t v14 = v53;
      uint64_t v53 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      uint64_t v15 = *((void *)v10 + 4);
      uint64_t v16 = (WTF *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      if (v16)
      {
        WTF::String::utf8();
        uint64_t v18 = v49 ? (char *)v49 + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v18;
        _os_log_impl(&dword_1985F2000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v16 = v49;
        long long v49 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1) {
            uint64_t v16 = (WTF *)WTF::fastFree(v16, v17);
          }
          else {
            --*(_DWORD *)v16;
          }
        }
      }
      if (*v10 && v10[16] >= 4u)
      {
        CFTypeRef v19 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v20 = *v19;
          if (v20) {
            break;
          }
          int v21 = *v19;
          atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, v20 | 1, memory_order_acquire, memory_order_acquire);
          if (v21 == v20)
          {
            uint64_t v22 = WTF::Logger::observers(v16);
            uint64_t v23 = *(unsigned int *)(v22 + 12);
            if (v23)
            {
              uint64_t v24 = *(uint64_t **)v22;
              uint64_t v25 = *(void *)v22 + 8 * v23;
              do
              {
                uint64_t v26 = *v24;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "creating ");
                *(_DWORD *)&buf[16] = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v56, v6);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v49, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(void *)v26 + 16))(v26, v10, 4, &v49);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v27);
                for (uint64_t i = 24; i != -8; i -= 16)
                {
                  long long v29 = *(WTF::StringImpl **)&buf[i];
                  *(void *)&buf[i] = 0;
                  if (v29)
                  {
                    if (*(_DWORD *)v29 == 2) {
                      WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v17);
                    }
                    else {
                      *(_DWORD *)v29 -= 2;
                    }
                  }
                }
                ++v24;
              }
              while (v24 != (uint64_t *)v25);
            }
            int v30 = 1;
            atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v30, 0, memory_order_release, memory_order_relaxed);
            if (v30 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      long long v9 = (unsigned __int8 *)v54;
      uint64_t v54 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          long long v9 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v9, (WTF::StringImpl *)v17);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
    }
  }
  char v31 = 0;
  long long v49 = (WTF *)v6;
  long long v50 = v47;
  long long v51 = v48;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v6 + 48), (unsigned __int8 *)&v31, 1u, memory_order_acquire, memory_order_acquire);
  if (v31) {
    long long v9 = (unsigned __int8 *)MEMORY[0x19972E8D0](v8);
  }
  int v32 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
  if (*v32 && v32[16] >= 4u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v32, (WTF::Logger::LogSiteIdentifier *)&v47, " runSynchronouslyOnTarget ", v6);
  }
  atomic_store(0, (unsigned __int8 *)(v6 + 113));
  int v33 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v6 + 48), (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
  if (v33 != 1) {
    WTF::Lock::unlockSlow(v8);
  }
  long long v34 = v49;
  if (v49)
  {
    atomic_fetch_add((atomic_uint *volatile)v49 + 2, 1u);
    int v35 = v49;
  }
  else
  {
    int v35 = 0;
  }
  *a4 = v34;
  long long v49 = 0;
  *(_OWORD *)&buf[8] = v50;
  long long v56 = v51;
  uint64_t v36 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v36 = &unk_1EE9E7440;
  *(void *)(v36 + 8) = v35;
  *(void *)buf = 0;
  long long v37 = v56;
  *(_OWORD *)(v36 + 16) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v36 + 32) = v37;
  *(void *)&long long v47 = v36;
  *((void *)&v47 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)buf);
  uint64_t v38 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v38 = 540;
  *((void *)v38 + 1) = 0;
  *((void *)v38 + 66) = (char *)v38 + 16;
  *((void *)v38 + 67) = 512;
  *((void *)v38 + 68) = 0;
  *((void *)v38 + 70) = 0;
  *((void *)v38 + 69) = 0;
  IPC::Encoder::encodeHeader(v38);
  uint64_t v54 = v38;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v38, &v45);
  *(void *)buf = v46;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v38, (uint64_t *)buf);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v5, &v54, (uint64_t *)&v47, 0, 0);
  __int16 v40 = v54;
  uint64_t v54 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v39);
    WTF::fastFree(v42, v43);
  }
  uint64_t v41 = v47;
  *(void *)&long long v47 = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v49);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v44);
}

atomic_uchar *volatile **WebKit::WebCacheStorageConnection::retrieveCaches@<X0>(WebKit::WebCacheStorageConnection *this@<X0>, const WebCore::ClientOrigin *a2@<X1>, uint64_t a3@<X2>, WTF **a4@<X8>)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  WebKit::WebCacheStorageConnection::connection(&v49, (uint64_t)this);
  long long v7 = (os_unfair_lock_s *)v49;
  long long v50 = 0uLL;
  *(void *)&long long v51 = "sendWithPromisedReply";
  *((void *)&v51 + 1) = 0;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v8 + 8) = 1;
  *(void *)uint64_t v8 = &unk_1EE9E6B60;
  long long v9 = v51;
  *(_OWORD *)(v8 + 16) = v50;
  *(_OWORD *)(v8 + 32) = v9;
  *(unsigned char *)(v8 + 48) = 0;
  BOOL v10 = (WTF::Lock *)(v8 + 48);
  *(_DWORD *)(v8 + 88) = 0;
  *(void *)(v8 + 96) = v8 + 112;
  *(void *)(v8 + 104) = 1;
  *(void *)(v8 + 120) = 0;
  *(void *)(v8 + 128) = 0;
  *(_WORD *)(v8 + 136) = 0;
  uint64_t v11 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v8);
  if (*v11)
  {
    int v12 = v11;
    if (v11[16] >= 4u)
    {
      WTF::String::String((WTF::String *)&v56, "creating ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v55, v8);
      *(void *)buf = v56;
      long long v52 = v55;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v52, &v57);
      if (!v57) {
        goto LABEL_56;
      }
      uint64_t v14 = v55;
      uint64_t v55 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      uint64_t v15 = v56;
      long long v56 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      uint64_t v16 = *((void *)v12 + 4);
      uint64_t v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      if (v17)
      {
        WTF::String::utf8();
        CFTypeRef v19 = v52 ? (char *)v52 + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v19;
        _os_log_impl(&dword_1985F2000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v17 = v52;
        long long v52 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1) {
            uint64_t v17 = (WTF *)WTF::fastFree(v17, v18);
          }
          else {
            --*(_DWORD *)v17;
          }
        }
      }
      if (*v12 && v12[16] >= 4u)
      {
        int v20 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v21 = *v20;
          if (v21) {
            break;
          }
          int v22 = *v20;
          atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, v21 | 1, memory_order_acquire, memory_order_acquire);
          if (v22 == v21)
          {
            uint64_t v48 = a3;
            uint64_t v23 = WTF::Logger::observers(v17);
            uint64_t v24 = *(unsigned int *)(v23 + 12);
            if (v24)
            {
              uint64_t v25 = *(uint64_t **)v23;
              uint64_t v26 = *(void *)v23 + 8 * v24;
              do
              {
                uint64_t v27 = *v25;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "creating ");
                *(_DWORD *)&buf[16] = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v59, v8);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v52, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(void *)v27 + 16))(v27, v12, 4, &v52);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v28);
                for (uint64_t i = 24; i != -8; i -= 16)
                {
                  int v30 = *(WTF::StringImpl **)&buf[i];
                  *(void *)&buf[i] = 0;
                  if (v30)
                  {
                    if (*(_DWORD *)v30 == 2) {
                      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v18);
                    }
                    else {
                      *(_DWORD *)v30 -= 2;
                    }
                  }
                }
                ++v25;
              }
              while (v25 != (uint64_t *)v26);
            }
            int v31 = 1;
            atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v31, 0, memory_order_release, memory_order_relaxed);
            a3 = v48;
            BOOL v10 = (WTF::Lock *)(v8 + 48);
            if (v31 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      uint64_t v11 = (unsigned __int8 *)v57;
      uint64_t v57 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          uint64_t v11 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)v18);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
    }
  }
  char v32 = 0;
  long long v52 = (WTF *)v8;
  long long v53 = v50;
  long long v54 = v51;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v8 + 48), (unsigned __int8 *)&v32, 1u, memory_order_acquire, memory_order_acquire);
  if (v32) {
    uint64_t v11 = (unsigned __int8 *)MEMORY[0x19972E8D0](v10);
  }
  int v33 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v11);
  if (*v33 && v33[16] >= 4u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v33, (WTF::Logger::LogSiteIdentifier *)&v50, " runSynchronouslyOnTarget ", v8);
  }
  atomic_store(0, (unsigned __int8 *)(v8 + 137));
  int v34 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v8 + 48), (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
  if (v34 != 1) {
    WTF::Lock::unlockSlow(v10);
  }
  int v35 = v52;
  if (v52)
  {
    atomic_fetch_add((atomic_uint *volatile)v52 + 2, 1u);
    uint64_t v36 = v52;
  }
  else
  {
    uint64_t v36 = 0;
  }
  *a4 = v35;
  long long v52 = 0;
  *(_OWORD *)&buf[8] = v53;
  long long v59 = v54;
  uint64_t v37 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v37 = &unk_1EE9E7490;
  *(void *)(v37 + 8) = v36;
  *(void *)buf = 0;
  long long v38 = v59;
  *(_OWORD *)(v37 + 16) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v37 + 32) = v38;
  *(void *)&long long v50 = v37;
  *((void *)&v50 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)buf);
  long long v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v39 = 534;
  *((void *)v39 + 1) = 0;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  *(void *)buf = v39;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v39, (uint64_t)a2);
  __int16 v40 = (void *)IPC::Encoder::grow(v39, 8uLL, 8);
  if (v41 <= 7)
  {
LABEL_56:
    __break(0xC471u);
    JUMPOUT(0x198FFE088);
  }
  *__int16 v40 = a3;
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v7, (IPC::Encoder **)buf, (uint64_t *)&v50, 0, 0);
  uint64_t v43 = *(IPC::Encoder **)buf;
  *(void *)buf = 0;
  if (v43)
  {
    IPC::Encoder::~Encoder(v43, v42);
    WTF::fastFree(v46, v47);
  }
  uint64_t v44 = v50;
  *(void *)&long long v50 = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v52);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v49);
}

atomic_uchar *volatile **WebKit::WebCacheStorageConnection::retrieveRecords@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WTF **a5@<X8>)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  WebKit::WebCacheStorageConnection::connection(&v47, a1);
  long long v7 = (os_unfair_lock_s *)v47;
  long long v50 = 0uLL;
  *(void *)&long long v51 = "sendWithPromisedReply";
  *((void *)&v51 + 1) = 0;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v8 + 8) = 1;
  *(void *)uint64_t v8 = &unk_1EE9E6C20;
  long long v9 = v51;
  *(_OWORD *)(v8 + 16) = v50;
  *(_OWORD *)(v8 + 32) = v9;
  *(unsigned char *)(v8 + 48) = 0;
  BOOL v10 = (WTF::Lock *)(v8 + 48);
  *(_DWORD *)(v8 + 80) = 0;
  *(void *)(v8 + 88) = v8 + 104;
  *(void *)(v8 + 96) = 1;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 120) = 0;
  *(_WORD *)(v8 + 128) = 0;
  uint64_t v11 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v8);
  if (*v11)
  {
    int v12 = v11;
    if (v11[16] >= 4u)
    {
      WTF::String::String((WTF::String *)&v56, "creating ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v55, v8);
      *(void *)buf = v56;
      long long v52 = v55;
      uint64_t result = (atomic_uchar *volatile **)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v52, &v57);
      if (!v57)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v15 = v55;
      uint64_t v55 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v14);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      uint64_t v16 = v56;
      long long v56 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v14);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      uint64_t v17 = *((void *)v12 + 4);
      uint64_t v18 = (WTF *)os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      if (v18)
      {
        WTF::String::utf8();
        int v20 = v52 ? (char *)v52 + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v20;
        _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v18 = v52;
        long long v52 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 1) {
            uint64_t v18 = (WTF *)WTF::fastFree(v18, v19);
          }
          else {
            --*(_DWORD *)v18;
          }
        }
      }
      if (*v12 && v12[16] >= 4u)
      {
        int v21 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v22 = *v21;
          if (v22) {
            break;
          }
          int v23 = *v21;
          atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v23, v22 | 1, memory_order_acquire, memory_order_acquire);
          if (v23 == v22)
          {
            uint64_t v46 = a5;
            uint64_t v24 = WTF::Logger::observers(v18);
            uint64_t v25 = *(unsigned int *)(v24 + 12);
            if (v25)
            {
              uint64_t v26 = *(uint64_t **)v24;
              uint64_t v27 = *(void *)v24 + 8 * v25;
              do
              {
                uint64_t v28 = *v26;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "creating ");
                *(_DWORD *)&buf[16] = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v59, v8);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v52, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(void *)v28 + 16))(v28, v12, 4, &v52);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v29);
                for (uint64_t i = 24; i != -8; i -= 16)
                {
                  int v31 = *(WTF::StringImpl **)&buf[i];
                  *(void *)&buf[i] = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 2) {
                      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v19);
                    }
                    else {
                      *(_DWORD *)v31 -= 2;
                    }
                  }
                }
                ++v26;
              }
              while (v26 != (uint64_t *)v27);
            }
            int v32 = 1;
            atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
            BOOL v10 = (WTF::Lock *)(v8 + 48);
            a5 = v46;
            if (v32 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      uint64_t v11 = (unsigned __int8 *)v57;
      uint64_t v57 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          uint64_t v11 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)v19);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
    }
  }
  char v33 = 0;
  long long v52 = (WTF *)v8;
  long long v53 = v50;
  long long v54 = v51;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v8 + 48), (unsigned __int8 *)&v33, 1u, memory_order_acquire, memory_order_acquire);
  if (v33) {
    uint64_t v11 = (unsigned __int8 *)MEMORY[0x19972E8D0](v10);
  }
  int v34 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v11);
  if (*v34 && v34[16] >= 4u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v34, (WTF::Logger::LogSiteIdentifier *)&v50, " runSynchronouslyOnTarget ", v8);
  }
  atomic_store(0, (unsigned __int8 *)(v8 + 129));
  int v35 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v8 + 48), (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
  if (v35 != 1) {
    WTF::Lock::unlockSlow(v10);
  }
  uint64_t v36 = v52;
  if (v52)
  {
    atomic_fetch_add((atomic_uint *volatile)v52 + 2, 1u);
    uint64_t v37 = v52;
  }
  else
  {
    uint64_t v37 = 0;
  }
  *a5 = v36;
  long long v52 = 0;
  *(_OWORD *)&buf[8] = v53;
  long long v59 = v54;
  uint64_t v38 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v38 = &unk_1EE9E74E0;
  *(void *)(v38 + 8) = v37;
  *(void *)buf = 0;
  long long v39 = v59;
  *(_OWORD *)(v38 + 16) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v38 + 32) = v39;
  *(void *)&long long v50 = v38;
  *((void *)&v50 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)buf);
  __int16 v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v40 = 543;
  *((void *)v40 + 1) = 0;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  uint64_t v57 = v40;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v40, &v48);
  *(void *)buf = v49;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v40, (uint64_t *)buf);
  IPC::ArgumentCoder<WebCore::RetrieveRecordsOptions,void>::encode(v40, a4);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v7, &v57, (uint64_t *)&v50, 0, 0);
  int v42 = v57;
  uint64_t v57 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v44, v45);
  }
  uint64_t v43 = v50;
  *(void *)&long long v50 = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v52);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v47);
}

atomic_uchar *volatile **WebKit::WebCacheStorageConnection::batchDeleteOperation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WebCore::ResourceRequest *a4@<X3>, char *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v8 = a3;
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  WebKit::WebCacheStorageConnection::connection(&v22, a1);
  BOOL v10 = (os_unfair_lock_s *)v22;
  uint64_t v30 = 0;
  *(void *)&long long v31 = 0;
  *((void *)&v31 + 1) = "sendWithPromisedReply";
  *(void *)&long long v32 = 0;
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v27, (WTF::Logger::LogSiteIdentifier *)&v30);
  uint64_t v11 = v27;
  if (v27)
  {
    atomic_fetch_add((atomic_uint *volatile)(v27 + 8), 1u);
    uint64_t v12 = v27;
    uint64_t v8 = v24;
  }
  else
  {
    uint64_t v12 = 0;
  }
  *a6 = v11;
  uint64_t v27 = 0;
  long long v31 = v28;
  long long v32 = v29;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v13 = &unk_1EE9E7530;
  *(void *)(v13 + 8) = v12;
  uint64_t v30 = 0;
  long long v14 = v32;
  *(_OWORD *)(v13 + 16) = v31;
  *(_OWORD *)(v13 + 32) = v14;
  v26[0] = v13;
  v26[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&v30);
  uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v15 = 541;
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 66) = (char *)v15 + 16;
  *((void *)v15 + 67) = 512;
  *((void *)v15 + 68) = 0;
  *((void *)v15 + 70) = 0;
  *((void *)v15 + 69) = 0;
  IPC::Encoder::encodeHeader(v15);
  uint64_t v25 = v15;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v15, &v23);
  uint64_t v30 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v15, &v30);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v15, a4);
  IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode(v15, a5);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v10, &v25, v26, 0, 0);
  uint64_t v17 = v25;
  uint64_t v25 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v16);
    WTF::fastFree(v20, v21);
  }
  uint64_t v18 = v26[0];
  v26[0] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&v27);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v22);
}

atomic_uchar *volatile **WebKit::WebCacheStorageConnection::batchPutOperation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = a3;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  WebKit::WebCacheStorageConnection::connection(&v23, a1);
  uint64_t v8 = (os_unfair_lock_s *)v23;
  uint64_t v31 = 0;
  *(void *)&long long v32 = 0;
  *((void *)&v32 + 1) = "sendWithPromisedReply";
  *(void *)&long long v33 = 0;
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v28, (WTF::Logger::LogSiteIdentifier *)&v31);
  uint64_t v9 = v28;
  if (v28)
  {
    atomic_fetch_add((atomic_uint *volatile)(v28 + 8), 1u);
    uint64_t v10 = v28;
    uint64_t v6 = v25;
  }
  else
  {
    uint64_t v10 = 0;
  }
  *a5 = v9;
  uint64_t v28 = 0;
  long long v32 = v29;
  long long v33 = v30;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v11 = &unk_1EE9E7580;
  *(void *)(v11 + 8) = v10;
  uint64_t v31 = 0;
  long long v12 = v33;
  *(_OWORD *)(v11 + 16) = v32;
  *(_OWORD *)(v11 + 32) = v12;
  v27[0] = v11;
  v27[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&v31);
  uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v13 = 538;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  uint64_t v26 = v13;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v13, &v24);
  uint64_t v31 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v13, &v31);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v13, *(unsigned int *)(a4 + 12));
  unsigned int v14 = *(_DWORD *)(a4 + 12);
  if (v14)
  {
    uint64_t v15 = *(void *)a4;
    uint64_t v16 = 592 * v14;
    do
    {
      IPC::ArgumentCoder<WebCore::DOMCacheEngine::CrossThreadRecord,void>::encode(v13, v15);
      v15 += 592;
      v16 -= 592;
    }
    while (v16);
  }
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v8, &v26, v27, 0, 0);
  uint64_t v18 = v26;
  uint64_t v26 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v17);
    WTF::fastFree(v21, v22);
  }
  uint64_t v19 = v27[0];
  v27[0] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&v28);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v23);
}

uint64_t WebKit::WebCacheStorageConnection::reference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = 0;
  *(void *)&long long v28 = a2;
  *((void *)&v28 + 1) = a3;
  uint64_t v5 = (atomic_uchar *)(a1 + 24);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 24), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 24);
  }
  uint64_t v6 = (uint64_t *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand((uint64_t *)(a1 + 40), 0), (uint64_t v7 = *v6) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  LODWORD(v30) = -1640531527;
  WORD2(v30) = 0;
  BYTE6(v30) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)&v30, &v28);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v30);
  unsigned int v10 = result & v8;
  uint64_t v11 = (unint64_t *)(v7 + 24 * (result & v8));
  unint64_t v13 = *v11;
  unint64_t v12 = v11[1];
  if (*(_OWORD *)v11 != 0)
  {
    unsigned int v14 = 0;
    int v15 = 1;
    do
    {
      if (__PAIR128__(v12, v13) == v28)
      {
        ++*((_DWORD *)v11 + 4);
        goto LABEL_27;
      }
      if (v12 == -1) {
        unsigned int v14 = v11;
      }
      unsigned int v10 = (v10 + v15) & v8;
      uint64_t v11 = (unint64_t *)(v7 + 24 * v10);
      unint64_t v13 = *v11;
      unint64_t v12 = v11[1];
      ++v15;
    }
    while (*(_OWORD *)v11 != 0);
    if (v14)
    {
      unint64_t *v14 = 0;
      v14[1] = 0;
      void v14[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = v14;
    }
  }
  *(_OWORD *)uint64_t v11 = v28;
  *((_DWORD *)v11 + 4) = 0;
  uint64_t v16 = *v6;
  if (*v6) {
    int v17 = *(_DWORD *)(v16 - 12) + 1;
  }
  else {
    int v17 = 1;
  }
  *(_DWORD *)(v16 - 12) = v17;
  uint64_t v18 = *v6;
  if (*v6) {
    int v19 = *(_DWORD *)(v18 - 12);
  }
  else {
    int v19 = 0;
  }
  uint64_t v20 = (*(_DWORD *)(v18 - 16) + v19);
  unint64_t v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (3 * v21 <= 4 * v20)
  {
LABEL_23:
    uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand((uint64_t *)(a1 + 40), (long long *)v11);
    uint64_t v11 = (unint64_t *)result;
  }
LABEL_24:
  ++*((_DWORD *)v11 + 4);
  uint64_t v22 = *(void *)(a1 + 32);
  if (v22)
  {
    uint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v23 = 539;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 66) = (char *)v23 + 16;
    *((void *)v23 + 67) = 512;
    *((void *)v23 + 68) = 0;
    *((void *)v23 + 70) = 0;
    *((void *)v23 + 69) = 0;
    IPC::Encoder::encodeHeader(v23);
    long long v29 = v23;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v23, (uint64_t *)&v28);
    uint64_t v30 = *((void *)&v28 + 1);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v23, &v30);
    IPC::Connection::sendMessageImpl(v22, (uint64_t *)&v29, 0, 0);
    uint64_t result = (uint64_t)v29;
    long long v29 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v24);
      uint64_t result = WTF::fastFree(v25, v26);
    }
  }
LABEL_27:
  int v27 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
  if (v27 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return result;
}

uint64_t WebKit::WebCacheStorageConnection::dereference(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  char v4 = 0;
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  uint64_t v5 = (atomic_uchar *)(result + 24);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 24), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = MEMORY[0x19972E8D0](result + 24);
  }
  uint64_t v6 = (uint64_t *)(v3 + 40);
  uint64_t v7 = *(void *)(v3 + 40);
  if (v7)
  {
    int v8 = *(_DWORD *)(v7 - 8);
    LODWORD(v35) = -1640531527;
    WORD2(v35) = 0;
    BYTE6(v35) = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)&v35, &v32);
    uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v35);
    unsigned int v9 = result & v8;
    unsigned int v10 = (uint64_t *)(v7 + 24 * (result & v8));
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (*v10 == v32 && v12 == v33)
    {
LABEL_15:
      uint64_t v16 = *v6;
      if (!*v6)
      {
        int v17 = 0;
        char v18 = 1;
        goto LABEL_20;
      }
LABEL_19:
      char v18 = 0;
      int v17 = (uint64_t *)(v16 + 24 * *(unsigned int *)(v16 - 4));
LABEL_20:
      if (v17 == v10) {
        goto LABEL_40;
      }
      if (*((_DWORD *)v10 + 4) != 1)
      {
        --*((_DWORD *)v10 + 4);
        goto LABEL_40;
      }
      if (v18)
      {
        int v19 = 0;
      }
      else
      {
        int v19 = (uint64_t *)(v16 + 24 * *(unsigned int *)(v16 - 4));
        if (v19 == v10)
        {
LABEL_37:
          uint64_t v26 = *(void *)(v3 + 32);
          if (v26)
          {
            int v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)int v27 = 536;
            *((void *)v27 + 1) = 0;
            *((void *)v27 + 66) = (char *)v27 + 16;
            *((void *)v27 + 67) = 512;
            *((void *)v27 + 68) = 0;
            *((void *)v27 + 70) = 0;
            *((void *)v27 + 69) = 0;
            IPC::Encoder::encodeHeader(v27);
            int v34 = v27;
            IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v27, &v32);
            uint64_t v35 = v33;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v27, &v35);
            IPC::Connection::sendMessageImpl(v26, (uint64_t *)&v34, 0, 0);
            uint64_t result = (uint64_t)v34;
            int v34 = 0;
            if (result)
            {
              IPC::Encoder::~Encoder((IPC::Encoder *)result, v28);
              uint64_t result = WTF::fastFree(v30, v31);
            }
          }
          goto LABEL_40;
        }
      }
      if (v19 != v10)
      {
        *unsigned int v10 = -1;
        v10[1] = -1;
        ++*(_DWORD *)(*v6 - 16);
        uint64_t v20 = *v6;
        int v21 = *v6 ? *(_DWORD *)(v20 - 12) - 1 : -1;
        *(_DWORD *)(v20 - 12) = v21;
        uint64_t v22 = *v6;
        if (*v6)
        {
          unsigned int v23 = 6 * *(_DWORD *)(v22 - 12);
          unsigned int v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9) {
            uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash((uint64_t *)(v3 + 40), v24 >> 1, 0);
          }
        }
      }
      goto LABEL_37;
    }
    int v14 = 1;
    while (v11 | v12)
    {
      unsigned int v9 = (v9 + v14) & v8;
      unsigned int v10 = (uint64_t *)(v7 + 24 * v9);
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      ++v14;
      if (*v10 == v32 && v12 == v33) {
        goto LABEL_15;
      }
    }
    uint64_t v16 = *v6;
    if (*v6)
    {
      unsigned int v10 = (uint64_t *)(v16 + 24 * *(unsigned int *)(v16 - 4));
      goto LABEL_19;
    }
  }
LABEL_40:
  int v29 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v29, 0, memory_order_release, memory_order_relaxed);
  if (v29 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return result;
}

uint64_t WebKit::WebCacheStorageConnection::lockStorage(atomic_uchar *this, const WebCore::ClientOrigin *a2)
{
  uint64_t v3 = this;
  char v4 = 0;
  uint64_t v5 = (WTF::Lock *)(this + 24);
  atomic_compare_exchange_strong_explicit(this + 24, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](this + 24);
  }
  uint64_t v6 = (uint64_t *)(v3 + 48);
  uint64_t v7 = *((void *)v3 + 6);
  int v29 = v5;
  if (v7
    || (WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,unsigned int,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand((uint64_t *)v3 + 6, 0), (uint64_t v7 = *v6) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unsigned int v9 = WTF::computeHash<WebCore::ClientOrigin>((uint64_t)a2) & v8;
  uint64_t v10 = v7 + 72 * v9;
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>()) {
    goto LABEL_20;
  }
  long long v28 = v3;
  uint64_t v11 = 0;
  int v12 = 1;
  while (1)
  {
    int v13 = *(_DWORD *)(v10 + 24);
    if (v13) {
      break;
    }
    if (*(void *)v10 != -1) {
      goto LABEL_10;
    }
    uint64_t v11 = v10;
LABEL_14:
    unsigned int v9 = (v9 + v12) & v8;
    uint64_t v10 = v7 + 72 * v9;
    ++v12;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>()) {
      goto LABEL_18;
    }
  }
  if (v13 == 1)
  {
LABEL_10:
    if (WebCore::operator==())
    {
      uint64_t result = WebCore::operator==();
      if (result)
      {
        ++*(_DWORD *)(v10 + 64);
        uint64_t v26 = (atomic_uchar *)v29;
        goto LABEL_32;
      }
    }
    goto LABEL_14;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
  uint64_t v3 = v28;
  if (v11)
  {
    *(_DWORD *)(v11 + 64) = 0;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)uint64_t v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    --*(_DWORD *)(*v6 - 16);
    uint64_t v10 = v11;
  }
LABEL_20:
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v10, (uint64_t)a2);
  uint64_t result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v10 + 32, (uint64_t)a2 + 32);
  *(_DWORD *)(v10 + 64) = 0;
  uint64_t v15 = *v6;
  if (*v6) {
    int v16 = *(_DWORD *)(v15 - 12) + 1;
  }
  else {
    int v16 = 1;
  }
  uint64_t v26 = (atomic_uchar *)v29;
  *(_DWORD *)(v15 - 12) = v16;
  uint64_t v17 = *v6;
  if (*v6) {
    int v18 = *(_DWORD *)(v17 - 12);
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = (*(_DWORD *)(v17 - 16) + v18);
  unint64_t v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 <= 2 * v19)
    {
LABEL_28:
      uint64_t result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,unsigned int,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(v6, v10);
      uint64_t v10 = result;
    }
  }
  else if (3 * v20 <= 4 * v19)
  {
    goto LABEL_28;
  }
  ++*(_DWORD *)(v10 + 64);
  uint64_t v21 = *((void *)v3 + 4);
  if (v21)
  {
    uint64_t v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v22 = 577;
    *((void *)v22 + 1) = 0;
    *((void *)v22 + 66) = (char *)v22 + 16;
    *((void *)v22 + 67) = 512;
    *((void *)v22 + 68) = 0;
    *((void *)v22 + 70) = 0;
    *((void *)v22 + 69) = 0;
    IPC::Encoder::encodeHeader(v22);
    uint64_t v30 = v22;
    IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v22, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v21, (uint64_t *)&v30, 0, 0);
    uint64_t result = (uint64_t)v30;
    uint64_t v30 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v23);
      uint64_t result = WTF::fastFree(v24, v25);
    }
  }
LABEL_32:
  int v27 = 1;
  atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
  if (v27 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v26);
  }
  return result;
}

uint64_t WebKit::WebCacheStorageConnection::unlockStorage(uint64_t this, const WebCore::ClientOrigin *a2)
{
  uint64_t v3 = this;
  char v4 = 0;
  uint64_t v5 = (atomic_uchar *)(this + 24);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(this + 24), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    this = MEMORY[0x19972E8D0](this + 24);
  }
  uint64_t v31 = v3;
  uint64_t v8 = *(void *)(v3 + 48);
  uint64_t v6 = (uint64_t *)(v3 + 48);
  uint64_t v7 = v8;
  if (!v8) {
    goto LABEL_41;
  }
  int v9 = *(_DWORD *)(v7 - 8);
  unsigned int v10 = WTF::computeHash<WebCore::ClientOrigin>((uint64_t)a2) & v9;
  uint64_t v11 = v7 + 72 * v10;
  this = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
  if (this)
  {
LABEL_5:
    uint64_t v12 = *v6;
    if (*v6)
    {
      uint64_t v11 = v12 + 72 * *(unsigned int *)(v12 - 4);
      goto LABEL_7;
    }
    goto LABEL_41;
  }
  int v15 = 1;
  while (1)
  {
    int v16 = *(_DWORD *)(v11 + 24);
    if (!v16)
    {
      if (*(void *)v11 == -1) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }
    if (v16 != 1) {
      break;
    }
LABEL_14:
    if (WebCore::operator==())
    {
      this = WebCore::operator==();
      if (this) {
        goto LABEL_20;
      }
    }
LABEL_16:
    unsigned int v10 = (v10 + v15) & v9;
    uint64_t v11 = v7 + 72 * v10;
    this = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
    ++v15;
    if (this) {
      goto LABEL_5;
    }
  }
  this = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_20:
  uint64_t v12 = *v6;
  if (*v6)
  {
LABEL_7:
    char v13 = 0;
    uint64_t v14 = v12 + 72 * *(unsigned int *)(v12 - 4);
  }
  else
  {
    uint64_t v14 = 0;
    char v13 = 1;
  }
  if (v14 != v11)
  {
    if (*(_DWORD *)(v11 + 64) != 1)
    {
      --*(_DWORD *)(v11 + 64);
      goto LABEL_41;
    }
    if (v13)
    {
      uint64_t v17 = 0;
LABEL_25:
      if (v17 != v11)
      {
        uint64_t v18 = *(unsigned int *)(v11 + 56);
        if (v18 != -1) {
          this = ((uint64_t (*)(char *, uint64_t))off_1EE9E7020[v18])(&v32, v11 + 32);
        }
        *(_DWORD *)(v11 + 56) = -1;
        uint64_t v19 = *(unsigned int *)(v11 + 24);
        if (v19 != -1) {
          this = ((uint64_t (*)(char *, uint64_t))off_1EE9E7020[v19])(&v33, v11);
        }
        *(void *)uint64_t v11 = -1;
        *(void *)(v11 + 8) = 0;
        *(_DWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 24) = 0;
        ++*(_DWORD *)(*v6 - 16);
        uint64_t v20 = *v6;
        if (*v6) {
          int v21 = *(_DWORD *)(v20 - 12) - 1;
        }
        else {
          int v21 = -1;
        }
        *(_DWORD *)(v20 - 12) = v21;
        uint64_t v22 = *v6;
        if (*v6)
        {
          unsigned int v23 = 6 * *(_DWORD *)(v22 - 12);
          unsigned int v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9) {
            this = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,unsigned int,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(v6, v24 >> 1, 0);
          }
        }
      }
    }
    else
    {
      uint64_t v17 = v12 + 72 * *(unsigned int *)(v12 - 4);
      if (v17 != v11) {
        goto LABEL_25;
      }
    }
    uint64_t v25 = *(void *)(v31 + 32);
    if (v25)
    {
      uint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v26 = 593;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 66) = (char *)v26 + 16;
      *((void *)v26 + 67) = 512;
      *((void *)v26 + 68) = 0;
      *((void *)v26 + 70) = 0;
      *((void *)v26 + 69) = 0;
      IPC::Encoder::encodeHeader(v26);
      int v34 = v26;
      IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v26, (uint64_t)a2);
      IPC::Connection::sendMessageImpl(v25, (uint64_t *)&v34, 0, 0);
      this = (uint64_t)v34;
      int v34 = 0;
      if (this)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)this, v27);
        this = WTF::fastFree(v29, v30);
      }
    }
  }
LABEL_41:
  int v28 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
  if (v28 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return this;
}

atomic_uchar *volatile **WebKit::WebCacheStorageConnection::clearMemoryRepresentation@<X0>(WebKit::WebCacheStorageConnection *this@<X0>, const WebCore::ClientOrigin *a2@<X1>, uint64_t *a3@<X8>)
{
  WebKit::WebCacheStorageConnection::connection(&v23, (uint64_t)this);
  uint64_t v5 = (os_unfair_lock_s *)v23;
  *(void *)int v28 = 0;
  *(void *)&v28[8] = 0;
  *(void *)&v28[16] = "sendWithPromisedReply";
  *(void *)&v28[24] = 0;
  uint64_t v6 = WTF::fastMalloc((WTF *)0x78);
  uint64_t v7 = (atomic_uchar *)WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::NativePromise(v6, v28);
  char v8 = 0;
  uint64_t v25 = v7;
  long long v26 = *(_OWORD *)v28;
  long long v27 = *(_OWORD *)&v28[16];
  int v9 = (WTF::Lock *)(v7 + 48);
  atomic_compare_exchange_strong_explicit(v7 + 48, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    uint64_t v7 = (atomic_uchar *)MEMORY[0x19972E8D0](v7 + 48);
  }
  unsigned int v10 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
  if (*v10 && v10[16] >= 4u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v10, (WTF::Logger::LogSiteIdentifier *)v28, " runSynchronouslyOnTarget ", v6);
  }
  atomic_store(0, (unsigned __int8 *)(v6 + 113));
  int v11 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v6 + 48), (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    WTF::Lock::unlockSlow(v9);
  }
  uint64_t v12 = (uint64_t)v25;
  if (v25)
  {
    atomic_fetch_add((atomic_uint *volatile)v25 + 2, 1u);
    uint64_t v13 = (uint64_t)v25;
  }
  else
  {
    uint64_t v13 = 0;
  }
  *a3 = v12;
  uint64_t v25 = 0;
  *(_OWORD *)&v28[8] = v26;
  *(_OWORD *)&v28[24] = v27;
  uint64_t v14 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v14 = &unk_1EE9E75D0;
  *(void *)(v14 + 8) = v13;
  *(void *)int v28 = 0;
  long long v15 = *(_OWORD *)&v28[24];
  *(_OWORD *)(v14 + 16) = *(_OWORD *)&v28[8];
  *(_OWORD *)(v14 + 32) = v15;
  v24[0] = v14;
  v24[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)v28);
  int v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v16 = 535;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  *(void *)int v28 = v16;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v16, (uint64_t)a2);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v5, (IPC::Encoder **)v28, v24, 0, 0);
  uint64_t v18 = *(IPC::Encoder **)v28;
  *(void *)int v28 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v17);
    WTF::fastFree(v21, v22);
  }
  uint64_t v19 = v24[0];
  v24[0] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v25);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v23);
}

atomic_uchar *volatile **WebKit::WebCacheStorageConnection::engineRepresentation@<X0>(WebKit::WebCacheStorageConnection *this@<X0>, uint64_t *a2@<X8>)
{
  WebKit::WebCacheStorageConnection::connection(&v21, (uint64_t)this);
  uint64_t v3 = (os_unfair_lock_s *)v21;
  *(void *)long long v26 = 0;
  *(void *)&v26[8] = 0;
  *(void *)&v26[16] = "sendWithPromisedReply";
  *(void *)&v26[24] = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x80);
  uint64_t v5 = (atomic_uchar *)WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::NativePromise(v4, v26);
  char v6 = 0;
  unsigned int v23 = v5;
  long long v24 = *(_OWORD *)v26;
  long long v25 = *(_OWORD *)&v26[16];
  uint64_t v7 = (WTF::Lock *)(v5 + 48);
  atomic_compare_exchange_strong_explicit(v5 + 48, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v5 = (atomic_uchar *)MEMORY[0x19972E8D0](v5 + 48);
  }
  char v8 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v5);
  if (*v8 && v8[16] >= 4u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, (WTF::Logger::LogSiteIdentifier *)v26, " runSynchronouslyOnTarget ", v4);
  }
  atomic_store(0, (unsigned __int8 *)(v4 + 121));
  int v9 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 48), (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    WTF::Lock::unlockSlow(v7);
  }
  uint64_t v10 = (uint64_t)v23;
  if (v23)
  {
    atomic_fetch_add((atomic_uint *volatile)v23 + 2, 1u);
    uint64_t v11 = (uint64_t)v23;
  }
  else
  {
    uint64_t v11 = 0;
  }
  *a2 = v10;
  unsigned int v23 = 0;
  *(_OWORD *)&v26[8] = v24;
  *(_OWORD *)&v26[24] = v25;
  uint64_t v12 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v12 = &unk_1EE9E7620;
  *(void *)(v12 + 8) = v11;
  *(void *)long long v26 = 0;
  long long v13 = *(_OWORD *)&v26[24];
  *(_OWORD *)(v12 + 16) = *(_OWORD *)&v26[8];
  *(_OWORD *)(v12 + 32) = v13;
  v22[0] = v12;
  v22[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)v26);
  uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v14 = 542;
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 66) = (char *)v14 + 16;
  *((void *)v14 + 67) = 512;
  *((void *)v14 + 68) = 0;
  *((void *)v14 + 70) = 0;
  *((void *)v14 + 69) = 0;
  IPC::Encoder::encodeHeader(v14);
  *(void *)long long v26 = v14;
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v3, (IPC::Encoder **)v26, v22, 0, 0);
  int v16 = *(IPC::Encoder **)v26;
  *(void *)long long v26 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v15);
    WTF::fastFree(v19, v20);
  }
  uint64_t v17 = v22[0];
  v22[0] = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v23);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v21);
}

atomic_uchar *volatile **WebKit::WebCacheStorageConnection::updateQuotaBasedOnSpaceUsage(WebKit::WebCacheStorageConnection *this, const WebCore::ClientOrigin *a2)
{
  WebKit::WebCacheStorageConnection::connection(&v10, (uint64_t)this);
  uint64_t v3 = v10;
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 590;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v4, (uint64_t)a2);
  IPC::Connection::sendMessageImpl((uint64_t)v3, (uint64_t *)&v11, 0, 0);
  char v6 = v11;
  uint64_t v11 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v8, v9);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v10);
}

uint64_t WebKit::WebCacheStorageProvider::createCacheStorageConnection@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this;
  if (!*(void *)(this + 16))
  {
    uint64_t v4 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v4 + 8) = 1;
    *(void *)(v4 + 16) = 0;
    *(void *)uint64_t v4 = &unk_1EE9E6970;
    *(unsigned char *)(v4 + 24) = 0;
    *(void *)(v4 + 40) = 0;
    *(void *)(v4 + 48) = 0;
    *(void *)(v4 + 32) = 0;
    this = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = v4;
    if (this)
    {
      if (atomic_fetch_add((atomic_uint *volatile)(this + 8), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)(this + 8));
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
    }
  }
  uint64_t v5 = *(void *)(v2 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
  *a2 = v5;
  return this;
}

void WebKit::WebCacheStorageProvider::~WebCacheStorageProvider(WebKit::WebCacheStorageProvider *this)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
  }
}

void WebKit::WebCacheStorageProvider::~WebCacheStorageProvider(WebKit::WebCacheStorageProvider *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  WTF::fastFree(this, a2);
}

uint64_t WebCore::PaymentCoordinatorClient::isMockPaymentCoordinator(WebCore::PaymentCoordinatorClient *this)
{
  return 0;
}

uint64_t WebKit::WebPaymentCoordinator::isWebPaymentCoordinator(WebKit::WebPaymentCoordinator *this)
{
  return 1;
}

WTF::Lock *WebCore::CacheStorageConnection::clearMemoryRepresentation@<X0>(uint64_t *a1@<X8>)
{
  v52[1] = *MEMORY[0x1E4F143B8];
  long long v38 = 0uLL;
  long long v39 = "clearMemoryRepresentation";
  uint64_t v40 = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x78);
  uint64_t v5 = WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::NativePromise(v4, &v38);
  char v9 = 0;
  *a1 = v5;
  uint64_t v10 = (WTF::Lock *)(v5 + 48);
  unint64_t v41 = v10;
  char v42 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v10, (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
  if (v9) {
    uint64_t v10 = (WTF::Lock *)MEMORY[0x19972E8D0](v10, v6, v7, v8);
  }
  uint64_t v11 = (unsigned char *)WTF::NativePromiseBase::logChannel(v10);
  if (*v11) {
    BOOL v12 = v11[16] >= 4u;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    long long v13 = v11;
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v46, (WTF::Logger::LogSiteIdentifier *)&v38);
    WTF::String::String((WTF::String *)&v45, " rejecting ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v44, v4);
    WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, &v47);
    long long v15 = v44;
    uint64_t v44 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    int v16 = v45;
    uint64_t v45 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v14);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = v46;
    uint64_t v46 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v14);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v18 = *((void *)v13 + 4);
    uint64_t v19 = (WTF *)os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (v19)
    {
      WTF::String::utf8();
      int v21 = v43[0] ? (char *)v43[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      uint64_t v49 = v21;
      _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v19 = v43[0];
      v43[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1) {
          uint64_t v19 = (WTF *)WTF::fastFree(v19, v20);
        }
        else {
          --*(_DWORD *)v19;
        }
      }
    }
    if (*v13 && v13[16] >= 4u)
    {
      uint64_t v22 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v23 = *v22;
        if (v23) {
          break;
        }
        int v24 = *v22;
        atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v24, v23 | 1, memory_order_acquire, memory_order_acquire);
        if (v24 == v23)
        {
          uint64_t v25 = WTF::Logger::observers(v19);
          uint64_t v26 = *(unsigned int *)(v25 + 12);
          if (v26)
          {
            long long v27 = *(uint64_t **)v25;
            uint64_t v28 = *(void *)v25 + 8 * v26;
            do
            {
              uint64_t v29 = *v27;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v49 + 4), (WTF::Logger::LogSiteIdentifier *)&v38);
              int v50 = 0;
              WTF::String::String((WTF::String *)v51, " rejecting ");
              v51[2] = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v52, v4);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v43, (uint64_t)buf, 3uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v29 + 16))(v29, v13, 4, v43);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v30);
              for (uint64_t i = 40; i != -8; i -= 16)
              {
                char v32 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v32)
                {
                  if (*(_DWORD *)v32 == 2) {
                    WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v20);
                  }
                  else {
                    *(_DWORD *)v32 -= 2;
                  }
                }
              }
              ++v27;
            }
            while (v27 != (uint64_t *)v28);
          }
          int v33 = 1;
          atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
          if (v33 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    int v34 = v47;
    long long v47 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v20);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
  }
  uint64_t v35 = *(unsigned int *)(v4 + 64);
  if (v35 != -1) {
    ((void (*)(uint8_t *, uint64_t))off_1EE9E6DB8[v35])(buf, v4 + 56);
  }
  *(_WORD *)(v4 + 56) = 256;
  int v36 = 1;
  *(_DWORD *)(v4 + 64) = 1;
  uint64_t result = (WTF::Lock *)WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v4, (atomic_uchar *volatile *)&v41);
  if (v42)
  {
    uint64_t result = v41;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v41, (unsigned __int8 *)&v36, 0, memory_order_release, memory_order_relaxed);
    if (v36 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

WTF::Lock *WebCore::CacheStorageConnection::engineRepresentation@<X0>(uint64_t *a1@<X8>)
{
  v51[1] = *MEMORY[0x1E4F143B8];
  long long v37 = 0uLL;
  long long v38 = "engineRepresentation";
  uint64_t v39 = 0;
  uint64_t v3 = WTF::fastMalloc((WTF *)0x80);
  uint64_t v4 = WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::NativePromise(v3, &v37);
  char v8 = 0;
  *a1 = v4;
  char v9 = (WTF::Lock *)(v4 + 48);
  uint64_t v40 = v9;
  char v41 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    char v9 = (WTF::Lock *)MEMORY[0x19972E8D0](v9, v5, v6, v7);
  }
  uint64_t v10 = (unsigned char *)WTF::NativePromiseBase::logChannel(v9);
  if (*v10) {
    BOOL v11 = v10[16] >= 4u;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    BOOL v12 = v10;
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v45, (WTF::Logger::LogSiteIdentifier *)&v37);
    WTF::String::String((WTF::String *)&v44, " rejecting ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v43, v3);
    WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v45, (uint64_t *)&v44, (uint64_t *)&v43, &v46);
    uint64_t v14 = v43;
    uint64_t v43 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    long long v15 = v44;
    uint64_t v44 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v13);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    int v16 = v45;
    uint64_t v45 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v13);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = *((void *)v12 + 4);
    uint64_t v18 = (WTF *)os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if (v18)
    {
      WTF::String::utf8();
      uint64_t v20 = v42[0] ? (char *)v42[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      uint64_t v48 = v20;
      _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v18 = v42[0];
      v42[0] = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 1) {
          uint64_t v18 = (WTF *)WTF::fastFree(v18, v19);
        }
        else {
          --*(_DWORD *)v18;
        }
      }
    }
    if (*v12 && v12[16] >= 4u)
    {
      int v21 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v22 = *v21;
        if (v22) {
          break;
        }
        int v23 = *v21;
        atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v23, v22 | 1, memory_order_acquire, memory_order_acquire);
        if (v23 == v22)
        {
          uint64_t v24 = WTF::Logger::observers(v18);
          uint64_t v25 = *(unsigned int *)(v24 + 12);
          if (v25)
          {
            uint64_t v26 = *(uint64_t **)v24;
            uint64_t v27 = *(void *)v24 + 8 * v25;
            do
            {
              uint64_t v28 = *v26;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v48 + 4), (WTF::Logger::LogSiteIdentifier *)&v37);
              int v49 = 0;
              WTF::String::String((WTF::String *)v50, " rejecting ");
              v50[2] = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v51, v3);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v42, (uint64_t)buf, 3uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v28 + 16))(v28, v12, 4, v42);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v29);
              for (uint64_t i = 40; i != -8; i -= 16)
              {
                uint64_t v31 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v31)
                {
                  if (*(_DWORD *)v31 == 2) {
                    WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v19);
                  }
                  else {
                    *(_DWORD *)v31 -= 2;
                  }
                }
              }
              ++v26;
            }
            while (v26 != (uint64_t *)v27);
          }
          int v32 = 1;
          atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
          if (v32 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    int v33 = v46;
    uint64_t v46 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v19);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
  uint64_t v34 = *(unsigned int *)(v3 + 72);
  if (v34 != -1) {
    ((void (*)(uint8_t *, uint64_t))off_1EE9E6E38[v34])(buf, v3 + 56);
  }
  *(unsigned char *)(v3 + 56) = 0;
  int v35 = 1;
  *(_DWORD *)(v3 + 64) = 1;
  *(_DWORD *)(v3 + 72) = 1;
  uint64_t result = (WTF::Lock *)WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v3, (atomic_uchar *volatile *)&v40);
  if (v41)
  {
    uint64_t result = v40;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v40, (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
    if (v35 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 132);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(v1 + 120);
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        uint64_t result = WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);

  return WTF::fastFree(v1, v2);
}

{
  unsigned char *v2;
  BOOL v3;
  unsigned char *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  atomic_uchar *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  void v35[3];

  void v35[2] = *MEMORY[0x1E4F143B8];
  char v2 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2) {
    uint64_t v3 = v2[16] >= 4u;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(void *)buf = v31;
    v29[0] = v30;
    uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    int v7 = v30;
    uint64_t v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    char v8 = v31;
    uint64_t v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    char v9 = *((void *)v4 + 4);
    uint64_t v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      WTF::String::utf8();
      BOOL v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          uint64_t v10 = (WTF *)WTF::fastFree(v10, v11);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      long long v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        uint64_t v14 = *v13;
        if (v14) {
          break;
        }
        long long v15 = *v13;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
        if (v15 == v14)
        {
          int v16 = WTF::Logger::observers(v10);
          uint64_t v17 = *(unsigned int *)(v16 + 12);
          if (v17)
          {
            uint64_t v18 = *(uint64_t **)v16;
            uint64_t v19 = *(void *)v16 + 8 * v17;
            do
            {
              uint64_t v20 = *v18;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "destroying ");
              uint64_t v34 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v20 + 16))(v20, v4, 4, v29);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                int v23 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2) {
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                  }
                  else {
                    *(_DWORD *)v23 -= 2;
                  }
                }
              }
              ++v18;
            }
            while (v18 != (uint64_t *)v19);
          }
          uint64_t v24 = 1;
          atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
          if (v24 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v25 = v32;
    int v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 30), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v27);
  uint64_t v28 = a1[22];
  if (v28 != -1) {
    ((void (*)(uint8_t *, unsigned int *))off_1EE9E6A38[v28])(buf, a1 + 14);
  }
  a1[22] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(v4)
         + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  long long v38 = (char *)v39 + 8;
  *(void *)&v39[0] = 1;
  uint64_t v31 = &v33;
  uint64_t v32 = 1;
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4 == (void *)(a1 + 112))
  {
    uint64_t v5 = *(unsigned int *)(a1 + 108);
    memcpy(&v33, v4, 8 * v5);
  }
  else
  {
    *(void *)(a1 + 96) = a1 + 112;
    uint64_t v31 = (uint64_t *)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 108);
    LODWORD(v32) = *(_DWORD *)(a1 + 104);
  }
  HIDWORD(v32) = v5;
  DWORD1(v39[0]) = 0;
  *(void *)(a1 + 104) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v4);
  uint64_t v6 = *(void *)(a1 + 120);
  uint64_t v28 = v6;
  unsigned int v7 = *(_DWORD *)(a1 + 132);
  int v29 = *(_DWORD *)(a1 + 128);
  unsigned int v30 = v7;
  long long v38 = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)&v39[0] = 0;
  *(void *)(a1 + 128) = 0;
  atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v8);
  if (HIDWORD(v32))
  {
    BOOL v11 = v31;
    uint64_t v12 = 8 * HIDWORD(v32);
    do
    {
      uint64_t v13 = *v11;
      if (!*(void *)(*v11 + 16)
        || (int v14 = atomic_load((unsigned __int8 *)(a1 + 137)), v14 == 1)
        && (atomic_uchar *volatile v9 = (atomic_uchar *volatile)(*(uint64_t (**)(void))(**(void **)(v13 + 16) + 24))(*(void *)(v13 + 16)),
            v9))
      {
        if (*(unsigned char *)(v13 + 56))
        {
          long long v38 = (atomic_uchar *)v13;
          atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
          if (*v9) {
            BOOL v17 = v9[16] >= 4u;
          }
          else {
            BOOL v17 = 0;
          }
          if (v17) {
            atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v9, a1, (uint64_t)&v38, (WTF::Logger::LogSiteIdentifier *)(v13 + 24));
          }
        }
        else
        {
          atomic_uchar *volatile v18 = *a2;
          int v19 = 1;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
          if (v19 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v18);
          }
          if (WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::hasRunnable(a1))
          {
            WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v34, a1);
            uint64_t v20 = v34;
            (*(void (**)(atomic_uchar **__return_ptr, uint64_t))(*(void *)v34 + 16))(&v38, v34);
            (*(void (**)(uint64_t, uint64_t, atomic_uchar **))(*(void *)v13 + 24))(v13, a1, &v38);
            (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          }
          else
          {
            WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResult(&v38, a1);
            (*(void (**)(uint64_t, uint64_t, atomic_uchar **))(*(void *)v13 + 24))(v13, a1, &v38);
          }
          char v21 = 0;
          atomic_uchar *volatile v9 = *a2;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
          if (v21) {
            atomic_uchar *volatile v9 = (atomic_uchar *volatile)MEMORY[0x19972E8D0](v9, v10);
          }
        }
      }
      else
      {
        uint64_t v15 = *(void *)(v13 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
        atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
        int v16 = (atomic_uchar *)WTF::fastMalloc((WTF *)0x20);
        *(void *)int v16 = &unk_1EE9E6A60;
        *((void *)v16 + 1) = v13;
        *((void *)v16 + 2) = v13;
        *((void *)v16 + 3) = a1;
        long long v38 = v16;
        (*(void (**)(uint64_t, atomic_uchar **))(*(void *)v15 + 16))(v15, &v38);
        atomic_uchar *volatile v9 = v38;
        long long v38 = 0;
        if (v9) {
          atomic_uchar *volatile v9 = (atomic_uchar *volatile)(*(uint64_t (**)(atomic_uchar *volatile))(*(void *)v9 + 8))(v9);
        }
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  if (v7)
  {
    uint64_t v22 = v6 + 40 * v7;
    uint64_t v23 = a1 + 56;
    do
    {
      uint64_t v24 = *(atomic_uint **)v6;
      *(void *)uint64_t v6 = 0;
      long long v38 = (atomic_uchar *)v24;
      long long v25 = *(_OWORD *)(v6 + 24);
      v39[0] = *(_OWORD *)(v6 + 8);
      v39[1] = v25;
      if (v24)
      {
        atomic_fetch_add(v24 + 2, 1u);
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        int v36 = "<chained promise>";
        uint64_t v37 = 0;
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v24, v23, (WTF::Logger::LogSiteIdentifier *)&v34);
        if (atomic_fetch_add(v24 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v24 + 2);
          (*(void (**)(atomic_uint *))(*(void *)v24 + 16))(v24);
        }
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        int v36 = "<chained promise>";
        uint64_t v37 = 0;
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v23, (WTF::Logger::LogSiteIdentifier *)&v34);
      }
      WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v38);
      v6 += 40;
    }
    while (v6 != v22);
  }
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v10);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v26);
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  char v4 = 0;
  uint64_t v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 88) == 2)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    void *v3 = v6;
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResult(v8);
  }
  return result;
}

void *WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResult(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  char v4 = 0;
  uint64_t v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = (void *)MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 88) == 1)
  {
    long long v6 = *(_OWORD *)(a2 + 72);
    _OWORD *v3 = *(_OWORD *)(a2 + 56);
    v3[1] = v6;
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return (void *)WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v8 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(v8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E6A60;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E6A60;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  char v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  uint64_t v1 = (unsigned char *)*((void *)a1 + 1);
  uint64_t v2 = *((void *)a1 + 3);
  if (v1[56])
  {
    v10[0] = *((void *)a1 + 1);
    uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v4 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::hasRunnable(*((void *)a1 + 3));
    uint64_t v7 = *((void *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v9, *((void *)a1 + 3));
      uint64_t v8 = v9;
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v9 + 16))(v10, v9);
      (*(void (**)(unsigned char *, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v10);
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResult(v10, *((void *)a1 + 3));
      return (WTF::StringImpl *)(*(uint64_t (**)(unsigned char *, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v10);
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  int v14 = v7;
  char v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  uint64_t v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 88);
  uint64_t v11 = *(unsigned int *)(a2 + 32);
  if (v10 == -1)
  {
    if (v11 == -1) {
      goto LABEL_14;
    }
  }
  else if (v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1EE9E6A38[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 88) = -1;
    goto LABEL_14;
  }
  uint64_t v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1EE9E6A78[v11])(&v16);
LABEL_14:
  uint64_t result = (WTF::Lock *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (v15)
  {
    uint64_t result = v14;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3, uint64_t a4)
{
  _OWORD v39[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v33, this);
  WTF::String::String((WTF::String *)&v32, a3);
  uint64_t v29 = a4;
  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v31, a4);
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v33, (uint64_t *)&v32, (uint64_t *)&v31, &v34);
  BOOL v9 = v31;
  uint64_t v31 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = v32;
  uint64_t v32 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = v33;
  uint64_t v33 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v8);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = *(NSObject **)(a1 + 32);
  int v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    WTF::String::utf8();
    char v15 = v30[0] ? (char *)v30[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    int v36 = v15;
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    int v13 = v30[0];
    v30[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        int v13 = (WTF *)WTF::fastFree(v13, v14);
      }
      else {
        --*(_DWORD *)v13;
      }
    }
  }
  if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    uint64_t v16 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v17 = *v16;
      if (v17) {
        break;
      }
      int v18 = *v16;
      atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, v17 | 1, memory_order_acquire, memory_order_acquire);
      if (v18 == v17)
      {
        uint64_t v19 = WTF::Logger::observers(v13);
        uint64_t v20 = *(unsigned int *)(v19 + 12);
        if (v20)
        {
          char v21 = *(uint64_t **)v19;
          uint64_t v22 = *(void *)v19 + 8 * v20;
          do
          {
            uint64_t v23 = *v21;
            *(_DWORD *)buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v36 + 4), this);
            int v37 = 0;
            WTF::String::String((WTF::String *)v38, a3);
            v38[2] = 0;
            WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v39, v29);
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v30, (uint64_t)buf, 3uLL);
            (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v23 + 16))(v23, a1, 4, v30);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v24);
            for (uint64_t i = 40; i != -8; i -= 16)
            {
              uint64_t v26 = *(WTF::StringImpl **)&buf[i];
              *(void *)&buf[i] = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2) {
                  WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v14);
                }
                else {
                  *(_DWORD *)v26 -= 2;
                }
              }
            }
            ++v21;
          }
          while (v21 != (uint64_t *)v22);
        }
        int v27 = 1;
        atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
        if (v27 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  uint64_t result = v34;
  uint64_t v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 32);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6A38[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, long long *a2, _OWORD *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 == -1) {
    goto LABEL_15;
  }
  if (v5 != 1)
  {
    uint64_t result = ((uint64_t (*)(long long *, uint64_t))off_1EE9E6A38[v5])(&v23, v4);
LABEL_15:
    *(_DWORD *)(v4 + 32) = -1;
    long long v12 = a3[1];
    *(_OWORD *)uint64_t v4 = *a3;
    *(_OWORD *)(v4 + 16) = v12;
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  long long v6 = a3[1];
  long long v21 = *a3;
  long long v22 = v6;
  uint64_t v7 = (_DWORD *)a2 + 6;
  uint64_t v8 = *((unsigned int *)a2 + 6);
  if (DWORD2(v6) != -1 || v8 != -1)
  {
    BOOL v10 = DWORD2(v6) == -1;
    if (DWORD2(v6) == -1) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = DWORD2(v6);
    }
    if (v8 != -1) {
      BOOL v10 = v11 == v8;
    }
    if (v10)
    {
      return ((uint64_t (*)(long long *, long long *, long long *))off_1EE9E6A90[v11])(&v23, &v21, a2);
    }
    else
    {
      BOOL v14 = (DWORD2(v6) - 2) < 0xFFFFFFFD || (v8 + 1) < 3;
      if (v14) {
        char v15 = &v21;
      }
      else {
        char v15 = a2;
      }
      if (!v14) {
        a2 = &v21;
      }
      long long v16 = a2[1];
      long long v23 = *a2;
      long long v24 = v16;
      if (v14) {
        int v17 = v7;
      }
      else {
        int v17 = (_DWORD *)&v22 + 2;
      }
      *((_DWORD *)a2 + 6) = -1;
      if (v14) {
        int v18 = (_DWORD *)&v22 + 2;
      }
      else {
        int v18 = v7;
      }
      uint64_t v19 = *((unsigned int *)v15 + 6);
      if (v19 != -1)
      {
        uint64_t result = ((uint64_t (*)(char *))off_1EE9E6AA0[v19])(&v25);
        _DWORD *v17 = v19;
      }
      _DWORD *v18 = -1;
      int v20 = DWORD2(v24);
      if (DWORD2(v24) != -1)
      {
        uint64_t result = ((uint64_t (*)(char *, long long *, long long *))off_1EE9E6AA0[DWORD2(v24)])(&v25, v15, &v23);
        _DWORD *v18 = v20;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6A38[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 32) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a2;
  unint64_t v4 = a2[1].n128_u64[0];
  unsigned __int8 v5 = a3[1].n128_u8[0];
  *a2 = *a3;
  a2[1].n128_u8[0] = v5;
  a3[1].n128_u8[0] = v4;
  *a3 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  char v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    __n128 result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 108);
  if (v4)
  {
    unsigned __int8 v5 = *(uint64_t **)(v1 + 96);
    uint64_t v6 = 40 * v4;
    do
    {
      __n128 result = *v5;
      if (*v5) {
        __n128 result = WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);

  return WTF::fastFree(v1, v2);
}

{
  unsigned char *v2;
  BOOL v3;
  unsigned char *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  atomic_uchar *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  void v35[3];

  void v35[2] = *MEMORY[0x1E4F143B8];
  char v2 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2) {
    char v3 = v2[16] >= 4u;
  }
  else {
    char v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(void *)buf = v31;
    v29[0] = v30;
    __n128 result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    int v7 = v30;
    unsigned int v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v8 = v31;
    uint64_t v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    char v9 = *((void *)v4 + 4);
    BOOL v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      WTF::String::utf8();
      long long v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      BOOL v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          BOOL v10 = (WTF *)WTF::fastFree(v10, v11);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      int v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        BOOL v14 = *v13;
        if (v14) {
          break;
        }
        char v15 = *v13;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
        if (v15 == v14)
        {
          long long v16 = WTF::Logger::observers(v10);
          int v17 = *(unsigned int *)(v16 + 12);
          if (v17)
          {
            int v18 = *(uint64_t **)v16;
            uint64_t v19 = *(void *)v16 + 8 * v17;
            do
            {
              int v20 = *v18;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "destroying ");
              uint64_t v34 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v20 + 16))(v20, v4, 4, v29);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                long long v23 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2) {
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                  }
                  else {
                    *(_DWORD *)v23 -= 2;
                  }
                }
              }
              ++v18;
            }
            while (v18 != (uint64_t *)v19);
          }
          long long v24 = 1;
          atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
          if (v24 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    char v25 = v32;
    uint64_t v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 18), v27);
  uint64_t v28 = a1[16];
  if (v28 != -1) {
    ((void (*)(uint8_t *, unsigned int *))off_1EE9E6AD8[v28])(buf, a1 + 14);
  }
  a1[16] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  long long v38 = (char *)v39 + 8;
  *(void *)&v39[0] = 1;
  uint64_t v31 = &v33;
  uint64_t v32 = 1;
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4 == (void *)(a1 + 88))
  {
    uint64_t v5 = *(unsigned int *)(a1 + 84);
    memcpy(&v33, v4, 8 * v5);
  }
  else
  {
    *(void *)(a1 + 72) = a1 + 88;
    uint64_t v31 = (uint64_t *)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
    LODWORD(v32) = *(_DWORD *)(a1 + 80);
  }
  HIDWORD(v32) = v5;
  DWORD1(v39[0]) = 0;
  *(void *)(a1 + 80) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v4);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v28 = v6;
  unsigned int v7 = *(_DWORD *)(a1 + 108);
  int v29 = *(_DWORD *)(a1 + 104);
  unsigned int v30 = v7;
  long long v38 = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)&v39[0] = 0;
  *(void *)(a1 + 104) = 0;
  atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v8);
  if (HIDWORD(v32))
  {
    uint64_t v11 = v31;
    uint64_t v12 = 8 * HIDWORD(v32);
    do
    {
      uint64_t v13 = *v11;
      if (!*(void *)(*v11 + 16)
        || (int v14 = atomic_load((unsigned __int8 *)(a1 + 113)), v14 == 1)
        && (atomic_uchar *volatile v9 = (atomic_uchar *volatile)(*(uint64_t (**)(void))(**(void **)(v13 + 16) + 24))(*(void *)(v13 + 16)),
            v9))
      {
        if (*(unsigned char *)(v13 + 56))
        {
          long long v38 = (atomic_uchar *)v13;
          atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
          if (*v9) {
            BOOL v17 = v9[16] >= 4u;
          }
          else {
            BOOL v17 = 0;
          }
          if (v17) {
            atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v9, a1, (uint64_t)&v38, (WTF::Logger::LogSiteIdentifier *)(v13 + 24));
          }
        }
        else
        {
          atomic_uchar *volatile v18 = *a2;
          int v19 = 1;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
          if (v19 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v18);
          }
          if (WTF::NativePromise<void,void,0u>::hasRunnable(a1))
          {
            WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v34, a1);
            uint64_t v20 = v34;
            (*(void (**)(atomic_uchar **__return_ptr, uint64_t))(*(void *)v34 + 16))(&v38, v34);
            (*(void (**)(uint64_t, uint64_t, atomic_uchar **))(*(void *)v13 + 24))(v13, a1, &v38);
            (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          }
          else
          {
            WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResult(&v38, a1);
            (*(void (**)(uint64_t, uint64_t, atomic_uchar **))(*(void *)v13 + 24))(v13, a1, &v38);
          }
          char v21 = 0;
          atomic_uchar *volatile v9 = *a2;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
          if (v21) {
            atomic_uchar *volatile v9 = (atomic_uchar *volatile)MEMORY[0x19972E8D0](v9, v10);
          }
        }
      }
      else
      {
        uint64_t v15 = *(void *)(v13 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
        atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
        long long v16 = (atomic_uchar *)WTF::fastMalloc((WTF *)0x20);
        *(void *)long long v16 = &unk_1EE9E6B00;
        *((void *)v16 + 1) = v13;
        *((void *)v16 + 2) = v13;
        *((void *)v16 + 3) = a1;
        long long v38 = v16;
        (*(void (**)(uint64_t, atomic_uchar **))(*(void *)v15 + 16))(v15, &v38);
        atomic_uchar *volatile v9 = v38;
        long long v38 = 0;
        if (v9) {
          atomic_uchar *volatile v9 = (atomic_uchar *volatile)(*(uint64_t (**)(atomic_uchar *volatile))(*(void *)v9 + 8))(v9);
        }
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  if (v7)
  {
    uint64_t v22 = v6 + 40 * v7;
    uint64_t v23 = a1 + 56;
    do
    {
      long long v24 = *(atomic_uint **)v6;
      *(void *)uint64_t v6 = 0;
      long long v38 = (atomic_uchar *)v24;
      long long v25 = *(_OWORD *)(v6 + 24);
      v39[0] = *(_OWORD *)(v6 + 8);
      v39[1] = v25;
      if (v24)
      {
        atomic_fetch_add(v24 + 2, 1u);
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        int v36 = "<chained promise>";
        uint64_t v37 = 0;
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v24, v23, (WTF::Logger::LogSiteIdentifier *)&v34);
        if (atomic_fetch_add(v24 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v24 + 2);
          (*(void (**)(atomic_uint *))(*(void *)v24 + 16))(v24);
        }
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        int v36 = "<chained promise>";
        uint64_t v37 = 0;
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v23, (WTF::Logger::LogSiteIdentifier *)&v34);
      }
      WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v38);
      v6 += 40;
    }
    while (v6 != v22);
  }
  WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v10);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v26);
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  char v4 = 0;
  uint64_t v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 64) == 2)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    void *v3 = v6;
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResult(v8);
  }
  return result;
}

void *WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResult(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  char v4 = 0;
  uint64_t v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = (void *)MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 64) == 1)
  {
    void *v3 = *(void *)(a2 + 56);
    int v6 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1)
    {
      return (void *)WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    int v7 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E6B00;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E6B00;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  char v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  uint64_t v1 = (unsigned char *)*((void *)a1 + 1);
  uint64_t v2 = *((void *)a1 + 3);
  if (v1[56])
  {
    uint64_t v10 = *((void *)a1 + 1);
    uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v4 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)&v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<void,void,0u>::hasRunnable(*((void *)a1 + 3));
    uint64_t v7 = *((void *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v9, *((void *)a1 + 3));
      uint64_t v8 = v9;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v9 + 16))(&v10, v9);
      (*(void (**)(unsigned char *, uint64_t, uint64_t *))(*(void *)v1 + 24))(v1, v7, &v10);
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResult(&v10, *((void *)a1 + 3));
      return (WTF::StringImpl *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *))(*(void *)v1 + 24))(v1, v7, &v10);
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  int v14 = v7;
  char v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  uint64_t v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 64);
  uint64_t v11 = *(unsigned int *)(a2 + 8);
  if (v10 == -1)
  {
    if (v11 == -1) {
      goto LABEL_14;
    }
  }
  else if (v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1EE9E6AD8[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 64) = -1;
    goto LABEL_14;
  }
  uint64_t v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1EE9E6B18[v11])(&v16);
LABEL_14:
  uint64_t result = (WTF::Lock *)WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (v15)
  {
    uint64_t result = v14;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 8);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6AD8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_15;
  }
  if (v5 != 1)
  {
    uint64_t result = ((uint64_t (*)(unint64_t *, uint64_t))off_1EE9E6AD8[v5])(&v21, v4);
LABEL_15:
    *(_DWORD *)(v4 + 8) = -1;
    *(void *)uint64_t v4 = *a3;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  unint64_t v20 = *a3;
  char v6 = (_DWORD *)a2 + 1;
  uint64_t v7 = *((unsigned int *)a2 + 1);
  if (HIDWORD(v20) != -1 || v7 != -1)
  {
    BOOL v9 = HIDWORD(v20) == -1;
    if (HIDWORD(v20) == -1) {
      uint64_t v10 = -1;
    }
    else {
      uint64_t v10 = HIDWORD(v20);
    }
    if (v7 != -1) {
      BOOL v9 = v10 == v7;
    }
    if (v9)
    {
      return ((uint64_t (*)(unint64_t *, unint64_t *, unint64_t *))off_1EE9E6B30[v10])(&v21, &v20, a2);
    }
    else
    {
      BOOL v12 = (HIDWORD(v20) - 2) < 0xFFFFFFFD || (v7 + 1) < 3;
      BOOL v13 = !v12;
      if (v12) {
        int v14 = &v20;
      }
      else {
        int v14 = a2;
      }
      if (!v12) {
        a2 = &v20;
      }
      unint64_t v15 = *a2;
      unint64_t v21 = *a2;
      if (v13) {
        uint64_t v16 = (_DWORD *)&v20 + 1;
      }
      else {
        uint64_t v16 = v6;
      }
      *((_DWORD *)a2 + 1) = -1;
      if (v13) {
        BOOL v17 = v6;
      }
      else {
        BOOL v17 = (_DWORD *)&v20 + 1;
      }
      uint64_t v18 = *((unsigned int *)v14 + 1);
      unint64_t v19 = HIDWORD(v15);
      if (v18 != -1)
      {
        uint64_t result = ((uint64_t (*)(char *))off_1EE9E6B40[v18])(&v22);
        *uint64_t v16 = v18;
      }
      _DWORD *v17 = -1;
      if (v19 != -1)
      {
        uint64_t result = ((uint64_t (*)(char *, unint64_t *, unint64_t *))off_1EE9E6B40[v19])(&v22, v14, &v21);
        _DWORD *v17 = v19;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6AD8[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJbN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbS9_EEESL_EEEDcSC_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJbN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbS9_EEESL_EEEDcSC_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJbSA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbSA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJbSA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbSA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  char v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 132);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(v1 + 120);
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        uint64_t result = WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);

  return WTF::fastFree(v1, v2);
}

{
  unsigned char *v2;
  BOOL v3;
  unsigned char *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  atomic_uchar *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  void v35[3];

  void v35[2] = *MEMORY[0x1E4F143B8];
  char v2 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2) {
    char v3 = v2[16] >= 4u;
  }
  else {
    char v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(void *)buf = v31;
    v29[0] = v30;
    uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    int v7 = v30;
    unsigned int v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v8 = v31;
    uint64_t v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    char v9 = *((void *)v4 + 4);
    uint64_t v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      WTF::String::utf8();
      BOOL v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          uint64_t v10 = (WTF *)WTF::fastFree(v10, v11);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      BOOL v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v14 = *v13;
        if (v14) {
          break;
        }
        unint64_t v15 = *v13;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
        if (v15 == v14)
        {
          uint64_t v16 = WTF::Logger::observers(v10);
          BOOL v17 = *(unsigned int *)(v16 + 12);
          if (v17)
          {
            uint64_t v18 = *(uint64_t **)v16;
            unint64_t v19 = *(void *)v16 + 8 * v17;
            do
            {
              unint64_t v20 = *v18;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "destroying ");
              uint64_t v34 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v20 + 16))(v20, v4, 4, v29);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v23 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2) {
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                  }
                  else {
                    *(_DWORD *)v23 -= 2;
                  }
                }
              }
              ++v18;
            }
            while (v18 != (uint64_t *)v19);
          }
          long long v24 = 1;
          atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
          if (v24 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    long long v25 = v32;
    uint64_t v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 30), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v27);
  uint64_t v28 = a1[22];
  if (v28 != -1) {
    ((void (*)(uint8_t *, unsigned int *))off_1EE9E6B78[v28])(buf, a1 + 14);
  }
  a1[22] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(v4)
         + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6B90[v3])(&v5, a2);
  }
  *(_DWORD *)(a2 + 24) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  uint64_t v39 = (char *)&v40 + 8;
  *(void *)&long long v40 = 1;
  uint64_t v31 = (uint64_t *)v33;
  uint64_t v32 = 1;
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4 == (void *)(a1 + 112))
  {
    uint64_t v5 = *(unsigned int *)(a1 + 108);
    memcpy(v33, v4, 8 * v5);
  }
  else
  {
    *(void *)(a1 + 96) = a1 + 112;
    uint64_t v31 = (uint64_t *)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 108);
    LODWORD(v32) = *(_DWORD *)(a1 + 104);
  }
  HIDWORD(v32) = v5;
  DWORD1(v40) = 0;
  *(void *)(a1 + 104) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v4);
  uint64_t v6 = *(void *)(a1 + 120);
  uint64_t v28 = v6;
  unsigned int v7 = *(_DWORD *)(a1 + 132);
  int v29 = *(_DWORD *)(a1 + 128);
  unsigned int v30 = v7;
  uint64_t v39 = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)&long long v40 = 0;
  *(void *)(a1 + 128) = 0;
  atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v8);
  if (HIDWORD(v32))
  {
    uint64_t v11 = v31;
    uint64_t v12 = 8 * HIDWORD(v32);
    do
    {
      uint64_t v13 = *v11;
      if (!*(void *)(*v11 + 16)
        || (int v14 = atomic_load((unsigned __int8 *)(a1 + 137)), v14 == 1)
        && (atomic_uchar *volatile v9 = (atomic_uchar *volatile)(*(uint64_t (**)(void))(**(void **)(v13 + 16) + 24))(*(void *)(v13 + 16)),
            v9))
      {
        if (*(unsigned char *)(v13 + 56))
        {
          uint64_t v39 = (atomic_uchar *)v13;
          atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
          if (*v9) {
            BOOL v17 = v9[16] >= 4u;
          }
          else {
            BOOL v17 = 0;
          }
          if (v17) {
            atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v9, a1, (uint64_t)&v39, (WTF::Logger::LogSiteIdentifier *)(v13 + 24));
          }
        }
        else
        {
          atomic_uchar *volatile v18 = *a2;
          int v19 = 1;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
          if (v19 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v18);
          }
          if (WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::hasRunnable(a1))
          {
            WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v35, a1);
            uint64_t v20 = v35;
            (*(void (**)(atomic_uchar **__return_ptr, uint64_t))(*(void *)v35 + 16))(&v39, v35);
            (*(void (**)(uint64_t, uint64_t, atomic_uchar **))(*(void *)v13 + 24))(v13, a1, &v39);
            if (v41 != -1) {
              ((void (*)(char *, atomic_uchar **))off_1EE9E6B90[v41])(&v34, &v39);
            }
            LODWORD(v41) = -1;
            (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          }
          else
          {
            WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&v39, a1);
            (*(void (**)(uint64_t, uint64_t, atomic_uchar **))(*(void *)v13 + 24))(v13, a1, &v39);
            if (v41 != -1) {
              ((void (*)(uint64_t *, atomic_uchar **))off_1EE9E6B90[v41])(&v35, &v39);
            }
          }
          char v21 = 0;
          atomic_uchar *volatile v9 = *a2;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
          if (v21) {
            atomic_uchar *volatile v9 = (atomic_uchar *volatile)MEMORY[0x19972E8D0]();
          }
        }
      }
      else
      {
        uint64_t v15 = *(void *)(v13 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
        atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
        uint64_t v16 = (atomic_uchar *)WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v16 = &unk_1EE9E6BC0;
        *((void *)v16 + 1) = v13;
        *((void *)v16 + 2) = v13;
        *((void *)v16 + 3) = a1;
        uint64_t v39 = v16;
        (*(void (**)(uint64_t, atomic_uchar **))(*(void *)v15 + 16))(v15, &v39);
        atomic_uchar *volatile v9 = v39;
        uint64_t v39 = 0;
        if (v9) {
          atomic_uchar *volatile v9 = (atomic_uchar *volatile)(*(uint64_t (**)(atomic_uchar *volatile))(*(void *)v9 + 8))(v9);
        }
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  if (v7)
  {
    uint64_t v22 = v6 + 40 * v7;
    uint64_t v23 = a1 + 56;
    do
    {
      long long v24 = *(atomic_uint **)v6;
      *(void *)uint64_t v6 = 0;
      uint64_t v39 = (atomic_uchar *)v24;
      long long v25 = *(_OWORD *)(v6 + 24);
      long long v40 = *(_OWORD *)(v6 + 8);
      long long v41 = v25;
      if (v24)
      {
        atomic_fetch_add(v24 + 2, 1u);
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        uint64_t v37 = "<chained promise>";
        uint64_t v38 = 0;
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v24, v23, (WTF::Logger::LogSiteIdentifier *)&v35);
        if (atomic_fetch_add(v24 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v24 + 2);
          (*(void (**)(atomic_uint *))(*(void *)v24 + 16))(v24);
        }
      }
      else
      {
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        uint64_t v37 = "<chained promise>";
        uint64_t v38 = 0;
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v23, (WTF::Logger::LogSiteIdentifier *)&v35);
      }
      WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v39);
      v6 += 40;
    }
    while (v6 != v22);
  }
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v10);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v26);
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t a1, uint64_t a2)
{
  char v4 = 0;
  uint64_t v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 88) == 1)
  {
    *(unsigned char *)a1 = 0;
    *(_DWORD *)(a1 + 24) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(a1, a2 + 56);
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(v8, v9);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6B90[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E6BA0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  *(void *)(a2 + 16) = a3[2];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E6BC0;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E6BC0;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  uint64_t v1 = (unsigned char *)*((void *)a1 + 1);
  uint64_t v2 = *((void *)a1 + 3);
  if (v1[56])
  {
    v10[0] = *((void *)a1 + 1);
    uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v4 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::hasRunnable(*((void *)a1 + 3));
    uint64_t v7 = *((void *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v9, v7);
      uint64_t v8 = v9;
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v9 + 16))(v10, v9);
      (*(void (**)(unsigned char *, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v10);
      if (v11 != -1) {
        ((void (*)(char *, void *))off_1EE9E6B90[v11])(&v12, v10);
      }
      int v11 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)v10, v7);
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned char *, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v10);
      if (v11 != -1) {
        return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, void *))off_1EE9E6B90[v11])(&v9, v10);
      }
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  int v14 = v7;
  char v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  uint64_t v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 88);
  uint64_t v11 = *(unsigned int *)(a2 + 32);
  if (v10 == -1)
  {
    if (v11 == -1) {
      goto LABEL_14;
    }
  }
  else if (v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1EE9E6B78[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 88) = -1;
    goto LABEL_14;
  }
  uint64_t v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1EE9E6BD8[v11])(&v16);
LABEL_14:
  uint64_t result = (WTF::Lock *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (v15)
  {
    uint64_t result = v14;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 32);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6B78[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 32);
  if (v5 == -1) {
    goto LABEL_15;
  }
  if (v5 != 1)
  {
    ((void (*)(unsigned char *, uint64_t))off_1EE9E6B78[v5])(v17, v4);
LABEL_15:
    *(_DWORD *)(v4 + 32) = -1;
    *(unsigned char *)uint64_t v4 = 0;
    *(_DWORD *)(v4 + 24) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(v4, a3);
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  v15[0] = 0;
  unsigned int v16 = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, a3);
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v16 != -1 || v8 != -1)
  {
    BOOL v10 = v16 == -1;
    if (v16 == -1) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = v16;
    }
    if (v8 != -1) {
      BOOL v10 = v11 == v8;
    }
    if (v10)
    {
      uint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *, uint64_t))off_1EE9E6BF0[v11])(v17, v15, a2);
    }
    else
    {
      if (v16 == 1 || v16 == -1)
      {
        char v12 = v15;
        if (v8 == 1) {
          int v13 = v15;
        }
        else {
          int v13 = (unsigned char *)a2;
        }
        if (v8 == 1) {
          char v12 = (unsigned char *)a2;
        }
        if (v8 == -1) {
          int v14 = v15;
        }
        else {
          int v14 = v13;
        }
        if (v8 != -1) {
          a2 = (uint64_t)v12;
        }
      }
      else
      {
        int v14 = v15;
      }
      v17[0] = 0;
      int v18 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, a2);
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>(a2, (uint64_t)v14);
      uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>((uint64_t)v14, (uint64_t)v17);
      if (v18 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9E6B90[v18])(&v19, v17);
      }
    }
  }
  if (v16 != -1) {
    return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9E6B90[v16])(v17, v15);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6B78[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 32) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6B90[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E6C00[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine10CacheInfosENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  char v6 = a2[2];
  void v11[2] = v6;
  char v7 = *(WTF::StringImpl **)a3;
  *(void *)a3 = 0;
  *a2 = v7;
  LODWORD(v7) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = 0;
  *((_DWORD *)a2 + 2) = v7;
  LODWORD(v7) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = 0;
  *((_DWORD *)a2 + 3) = v7;
  a2[2] = *(WTF::StringImpl **)(a3 + 16);
  unsigned int v8 = *(_DWORD *)(a3 + 12);
  if (v8) {
    WTF::VectorDestructor<true,WebCore::DOMCacheEngine::CacheInfo>::destruct(*(WTF::StringImpl **)a3, (WTF::StringImpl *)(*(void *)a3 + 24 * v8));
  }
  char v9 = *(WTF **)a3;
  if (*(void *)a3)
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  v11[0] = 0;
  v11[1] = 0;
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v5;
  *(void *)(a3 + 16) = v6;
  return WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine10CacheInfosENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  *(void *)(a2 + 16) = a3[2];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 124);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(v1 + 112);
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        uint64_t result = WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);

  return WTF::fastFree(v1, v2);
}

{
  unsigned char *v2;
  BOOL v3;
  unsigned char *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  atomic_uchar *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  void v35[3];

  void v35[2] = *MEMORY[0x1E4F143B8];
  char v2 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2) {
    uint64_t v3 = v2[16] >= 4u;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(void *)buf = v31;
    v29[0] = v30;
    uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    int v7 = v30;
    unsigned int v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    unsigned int v8 = v31;
    uint64_t v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    char v9 = *((void *)v4 + 4);
    BOOL v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      WTF::String::utf8();
      char v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      BOOL v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          BOOL v10 = (WTF *)WTF::fastFree(v10, v11);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      int v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v14 = *v13;
        if (v14) {
          break;
        }
        char v15 = *v13;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
        if (v15 == v14)
        {
          unsigned int v16 = WTF::Logger::observers(v10);
          BOOL v17 = *(unsigned int *)(v16 + 12);
          if (v17)
          {
            int v18 = *(uint64_t **)v16;
            char v19 = *(void *)v16 + 8 * v17;
            do
            {
              uint64_t v20 = *v18;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "destroying ");
              char v34 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v20 + 16))(v20, v4, 4, v29);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v23 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2) {
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                  }
                  else {
                    *(_DWORD *)v23 -= 2;
                  }
                }
              }
              ++v18;
            }
            while (v18 != (uint64_t *)v19);
          }
          long long v24 = 1;
          atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
          if (v24 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    long long v25 = v32;
    uint64_t v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 28), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 22), v27);
  uint64_t v28 = a1[20];
  if (v28 != -1) {
    ((void (*)(uint8_t *, unsigned int *))off_1EE9E6C38[v28])(buf, a1 + 14);
  }
  a1[20] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(v4)
         + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSK_SO_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 16);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6C50[v3])(&v5, a2);
  }
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSK_SO_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  uint64_t v39 = (char *)v40 + 8;
  *(void *)&v40[0] = 1;
  uint64_t v31 = (uint64_t *)v33;
  uint64_t v32 = 1;
  uint64_t v4 = *(void **)(a1 + 88);
  if (v4 == (void *)(a1 + 104))
  {
    uint64_t v5 = *(unsigned int *)(a1 + 100);
    memcpy(v33, v4, 8 * v5);
  }
  else
  {
    *(void *)(a1 + 88) = a1 + 104;
    uint64_t v31 = (uint64_t *)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 100);
    LODWORD(v32) = *(_DWORD *)(a1 + 96);
  }
  HIDWORD(v32) = v5;
  DWORD1(v40[0]) = 0;
  *(void *)(a1 + 96) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v4);
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v28 = v6;
  unsigned int v7 = *(_DWORD *)(a1 + 124);
  int v29 = *(_DWORD *)(a1 + 120);
  unsigned int v30 = v7;
  uint64_t v39 = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)&v40[0] = 0;
  *(void *)(a1 + 120) = 0;
  atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v8);
  if (HIDWORD(v32))
  {
    uint64_t v11 = v31;
    uint64_t v12 = 8 * HIDWORD(v32);
    do
    {
      uint64_t v13 = *v11;
      if (!*(void *)(*v11 + 16)
        || (int v14 = atomic_load((unsigned __int8 *)(a1 + 129)), v14 == 1)
        && (atomic_uchar *volatile v9 = (atomic_uchar *volatile)(*(uint64_t (**)(void))(**(void **)(v13 + 16) + 24))(*(void *)(v13 + 16)),
            v9))
      {
        if (*(unsigned char *)(v13 + 56))
        {
          uint64_t v39 = (atomic_uchar *)v13;
          atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
          if (*v9) {
            BOOL v17 = v9[16] >= 4u;
          }
          else {
            BOOL v17 = 0;
          }
          if (v17) {
            atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v9, a1, (uint64_t)&v39, (WTF::Logger::LogSiteIdentifier *)(v13 + 24));
          }
        }
        else
        {
          atomic_uchar *volatile v18 = *a2;
          int v19 = 1;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
          if (v19 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v18);
          }
          if (WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(a1))
          {
            WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v35, a1);
            uint64_t v20 = v35;
            (*(void (**)(atomic_uchar **__return_ptr, uint64_t))(*(void *)v35 + 16))(&v39, v35);
            (*(void (**)(uint64_t, uint64_t, atomic_uchar **))(*(void *)v13 + 24))(v13, a1, &v39);
            if (DWORD2(v40[0]) != -1) {
              ((void (*)(char *, atomic_uchar **))off_1EE9E6C50[DWORD2(v40[0])])(&v34, &v39);
            }
            DWORD2(v40[0]) = -1;
            (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          }
          else
          {
            WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&v39, a1);
            (*(void (**)(uint64_t, uint64_t, atomic_uchar **))(*(void *)v13 + 24))(v13, a1, &v39);
            if (DWORD2(v40[0]) != -1) {
              ((void (*)(uint64_t *, atomic_uchar **))off_1EE9E6C50[DWORD2(v40[0])])(&v35, &v39);
            }
          }
          char v21 = 0;
          atomic_uchar *volatile v9 = *a2;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
          if (v21) {
            atomic_uchar *volatile v9 = (atomic_uchar *volatile)MEMORY[0x19972E8D0]();
          }
        }
      }
      else
      {
        uint64_t v15 = *(void *)(v13 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
        atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
        unsigned int v16 = (atomic_uchar *)WTF::fastMalloc((WTF *)0x20);
        *(void *)unsigned int v16 = &unk_1EE9E6C80;
        *((void *)v16 + 1) = v13;
        *((void *)v16 + 2) = v13;
        *((void *)v16 + 3) = a1;
        uint64_t v39 = v16;
        (*(void (**)(uint64_t, atomic_uchar **))(*(void *)v15 + 16))(v15, &v39);
        atomic_uchar *volatile v9 = v39;
        uint64_t v39 = 0;
        if (v9) {
          atomic_uchar *volatile v9 = (atomic_uchar *volatile)(*(uint64_t (**)(atomic_uchar *volatile))(*(void *)v9 + 8))(v9);
        }
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  if (v7)
  {
    uint64_t v22 = v6 + 40 * v7;
    uint64_t v23 = a1 + 56;
    do
    {
      long long v24 = *(atomic_uint **)v6;
      *(void *)uint64_t v6 = 0;
      uint64_t v39 = (atomic_uchar *)v24;
      long long v25 = *(_OWORD *)(v6 + 24);
      v40[0] = *(_OWORD *)(v6 + 8);
      v40[1] = v25;
      if (v24)
      {
        atomic_fetch_add(v24 + 2, 1u);
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        uint64_t v37 = "<chained promise>";
        uint64_t v38 = 0;
        WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v24, v23, (WTF::Logger::LogSiteIdentifier *)&v35);
        if (atomic_fetch_add(v24 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v24 + 2);
          (*(void (**)(atomic_uint *))(*(void *)v24 + 16))(v24);
        }
      }
      else
      {
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        uint64_t v37 = "<chained promise>";
        uint64_t v38 = 0;
        WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v23, (WTF::Logger::LogSiteIdentifier *)&v35);
      }
      WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v39);
      v6 += 40;
    }
    while (v6 != v22);
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v10);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v26);
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  char v4 = 0;
  uint64_t v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 80) == 2)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    void *v3 = v6;
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult(v8);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t a1, uint64_t a2)
{
  char v4 = 0;
  uint64_t v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 80) == 1)
  {
    *(unsigned char *)a1 = 0;
    *(_DWORD *)(a1 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(a1, a2 + 56);
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(v8, v9);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6C50[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E6C60[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E6C80;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E6C80;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  uint64_t v1 = (unsigned char *)*((void *)a1 + 1);
  uint64_t v2 = *((void *)a1 + 3);
  if (v1[56])
  {
    v10[0] = *((void *)a1 + 1);
    uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v4 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(*((void *)a1 + 3));
    uint64_t v7 = *((void *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v9, v7);
      uint64_t v8 = v9;
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v9 + 16))(v10, v9);
      (*(void (**)(unsigned char *, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v10);
      if (v11 != -1) {
        ((void (*)(char *, void *))off_1EE9E6C50[v11])(&v12, v10);
      }
      int v11 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)v10, v7);
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned char *, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v10);
      if (v11 != -1) {
        return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, void *))off_1EE9E6C50[v11])(&v9, v10);
      }
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  int v14 = v7;
  char v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  uint64_t v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 80);
  uint64_t v11 = *(unsigned int *)(a2 + 24);
  if (v10 == -1)
  {
    if (v11 == -1) {
      goto LABEL_14;
    }
  }
  else if (v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1EE9E6C38[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 80) = -1;
    goto LABEL_14;
  }
  uint64_t v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1EE9E6C98[v11])(&v16);
LABEL_14:
  uint64_t result = (WTF::Lock *)WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (v15)
  {
    uint64_t result = v14;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSK_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 24);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6C38[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSK_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_15;
  }
  if (v5 != 1)
  {
    ((void (*)(unsigned char *, uint64_t))off_1EE9E6C38[v5])(v17, v4);
LABEL_15:
    *(_DWORD *)(v4 + 24) = -1;
    *(unsigned char *)uint64_t v4 = 0;
    *(_DWORD *)(v4 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(v4, a3);
    *(_DWORD *)(v4 + 24) = 1;
    return result;
  }
  v15[0] = 0;
  unsigned int v16 = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, a3);
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  if (v16 != -1 || v8 != -1)
  {
    BOOL v10 = v16 == -1;
    if (v16 == -1) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = v16;
    }
    if (v8 != -1) {
      BOOL v10 = v11 == v8;
    }
    if (v10)
    {
      uint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *, uint64_t))off_1EE9E6CB0[v11])(v17, v15, a2);
    }
    else
    {
      if (v16 == 1 || v16 == -1)
      {
        char v12 = v15;
        if (v8 == 1) {
          int v13 = v15;
        }
        else {
          int v13 = (unsigned char *)a2;
        }
        if (v8 == 1) {
          char v12 = (unsigned char *)a2;
        }
        if (v8 == -1) {
          int v14 = v15;
        }
        else {
          int v14 = v13;
        }
        if (v8 != -1) {
          a2 = (uint64_t)v12;
        }
      }
      else
      {
        int v14 = v15;
      }
      v17[0] = 0;
      int v18 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, a2);
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>(a2, (uint64_t)v14);
      uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>((uint64_t)v14, (uint64_t)v17);
      if (v18 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9E6C50[v18])(&v19, v17);
      }
    }
  }
  if (v16 != -1) {
    return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9E6C50[v16])(v17, v15);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSK_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6C38[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6C50[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E6CC0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSA_5ErrorEEE6__swapB8sn180100ERSG_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SF_EEESR_EEEDcSI_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSA_5ErrorEEE6__swapB8sn180100ERSG_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SF_EEESR_EEEDcSI_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSF_SG_EEEEEvRSI_OT_EUlRSN_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEEOSW_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSF_SG_EEEEEvRSI_OT_EUlRSN_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEEOSW_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 124);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(v1 + 112);
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        uint64_t result = WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);

  return WTF::fastFree(v1, v2);
}

{
  unsigned char *v2;
  BOOL v3;
  unsigned char *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  atomic_uchar *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  void v35[3];

  void v35[2] = *MEMORY[0x1E4F143B8];
  char v2 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2) {
    uint64_t v3 = v2[16] >= 4u;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(void *)buf = v31;
    v29[0] = v30;
    uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    int v7 = v30;
    unsigned int v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v8 = v31;
    uint64_t v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    char v9 = *((void *)v4 + 4);
    BOOL v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      WTF::String::utf8();
      char v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      BOOL v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          BOOL v10 = (WTF *)WTF::fastFree(v10, v11);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      int v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v14 = *v13;
        if (v14) {
          break;
        }
        char v15 = *v13;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
        if (v15 == v14)
        {
          unsigned int v16 = WTF::Logger::observers(v10);
          BOOL v17 = *(unsigned int *)(v16 + 12);
          if (v17)
          {
            int v18 = *(uint64_t **)v16;
            char v19 = *(void *)v16 + 8 * v17;
            do
            {
              uint64_t v20 = *v18;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "destroying ");
              char v34 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v20 + 16))(v20, v4, 4, v29);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v23 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2) {
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                  }
                  else {
                    *(_DWORD *)v23 -= 2;
                  }
                }
              }
              ++v18;
            }
            while (v18 != (uint64_t *)v19);
          }
          long long v24 = 1;
          atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
          if (v24 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    long long v25 = v32;
    uint64_t v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 28), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 22), v27);
  uint64_t v28 = a1[20];
  if (v28 != -1) {
    ((void (*)(uint8_t *, unsigned int *))off_1EE9E6CF8[v28])(buf, a1 + 14);
  }
  a1[20] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(v4)
         + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 16);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6D10[v3])(&v5, a2);
  }
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  uint64_t v39 = (char *)v40 + 8;
  *(void *)&v40[0] = 1;
  uint64_t v31 = (uint64_t *)v33;
  uint64_t v32 = 1;
  uint64_t v4 = *(void **)(a1 + 88);
  if (v4 == (void *)(a1 + 104))
  {
    uint64_t v5 = *(unsigned int *)(a1 + 100);
    memcpy(v33, v4, 8 * v5);
  }
  else
  {
    *(void *)(a1 + 88) = a1 + 104;
    uint64_t v31 = (uint64_t *)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 100);
    LODWORD(v32) = *(_DWORD *)(a1 + 96);
  }
  HIDWORD(v32) = v5;
  DWORD1(v40[0]) = 0;
  *(void *)(a1 + 96) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v4);
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v28 = v6;
  unsigned int v7 = *(_DWORD *)(a1 + 124);
  int v29 = *(_DWORD *)(a1 + 120);
  unsigned int v30 = v7;
  uint64_t v39 = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)&v40[0] = 0;
  *(void *)(a1 + 120) = 0;
  atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v8);
  if (HIDWORD(v32))
  {
    uint64_t v11 = v31;
    uint64_t v12 = 8 * HIDWORD(v32);
    do
    {
      uint64_t v13 = *v11;
      if (!*(void *)(*v11 + 16)
        || (int v14 = atomic_load((unsigned __int8 *)(a1 + 129)), v14 == 1)
        && (atomic_uchar *volatile v9 = (atomic_uchar *volatile)(*(uint64_t (**)(void))(**(void **)(v13 + 16) + 24))(*(void *)(v13 + 16)),
            v9))
      {
        if (*(unsigned char *)(v13 + 56))
        {
          uint64_t v39 = (atomic_uchar *)v13;
          atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
          if (*v9) {
            BOOL v17 = v9[16] >= 4u;
          }
          else {
            BOOL v17 = 0;
          }
          if (v17) {
            atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v9, a1, (uint64_t)&v39, (WTF::Logger::LogSiteIdentifier *)(v13 + 24));
          }
        }
        else
        {
          atomic_uchar *volatile v18 = *a2;
          int v19 = 1;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
          if (v19 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v18);
          }
          if (WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(a1))
          {
            WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v35, a1);
            uint64_t v20 = v35;
            (*(void (**)(atomic_uchar **__return_ptr, uint64_t))(*(void *)v35 + 16))(&v39, v35);
            (*(void (**)(uint64_t, uint64_t, atomic_uchar **))(*(void *)v13 + 24))(v13, a1, &v39);
            if (DWORD2(v40[0]) != -1) {
              ((void (*)(char *, atomic_uchar **))off_1EE9E6D10[DWORD2(v40[0])])(&v34, &v39);
            }
            DWORD2(v40[0]) = -1;
            (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          }
          else
          {
            WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&v39, a1);
            (*(void (**)(uint64_t, uint64_t, atomic_uchar **))(*(void *)v13 + 24))(v13, a1, &v39);
            if (DWORD2(v40[0]) != -1) {
              ((void (*)(uint64_t *, atomic_uchar **))off_1EE9E6D10[DWORD2(v40[0])])(&v35, &v39);
            }
          }
          char v21 = 0;
          atomic_uchar *volatile v9 = *a2;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
          if (v21) {
            atomic_uchar *volatile v9 = (atomic_uchar *volatile)MEMORY[0x19972E8D0]();
          }
        }
      }
      else
      {
        uint64_t v15 = *(void *)(v13 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
        atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
        unsigned int v16 = (atomic_uchar *)WTF::fastMalloc((WTF *)0x20);
        *(void *)unsigned int v16 = &unk_1EE9E6D40;
        *((void *)v16 + 1) = v13;
        *((void *)v16 + 2) = v13;
        *((void *)v16 + 3) = a1;
        uint64_t v39 = v16;
        (*(void (**)(uint64_t, atomic_uchar **))(*(void *)v15 + 16))(v15, &v39);
        atomic_uchar *volatile v9 = v39;
        uint64_t v39 = 0;
        if (v9) {
          atomic_uchar *volatile v9 = (atomic_uchar *volatile)(*(uint64_t (**)(atomic_uchar *volatile))(*(void *)v9 + 8))(v9);
        }
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  if (v7)
  {
    uint64_t v22 = v6 + 40 * v7;
    uint64_t v23 = a1 + 56;
    do
    {
      long long v24 = *(atomic_uint **)v6;
      *(void *)uint64_t v6 = 0;
      uint64_t v39 = (atomic_uchar *)v24;
      long long v25 = *(_OWORD *)(v6 + 24);
      v40[0] = *(_OWORD *)(v6 + 8);
      v40[1] = v25;
      if (v24)
      {
        atomic_fetch_add(v24 + 2, 1u);
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        uint64_t v37 = "<chained promise>";
        uint64_t v38 = 0;
        WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v24, v23, (WTF::Logger::LogSiteIdentifier *)&v35);
        if (atomic_fetch_add(v24 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v24 + 2);
          (*(void (**)(atomic_uint *))(*(void *)v24 + 16))(v24);
        }
      }
      else
      {
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        uint64_t v37 = "<chained promise>";
        uint64_t v38 = 0;
        WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v23, (WTF::Logger::LogSiteIdentifier *)&v35);
      }
      WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v39);
      v6 += 40;
    }
    while (v6 != v22);
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v10);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v26);
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t a1, uint64_t a2)
{
  char v4 = 0;
  uint64_t v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 80) == 1)
  {
    *(unsigned char *)a1 = 0;
    *(_DWORD *)(a1 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(a1, a2 + 56);
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(v8, v9);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6D10[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E6D20[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E6D40;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E6D40;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  uint64_t v1 = (unsigned char *)*((void *)a1 + 1);
  uint64_t v2 = *((void *)a1 + 3);
  if (v1[56])
  {
    v10[0] = *((void *)a1 + 1);
    uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v4 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(*((void *)a1 + 3));
    uint64_t v7 = *((void *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v9, v7);
      uint64_t v8 = v9;
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v9 + 16))(v10, v9);
      (*(void (**)(unsigned char *, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v10);
      if (v11 != -1) {
        ((void (*)(char *, void *))off_1EE9E6D10[v11])(&v12, v10);
      }
      int v11 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)v10, v7);
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned char *, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v10);
      if (v11 != -1) {
        return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, void *))off_1EE9E6D10[v11])(&v9, v10);
      }
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  int v14 = v7;
  char v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  uint64_t v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 80);
  uint64_t v11 = *(unsigned int *)(a2 + 24);
  if (v10 == -1)
  {
    if (v11 == -1) {
      goto LABEL_14;
    }
  }
  else if (v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1EE9E6CF8[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 80) = -1;
    goto LABEL_14;
  }
  uint64_t v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1EE9E6D58[v11])(&v16);
LABEL_14:
  uint64_t result = (WTF::Lock *)WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (v15)
  {
    uint64_t result = v14;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 24);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6CF8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_15;
  }
  if (v5 != 1)
  {
    ((void (*)(unsigned char *, uint64_t))off_1EE9E6CF8[v5])(v17, v4);
LABEL_15:
    *(_DWORD *)(v4 + 24) = -1;
    *(unsigned char *)uint64_t v4 = 0;
    *(_DWORD *)(v4 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(v4, a3);
    *(_DWORD *)(v4 + 24) = 1;
    return result;
  }
  v15[0] = 0;
  unsigned int v16 = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, a3);
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  if (v16 != -1 || v8 != -1)
  {
    BOOL v10 = v16 == -1;
    if (v16 == -1) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = v16;
    }
    if (v8 != -1) {
      BOOL v10 = v11 == v8;
    }
    if (v10)
    {
      uint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *, uint64_t))off_1EE9E6D70[v11])(v17, v15, a2);
    }
    else
    {
      if (v16 == 1 || v16 == -1)
      {
        char v12 = v15;
        if (v8 == 1) {
          int v13 = v15;
        }
        else {
          int v13 = (unsigned char *)a2;
        }
        if (v8 == 1) {
          char v12 = (unsigned char *)a2;
        }
        if (v8 == -1) {
          int v14 = v15;
        }
        else {
          int v14 = v13;
        }
        if (v8 != -1) {
          a2 = (uint64_t)v12;
        }
      }
      else
      {
        int v14 = v15;
      }
      v17[0] = 0;
      int v18 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, a2);
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>(a2, (uint64_t)v14);
      uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>((uint64_t)v14, (uint64_t)v17);
      if (v18 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9E6D10[v18])(&v19, v17);
      }
    }
  }
  if (v16 != -1) {
    return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9E6D10[v16])(v17, v15);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6CF8[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6D10[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E6D80[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIyLm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSB_SE_EEESQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIyLm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSB_SE_EEESQ_EEEDcSH_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSC_SF_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SF_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSC_SF_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SF_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::NativePromise(uint64_t a1, _OWORD *a2)
{
  v33[2] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9E6DA0;
  long long v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a1 + 88;
  *(void *)(a1 + 80) = 1;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 112) = 0;
  uint64_t v4 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (!*v4) {
    return a1;
  }
  uint64_t v5 = v4;
  if (v4[16] < 4u) {
    return a1;
  }
  WTF::String::String((WTF::String *)&v29, "creating ");
  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v28, a1);
  *(void *)buf = v29;
  v27[0] = v28;
  uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v27, &v30);
  if (v30)
  {
    uint64_t v8 = v28;
    uint64_t v28 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    char v9 = v29;
    int v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    BOOL v10 = *((void *)v5 + 4);
    uint64_t v11 = (WTF *)os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      WTF::String::utf8();
      int v13 = v27[0] ? (char *)v27[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v11 = v27[0];
      v27[0] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1) {
          uint64_t v11 = (WTF *)WTF::fastFree(v11, v12);
        }
        else {
          --*(_DWORD *)v11;
        }
      }
    }
    if (*v5 && v5[16] >= 4u)
    {
      int v14 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v15 = *v14;
        if (v15) {
          break;
        }
        int v16 = *v14;
        atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v16, v15 | 1, memory_order_acquire, memory_order_acquire);
        if (v16 == v15)
        {
          uint64_t v17 = WTF::Logger::observers(v11);
          uint64_t v18 = *(unsigned int *)(v17 + 12);
          if (v18)
          {
            char v19 = *(uint64_t **)v17;
            uint64_t v20 = *(void *)v17 + 8 * v18;
            do
            {
              uint64_t v21 = *v19;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "creating ");
              int v32 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v33, a1);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v27, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v21 + 16))(v21, v5, 4, v27);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v22);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                long long v24 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v24)
                {
                  if (*(_DWORD *)v24 == 2) {
                    WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v12);
                  }
                  else {
                    *(_DWORD *)v24 -= 2;
                  }
                }
              }
              ++v19;
            }
            while (v19 != (uint64_t *)v20);
          }
          int v25 = 1;
          atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
          if (v25 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v26 = v30;
    unsigned int v30 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    return a1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  long long v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 108);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(v1 + 96);
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        uint64_t result = WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);

  return WTF::fastFree(v1, v2);
}

{
  unsigned char *v2;
  BOOL v3;
  unsigned char *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  atomic_uchar *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  void v35[3];

  void v35[2] = *MEMORY[0x1E4F143B8];
  char v2 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2) {
    long long v3 = v2[16] >= 4u;
  }
  else {
    long long v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(void *)buf = v31;
    v29[0] = v30;
    uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    int v7 = v30;
    unsigned int v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v8 = v31;
    uint64_t v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    char v9 = *((void *)v4 + 4);
    BOOL v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      WTF::String::utf8();
      char v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      BOOL v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          BOOL v10 = (WTF *)WTF::fastFree(v10, v11);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      int v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v14 = *v13;
        if (v14) {
          break;
        }
        int v15 = *v13;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
        if (v15 == v14)
        {
          int v16 = WTF::Logger::observers(v10);
          uint64_t v17 = *(unsigned int *)(v16 + 12);
          if (v17)
          {
            uint64_t v18 = *(uint64_t **)v16;
            char v19 = *(void *)v16 + 8 * v17;
            do
            {
              uint64_t v20 = *v18;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "destroying ");
              char v34 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v20 + 16))(v20, v4, 4, v29);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v23 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2) {
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                  }
                  else {
                    *(_DWORD *)v23 -= 2;
                  }
                }
              }
              ++v18;
            }
            while (v18 != (uint64_t *)v19);
          }
          long long v24 = 1;
          atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
          if (v24 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    int v25 = v32;
    int v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 18), v27);
  uint64_t v28 = a1[16];
  if (v28 != -1) {
    ((void (*)(uint8_t *, unsigned int *))off_1EE9E6DB8[v28])(buf, a1 + 14);
  }
  a1[16] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  uint64_t v38 = (char *)v39 + 8;
  *(void *)&v39[0] = 1;
  uint64_t v31 = &v33;
  uint64_t v32 = 1;
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4 == (void *)(a1 + 88))
  {
    uint64_t v5 = *(unsigned int *)(a1 + 84);
    memcpy(&v33, v4, 8 * v5);
  }
  else
  {
    *(void *)(a1 + 72) = a1 + 88;
    uint64_t v31 = (uint64_t *)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
    LODWORD(v32) = *(_DWORD *)(a1 + 80);
  }
  HIDWORD(v32) = v5;
  DWORD1(v39[0]) = 0;
  *(void *)(a1 + 80) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v4);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v28 = v6;
  unsigned int v7 = *(_DWORD *)(a1 + 108);
  int v29 = *(_DWORD *)(a1 + 104);
  unsigned int v30 = v7;
  uint64_t v38 = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)&v39[0] = 0;
  *(void *)(a1 + 104) = 0;
  atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v8);
  if (HIDWORD(v32))
  {
    uint64_t v11 = v31;
    uint64_t v12 = 8 * HIDWORD(v32);
    do
    {
      uint64_t v13 = *v11;
      if (!*(void *)(*v11 + 16)
        || (int v14 = atomic_load((unsigned __int8 *)(a1 + 113)), v14 == 1)
        && (atomic_uchar *volatile v9 = (atomic_uchar *volatile)(*(uint64_t (**)(void))(**(void **)(v13 + 16) + 24))(*(void *)(v13 + 16)),
            v9))
      {
        if (*(unsigned char *)(v13 + 56))
        {
          uint64_t v38 = (atomic_uchar *)v13;
          atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
          if (*v9) {
            BOOL v17 = v9[16] >= 4u;
          }
          else {
            BOOL v17 = 0;
          }
          if (v17) {
            atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v9, a1, (uint64_t)&v38, (WTF::Logger::LogSiteIdentifier *)(v13 + 24));
          }
        }
        else
        {
          atomic_uchar *volatile v18 = *a2;
          int v19 = 1;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
          if (v19 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v18);
          }
          if (WTF::NativePromise<void,void,0u>::hasRunnable(a1))
          {
            WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v38, a1);
            uint64_t v20 = (uint64_t)v38;
            (*(void (**)(uint64_t *__return_ptr, atomic_uchar *))(*(void *)v38 + 16))(&v34, v38);
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v13 + 24))(v13, a1, &v34);
            (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          }
          else
          {
            WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::takeResult(&v38, a1);
            (*(void (**)(uint64_t, uint64_t, atomic_uchar **))(*(void *)v13 + 24))(v13, a1, &v38);
          }
          char v21 = 0;
          atomic_uchar *volatile v9 = *a2;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
          if (v21) {
            atomic_uchar *volatile v9 = (atomic_uchar *volatile)MEMORY[0x19972E8D0](v9, v10);
          }
        }
      }
      else
      {
        uint64_t v15 = *(void *)(v13 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
        atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
        int v16 = (atomic_uchar *)WTF::fastMalloc((WTF *)0x20);
        *(void *)int v16 = &unk_1EE9E6DE0;
        *((void *)v16 + 1) = v13;
        *((void *)v16 + 2) = v13;
        *((void *)v16 + 3) = a1;
        uint64_t v38 = v16;
        (*(void (**)(uint64_t, atomic_uchar **))(*(void *)v15 + 16))(v15, &v38);
        atomic_uchar *volatile v9 = v38;
        uint64_t v38 = 0;
        if (v9) {
          atomic_uchar *volatile v9 = (atomic_uchar *volatile)(*(uint64_t (**)(atomic_uchar *volatile))(*(void *)v9 + 8))(v9);
        }
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  if (v7)
  {
    uint64_t v22 = v6 + 40 * v7;
    uint64_t v23 = a1 + 56;
    do
    {
      long long v24 = *(atomic_uint **)v6;
      *(void *)uint64_t v6 = 0;
      uint64_t v38 = (atomic_uchar *)v24;
      long long v25 = *(_OWORD *)(v6 + 24);
      v39[0] = *(_OWORD *)(v6 + 8);
      v39[1] = v25;
      if (v24)
      {
        atomic_fetch_add(v24 + 2, 1u);
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = "<chained promise>";
        uint64_t v37 = 0;
        WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v24, v23, (WTF::Logger::LogSiteIdentifier *)&v34);
        if (atomic_fetch_add(v24 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v24 + 2);
          (*(void (**)(atomic_uint *))(*(void *)v24 + 16))(v24);
        }
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = "<chained promise>";
        uint64_t v37 = 0;
        WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v23, (WTF::Logger::LogSiteIdentifier *)&v34);
      }
      WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v38);
      v6 += 40;
    }
    while (v6 != v22);
  }
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v10);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v26);
}

void *WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::takeResult(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  char v4 = 0;
  uint64_t v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = (void *)MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 64) == 1)
  {
    _WORD *v3 = *(_WORD *)(a2 + 56);
    int v6 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1)
    {
      return (void *)WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    unsigned int v7 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E6DE0;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E6DE0;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  char v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  uint64_t v1 = (unsigned char *)*((void *)a1 + 1);
  uint64_t v2 = *((void *)a1 + 3);
  if (v1[56])
  {
    uint64_t v10 = *((void *)a1 + 1);
    uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v4 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)&v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<void,void,0u>::hasRunnable(*((void *)a1 + 3));
    uint64_t v7 = *((void *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v10, *((void *)a1 + 3));
      uint64_t v8 = v10;
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v10 + 16))(v9, v10);
      (*(void (**)(unsigned char *, uint64_t, unsigned char *))(*(void *)v1 + 24))(v1, v7, v9);
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::takeResult(&v10, *((void *)a1 + 3));
      return (WTF::StringImpl *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *))(*(void *)v1 + 24))(v1, v7, &v10);
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  int v14 = v7;
  char v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  uint64_t v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 64);
  uint64_t v11 = *(unsigned int *)(a2 + 8);
  if (v10 == -1)
  {
    if (v11 == -1) {
      goto LABEL_14;
    }
  }
  else if (v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1EE9E6DB8[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 64) = -1;
    goto LABEL_14;
  }
  uint64_t v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1EE9E6DF8[v11])(&v16);
LABEL_14:
  uint64_t result = (WTF::Lock *)WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (v15)
  {
    uint64_t result = v14;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 8);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6DB8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, unsigned char *a2, _WORD *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6DB8[v5])(&v8, v4);
LABEL_7:
    *(_DWORD *)(v4 + 8) = -1;
    *(_WORD *)uint64_t v4 = *a3;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  unsigned int v6 = (unsigned __int16)*a3;
  char v7 = *a3;
  if (v6 > 0xFF != (a2[1] != 0))
  {
    if (v6 < 0x100)
    {
      if (a2[1]) {
        a2[1] = 0;
      }
    }
    else
    {
      *a2 = v7;
      a2[1] = 1;
    }
  }
  else if (v6 >= 0x100)
  {
    *a2 = v7;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6DB8[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    char v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::NativePromise(uint64_t a1, _OWORD *a2)
{
  v33[2] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9E6E20;
  long long v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)(a1 + 88) = 1;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  uint64_t v4 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (!*v4) {
    return a1;
  }
  uint64_t v5 = v4;
  if (v4[16] < 4u) {
    return a1;
  }
  WTF::String::String((WTF::String *)&v29, "creating ");
  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v28, a1);
  *(void *)buf = v29;
  v27[0] = v28;
  uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v27, &v30);
  if (v30)
  {
    uint64_t v8 = v28;
    uint64_t v28 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    char v9 = v29;
    int v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t v10 = *((void *)v5 + 4);
    uint64_t v11 = (WTF *)os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      WTF::String::utf8();
      int v13 = v27[0] ? (char *)v27[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v11 = v27[0];
      v27[0] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1) {
          uint64_t v11 = (WTF *)WTF::fastFree(v11, v12);
        }
        else {
          --*(_DWORD *)v11;
        }
      }
    }
    if (*v5 && v5[16] >= 4u)
    {
      int v14 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v15 = *v14;
        if (v15) {
          break;
        }
        int v16 = *v14;
        atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v16, v15 | 1, memory_order_acquire, memory_order_acquire);
        if (v16 == v15)
        {
          uint64_t v17 = WTF::Logger::observers(v11);
          uint64_t v18 = *(unsigned int *)(v17 + 12);
          if (v18)
          {
            int v19 = *(uint64_t **)v17;
            uint64_t v20 = *(void *)v17 + 8 * v18;
            do
            {
              uint64_t v21 = *v19;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "creating ");
              int v32 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v33, a1);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v27, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v21 + 16))(v21, v5, 4, v27);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v22);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                long long v24 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v24)
                {
                  if (*(_DWORD *)v24 == 2) {
                    WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v12);
                  }
                  else {
                    *(_DWORD *)v24 -= 2;
                  }
                }
              }
              ++v19;
            }
            while (v19 != (uint64_t *)v20);
          }
          int v25 = 1;
          atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
          if (v25 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v26 = v30;
    unsigned int v30 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    return a1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  long long v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 116);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(v1 + 104);
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        uint64_t result = WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);

  return WTF::fastFree(v1, v2);
}

{
  unsigned char *v2;
  BOOL v3;
  unsigned char *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  atomic_uchar *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  void v35[3];

  void v35[2] = *MEMORY[0x1E4F143B8];
  char v2 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2) {
    long long v3 = v2[16] >= 4u;
  }
  else {
    long long v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(void *)buf = v31;
    v29[0] = v30;
    uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    int v7 = v30;
    unsigned int v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v8 = v31;
    uint64_t v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    char v9 = *((void *)v4 + 4);
    uint64_t v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      WTF::String::utf8();
      uint64_t v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          uint64_t v10 = (WTF *)WTF::fastFree(v10, v11);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      int v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v14 = *v13;
        if (v14) {
          break;
        }
        int v15 = *v13;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
        if (v15 == v14)
        {
          int v16 = WTF::Logger::observers(v10);
          uint64_t v17 = *(unsigned int *)(v16 + 12);
          if (v17)
          {
            uint64_t v18 = *(uint64_t **)v16;
            int v19 = *(void *)v16 + 8 * v17;
            do
            {
              uint64_t v20 = *v18;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "destroying ");
              uint64_t v34 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v20 + 16))(v20, v4, 4, v29);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v23 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2) {
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                  }
                  else {
                    *(_DWORD *)v23 -= 2;
                  }
                }
              }
              ++v18;
            }
            while (v18 != (uint64_t *)v19);
          }
          long long v24 = 1;
          atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
          if (v24 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    int v25 = v32;
    int v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 26), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 20), v27);
  uint64_t v28 = a1[18];
  if (v28 != -1) {
    ((void (*)(uint8_t *, unsigned int *))off_1EE9E6E38[v28])(buf, a1 + 14);
  }
  a1[18] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6E50[v3])(&v5, a2);
  }
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  uint64_t v39 = (char *)v40 + 8;
  *(void *)&v40[0] = 1;
  uint64_t v31 = (uint64_t *)v33;
  uint64_t v32 = 1;
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4 == (void *)(a1 + 96))
  {
    uint64_t v5 = *(unsigned int *)(a1 + 92);
    memcpy(v33, v4, 8 * v5);
  }
  else
  {
    *(void *)(a1 + 80) = a1 + 96;
    uint64_t v31 = (uint64_t *)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 92);
    LODWORD(v32) = *(_DWORD *)(a1 + 88);
  }
  HIDWORD(v32) = v5;
  DWORD1(v40[0]) = 0;
  *(void *)(a1 + 88) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v4);
  uint64_t v6 = *(void *)(a1 + 104);
  uint64_t v28 = v6;
  unsigned int v7 = *(_DWORD *)(a1 + 116);
  int v29 = *(_DWORD *)(a1 + 112);
  unsigned int v30 = v7;
  uint64_t v39 = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)&v40[0] = 0;
  *(void *)(a1 + 112) = 0;
  atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v8);
  if (HIDWORD(v32))
  {
    uint64_t v11 = v31;
    uint64_t v12 = 8 * HIDWORD(v32);
    do
    {
      uint64_t v13 = *v11;
      if (!*(void *)(*v11 + 16)
        || (int v14 = atomic_load((unsigned __int8 *)(a1 + 121)), v14 == 1)
        && (atomic_uchar *volatile v9 = (atomic_uchar *volatile)(*(uint64_t (**)(void))(**(void **)(v13 + 16) + 24))(*(void *)(v13 + 16)),
            v9))
      {
        if (*(unsigned char *)(v13 + 56))
        {
          uint64_t v39 = (atomic_uchar *)v13;
          atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
          if (*v9) {
            BOOL v17 = v9[16] >= 4u;
          }
          else {
            BOOL v17 = 0;
          }
          if (v17) {
            atomic_uchar *volatile v9 = (atomic_uchar *volatile)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v9, a1, (uint64_t)&v39, (WTF::Logger::LogSiteIdentifier *)(v13 + 24));
          }
        }
        else
        {
          atomic_uchar *volatile v18 = *a2;
          int v19 = 1;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
          if (v19 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v18);
          }
          if (WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(a1))
          {
            WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v35, a1);
            uint64_t v20 = v35;
            (*(void (**)(atomic_uchar **__return_ptr, uint64_t))(*(void *)v35 + 16))(&v39, v35);
            (*(void (**)(uint64_t, uint64_t, atomic_uchar **))(*(void *)v13 + 24))(v13, a1, &v39);
            if (LODWORD(v40[0]) != -1) {
              ((void (*)(char *, atomic_uchar **))off_1EE9E6E50[LODWORD(v40[0])])(&v34, &v39);
            }
            LODWORD(v40[0]) = -1;
            (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          }
          else
          {
            WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&v39, a1);
            (*(void (**)(uint64_t, uint64_t, atomic_uchar **))(*(void *)v13 + 24))(v13, a1, &v39);
            if (LODWORD(v40[0]) != -1) {
              ((void (*)(uint64_t *, atomic_uchar **))off_1EE9E6E50[LODWORD(v40[0])])(&v35, &v39);
            }
          }
          char v21 = 0;
          atomic_uchar *volatile v9 = *a2;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
          if (v21) {
            atomic_uchar *volatile v9 = (atomic_uchar *volatile)MEMORY[0x19972E8D0]();
          }
        }
      }
      else
      {
        uint64_t v15 = *(void *)(v13 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
        atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
        int v16 = (atomic_uchar *)WTF::fastMalloc((WTF *)0x20);
        *(void *)int v16 = &unk_1EE9E6E80;
        *((void *)v16 + 1) = v13;
        *((void *)v16 + 2) = v13;
        *((void *)v16 + 3) = a1;
        uint64_t v39 = v16;
        (*(void (**)(uint64_t, atomic_uchar **))(*(void *)v15 + 16))(v15, &v39);
        atomic_uchar *volatile v9 = v39;
        uint64_t v39 = 0;
        if (v9) {
          atomic_uchar *volatile v9 = (atomic_uchar *volatile)(*(uint64_t (**)(atomic_uchar *volatile))(*(void *)v9 + 8))(v9);
        }
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  if (v7)
  {
    uint64_t v22 = v6 + 40 * v7;
    uint64_t v23 = a1 + 56;
    do
    {
      long long v24 = *(atomic_uint **)v6;
      *(void *)uint64_t v6 = 0;
      uint64_t v39 = (atomic_uchar *)v24;
      long long v25 = *(_OWORD *)(v6 + 24);
      v40[0] = *(_OWORD *)(v6 + 8);
      v40[1] = v25;
      if (v24)
      {
        atomic_fetch_add(v24 + 2, 1u);
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        uint64_t v37 = "<chained promise>";
        uint64_t v38 = 0;
        WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v24, v23, (WTF::Logger::LogSiteIdentifier *)&v35);
        if (atomic_fetch_add(v24 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v24 + 2);
          (*(void (**)(atomic_uint *))(*(void *)v24 + 16))(v24);
        }
      }
      else
      {
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        uint64_t v37 = "<chained promise>";
        uint64_t v38 = 0;
        WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v23, (WTF::Logger::LogSiteIdentifier *)&v35);
      }
      WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v39);
      v6 += 40;
    }
    while (v6 != v22);
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v10);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v26);
}

BOOL WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(a1 + 48);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](a1 + 48);
  }
  int v5 = *(_DWORD *)(a1 + 72);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v5 == 2;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 72) == 2)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    void *v3 = v6;
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResult(v8);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t a1, uint64_t a2)
{
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 72) == 1)
  {
    *(unsigned char *)a1 = 0;
    *(_DWORD *)(a1 + 8) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(a1, a2 + 56);
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(v8, v9);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6E50[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E6E60[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E6E80;
  char v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E6E80;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  uint64_t v1 = (unsigned char *)*((void *)a1 + 1);
  uint64_t v2 = *((void *)a1 + 3);
  if (v1[56])
  {
    uint64_t v10 = *((void *)a1 + 1);
    uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v4 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)&v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(*((void *)a1 + 3));
    uint64_t v7 = *((void *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v9, v7);
      uint64_t v8 = v9;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v9 + 16))(&v10, v9);
      (*(void (**)(unsigned char *, uint64_t, uint64_t *))(*(void *)v1 + 24))(v1, v7, &v10);
      if (v11 != -1) {
        ((void (*)(char *, uint64_t *))off_1EE9E6E50[v11])(&v12, &v10);
      }
      int v11 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&v10, v7);
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *))(*(void *)v1 + 24))(v1, v7, &v10);
      if (v11 != -1) {
        return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, uint64_t *))off_1EE9E6E50[v11])(&v9, &v10);
      }
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  int v14 = v7;
  char v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  uint64_t v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 72);
  uint64_t v11 = *(unsigned int *)(a2 + 16);
  if (v10 == -1)
  {
    if (v11 == -1) {
      goto LABEL_14;
    }
  }
  else if (v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1EE9E6E38[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 72) = -1;
    goto LABEL_14;
  }
  uint64_t v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1EE9E6E98[v11])(&v16);
LABEL_14:
  uint64_t result = (WTF::Lock *)WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (v15)
  {
    uint64_t result = v14;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 16);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6E38[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 16);
  if (v5 == -1) {
    goto LABEL_15;
  }
  if (v5 != 1)
  {
    ((void (*)(unsigned char *, uint64_t))off_1EE9E6E38[v5])(v17, v4);
LABEL_15:
    *(_DWORD *)(v4 + 16) = -1;
    *(unsigned char *)uint64_t v4 = 0;
    *(_DWORD *)(v4 + 8) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(v4, a3);
    *(_DWORD *)(v4 + 16) = 1;
    return result;
  }
  v15[0] = 0;
  unsigned int v16 = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, a3);
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (v16 != -1 || v8 != -1)
  {
    BOOL v10 = v16 == -1;
    if (v16 == -1) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = v16;
    }
    if (v8 != -1) {
      BOOL v10 = v11 == v8;
    }
    if (v10)
    {
      uint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *, uint64_t))off_1EE9E6EB0[v11])(v17, v15, a2);
    }
    else
    {
      if (v16 == 1 || v16 == -1)
      {
        char v12 = v15;
        if (v8 == 1) {
          int v13 = v15;
        }
        else {
          int v13 = (unsigned char *)a2;
        }
        if (v8 == 1) {
          char v12 = (unsigned char *)a2;
        }
        if (v8 == -1) {
          int v14 = v15;
        }
        else {
          int v14 = v13;
        }
        if (v8 != -1) {
          a2 = (uint64_t)v12;
        }
      }
      else
      {
        int v14 = v15;
      }
      v17[0] = 0;
      int v18 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, a2);
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::String,WebCore::DOMCacheEngine::Error>>(a2, (uint64_t)v14);
      uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::String,WebCore::DOMCacheEngine::Error>>((uint64_t)v14, (uint64_t)v17);
      if (v18 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9E6E50[v18])(&v19, v17);
      }
    }
  }
  if (v16 != -1) {
    return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9E6E50[v16])(v17, v15);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6E38[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 16) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::String,WebCore::DOMCacheEngine::Error>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E6E50[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E6EC0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSC_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SB_EEESN_EEEDcSE_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSC_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SB_EEESN_EEEDcSE_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SC_EEEEEvRSE_OT_EUlRSJ_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SC_EEEOSS_EEEDcSJ_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SC_EEEEEvRSE_OT_EUlRSJ_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SC_EEEOSS_EEEDcSJ_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

WebKit::SpeechRecognitionRealtimeMediaSourceManager *std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager>::reset[abi:sn180100](WebKit::SpeechRecognitionRealtimeMediaSourceManager **a1, WebKit::SpeechRecognitionRealtimeMediaSourceManager *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::SpeechRecognitionRealtimeMediaSourceManager::~SpeechRecognitionRealtimeMediaSourceManager(result);
    return (WebKit::SpeechRecognitionRealtimeMediaSourceManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebCore::DeferrableOneShotTimer::~DeferrableOneShotTimer(WebCore::DeferrableOneShotTimer *this)
{
  *(void *)this = &unk_1EE9E76C8;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  WebCore::TimerBase::~TimerBase(this);
}

{
  uint64_t v2;
  WTF *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE9E76C8;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  WebCore::TimerBase::~TimerBase(this);

  WTF::fastFree(v3, v4);
}

uint64_t WebCore::DeferrableOneShotTimer::fired(WebCore::DeferrableOneShotTimer *this)
{
  uint64_t v1 = *((void *)this + 4);
  if ((v1 & 0x2000000000000) == 0) {
    return (*(uint64_t (**)(void))(**((void **)this + 6) + 16))();
  }
  *((void *)this + 4) = v1 & 0xFDFFFFFFFFFFFFLL;
  return WebCore::TimerBase::start();
}

uint64_t **std::unique_ptr<WebKit::AudioMediaStreamTrackRendererInternalUnitManager>::reset[abi:sn180100](uint64_t **result, uint64_t *a2)
{
  uint64_t v2 = *result;
  WebKit::SpeechRecognitionRealtimeMediaSourceManager *result = a2;
  if (v2)
  {
    if (*v2) {
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(*v2, a2);
    }
    return (uint64_t **)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

uint64_t WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>::~KeyValuePair(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  return a1;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages15WebProcessProxy15ShouldTerminateEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

unint64_t WTF::Vector<WTF::Function<void ()(WebCore::UserGestureToken &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::Function<void ()(WebCore::UserGestureToken &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::Function<void ()(WebCore::UserGestureToken &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::Function<void ()(WebCore::UserGestureToken &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = v2;
      *(void *)unint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = result;
        uint64_t v8 = 8 * v5;
        unint64_t v9 = (unsigned int **)v4;
        do
        {
          unint64_t v10 = *v9;
          *unint64_t v9 = 0;
          *(void *)unint64_t v7 = v10;
          uint64_t result = *v9;
          *unint64_t v9 = 0;
          if (result) {
            uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
          }
          v7 += 2;
          ++v9;
          v8 -= 8;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)unint64_t v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::deallocateTable(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != -1)
      {
        uint64_t *v4 = 0;
        if (v5) {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebProcess::*&)(void),WebKit::WebProcess*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  unsigned int v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void WebKit::WebProcess::transformHandlesToObjects(API::Object *)::Transformer::~Transformer()
{
}

BOOL WebKit::WebProcess::transformHandlesToObjects(API::Object *)::Transformer::shouldTransformObject(uint64_t a1, unsigned char *a2)
{
  int v3 = (*(uint64_t (**)(unsigned char *))(*(void *)a2 + 16))(a2);
  return (v3 == 13 || v3 == 11) && a2[32] != 0;
}

uint64_t WebKit::WebProcess::transformHandlesToObjects(API::Object *)::Transformer::transformObject@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2 = a1;
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (v4 == 13)
  {
    {
      unint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v7);
    }
    uint64_t v8 = *(void *)(v2 + 24);
    uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v8);
  }
  else
  {
    if (v4 != 11)
    {
LABEL_8:
      uint64_t result = (uint64_t)CFRetain(*(CFTypeRef *)(v2 + 8));
      goto LABEL_9;
    }
    {
      uint64_t v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v6);
    }
    uint64_t result = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)(v2 + 16), *(void *)(v2 + 24));
  }
  uint64_t v2 = result;
  if (result) {
    goto LABEL_8;
  }
LABEL_9:
  *a2 = v2;
  return result;
}

void WebKit::WebProcess::transformObjectsToHandles(API::Object *)::Transformer::~Transformer()
{
}

BOOL WebKit::WebProcess::transformObjectsToHandles(API::Object *)::Transformer::shouldTransformObject(uint64_t a1, uint64_t a2)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  return v2 == 137 || v2 == 140;
}

void WebKit::WebProcess::transformObjectsToHandles(API::Object *)::Transformer::transformObject(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2 = a1;
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (v4 == 140)
  {
    uint64_t v5 = *(void *)(v2 + 2120);
    uint64_t v6 = *(void *)(v2 + 40);
    uint64_t v2 = API::Object::newObject(0x28uLL, 13);
    *(void *)uint64_t v2 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v2);
    unint64_t v7 = &unk_1EE9B3F48;
  }
  else
  {
    if (v4 != 137)
    {
      CFRetain(*(CFTypeRef *)(v2 + 8));
      goto LABEL_6;
    }
    uint64_t v5 = *(void *)(v2 + 80);
    uint64_t v6 = *(void *)(v2 + 88);
    uint64_t v2 = API::Object::newObject(0x28uLL, 11);
    *(void *)uint64_t v2 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v2);
    unint64_t v7 = &unk_1EE9B3E30;
  }
  *(void *)uint64_t v2 = v7;
  *(void *)(v2 + 16) = v5;
  *(void *)(v2 + 24) = v6;
  *(unsigned char *)(v2 + 32) = 1;
LABEL_6:
  *a2 = v2;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages26WebPaymentCoordinatorProxy13ShowPaymentUIEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,unsigned int,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    for (uint64_t i = a1 + 32; ; i += 72)
    {
      uint64_t v5 = *(unsigned int *)(i - 8);
      if (v5) {
        break;
      }
      if (*(void *)(i - 32) != -1) {
        goto LABEL_5;
      }
LABEL_11:
      if (!--v3) {
        return WTF::fastFree((WTF *)(a1 - 16), a2);
      }
    }
    if (v5 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::fastFree((WTF *)(a1 - 16), a2);
    }
LABEL_5:
    uint64_t v6 = *(unsigned int *)(i + 24);
    if (v6 == -1)
    {
      *(_DWORD *)(i + 24) = -1;
    }
    else
    {
      ((void (*)(char *, uint64_t))off_1EE9E7020[v6])(&v8, i);
      uint64_t v5 = *(unsigned int *)(i - 8);
      *(_DWORD *)(i + 24) = -1;
      if (v5 == -1)
      {
LABEL_10:
        *(_DWORD *)(i - 8) = -1;
        goto LABEL_11;
      }
    }
    ((void (*)(char *, uint64_t))off_1EE9E7020[v5])(&v9, i - 32);
    goto LABEL_10;
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteMediaPlayerManager,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7) {
    this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteImageDecoderAVFManager,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v11 = *((void *)v2 + 2);
    uint64_t v7 = (WebKit::RemoteImageDecoderAVFManager *)*((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v11 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7)
  {
    WebKit::RemoteImageDecoderAVFManager::~RemoteImageDecoderAVFManager(v7, a2);
    this = (atomic_uchar *)WTF::fastFree(v9, v10);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcess::WebProcess(void)::$_0,void,PAL::HysteresisState>::call(uint64_t result, WTF::StringImpl *a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(result + 8);
    uint64_t result = *(void *)(v2 + 432);
    if (result)
    {
      *(void *)(v2 + 432) = 0;
      return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, a2);
    }
  }
  return result;
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::WebProcess::initializeWebProcess(WebKit::WebProcessCreationParameters &&,WTF::CompletionHandler<void ()(WebCore::ProcessIdentity)> &&)::$_0,void,WTF::Critical,WTF::Synchronous>::call(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v1 + 617))
  {
    int v2 = *(_DWORD *)(v1 + 596);
    if ((v2 & 0xFFFFFFFE) != 2)
    {
      char v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(v1 + 120));
      int v5 = *(void **)(v1 + 120);
      if (v5) {
        v5 += 2 * *((unsigned int *)v5 - 1);
      }
      if (v5 != v3)
      {
        while (*(unsigned char *)(v3[1] + 2108))
        {
          while (1)
          {
            v3 += 2;
            if (v3 == v4) {
              break;
            }
            if ((unint64_t)(*v3 + 1) > 1) {
              goto LABEL_11;
            }
          }
          char v3 = v4;
LABEL_11:
          if (v3 == v5) {
            goto LABEL_12;
          }
        }
        goto LABEL_24;
      }
LABEL_12:
      int v2 = *(_DWORD *)(v1 + 596);
    }
    if (v2 == 2)
    {
      uint64_t v6 = qword_1EB358960;
      if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(v1 + 672)) {
          uint64_t v8 = *(void *)(v1 + 664);
        }
        else {
          uint64_t v8 = 0;
        }
        int v18 = 134218240;
        uint64_t v19 = v1;
        __int16 v20 = 2048;
        uint64_t v21 = v8;
        BOOL v17 = "%p - [sessionID=%llu] WebProcess::initializeWebProcess: Prewarmed WebProcess is exiting due to memory pressure";
        goto LABEL_42;
      }
    }
    else if (v2 == 3)
    {
      uint64_t v6 = qword_1EB358960;
      if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(v1 + 672)) {
          uint64_t v7 = *(void *)(v1 + 664);
        }
        else {
          uint64_t v7 = 0;
        }
        int v18 = 134218240;
        uint64_t v19 = v1;
        __int16 v20 = 2048;
        uint64_t v21 = v7;
        BOOL v17 = "%p - [sessionID=%llu] WebProcess::initializeWebProcess: Cached WebProcess is exiting due to memory pressure";
LABEL_42:
        _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v18, 0x16u);
      }
    }
    else
    {
      uint64_t v6 = qword_1EB358960;
      if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(v1 + 672)) {
          uint64_t v9 = *(void *)(v1 + 664);
        }
        else {
          uint64_t v9 = 0;
        }
        int v18 = 134218240;
        uint64_t v19 = v1;
        __int16 v20 = 2048;
        uint64_t v21 = v9;
        BOOL v17 = "%p - [sessionID=%llu] WebProcess::initializeWebProcess: Suspended WebProcess is exiting due to memory pressure";
        goto LABEL_42;
      }
    }
    return (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 120))(v1);
  }
LABEL_24:
  WebCore::releaseMemory();
  uint64_t result = (atomic_uchar *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(v1 + 120));
  char v12 = result;
  int v13 = v11;
  uint64_t v14 = *(void *)(v1 + 120);
  if (v14) {
    char v15 = (atomic_uchar *)(v14 + 16 * *(unsigned int *)(v14 - 4));
  }
  else {
    char v15 = 0;
  }
  if (v15 != result)
  {
    do
    {
      uint64_t v16 = *(void *)(*((void *)v12 + 1) + 2400);
      if (v16) {
        uint64_t result = (atomic_uchar *)WebKit::RemoteResourceCacheProxy::releaseMemory((WebKit::RemoteRenderingBackendProxy **)(v16 + 72), v11);
      }
      while (1)
      {
        v12 += 16;
        if (v12 == v13) {
          break;
        }
        if ((unint64_t)(*(void *)v12 + 1) > 1) {
          goto LABEL_34;
        }
      }
      char v12 = v13;
LABEL_34:
      ;
    }
    while (v12 != v15);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebProcess::initializeWebProcess(WebKit::WebProcessCreationParameters &&,WTF::CompletionHandler<void ()(WebCore::ProcessIdentity)> &&)::$_1,void>::call(IPC::Encoder *result)
{
  uint64_t v1 = *(void *)(*((void *)result + 1) + 40);
  if (v1)
  {
    uint64_t v2 = WTF::MemoryPressureHandler::singleton(result);
    int v3 = atomic_load((unsigned __int8 *)(v2 + 4));
    BOOL v5 = v3 == 2 || *(unsigned char *)(v2 + 7) != 0;
    BOOL v10 = v5;
    uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v6 = 2605;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    uint64_t v11 = v6;
    IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, (char *)&v10);
    IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v11, 0, 0);
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v7);
      return (IPC::Encoder *)WTF::fastFree(v8, v9);
    }
  }
  return result;
}

WTF::RunLoop *WTF::Detail::CallableWrapper<WebKit::WebProcess::initializeWebProcess(WebKit::WebProcessCreationParameters &&,WTF::CompletionHandler<void ()(WebCore::ProcessIdentity)> &&)::$_2,void,WTF::ProcessMemoryLimit>::call(WTF::RunLoop *result, int a2)
{
  uint64_t v2 = *((void *)result + 1);
  if (a2 == 1)
  {
    if (*(unsigned char *)(v2 + 594)) {
      return result;
    }
    *(unsigned char *)(v2 + 594) = 1;
    char v3 = 2;
    goto LABEL_7;
  }
  if (!a2 && !*(unsigned char *)(v2 + 593))
  {
    char v3 = 1;
    *(unsigned char *)(v2 + 593) = 1;
LABEL_7:
    WTF::RunLoop::main(result);
    uint64_t v4 = WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v4 = &unk_1EE9E70E0;
    *(unsigned char *)(v4 + 8) = v3;
    BOOL v5 = (WTF::RunLoop *)v4;
    WTF::RunLoop::dispatch();
    uint64_t result = v5;
    if (v5) {
      return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(void *)v5 + 8))(v5);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::scheduleLogMemoryStatistics(WebCore::LogMemoryStatisticsReason)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F416F998](*(unsigned __int8 *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcess::initializeWebProcess(WebKit::WebProcessCreationParameters &&,WTF::CompletionHandler<void ()(WebCore::ProcessIdentity)> &&)::$_3,void>::call()
{
  return MEMORY[0x1F416F998](0);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebProcess::initializeWebProcess(WebKit::WebProcessCreationParameters &&,WTF::CompletionHandler<void ()(WebCore::ProcessIdentity)> &&)::$_4,void>::call(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(v1 + 120));
  char v3 = result;
  BOOL v5 = v4;
  uint64_t v6 = *(void *)(v1 + 120);
  if (v6) {
    uint64_t v7 = (WTF::StringImpl *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != result)
  {
    uint64_t v8 = &unk_1EB357000;
    uint64_t v28 = v7;
    do
    {
      double v9 = *(double *)(*((void *)v3 + 1) + 2040);
      int v35 = 0;
      uint64_t v33 = 0;
      char v34 = 0;
      char v36 = 1;
      int v37 = 0;
      __int16 v38 = 0;
      int v39 = 0;
      WebCore::operator<<();
      BOOL v10 = *((void *)v8 + 367);
      BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v11)
      {
        uint64_t v13 = *((void *)v3 + 1);
        unsigned int v14 = *(unsigned __int16 *)(v13 + 1824);
        int v15 = (v14 >> 2) & 1;
        int v16 = v14 & 0x1E1;
        if (*(unsigned char *)(v13 + 1826)) {
          BOOL v17 = v16 == 32;
        }
        else {
          BOOL v17 = 0;
        }
        int v18 = v17;
        int v19 = *(unsigned __int8 *)(v13 + 2108);
        uint64_t v20 = WTF::MemoryPressureHandler::processStateDescription((WTF::MemoryPressureHandler *)v11);
        WTF::TextStream::release((uint64_t *)&v31, (WTF::TextStream *)&v33);
        WTF::String::utf8();
        if (v32) {
          uint64_t v21 = (char *)v32 + 16;
        }
        else {
          uint64_t v21 = 0;
        }
        WebKit::WebFrame::url(*(WebKit::WebFrame **)(*((void *)v3 + 1) + 88), (uint64_t)&v29);
        WTF::String::utf8();
        if (v30) {
          uint64_t v22 = (char *)v30 + 16;
        }
        else {
          uint64_t v22 = 0;
        }
        *(_DWORD *)buf = 134219779;
        uint64_t v41 = v13;
        __int16 v42 = 2048;
        uint64_t v43 = (uint64_t)v9;
        __int16 v44 = 1024;
        int v45 = v15;
        __int16 v46 = 1024;
        int v47 = v18;
        __int16 v48 = 1024;
        int v49 = v19;
        __int16 v50 = 2082;
        uint64_t v51 = v20;
        __int16 v52 = 2082;
        long long v53 = v21;
        __int16 v54 = 2081;
        uint64_t v55 = v22;
        _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "WebPage %p - load_time: %lld, visible: %d, throttleable: %d , suspended: %d , websam_state: %{public}s, activity_state: %{public}s, url: %{private}s", buf, 0x46u);
        uint64_t v23 = v30;
        unsigned int v30 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 1) {
            WTF::fastFree(v23, v12);
          }
          else {
            --*(_DWORD *)v23;
          }
        }
        uint64_t v7 = v28;
        long long v24 = v29;
        int v29 = 0;
        uint64_t v8 = &unk_1EB357000;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2) {
            WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v12);
          }
          else {
            *(_DWORD *)v24 -= 2;
          }
        }
        long long v25 = v32;
        uint64_t v32 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1) {
            WTF::fastFree(v25, v12);
          }
          else {
            --*(_DWORD *)v25;
          }
        }
        uint64_t v26 = v31;
        uint64_t v31 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2) {
            WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v12);
          }
          else {
            *(_DWORD *)v26 -= 2;
          }
        }
      }
      int v27 = v34;
      char v34 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v12);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
      uint64_t result = v33;
      uint64_t v33 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      while (1)
      {
        char v3 = (WTF::StringImpl *)((char *)v3 + 16);
        if (v3 == v5) {
          break;
        }
        if ((unint64_t)(*(void *)v3 + 1) > 1) {
          goto LABEL_47;
        }
      }
      char v3 = v5;
LABEL_47:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::reinsert(uint64_t a1, void *a2)
{
  if (a1) {
    unsigned int v4 = *(_DWORD *)(a1 - 8);
  }
  else {
    unsigned int v4 = 0;
  }
  int v5 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2);
  int v6 = 0;
  do
  {
    uint64_t v7 = v5 & v4;
    int v5 = ++v6 + v7;
  }
  while (*(void *)(a1 + 16 * v7));
  uint64_t v8 = (void *)(a1 + 16 * v7);
  uint64_t v9 = v8[1];
  v8[1] = 0;
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  void *v8 = *a2;
  uint64_t v10 = a2[1];
  a2[1] = 0;
  v8[1] = v10;
  return v8;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v8 >> 1, 0);
    }
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  uint64_t v6 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2) & v5;
  uint64_t v7 = *(void *)(v2 + 16 * v6);
  if (v7 == *a2) {
    return v2 + 16 * v6;
  }
  int v8 = 1;
  while (v7)
  {
    uint64_t v6 = (v6 + v8) & v5;
    uint64_t v7 = *(void *)(v2 + 16 * v6);
    ++v8;
    if (v7 == *a2) {
      return v2 + 16 * v6;
    }
  }
  if (*a1) {
    return *a1 + 16 * *(unsigned int *)(*a1 - 4);
  }
  else {
    return 0;
  }
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (void *)*a1;
  if (*a1) {
    v3 += 3 * *((unsigned int *)v3 - 1);
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  uint64_t v4 = a2[2];
  a2[2] = 0;
  *a3 = v4;
  if (*a1)
  {
    unsigned int v5 = (void *)(*a1 + 24 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    unsigned int v5 = 0;
  }
  if (v5 != a2) {
    return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(a1, a2);
  }
  return a1;
}

unsigned int *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  a2[1] = -1;
  uint64_t result = (unsigned int *)a2[2];
  a2[2] = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (unsigned int *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  unsigned int v15 = -1640531527;
  __int16 v16 = 0;
  char v17 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v15, a2);
  int v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15);
  uint64_t v7 = a2[1];
  unsigned int v8 = v6 & v5;
  uint64_t result = (uint64_t *)(v2 + 24 * (v6 & v5));
  uint64_t v10 = *result;
  uint64_t v11 = result[1];
  if (*result != *a2 || v11 != v7)
  {
    int v13 = 1;
    while (v10 | v11)
    {
      unsigned int v8 = (v8 + v13) & v5;
      uint64_t result = (uint64_t *)(v2 + 24 * v8);
      uint64_t v10 = *result;
      uint64_t v11 = result[1];
      ++v13;
      if (*result == *a2 && v11 == v7) {
        return result;
      }
    }
    if (*a1) {
      return (uint64_t *)(*a1 + 24 * *(unsigned int *)(*a1 - 4));
    }
    else {
      return 0;
    }
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::reinsert(uint64_t a1, void *a2)
{
  if (a1) {
    int v3 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v3 = 0;
  }
  uint64_t v4 = (*a2 + ~(*a2 << 32)) ^ ((*a2 + ~(*a2 << 32)) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((unint64_t)(v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = *(void *)(a1 + 16 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (v10);
  uint64_t v11 = (void *)(a1 + 16 * v9);
  char v12 = (_DWORD *)v11[1];
  v11[1] = 0;
  if (v12)
  {
    if (v12[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
    }
    else {
      --v12[2];
    }
  }
  void *v11 = *a2;
  uint64_t v13 = a2[1];
  a2[1] = 0;
  v11[1] = v13;
  return v11;
}

unsigned int **WTF::WeakHashMap<WebCore::UserGestureToken,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(unsigned int **result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = (uint64_t)*result;
  if (*result)
  {
    int v4 = *(_DWORD *)(v3 - 4);
    if (!v4) {
      goto LABEL_21;
    }
    int v5 = 0;
    unsigned int v6 = v4 - 1;
    do
    {
      uint64_t v7 = v6;
      int v8 = (unsigned int ***)(v3 + 24 * v6);
      uint64_t result = *v8;
      if ((unint64_t)*v8 + 1 >= 2 && !result[1])
      {
        void *v8 = 0;
        if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)result);
          uint64_t result = (unsigned int **)WTF::fastFree((WTF *)result, a2);
        }
        void *v8 = (unsigned int **)-1;
        ++v5;
      }
      --v6;
    }
    while (v7);
    uint64_t v3 = (uint64_t)*v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      uint64_t v9 = (uint64_t)*v2;
      if (*v2) {
        int v10 = *(_DWORD *)(v9 - 12);
      }
      else {
        int v10 = 0;
      }
      *(_DWORD *)(v9 - 12) = v10 - v5;
      uint64_t v3 = (uint64_t)*v2;
    }
    if (v3)
    {
      unsigned int v11 = *(_DWORD *)(v3 - 4);
      uint64_t v12 = *(unsigned int *)(v3 - 12);
      if (v11 >= 9 && 6 * (int)v12 < v11)
      {
        unsigned int v16 = (v12 - 1) | ((v12 - 1) >> 1) | (((v12 - 1) | ((v12 - 1) >> 1)) >> 2);
        unsigned int v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
        unint64_t v18 = (v17 | HIWORD(v17)) + 1;
        if (v18 > 0x400)
        {
          if (v18 > 2 * v12) {
            goto LABEL_32;
          }
        }
        else if (3 * v18 > 4 * v12)
        {
LABEL_30:
          double v19 = (double)v12;
          double v20 = (double)v18;
          double v21 = 0.604166667;
          goto LABEL_33;
        }
        LODWORD(v18) = 2 * v18;
        if (v18 <= 0x400) {
          goto LABEL_30;
        }
LABEL_32:
        double v19 = (double)v12;
        double v20 = (double)v18;
        double v21 = 0.416666667;
LABEL_33:
        if (v20 * v21 <= v19) {
          LODWORD(v18) = 2 * v18;
        }
        if (v18 <= 8) {
          unsigned int v22 = 8;
        }
        else {
          unsigned int v22 = v18;
        }
        uint64_t result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v2, v22, 0);
        uint64_t v3 = (uint64_t)*v2;
        *((_DWORD *)v2 + 2) = 0;
        if (!v3)
        {
          unsigned int v14 = 0;
          goto LABEL_25;
        }
LABEL_22:
        unsigned int v14 = *(_DWORD *)(v3 - 12);
        int v15 = 0x7FFFFFFF;
        if (v14 >= 0x7FFFFFFF) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
LABEL_21:
      *((_DWORD *)v2 + 2) = 0;
      goto LABEL_22;
    }
  }
  unsigned int v14 = 0;
  *((_DWORD *)v2 + 2) = 0;
LABEL_25:
  int v15 = v14;
LABEL_26:
  *((_DWORD *)v2 + 3) = 2 * v15;
  return result;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v7;
    do
    {
      unsigned int v14 = (unsigned int **)(v6 + 24 * v11);
      int v15 = *v14;
      if (*v14 != (unsigned int *)-1)
      {
        if (v15)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = ((unint64_t)v15 + ~((void)v15 << 32)) ^ (((unint64_t)v15 + ~((void)v15 << 32)) >> 22);
          unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            long long v24 = (unsigned int **)(v16 + 24 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (*v24);
          *long long v24 = 0;
          long long v25 = *v14;
          unsigned char *v14 = 0;
          *long long v24 = v25;
          *(_OWORD *)(v16 + 24 * v23 + 8) = *(_OWORD *)(v6 + 24 * v11 + 8);
          uint64_t v26 = *v14;
          unsigned char *v14 = 0;
          if (v26 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v26);
            WTF::fastFree((WTF *)v26, v10);
          }
          if (v14 == a3) {
            uint64_t v12 = v24;
          }
        }
        else
        {
          unsigned char *v14 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebProcess::userGestureTokenIdentifier(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RefPtr<WebCore::UserGestureToken,WTF::RawPtrTraits<WebCore::UserGestureToken>,WTF::DefaultRefDerefTraits<WebCore::UserGestureToken>>)::$_1,void,WebCore::UserGestureToken&>::call(uint64_t a1, void *a2)
{
  {
LABEL_34:
    uint64_t v32 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v32);
  }
  uint64_t v3 = WebKit::WebProcess::singleton(void)::process;
  if (!*(unsigned char *)(a1 + 16))
  {
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v36 = *(void *)(a1 + 8);
  int v4 = (uint64_t *)(WebKit::WebProcess::singleton(void)::process + 600);
  unsigned int v5 = *(_DWORD *)(WebKit::WebProcess::singleton(void)::process + 608);
  *(_DWORD *)(WebKit::WebProcess::singleton(void)::process + 608) = v5 + 1;
  if (v5 > *(_DWORD *)(v3 + 612)) {
    WTF::WeakHashMap<WebCore::UserGestureToken,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultWeakPtrImpl>::removeNullReferences((unsigned int **)(v3 + 600), a2);
  }
  uint64_t v6 = a2[1];
  if (!v6) {
    goto LABEL_19;
  }
  if (!*(void *)(v6 + 8)) {
    goto LABEL_19;
  }
  uint64_t v7 = *v4;
  if (!*v4) {
    goto LABEL_19;
  }
  int v8 = *(_DWORD *)(v7 - 8);
  unint64_t v9 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
  unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  unsigned int v12 = v8 & ((v11 >> 31) ^ v11);
  for (i = 1; ; unsigned int v12 = (v12 + i++) & v8)
  {
    unsigned int v14 = (unsigned int **)(v7 + 24 * v12);
    int v15 = *v14;
    if (*v14 != (unsigned int *)-1)
    {
      if (!v15)
      {
        unsigned int v16 = *(_DWORD *)(v7 - 4);
        unsigned int v14 = (unsigned int **)(v7 + 24 * v16);
        goto LABEL_15;
      }
      if (v15 == (unsigned int *)v6) {
        break;
      }
    }
  }
  unsigned int v16 = *(_DWORD *)(v7 - 4);
LABEL_15:
  if ((unsigned int **)(v7 + 24 * v16) != v14)
  {
    uint64_t v17 = (uint64_t)v14[1];
    uint64_t v18 = (uint64_t)v14[2];
    unint64_t v19 = *v14;
    unsigned char *v14 = 0;
    if (v19 && atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v19);
      uint64_t v33 = v14;
      WTF::fastFree((WTF *)v19, a2);
      unsigned int v14 = v33;
    }
    unsigned char *v14 = (unsigned int *)-1;
    ++*(_DWORD *)(*v4 - 16);
    uint64_t v20 = *v4;
    if (*v4) {
      int v21 = *(_DWORD *)(v20 - 12) - 1;
    }
    else {
      int v21 = -1;
    }
    *(_DWORD *)(v20 - 12) = v21;
    uint64_t v28 = *v4;
    if (*v4)
    {
      unsigned int v29 = 6 * *(_DWORD *)(v28 - 12);
      unsigned int v30 = *(_DWORD *)(v28 - 4);
      if (v29 < v30 && v30 >= 9) {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)(v3 + 600), v30 >> 1, 0);
      }
    }
  }
  else
  {
LABEL_19:
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  uint64_t v34 = v17;
  uint64_t v35 = v18;
  uint64_t v22 = *(void *)(v3 + 40);
  unsigned int v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v23 = 2595;
  *((void *)v23 + 1) = 0;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  int v37 = v23;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v23, &v36);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v23, &v34);
  uint64_t v38 = v35;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v23, &v38);
  IPC::Connection::sendMessageImpl(v22, (uint64_t *)&v37, 0, 0);
  uint64_t result = v37;
  int v37 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v26, v27);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      unint64_t v9 = (uint64_t *)(v2 + 8 * i);
      uint64_t v10 = *v9;
      if (*v9 != -1)
      {
        if (v10)
        {
          uint64_t v11 = *a1;
          if (*a1) {
            unsigned int v12 = *(_DWORD *)(v11 - 8);
          }
          else {
            unsigned int v12 = 0;
          }
          int v19 = -1640531527;
          __int16 v20 = 0;
          char v21 = 0;
          WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v19, v10 + 8);
          int v13 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v19);
          int v14 = 0;
          do
          {
            uint64_t v15 = v13 & v12;
            int v13 = ++v14 + v15;
          }
          while (*(void *)(v11 + 8 * v15));
          unsigned int v16 = (uint64_t *)(v11 + 8 * v15);
          *unsigned int v16 = 0;
          uint64_t v17 = *v9;
          *unint64_t v9 = 0;
          *unsigned int v16 = v17;
          uint64_t v18 = *v9;
          *unint64_t v9 = 0;
          if (v18) {
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v18, v7);
          }
        }
        else
        {
          *unint64_t v9 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E71D0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E71D0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()((void *)(a1 + 8));
}

uint64_t WebKit::WebProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *a1;
    if (*(unsigned char *)(*a1 + 672)) {
      uint64_t v4 = *(void *)(v3 + 664);
    }
    else {
      uint64_t v4 = 0;
    }
    int v7 = 134218240;
    uint64_t v8 = v3;
    __int16 v9 = 2048;
    uint64_t v10 = v4;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::prepareToSuspend: Process is ready to suspend", (uint8_t *)&v7, 0x16u);
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcess::markAllLayersVolatile(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E71F8;
  uint64_t v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcess::markAllLayersVolatile(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E71F8;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebProcess::markAllLayersVolatile(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = qword_1EB358348;
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(v3 + 672)) {
        uint64_t v5 = *(void *)(v3 + 664);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v7 = *(void *)(a1 + 24);
      int v9 = 134218496;
      uint64_t v10 = v3;
      __int16 v11 = 2048;
      uint64_t v12 = v5;
      __int16 v13 = 2048;
      uint64_t v14 = v7;
      _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::markAllLayersVolatile: Successfuly marked layers as volatile for webPageID=%llu", (uint8_t *)&v9, 0x20u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_ERROR))
  {
    if (*(unsigned char *)(v3 + 672)) {
      uint64_t v6 = *(void *)(v3 + 664);
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v8 = *(void *)(a1 + 24);
    int v9 = 134218496;
    uint64_t v10 = v3;
    __int16 v11 = 2048;
    uint64_t v12 = v6;
    __int16 v13 = 2048;
    uint64_t v14 = v8;
    _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] WebProcess::markAllLayersVolatile: Failed to mark layers as volatile for webPageID=%llu", (uint8_t *)&v9, 0x20u);
  }
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::PrewarmInformation const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::PrewarmInformation const&>,0ul,1ul>(IPC::Encoder *a1, void *a2)
{
  IPC::ArgumentCoder<WebCore::RegistrableDomain,void>::encode(a1, *a2);
  uint64_t v4 = a2[1];

  return IPC::ArgumentCoder<WebCore::PrewarmInformation,void>::encode(a1, v4);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::lookupForReinsert(uint64_t a1, uint64_t a2)
{
  if (a1) {
    int v2 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v2 = 0;
  }
  unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  int v7 = 1;
  do
  {
    unsigned int v8 = v6;
    uint64_t v9 = *(void *)(a1 + 8 * v6);
    unsigned int v6 = (v6 + v7++) & v2;
  }
  while (v9);
  return a1 + 8 * v8;
}

unsigned int *WTF::HashMapTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::translate<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>> WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineAdd<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::StorageAreaMap&>(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::StorageAreaMap&)::{lambda(void)#1}>(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = a2;
  uint64_t v4 = *a3;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(*a3 + 8), *a3);
  unsigned int v6 = *(atomic_uint **)(v4 + 8);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  uint64_t result = (unsigned int *)a1[1];
  a1[1] = v6;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, v5);
  }
  return result;
}

unsigned int *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (unsigned int *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  unsigned int v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = *(unsigned int *)(v8 - 4);
        }
        char v27 = 0;
        uint64_t v28 = v8 + 16 * v22;
        goto LABEL_29;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      unsigned int v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      uint64_t *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      unsigned int v16 = v18;
    }
  }
  *unsigned int v16 = v11;
  *((_DWORD *)v16 + 2) = *a3;
  uint64_t v20 = *v6;
  if (*v6) {
    int v21 = *(_DWORD *)(v20 - 12) + 1;
  }
  else {
    int v21 = 1;
  }
  *(_DWORD *)(v20 - 12) = v21;
  uint64_t v23 = *v6;
  if (*v6) {
    int v24 = *(_DWORD *)(v23 - 12);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
  unint64_t v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_22:
      uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
      unsigned int v16 = result;
      uint64_t v23 = *v6;
      if (*v6) {
        unint64_t v26 = *(unsigned int *)(v23 - 4);
      }
      else {
        unint64_t v26 = 0;
      }
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_22;
  }
  uint64_t v28 = v23 + 16 * v26;
  char v27 = 1;
LABEL_29:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v28;
  *(unsigned char *)(a4 + 16) = v27;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      int v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unsigned int v16 = *((_DWORD *)v11 + 4);
          if (v16 >= 0x100) {
            unsigned int v17 = v16 >> 8;
          }
          else {
            unsigned int v17 = WTF::StringImpl::hashSlowCase(v11);
          }
          int v18 = 0;
          do
          {
            uint64_t v19 = v17 & v15;
            unsigned int v17 = ++v18 + v19;
          }
          while (*(void *)(v14 + 16 * v19));
          uint64_t v20 = v14 + 16 * v19;
          int v21 = *(const char ****)(v20 + 8);
          *(void *)(v20 + 8) = 0;
          if (v21)
          {
            WTF::RefCounted<WebKit::SandboxExtension>::deref(v21);
            uint64_t v22 = *(WTF::StringImpl **)v20;
            *(void *)uint64_t v20 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2) {
                WTF::StringImpl::destroy(v22, v8);
              }
              else {
                *(_DWORD *)v22 -= 2;
              }
            }
          }
          else
          {
            *(void *)uint64_t v20 = 0;
          }
          uint64_t v23 = *v10;
          *int v10 = 0;
          *(void *)uint64_t v20 = v23;
          uint64_t v24 = v4 + 16 * v9;
          uint64_t v25 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          *(void *)(v20 + 8) = v25;
          unint64_t v26 = *(const char ****)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          if (v26) {
            WTF::RefCounted<WebKit::SandboxExtension>::deref(v26);
          }
          uint64_t v11 = *v10;
          *int v10 = 0;
          if (!v11) {
            goto LABEL_33;
          }
          if (*(_DWORD *)v11 == 2) {
            goto LABEL_32;
          }
          *(_DWORD *)v11 -= 2;
        }
        else
        {
          uint64_t v12 = v4 + 16 * v9;
          unint64_t v13 = *(const char ****)(v12 + 8);
          *(void *)(v12 + 8) = 0;
          if (v13)
          {
            WTF::RefCounted<WebKit::SandboxExtension>::deref(v13);
            uint64_t v11 = *v10;
          }
          *int v10 = 0;
          if (!v11) {
            goto LABEL_33;
          }
          if (*(_DWORD *)v11 == 2)
          {
LABEL_32:
            WTF::StringImpl::destroy(v11, v8);
            goto LABEL_33;
          }
          *(_DWORD *)v11 -= 2;
        }
      }
LABEL_33:
      if (++v9 == v5) {
        goto LABEL_37;
      }
    }
  }
  if (v4)
  {
LABEL_37:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::SecurityOriginData const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::SecurityOriginData const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, *a2);
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(a1, a2[1]);
  uint64_t v4 = a2[2];

  return IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(a1, v4);
}

unsigned char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::SecurityOriginData const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::SecurityOriginData const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(a1, *(void *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 16);

  return IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_0,WTF::Ref<WebCore::AudioHardwareListener,WTF::RawPtrTraits<WebCore::AudioHardwareListener>,WTF::DefaultRefDerefTraits<WebCore::AudioHardwareListener>>,WebCore::AudioHardwareListener::Client &>::call@<X0>(void *a1@<X8>)
{
  int v2 = (void *)WTF::fastMalloc((WTF *)0x60);
  uint64_t result = WebKit::RemoteAudioHardwareListener::RemoteAudioHardwareListener(v2);
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_1,WTF::RefPtr<WebCore::RemoteCommandListener,WTF::RawPtrTraits<WebCore::RemoteCommandListener>,WTF::DefaultRefDerefTraits<WebCore::RemoteCommandListener>>,WebCore::RemoteCommandListenerClient &>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = WTF::fastMalloc((WTF *)0x78);
  uint64_t result = WebKit::RemoteRemoteCommandListener::RemoteRemoteCommandListener(v2);
  *a1 = result;
  return result;
}

void std::__function::__func<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_2,std::allocator<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_2>,void ()(BOOL)>::~__func()
{
}

void *std::__function::__func<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_2,std::allocator<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_2>,void ()(BOOL)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE9E7298;
  result[1] = v3;
  return result;
}

IPC::Encoder *std::__function::__func<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_2,std::allocator<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_2>,void ()(BOOL)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  uint64_t v3 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection(*(WebKit::WebProcess **)(a1 + 8));

  return WebKit::GPUProcessConnection::updateMediaConfiguration(v3, v2);
}

void std::__function::__func<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_3,std::allocator<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_3>,void ()(BOOL)>::~__func()
{
}

void *std::__function::__func<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_3,std::allocator<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_3>,void ()(BOOL)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE9E72E0;
  result[1] = v3;
  return result;
}

IPC::Encoder *std::__function::__func<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_3,std::allocator<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_3>,void ()(BOOL)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  uint64_t v3 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection(*(WebKit::WebProcess **)(a1 + 8));

  return WebKit::GPUProcessConnection::updateMediaConfiguration(v3, v2);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebTransportSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebTransportSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebTransportSession&>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  unsigned int v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *unsigned int v16 = v11;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 32), a3 + 24);
    int v21 = *(atomic_uint **)(a3 + 32);
    if (v21) {
      atomic_fetch_add(v21, 1u);
    }
    uint64_t result = (uint64_t *)v16[1];
    v16[1] = (uint64_t)v21;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
    }
    uint64_t v23 = *a1;
    if (*a1) {
      int v24 = *(_DWORD *)(v23 - 12) + 1;
    }
    else {
      int v24 = 1;
    }
    *(_DWORD *)(v23 - 12) = v24;
    uint64_t v26 = *a1;
    if (*a1) {
      int v27 = *(_DWORD *)(v26 - 12);
    }
    else {
      int v27 = 0;
    }
    uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
    unint64_t v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 <= 2 * v28)
      {
LABEL_27:
        uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, v16);
        unsigned int v16 = result;
        uint64_t v26 = *a1;
        if (*a1) {
          unint64_t v29 = *(unsigned int *)(v26 - 4);
        }
        else {
          unint64_t v29 = 0;
        }
      }
    }
    else if (3 * v29 <= 4 * v28)
    {
      goto LABEL_27;
    }
    *(void *)a4 = v16;
    *(void *)(a4 + 8) = v26 + 16 * v29;
    *(unsigned char *)(a4 + 16) = 1;
    return result;
  }
  int v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1) {
      int v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v10;
    unsigned int v16 = (uint64_t *)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        uint64_t *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        uint64_t v11 = *a2;
        unsigned int v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = *(unsigned int *)(v8 - 4);
  }
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v8 + 16 * v25;
  *(unsigned char *)(a4 + 16) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 32), a3 + 24);
  uint64_t v31 = *(atomic_uint **)(a3 + 32);
  if (v31)
  {
    atomic_fetch_add(v31, 1u);
    unsigned int v16 = *(uint64_t **)a4;
  }
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v31;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    return (uint64_t *)WTF::fastFree((WTF *)result, v30);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::CanMakePaymentsWithActiveCard,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E7328;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::CanMakePaymentsWithActiveCard,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E7328;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::CanMakePaymentsWithActiveCard,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  char v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::OpenPaymentSetup,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E7350;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::OpenPaymentSetup,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E7350;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::OpenPaymentSetup,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  char v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::GetSetupFeatures,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E7378;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::GetSetupFeatures,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E7378;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::GetSetupFeatures,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<WebKit::PaymentSetupFeatures>(a2, (uint64_t)&v13);
    if (v14)
    {
      CFTypeRef cf = v13;
      char v12 = 1;
      WebKit::PaymentSetupFeatures::operator WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((id *)&cf, (uint64_t)&v13);
      uint64_t v4 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, const void **))(*(void *)v4 + 16))(v4, &v13);
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v5);
      if (v12)
      {
        CFTypeRef v6 = cf;
        CFTypeRef cf = 0;
        if (v6) {
          CFRelease(v6);
        }
      }
    }
    else
    {
      uint64_t v8 = *a2;
      uint64_t v9 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v10 = a2[3];
      if (v10 && v9) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
      }
      IPC::Connection::cancelReply<Messages::WebPaymentCoordinatorProxy::GetSetupFeatures,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 8);
    IPC::Connection::cancelReply<Messages::WebPaymentCoordinatorProxy::GetSetupFeatures,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v7);
  }
}

void IPC::Connection::cancelReply<Messages::WebPaymentCoordinatorProxy::GetSetupFeatures,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  CFTypeRef cf = 0;
  WebKit::PaymentSetupFeatures::operator WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((id *)&cf, (uint64_t)v6);
  uint64_t v2 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v6);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v3);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void IPC::Decoder::decode<WebKit::PaymentSetupFeatures>(void *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebKit::PaymentSetupFeatures,void>::decode((uint64_t)a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::BeginApplePaySetup,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E73A0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::BeginApplePaySetup,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E73A0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::BeginApplePaySetup,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

_DWORD *WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref(_DWORD *result, void *a2)
{
  if (*result == 1)
  {
    WebKit::WebAutomationDOMWindowObserver::~WebAutomationDOMWindowObserver((WebKit::WebAutomationDOMWindowObserver *)(result - 4), a2);
    return (_DWORD *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

atomic_uchar *volatile **WTF::Detail::CallableWrapper<WebKit::WebCacheStorageConnection::connection(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  {
    uint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  uint64_t v3 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::operator=(*(atomic_uchar *volatile ***)(a1 + 16), *(atomic_uchar *volatile **)(v3 + 24));
  char v4 = 0;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 24), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](v2 + 24);
  }
  uint64_t result = WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::operator=((atomic_uchar *volatile **)(v2 + 32), *(atomic_uchar *volatile ***)(a1 + 16));
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 24), (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1)
  {
    return (atomic_uchar *volatile **)WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 24));
  }
  return result;
}

atomic_uchar *volatile **WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::operator=(atomic_uchar *volatile **a1, atomic_uchar *volatile **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    char v4 = 0;
    atomic_uchar *volatile v5 = *v3;
    int v6 = 1;
    atomic_compare_exchange_strong_explicit(*v3, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      MEMORY[0x19972E8D0](v5);
    }
    ++*((void *)v5 + 1);
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
    }
  }
  uint64_t v7 = *a1;
  *a1 = v3;
  if (v7)
  {
    char v8 = 0;
    atomic_uchar *volatile v9 = *v7;
    atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
    if (v8) {
      MEMORY[0x19972E8D0](v9);
    }
    uint64_t v10 = *((void *)v9 + 1);
    uint64_t v11 = v10 - 1;
    *((void *)v9 + 1) = v10 - 1;
    if (v10 == 1)
    {
      uint64_t v17 = *((void *)v9 + 2);
      uint64_t v13 = *((void *)v9 + 3);
      *((void *)v9 + 3) = 0;
      BOOL v12 = v17 == 0;
    }
    else
    {
      BOOL v12 = 0;
      uint64_t v13 = 0;
    }
    int v14 = 1;
    atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 == 1)
    {
      if (v11) {
        return a1;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      if (v11) {
        return a1;
      }
    }
    uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v15 = &unk_1EE9B37E8;
    *(void *)(v15 + 8) = v9;
    *(void *)(v15 + 16) = v13;
    *(unsigned char *)(v15 + 24) = v12;
    uint64_t v18 = v15;
    WTF::ensureOnMainRunLoop();
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  return a1;
}

{
  atomic_uchar *volatile *v3;
  atomic_uchar *volatile *v4;
  char v5;
  atomic_uchar *volatile v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  uint64_t v3 = *a2;
  *a2 = 0;
  char v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    atomic_uchar *volatile v5 = 0;
    int v6 = *v4;
    atomic_compare_exchange_strong_explicit(*v4, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5) {
      MEMORY[0x19972E8D0](v6);
    }
    uint64_t v7 = *((void *)v6 + 1);
    char v8 = v7 - 1;
    *((void *)v6 + 1) = v7 - 1;
    if (v7 == 1)
    {
      int v14 = *((void *)v6 + 2);
      uint64_t v10 = *((void *)v6 + 3);
      *((void *)v6 + 3) = 0;
      atomic_uchar *volatile v9 = v14 == 0;
    }
    else
    {
      atomic_uchar *volatile v9 = 0;
      uint64_t v10 = 0;
    }
    uint64_t v11 = 1;
    atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
    if (v11 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
    }
    if (!v8)
    {
      BOOL v12 = WTF::fastMalloc((WTF *)0x20);
      *(void *)BOOL v12 = &unk_1EE9B37E8;
      *(void *)(v12 + 8) = v6;
      *(void *)(v12 + 16) = v10;
      *(unsigned char *)(v12 + 24) = v9;
      uint64_t v15 = v12;
      WTF::ensureOnMainRunLoop();
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
    }
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageOpenCache,WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E73F0;
  WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageOpenCache,WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9E73F0;
  WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageOpenCache,WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  v78[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  *a2 = 0;
  char v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  atomic_uchar *volatile v5 = v4;
  *(void *)char v4 = &unk_1EE9E7418;
  *((void *)v4 + 1) = v3;
  v65[0] = 0;
  v65[1] = 0;
  v65[2] = "operator()";
  v65[3] = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    char v7 = 0;
    char v8 = (atomic_uchar *)(v6 + 48);
    int v9 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v6 + 48), (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      char v4 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0](v6 + 48);
    }
    int v10 = *(_DWORD *)(v6 + 88);
    atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != 1) {
      char v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
    }
    uint64_t v11 = *(void *)(a1 + 8);
    if (!v10)
    {
      char v12 = 0;
      uint64_t v13 = (WTF::NativePromiseBase *)(v11 + 48);
      uint64_t v66 = (WTF::StringImpl *)(v11 + 48);
      char v67 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v11 + 48), (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
      if (v12) {
        uint64_t v13 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
      }
      int v14 = (unsigned char *)WTF::NativePromiseBase::logChannel(v13);
      if (*v14)
      {
        uint64_t v15 = v14;
        if (v14[16] >= 4u)
        {
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v71, (WTF::Logger::LogSiteIdentifier *)v65);
          WTF::String::String((WTF::String *)&v70, " settling ");
          WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v69, v11);
          WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v72);
          uint64_t v17 = v69;
          uint64_t v69 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v16);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
          uint64_t v43 = v70;
          int v70 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2) {
              WTF::StringImpl::destroy(v43, v16);
            }
            else {
              *(_DWORD *)v43 -= 2;
            }
          }
          __int16 v44 = v71;
          uint64_t v71 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2) {
              WTF::StringImpl::destroy(v44, v16);
            }
            else {
              *(_DWORD *)v44 -= 2;
            }
          }
          int v45 = *((void *)v15 + 4);
          __int16 v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
          if (v46)
          {
            WTF::String::utf8();
            __int16 v48 = v68[0] ? (char *)v68[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            __int16 v74 = v48;
            _os_log_impl(&dword_1985F2000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            __int16 v46 = v68[0];
            v68[0] = 0;
            if (v46)
            {
              if (*(_DWORD *)v46 == 1) {
                __int16 v46 = (WTF *)WTF::fastFree(v46, v47);
              }
              else {
                --*(_DWORD *)v46;
              }
            }
          }
          if (*v15 && v15[16] >= 4u)
          {
            int v49 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v50 = *v49;
              if (v50) {
                break;
              }
              int v51 = *v49;
              atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v51, v50 | 1, memory_order_acquire, memory_order_acquire);
              if (v51 == v50)
              {
                uint64_t v52 = WTF::Logger::observers(v46);
                uint64_t v53 = *(unsigned int *)(v52 + 12);
                if (v53)
                {
                  __int16 v54 = *(uint64_t **)v52;
                  uint64_t v64 = *(void *)v52 + 8 * v53;
                  do
                  {
                    uint64_t v55 = *v54;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v74 + 4), (WTF::Logger::LogSiteIdentifier *)v65);
                    int v75 = 0;
                    WTF::String::String((WTF::String *)&v76, " settling ");
                    int v77 = 0;
                    uint64_t v56 = v11;
                    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v78, v11);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v55 + 16))(v55, v15, 4, v68);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v57);
                    for (uint64_t i = 40; i != -8; i -= 16)
                    {
                      long long v59 = *(WTF::StringImpl **)&buf[i];
                      *(void *)&buf[i] = 0;
                      if (v59)
                      {
                        if (*(_DWORD *)v59 == 2) {
                          WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v47);
                        }
                        else {
                          *(_DWORD *)v59 -= 2;
                        }
                      }
                    }
                    ++v54;
                    uint64_t v11 = v56;
                  }
                  while (v54 != (uint64_t *)v64);
                }
                int v60 = 1;
                atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v60, 0, memory_order_release, memory_order_relaxed);
                if (v60 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          char v61 = v72;
          v72 = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2) {
              WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v47);
            }
            else {
              *(_DWORD *)v61 -= 2;
            }
          }
        }
      }
      uint64_t v62 = *(unsigned int *)(v11 + 88);
      if (v62 != -1) {
        ((void (*)(uint8_t *, uint64_t))off_1EE9E6A38[v62])(buf, v11 + 56);
      }
      *(void *)(v11 + 56) = v5;
      *(_DWORD *)(v11 + 88) = 2;
      uint64_t result = (WTF::Lock *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v11, (atomic_uchar *volatile *)&v66);
      if (v67)
      {
        uint64_t result = v66;
        int v63 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v66, (unsigned __int8 *)&v63, 0, memory_order_release, memory_order_relaxed);
        if (v63 != 1) {
          return (WTF::Lock *)WTF::Lock::unlockSlow(result);
        }
      }
      return result;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v18 = (unsigned char *)WTF::NativePromiseBase::logChannel(v4);
  if (*v18)
  {
    int v19 = v18;
    if (v18[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v72, (WTF::Logger::LogSiteIdentifier *)v65);
      WTF::String::String((WTF::String *)&v71, " ignored already resolved or rejected ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v70, v11);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, &v66);
      int v21 = v70;
      int v70 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v20);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      uint64_t v22 = v71;
      uint64_t v71 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v20);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      uint64_t v23 = v72;
      v72 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v20);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      int v24 = *((void *)v19 + 4);
      uint64_t v25 = (WTF *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      if (v25)
      {
        WTF::String::utf8();
        int v27 = v68[0] ? (char *)v68[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        __int16 v74 = v27;
        _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v25 = v68[0];
        v68[0] = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1) {
            uint64_t v25 = (WTF *)WTF::fastFree(v25, v26);
          }
          else {
            --*(_DWORD *)v25;
          }
        }
      }
      if (*v19 && v19[16] >= 4u)
      {
        uint64_t v28 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v29 = *v28;
          if (v29) {
            break;
          }
          int v30 = *v28;
          atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, v29 | 1, memory_order_acquire, memory_order_acquire);
          if (v30 == v29)
          {
            uint64_t v31 = v11;
            uint64_t v32 = WTF::Logger::observers(v25);
            uint64_t v33 = *(unsigned int *)(v32 + 12);
            if (v33)
            {
              uint64_t v34 = *(uint64_t **)v32;
              uint64_t v35 = *(void *)v32 + 8 * v33;
              do
              {
                uint64_t v36 = *v34;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v74 + 4), (WTF::Logger::LogSiteIdentifier *)v65);
                int v75 = 0;
                WTF::String::String((WTF::String *)&v76, " ignored already resolved or rejected ");
                int v77 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v78, v31);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v36 + 16))(v36, v19, 4, v68);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v37);
                for (uint64_t j = 40; j != -8; j -= 16)
                {
                  int v39 = *(WTF::StringImpl **)&buf[j];
                  *(void *)&buf[j] = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2) {
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v26);
                    }
                    else {
                      *(_DWORD *)v39 -= 2;
                    }
                  }
                }
                ++v34;
              }
              while (v34 != (uint64_t *)v35);
            }
            int v40 = 1;
            atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v40, 0, memory_order_release, memory_order_relaxed);
            if (v40 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      uint64_t v41 = v66;
      uint64_t v66 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2) {
          WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v26);
        }
        else {
          *(_DWORD *)v41 -= 2;
        }
      }
    }
  }
  return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(void *)v5 + 8))(v5);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageOpenCache,WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E7418;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageOpenCache,WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9E7418;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageOpenCache,WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(result + 8);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      unint64_t v5 = v3[1];
      if (v5 <= v3[2] - v4)
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t *v3 = 0;
        v3[1] = 0;
        uint64_t v13 = v3[3];
        if (v13)
        {
          if (!v5
            || (((*(void (**)(uint64_t))(*(void *)v13 + 16))(v13),
                 uint64_t v21 = *v3,
                 uint64_t v22 = v3[1],
                 uint64_t v23 = v3[3],
                 uint64_t *v3 = 0,
                 v3[1] = 0,
                 v23)
              ? (BOOL v24 = v22 == 0)
              : (BOOL v24 = 1),
                v24))
          {
            uint64_t v11 = 0;
            uint64_t v12 = 0;
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v21);
            uint64_t v12 = *v3;
            uint64_t v11 = v3[1];
          }
        }
      }
      else
      {
        uint64_t v6 = (unsigned __int8 *)v3[2];
        v3[2] = (uint64_t)(v6 + 1);
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          if (v7)
          {
            IPC::ArgumentCoder<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,void>::decode(v3, (uint64_t)&v25);
            if (!v27)
            {
              uint64_t v18 = *v3;
              uint64_t v19 = v3[1];
              uint64_t *v3 = 0;
              v3[1] = 0;
              uint64_t v20 = v3[3];
              if (!v20 || !v19 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18), !v27))
              {
LABEL_9:
                uint64_t v9 = *v3;
                uint64_t v10 = v3[1];
                uint64_t *v3 = 0;
                v3[1] = 0;
                uint64_t result = v3[3];
                if (result && v10)
                {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v9);
                  uint64_t v16 = *v3;
                  uint64_t v17 = v3[1];
                  uint64_t result = v3[3];
                  uint64_t *v3 = 0;
                  v3[1] = 0;
                  if (result && v17) {
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v16);
                  }
                }
                else
                {
                  uint64_t *v3 = 0;
                  v3[1] = 0;
                }
                goto LABEL_11;
              }
            }
            int v8 = 0;
            uint64_t result = v25;
            *(_OWORD *)uint64_t v28 = *(_OWORD *)v26;
            *(void *)&v28[15] = *(void *)&v26[15];
          }
          else
          {
            uint64_t result = IPC::Decoder::decode<WebCore::DOMCacheEngine::Error>(v3);
            if ((unsigned __int16)result < 0x100u) {
              goto LABEL_9;
            }
            int v8 = 1;
          }
          *(_OWORD *)(a2 + 1) = *(_OWORD *)v28;
          *(void *)(a2 + 16) = *(void *)&v28[15];
          *(unsigned char *)a2 = result;
          goto LABEL_14;
        }
        uint64_t v11 = v5;
        uint64_t v12 = v4;
      }
      uint64_t *v3 = 0;
      v3[1] = 0;
      uint64_t v14 = v3[3];
      if (v14) {
        BOOL v15 = v11 == 0;
      }
      else {
        BOOL v15 = 1;
      }
      if (!v15) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12, v11);
      }
      goto LABEL_9;
    }
  }
LABEL_11:
  *(unsigned char *)a2 = 4;
  int v8 = 1;
LABEL_14:
  *(_DWORD *)(a2 + 24) = v8;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::DOMCacheEngine::Error>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      uint64_t v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v2, v1);
        a1 = v18;
        uint64_t v8 = *v18;
        unint64_t v7 = v18[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_6;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10 && v7)
    {
      uint64_t v17 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
      a1 = v17;
    }
    goto LABEL_7;
  }
  unsigned int v5 = *v4;
  if (v5 >= 7)
  {
LABEL_7:
    unsigned int v5 = 0;
    int v6 = 0;
    goto LABEL_8;
  }
  int v6 = 1;
LABEL_8:
  uint64_t v11 = v5 | (v6 << 8);
  if (v11 <= 0xFF)
  {
    uint64_t v13 = *a1;
    uint64_t v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        unsigned int v16 = v11;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
        return v16;
      }
    }
  }
  return v11;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveCache,WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E7440;
  WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveCache,WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9E7440;
  WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveCache,WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  v78[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  unsigned int v5 = v4;
  *(void *)uint64_t v4 = &unk_1EE9E7468;
  *((void *)v4 + 1) = v3;
  v65[0] = 0;
  v65[1] = 0;
  v65[2] = "operator()";
  v65[3] = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    char v7 = 0;
    uint64_t v8 = (atomic_uchar *)(v6 + 48);
    int v9 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v6 + 48), (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      uint64_t v4 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0](v6 + 48);
    }
    int v10 = *(_DWORD *)(v6 + 64);
    atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != 1) {
      uint64_t v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
    }
    uint64_t v11 = *(void *)(a1 + 8);
    if (!v10)
    {
      char v12 = 0;
      uint64_t v13 = (WTF::NativePromiseBase *)(v11 + 48);
      uint64_t v66 = (WTF::StringImpl *)(v11 + 48);
      char v67 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v11 + 48), (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
      if (v12) {
        uint64_t v13 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
      }
      uint64_t v14 = (unsigned char *)WTF::NativePromiseBase::logChannel(v13);
      if (*v14)
      {
        uint64_t v15 = v14;
        if (v14[16] >= 4u)
        {
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v71, (WTF::Logger::LogSiteIdentifier *)v65);
          WTF::String::String((WTF::String *)&v70, " settling ");
          WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v69, v11);
          WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v72);
          uint64_t v17 = v69;
          uint64_t v69 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v16);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
          uint64_t v43 = v70;
          int v70 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2) {
              WTF::StringImpl::destroy(v43, v16);
            }
            else {
              *(_DWORD *)v43 -= 2;
            }
          }
          __int16 v44 = v71;
          uint64_t v71 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2) {
              WTF::StringImpl::destroy(v44, v16);
            }
            else {
              *(_DWORD *)v44 -= 2;
            }
          }
          int v45 = *((void *)v15 + 4);
          __int16 v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
          if (v46)
          {
            WTF::String::utf8();
            __int16 v48 = v68[0] ? (char *)v68[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            __int16 v74 = v48;
            _os_log_impl(&dword_1985F2000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            __int16 v46 = v68[0];
            v68[0] = 0;
            if (v46)
            {
              if (*(_DWORD *)v46 == 1) {
                __int16 v46 = (WTF *)WTF::fastFree(v46, v47);
              }
              else {
                --*(_DWORD *)v46;
              }
            }
          }
          if (*v15 && v15[16] >= 4u)
          {
            int v49 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v50 = *v49;
              if (v50) {
                break;
              }
              int v51 = *v49;
              atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v51, v50 | 1, memory_order_acquire, memory_order_acquire);
              if (v51 == v50)
              {
                uint64_t v52 = WTF::Logger::observers(v46);
                uint64_t v53 = *(unsigned int *)(v52 + 12);
                if (v53)
                {
                  __int16 v54 = *(uint64_t **)v52;
                  uint64_t v64 = *(void *)v52 + 8 * v53;
                  do
                  {
                    uint64_t v55 = *v54;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v74 + 4), (WTF::Logger::LogSiteIdentifier *)v65);
                    int v75 = 0;
                    WTF::String::String((WTF::String *)&v76, " settling ");
                    int v77 = 0;
                    uint64_t v56 = v11;
                    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v78, v11);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v55 + 16))(v55, v15, 4, v68);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v57);
                    for (uint64_t i = 40; i != -8; i -= 16)
                    {
                      long long v59 = *(WTF::StringImpl **)&buf[i];
                      *(void *)&buf[i] = 0;
                      if (v59)
                      {
                        if (*(_DWORD *)v59 == 2) {
                          WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v47);
                        }
                        else {
                          *(_DWORD *)v59 -= 2;
                        }
                      }
                    }
                    ++v54;
                    uint64_t v11 = v56;
                  }
                  while (v54 != (uint64_t *)v64);
                }
                int v60 = 1;
                atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v60, 0, memory_order_release, memory_order_relaxed);
                if (v60 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          char v61 = v72;
          v72 = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2) {
              WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v47);
            }
            else {
              *(_DWORD *)v61 -= 2;
            }
          }
        }
      }
      uint64_t v62 = *(unsigned int *)(v11 + 64);
      if (v62 != -1) {
        ((void (*)(uint8_t *, uint64_t))off_1EE9E6AD8[v62])(buf, v11 + 56);
      }
      *(void *)(v11 + 56) = v5;
      *(_DWORD *)(v11 + 64) = 2;
      uint64_t result = (WTF::Lock *)WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v11, (atomic_uchar *volatile *)&v66);
      if (v67)
      {
        uint64_t result = v66;
        int v63 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v66, (unsigned __int8 *)&v63, 0, memory_order_release, memory_order_relaxed);
        if (v63 != 1) {
          return (WTF::Lock *)WTF::Lock::unlockSlow(result);
        }
      }
      return result;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v18 = (unsigned char *)WTF::NativePromiseBase::logChannel(v4);
  if (*v18)
  {
    uint64_t v19 = v18;
    if (v18[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v72, (WTF::Logger::LogSiteIdentifier *)v65);
      WTF::String::String((WTF::String *)&v71, " ignored already resolved or rejected ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v70, v11);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, &v66);
      uint64_t v21 = v70;
      int v70 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v20);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      uint64_t v22 = v71;
      uint64_t v71 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v20);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      uint64_t v23 = v72;
      v72 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v20);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      BOOL v24 = *((void *)v19 + 4);
      unsigned __int8 v25 = (WTF *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      if (v25)
      {
        WTF::String::utf8();
        char v27 = v68[0] ? (char *)v68[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        __int16 v74 = v27;
        _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        unsigned __int8 v25 = v68[0];
        v68[0] = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1) {
            unsigned __int8 v25 = (WTF *)WTF::fastFree(v25, v26);
          }
          else {
            --*(_DWORD *)v25;
          }
        }
      }
      if (*v19 && v19[16] >= 4u)
      {
        uint64_t v28 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v29 = *v28;
          if (v29) {
            break;
          }
          int v30 = *v28;
          atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, v29 | 1, memory_order_acquire, memory_order_acquire);
          if (v30 == v29)
          {
            uint64_t v31 = v11;
            uint64_t v32 = WTF::Logger::observers(v25);
            uint64_t v33 = *(unsigned int *)(v32 + 12);
            if (v33)
            {
              uint64_t v34 = *(uint64_t **)v32;
              uint64_t v35 = *(void *)v32 + 8 * v33;
              do
              {
                uint64_t v36 = *v34;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v74 + 4), (WTF::Logger::LogSiteIdentifier *)v65);
                int v75 = 0;
                WTF::String::String((WTF::String *)&v76, " ignored already resolved or rejected ");
                int v77 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v78, v31);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v36 + 16))(v36, v19, 4, v68);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v37);
                for (uint64_t j = 40; j != -8; j -= 16)
                {
                  int v39 = *(WTF::StringImpl **)&buf[j];
                  *(void *)&buf[j] = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2) {
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v26);
                    }
                    else {
                      *(_DWORD *)v39 -= 2;
                    }
                  }
                }
                ++v34;
              }
              while (v34 != (uint64_t *)v35);
            }
            int v40 = 1;
            atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v40, 0, memory_order_release, memory_order_relaxed);
            if (v40 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      uint64_t v41 = v66;
      uint64_t v66 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2) {
          WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v26);
        }
        else {
          *(_DWORD *)v41 -= 2;
        }
      }
    }
  }
  return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(void *)v5 + 8))(v5);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveCache,WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<BOOL,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E7468;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveCache,WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<BOOL,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9E7468;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveCache,WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<BOOL,WebCore::DOMCacheEngine::Error>>::call@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)result[1];
  if (!v3 || (uint64_t v4 = *v3) == 0)
  {
LABEL_15:
    *(unsigned char *)a2 = 4;
    *(_DWORD *)(a2 + 4) = 1;
    return result;
  }
  unint64_t v5 = v3[1];
  if (v5 <= v3[2] - v4)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t v15 = v3[3];
    if (v15)
    {
      if (!v5
        || (((*(void (**)(uint64_t))(*(void *)v15 + 16))(v15),
             uint64_t v21 = *v3,
             uint64_t v22 = v3[1],
             uint64_t v23 = v3[3],
             uint64_t *v3 = 0,
             v3[1] = 0,
             v23)
          ? (BOOL v24 = v22 == 0)
          : (BOOL v24 = 1),
            v24))
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v21);
        uint64_t v14 = *v3;
        unint64_t v13 = v3[1];
      }
    }
LABEL_19:
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t v16 = v3[3];
    if (v16) {
      BOOL v17 = v13 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
  uint64_t v6 = (unsigned __int8 *)v3[2];
  v3[2] = (uint64_t)(v6 + 1);
  if (*v6 >= 2u)
  {
    unint64_t v13 = v5;
    uint64_t v14 = v4;
    goto LABEL_19;
  }
  if (!*v6)
  {
    uint64_t result = (void *)IPC::Decoder::decode<WebCore::DOMCacheEngine::Error>(v3);
    if ((unsigned __int16)result >= 0x100u)
    {
      BOOL v9 = (char)result;
      uint64_t v8 = 0x100000000;
      goto LABEL_17;
    }
    goto LABEL_10;
  }
  if (v5 <= (unint64_t)&v6[-v4 + 1])
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t v20 = v3[3];
    if (v20)
    {
      (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
      unint64_t v13 = 0;
      uint64_t v25 = *v3;
      uint64_t v26 = v3[1];
      uint64_t v27 = v3[3];
      uint64_t *v3 = 0;
      v3[1] = 0;
      uint64_t v14 = 0;
      if (v27)
      {
        if (v26)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25);
          uint64_t v14 = *v3;
          unint64_t v13 = v3[1];
        }
      }
    }
LABEL_28:
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t v16 = v3[3];
    if (!v16 || !v13)
    {
LABEL_10:
      uint64_t v10 = *v3;
      uint64_t v11 = v3[1];
      uint64_t *v3 = 0;
      v3[1] = 0;
      uint64_t result = (void *)v3[3];
      if (result) {
        BOOL v12 = v11 == 0;
      }
      else {
        BOOL v12 = 1;
      }
      if (!v12)
      {
        (*(void (**)(void *, uint64_t))(*result + 16))(result, v10);
        uint64_t v18 = *v3;
        uint64_t v19 = v3[1];
        uint64_t result = (void *)v3[3];
        uint64_t *v3 = 0;
        v3[1] = 0;
        if (result)
        {
          if (v19) {
            uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v18);
          }
        }
      }
      goto LABEL_15;
    }
LABEL_30:
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14, v13);
    goto LABEL_10;
  }
  v3[2] = (uint64_t)(v6 + 2);
  unsigned int v7 = v6[1];
  if (v7 >= 2)
  {
    unint64_t v13 = v5;
    uint64_t v14 = v4;
    goto LABEL_28;
  }
  uint64_t v8 = 0;
  BOOL v9 = v7 != 0;
LABEL_17:
  *(void *)a2 = v9 | (unint64_t)v8;
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageAllCaches,WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E7490;
  WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageAllCaches,WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9E7490;
  WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageAllCaches,WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  v78[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  unint64_t v5 = v4;
  *(void *)uint64_t v4 = &unk_1EE9E74B8;
  *((void *)v4 + 1) = v3;
  v65[0] = 0;
  v65[1] = 0;
  v65[2] = "operator()";
  v65[3] = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    char v7 = 0;
    uint64_t v8 = (atomic_uchar *)(v6 + 48);
    int v9 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v6 + 48), (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      uint64_t v4 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0](v6 + 48);
    }
    int v10 = *(_DWORD *)(v6 + 88);
    atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != 1) {
      uint64_t v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
    }
    uint64_t v11 = *(void *)(a1 + 8);
    if (!v10)
    {
      char v12 = 0;
      unint64_t v13 = (WTF::NativePromiseBase *)(v11 + 48);
      uint64_t v66 = (WTF::StringImpl *)(v11 + 48);
      char v67 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v11 + 48), (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
      if (v12) {
        unint64_t v13 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
      }
      uint64_t v14 = (unsigned char *)WTF::NativePromiseBase::logChannel(v13);
      if (*v14)
      {
        uint64_t v15 = v14;
        if (v14[16] >= 4u)
        {
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v71, (WTF::Logger::LogSiteIdentifier *)v65);
          WTF::String::String((WTF::String *)&v70, " settling ");
          WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v69, v11);
          WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v72);
          BOOL v17 = v69;
          uint64_t v69 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v16);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
          uint64_t v43 = v70;
          int v70 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2) {
              WTF::StringImpl::destroy(v43, v16);
            }
            else {
              *(_DWORD *)v43 -= 2;
            }
          }
          __int16 v44 = v71;
          uint64_t v71 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2) {
              WTF::StringImpl::destroy(v44, v16);
            }
            else {
              *(_DWORD *)v44 -= 2;
            }
          }
          int v45 = *((void *)v15 + 4);
          __int16 v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
          if (v46)
          {
            WTF::String::utf8();
            __int16 v48 = v68[0] ? (char *)v68[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            __int16 v74 = v48;
            _os_log_impl(&dword_1985F2000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            __int16 v46 = v68[0];
            v68[0] = 0;
            if (v46)
            {
              if (*(_DWORD *)v46 == 1) {
                __int16 v46 = (WTF *)WTF::fastFree(v46, v47);
              }
              else {
                --*(_DWORD *)v46;
              }
            }
          }
          if (*v15 && v15[16] >= 4u)
          {
            int v49 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v50 = *v49;
              if (v50) {
                break;
              }
              int v51 = *v49;
              atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v51, v50 | 1, memory_order_acquire, memory_order_acquire);
              if (v51 == v50)
              {
                uint64_t v52 = WTF::Logger::observers(v46);
                uint64_t v53 = *(unsigned int *)(v52 + 12);
                if (v53)
                {
                  __int16 v54 = *(uint64_t **)v52;
                  uint64_t v64 = *(void *)v52 + 8 * v53;
                  do
                  {
                    uint64_t v55 = *v54;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v74 + 4), (WTF::Logger::LogSiteIdentifier *)v65);
                    int v75 = 0;
                    WTF::String::String((WTF::String *)&v76, " settling ");
                    int v77 = 0;
                    uint64_t v56 = v11;
                    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v78, v11);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v55 + 16))(v55, v15, 4, v68);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v57);
                    for (uint64_t i = 40; i != -8; i -= 16)
                    {
                      long long v59 = *(WTF::StringImpl **)&buf[i];
                      *(void *)&buf[i] = 0;
                      if (v59)
                      {
                        if (*(_DWORD *)v59 == 2) {
                          WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v47);
                        }
                        else {
                          *(_DWORD *)v59 -= 2;
                        }
                      }
                    }
                    ++v54;
                    uint64_t v11 = v56;
                  }
                  while (v54 != (uint64_t *)v64);
                }
                int v60 = 1;
                atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v60, 0, memory_order_release, memory_order_relaxed);
                if (v60 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          char v61 = v72;
          v72 = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2) {
              WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v47);
            }
            else {
              *(_DWORD *)v61 -= 2;
            }
          }
        }
      }
      uint64_t v62 = *(unsigned int *)(v11 + 88);
      if (v62 != -1) {
        ((void (*)(uint8_t *, uint64_t))off_1EE9E6B78[v62])(buf, v11 + 56);
      }
      *(void *)(v11 + 56) = v5;
      *(_DWORD *)(v11 + 88) = 2;
      uint64_t result = (WTF::Lock *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v11, (atomic_uchar *volatile *)&v66);
      if (v67)
      {
        uint64_t result = v66;
        int v63 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v66, (unsigned __int8 *)&v63, 0, memory_order_release, memory_order_relaxed);
        if (v63 != 1) {
          return (WTF::Lock *)WTF::Lock::unlockSlow(result);
        }
      }
      return result;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v18 = (unsigned char *)WTF::NativePromiseBase::logChannel(v4);
  if (*v18)
  {
    uint64_t v19 = v18;
    if (v18[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v72, (WTF::Logger::LogSiteIdentifier *)v65);
      WTF::String::String((WTF::String *)&v71, " ignored already resolved or rejected ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v70, v11);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, &v66);
      uint64_t v21 = v70;
      int v70 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v20);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      uint64_t v22 = v71;
      uint64_t v71 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v20);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      uint64_t v23 = v72;
      v72 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v20);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      BOOL v24 = *((void *)v19 + 4);
      uint64_t v25 = (WTF *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      if (v25)
      {
        WTF::String::utf8();
        uint64_t v27 = v68[0] ? (char *)v68[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        __int16 v74 = v27;
        _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v25 = v68[0];
        v68[0] = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1) {
            uint64_t v25 = (WTF *)WTF::fastFree(v25, v26);
          }
          else {
            --*(_DWORD *)v25;
          }
        }
      }
      if (*v19 && v19[16] >= 4u)
      {
        uint64_t v28 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v29 = *v28;
          if (v29) {
            break;
          }
          int v30 = *v28;
          atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, v29 | 1, memory_order_acquire, memory_order_acquire);
          if (v30 == v29)
          {
            uint64_t v31 = v11;
            uint64_t v32 = WTF::Logger::observers(v25);
            uint64_t v33 = *(unsigned int *)(v32 + 12);
            if (v33)
            {
              uint64_t v34 = *(uint64_t **)v32;
              uint64_t v35 = *(void *)v32 + 8 * v33;
              do
              {
                uint64_t v36 = *v34;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v74 + 4), (WTF::Logger::LogSiteIdentifier *)v65);
                int v75 = 0;
                WTF::String::String((WTF::String *)&v76, " ignored already resolved or rejected ");
                int v77 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v78, v31);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v36 + 16))(v36, v19, 4, v68);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v37);
                for (uint64_t j = 40; j != -8; j -= 16)
                {
                  int v39 = *(WTF::StringImpl **)&buf[j];
                  *(void *)&buf[j] = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2) {
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v26);
                    }
                    else {
                      *(_DWORD *)v39 -= 2;
                    }
                  }
                }
                ++v34;
              }
              while (v34 != (uint64_t *)v35);
            }
            int v40 = 1;
            atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v40, 0, memory_order_release, memory_order_relaxed);
            if (v40 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      uint64_t v41 = v66;
      uint64_t v66 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2) {
          WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v26);
        }
        else {
          *(_DWORD *)v41 -= 2;
        }
      }
    }
  }
  return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(void *)v5 + 8))(v5);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageAllCaches,WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E74B8;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageAllCaches,WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9E74B8;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageAllCaches,WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::call@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)result[1];
  if (!v3) {
    goto LABEL_16;
  }
  uint64_t v4 = *v3;
  if (!*v3) {
    goto LABEL_16;
  }
  unint64_t v5 = v3[1];
  if (v5 <= v3[2] - v4)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t v19 = v3[3];
    if (v19)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        uint64_t v18 = *v3;
        uint64_t v17 = v3[1];
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
    unint64_t v5 = 0;
    uint64_t v4 = 0;
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t v20 = v3[3];
    if (v20)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18, v17);
        uint64_t v4 = *v3;
        unint64_t v5 = v3[1];
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_27;
  }
  uint64_t v6 = (unsigned __int8 *)v3[2];
  v3[2] = (uint64_t)(v6 + 1);
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
LABEL_27:
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t v21 = v3[3];
    if (v21) {
      BOOL v22 = v5 == 0;
    }
    else {
      BOOL v22 = 1;
    }
    if (!v22) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v21 + 16))(v21, v4, v5);
    }
    goto LABEL_9;
  }
  if (!v7)
  {
    unsigned __int16 v10 = IPC::Decoder::decode<WebCore::DOMCacheEngine::Error>(v3);
    if (v10 < 0x100u) {
      goto LABEL_9;
    }
    LOBYTE(v29[0]) = v10;
    int v30 = 1;
LABEL_19:
    char v31 = 1;
    v26[0] = 0;
    int v27 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v26, (uint64_t)v29);
    char v28 = 1;
    if (!v31) {
      goto LABEL_22;
    }
    if (v30 == -1) {
      goto LABEL_22;
    }
    ((void (*)(uint64_t *, void *))off_1EE9E6B90[v30])(&v32, v29);
    if (v28) {
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  IPC::ArgumentCoder<WebCore::DOMCacheEngine::CacheInfos,void>::decode(v3, (uint64_t)&v32);
  if (v35
    || (v23 = *v3, v24 = v3[1], uint64_t *v3 = 0, v3[1] = 0, (v25 = v3[3]) != 0)
    && v24
    && ((*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23), v35))
  {
    v29[0] = v32;
    uint64_t v9 = v33;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    v29[1] = v9;
    v29[2] = v34;
    int v30 = 0;
    WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v8);
    goto LABEL_19;
  }
LABEL_9:
  uint64_t v11 = *v3;
  uint64_t v12 = v3[1];
  uint64_t *v3 = 0;
  v3[1] = 0;
  uint64_t v13 = v3[3];
  if (v13) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
  }
  v26[0] = 0;
  char v28 = 0;
LABEL_15:
  uint64_t v15 = *v3;
  uint64_t v16 = v3[1];
  uint64_t *v3 = 0;
  v3[1] = 0;
  uint64_t result = (void *)v3[3];
  if (!result
    || !v16
    || (uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v15), !v28))
  {
LABEL_16:
    *(unsigned char *)a2 = 4;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
LABEL_22:
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a2 + 24) = -1;
  uint64_t result = (void *)std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v26);
  if (v28)
  {
    if (v27 != -1) {
      return (void *)((uint64_t (*)(void *, unsigned char *))off_1EE9E6B90[v27])(v29, v26);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRetrieveRecords,WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E74E0;
  WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRetrieveRecords,WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9E74E0;
  WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRetrieveRecords,WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  v78[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  unint64_t v5 = v4;
  *(void *)uint64_t v4 = &unk_1EE9E7508;
  *((void *)v4 + 1) = v3;
  v65[0] = 0;
  v65[1] = 0;
  v65[2] = "operator()";
  v65[3] = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    char v7 = 0;
    uint64_t v8 = (atomic_uchar *)(v6 + 48);
    int v9 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v6 + 48), (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      uint64_t v4 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0](v6 + 48);
    }
    int v10 = *(_DWORD *)(v6 + 80);
    atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != 1) {
      uint64_t v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
    }
    uint64_t v11 = *(void *)(a1 + 8);
    if (!v10)
    {
      char v12 = 0;
      uint64_t v13 = (WTF::NativePromiseBase *)(v11 + 48);
      uint64_t v66 = (WTF::StringImpl *)(v11 + 48);
      char v67 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v11 + 48), (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
      if (v12) {
        uint64_t v13 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
      }
      BOOL v14 = (unsigned char *)WTF::NativePromiseBase::logChannel(v13);
      if (*v14)
      {
        uint64_t v15 = v14;
        if (v14[16] >= 4u)
        {
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v71, (WTF::Logger::LogSiteIdentifier *)v65);
          WTF::String::String((WTF::String *)&v70, " settling ");
          WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v69, v11);
          WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v72);
          uint64_t v17 = v69;
          uint64_t v69 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v16);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
          uint64_t v43 = v70;
          int v70 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2) {
              WTF::StringImpl::destroy(v43, v16);
            }
            else {
              *(_DWORD *)v43 -= 2;
            }
          }
          __int16 v44 = v71;
          uint64_t v71 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2) {
              WTF::StringImpl::destroy(v44, v16);
            }
            else {
              *(_DWORD *)v44 -= 2;
            }
          }
          int v45 = *((void *)v15 + 4);
          __int16 v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
          if (v46)
          {
            WTF::String::utf8();
            __int16 v48 = v68[0] ? (char *)v68[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            __int16 v74 = v48;
            _os_log_impl(&dword_1985F2000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            __int16 v46 = v68[0];
            v68[0] = 0;
            if (v46)
            {
              if (*(_DWORD *)v46 == 1) {
                __int16 v46 = (WTF *)WTF::fastFree(v46, v47);
              }
              else {
                --*(_DWORD *)v46;
              }
            }
          }
          if (*v15 && v15[16] >= 4u)
          {
            int v49 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v50 = *v49;
              if (v50) {
                break;
              }
              int v51 = *v49;
              atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v51, v50 | 1, memory_order_acquire, memory_order_acquire);
              if (v51 == v50)
              {
                uint64_t v52 = WTF::Logger::observers(v46);
                uint64_t v53 = *(unsigned int *)(v52 + 12);
                if (v53)
                {
                  __int16 v54 = *(uint64_t **)v52;
                  uint64_t v64 = *(void *)v52 + 8 * v53;
                  do
                  {
                    uint64_t v55 = *v54;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v74 + 4), (WTF::Logger::LogSiteIdentifier *)v65);
                    int v75 = 0;
                    WTF::String::String((WTF::String *)&v76, " settling ");
                    int v77 = 0;
                    uint64_t v56 = v11;
                    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v78, v11);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v55 + 16))(v55, v15, 4, v68);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v57);
                    for (uint64_t i = 40; i != -8; i -= 16)
                    {
                      long long v59 = *(WTF::StringImpl **)&buf[i];
                      *(void *)&buf[i] = 0;
                      if (v59)
                      {
                        if (*(_DWORD *)v59 == 2) {
                          WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v47);
                        }
                        else {
                          *(_DWORD *)v59 -= 2;
                        }
                      }
                    }
                    ++v54;
                    uint64_t v11 = v56;
                  }
                  while (v54 != (uint64_t *)v64);
                }
                int v60 = 1;
                atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v60, 0, memory_order_release, memory_order_relaxed);
                if (v60 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          char v61 = v72;
          v72 = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2) {
              WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v47);
            }
            else {
              *(_DWORD *)v61 -= 2;
            }
          }
        }
      }
      uint64_t v62 = *(unsigned int *)(v11 + 80);
      if (v62 != -1) {
        ((void (*)(uint8_t *, uint64_t))off_1EE9E6C38[v62])(buf, v11 + 56);
      }
      *(void *)(v11 + 56) = v5;
      *(_DWORD *)(v11 + 80) = 2;
      uint64_t result = (WTF::Lock *)WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v11, (atomic_uchar *volatile *)&v66);
      if (v67)
      {
        uint64_t result = v66;
        int v63 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v66, (unsigned __int8 *)&v63, 0, memory_order_release, memory_order_relaxed);
        if (v63 != 1) {
          return (WTF::Lock *)WTF::Lock::unlockSlow(result);
        }
      }
      return result;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v18 = (unsigned char *)WTF::NativePromiseBase::logChannel(v4);
  if (*v18)
  {
    uint64_t v19 = v18;
    if (v18[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v72, (WTF::Logger::LogSiteIdentifier *)v65);
      WTF::String::String((WTF::String *)&v71, " ignored already resolved or rejected ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v70, v11);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, &v66);
      uint64_t v21 = v70;
      int v70 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v20);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      BOOL v22 = v71;
      uint64_t v71 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v20);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      uint64_t v23 = v72;
      v72 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v20);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      uint64_t v24 = *((void *)v19 + 4);
      uint64_t v25 = (WTF *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      if (v25)
      {
        WTF::String::utf8();
        int v27 = v68[0] ? (char *)v68[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        __int16 v74 = v27;
        _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v25 = v68[0];
        v68[0] = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1) {
            uint64_t v25 = (WTF *)WTF::fastFree(v25, v26);
          }
          else {
            --*(_DWORD *)v25;
          }
        }
      }
      if (*v19 && v19[16] >= 4u)
      {
        char v28 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v29 = *v28;
          if (v29) {
            break;
          }
          int v30 = *v28;
          atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, v29 | 1, memory_order_acquire, memory_order_acquire);
          if (v30 == v29)
          {
            uint64_t v31 = v11;
            uint64_t v32 = WTF::Logger::observers(v25);
            uint64_t v33 = *(unsigned int *)(v32 + 12);
            if (v33)
            {
              uint64_t v34 = *(uint64_t **)v32;
              uint64_t v35 = *(void *)v32 + 8 * v33;
              do
              {
                uint64_t v36 = *v34;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v74 + 4), (WTF::Logger::LogSiteIdentifier *)v65);
                int v75 = 0;
                WTF::String::String((WTF::String *)&v76, " ignored already resolved or rejected ");
                int v77 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v78, v31);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v36 + 16))(v36, v19, 4, v68);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v37);
                for (uint64_t j = 40; j != -8; j -= 16)
                {
                  int v39 = *(WTF::StringImpl **)&buf[j];
                  *(void *)&buf[j] = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2) {
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v26);
                    }
                    else {
                      *(_DWORD *)v39 -= 2;
                    }
                  }
                }
                ++v34;
              }
              while (v34 != (uint64_t *)v35);
            }
            int v40 = 1;
            atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v40, 0, memory_order_release, memory_order_relaxed);
            if (v40 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      uint64_t v41 = v66;
      uint64_t v66 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2) {
          WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v26);
        }
        else {
          *(_DWORD *)v41 -= 2;
        }
      }
    }
  }
  return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(void *)v5 + 8))(v5);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRetrieveRecords,WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E7508;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRetrieveRecords,WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9E7508;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRetrieveRecords,WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::call@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (IPC::Decoder *)result[1];
  if (!v3) {
    goto LABEL_16;
  }
  uint64_t v4 = *(void **)v3;
  if (!*(void *)v3) {
    goto LABEL_16;
  }
  unint64_t v5 = *((void *)v3 + 1);
  if (v5 <= *((void *)v3 + 2) - (void)v4)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v19 = *((void *)v3 + 3);
    if (v19)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        uint64_t v18 = *(void **)v3;
        uint64_t v17 = *((void *)v3 + 1);
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
    unint64_t v5 = 0;
    uint64_t v4 = 0;
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v20 = *((void *)v3 + 3);
    if (v20)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v20 + 16))(v20, v18, v17);
        uint64_t v4 = *(void **)v3;
        unint64_t v5 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_30;
  }
  uint64_t v6 = (unsigned __int8 *)*((void *)v3 + 2);
  *((void *)v3 + 2) = v6 + 1;
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
LABEL_30:
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v21 = *((void *)v3 + 3);
    if (v21) {
      BOOL v22 = v5 == 0;
    }
    else {
      BOOL v22 = 1;
    }
    if (!v22) {
      (*(void (**)(uint64_t, void *, unint64_t))(*(void *)v21 + 16))(v21, v4, v5);
    }
    goto LABEL_9;
  }
  if (!v7)
  {
    unsigned __int16 v10 = IPC::Decoder::decode<WebCore::DOMCacheEngine::Error>(v3);
    if (v10 >= 0x100u)
    {
      LOBYTE(v26[0]) = v10;
      int v27 = 1;
      goto LABEL_19;
    }
LABEL_9:
    uint64_t v11 = *(void **)v3;
    uint64_t v12 = *((void *)v3 + 1);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v13 = *((void *)v3 + 3);
    if (v13) {
      BOOL v14 = v12 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14) {
      (*(void (**)(uint64_t, void *))(*(void *)v13 + 16))(v13, v11);
    }
    v23[0] = 0;
    char v25 = 0;
LABEL_15:
    uint64_t v15 = *(void **)v3;
    uint64_t v16 = *((void *)v3 + 1);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t result = (void *)*((void *)v3 + 3);
    if (result)
    {
      if (v16)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *, void *))(*result + 16))(result, v15);
        if (v25) {
          goto LABEL_22;
        }
      }
    }
LABEL_16:
    *(unsigned char *)a2 = 4;
    *(_DWORD *)(a2 + 16) = 1;
    return result;
  }
  IPC::Decoder::decode<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v3, v4, (uint64_t)&v29);
  if (!v31) {
    goto LABEL_9;
  }
  v26[0] = v29;
  uint64_t v9 = v30;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  v26[1] = v9;
  int v27 = 0;
  WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v8);
LABEL_19:
  char v28 = 1;
  v23[0] = 0;
  int v24 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v23, (uint64_t)v26);
  char v25 = 1;
  if (v28)
  {
    if (v27 != -1)
    {
      ((void (*)(uint64_t *, void *))off_1EE9E6C50[v27])(&v29, v26);
      if (!v25) {
        goto LABEL_15;
      }
    }
  }
LABEL_22:
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  uint64_t result = (void *)std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v23);
  if (v25)
  {
    if (v24 != -1) {
      return (void *)((uint64_t (*)(void *, unsigned char *))off_1EE9E6C50[v24])(v26, v23);
    }
  }
  return result;
}

uint64_t WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *a2)
{
  _OWORD v40[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v4 + 8) = 1;
  *(void *)uint64_t v4 = &unk_1EE9E6CE0;
  long long v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 32) = v5;
  *(unsigned char *)(v4 + 48) = 0;
  uint64_t v6 = (WTF::Lock *)(v4 + 48);
  *(_DWORD *)(v4 + 80) = 0;
  *(void *)(v4 + 88) = v4 + 104;
  *(void *)(v4 + 96) = 1;
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = 0;
  *(_WORD *)(v4 + 128) = 0;
  unsigned int v7 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v4);
  if (*v7)
  {
    uint64_t v8 = v7;
    if (v7[16] >= 4u)
    {
      WTF::String::String((WTF::String *)&v36, "creating ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v35, v4);
      *(void *)buf = v36;
      v34[0] = v35;
      uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v34, &v37);
      if (!v37)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v11 = v35;
      uint64_t v35 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      uint64_t v12 = v36;
      uint64_t v36 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v10);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
      uint64_t v13 = *((void *)v8 + 4);
      BOOL v14 = (WTF *)os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        WTF::String::utf8();
        uint64_t v16 = v34[0] ? (char *)v34[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        BOOL v14 = v34[0];
        v34[0] = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1) {
            BOOL v14 = (WTF *)WTF::fastFree(v14, v15);
          }
          else {
            --*(_DWORD *)v14;
          }
        }
      }
      if (*v8 && v8[16] >= 4u)
      {
        uint64_t v17 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v18 = *v17;
          if (v18) {
            break;
          }
          int v19 = *v17;
          atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v19, v18 | 1, memory_order_acquire, memory_order_acquire);
          if (v19 == v18)
          {
            uint64_t v33 = a1;
            uint64_t v20 = WTF::Logger::observers(v14);
            uint64_t v21 = *(unsigned int *)(v20 + 12);
            if (v21)
            {
              BOOL v22 = *(uint64_t **)v20;
              uint64_t v23 = *(void *)v20 + 8 * v21;
              do
              {
                uint64_t v24 = *v22;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "creating ");
                int v39 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v40, v4);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v34, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(void *)v24 + 16))(v24, v8, 4, v34);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v25);
                for (uint64_t i = 24; i != -8; i -= 16)
                {
                  int v27 = *(WTF::StringImpl **)&buf[i];
                  *(void *)&buf[i] = 0;
                  if (v27)
                  {
                    if (*(_DWORD *)v27 == 2) {
                      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v15);
                    }
                    else {
                      *(_DWORD *)v27 -= 2;
                    }
                  }
                }
                ++v22;
              }
              while (v22 != (uint64_t *)v23);
            }
            int v28 = 1;
            atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
            uint64_t v6 = (WTF::Lock *)(v4 + 48);
            a1 = v33;
            if (v28 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      unsigned int v7 = (unsigned __int8 *)v37;
      int v37 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          unsigned int v7 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v7, (WTF::StringImpl *)v15);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
    }
  }
  char v29 = 0;
  *(void *)a1 = v4;
  long long v30 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 8) = v30;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 48), (unsigned __int8 *)&v29, 1u, memory_order_acquire, memory_order_acquire);
  if (v29) {
    unsigned int v7 = (unsigned __int8 *)MEMORY[0x19972E8D0](v6);
  }
  char v31 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
  if (*v31 && v31[16] >= 4u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v31, a2, " runSynchronouslyOnTarget ", v4);
  }
  atomic_store(0, (unsigned __int8 *)(v4 + 129));
  int v32 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 48), (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
  if (v32 != 1) {
    WTF::Lock::unlockSlow(v6);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E7530;
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9E7530;
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (WTF::NativePromiseBase *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9E7558;
  v4[1] = v3;
  unsigned int v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  uint64_t result = (uint64_t)v7;
  if (v7) {
    return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  return result;
}

unsigned __int8 *WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleWithFunction<std::enable_if<true,void>>(WTF::NativePromiseBase *a1, uint64_t *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  v75[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)a1;
  if (*(void *)a1)
  {
    long long v5 = (uint64_t *)a1;
    char v6 = 0;
    unsigned int v7 = (atomic_uchar *)(v3 + 48);
    int v8 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 48), (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      a1 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0](v3 + 48);
    }
    int v9 = *(_DWORD *)(v3 + 80);
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 != 1) {
      a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
    }
    uint64_t v10 = *v5;
    if (!v9)
    {
      char v11 = 0;
      uint64_t v12 = (WTF::NativePromiseBase *)(v10 + 48);
      int v63 = (WTF::StringImpl *)(v10 + 48);
      char v64 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
      if (v11) {
        uint64_t v12 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
      }
      uint64_t v13 = (unsigned char *)WTF::NativePromiseBase::logChannel(v12);
      if (*v13)
      {
        BOOL v14 = v13;
        if (v13[16] >= 4u)
        {
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v68, a3);
          WTF::String::String((WTF::String *)&v67, " settling ");
          WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v66, v10);
          WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v68, (uint64_t *)&v67, (uint64_t *)&v66, &v69);
          uint64_t v16 = v66;
          uint64_t v66 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, v15);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
          int v40 = v67;
          char v67 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2) {
              WTF::StringImpl::destroy(v40, v15);
            }
            else {
              *(_DWORD *)v40 -= 2;
            }
          }
          uint64_t v41 = v68;
          uint64_t v68 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2) {
              WTF::StringImpl::destroy(v41, v15);
            }
            else {
              *(_DWORD *)v41 -= 2;
            }
          }
          __int16 v42 = *((void *)v14 + 4);
          uint64_t v43 = (WTF *)os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
          if (v43)
          {
            WTF::String::utf8();
            int v45 = v65[0] ? (char *)v65[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            uint64_t v71 = v45;
            _os_log_impl(&dword_1985F2000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            uint64_t v43 = v65[0];
            v65[0] = 0;
            if (v43)
            {
              if (*(_DWORD *)v43 == 1) {
                uint64_t v43 = (WTF *)WTF::fastFree(v43, v44);
              }
              else {
                --*(_DWORD *)v43;
              }
            }
          }
          if (*v14 && v14[16] >= 4u)
          {
            __int16 v46 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v47 = *v46;
              if (v47) {
                break;
              }
              int v48 = *v46;
              atomic_compare_exchange_strong_explicit(v46, (unsigned __int8 *)&v48, v47 | 1, memory_order_acquire, memory_order_acquire);
              if (v48 == v47)
              {
                uint64_t v49 = WTF::Logger::observers(v43);
                uint64_t v50 = *(unsigned int *)(v49 + 12);
                if (v50)
                {
                  int v51 = *(uint64_t **)v49;
                  uint64_t v52 = *(void *)v49 + 8 * v50;
                  do
                  {
                    uint64_t v53 = *v51;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v71 + 4), a3);
                    int v72 = 0;
                    WTF::String::String((WTF::String *)&v73, " settling ");
                    int v74 = 0;
                    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v75, v10);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v65, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v53 + 16))(v53, v14, 4, v65);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v65, v54);
                    for (uint64_t i = 40; i != -8; i -= 16)
                    {
                      uint64_t v56 = *(WTF::StringImpl **)&buf[i];
                      *(void *)&buf[i] = 0;
                      if (v56)
                      {
                        if (*(_DWORD *)v56 == 2) {
                          WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v44);
                        }
                        else {
                          *(_DWORD *)v56 -= 2;
                        }
                      }
                    }
                    ++v51;
                  }
                  while (v51 != (uint64_t *)v52);
                }
                int v57 = 1;
                atomic_compare_exchange_strong_explicit(v46, (unsigned __int8 *)&v57, 0, memory_order_release, memory_order_relaxed);
                if (v57 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          uint64_t v58 = v69;
          uint64_t v69 = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2) {
              WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v44);
            }
            else {
              *(_DWORD *)v58 -= 2;
            }
          }
        }
      }
      uint64_t v59 = *(unsigned int *)(v10 + 80);
      if (v59 != -1) {
        ((void (*)(uint8_t *, uint64_t))off_1EE9E6CF8[v59])(buf, v10 + 56);
      }
      uint64_t v60 = *a2;
      *a2 = 0;
      *(void *)(v10 + 56) = v60;
      *(_DWORD *)(v10 + 80) = 2;
      uint64_t result = (unsigned __int8 *)WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v10, (atomic_uchar *volatile *)&v63);
      if (v64)
      {
        uint64_t result = (unsigned __int8 *)v63;
        int v61 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v63, (unsigned __int8 *)&v61, 0, memory_order_release, memory_order_relaxed);
        if (v61 != 1) {
          return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
        }
      }
      return result;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
  if (*result) {
    BOOL v18 = result[16] >= 4u;
  }
  else {
    BOOL v18 = 0;
  }
  if (v18)
  {
    int v19 = result;
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v69, a3);
    WTF::String::String((WTF::String *)&v68, " ignored already resolved or rejected ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v67, v10);
    WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v63);
    uint64_t v21 = v67;
    char v67 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v20);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    BOOL v22 = v68;
    uint64_t v68 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v20);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    uint64_t v23 = v69;
    uint64_t v69 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v20);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    uint64_t v24 = *((void *)v19 + 4);
    char v25 = (WTF *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    if (v25)
    {
      WTF::String::utf8();
      int v27 = v65[0] ? (char *)v65[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      uint64_t v71 = v27;
      _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      char v25 = v65[0];
      v65[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1) {
          char v25 = (WTF *)WTF::fastFree(v25, v26);
        }
        else {
          --*(_DWORD *)v25;
        }
      }
    }
    if (*v19 && v19[16] >= 4u)
    {
      int v28 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v29 = *v28;
        if (v29) {
          break;
        }
        int v30 = *v28;
        atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, v29 | 1, memory_order_acquire, memory_order_acquire);
        if (v30 == v29)
        {
          uint64_t v31 = WTF::Logger::observers(v25);
          uint64_t v32 = *(unsigned int *)(v31 + 12);
          if (v32)
          {
            uint64_t v33 = *(uint64_t **)v31;
            uint64_t v34 = *(void *)v31 + 8 * v32;
            do
            {
              uint64_t v35 = *v33;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v71 + 4), a3);
              int v72 = 0;
              WTF::String::String((WTF::String *)&v73, " ignored already resolved or rejected ");
              int v74 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v75, v10);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v65, (uint64_t)buf, 3uLL);
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(void *)v35 + 16))(v35, v19, 4, v65);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v65, v36);
              for (uint64_t j = 40; j != -8; j -= 16)
              {
                uint64_t v38 = *(WTF::StringImpl **)&buf[j];
                *(void *)&buf[j] = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2) {
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v26);
                  }
                  else {
                    *(_DWORD *)v38 -= 2;
                  }
                }
              }
              ++v33;
            }
            while (v33 != (uint64_t *)v34);
          }
          int v39 = 1;
          atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
          if (v39 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = (unsigned __int8 *)v63;
    int v63 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v26);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E7558;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9E7558;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(uint64_t **)(result + 8);
  if (v3
    && *v3
    && (uint64_t result = IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>>((uint64_t)v4, v3), v6))
  {
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v4);
    if (v6)
    {
      if (v5 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))off_1EE9E6D10[v5])(&v7, v4);
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 4;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v36 = 0;
    uint64_t v37 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v38 = a2[3];
    if (v38)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v38 + 16))(v38);
        uint64_t v37 = *a2;
        unint64_t v36 = a2[1];
      }
      else
      {
        unint64_t v36 = 0;
        uint64_t v37 = 0;
      }
    }
    goto LABEL_43;
  }
  int v8 = (unsigned __int8 *)(v5 + v7);
  uint64_t v9 = v5 + v7 + 1;
  a2[2] = v9;
  if (!v5)
  {
    unint64_t v36 = v6;
    uint64_t v37 = 0;
LABEL_43:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v39 = a2[3];
    if (v39)
    {
      if (v36)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v37, v36);
        uint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_44:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v20 = a2[3];
    if (v20) {
      goto LABEL_15;
    }
    goto LABEL_18;
  }
  unsigned int v10 = *v8;
  if (v10 >= 2) {
    goto LABEL_44;
  }
  if (!v10)
  {
    unsigned __int16 v21 = IPC::Decoder::decode<WebCore::DOMCacheEngine::Error>(a2);
    if (v21 < 0x100u) {
      goto LABEL_18;
    }
    LOBYTE(v43) = v21;
    int v34 = 1;
    goto LABEL_36;
  }
  unint64_t v11 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v6 >= v11 && v6 - v11 > 7)
  {
    uint64_t v13 = (unint64_t *)(v5 + v11);
    unint64_t v16 = *v13;
    BOOL v14 = v13 + 1;
    unint64_t v15 = v16;
    a2[2] = (uint64_t)v14;
    if (v16)
    {
      if (v15 >> 61) {
        goto LABEL_12;
      }
      unint64_t v29 = (((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
      unint64_t v30 = 8 * v15;
      if (v6 < v29 || v6 - v29 < v30)
      {
        *a2 = 0;
        a2[1] = 0;
        uint64_t v42 = a2[3];
        if (!v42) {
          goto LABEL_12;
        }
LABEL_51:
        (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v5);
        goto LABEL_12;
      }
      uint64_t v32 = v5 + v29;
      a2[2] = v5 + v29 + v30;
      if (v15 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x199010C70);
      }
      uint64_t v28 = WTF::fastMalloc((WTF *)(8 * v15));
      uint64_t v33 = 0;
      do
      {
        *(void *)(v28 + v33) = *(void *)(v32 + v33);
        v33 += 8;
      }
      while (v30 != v33);
    }
    else
    {
      uint64_t v28 = 0;
    }
    int v34 = 0;
    uint64_t v43 = v28;
    int v44 = v15;
    int v45 = v15;
LABEL_36:
    int v46 = v34;
    unsigned __int8 v47 = 1;
    *(unsigned char *)a1 = 0;
    *(_DWORD *)(a1 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)&v43);
    int v35 = v47;
    *(unsigned char *)(a1 + 24) = 1;
    if (!v35) {
      return result;
    }
    if (v46 == -1) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t *))off_1EE9E6D10[v46])(&v48, &v43);
    if (*(unsigned char *)(a1 + 24)) {
      return result;
    }
    goto LABEL_20;
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v40 = a2[3];
  if (v40)
  {
    (*(void (**)(uint64_t))(*(void *)v40 + 16))(v40);
    uint64_t v5 = *a2;
    uint64_t v41 = a2[1];
    uint64_t v42 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v42)
    {
      if (v41) {
        goto LABEL_51;
      }
    }
  }
LABEL_12:
  uint64_t v17 = *a2;
  uint64_t v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v19 = a2[3];
  if (v19)
  {
    if (v18)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
      uint64_t v5 = *a2;
      unint64_t v6 = a2[1];
      uint64_t v20 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v20)
      {
LABEL_15:
        if (v6) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v5);
        }
      }
    }
  }
LABEL_18:
  uint64_t v22 = *a2;
  uint64_t v23 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v24 = a2[3];
  if (v24 && v23) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
LABEL_20:
  uint64_t v25 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result && v25)
  {
    int v27 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v27();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStoragePutRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E7580;
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStoragePutRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9E7580;
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStoragePutRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (WTF::NativePromiseBase *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9E75A8;
  v4[1] = v3;
  unint64_t v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  uint64_t result = (uint64_t)v7;
  if (v7) {
    return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStoragePutRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E75A8;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStoragePutRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9E75A8;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStoragePutRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(uint64_t **)(result + 8);
  if (v3
    && *v3
    && (uint64_t result = IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>>((uint64_t)v4, v3), v6))
  {
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v4);
    if (v6)
    {
      if (v5 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))off_1EE9E6D10[v5])(&v7, v4);
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 4;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2, long long *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v7;
    do
    {
      BOOL v14 = (long long *)(v6 + 24 * v11);
      if (*((void *)v14 + 1) != -1 && *v14 != 0)
      {
        uint64_t v15 = *a1;
        if (*a1) {
          unsigned int v16 = *(_DWORD *)(v15 - 8);
        }
        else {
          unsigned int v16 = 0;
        }
        unsigned int v22 = -1640531527;
        __int16 v23 = 0;
        char v24 = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v22, (void *)(v6 + 24 * v11));
        int v17 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v22);
        int v18 = 0;
        do
        {
          uint64_t v19 = v15 + 24 * (v17 & v16);
          int v17 = ++v18 + (v17 & v16);
        }
        while (*(_OWORD *)v19 != 0);
        long long v20 = *v14;
        *(void *)(v19 + 16) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v19 = v20;
        if (v14 == a3) {
          uint64_t v12 = v19;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,unsigned int,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,unsigned int,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,unsigned int,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(72 * a2 + 16));
  if (a2)
  {
    uint64_t v9 = a2;
    uint64_t v10 = v7 + 16;
    do
    {
      *(_DWORD *)(v10 + 64) = 0;
      *(_OWORD *)(v10 + 32) = 0uLL;
      *(_OWORD *)(v10 + 48) = 0uLL;
      *(_OWORD *)uint64_t v10 = 0uLL;
      *(_OWORD *)(v10 + 16) = 0uLL;
      v10 += 72;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    while (1)
    {
      uint64_t v14 = v4 + 72 * v11;
      int v15 = *(_DWORD *)(v14 + 24);
      if (v15) {
        break;
      }
      if (*(void *)v14 != -1) {
        goto LABEL_11;
      }
LABEL_32:
      if (++v11 == v13) {
        goto LABEL_37;
      }
    }
    if (v15 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_36;
    }
LABEL_11:
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
    {
      uint64_t v16 = *(unsigned int *)(v14 + 56);
      if (v16 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9E7020[v16])(&v32, v14 + 32);
      }
      *(_DWORD *)(v14 + 56) = -1;
      uint64_t v17 = *(unsigned int *)(v14 + 24);
      if (v17 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9E7020[v17])(&v33, v4 + 72 * v11);
      }
      *(_DWORD *)(v14 + 24) = -1;
    }
    else
    {
      uint64_t v18 = *a1;
      uint64_t v31 = v12;
      if (*a1) {
        int v19 = *(_DWORD *)(v18 - 8);
      }
      else {
        int v19 = 0;
      }
      unsigned int v20 = WTF::computeHash<WebCore::ClientOrigin>(v4 + 72 * v11);
      int v21 = 0;
      do
      {
        unsigned int v22 = v20 & v19;
        uint64_t v12 = v18 + 72 * (v20 & v19);
        int v23 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
        unsigned int v20 = ++v21 + v22;
      }
      while (!v23);
      uint64_t v24 = *(unsigned int *)(v12 + 56);
      if (v24 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9E7020[v24])(&v34, v12 + 32);
      }
      *(_DWORD *)(v12 + 56) = -1;
      uint64_t v25 = *(unsigned int *)(v12 + 24);
      if (v25 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9E7020[v25])(&v35, v18 + 72 * v22);
      }
      *(unsigned char *)uint64_t v12 = 0;
      *(_DWORD *)(v12 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v18 + 72 * v22, v4 + 72 * v11);
      *(unsigned char *)(v12 + 32) = 0;
      *(_DWORD *)(v12 + 56) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v12 + 32, v14 + 32);
      *(_DWORD *)(v18 + 72 * v22 + 64) = *(_DWORD *)(v4 + 72 * v11 + 64);
      uint64_t v26 = *(unsigned int *)(v14 + 56);
      if (v26 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9E7020[v26])(&v36, v14 + 32);
      }
      *(_DWORD *)(v14 + 56) = -1;
      uint64_t v27 = *(unsigned int *)(v14 + 24);
      uint64_t v13 = v5;
      if (v27 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9E7020[v27])(&v37, v4 + 72 * v11);
      }
      *(_DWORD *)(v14 + 24) = -1;
      if (v14 != a3) {
        uint64_t v12 = v31;
      }
    }
    goto LABEL_32;
  }
LABEL_36:
  uint64_t v12 = 0;
  uint64_t result = 0;
  if (v4)
  {
LABEL_37:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageClearMemoryRepresentation,WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E75D0;
  WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageClearMemoryRepresentation,WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9E75D0;
  WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageClearMemoryRepresentation,WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  v78[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  unsigned int v5 = v4;
  *(void *)uint64_t v4 = &unk_1EE9E75F8;
  *((void *)v4 + 1) = v3;
  v65[0] = 0;
  v65[1] = 0;
  v65[2] = "operator()";
  v65[3] = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    char v7 = 0;
    int v8 = (atomic_uchar *)(v6 + 48);
    int v9 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v6 + 48), (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      uint64_t v4 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0](v6 + 48);
    }
    int v10 = *(_DWORD *)(v6 + 64);
    atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != 1) {
      uint64_t v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
    }
    uint64_t v11 = *(void *)(a1 + 8);
    if (!v10)
    {
      char v12 = 0;
      uint64_t v13 = (WTF::NativePromiseBase *)(v11 + 48);
      uint64_t v66 = (WTF::StringImpl *)(v11 + 48);
      char v67 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v11 + 48), (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
      if (v12) {
        uint64_t v13 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
      }
      uint64_t v14 = (unsigned char *)WTF::NativePromiseBase::logChannel(v13);
      if (*v14)
      {
        int v15 = v14;
        if (v14[16] >= 4u)
        {
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v71, (WTF::Logger::LogSiteIdentifier *)v65);
          WTF::String::String((WTF::String *)&v70, " settling ");
          WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v69, v11);
          WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v72);
          uint64_t v17 = v69;
          uint64_t v69 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v16);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
          uint64_t v43 = v70;
          int v70 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2) {
              WTF::StringImpl::destroy(v43, v16);
            }
            else {
              *(_DWORD *)v43 -= 2;
            }
          }
          int v44 = v71;
          uint64_t v71 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2) {
              WTF::StringImpl::destroy(v44, v16);
            }
            else {
              *(_DWORD *)v44 -= 2;
            }
          }
          int v45 = *((void *)v15 + 4);
          int v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
          if (v46)
          {
            WTF::String::utf8();
            char v48 = v68[0] ? (char *)v68[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            int v74 = v48;
            _os_log_impl(&dword_1985F2000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            int v46 = v68[0];
            v68[0] = 0;
            if (v46)
            {
              if (*(_DWORD *)v46 == 1) {
                int v46 = (WTF *)WTF::fastFree(v46, v47);
              }
              else {
                --*(_DWORD *)v46;
              }
            }
          }
          if (*v15 && v15[16] >= 4u)
          {
            uint64_t v49 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v50 = *v49;
              if (v50) {
                break;
              }
              int v51 = *v49;
              atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v51, v50 | 1, memory_order_acquire, memory_order_acquire);
              if (v51 == v50)
              {
                uint64_t v52 = WTF::Logger::observers(v46);
                uint64_t v53 = *(unsigned int *)(v52 + 12);
                if (v53)
                {
                  __int16 v54 = *(uint64_t **)v52;
                  uint64_t v64 = *(void *)v52 + 8 * v53;
                  do
                  {
                    uint64_t v55 = *v54;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v74 + 4), (WTF::Logger::LogSiteIdentifier *)v65);
                    int v75 = 0;
                    WTF::String::String((WTF::String *)&v76, " settling ");
                    int v77 = 0;
                    uint64_t v56 = v11;
                    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v78, v11);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v55 + 16))(v55, v15, 4, v68);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v57);
                    for (uint64_t i = 40; i != -8; i -= 16)
                    {
                      uint64_t v59 = *(WTF::StringImpl **)&buf[i];
                      *(void *)&buf[i] = 0;
                      if (v59)
                      {
                        if (*(_DWORD *)v59 == 2) {
                          WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v47);
                        }
                        else {
                          *(_DWORD *)v59 -= 2;
                        }
                      }
                    }
                    ++v54;
                    uint64_t v11 = v56;
                  }
                  while (v54 != (uint64_t *)v64);
                }
                int v60 = 1;
                atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v60, 0, memory_order_release, memory_order_relaxed);
                if (v60 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          int v61 = v72;
          int v72 = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2) {
              WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v47);
            }
            else {
              *(_DWORD *)v61 -= 2;
            }
          }
        }
      }
      uint64_t v62 = *(unsigned int *)(v11 + 64);
      if (v62 != -1) {
        ((void (*)(uint8_t *, uint64_t))off_1EE9E6DB8[v62])(buf, v11 + 56);
      }
      *(void *)(v11 + 56) = v5;
      *(_DWORD *)(v11 + 64) = 2;
      uint64_t result = (WTF::Lock *)WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v11, (atomic_uchar *volatile *)&v66);
      if (v67)
      {
        uint64_t result = v66;
        int v63 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v66, (unsigned __int8 *)&v63, 0, memory_order_release, memory_order_relaxed);
        if (v63 != 1) {
          return (WTF::Lock *)WTF::Lock::unlockSlow(result);
        }
      }
      return result;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v18 = (unsigned char *)WTF::NativePromiseBase::logChannel(v4);
  if (*v18)
  {
    int v19 = v18;
    if (v18[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v72, (WTF::Logger::LogSiteIdentifier *)v65);
      WTF::String::String((WTF::String *)&v71, " ignored already resolved or rejected ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v70, v11);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, &v66);
      int v21 = v70;
      int v70 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v20);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      unsigned int v22 = v71;
      uint64_t v71 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v20);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      int v23 = v72;
      int v72 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v20);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      uint64_t v24 = *((void *)v19 + 4);
      uint64_t v25 = (WTF *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      if (v25)
      {
        WTF::String::utf8();
        uint64_t v27 = v68[0] ? (char *)v68[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        int v74 = v27;
        _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v25 = v68[0];
        v68[0] = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1) {
            uint64_t v25 = (WTF *)WTF::fastFree(v25, v26);
          }
          else {
            --*(_DWORD *)v25;
          }
        }
      }
      if (*v19 && v19[16] >= 4u)
      {
        uint64_t v28 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v29 = *v28;
          if (v29) {
            break;
          }
          int v30 = *v28;
          atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, v29 | 1, memory_order_acquire, memory_order_acquire);
          if (v30 == v29)
          {
            uint64_t v31 = v11;
            uint64_t v32 = WTF::Logger::observers(v25);
            uint64_t v33 = *(unsigned int *)(v32 + 12);
            if (v33)
            {
              char v34 = *(uint64_t **)v32;
              uint64_t v35 = *(void *)v32 + 8 * v33;
              do
              {
                uint64_t v36 = *v34;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v74 + 4), (WTF::Logger::LogSiteIdentifier *)v65);
                int v75 = 0;
                WTF::String::String((WTF::String *)&v76, " ignored already resolved or rejected ");
                int v77 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v78, v31);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v36 + 16))(v36, v19, 4, v68);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v37);
                for (uint64_t j = 40; j != -8; j -= 16)
                {
                  uint64_t v39 = *(WTF::StringImpl **)&buf[j];
                  *(void *)&buf[j] = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2) {
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v26);
                    }
                    else {
                      *(_DWORD *)v39 -= 2;
                    }
                  }
                }
                ++v34;
              }
              while (v34 != (uint64_t *)v35);
            }
            int v40 = 1;
            atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v40, 0, memory_order_release, memory_order_relaxed);
            if (v40 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      uint64_t v41 = v66;
      uint64_t v66 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2) {
          WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v26);
        }
        else {
          *(_DWORD *)v41 -= 2;
        }
      }
    }
  }
  return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(void *)v5 + 8))(v5);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageClearMemoryRepresentation,WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E75F8;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageClearMemoryRepresentation,WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9E75F8;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageClearMemoryRepresentation,WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::DOMCacheEngine::Error>>::call@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  uint64_t v2 = *(void **)(result + 8);
  if (v2 && *v2) {
    *a2 = 0;
  }
  else {
    *a2 = 260;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRepresentation,WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E7620;
  WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRepresentation,WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9E7620;
  WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRepresentation,WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  v78[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  unsigned int v5 = v4;
  *(void *)uint64_t v4 = &unk_1EE9E7648;
  *((void *)v4 + 1) = v3;
  v65[0] = 0;
  v65[1] = 0;
  v65[2] = "operator()";
  v65[3] = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    char v7 = 0;
    int v8 = (atomic_uchar *)(v6 + 48);
    int v9 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v6 + 48), (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      uint64_t v4 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0](v6 + 48);
    }
    int v10 = *(_DWORD *)(v6 + 72);
    atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != 1) {
      uint64_t v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
    }
    uint64_t v11 = *(void *)(a1 + 8);
    if (!v10)
    {
      char v12 = 0;
      uint64_t v13 = (WTF::NativePromiseBase *)(v11 + 48);
      uint64_t v66 = (WTF::StringImpl *)(v11 + 48);
      char v67 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v11 + 48), (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
      if (v12) {
        uint64_t v13 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
      }
      uint64_t v14 = (unsigned char *)WTF::NativePromiseBase::logChannel(v13);
      if (*v14)
      {
        int v15 = v14;
        if (v14[16] >= 4u)
        {
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v71, (WTF::Logger::LogSiteIdentifier *)v65);
          WTF::String::String((WTF::String *)&v70, " settling ");
          WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v69, v11);
          WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v72);
          uint64_t v17 = v69;
          uint64_t v69 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v16);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
          uint64_t v43 = v70;
          int v70 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2) {
              WTF::StringImpl::destroy(v43, v16);
            }
            else {
              *(_DWORD *)v43 -= 2;
            }
          }
          int v44 = v71;
          uint64_t v71 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2) {
              WTF::StringImpl::destroy(v44, v16);
            }
            else {
              *(_DWORD *)v44 -= 2;
            }
          }
          int v45 = *((void *)v15 + 4);
          int v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
          if (v46)
          {
            WTF::String::utf8();
            char v48 = v68[0] ? (char *)v68[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            int v74 = v48;
            _os_log_impl(&dword_1985F2000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            int v46 = v68[0];
            v68[0] = 0;
            if (v46)
            {
              if (*(_DWORD *)v46 == 1) {
                int v46 = (WTF *)WTF::fastFree(v46, v47);
              }
              else {
                --*(_DWORD *)v46;
              }
            }
          }
          if (*v15 && v15[16] >= 4u)
          {
            uint64_t v49 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v50 = *v49;
              if (v50) {
                break;
              }
              int v51 = *v49;
              atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v51, v50 | 1, memory_order_acquire, memory_order_acquire);
              if (v51 == v50)
              {
                uint64_t v52 = WTF::Logger::observers(v46);
                uint64_t v53 = *(unsigned int *)(v52 + 12);
                if (v53)
                {
                  __int16 v54 = *(uint64_t **)v52;
                  uint64_t v64 = *(void *)v52 + 8 * v53;
                  do
                  {
                    uint64_t v55 = *v54;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v74 + 4), (WTF::Logger::LogSiteIdentifier *)v65);
                    int v75 = 0;
                    WTF::String::String((WTF::String *)&v76, " settling ");
                    int v77 = 0;
                    uint64_t v56 = v11;
                    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v78, v11);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v55 + 16))(v55, v15, 4, v68);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v57);
                    for (uint64_t i = 40; i != -8; i -= 16)
                    {
                      uint64_t v59 = *(WTF::StringImpl **)&buf[i];
                      *(void *)&buf[i] = 0;
                      if (v59)
                      {
                        if (*(_DWORD *)v59 == 2) {
                          WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v47);
                        }
                        else {
                          *(_DWORD *)v59 -= 2;
                        }
                      }
                    }
                    ++v54;
                    uint64_t v11 = v56;
                  }
                  while (v54 != (uint64_t *)v64);
                }
                int v60 = 1;
                atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v60, 0, memory_order_release, memory_order_relaxed);
                if (v60 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          int v61 = v72;
          int v72 = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2) {
              WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v47);
            }
            else {
              *(_DWORD *)v61 -= 2;
            }
          }
        }
      }
      uint64_t v62 = *(unsigned int *)(v11 + 72);
      if (v62 != -1) {
        ((void (*)(uint8_t *, uint64_t))off_1EE9E6E38[v62])(buf, v11 + 56);
      }
      *(void *)(v11 + 56) = v5;
      *(_DWORD *)(v11 + 72) = 2;
      uint64_t result = (WTF::Lock *)WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v11, (atomic_uchar *volatile *)&v66);
      if (v67)
      {
        uint64_t result = v66;
        int v63 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v66, (unsigned __int8 *)&v63, 0, memory_order_release, memory_order_relaxed);
        if (v63 != 1) {
          return (WTF::Lock *)WTF::Lock::unlockSlow(result);
        }
      }
      return result;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v18 = (unsigned char *)WTF::NativePromiseBase::logChannel(v4);
  if (*v18)
  {
    int v19 = v18;
    if (v18[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v72, (WTF::Logger::LogSiteIdentifier *)v65);
      WTF::String::String((WTF::String *)&v71, " ignored already resolved or rejected ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v70, v11);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, &v66);
      int v21 = v70;
      int v70 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v20);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      unsigned int v22 = v71;
      uint64_t v71 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v20);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      int v23 = v72;
      int v72 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v20);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      uint64_t v24 = *((void *)v19 + 4);
      uint64_t v25 = (WTF *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      if (v25)
      {
        WTF::String::utf8();
        uint64_t v27 = v68[0] ? (char *)v68[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        int v74 = v27;
        _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v25 = v68[0];
        v68[0] = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1) {
            uint64_t v25 = (WTF *)WTF::fastFree(v25, v26);
          }
          else {
            --*(_DWORD *)v25;
          }
        }
      }
      if (*v19 && v19[16] >= 4u)
      {
        uint64_t v28 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v29 = *v28;
          if (v29) {
            break;
          }
          int v30 = *v28;
          atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, v29 | 1, memory_order_acquire, memory_order_acquire);
          if (v30 == v29)
          {
            uint64_t v31 = v11;
            uint64_t v32 = WTF::Logger::observers(v25);
            uint64_t v33 = *(unsigned int *)(v32 + 12);
            if (v33)
            {
              char v34 = *(uint64_t **)v32;
              uint64_t v35 = *(void *)v32 + 8 * v33;
              do
              {
                uint64_t v36 = *v34;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v74 + 4), (WTF::Logger::LogSiteIdentifier *)v65);
                int v75 = 0;
                WTF::String::String((WTF::String *)&v76, " ignored already resolved or rejected ");
                int v77 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v78, v31);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v36 + 16))(v36, v19, 4, v68);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v37);
                for (uint64_t j = 40; j != -8; j -= 16)
                {
                  uint64_t v39 = *(WTF::StringImpl **)&buf[j];
                  *(void *)&buf[j] = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2) {
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v26);
                    }
                    else {
                      *(_DWORD *)v39 -= 2;
                    }
                  }
                }
                ++v34;
              }
              while (v34 != (uint64_t *)v35);
            }
            int v40 = 1;
            atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v40, 0, memory_order_release, memory_order_relaxed);
            if (v40 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      uint64_t v41 = v66;
      uint64_t v66 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2) {
          WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v26);
        }
        else {
          *(_DWORD *)v41 -= 2;
        }
      }
    }
  }
  return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(void *)v5 + 8))(v5);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRepresentation,WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::String,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E7648;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRepresentation,WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::String,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9E7648;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Decoder *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRepresentation,WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::String,WebCore::DOMCacheEngine::Error>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = *(IPC::Decoder **)(a1 + 8);
  if (result && *(void *)result && (uint64_t result = IPC::Decoder::decode<std::tuple<WTF::String>>(result, (uint64_t)&v4), v5))
  {
    *(void *)a2 = v4;
    *(_DWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 4;
    *(_DWORD *)(a2 + 8) = 1;
  }
  return result;
}

void WebKit::WebDatabaseProvider::~WebDatabaseProvider(WebKit::WebDatabaseProvider *this, void *a2)
{
  {
    uint64_t v3 = &qword_1EB35A000;
    if (WebKit::databaseProviders(void)::databaseProviders)
    {
      uint64_t v4 = *((void *)this + 3);
      unsigned int v5 = *(_DWORD *)(WebKit::databaseProviders(void)::databaseProviders - 8);
      unint64_t v6 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
      unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      uint64_t v9 = v5 & ((v8 >> 31) ^ v8);
      uint64_t v10 = *(void *)(WebKit::databaseProviders(void)::databaseProviders + 16 * v9);
      if (v10 != v4)
      {
        int v11 = 1;
        while (v10)
        {
          uint64_t v9 = (v9 + v11) & v5;
          uint64_t v10 = *(void *)(WebKit::databaseProviders(void)::databaseProviders + 16 * v9);
          ++v11;
          if (v10 == v4) {
            goto LABEL_9;
          }
        }
        uint64_t v9 = *(unsigned int *)(WebKit::databaseProviders(void)::databaseProviders - 4);
      }
LABEL_9:
      if (v9 != *(_DWORD *)(WebKit::databaseProviders(void)::databaseProviders - 4))
      {
        char v12 = (void *)(WebKit::databaseProviders(void)::databaseProviders + 16 * v9);
        uint64_t v13 = (unsigned int *)v12[1];
        void *v12 = -1;
        v12[1] = 0;
        if (v13 && atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v13);
          WTF::fastFree((WTF *)v13, a2);
          uint64_t v3 = &qword_1EB35A000;
        }
        ++*(_DWORD *)(v3[285] - 16);
        uint64_t v14 = v3[285];
        if (v14) {
          int v15 = *(_DWORD *)(v14 - 12) - 1;
        }
        else {
          int v15 = -1;
        }
        *(_DWORD *)(v14 - 12) = v15;
        uint64_t v16 = v3[285];
        if (v16)
        {
          unsigned int v17 = 6 * *(_DWORD *)(v16 - 12);
          unsigned int v18 = *(_DWORD *)(v16 - 4);
          if (v17 < v18 && v18 >= 9) {
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(&WebKit::databaseProviders(void)::databaseProviders, v18 >> 1, 0);
          }
        }
      }
    }
  }
  else
  {
    WebKit::databaseProviders(void)::databaseProviders = 0;
  }
  uint64_t v20 = *((void *)this + 2);
  if (v20)
  {
    *(void *)(v20 + 8) = 0;
    int v21 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, a2);
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }

  MEMORY[0x1F416E590](this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebDatabaseProvider::~WebDatabaseProvider(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebDatabaseProvider::idbConnectionToServerForSession(WebKit::WebProcess *a1)
{
  unint64_t v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(a1);
  uint64_t v2 = (WebKit::NetworkProcessConnection *)WebKit::WebProcess::ensureNetworkProcessConnection(v1);
  return *(void *)(WebKit::NetworkProcessConnection::idbConnectionToServer(v2) + 32);
}

WebKit::WebIDBConnectionToServer *WebKit::WebIDBConnectionToServer::create@<X0>(WebKit::WebIDBConnectionToServer **a1@<X8>)
{
  uint64_t v3 = (WebKit::WebIDBConnectionToServer *)WTF::fastMalloc((WTF *)0x28);
  uint64_t result = WebKit::WebIDBConnectionToServer::WebIDBConnectionToServer(v3);
  *a1 = result;
  return result;
}

WebKit::WebIDBConnectionToServer *WebKit::WebIDBConnectionToServer::WebIDBConnectionToServer(WebKit::WebIDBConnectionToServer *this)
{
  *((_DWORD *)this + 6) = 1;
  *(void *)this = &unk_1EE9E7718;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &unk_1EE9E7820;
  WebCore::IDBClient::IDBConnectionToServer::create();
  return this;
}

void WebKit::WebIDBConnectionToServer::~WebIDBConnectionToServer(WebKit::WebIDBConnectionToServer *this, void *a2)
{
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::IDBClient::IDBConnectionToServer,(WTF::DestructionThread)0>::deref(v3);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebIDBConnectionToServer::~WebIDBConnectionToServer(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::WebIDBConnectionToServer::~WebIDBConnectionToServer(WebKit::WebIDBConnectionToServer *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebIDBConnectionToServer::~WebIDBConnectionToServer((WebKit::WebIDBConnectionToServer *)((char *)this - 16), a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebIDBConnectionToServer::messageSenderConnection(WebKit::WebIDBConnectionToServer *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                   + 24);
}

uint64_t non-virtual thunk to'WebKit::WebIDBConnectionToServer::messageSenderConnection(WebKit::WebIDBConnectionToServer *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                   + 24);
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::deleteDatabase(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBOpenRequestData *a2)
{
  uint64_t v3 = (char *)this + 16;
  uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 556;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::IDBOpenRequestData,void>::encode(v5, (uint64_t)a2);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::openDatabase(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBOpenRequestData *a2)
{
  uint64_t v3 = (char *)this + 16;
  uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 581;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::IDBOpenRequestData,void>::encode(v5, (uint64_t)a2);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::abortTransaction(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBResourceIdentifier *a2)
{
  uint64_t v3 = (char *)this + 16;
  uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 533;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, (uint64_t *)a2);
  IPC::Encoder::operator<<<unsigned long long const&>(v5, (uint64_t *)a2 + 1);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::WebIDBConnectionToServer::commitTransaction(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBResourceIdentifier *a2, uint64_t a3)
{
  unsigned int v5 = (char *)this + 16;
  uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 549;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v14 = v7;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, (uint64_t *)a2);
  IPC::Encoder::operator<<<unsigned long long const&>(v7, (uint64_t *)a2 + 1);
  unint64_t v8 = (void *)IPC::Encoder::grow(v7, 8uLL, 8);
  if (v9 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    void *v8 = a3;
    (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v14, 0);
    uint64_t result = (uint64_t)v14;
    uint64_t v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
      return WTF::fastFree(v12, v13);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::didFinishHandlingVersionChangeTransaction(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v11 = a2;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 560;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  char v12 = v6;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v11);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, a3);
  IPC::Encoder::operator<<<unsigned long long const&>(v6, a3 + 1);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v4 + 32))(v4, &v12, 0);
  uint64_t result = v12;
  char v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::createObjectStore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 552;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v12 = v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode(v7, a2);
  IPC::ArgumentCoder<WebCore::IDBObjectStoreInfo,void>::encode(v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
  uint64_t result = v12;
  char v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::deleteObjectStore(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBRequestData *a2, const WTF::String *a3)
{
  uint64_t v5 = (char *)this + 16;
  uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 558;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v12 = v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode(v7, (uint64_t)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a3);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
  uint64_t result = v12;
  char v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::renameObjectStore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v11[2] = a4;
  uint64_t v12 = a3;
  v11[0] = a2;
  v11[1] = &v12;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 588;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v13 = v6;
  IPC::ArgumentCoder<std::tuple<WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::String const&>,0ul,1ul,2ul>(v6, (uint64_t)v11);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v4 + 32))(v4, &v13, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::clearObjectStore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = a3;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 546;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v12 = v6;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode(v6, a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v11);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v4 + 32))(v4, &v12, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::createIndex(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 551;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode(v7, a2);
  IPC::ArgumentCoder<WebCore::IDBIndexInfo,void>::encode(v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::deleteIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v11[2] = a4;
  uint64_t v12 = a3;
  v11[0] = a2;
  v11[1] = &v12;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 557;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v13 = v6;
  IPC::ArgumentCoder<std::tuple<WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::String const&>,0ul,1ul,2ul>(v6, (uint64_t)v11);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v4 + 32))(v4, &v13, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::WebIDBConnectionToServer::renameIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v17 = a3;
  uint64_t v8 = a1 + 16;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 587;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  unsigned int v18 = v10;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode(v10, a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v10, &v17);
  uint64_t v11 = (void *)IPC::Encoder::grow(v10, 8uLL, 8);
  if (v12 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    void *v11 = a4;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, a5);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v8 + 32))(v8, &v18, 0);
    uint64_t result = (uint64_t)v18;
    unsigned int v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
      return WTF::fastFree(v15, v16);
    }
  }
  return result;
}

uint64_t WebKit::WebIDBConnectionToServer::putOrAdd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v9 = a1 + 16;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 584;
  *((void *)v11 + 1) = v10;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  unsigned int v18 = v11;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode(v11, a2);
  unsigned __int8 v19 = *(_DWORD *)(a3 + 24);
  IPC::Encoder::operator<<<BOOL>(v11, (char *)&v19);
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max> const&>((uint64_t *)v11, (unsigned int *)(a3 + 8), v19);
  IPC::ArgumentCoder<WebCore::IDBValue,void>::encode(v11, a4);
  unint64_t v12 = (unsigned char *)IPC::Encoder::grow(v11, 1uLL, 1);
  if (v13)
  {
    unsigned char *v12 = a5;
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v9 + 32))(v9, &v18, 0);
    uint64_t result = (uint64_t)v18;
    unsigned int v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
      return WTF::fastFree(v16, v17);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::getRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 574;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unint64_t v12 = v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode(v7, a2);
  IPC::ArgumentCoder<WebCore::IDBKeyRangeData,void>::encode(v7, a3);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v7, *(unsigned char *)(a3 + 72));
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
  uint64_t result = v12;
  unint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::getAllRecords(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 567;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unint64_t v12 = v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode(v7, a2);
  IPC::ArgumentCoder<WebCore::IDBGetAllRecordsData,void>::encode(v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
  uint64_t result = v12;
  unint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::getCount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 568;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unint64_t v12 = v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode(v7, a2);
  IPC::ArgumentCoder<WebCore::IDBKeyRangeData,void>::encode(v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
  uint64_t result = v12;
  unint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::deleteRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 559;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unint64_t v12 = v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode(v7, a2);
  IPC::ArgumentCoder<WebCore::IDBKeyRangeData,void>::encode(v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
  uint64_t result = v12;
  unint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::openCursor(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 579;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unint64_t v12 = v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode(v7, a2);
  IPC::ArgumentCoder<WebCore::IDBCursorInfo,void>::encode(v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
  uint64_t result = v12;
  unint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::iterateCursor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 576;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unint64_t v12 = v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode(v7, a2);
  IPC::ArgumentCoder<WebCore::IDBIterateCursorData,void>::encode(v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
  uint64_t result = v12;
  unint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::establishTransaction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = a2;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 563;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v12 = v6;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v11);
  IPC::ArgumentCoder<WebCore::IDBTransactionInfo,void>::encode(v6, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v4 + 32))(v4, &v12, 0);
  uint64_t result = v12;
  unint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::databaseConnectionPendingClose(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v2 = a1 + 16;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 555;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, &v9);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v2 + 32))(v2, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::databaseConnectionClosed(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v2 = a1 + 16;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 554;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, &v9);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v2 + 32))(v2, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::abortOpenAndUpgradeNeeded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = a2;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 532;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v12 = v6;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v11);
  IPC::ArgumentCoder<std::optional<WebCore::IDBResourceIdentifier>,void>::encode<IPC::Encoder,std::optional<WebCore::IDBResourceIdentifier> const&>(v6, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v4 + 32))(v4, &v12, 0);
  uint64_t result = v12;
  unint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::WebIDBConnectionToServer::didFireVersionChangeEvent(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v15 = a2;
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 561;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v16 = v8;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, &v15);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, a3);
  IPC::Encoder::operator<<<unsigned long long const&>(v8, a3 + 1);
  uint64_t v9 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
  if (v10)
  {
    *uint64_t v9 = a4;
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v16, 0);
    uint64_t result = (uint64_t)v16;
    uint64_t v16 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v11);
      return WTF::fastFree(v13, v14);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::openDBRequestCancelled(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBOpenRequestData *a2)
{
  uint64_t v3 = (char *)this + 16;
  uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 580;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::IDBOpenRequestData,void>::encode(v5, (uint64_t)a2);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::getAllDatabaseNamesAndVersions(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBResourceIdentifier *a2, const WebCore::ClientOrigin *a3)
{
  uint64_t v5 = (char *)this + 16;
  uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 566;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unint64_t v12 = v7;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, (uint64_t *)a2);
  IPC::Encoder::operator<<<unsigned long long const&>(v7, (uint64_t *)a2 + 1);
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v7, (uint64_t)a3);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
  uint64_t result = v12;
  unint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::WebIDBConnectionToServer::didDeleteDatabase(uint64_t a1)
{
  return MEMORY[0x1F4173858](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didOpenDatabase(uint64_t a1)
{
  return MEMORY[0x1F4173840](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didAbortTransaction(uint64_t a1)
{
  return MEMORY[0x1F4173868](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didCommitTransaction(uint64_t a1)
{
  return MEMORY[0x1F4173880](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didCreateObjectStore(uint64_t a1)
{
  return MEMORY[0x1F4173888](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didDeleteObjectStore(uint64_t a1)
{
  return MEMORY[0x1F4173890](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didRenameObjectStore(uint64_t a1)
{
  return MEMORY[0x1F4173898](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didClearObjectStore(uint64_t a1)
{
  return MEMORY[0x1F4173870](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didCreateIndex(uint64_t a1)
{
  return MEMORY[0x1F4173820](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didDeleteIndex(uint64_t a1)
{
  return MEMORY[0x1F4173828](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didRenameIndex(uint64_t a1)
{
  return MEMORY[0x1F4173830](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didPutOrAdd(uint64_t a1)
{
  return MEMORY[0x1F4173808](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didGetRecord(uint64_t a1)
{
  return MEMORY[0x1F4173810](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didGetAllRecords(uint64_t a1)
{
  return MEMORY[0x1F4173848](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didGetCount(uint64_t a1)
{
  return MEMORY[0x1F4173800](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didDeleteRecord(uint64_t a1)
{
  return MEMORY[0x1F4173838](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didOpenCursor(uint64_t a1)
{
  return MEMORY[0x1F4173818](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didIterateCursor(uint64_t a1)
{
  return MEMORY[0x1F4173850](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didStartTransaction(uint64_t a1)
{
  return MEMORY[0x1F4173878](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didCloseFromServer(uint64_t a1)
{
  return MEMORY[0x1F4173860](*(void *)(a1 + 32));
}

uint64_t WebKit::WebIDBConnectionToServer::didGetAllDatabaseNamesAndVersions(uint64_t a1)
{
  return MEMORY[0x1F41738B8](*(void *)(a1 + 32));
}

WTF::StringImpl *WebKit::WebIDBConnectionToServer::connectionToServerLost(WebKit::WebIDBConnectionToServer *this)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::IDBError::IDBError();
  WebCore::IDBClient::IDBConnectionToServer::connectionToServerLost();
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v1);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t result = v3;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return result;
}

void WebKit::DigitalCredentialsCoordinator::requestDigitalCredential(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  WebKit::WebFrame::fromCoreFrame(a2, &v29);
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7 && (uint64_t v8 = *(void *)(v7 + 8)) != 0)
  {
    uint64_t v9 = v8 - 16;
    CFRetain(*(CFTypeRef *)(v8 - 8));
    if (v29)
    {
      long long v28 = *((_OWORD *)v29 + 5);
      WebKit::WebFrame::info(v29, (uint64_t)v32);
      uint64_t v11 = *(void *)(v8 + 16);
      uint64_t v10 = v8 + 16;
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(v11 + 56))(v10);
      uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v13 = 9;
      *((void *)v13 + 1) = v12;
      *((void *)v13 + 66) = (char *)v13 + 16;
      *((void *)v13 + 67) = 512;
      *((void *)v13 + 68) = 0;
      *((void *)v13 + 70) = 0;
      *((void *)v13 + 69) = 0;
      IPC::Encoder::encodeHeader(v13);
      uint64_t v31 = v13;
      IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v13, (uint64_t *)&v28);
      IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(v13, v32);
      IPC::VectorArgumentCoder<false,WebCore::IdentityRequestProvider,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IdentityRequestProvider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v13, a3);
      uint64_t v14 = *a4;
      *a4 = 0;
      uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v15 = &unk_1EE9E7A08;
      v15[1] = v14;
      uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v30[0] = v15;
      v30[1] = v16;
      (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v10 + 40))(v10, &v31, v30, 0);
      uint64_t v18 = v30[0];
      v30[0] = 0;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
      unsigned __int8 v19 = v31;
      uint64_t v31 = 0;
      if (v19)
      {
        IPC::Encoder::~Encoder(v19, v17);
        WTF::fastFree(v26, v27);
      }
      uint64_t v20 = v37;
      char v37 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v17);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      if (v36 != -1) {
        ((void (*)(void *, uint64_t *))off_1EE9E7970[v36])(v30, &v35);
      }
      int v36 = -1;
      CFTypeRef v25 = cf;
      CFTypeRef cf = 0;
      if (v25) {
        CFRelease(v25);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v33);
      goto LABEL_26;
    }
    char v21 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    char v21 = 1;
  }
  v32[0] = 8;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v22 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v22 + 16))(v22, v32);
  (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  uint64_t v24 = v33;
  uint64_t v33 = 0;
  if (!v24)
  {
LABEL_16:
    if (v21) {
      goto LABEL_27;
    }
LABEL_26:
    CFRelease(*(CFTypeRef *)(v9 + 8));
    goto LABEL_27;
  }
  if (*(_DWORD *)v24 != 2)
  {
    *(_DWORD *)v24 -= 2;
    goto LABEL_16;
  }
  WTF::StringImpl::destroy(v24, v23);
  if ((v21 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_27:
  if (v29) {
    CFRelease(*((CFTypeRef *)v29 + 1));
  }
}

void WebKit::DigitalCredentialsCoordinator::cancel(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v4 - 8));
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(v4 + 16) + 56))(v4 + 16);
    uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v6 = 8;
    *((void *)v6 + 1) = v5;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    uint64_t v17 = v6;
    uint64_t v7 = *a2;
    *a2 = 0;
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v8 = &unk_1EE9E7A30;
    v8[1] = v7;
    v16[0] = v8;
    v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v4 + 16) + 40))(v4 + 16, &v17, v16, 0);
    uint64_t v10 = v16[0];
    v16[0] = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = v17;
    uint64_t v17 = 0;
    if (v11)
    {
      IPC::Encoder::~Encoder(v11, v9);
      WTF::fastFree(v14, v15);
    }
    CFRelease(*(CFTypeRef *)(v4 - 8));
  }
  else
  {
    uint64_t v12 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v13 = *(void (**)(uint64_t))(*(void *)v12 + 8);
    v13(v12);
  }
}

void WebKit::MediaKeySystemPermissionRequestManager::startMediaKeySystemRequest(WebKit::MediaKeySystemPermissionRequestManager *this, WebCore::MediaKeySystemRequest *a2)
{
  uint64_t v4 = WebCore::MediaKeySystemRequest::document(a2);
  if (v4
    && (uint64_t v5 = *(void *)(v4 + 544)) != 0
    && (uint64_t v6 = *(void *)(v5 + 8)) != 0
    && (uint64_t v7 = *(void *)(v6 + 24)) != 0
    && (uint64_t v8 = *(void *)(v7 + 8)) != 0)
  {
    if (*(unsigned char *)(v8 + 544))
    {
      WebKit::MediaKeySystemPermissionRequestManager::sendMediaKeySystemRequest(this, (WTF::StringImpl **)a2);
    }
    else
    {
      *(_DWORD *)(v4 + 28) += 2;
      v15[1] = 0;
      uint64_t v16 = (WebCore::Node *)v4;
      v15[0] = 0;
      WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)this + 4, (uint64_t *)&v16, v15, (uint64_t)v17);
      uint64_t v10 = v17[0];
      WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v11);
      uint64_t v12 = v16;
      uint64_t v16 = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 7) == 2)
        {
          if ((*((_WORD *)v12 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v12);
          }
        }
        else
        {
          *((_DWORD *)v12 + 7) -= 2;
        }
      }
      unsigned int v13 = *(_DWORD *)(v10 + 20);
      if (!v13)
      {
        WebCore::Document::addMediaCanStartListener();
        unsigned int v13 = *(_DWORD *)(v10 + 20);
      }
      if (v13 == *(_DWORD *)(v10 + 16))
      {
        WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaKeySystemRequest&>(v10 + 8, (uint64_t)a2);
      }
      else
      {
        uint64_t v14 = *(void *)(v10 + 8);
        ++*((_DWORD *)a2 + 6);
        *(void *)(v14 + 8 * v13) = a2;
        *(_DWORD *)(v10 + 20) = v13 + 1;
      }
    }
  }
  else
  {
    uint64_t v9 = (const WTF::String *)MEMORY[0x1E4F30980];
    WebCore::MediaKeySystemRequest::deny(a2, v9);
  }
}

void WebKit::MediaKeySystemPermissionRequestManager::sendMediaKeySystemRequest(WebKit::MediaKeySystemPermissionRequestManager *this, WTF::StringImpl **a2)
{
  if (WebCore::MediaKeySystemRequest::document((WebCore::MediaKeySystemRequest *)a2))
  {
    uint64_t v4 = *(void *)(WebCore::MediaKeySystemRequest::document((WebCore::MediaKeySystemRequest *)a2) + 544);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        uint64_t v7 = (uint64_t *)((char *)this + 24);
        uint64_t v6 = *((void *)this + 3);
        uint64_t v8 = (uint64_t)a2[4];
        if (v6
          || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)this + 3, 0), (uint64_t v6 = *v7) != 0))
        {
          int v9 = *(_DWORD *)(v6 - 8);
        }
        else
        {
          int v9 = 0;
        }
        unint64_t v10 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
        unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        unsigned int v13 = v9 & ((v12 >> 31) ^ v12);
        uint64_t v14 = (uint64_t *)(v6 + 16 * v13);
        uint64_t v15 = *v14;
        if (*v14)
        {
          uint64_t v16 = 0;
          int v17 = 1;
          while (v15 != v8)
          {
            if (v15 == -1) {
              uint64_t v16 = v14;
            }
            unsigned int v13 = (v13 + v17) & v9;
            uint64_t v14 = (uint64_t *)(v6 + 16 * v13);
            uint64_t v15 = *v14;
            ++v17;
            if (!*v14)
            {
              if (v16)
              {
                *uint64_t v16 = 0;
                v16[1] = 0;
                --*(_DWORD *)(*v7 - 16);
                uint64_t v14 = v16;
              }
              goto LABEL_15;
            }
          }
          goto LABEL_31;
        }
LABEL_15:
        uint64_t *v14 = v8;
        ++*((_DWORD *)a2 + 6);
        uint64_t v18 = (_DWORD *)v14[1];
        v14[1] = (uint64_t)a2;
        if (v18)
        {
          if (v18[6] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v18 + 16))(v18);
          }
          else {
            --v18[6];
          }
        }
        uint64_t v20 = *v7;
        if (*v7) {
          int v21 = *(_DWORD *)(v20 - 12) + 1;
        }
        else {
          int v21 = 1;
        }
        *(_DWORD *)(v20 - 12) = v21;
        uint64_t v22 = *v7;
        if (*v7) {
          int v23 = *(_DWORD *)(v22 - 12);
        }
        else {
          int v23 = 0;
        }
        uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
        unint64_t v25 = *(unsigned int *)(v22 - 4);
        if (v25 > 0x400)
        {
          if (v25 > 2 * v24) {
            goto LABEL_31;
          }
        }
        else if (3 * v25 > 4 * v24)
        {
LABEL_31:
          WebKit::WebFrame::fromCoreFrame(v5, &v41);
          uint64_t v26 = WebCore::MediaKeySystemRequest::topLevelDocumentOrigin((WebCore::MediaKeySystemRequest *)a2);
          uint64_t v27 = *((void *)this + 2) + 32;
          long long v28 = a2[5];
          int v40 = a2[4];
          uint64_t v29 = v41;
          long long v39 = *(_OWORD *)(v41 + 80);
          uint64_t v30 = v26 + 8;
          if (v28) {
            *(_DWORD *)v28 += 2;
          }
          uint64_t v38 = v28;
          uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 56))(v27);
          uint64_t v32 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v32 = 2045;
          *((void *)v32 + 1) = v31;
          *((void *)v32 + 66) = (char *)v32 + 16;
          *((void *)v32 + 67) = 512;
          *((void *)v32 + 68) = 0;
          *((void *)v32 + 70) = 0;
          *((void *)v32 + 69) = 0;
          IPC::Encoder::encodeHeader(v32);
          uint64_t v42 = v32;
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v32, (uint64_t *)&v40);
          IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v32, (uint64_t *)&v39);
          IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v32, v30);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v32, (uint64_t *)&v38);
          (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v27 + 32))(v27, &v42, 0);
          char v34 = v42;
          uint64_t v42 = 0;
          if (v34)
          {
            IPC::Encoder::~Encoder(v34, v33);
            WTF::fastFree(v36, v37);
          }
          uint64_t v35 = v38;
          uint64_t v38 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2) {
              WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v33);
            }
            else {
              *(_DWORD *)v35 -= 2;
            }
          }
          CFRelease(*(CFTypeRef *)(v29 + 8));
          return;
        }
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)this + 3, v14);
        goto LABEL_31;
      }
    }
  }
  unsigned __int8 v19 = (const WTF::String *)MEMORY[0x1E4F30980];

  WebCore::MediaKeySystemRequest::deny((WebCore::MediaKeySystemRequest *)a2, v19);
}

uint64_t *WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  unint64_t v11 = ~(*a2 << 32) + *a2;
  unint64_t v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
  unint64_t v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
  unsigned int v14 = v10 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~(v13 << 27)));
  uint64_t v15 = (uint64_t *)(v8 + 24 * v14);
  uint64_t v16 = *v15;
  if (*v15)
  {
    int v17 = 0;
    int v18 = 1;
    do
    {
      if (v16 == *a2)
      {
        if (v9) {
          unsigned int v26 = 0;
        }
        else {
          unsigned int v26 = *(_DWORD *)(v8 - 4);
        }
        char v31 = 0;
        uint64_t v32 = v8 + 24 * v26;
        goto LABEL_33;
      }
      if (v16 == -1) {
        int v17 = v15;
      }
      unsigned int v14 = (v14 + v18) & v10;
      uint64_t v15 = (uint64_t *)(v8 + 24 * v14);
      uint64_t v16 = *v15;
      ++v18;
    }
    while (*v15);
    if (v17)
    {
      uint64_t *v17 = 0;
      v17[1] = 0;
      void v17[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v15 = v17;
    }
  }
  WTF::GenericHashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>::assignToEmpty<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>(v15, a2);
  uint64_t v20 = *a3;
  uint64_t v21 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v22 = *((unsigned int *)v15 + 5);
  if (v22) {
    WTF::VectorDestructor<true,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>::destruct((_DWORD *)v15[1], (_DWORD **)(v15[1] + 8 * v22));
  }
  int v23 = (WTF *)v15[1];
  if (v23)
  {
    v15[1] = 0;
    *((_DWORD *)v15 + 4) = 0;
    WTF::fastFree(v23, v19);
  }
  v15[1] = v20;
  v33[0] = 0;
  v33[1] = 0;
  uint64_t v15[2] = v21;
  uint64_t result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v19);
  uint64_t v24 = *v6;
  if (*v6) {
    int v25 = *(_DWORD *)(v24 - 12) + 1;
  }
  else {
    int v25 = 1;
  }
  *(_DWORD *)(v24 - 12) = v25;
  uint64_t v27 = *v6;
  if (*v6) {
    int v28 = *(_DWORD *)(v27 - 12);
  }
  else {
    int v28 = 0;
  }
  uint64_t v29 = (*(_DWORD *)(v27 - 16) + v28);
  unint64_t v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 <= 2 * v29)
    {
LABEL_26:
      uint64_t result = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::expand(v6, v15);
      uint64_t v15 = result;
      uint64_t v27 = *v6;
      if (*v6) {
        LODWORD(v30) = *(_DWORD *)(v27 - 4);
      }
      else {
        LODWORD(v30) = 0;
      }
    }
  }
  else if (3 * v30 <= 4 * v29)
  {
    goto LABEL_26;
  }
  uint64_t v32 = v27 + 24 * v30;
  char v31 = 1;
LABEL_33:
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v32;
  *(unsigned char *)(a4 + 16) = v31;
  return result;
}

void *WebKit::MediaKeySystemPermissionRequestManager::cancelMediaKeySystemRequest(WebKit::MediaKeySystemPermissionRequestManager *this, WebCore::MediaKeySystemRequest *a2)
{
  uint64_t v4 = (uint64_t *)((char *)this + 24);
  uint64_t v18 = *((void *)a2 + 4);
  uint64_t v5 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 3, &v18);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::take(v4, v5, &v19);
  uint64_t result = v19;
  unsigned __int8 v19 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1) {
      return (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    }
    else {
      --*((_DWORD *)result + 6);
    }
  }
  else
  {
    uint64_t result = (void *)WebCore::MediaKeySystemRequest::document(a2);
    if (result)
    {
      uint64_t v7 = *((void *)this + 4);
      uint64_t result = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(v7, (uint64_t)result);
      uint64_t v8 = result;
      uint64_t v9 = v7 ? v7 + 24 * *(unsigned int *)(v7 - 4) : 0;
      if ((void *)v9 != result)
      {
        uint64_t v10 = *((unsigned int *)result + 5);
        if (!v10) {
          goto LABEL_20;
        }
        unint64_t v11 = (WebCore::MediaKeySystemRequest **)result[1];
        unint64_t v12 = v11 + 1;
        uint64_t v13 = *((unsigned int *)result + 5);
        while (*v11 != a2)
        {
          ++v11;
          ++v12;
          if (!--v13) {
            return result;
          }
        }
        unsigned int __dst = v11;
        void *v11 = 0;
        if (*((_DWORD *)a2 + 6) == 1)
        {
          (*(void (**)(WebCore::MediaKeySystemRequest *))(*(void *)a2 + 16))(a2);
          uint64_t v10 = *((unsigned int *)v8 + 5);
        }
        else
        {
          --*((_DWORD *)a2 + 6);
        }
        uint64_t result = memmove(__dst, __dst + 1, v8[1] + 8 * v10 - (void)v12);
        int v14 = *((_DWORD *)v8 + 5) - 1;
        *((_DWORD *)v8 + 5) = v14;
        if (!v14)
        {
LABEL_20:
          uint64_t result = (void *)WebCore::Document::removeMediaCanStartListener();
          uint64_t v15 = *((void *)this + 4);
          if (v15)
          {
            uint64_t v16 = (void *)(v15 + 24 * *(unsigned int *)(v15 - 4));
            if (v16 == v8) {
              return result;
            }
          }
          else
          {
            if (!v8) {
              return result;
            }
            uint64_t v16 = 0;
          }
          if (v16 != v8) {
            return WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::remove((uint64_t *)this + 4, v8);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::MediaKeySystemPermissionRequestManager::mediaCanStart(WebKit::MediaKeySystemPermissionRequestManager *this, WebCore::Document *a2)
{
  uint64_t v3 = (uint64_t *)((char *)this + 32);
  uint64_t v4 = *((void *)this + 4);
  uint64_t v5 = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(v4, (uint64_t)a2);
  uint64_t v6 = v5;
  if (v4) {
    uint64_t v7 = (uint64_t *)(v4 + 24 * *(unsigned int *)(v4 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 == v5)
  {
    v17[0] = 0;
    uint64_t v15 = 0;
    v17[1] = 0;
    unint64_t v16 = 0;
    WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v5);
    return WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v6);
  }
  uint64_t v8 = (WTF::StringImpl ***)v5[1];
  uint64_t v15 = v8;
  unsigned int v9 = *((_DWORD *)v5 + 4);
  uint64_t v10 = *((unsigned int *)v5 + 5);
  v5[1] = 0;
  v5[2] = 0;
  unint64_t v16 = __PAIR64__(v10, v9);
  if (!*v3)
  {
    if (!v5) {
      goto LABEL_13;
    }
    uint64_t v11 = 0;
LABEL_11:
    if ((uint64_t *)v11 != v5) {
      WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::remove(v3, v5);
    }
    goto LABEL_13;
  }
  uint64_t v11 = *v3 + 24 * *(unsigned int *)(*v3 - 4);
  if ((uint64_t *)v11 != v5) {
    goto LABEL_11;
  }
LABEL_13:
  if (v10)
  {
    uint64_t v12 = 8 * v10;
    do
    {
      uint64_t v13 = *v8++;
      WebKit::MediaKeySystemPermissionRequestManager::sendMediaKeySystemRequest(this, v13);
      v12 -= 8;
    }
    while (v12);
  }
  return WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v6);
}

WebCore::MediaKeySystemRequest *WebKit::MediaKeySystemPermissionRequestManager::mediaKeySystemWasGranted(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v2 = (uint64_t *)(a1 + 24);
  uint64_t v3 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 24), &v6);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::take(v2, v3, &v5);
  uint64_t result = v5;
  if (v5)
  {
    WebCore::MediaKeySystemRequest::allow(v5);
    uint64_t result = v5;
    uint64_t v5 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 1) {
        return (WebCore::MediaKeySystemRequest *)(*(uint64_t (**)(WebCore::MediaKeySystemRequest *))(*(void *)result + 16))(result);
      }
      else {
        --*((_DWORD *)result + 6);
      }
    }
  }
  return result;
}

WebCore::MediaKeySystemRequest *WebKit::MediaKeySystemPermissionRequestManager::mediaKeySystemWasDenied(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  uint64_t v8 = a2;
  uint64_t v4 = (uint64_t *)(a1 + 24);
  uint64_t v5 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 24), &v8);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::take(v4, v5, &v7);
  uint64_t result = v7;
  if (v7)
  {
    WebCore::MediaKeySystemRequest::deny(v7, a3);
    uint64_t result = v7;
    uint64_t v7 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 1) {
        return (WebCore::MediaKeySystemRequest *)(*(uint64_t (**)(WebCore::MediaKeySystemRequest *))(*(void *)result + 16))(result);
      }
      else {
        --*((_DWORD *)result + 6);
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebExtensionContextProxy::setBackgroundPage(WebKit::WebExtensionContextProxy *this, WebKit::WebPage *a2)
{
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v5 = (atomic_uint *)*((void *)a2 + 3);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  uint64_t result = (unsigned int *)*((void *)this + 21);
  *((void *)this + 21) = v5;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, v4);
  }
  return result;
}

uint64_t WebKit::WebExtensionContextProxy::popupPages@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, unsigned __int8 a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  uint64_t v12 = (uint64_t *)(a1 + 176);
  uint64_t v13 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin((void **)(a1 + 176));
  WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::WeakHashMapIteratorBase((uint64_t)v27, v12, (uint64_t)v13, v14);
  uint64_t v15 = *(void *)(a1 + 176);
  if (v15)
  {
    unsigned int v16 = *(_DWORD *)(v15 - 4);
    uint64_t v17 = v15 + 40 * v16;
  }
  else
  {
    uint64_t v17 = 0;
    unsigned int v16 = 0;
  }
  uint64_t result = WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::WeakHashMapIteratorBase((uint64_t)&v25, v12, v17, v15 + 40 * v16);
  uint64_t v19 = v28;
  if (v28 != v26)
  {
    uint64_t v20 = a5;
    do
    {
      uint64_t v21 = *(void *)(*(void *)v19 + 8);
      if (v21) {
        uint64_t v22 = v21 - 16;
      }
      else {
        uint64_t v22 = 0;
      }
      if ((!a3 || !*(unsigned char *)(v19 + 16) || *(void *)(v19 + 8) == a2)
        && (!v20 || !*(unsigned char *)(v19 + 32) || *(void *)(v19 + 24) == a4))
      {
        uint64_t v23 = *(unsigned int *)(a6 + 12);
        if (v23 == *(_DWORD *)(a6 + 8))
        {
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPageProxy&>(a6, v22);
        }
        else
        {
          uint64_t v24 = *(void *)a6;
          CFRetain(*(CFTypeRef *)(v22 + 8));
          *(void *)(v24 + 8 * v23) = v22;
          ++*(_DWORD *)(a6 + 12);
        }
      }
      uint64_t result = (uint64_t)WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance((uint64_t)v27);
      uint64_t v19 = v28;
    }
    while (v28 != v26);
  }
  return result;
}

unsigned int *WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::set<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(uint64_t a1, void *a2, uint64_t *a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (v6 > v7) {
    WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(a1, a2);
  }
  WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::makeKeyImpl<WebKit::WebPage>((uint64_t)a2, (atomic_uint **)&v11);
  WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::inlineSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t *)a1, (unsigned int **)&v11, a3, (uint64_t)&v10);
  uint64_t result = (unsigned int *)v11;
  uint64_t v11 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
  }
  return result;
}

uint64_t WebKit::WebExtensionContextProxy::tabPages@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, unsigned __int8 a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  uint64_t v12 = (uint64_t *)(a1 + 192);
  uint64_t v13 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin((void **)(a1 + 192));
  WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::WeakHashMapIteratorBase((uint64_t)v27, v12, (uint64_t)v13, v14);
  uint64_t v15 = *(void *)(a1 + 192);
  if (v15)
  {
    unsigned int v16 = *(_DWORD *)(v15 - 4);
    uint64_t v17 = v15 + 40 * v16;
  }
  else
  {
    uint64_t v17 = 0;
    unsigned int v16 = 0;
  }
  uint64_t result = WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::WeakHashMapIteratorBase((uint64_t)&v25, v12, v17, v15 + 40 * v16);
  uint64_t v19 = v28;
  if (v28 != v26)
  {
    uint64_t v20 = a5;
    do
    {
      uint64_t v21 = *(void *)(*(void *)v19 + 8);
      if (v21) {
        uint64_t v22 = v21 - 16;
      }
      else {
        uint64_t v22 = 0;
      }
      if ((!a3 || !*(unsigned char *)(v19 + 16) || *(void *)(v19 + 8) == a2)
        && (!v20 || !*(unsigned char *)(v19 + 32) || *(void *)(v19 + 24) == a4))
      {
        uint64_t v23 = *(unsigned int *)(a6 + 12);
        if (v23 == *(_DWORD *)(a6 + 8))
        {
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPageProxy&>(a6, v22);
        }
        else
        {
          uint64_t v24 = *(void *)a6;
          CFRetain(*(CFTypeRef *)(v22 + 8));
          *(void *)(v24 + 8 * v23) = v22;
          ++*(_DWORD *)(a6 + 12);
        }
      }
      uint64_t result = (uint64_t)WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance((uint64_t)v27);
      uint64_t v19 = v28;
    }
    while (v28 != v26);
  }
  return result;
}

void WebKit::WebExtensionContextProxy::setBackgroundPageIdentifier(WebKit::WebExtensionContextProxy *a1, uint64_t a2)
{
  {
    unsigned int v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v6);
  }
  uint64_t v7 = a2;
  uint64_t v3 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v7);
  if (v3)
  {
    uint64_t v4 = (WebKit::WebPage *)v3;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    WebKit::WebExtensionContextProxy::setBackgroundPage(a1, v4);
    uint64_t v5 = (const void *)*((void *)v4 + 1);
    CFRelease(v5);
  }
}

void WebKit::WebExtensionContextProxy::addPopupPageIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  v14[0] = a2;
  uint64_t v11 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), v14);
  if (v11)
  {
    uint64_t v12 = (CFTypeRef *)v11;
    CFRetain(*(CFTypeRef *)(v11 + 8));
    v14[0] = a3;
    v14[1] = a4;
    void v14[2] = a5;
    v14[3] = a6;
    WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::set<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a1 + 176, v12, v14);
    CFRelease(v12[1]);
  }
}

void WebKit::WebExtensionContextProxy::addTabPageIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  {
    uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  v12[0] = a2;
  uint64_t v9 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), v12);
  if (v9)
  {
    uint64_t v10 = (CFTypeRef *)v9;
    CFRetain(*(CFTypeRef *)(v9 + 8));
    v12[0] = a3;
    v12[1] = 1;
    v12[2] = a4;
    v12[3] = a5;
    WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::set<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a1 + 192, v10, v12);
    CFRelease(v10[1]);
  }
}

uint64_t WebKit::WebExtensionContextProxy::setStorageAccessLevel(uint64_t this, char a2)
{
  *(unsigned char *)(this + 120) = a2;
  return this;
}

uint64_t WebKit::WebExtensionContextProxy::enumerateFramesAndNamespaceObjects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 152);
  unsigned int v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  *unsigned int v6 = &unk_1EE9E7A58;
  v6[1] = a3;
  v6[2] = a2;
  uint64_t v8 = v6;
  WTF::WeakHashSet<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v5, &v8);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t *a1, void *a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  WTF::Mapper<WTF::WeakHashSet<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::WebFrame&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map(&v9, (void **)a1);
  if (HIDWORD(v10))
  {
    uint64_t v5 = v9;
    uint64_t v6 = 8 * HIDWORD(v10);
    do
    {
      if (*v5)
      {
        if (*(void *)(*v5 + 8))
        {
          uint64_t v11 = *v5;
          if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(a1, &v11))
          {
            if (*v5) {
              uint64_t v7 = *(void *)(*v5 + 8);
            }
            else {
              uint64_t v7 = 0;
            }
            (*(void (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, v7);
          }
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v4);
}

void WebKit::WebExtensionControllerProxy::~WebExtensionControllerProxy(unsigned int **this)
{
  {
    uint64_t v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  IPC::MessageReceiverMap::removeMessageReceiver((IPC::MessageReceiverMap *)(WebKit::WebProcess::singleton(void)::process + 48), (IPC::MessageReceiver *)this);
  uint64_t v3 = (uint64_t)this[6];
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, v2);
  }
  uint64_t v4 = (uint64_t *)this[5];
  if (v4) {
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::deallocateTable(v4, v2);
  }
  *this = (unsigned int *)&unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebExtensionControllerProxy::~WebExtensionControllerProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t *WebKit::WebExtensionControllerProxy::load(WebKit::WebExtensionControllerProxy *this, const WebKit::WebExtensionContextParameters *a2)
{
  WebKit::WebExtensionContextProxy::getOrCreate(a2, this, 0, &v9);
  WTF::URL::protocolHostAndPort((uint64_t *)&v8, (const WebKit::WebExtensionContextParameters *)((char *)a2 + 8));
  WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>&>((uint64_t)v7, (uint64_t *)this + 6, &v8, &v9);
  uint64_t v5 = v8;
  uint64_t v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::add(v7, (uint64_t *)this + 5, &v9);
  if (v9) {
    return (uint64_t *)WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v9 + 16));
  }
  return result;
}

uint64_t WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>&>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a3 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a3);
  }
  uint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v14 = v11 & v9;
    uint64_t v15 = (uint64_t *)(v8 + 16 * (v11 & v9));
    unsigned int v16 = (WTF *)*v15;
    if (*v15 != -1) {
      break;
    }
    uint64_t v12 = (uint64_t *)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      uint64_t *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v15 = v12;
    }
    uint64_t result = (uint64_t)WTF::String::operator=(v15, (uint64_t *)a3);
    uint64_t v18 = *a4;
    *(_DWORD *)(v18 + 16) = *(_DWORD *)(*a4 + 16) + 1;
    uint64_t v19 = v15[1];
    v15[1] = v18;
    if (v19) {
      uint64_t result = (uint64_t)WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v19 + 16));
    }
    uint64_t v20 = *a2;
    if (*a2) {
      int v21 = *(_DWORD *)(v20 - 12) + 1;
    }
    else {
      int v21 = 1;
    }
    *(_DWORD *)(v20 - 12) = v21;
    uint64_t v24 = *a2;
    if (*a2) {
      int v25 = *(_DWORD *)(v24 - 12);
    }
    else {
      int v25 = 0;
    }
    uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
    unint64_t v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
      {
LABEL_28:
        uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, (WTF::StringImpl **)v15);
        uint64_t v15 = (uint64_t *)result;
        uint64_t v24 = *a2;
        if (*a2) {
          unint64_t v27 = *(unsigned int *)(v24 - 4);
        }
        else {
          unint64_t v27 = 0;
        }
      }
    }
    else if (3 * v27 <= 4 * v26)
    {
      goto LABEL_28;
    }
    uint64_t v29 = v24 + 16 * v27;
    char v28 = 1;
    goto LABEL_35;
  }
  uint64_t result = WTF::equal(v16, *a3, (const WTF::StringImpl *)a3);
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v22 = *a2;
  if (*a2) {
    uint64_t v23 = *(unsigned int *)(v22 - 4);
  }
  else {
    uint64_t v23 = 0;
  }
  char v28 = 0;
  uint64_t v29 = v22 + 16 * v23;
LABEL_35:
  *(void *)a1 = v15;
  *(void *)(a1 + 8) = v29;
  *(unsigned char *)(a1 + 16) = v28;
  return result;
}

void *WebKit::WebExtensionControllerProxy::unload(void *result, WTF::StringImpl *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result + 6;
  uint64_t v5 = result[6];
  if (v5)
  {
    int v6 = *(_DWORD *)(v5 - 4);
    if (v6)
    {
      int v7 = 0;
      unsigned int v8 = v6 - 1;
      do
      {
        uint64_t v9 = v8;
        uint64_t result = (void *)(v5 + 16 * v8);
        if ((unint64_t)(*result + 1) >= 2)
        {
          uint64_t v10 = v5 + 16 * v8;
          uint64_t v12 = *(void *)(v10 + 8);
          unsigned int v11 = (uint64_t *)(v10 + 8);
          if (*(WTF::StringImpl **)(v12 + 24) == a2)
          {
            uint64_t result = WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)result, a2);
            uint64_t v13 = *v11;
            uint64_t *v11 = 0;
            if (v13) {
              uint64_t result = WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v13 + 16));
            }
            ++v7;
          }
        }
        --v8;
      }
      while (v9);
      uint64_t v14 = *v4;
      if (v7)
      {
        *(_DWORD *)(v14 - 16) += v7;
        uint64_t v15 = *v4;
        if (*v4) {
          int v16 = *(_DWORD *)(v15 - 12);
        }
        else {
          int v16 = 0;
        }
        *(_DWORD *)(v15 - 12) = v16 - v7;
        uint64_t v14 = *v4;
      }
      if (v14)
      {
        unsigned int v17 = *(_DWORD *)(v14 - 4);
        uint64_t v18 = *(unsigned int *)(v14 - 12);
        if (v17 >= 9 && 6 * (int)v18 < v17)
        {
          unsigned int v20 = (v18 - 1) | ((v18 - 1) >> 1) | (((v18 - 1) | ((v18 - 1) >> 1)) >> 2);
          unsigned int v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
          unint64_t v22 = (v21 | HIWORD(v21)) + 1;
          if (v22 > 0x400)
          {
            if (v22 > 2 * v18) {
              goto LABEL_25;
            }
          }
          else if (3 * v22 > 4 * v18)
          {
LABEL_23:
            double v23 = (double)v18;
            double v24 = (double)v22;
            double v25 = 0.604166667;
LABEL_26:
            if (v24 * v25 <= v23) {
              LODWORD(v22) = 2 * v22;
            }
            if (v22 <= 8) {
              unsigned int v26 = 8;
            }
            else {
              unsigned int v26 = v22;
            }
            uint64_t result = (void *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v4, v26, 0);
            goto LABEL_32;
          }
          LODWORD(v22) = 2 * v22;
          if (v22 <= 0x400) {
            goto LABEL_23;
          }
LABEL_25:
          double v23 = (double)v18;
          double v24 = (double)v22;
          double v25 = 0.416666667;
          goto LABEL_26;
        }
      }
    }
  }
LABEL_32:
  uint64_t v29 = v3[5];
  unint64_t v27 = v3 + 5;
  uint64_t v28 = v29;
  if (v29)
  {
    int v30 = *(_DWORD *)(v28 - 4);
    if (v30)
    {
      int v31 = 0;
      unsigned int v32 = v30 - 1;
      do
      {
        uint64_t v33 = v32;
        uint64_t v34 = *(void *)(v28 + 8 * v32);
        if ((unint64_t)(v34 + 1) >= 2 && *(WTF::StringImpl **)(v34 + 24) == a2)
        {
          *(void *)(v28 + 8 * v32) = 0;
          uint64_t result = WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v34 + 16));
          *(void *)(v28 + 8 * v32) = -1;
          ++v31;
        }
        --v32;
      }
      while (v33);
      uint64_t v35 = *v27;
      if (v31)
      {
        *(_DWORD *)(v35 - 16) += v31;
        uint64_t v36 = *v27;
        if (*v27) {
          int v37 = *(_DWORD *)(v36 - 12);
        }
        else {
          int v37 = 0;
        }
        *(_DWORD *)(v36 - 12) = v37 - v31;
        uint64_t v35 = *v27;
      }
      if (v35)
      {
        unsigned int v38 = *(_DWORD *)(v35 - 4);
        uint64_t v39 = *(unsigned int *)(v35 - 12);
        if (v38 >= 9 && 6 * (int)v39 < v38)
        {
          unsigned int v41 = (v39 - 1) | ((v39 - 1) >> 1) | (((v39 - 1) | ((v39 - 1) >> 1)) >> 2);
          unsigned int v42 = v41 | (v41 >> 4) | ((v41 | (v41 >> 4)) >> 8);
          unint64_t v43 = (v42 | HIWORD(v42)) + 1;
          if (v43 > 0x400)
          {
            if (v43 > 2 * v39) {
              goto LABEL_55;
            }
          }
          else if (3 * v43 > 4 * v39)
          {
LABEL_52:
            double v44 = (double)v39;
            double v45 = (double)v43;
            double v46 = 0.604166667;
LABEL_56:
            if (v45 * v46 <= v44) {
              LODWORD(v43) = 2 * v43;
            }
            if (v43 <= 8) {
              unsigned int v47 = 8;
            }
            else {
              unsigned int v47 = v43;
            }
            return WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::rehash(v27, v47, 0);
          }
          LODWORD(v43) = 2 * v43;
          if (v43 <= 0x400) {
            goto LABEL_52;
          }
LABEL_55:
          double v44 = (double)v39;
          double v45 = (double)v43;
          double v46 = 0.416666667;
          goto LABEL_56;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebExtensionControllerProxy::extensionContext@<X0>(WebKit::WebExtensionControllerProxy *this@<X0>, const WTF::StringImpl **a2@<X1>, void *a3@<X8>)
{
  uint64_t result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::begin((void **)this + 5);
  uint64_t v8 = result;
  uint64_t v10 = v9;
  uint64_t v11 = *((void *)this + 5);
  if (v11) {
    uint64_t v12 = v11 + 8 * *(unsigned int *)(v11 - 4);
  }
  else {
    uint64_t v12 = 0;
  }
  if (v12 == result)
  {
LABEL_11:
    uint64_t v13 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t result = WTF::equal(*(WTF **)(*(void *)v8 + 80), *a2, v7);
      if (result) {
        break;
      }
      while (1)
      {
        v8 += 8;
        if (v8 == v10) {
          break;
        }
        if ((unint64_t)(*(void *)v8 + 1) > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v8 = v10;
LABEL_10:
      if (v8 == v12) {
        goto LABEL_11;
      }
    }
    uint64_t v13 = *(void *)v8;
    ++*(_DWORD *)(*(void *)v8 + 16);
  }
  *a3 = v13;
  return result;
}

WTF::StringImpl *WebKit::WebExtensionControllerProxy::extensionContext@<X0>(WebKit::WebExtensionControllerProxy *this@<X0>, const WTF::URL *a2@<X1>, WTF **a3@<X8>)
{
  uint64_t v4 = (uint64_t *)((char *)this + 48);
  WTF::URL::protocolHostAndPort((uint64_t *)&v9, a2);
  int v6 = WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v4, &v9, v5);
  if (v6) {
    ++*((_DWORD *)v6 + 4);
  }
  *a3 = v6;
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebExtensionControllerProxy::extensionContext@<X0>(WebKit::WebExtensionControllerProxy *this@<X0>, WebKit::WebFrame *a2@<X1>, WebCore::DOMWrapperWorld *a3@<X2>, WTF **a4@<X8>)
{
  if (*((_DWORD *)a3 + 12))
  {
    uint64_t result = *((void *)a3 + 5);
    if (!result || (uint64_t result = WTF::StringImpl::startsWith(), (result & 1) == 0))
    {
      *a4 = 0;
      return result;
    }
    uint64_t v9 = (WTF::StringImpl *)*((void *)a3 + 5);
    if (v9) {
      WTF::StringImpl::substring(v9);
    }
    else {
      v10[0] = 0;
    }
    WebKit::WebExtensionControllerProxy::extensionContext(this, v10, a4);
  }
  else
  {
    WebKit::WebFrame::url(a2, (uint64_t)v10);
    WebKit::WebExtensionControllerProxy::extensionContext(this, (const WTF::URL *)v10, a4);
  }
  uint64_t result = (uint64_t)v10[0];
  v10[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionWrapper::wrap(JSContextRef ctx, void *a2)
{
  if (a2)
  {
    JSGlobalContextRef GlobalContext = JSContextGetGlobalContext(ctx);
    if (byte_1EB359DF9)
    {
      uint64_t v5 = qword_1EB359E08;
      if (qword_1EB359E08) {
        goto LABEL_4;
      }
    }
    else
    {
      qword_1EB359E08 = 0;
      byte_1EB359DF9 = 1;
    }
    WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::expand(0);
    uint64_t v5 = qword_1EB359E08;
    if (!qword_1EB359E08)
    {
      int v6 = 0;
LABEL_5:
      unint64_t v7 = ((unint64_t)GlobalContext + ~((void)GlobalContext << 32)) ^ (((unint64_t)GlobalContext
                                                                                + ~((void)GlobalContext << 32)) >> 22);
      unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      unsigned int v10 = v6 & ((v9 >> 31) ^ v9);
      uint64_t v11 = (OpaqueJSContext **)(v5 + 16 * v10);
      uint64_t v12 = *v11;
      if (*v11)
      {
        uint64_t v13 = 0;
        int v14 = 1;
        while (v12 != GlobalContext)
        {
          if (v12 == (OpaqueJSContext *)-1) {
            uint64_t v13 = v11;
          }
          unsigned int v10 = (v10 + v14) & v6;
          uint64_t v11 = (OpaqueJSContext **)(v5 + 16 * v10);
          uint64_t v12 = *v11;
          ++v14;
          if (!*v11)
          {
            if (v13)
            {
              WebKit::WebProcess *v13 = 0;
              v13[1] = 0;
              --*(_DWORD *)(v5 - 16);
              uint64_t v11 = v13;
            }
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        uint64_t *v11 = GlobalContext;
        v11[1] = (OpaqueJSContext *)JSWeakObjectMapCreate();
        if (qword_1EB359E08) {
          int v15 = *(_DWORD *)(qword_1EB359E08 - 12) + 1;
        }
        else {
          int v15 = 1;
        }
        *(_DWORD *)(qword_1EB359E08 - 12) = v15;
        if (qword_1EB359E08) {
          int v16 = *(_DWORD *)(qword_1EB359E08 - 12);
        }
        else {
          int v16 = 0;
        }
        uint64_t v17 = (*(_DWORD *)(qword_1EB359E08 - 16) + v16);
        unint64_t v18 = *(unsigned int *)(qword_1EB359E08 - 4);
        if (v18 > 0x400)
        {
          if (v18 > 2 * v17) {
            goto LABEL_19;
          }
        }
        else if (3 * v18 > 4 * v17)
        {
          goto LABEL_19;
        }
        WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::expand(v11);
      }
LABEL_19:
      uint64_t v19 = (OpaqueJSValue *)JSWeakObjectMapGet();
      if (v19)
      {
        JSObjectRef v21 = v19;
        if (JSObjectGetPrivate(v19)) {
          return v21;
        }
        JSWeakObjectMapRemove();
      }
      unsigned int v20 = (OpaqueJSClass *)(*(uint64_t (**)(void *))(*(void *)a2 + 16))(a2);
      JSObjectRef v21 = JSObjectMake(ctx, v20, a2);
      JSWeakObjectMapSet();
      return v21;
    }
LABEL_4:
    int v6 = *(_DWORD *)(v5 - 8);
    goto LABEL_5;
  }

  return JSValueMakeNull(ctx);
}

_DWORD *WebKit::JSWebExtensionWrapper::initialize(WebKit::JSWebExtensionWrapper *this, JSObjectRef object, OpaqueJSValue *a3)
{
  uint64_t result = JSObjectGetPrivate(object);
  if (result) {
    ++result[2];
  }
  return result;
}

uint64_t WebKit::JSWebExtensionWrapper::finalize(WebKit::JSWebExtensionWrapper *this, OpaqueJSValue *a2)
{
  uint64_t result = (uint64_t)JSObjectGetPrivate(this);
  if (result)
  {
    uint64_t v4 = (_DWORD *)result;
    uint64_t result = JSObjectSetPrivate(this, 0);
    if (v4[2] == 1)
    {
      uint64_t v5 = *(uint64_t (**)(_DWORD *))(*(void *)v4 + 8);
      return v5(v4);
    }
    else
    {
      --v4[2];
    }
  }
  return result;
}

void WebKit::BlobRegistryProxy::registerInternalFileBlobURL(uint64_t a1, uint64_t *a2, WebCore::BlobDataFileReference **a3, WTF **a4, uint64_t *a5)
{
  unsigned int v26 = 0;
  uint64_t v9 = *(void *)WebCore::BlobDataFileReference::path(*a3);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 4))
    {
      WebCore::BlobDataFileReference::path(*a3);
      WebKit::SandboxExtension::createHandle(0, (uint64_t)&v24);
      if (v25)
      {
        unsigned int v10 = (const char **)v24;
        double v24 = 0;
        unsigned int v26 = v10;
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v24);
      }
    }
  }
  uint64_t v11 = (const WTF::StringImpl **)WebCore::BlobDataFileReference::path(*a3);
  if (WTF::equal(*a4, *v11, v12)) {
    uint64_t v13 = (WTF::StringImpl **)MEMORY[0x1E4F30978];
  }
  else {
    uint64_t v13 = (WTF::StringImpl **)WebCore::BlobDataFileReference::path(*a3);
  }
  int v14 = *v13;
  if (*v13) {
    *(_DWORD *)v14 += 2;
  }
  double v23 = v14;
  {
    unint64_t v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v22);
  }
  uint64_t v15 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                  + 24);
  int v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v16 = 268;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  double v24 = v16;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, (uint64_t *)a4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, (uint64_t *)&v23);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(v16, &v26);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a5);
  IPC::Connection::sendMessageImpl(v15, (uint64_t *)&v24, 0, 0);
  unint64_t v18 = v24;
  double v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v17);
    WTF::fastFree(v20, v21);
  }
  uint64_t v19 = v23;
  double v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v17);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v26);
}

IPC::Encoder *WebKit::BlobRegistryProxy::registerInternalBlobURL(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  {
    int v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v16);
  }
  uint64_t v7 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  unint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v8 = 265;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v17 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v8, *(unsigned int *)(a3 + 12));
  uint64_t v9 = *(unsigned int *)(a3 + 12);
  if (v9)
  {
    uint64_t v10 = *(void *)a3;
    uint64_t v11 = 48 * v9;
    do
    {
      unsigned __int8 v18 = *(_DWORD *)(v10 + 40);
      IPC::Encoder::operator<<<BOOL>(v8, (char *)&v18);
      IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL> const&>(v8, v10, v18);
      v10 += 48;
      v11 -= 48;
    }
    while (v11);
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a4);
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v17, 0, 0);
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::BlobRegistryProxy::registerBlobURL(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  {
    uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  uint64_t v9 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 263;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  int v16 = v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, a3);
  IPC::ArgumentCoder<WebCore::PolicyContainer,void>::encode(v10, a4);
  IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v10, a5);
  IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v16, 0, 0);
  uint64_t result = v16;
  int v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::BlobRegistryProxy::registerInternalBlobURLOptionallyFileBacked(uint64_t a1, uint64_t *a2, uint64_t *a3, WebCore::BlobDataFileReference **a4, uint64_t *a5)
{
  {
    int v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v16);
  }
  uint64_t v9 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  uint64_t v10 = (uint64_t *)WebCore::BlobDataFileReference::path(*a4);
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 267;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v17 = v11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, v10);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a5);
  IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v17, 0, 0);
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::BlobRegistryProxy::unregisterBlobURL(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  {
    uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  uint64_t v5 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 290;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v12 = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a2);
  IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v6, a3);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::BlobRegistryProxy::registerInternalBlobURLForSlice(WebKit::BlobRegistryProxy *this, const WTF::URL *a2, const WTF::URL *a3, uint64_t a4, uint64_t a5, const WTF::String *a6)
{
  {
    uint64_t v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v17);
  }
  uint64_t v11 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                  + 24);
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 266;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  unsigned __int8 v18 = v12;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, (uint64_t *)a3);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v12, a4);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v12, a5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, (uint64_t *)a6);
  IPC::Connection::sendMessageImpl(v11, (uint64_t *)&v18, 0, 0);
  uint64_t result = v18;
  unsigned __int8 v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::BlobRegistryProxy::registerBlobURLHandle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  {
    uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  uint64_t v5 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 264;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v12 = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a2);
  IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v6, a3);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::BlobRegistryProxy::unregisterBlobURLHandle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  {
    uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  uint64_t v5 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 291;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v12 = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a2);
  IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v6, a3);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::BlobRegistryProxy::blobType@<X0>(const WTF::URL *a1@<X1>, void *a2@<X8>)
{
  {
LABEL_24:
    int v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v16);
  }
  uint64_t v5 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  uint64_t v25 = 0;
  IPC::Connection::createSyncMessageEncoder(3607, 0, &v25, &v24);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v24, (uint64_t *)a1);
  IPC::Connection::sendSyncMessage(v5, v25, (uint64_t *)&v24, 0, (uint64_t)&v22, INFINITY);
  if (!v23)
  {
    LOBYTE(v20) = 0;
    char v21 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v22, (uint64_t *)&v20);
    if (!v21)
    {
      LOBYTE(v17) = 13;
      int v6 = 1;
      int v19 = 1;
      int v7 = v23;
      if (v23 == -1) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    int v7 = v23;
    if (!v23)
    {
      int v6 = 0;
      uint64_t v9 = v22;
      unint64_t v22 = 0;
      a1 = v20;
      uint64_t v17 = v9;
      unsigned __int8 v18 = v20;
      int v19 = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  if (v23 != 1)
  {
LABEL_23:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_24;
  }
  LOBYTE(v17) = (_BYTE)v22;
  int v6 = 1;
  int v19 = 1;
  int v7 = 1;
LABEL_9:
  ((void (*)(const WTF::URL **, IPC::Decoder **))off_1EE9E7A70[v7])(&v20, &v22);
LABEL_10:
  uint64_t v10 = v24;
  double v24 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v13, v14);
    if (v6)
    {
LABEL_12:
      a1 = (const WTF::URL *)*MEMORY[0x1E4F30980];
      if (*MEMORY[0x1E4F30980])
      {
        int v11 = *(_DWORD *)a1;
        *(_DWORD *)a1 += 4;
        int v12 = v11 + 2;
        goto LABEL_17;
      }
LABEL_22:
      *a2 = 0;
      return ((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E7980[v6])(&v22, &v17);
    }
  }
  else if (v6)
  {
    goto LABEL_12;
  }
  unsigned __int8 v18 = 0;
  if (!a1) {
    goto LABEL_22;
  }
  int v12 = *(_DWORD *)a1;
  *(_DWORD *)a1 += 2;
LABEL_17:
  *a2 = a1;
  if (v12)
  {
    *(_DWORD *)a1 = v12;
    return ((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E7980[v6])(&v22, &v17);
  }
  uint64_t result = WTF::StringImpl::destroy(a1, (WTF::StringImpl *)v8);
  int v6 = v19;
  if (v19 != -1) {
    return ((uint64_t (*)(void, void))off_1EE9E7980[v6])(&v22, &v17);
  }
  return result;
}

const WTF::URL *WebKit::BlobRegistryProxy::blobSize(WebKit::BlobRegistryProxy *this, const WTF::URL *a2)
{
  {
LABEL_18:
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  uint64_t v19 = 0;
  IPC::Connection::createSyncMessageEncoder(3606, 0, &v19, &v18);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v18, (uint64_t *)a2);
  IPC::Connection::sendSyncMessage(v3, v19, (uint64_t *)&v18, 0, (uint64_t)&v16, INFINITY);
  int v4 = v17;
  if (v17)
  {
    if (v17 == 1)
    {
      LOBYTE(v14[0]) = (_BYTE)v16;
LABEL_8:
      int v15 = v4;
      int v8 = v4;
LABEL_9:
      ((void (*)(char *, IPC::Decoder **))off_1EE9E7A70[v8])(&v20, &v16);
      goto LABEL_10;
    }
LABEL_17:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_18;
  }
  uint64_t v5 = (const WTF::URL *)IPC::Decoder::decode<std::tuple<unsigned long long>>(v16);
  if ((_BYTE)v6)
  {
    if (!v17)
    {
      a2 = v5;
      int v7 = v16;
      int v16 = 0;
      v14[0] = v7;
      v14[1] = v5;
      goto LABEL_8;
    }
    goto LABEL_17;
  }
  LOBYTE(v14[0]) = 13;
  int v4 = 1;
  int v15 = 1;
  int v8 = v17;
  if (v17 != -1) {
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v9 = v18;
  unsigned __int8 v18 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v6);
    WTF::fastFree(v11, v12);
  }
  if (v4) {
    a2 = 0;
  }
  ((void (*)(IPC::Decoder **, void *))off_1EE9E7990[v4])(&v16, v14);
  return a2;
}

uint64_t WebKit::BlobRegistryProxy::writeBlobsToTemporaryFilesForIndexedDB(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  {
    int v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  uint64_t v5 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                            + 24);
  uint64_t v8 = a2;
  return IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::WriteBlobsToTemporaryFilesForIndexedDB,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v5, &v8, a3, 0, 0);
}

uint64_t WebKit::WebIDBConnectionToServer::messageSenderDestinationID(WebKit::WebIDBConnectionToServer *this)
{
  return 0;
}

uint64_t non-virtual thunk to'WebKit::WebIDBConnectionToServer::messageSenderDestinationID(WebKit::WebIDBConnectionToServer *this)
{
  return 0;
}

void WebKit::DigitalCredentialsCoordinator::~DigitalCredentialsCoordinator(WebKit::DigitalCredentialsCoordinator *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  uint64_t vars8;

  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  WTF::fastFree(this, a2);
}

void WebKit::MediaKeySystemPermissionRequestManager::~MediaKeySystemPermissionRequestManager(WebKit::MediaKeySystemPermissionRequestManager *this, void *a2)
{
  WebKit::MediaKeySystemPermissionRequestManager::~MediaKeySystemPermissionRequestManager(this, a2);

  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD **v9;
  _DWORD *v10;

  *(void *)this = &unk_1EE9E78A0;
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    int v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = v3 + 8;
      do
      {
        if (*(void *)(v5 - 8) != -1)
        {
          WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
          int v6 = *(void *)(v5 - 8);
          *(void *)(v5 - 8) = 0;
          if (v6)
          {
            if (*(_DWORD *)(v6 + 28) == 2)
            {
              if ((*(_WORD *)(v6 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v6);
              }
            }
            else
            {
              *(_DWORD *)(v6 + 28) -= 2;
            }
          }
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  int v7 = *((void *)this + 3);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    if (v8)
    {
      uint64_t v9 = (_DWORD **)(v7 + 8);
      do
      {
        if (*(v9 - 1) != (_DWORD *)-1)
        {
          uint64_t v10 = *v9;
          *uint64_t v9 = 0;
          if (v10)
          {
            if (v10[6] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v10 + 16))(v10);
            }
            else {
              --v10[6];
            }
          }
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

void WebKit::BlobRegistryProxy::~BlobRegistryProxy(WebKit::BlobRegistryProxy *this)
{
  WebCore::BlobRegistry::~BlobRegistry(this);

  JUMPOUT(0x199740C10);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    int v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != -1)
      {
        uint64_t *v4 = 0;
        if (v5) {
          WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v5 + 16));
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *(WTF::StringImpl **)v4;
      if (*(void *)v4 != -1)
      {
        uint64_t v6 = *(void *)(v4 + 8);
        *(void *)(v4 + 8) = 0;
        if (v6)
        {
          WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v6 + 16));
          uint64_t v5 = *(WTF::StringImpl **)v4;
        }
        *(void *)uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::expand(void *a1)
{
  if (qword_1EB359E08 && (int v2 = *(_DWORD *)(qword_1EB359E08 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(qword_1EB359E08 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::rehash(v3, a1);
}

uint64_t WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::rehash(unsigned int a1, void *a2)
{
  uint64_t v4 = qword_1EB359E08;
  if (qword_1EB359E08)
  {
    int v5 = *(_DWORD *)(qword_1EB359E08 - 4);
    int v6 = *(_DWORD *)(qword_1EB359E08 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  int v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1EB359E08 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  uint64_t v7[3] = a1;
  _DWORD *v7 = 0;
  *(_DWORD *)(qword_1EB359E08 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = qword_1EB359E08;
    do
    {
      int v12 = (void *)(v4 + 16 * v9);
      if ((unint64_t)(*v12 + 1) >= 2)
      {
        if (v11) {
          int v13 = *(_DWORD *)(v11 - 8);
        }
        else {
          int v13 = 0;
        }
        uint64_t v14 = (~(*v12 << 32) + *v12) ^ ((~(*v12 << 32) + *v12) >> 22);
        unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((unint64_t)(v14 + ~(v14 << 13)) >> 8));
        unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
        unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
        int v18 = 1;
        do
        {
          unsigned int v19 = v17;
          uint64_t v20 = *(void *)(v11 + 16 * v17);
          unsigned int v17 = (v17 + v18++) & v13;
        }
        while (v20);
        *(_OWORD *)(v11 + 16 * v19) = *(_OWORD *)v12;
        if (v12 == a2) {
          uint64_t v10 = v11 + 16 * v19;
        }
      }
      ++v9;
    }
    while (v9 != v5);
    goto LABEL_13;
  }
  uint64_t v10 = 0;
  uint64_t result = 0;
  if (v4)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v10;
  }
  return result;
}

void WebKit::cacheMapDestroyed(uint64_t a1, uint64_t a2)
{
  if (byte_1EB359DF9)
  {
    uint64_t v2 = qword_1EB359E08;
    if (qword_1EB359E08)
    {
      unsigned int v4 = *(_DWORD *)(qword_1EB359E08 - 8);
      uint64_t v5 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2) & v4;
      uint64_t v6 = *(void *)(v2 + 16 * v5);
      if (v6 != a2)
      {
        int v7 = 1;
        while (v6)
        {
          uint64_t v5 = (v5 + v7) & v4;
          uint64_t v6 = *(void *)(v2 + 16 * v5);
          ++v7;
          if (v6 == a2) {
            goto LABEL_9;
          }
        }
        uint64_t v5 = *(unsigned int *)(v2 - 4);
      }
LABEL_9:
      if (v5 != *(_DWORD *)(v2 - 4))
      {
        *(void *)(v2 + 16 * v5) = -1;
        uint64_t v8 = qword_1EB359E08;
        ++*(_DWORD *)(qword_1EB359E08 - 16);
        int v9 = v8 ? *(_DWORD *)(v8 - 12) - 1 : -1;
        *(_DWORD *)(v8 - 12) = v9;
        if (qword_1EB359E08)
        {
          unsigned int v10 = *(_DWORD *)(qword_1EB359E08 - 4);
          if (6 * *(_DWORD *)(qword_1EB359E08 - 12) < v10 && v10 >= 9)
          {
            WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::rehash(v10 >> 1, 0);
          }
        }
      }
    }
  }
  else
  {
    qword_1EB359E08 = 0;
    byte_1EB359DF9 = 1;
  }
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess8BlobTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess8BlobSizeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::reinsert(uint64_t a1, void *a2)
{
  if (a1) {
    int v2 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v2 = 0;
  }
  uint64_t v3 = (*a2 + ~(*a2 << 32)) ^ ((*a2 + ~(*a2 << 32)) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((unint64_t)(v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  int v7 = 1;
  do
  {
    unsigned int v8 = v6;
    uint64_t v9 = *(void *)(a1 + 16 * v6);
    unsigned int v6 = (v6 + v7++) & v2;
  }
  while (v9);
  uint64_t result = (void *)(a1 + 16 * v8);
  int v12 = result + 1;
  uint64_t v11 = (unsigned int *)result[1];
  result[1] = 0;
  if (v11 && atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11);
    unint64_t v16 = result;
    uint64_t v14 = result + 1;
    unint64_t v15 = a2;
    WTF::fastFree((WTF *)v11, a2);
    int v12 = v14;
    a2 = v15;
    uint64_t result = v16;
  }
  void *result = *a2;
  uint64_t v13 = a2[1];
  a2[1] = 0;
  void *v12 = v13;
  return result;
}

uint64_t WTF::ThreadSafeRefCounted<WebCore::IDBClient::IDBConnectionToServer,(WTF::DestructionThread)0>::deref(uint64_t result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    unint64_t v1 = (bmalloc::api *)result;
    atomic_store(1u, (unsigned int *)result);
    std::unique_ptr<WebCore::IDBClient::IDBConnectionProxy>::reset[abi:sn180100]((WebCore::IDBClient::IDBConnectionProxy **)(result + 24), 0);
    uint64_t v3 = (unsigned int *)*((void *)v1 + 1);
    *((void *)v1 + 1) = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, v2);
    }
    return bmalloc::api::isoDeallocate(v1, v2);
  }
  return result;
}

WebCore::IDBClient::IDBConnectionProxy *std::unique_ptr<WebCore::IDBClient::IDBConnectionProxy>::reset[abi:sn180100](WebCore::IDBClient::IDBConnectionProxy **a1, WebCore::IDBClient::IDBConnectionProxy *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(result, a2);
    return (WebCore::IDBClient::IDBConnectionProxy *)bmalloc::api::isoDeallocate(v4, v5);
  }
  return result;
}

void WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(WebCore::IDBClient::IDBConnectionProxy *this, void *a2)
{
  uint64_t v3 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::IDBClient::IDBConnectionToServer,(WTF::DestructionThread)0>::deref();
  }
  unint64_t v4 = *((void *)this + 11);
  unint64_t v5 = *((void *)this + 12);
  unsigned int v6 = (WTF *)*((void *)this + 13);
  if (v4 <= v5)
  {
    if (v4 == v5) {
      goto LABEL_18;
    }
    uint64_t v9 = (uint64_t *)((char *)v6 + 8 * v4);
    uint64_t v10 = 8 * v5 - 8 * v4;
    do
    {
      uint64_t v11 = *v9;
      *uint64_t v9 = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
    if (v5)
    {
      uint64_t v7 = 8 * v5;
      do
      {
        uint64_t v8 = *(void *)v6;
        *(void *)unsigned int v6 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
        unsigned int v6 = (WTF *)((char *)v6 + 8);
        v7 -= 8;
      }
      while (v7);
      unsigned int v6 = (WTF *)*((void *)this + 13);
      unint64_t v4 = *((void *)this + 11);
    }
    uint64_t v12 = *((unsigned int *)this + 28);
    if (v4 != v12)
    {
      uint64_t v34 = (uint64_t *)((char *)v6 + 8 * v4);
      uint64_t v35 = 8 * v12 - 8 * v4;
      do
      {
        uint64_t v36 = *v34;
        uint64_t *v34 = 0;
        if (v36) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  unsigned int v6 = (WTF *)*((void *)this + 13);
LABEL_18:
  if (v6)
  {
    *((void *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v6, a2);
  }
  uint64_t v13 = *((void *)this + 9);
  if (v13)
  {
    uint64_t v14 = *(unsigned int *)(v13 - 4);
    if (v14)
    {
      unint64_t v15 = (uint64_t *)(v13 + 16);
      do
      {
        if (*(v15 - 2) != -1)
        {
          uint64_t v16 = *v15;
          *unint64_t v15 = 0;
          if (v16)
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v16 + 36), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, (unsigned int *)(v16 + 36));
              uint64_t v17 = *(void *)(v16 + 64);
              *(void *)(v16 + 64) = 0;
              if (v17) {
                (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
              }
              int v18 = *(WebCore::IDBClient::IDBConnectionProxy **)(v16 + 40);
              *(void *)(v16 + 40) = 0;
              if (v18) {
                WebCore::IDBClient::IDBConnectionProxy::deref(v18);
              }
              *(void *)uint64_t v16 = &unk_1EE9E79B0;
              unsigned int v19 = *(unsigned int **)(v16 + 24);
              *(void *)(v16 + 24) = 0;
              if (v19) {
                WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(v19);
              }
              WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v16);
              bmalloc::api::isoDeallocate(v20, v21);
            }
          }
        }
        v15 += 3;
        --v14;
      }
      while (v14);
    }
    WTF::fastFree((WTF *)(v13 - 16), a2);
  }
  uint64_t v22 = *((void *)this + 8);
  if (v22)
  {
    uint64_t v23 = *(unsigned int *)(v22 - 4);
    if (v23)
    {
      double v24 = (unsigned int **)(v22 + 16);
      do
      {
        if (*(v24 - 2) != (unsigned int *)-1)
        {
          uint64_t v25 = *v24;
          *double v24 = 0;
          if (v25)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v25 + 2, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v25 + 2);
              (*(void (**)(unsigned int *))(*(void *)v25 + 8))(v25);
            }
          }
        }
        v24 += 3;
        --v23;
      }
      while (v23);
    }
    WTF::fastFree((WTF *)(v22 - 16), a2);
  }
  uint64_t v26 = *((void *)this + 7);
  if (v26) {
    WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::deallocateTable(v26, a2);
  }
  uint64_t v27 = *((void *)this + 6);
  if (v27) {
    WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::deallocateTable(v27, a2);
  }
  uint64_t v28 = *((void *)this + 5);
  if (v28) {
    WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::deallocateTable(v28, a2);
  }
  uint64_t v29 = *((void *)this + 4);
  if (v29)
  {
    uint64_t v30 = *(unsigned int *)(v29 - 4);
    if (v30)
    {
      int v31 = (unsigned int **)(v29 + 16);
      do
      {
        if (*(v31 - 2) != (unsigned int *)-1)
        {
          unsigned int v32 = *v31;
          *int v31 = 0;
          if (v32)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v32 + 15, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v32 + 15);
              (*(void (**)(unsigned int *))(*(void *)v32 + 72))(v32);
            }
          }
        }
        v31 += 3;
        --v30;
      }
      while (v30);
    }
    WTF::fastFree((WTF *)(v29 - 16), a2);
  }
  uint64_t v33 = *((void *)this + 3);
  if (v33) {
    WTF::fastFree((WTF *)(v33 - 16), a2);
  }
}

uint64_t WebCore::IDBActiveDOMObject::contextDestroyed(atomic_uchar *this)
{
  char v2 = 0;
  uint64_t v3 = this + 32;
  int v4 = 1;
  atomic_compare_exchange_strong_explicit(this + 32, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 32);
  }
  uint64_t result = WebCore::ContextDestructionObserver::contextDestroyed((WebCore::ContextDestructionObserver *)this);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    WTF::Thread::~Thread((WTF::Thread *)result);
    return (unsigned int *)WTF::fastFree(v1, v2);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    int v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 2) != -1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5)
        {
          if (atomic_fetch_add((atomic_uint *volatile)(v5 + 24), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)(v5 + 24));
            unsigned int v6 = (bmalloc::api *)MEMORY[0x199731B20]();
            bmalloc::api::isoDeallocate(v6, v7);
          }
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

_DWORD *IPC::ArgumentCoder<std::tuple<WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::String const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode(a1, *(void *)a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, *(uint64_t **)(a2 + 8));
  int v4 = *(uint64_t **)(a2 + 16);

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DigitalCredentialsCoordinatorProxy::RequestDigitalCredential,WTF::CompletionHandler<void ()(WebCore::ExceptionData &&)>>(WTF::CompletionHandler<void ()(WebCore::ExceptionData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E7A08;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DigitalCredentialsCoordinatorProxy::RequestDigitalCredential,WTF::CompletionHandler<void ()(WebCore::ExceptionData &&)>>(WTF::CompletionHandler<void ()(WebCore::ExceptionData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E7A08;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DigitalCredentialsCoordinatorProxy::RequestDigitalCredential,WTF::CompletionHandler<void ()(WebCore::ExceptionData &&)>>(WTF::CompletionHandler<void ()(WebCore::ExceptionData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<WebCore::ExceptionData>(a2, (uint64_t)v14);
    if (v16)
    {
      uint64_t v12 = v15;
      v11[0] = v14[0];
      char v13 = 1;
      uint64_t v4 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v4 + 16))(v4, v11);
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
      if (v13)
      {
        uint64_t result = v12;
        uint64_t v12 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      uint64_t v8 = *a2;
      uint64_t v9 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v10 = a2[3];
      if (v10 && v9) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
      }
      return IPC::Connection::cancelReply<Messages::DigitalCredentialsCoordinatorProxy::RequestDigitalCredential,WTF::CompletionHandler<void ()(WebCore::ExceptionData &&)>>(v2);
    }
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::DigitalCredentialsCoordinatorProxy::RequestDigitalCredential,WTF::CompletionHandler<void ()(WebCore::ExceptionData &&)>>(v7);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::DigitalCredentialsCoordinatorProxy::RequestDigitalCredential,WTF::CompletionHandler<void ()(WebCore::ExceptionData &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  uint64_t v5 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DigitalCredentialsCoordinatorProxy::Cancel,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E7A30;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DigitalCredentialsCoordinatorProxy::Cancel,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E7A30;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DigitalCredentialsCoordinatorProxy::Cancel,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>::destruct(*(_DWORD **)a1, (_DWORD **)(*(void *)a1 + 8 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_DWORD *WTF::VectorDestructor<true,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>::destruct(_DWORD *result, _DWORD **a2)
{
  if (result != (_DWORD *)a2)
  {
    uint64_t v3 = (_DWORD **)result;
    do
    {
      uint64_t result = *v3;
      atomic_uchar *v3 = 0;
      if (result)
      {
        if (result[6] == 1) {
          uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 16))(result);
        }
        else {
          --result[6];
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

void *WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v5;
    do
    {
      uint64_t v12 = (uint64_t *)(v4 + 24 * v9);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = (void *)(v15 + 24 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (*v23);
          unsigned int v24 = v22;
          uint64_t v25 = (void *)(v15 + 24 * v22 + 8);
          WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v8);
          uint64_t v27 = *v23;
          *uint64_t v23 = 0;
          if (v27)
          {
            if (*(_DWORD *)(v27 + 28) == 2)
            {
              if ((*(_WORD *)(v27 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v27);
              }
            }
            else
            {
              *(_DWORD *)(v27 + 28) -= 2;
            }
          }
          uint64_t v28 = *v12;
          uint64_t *v12 = 0;
          *uint64_t v23 = v28;
          uint64_t v29 = v4 + 24 * v9;
          *uint64_t v25 = 0;
          v25[1] = 0;
          uint64_t v30 = *(void *)(v29 + 8);
          v29 += 8;
          *(void *)uint64_t v29 = 0;
          *uint64_t v25 = v30;
          LODWORD(v28) = *(_DWORD *)(v29 + 8);
          *(_DWORD *)(v29 + 8) = 0;
          uint64_t v31 = v15 + 24 * v24;
          *(_DWORD *)(v31 + 16) = v28;
          LODWORD(v28) = *(_DWORD *)(v29 + 12);
          *(_DWORD *)(v29 + 12) = 0;
          *(_DWORD *)(v31 + 20) = v28;
          WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, v26);
          uint64_t v32 = *v12;
          uint64_t *v12 = 0;
          if (v32)
          {
            if (*(_DWORD *)(v32 + 28) == 2)
            {
              if ((*(_WORD *)(v32 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v32);
              }
            }
            else
            {
              *(_DWORD *)(v32 + 28) -= 2;
            }
          }
          if (v12 == a3) {
            uint64_t v10 = v23;
          }
        }
        else
        {
          WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 24 * v9 + 8, v8);
          uint64_t v14 = *v12;
          uint64_t *v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)(v14 + 28) == 2)
            {
              if ((*(_WORD *)(v14 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v14);
              }
            }
            else
            {
              *(_DWORD *)(v14 + 28) -= 2;
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::GenericHashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>::assignToEmpty<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *a1;
  *a1 = v3;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaKeySystemRequest&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  uint64_t v9 = *(void *)a1;
  ++*(_DWORD *)(a2 + 24);
  *(void *)(v9 + 8 * v8) = a2;
  *(_DWORD *)(a1 + 12) = v8 + 1;
  return 1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          uint64_t v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = (_DWORD *)v26[1];
          v26[1] = 0;
          if (v27)
          {
            if (v27[6] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v27 + 16))(v27);
            }
            else {
              --v27[6];
            }
          }
          *uint64_t v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(_DWORD **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30)
          {
            if (v30[6] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v30 + 16))(v30);
            }
            else {
              --v30[6];
            }
          }
          if (v13 == a3) {
            uint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          int v16 = *(_DWORD **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16)
          {
            if (v16[6] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v16 + 16))(v16);
            }
            else {
              --v16[6];
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1) {
    int v4 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  }
  else {
    int v4 = 0;
  }
  if (v4 == a2)
  {
    *a3 = 0;
    return a1;
  }
  uint64_t v5 = a2[1];
  if (v5)
  {
    a2[1] = 0;
    uint64_t v3 = *a1;
  }
  *a3 = v5;
  if (v3)
  {
    uint64_t v6 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v6 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    uint64_t v6 = 0;
  }
  if (v6 != a2) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, a2);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (uint64_t *)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>::customDeleteBucket(a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

_DWORD *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>::customDeleteBucket(void *a1)
{
  uint64_t result = (_DWORD *)a1[1];
  *a1 = -1;
  a1[1] = 0;
  if (result)
  {
    if (result[6] == 1) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 16))();
    }
    else {
      --result[6];
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 - 8);
  unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  unsigned int v7 = (uint64_t *)(a1 + 24 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v9 = 1;
    while (v8)
    {
      unsigned int v6 = (v6 + v9) & v2;
      unsigned int v7 = (uint64_t *)(a1 + 24 * v6);
      uint64_t v8 = *v7;
      ++v9;
      if (*v7 == a2) {
        return v7;
      }
    }
    return (uint64_t *)(a1 + 24 * *(unsigned int *)(a1 - 4));
  }
  return v7;
}

void *WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::remove(uint64_t *a1, uint64_t *a2)
{
  WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>::customDeleteBucket(a2);
  uint64_t result = (void *)WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 1), v4);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v6 = *a1;
  if (*a1) {
    int v7 = *(_DWORD *)(v6 - 12) - 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(v6 - 12) = v7;
  uint64_t v8 = *a1;
  if (*a1)
  {
    unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
    unsigned int v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
    {
      return WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::rehash(a1, v10 >> 1, 0);
    }
  }
  return result;
}

void *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin(void **a1)
{
  uint64_t result = *a1;
  if (!result) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)result - 1);
  unint64_t v3 = &result[5 * v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[5 * v2];
  }
  if (v2)
  {
    uint64_t v4 = 40 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 5;
      v4 -= 40;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::WeakHashMapIteratorBase(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  uint64_t v5 = *a2;
  if (*a2)
  {
    unsigned int v6 = *(_DWORD *)(v5 - 4);
    uint64_t v7 = v5 + 40 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    unsigned int v6 = 0;
  }
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v5 + 40 * v6;
  *(_DWORD *)(a1 + 40) = 0;
  WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::skipEmptyBuckets((void *)a1);
  return a1;
}

void *WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::skipEmptyBuckets(void *result)
{
  uint64_t v1 = result[3];
  uint64_t v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(void *)(*(void *)v2 + 8))
  {
    v2 += 40;
    result[1] = v2;
    uint64_t v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(void *)v2 + 1) <= 1)
      {
        v2 += 40;
        result[1] = v2;
        if (v2 == v3)
        {
          uint64_t v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

void *WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = (void *)(*(void *)(a1 + 8) + 40);
  *(void *)(a1 + 8) = v3;
  while (v3 != v2 && (unint64_t)(*v3 + 1) <= 1)
  {
    v3 += 5;
    *(void *)(a1 + 8) = v3;
  }
  ++*(_DWORD *)(a1 + 40);
  uint64_t result = WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::skipEmptyBuckets((void *)a1);
  ++*(_DWORD *)(*(void *)a1 + 8);
  return result;
}

atomic_uint *WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::makeKeyImpl<WebKit::WebPage>@<X0>(uint64_t a1@<X0>, atomic_uint **a2@<X8>)
{
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  uint64_t result = *(atomic_uint **)(a1 + 24);
  atomic_fetch_add(result, 1u);
  atomic_fetch_add(result, 1u);
  *a2 = result;
  if (result && atomic_fetch_add(result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    return (atomic_uint *)WTF::fastFree((WTF *)result, v4);
  }
  return result;
}

BOOL WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)a1;
  if (*(void *)a1)
  {
    int v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
    {
      BOOL v9 = 0;
      goto LABEL_21;
    }
    int v5 = 0;
    unsigned int v6 = v4 - 1;
    do
    {
      uint64_t v7 = v6;
      uint64_t v8 = (unsigned int **)(v3 + 40 * v6);
      if ((unint64_t)*v8 + 1 >= 2 && !*((void *)*v8 + 1))
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v8, a2);
        ++v5;
      }
      --v6;
    }
    while (v7);
    uint64_t v3 = *(void *)a1;
    BOOL v9 = v5 != 0;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      uint64_t v10 = *(void *)a1;
      if (*(void *)a1) {
        int v11 = *(_DWORD *)(v10 - 12);
      }
      else {
        int v11 = 0;
      }
      *(_DWORD *)(v10 - 12) = v11 - v5;
      uint64_t v3 = *(void *)a1;
    }
    if (v3)
    {
      unsigned int v12 = *(_DWORD *)(v3 - 4);
      uint64_t v13 = *(unsigned int *)(v3 - 12);
      if (v12 >= 9 && 6 * (int)v13 < v12)
      {
        unsigned int v18 = (v13 - 1) | ((v13 - 1) >> 1) | (((v13 - 1) | ((v13 - 1) >> 1)) >> 2);
        unsigned int v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
        unint64_t v20 = (v19 | HIWORD(v19)) + 1;
        if (v20 > 0x400)
        {
          if (v20 > 2 * v13) {
            goto LABEL_32;
          }
        }
        else if (3 * v20 > 4 * v13)
        {
LABEL_30:
          double v21 = (double)v13;
          double v22 = (double)v20;
          double v23 = 0.604166667;
          goto LABEL_33;
        }
        LODWORD(v20) = 2 * v20;
        if (v20 <= 0x400) {
          goto LABEL_30;
        }
LABEL_32:
        double v21 = (double)v13;
        double v22 = (double)v20;
        double v23 = 0.416666667;
LABEL_33:
        if (v22 * v23 <= v21) {
          LODWORD(v20) = 2 * v20;
        }
        if (v20 <= 8) {
          unsigned int v24 = 8;
        }
        else {
          unsigned int v24 = v20;
        }
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v24, 0);
        uint64_t v3 = *(void *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          unsigned int v15 = 0;
          goto LABEL_25;
        }
LABEL_22:
        unsigned int v15 = *(_DWORD *)(v3 - 12);
        int v16 = 0x7FFFFFFF;
        if (v15 >= 0x7FFFFFFF) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
LABEL_21:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_22;
    }
  }
  else
  {
    BOOL v9 = 0;
  }
  unsigned int v15 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
  int v16 = v15;
LABEL_26:
  *(_DWORD *)(a1 + 12) = 2 * v16;
  return v9;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  uint64_t v10 = v8;
  uint64_t v11 = v8 + 16;
  if (a2) {
    bzero((void *)(v8 + 16), 40 * a2);
  }
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = (unsigned int **)(v5 + 40 * v12);
      if (*v14 != (unsigned int *)-1)
      {
        if (*v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            unsigned int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            unsigned int v16 = 0;
          }
          int v17 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash((void *)(v5 + 40 * v12));
          int v18 = 0;
          do
          {
            unsigned int v19 = v17 & v16;
            unint64_t v20 = (unsigned int **)(v15 + 40 * (v17 & v16));
            int v17 = ++v18 + (v17 & v16);
          }
          while (*v20);
          *unint64_t v20 = 0;
          double v21 = *v14;
          void *v14 = 0;
          *unint64_t v20 = v21;
          uint64_t v22 = v15 + 40 * v19;
          uint64_t v23 = v5 + 40 * v12;
          long long v24 = *(_OWORD *)(v23 + 8);
          *(_OWORD *)(v22 + 24) = *(_OWORD *)(v23 + 24);
          *(_OWORD *)(v22 + 8) = v24;
          uint64_t v25 = *v14;
          void *v14 = 0;
          if (v25 && atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v25);
            WTF::fastFree((WTF *)v25, v9);
          }
          if (v14 == a3) {
            uint64_t v13 = v20;
          }
        }
        else
        {
          void *v14 = 0;
        }
      }
      ++v12;
    }
    while (v12 != v6);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

uint64_t WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::inlineSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>@<X0>(uint64_t *a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  uint64_t result = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash(a2);
  uint64_t v11 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v13 = result & v9;
    uint64_t v14 = v8 + 40 * (result & v9);
    uint64_t v15 = *(unsigned int **)v14;
    if (*(void *)v14 != -1) {
      break;
    }
    uint64_t v11 = v8 + 40 * v13;
LABEL_10:
    uint64_t result = i + v13;
  }
  if (!v15)
  {
    if (v11)
    {
      *(void *)(v11 + 32) = 0;
      *(_OWORD *)uint64_t v11 = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v14 = v11;
    }
    uint64_t result = (uint64_t)WTF::GenericHashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>::assignToEmpty<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((unsigned int **)v14, a2);
    long long v28 = *((_OWORD *)a3 + 1);
    uint64_t v16 = *a3;
    *(unsigned char *)(v14 + 16) = *((unsigned char *)a3 + 8);
    *(void *)(v14 + 8) = v16;
    *(unsigned char *)(v14 + 32) = BYTE8(v28);
    *(void *)(v14 + 24) = v28;
    uint64_t v17 = *a1;
    if (*a1) {
      int v18 = *(_DWORD *)(v17 - 12) + 1;
    }
    else {
      int v18 = 1;
    }
    *(_DWORD *)(v17 - 12) = v18;
    uint64_t v21 = *a1;
    if (*a1) {
      int v22 = *(_DWORD *)(v21 - 12);
    }
    else {
      int v22 = 0;
    }
    uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
    unint64_t v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 <= 2 * v23)
      {
LABEL_23:
        uint64_t result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(a1, (unsigned int **)v14);
        uint64_t v14 = result;
        uint64_t v21 = *a1;
        if (*a1) {
          LODWORD(v24) = *(_DWORD *)(v21 - 4);
        }
        else {
          LODWORD(v24) = 0;
        }
      }
    }
    else if (3 * v24 <= 4 * v23)
    {
      goto LABEL_23;
    }
    *(void *)a4 = v14;
    *(void *)(a4 + 8) = v21 + 40 * v24;
    *(unsigned char *)(a4 + 16) = 1;
    return result;
  }
  if (v15 != *a2) {
    goto LABEL_10;
  }
  uint64_t v19 = *a1;
  if (*a1) {
    unsigned int v20 = *(_DWORD *)(v19 - 4);
  }
  else {
    unsigned int v20 = 0;
  }
  *(void *)a4 = v14;
  *(void *)(a4 + 8) = v19 + 40 * v20;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v25 = v8 + 40 * v13;
  uint64_t v26 = *a3;
  *(unsigned char *)(v25 + 16) = *((unsigned char *)a3 + 8);
  *(void *)(v25 + 8) = v26;
  uint64_t v27 = a3[2];
  *(unsigned char *)(v25 + 32) = *((unsigned char *)a3 + 24);
  *(void *)(v25 + 24) = v27;
  return result;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

_DWORD *WTF::Mapper<WTF::WeakHashSet<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::WebFrame&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map(_DWORD *result, void **a2)
{
  uint64_t v3 = result;
  if (*a2)
  {
    uint64_t v4 = *((unsigned int *)*a2 - 3);
    if (v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v4));
      v3[2] = v4;
      *(void *)uint64_t v3 = v5;
    }
  }
  uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  int v6 = (char *)result;
  uint64_t v8 = v7;
  if (*a2) {
    uint64_t v9 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  }
  else {
    uint64_t v9 = 0;
  }
  if ((_DWORD *)v9 != result)
  {
    do
    {
      uint64_t v10 = *(void *)(*(void *)v6 + 8);
      if (v10)
      {
        uint64_t result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v10 + 16), *(void *)(*(void *)v6 + 8));
        uint64_t v11 = *(atomic_uint **)(v10 + 16);
        if (v11) {
          atomic_fetch_add(v11, 1u);
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v12 = v3[3];
      *(void *)(*(void *)v3 + 8 * v12) = v11;
      v3[3] = v12 + 1;
      while (1)
      {
        v6 += 8;
        if (v6 == v8) {
          break;
        }
        if ((unint64_t)(*(void *)v6 + 1) > 1) {
          goto LABEL_16;
        }
      }
      int v6 = v8;
LABEL_16:
      ;
    }
    while (v6 != (char *)v9);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::enumerateFramesAndNamespaceObjects(WTF::Function<void ()(WebKit::WebFrame &,WebKit::WebExtensionAPINamespace &)> const&,WebCore::DOMWrapperWorld &)::$_0,void,WebKit::WebFrame &>::call(uint64_t result, WebKit::WebFrame *a2)
{
  uint64_t v2 = *((void *)a2 + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          uint64_t v7 = result;
          uint64_t v8 = *(void **)(*(void *)(v5 + 48) + 16);
          uint64_t result = (*(uint64_t (**)(void *))(*v8 + 1368))(v8);
          if ((result & 1) == 0)
          {
            if (*(void *)(v8[2] + 8))
            {
              uint64_t v9 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)a2 + 3) + 8) + 24) + 8)
                                          + 48)
                              + 16);
              uint64_t result = (*(uint64_t (**)(void *))(*v9 + 1368))(v9);
              uint64_t v10 = *(void *)(v9[2] + 8);
              uint64_t v11 = v10 ? v10 - 16 : 0;
              uint64_t v12 = *(void *)(v11 + 48);
              if (v12)
              {
                ++*(_DWORD *)v12;
                if (*(unsigned char *)(v12 + 1686)) {
                  unsigned int v13 = (const OpaqueJSContext *)WebKit::WebFrame::jsContextForServiceWorkerWorld((uint64_t)a2);
                }
                else {
                  unsigned int v13 = (const OpaqueJSContext *)WebKit::WebFrame::jsContextForWorld(a2, *(WebCore::DOMWrapperWorld **)(v7 + 8));
                }
                uint64_t v14 = v13;
                GlobalObject = JSContextGetGlobalObject(v13);
                uint64_t v16 = JSStringCreateWithUTF8CString("browser");
                PropertCGFloat y = JSObjectGetProperty(v14, GlobalObject, v16, 0);
                if (v16) {
                  JSStringRelease(v16);
                }
                if (Property)
                {
                  if (JSValueIsObject(v14, Property))
                  {
                    uint64_t v19 = WebKit::toWebExtensionAPINamespace(v14, Property, v18);
                    if (v19) {
                      goto LABEL_25;
                    }
                  }
                }
                unsigned int v20 = JSStringCreateWithUTF8CString("chrome");
                uint64_t v21 = JSObjectGetProperty(v14, GlobalObject, v20, 0);
                if (v20) {
                  JSStringRelease(v20);
                }
                if (v21)
                {
                  if (JSValueIsObject(v14, v21))
                  {
                    uint64_t v19 = WebKit::toWebExtensionAPINamespace(v14, v21, v22);
                    if (v19)
                    {
LABEL_25:
                      ++*((_DWORD *)v19 + 12);
                      (*(void (**)(void, WebKit::WebFrame *, WebKit::JSWebExtensionAPINamespace *))(***(void ***)(v7 + 16) + 16))(**(void **)(v7 + 16), a2, v19);
                      if (*((_DWORD *)v19 + 12) == 1) {
                        (*(void (**)(uint64_t))(*((void *)v19 + 5) + 8))((uint64_t)v19 + 40);
                      }
                      else {
                        --*((_DWORD *)v19 + 12);
                      }
                    }
                  }
                }
                return (uint64_t)WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v12);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

unsigned int **WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(unsigned int **result)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::WebExtensionContextProxy::~WebExtensionContextProxy(result - 2);
    return (unsigned int **)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      unsigned int v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unsigned int v19 = *((_DWORD *)v14 + 4);
          if (v19 >= 0x100) {
            unsigned int v20 = v19 >> 8;
          }
          else {
            unsigned int v20 = WTF::StringImpl::hashSlowCase(v14);
          }
          int v21 = 0;
          do
          {
            uint64_t v22 = v20 & v18;
            unsigned int v20 = ++v21 + v22;
          }
          while (*(void *)(v17 + 16 * v22));
          uint64_t v23 = v17 + 16 * v22;
          uint64_t v24 = *(void *)(v23 + 8);
          *(void *)(v23 + 8) = 0;
          if (v24)
          {
            WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v24 + 16));
            uint64_t v30 = *(WTF::StringImpl **)v23;
            *(void *)uint64_t v23 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2) {
                WTF::StringImpl::destroy(v30, v10);
              }
              else {
                *(_DWORD *)v30 -= 2;
              }
            }
          }
          else
          {
            *(void *)uint64_t v23 = 0;
          }
          uint64_t v25 = *v13;
          const OpaqueJSContext *v13 = 0;
          *(void *)uint64_t v23 = v25;
          uint64_t v26 = v6 + 16 * v11;
          uint64_t v27 = *(void *)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          *(void *)(v23 + 8) = v27;
          uint64_t v28 = *(void *)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          if (v28) {
            WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v28 + 16));
          }
          uint64_t v29 = *v13;
          const OpaqueJSContext *v13 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, v10);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v12 = v23;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(void *)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16)
          {
            WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v16 + 16));
            uint64_t v14 = *v13;
          }
          const OpaqueJSContext *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v10);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::add(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  unsigned int v5 = result;
  uint64_t v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a3;
  unint64_t v11 = ~(*a3 << 32) + *a3;
  unint64_t v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  unsigned int v14 = (v13 >> 31) ^ v13;
  for (int i = 1; ; ++i)
  {
    unsigned int v16 = v14 & v8;
    uint64_t v17 = (uint64_t *)(v6 + 8 * v16);
    uint64_t v18 = *v17;
    if (*v17 != -1) {
      break;
    }
    uint64_t v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    unsigned int v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      *uint64_t v9 = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v19 = *a3;
      *(_DWORD *)(v19 + 16) = *(_DWORD *)(*a3 + 16) + 1;
      *uint64_t v9 = v19;
      uint64_t v17 = v9;
    }
    else
    {
      ++*(_DWORD *)(v10 + 16);
      uint64_t *v17 = v10;
    }
    uint64_t v23 = *a2;
    if (*a2) {
      int v24 = *(_DWORD *)(v23 - 12) + 1;
    }
    else {
      int v24 = 1;
    }
    *(_DWORD *)(v23 - 12) = v24;
    uint64_t v25 = *a2;
    if (*a2) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_24:
        uint64_t result = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::expand(a2, v17);
        uint64_t v17 = result;
        uint64_t v25 = *a2;
        if (*a2) {
          unint64_t v28 = *(unsigned int *)(v25 - 4);
        }
        else {
          unint64_t v28 = 0;
        }
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_24;
    }
    uint64_t v22 = v25 + 8 * v28;
    char v21 = 1;
    goto LABEL_29;
  }
  if (v18 != v10) {
    goto LABEL_10;
  }
  if (v7) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(unsigned int *)(v6 - 4);
  }
  char v21 = 0;
  uint64_t v22 = v6 + 8 * v20;
LABEL_29:
  uint64_t *v5 = (uint64_t)v17;
  v5[1] = v22;
  *((unsigned char *)v5 + 16) = v21;
  return result;
}

void *WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = (uint64_t *)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 8 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          int v24 = (void *)(v15 + 8 * v22);
          *int v24 = 0;
          uint64_t v25 = *v13;
          uint64_t *v13 = 0;
          *int v24 = v25;
          uint64_t v26 = *v13;
          uint64_t *v13 = 0;
          if (v26) {
            WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v26 + 16));
          }
          if (v13 == a3) {
            unint64_t v12 = v24;
          }
        }
        else
        {
          uint64_t *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unsigned int **WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(unsigned int **result)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::WebExtensionControllerProxy::~WebExtensionControllerProxy(result - 2);
    return (unsigned int **)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(void *a1, void *a2)
{
  if (qword_1EB359E00) {
    int v2 = *(_DWORD *)(qword_1EB359E00 - 8);
  }
  else {
    int v2 = 0;
  }
  uint64_t v3 = (*a1 + ~(*a1 << 32)) ^ ((*a1 + ~(*a1 << 32)) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((unint64_t)(v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  int v7 = 1;
  do
  {
    unsigned int v8 = v6;
    uint64_t v9 = *(void *)(qword_1EB359E00 + 16 * v6);
    unsigned int v6 = (v6 + v7++) & v2;
  }
  while (v9);
  uint64_t v10 = (void *)(qword_1EB359E00 + 16 * v8);
  unint64_t v12 = v10 + 1;
  uint64_t v11 = (unsigned int *)v10[1];
  v10[1] = 0;
  if (v11 && atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11);
    unint64_t v17 = a1;
    uint64_t v15 = v10 + 1;
    int v16 = v10;
    WTF::fastFree((WTF *)v11, a2);
    unint64_t v12 = v15;
    uint64_t v10 = v16;
    a1 = v17;
  }
  *uint64_t v10 = *a1;
  uint64_t v13 = a1[1];
  a1[1] = 0;
  void *v12 = v13;
  return v10;
}

WTF *WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  int v6 = *(_DWORD *)(v3 - 8);
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100) {
    unsigned int v8 = v7 >> 8;
  }
  else {
    unsigned int v8 = WTF::StringImpl::hashSlowCase(*a2);
  }
  for (i = 0; ; unsigned int v8 = i + v10)
  {
    uint64_t v10 = v8 & v6;
    uint64_t result = *(WTF **)(v3 + 16 * v10);
    if (result != (WTF *)-1)
    {
      if (!result) {
        return result;
      }
      if (WTF::equal(result, *a2, a3)) {
        break;
      }
    }
    ++i;
  }
  return *(WTF **)(v3 + 16 * v10 + 8);
}

WebKit::WebFullScreenManager *WebKit::WebFullScreenManager::WebFullScreenManager(WebKit::WebFullScreenManager *this, CFTypeRef *a2)
{
  *((_DWORD *)this + 4) = 1;
  *((unsigned char *)this + 20) = 3;
  *(void *)this = &unk_1EE9E7A90;
  *((void *)this + 1) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  unint64_t v4 = (WTF::RunLoop *)CFRetain(a2[1]);
  *((void *)this + 9) = a2;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  unint64_t v5 = (WTF::RunLoop *)WTF::RunLoop::main(v4);
  int v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *int v6 = &unk_1EE9E7D18;
  v6[1] = WebKit::WebFullScreenManager::mainVideoElementTextRecognitionTimerFired;
  v6[2] = 0;
  v6[3] = this;
  WTF::RunLoop::TimerBase::TimerBase((WebKit::WebFullScreenManager *)((char *)this + 112), v5);
  *((void *)this + 14) = &unk_1EE9B3390;
  *((void *)this + 17) = v6;
  *((_WORD *)this + 72) = 0;
  *((unsigned char *)this + 146) = 0;
  uint64_t v7 = WebKit::WebPage::logger((WebKit::WebPage *)a2);
  atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
  unint64_t v8 = (unint64_t)a2[5] + ~((void)a2[5] << 32);
  unint64_t v9 = 9 * (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) ^ (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *((void *)this + 19) = v7;
  *((void *)this + 20) = (v10 >> 31) ^ v10;
  return this;
}

WebCore::RenderVideo *WebKit::WebFullScreenManager::mainVideoElementTextRecognitionTimerFired(WebCore::RenderVideo *this, uint64_t a2, const Node *a3)
{
  uint64_t v3 = *((void *)this + 10);
  if (v3)
  {
    uint64_t v4 = (uint64_t)this;
    unint64_t v5 = *(WebCore::Document **)(*(void *)(v3 + 48) + 8);
    this = (WebCore::RenderVideo *)*((void *)v5 + 254);
    if (!this) {
      this = (WebCore::RenderVideo *)WebCore::Document::ensureFullscreenManager(v5);
    }
    if (*((void *)this + 7))
    {
      this = (WebCore::RenderVideo *)WebKit::WebFullScreenManager::updateMainVideoElement((WebKit::WebFullScreenManager *)v4, a2, a3);
      uint64_t v6 = *(void *)(v4 + 104);
      if (v6)
      {
        uint64_t v7 = *(const WebCore::HTMLVideoElement **)(v6 + 8);
        if (v7)
        {
          if (*(unsigned char *)(v4 + 144))
          {
            WebKit::WebPage::cancelTextRecognitionForVideoInElementFullScreen(*(WebKit::WebPage **)(v4 + 72));
            uint64_t v7 = *(const WebCore::HTMLVideoElement **)(*(void *)(v4 + 104) + 8);
          }
          *(unsigned char *)(v4 + 144) = 1;
          unint64_t v8 = *(WebCore::RenderVideo **)(v4 + 72);
          return WebKit::WebPage::beginTextRecognitionForVideoInElementFullScreen(v8, v7);
        }
      }
    }
  }
  return this;
}

void WebKit::WebFullScreenManager::~WebFullScreenManager(unsigned int **this, WTF::StringImpl *a2)
{
  WebKit::WebFullScreenManager::invalidate((WebKit::WebFullScreenManager *)this, a2);
  uint64_t v3 = this[19];
  this[19] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  this[14] = (unsigned int *)&unk_1EE9B3390;
  uint64_t v4 = this[17];
  this[17] = 0;
  if (v4) {
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(this + 14));
  uint64_t v6 = this[13];
  this[13] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  uint64_t v7 = this[12];
  this[12] = 0;
  if (v7)
  {
    if (v7[7] == 2)
    {
      if ((*((_WORD *)v7 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
    }
    else
    {
      v7[7] -= 2;
    }
  }
  unint64_t v8 = this[11];
  this[11] = 0;
  if (v8) {
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v8, v5);
  }
  unint64_t v9 = this[10];
  this[10] = 0;
  if (v9)
  {
    if (v9[7] == 2)
    {
      if ((*((_WORD *)v9 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
      }
    }
    else
    {
      v9[7] -= 2;
    }
  }
  unint64_t v10 = this[9];
  this[9] = 0;
  if (v10) {
    CFRelease(*((CFTypeRef *)v10 + 1));
  }
  uint64_t v11 = this[1];
  if (v11)
  {
    *((void *)v11 + 1) = 0;
    unint64_t v12 = this[1];
    this[1] = 0;
    if (v12)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v5);
      }
    }
  }
  else
  {
    this[1] = 0;
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebFullScreenManager::~WebFullScreenManager(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebFullScreenManager::invalidate(WebKit::WebFullScreenManager *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 19);
  uint64_t v4 = *((void *)this + 20);
  v6[0] = "WebFullScreenManager";
  v6[1] = 21;
  v6[2] = "invalidate";
  v6[3] = v4;
  if (*(unsigned char *)(v3 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v6);
  }
  WebKit::WebFullScreenManager::clearElement((uint64_t)this, a2);
  v6[0] = 0;
  WebKit::WebFullScreenManager::setMainVideoElement((uint64_t)this, (WTF::StringImpl *)v6);
  return WTF::RunLoop::TimerBase::stop((WebKit::WebFullScreenManager *)((char *)this + 112));
}

uint64_t WebKit::WebFullScreenManager::clearElement(uint64_t this, WTF::StringImpl *a2)
{
  if (*(void *)(this + 80))
  {
    uint64_t v2 = this;
    WebKit::eventsToObserve((WebKit *)this, a2);
    uint64_t v3 = 8u;
    do
    {
      uint64_t v4 = *(void *)(v2 + 80);
      char v5 = 1;
      (*(void (**)(uint64_t, char *, uint64_t, char *))(*(void *)v4 + 32))(v4, &_MergedGlobals_107[v3], v2, &v5);
      v3 += 8;
    }
    while (v3 != 32);
    this = *(void *)(v2 + 80);
    *(void *)(v2 + 80) = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 28) == 2)
      {
        if ((*(_WORD *)(this + 34) & 0x400) == 0) {
          return WebCore::Node::removedLastRef((WebCore::Node *)this);
        }
      }
      else
      {
        *(_DWORD *)(this + 28) -= 2;
      }
    }
  }
  return this;
}

uint64_t WebKit::WebFullScreenManager::setMainVideoElement(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 104);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (*(void *)a2 == v5) {
    return result;
  }
  if ((_MergedGlobals_107[0] & 1) == 0)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v14 = *(void *)(StatusReg + 736);
    if (!v14 || (uint64_t v15 = *(WebCore::ThreadGlobalData **)(v14 + 96)) == 0)
    {
      uint64_t result = WebCore::threadGlobalDataSlow((WebCore *)result);
      uint64_t v15 = (WebCore::ThreadGlobalData *)result;
    }
    uint64_t v16 = *((void *)v15 + 5);
    if (!v16)
    {
      uint64_t result = WebCore::ThreadGlobalData::initializeEventNames(v15);
      uint64_t v16 = *((void *)v15 + 5);
    }
    unint64_t v17 = *(_DWORD **)(v16 + 1784);
    if (v17) {
      *v17 += 2;
    }
    uint64_t v35 = v17;
    uint64_t v18 = *(void *)(StatusReg + 736);
    if (!v18 || (unint64_t v19 = *(WebCore::ThreadGlobalData **)(v18 + 96)) == 0)
    {
      uint64_t result = WebCore::threadGlobalDataSlow((WebCore *)result);
      unint64_t v19 = (WebCore::ThreadGlobalData *)result;
    }
    uint64_t v20 = *((void *)v19 + 5);
    if (!v20)
    {
      uint64_t result = WebCore::ThreadGlobalData::initializeEventNames(v19);
      uint64_t v20 = *((void *)v19 + 5);
    }
    int v21 = *(_DWORD **)(v20 + 1776);
    if (v21) {
      *v21 += 2;
    }
    uint64_t v36 = v21;
    uint64_t v22 = *(void *)(StatusReg + 736);
    if (!v22 || (uint64_t v23 = *(WebCore::ThreadGlobalData **)(v22 + 96)) == 0)
    {
      uint64_t result = WebCore::threadGlobalDataSlow((WebCore *)result);
      uint64_t v23 = (WebCore::ThreadGlobalData *)result;
    }
    uint64_t v24 = *((void *)v23 + 5);
    if (!v24)
    {
      uint64_t result = WebCore::ThreadGlobalData::initializeEventNames(v23);
      uint64_t v24 = *((void *)v23 + 5);
    }
    uint64_t v25 = *(_DWORD **)(v24 + 1488);
    if (v25) {
      *v25 += 2;
    }
    int v37 = v25;
    uint64_t v26 = *(void *)(StatusReg + 736);
    if (!v26 || (uint64_t v27 = *(WebCore::ThreadGlobalData **)(v26 + 96)) == 0) {
      uint64_t v27 = (WebCore::ThreadGlobalData *)WebCore::threadGlobalDataSlow((WebCore *)result);
    }
    uint64_t v28 = *((void *)v27 + 5);
    if (!v28)
    {
      WebCore::ThreadGlobalData::initializeEventNames(v27);
      uint64_t v28 = *((void *)v27 + 5);
    }
    uint64_t v29 = *(_DWORD **)(v28 + 1440);
    if (v29) {
      *v29 += 2;
    }
    uint64_t v30 = 0;
    unsigned int v38 = v29;
    do
    {
      uint64_t v31 = &(&v35)[v30];
      long long v32 = *(_OWORD *)&(&v35)[v30];
      *uint64_t v31 = 0;
      v31[1] = 0;
      *(_OWORD *)&_MergedGlobals_107[v30 * 8 + 32] = v32;
      v30 += 2;
    }
    while (v30 != 4);
    for (uint64_t i = 3; i != -1; --i)
    {
      uint64_t v34 = (WTF::StringImpl *)(&v35)[i];
      (&v35)[i] = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, a2);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    _MergedGlobals_107[0] = 1;
    uint64_t v4 = *(void *)(v3 + 104);
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  if (v4)
  {
LABEL_7:
    if (*(void *)(v4 + 8))
    {
      for (uint64_t j = 0; j != 32; j += 8)
      {
        LOBYTE(v35) = 0;
        WebCore::HTMLMediaElement::removeEventListener();
      }
      WebKit::WebFullScreenManager::endTextRecognitionForMainVideoIfNeeded((WebKit::WebPage **)v3);
    }
  }
LABEL_11:
  uint64_t v7 = *(void *)a2;
  if (v7)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 304), v7);
    uint64_t v8 = *(void *)(v7 + 304);
    if (v8) {
      atomic_fetch_add((atomic_uint *volatile)v8, 1u);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t result = *(void *)(v3 + 104);
  *(void *)(v3 + 104) = v8;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      uint64_t result = WTF::fastFree((WTF *)result, a2);
    }
    uint64_t v8 = *(void *)(v3 + 104);
  }
  if (v8 && *(void *)(v8 + 8))
  {
    for (uint64_t k = 0; k != 32; k += 8)
    {
      ++*(_DWORD *)(v3 + 16);
      LOBYTE(v35) = 0;
      *(_WORD *)((char *)&v35 + 1) = 0;
      BYTE3(v35) = 0;
      uint64_t v36 = 0;
      WebCore::HTMLMediaElement::addEventListener();
      unint64_t v10 = v36;
      uint64_t v36 = 0;
      if (v10) {
        WTF::RefCounted<WebCore::AbortSignal>::deref(v10 + 6);
      }
      if (v3)
      {
        if (*(_DWORD *)(v3 + 16) == 1) {
          (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
        }
        else {
          --*(_DWORD *)(v3 + 16);
        }
      }
    }
    uint64_t v11 = *(void *)(v3 + 104);
    if (v11) {
      unint64_t v12 = *(WebCore::HTMLMediaElement **)(v11 + 8);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t result = WebCore::HTMLMediaElement::paused(v12);
    if (result) {
      return WTF::RunLoop::TimerBase::start();
    }
  }
  return result;
}

uint64_t WebKit::WebFullScreenManager::element(WebKit::WebFullScreenManager *this)
{
  return *((void *)this + 10);
}

uint64_t WebKit::WebFullScreenManager::videoControlsManagerDidChange(WebKit::WebFullScreenManager *this)
{
  uint64_t v2 = *((void *)this + 19);
  uint64_t v3 = *((void *)this + 20);
  v8[0] = "WebFullScreenManager";
  v8[1] = 21;
  v8[2] = "videoControlsManagerDidChange";
  v8[3] = v3;
  if (*(unsigned char *)(v2 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v8);
  }
  if (!*((void *)this + 10)) {
    return WebKit::WebFullScreenManager::setPIPStandbyElement(this, 0);
  }
  uint64_t v4 = WebKit::WebPage::playbackSessionManager(*((WebKit::WebPage **)this + 9));
  uint64_t v5 = WebKit::PlaybackSessionManager::currentPlaybackControlsElement(v4);
  if (!v5) {
    return WebKit::WebFullScreenManager::setPIPStandbyElement(this, 0);
  }
  uint64_t v6 = v5;
  if (*(void *)(*(void *)(v5 + 104) + 24) != *(void *)(*MEMORY[0x1E4FB6A48] + 24)) {
    return WebKit::WebFullScreenManager::setPIPStandbyElement(this, 0);
  }
  *(_DWORD *)(v5 + 28) += 2;
  uint64_t result = WebKit::WebFullScreenManager::setPIPStandbyElement(this, (WebCore::HTMLVideoElement *)v5);
  if (*(_DWORD *)(v6 + 28) == 2)
  {
    if ((*(_WORD *)(v6 + 34) & 0x400) == 0) {
      return WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
  }
  else
  {
    *(_DWORD *)(v6 + 28) -= 2;
  }
  return result;
}

uint64_t WebKit::WebFullScreenManager::setPIPStandbyElement(WebKit::WebFullScreenManager *this, WebCore::HTMLVideoElement *a2)
{
  uint64_t v2 = this;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t result = *((void *)this + 12);
  if ((WebCore::HTMLVideoElement *)result != a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = *((void *)v2 + 19);
    uint64_t v6 = *((void *)v2 + 20);
    v31[0] = "WebFullScreenManager";
    v31[1] = 21;
    void v31[2] = "setPIPStandbyElement";
    v31[3] = v6;
    if (*(unsigned char *)(v5 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v37, (WTF::Logger::LogSiteIdentifier *)v31);
      WTF::String::String((WTF::String *)&v36, "old element ");
      WTF::LogArgument<void const*>::toString();
      WTF::String::String((WTF::String *)&v34, ", new element ");
      WTF::LogArgument<void const*>::toString();
      v32[0] = v36;
      unsigned int v41 = v35;
      *(void *)buf = v37;
      uint64_t v39 = v33;
      int v40 = v34;
      uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v32, (uint64_t *)&v41, (uint64_t *)&v40, (uint64_t *)&v39, &v38);
      if (!v38)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v8 = v33;
      uint64_t v33 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      unint64_t v9 = v34;
      uint64_t v34 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v7);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      unint64_t v10 = v35;
      uint64_t v35 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v7);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      uint64_t v11 = v36;
      uint64_t v36 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v7);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      unint64_t v12 = v37;
      int v37 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v7);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
      uint64_t v13 = qword_1EB357E20;
      uint64_t v14 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB357E20, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        WTF::String::utf8();
        uint64_t v16 = v32[0] ? (char *)v32[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v14 = v32[0];
        v32[0] = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1) {
            uint64_t v14 = (WTF *)WTF::fastFree(v14, v15);
          }
          else {
            --*(_DWORD *)v14;
          }
        }
      }
      if (WebKit2LogFullscreen)
      {
        unint64_t v17 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v18 = *v17;
          if (v18) {
            break;
          }
          int v19 = *v17;
          atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v19, v18 | 1, memory_order_acquire, memory_order_acquire);
          if (v19 == v18)
          {
            uint64_t v30 = v2;
            uint64_t v20 = WTF::Logger::observers(v14);
            uint64_t v21 = *(unsigned int *)(v20 + 12);
            if (v21)
            {
              uint64_t v22 = *(uint64_t **)v20;
              uint64_t v23 = *(void *)v20 + 8 * v21;
              do
              {
                uint64_t v24 = *v22;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)v31);
                int v43 = 0;
                WTF::String::String((WTF::String *)v44, "old element ");
                uint64_t v44[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v44[6] = 0;
                WTF::String::String((WTF::String *)v45, ", new element ");
                v45[2] = 0;
                WTF::LogArgument<void const*>::toString();
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v32, (uint64_t)buf, 5uLL);
                (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v24 + 16))(v24, &WebKit2LogFullscreen, 0, v32);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v32, v25);
                for (uint64_t i = 72; i != -8; i -= 16)
                {
                  uint64_t v27 = *(WTF::StringImpl **)&buf[i];
                  *(void *)&buf[i] = 0;
                  if (v27)
                  {
                    if (*(_DWORD *)v27 == 2) {
                      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v15);
                    }
                    else {
                      *(_DWORD *)v27 -= 2;
                    }
                  }
                }
                ++v22;
              }
              while (v22 != (uint64_t *)v23);
            }
            int v28 = 1;
            atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
            uint64_t v2 = v30;
            if (v28 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      uint64_t v29 = v38;
      unsigned int v38 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v15);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
      uint64_t result = *((void *)v2 + 12);
    }
    if (result) {
      WebCore::HTMLVideoElement::setVideoFullscreenStandby((WebCore::HTMLVideoElement *)result);
    }
    if (v4) {
      *((_DWORD *)v4 + 7) += 2;
    }
    uint64_t result = *((void *)v2 + 12);
    *((void *)v2 + 12) = v4;
    if (result)
    {
      if (*(_DWORD *)(result + 28) == 2)
      {
        if ((*(_WORD *)(result + 34) & 0x400) == 0)
        {
          uint64_t result = WebCore::Node::removedLastRef((WebCore::Node *)result);
          uint64_t v4 = (WebCore::HTMLVideoElement *)*((void *)v2 + 12);
        }
      }
      else
      {
        *(_DWORD *)(result + 28) -= 2;
      }
    }
    if (v4) {
      return WebCore::HTMLVideoElement::setVideoFullscreenStandby(v4);
    }
  }
  return result;
}

uint64_t WebKit::WebFullScreenManager::supportsFullScreenForElement(WebKit::WebFullScreenManager *this, const WebCore::Element *a2, uint64_t a3)
{
  uint64_t result = WebCore::Page::isFullscreenManagerEnabled(*(WebCore::Page **)(*((void *)this + 9) + 48));
  if (result)
  {
    uint64_t v6 = *((void *)this + 9);
    return WebKit::InjectedBundlePageFullScreenClient::supportsFullScreen((WebKit::InjectedBundlePageFullScreenClient *)(v6 + 384), (WebKit::WebPage *)v6, a3);
  }
  return result;
}

void *WebKit::eventsToObserve(WebKit *this, WTF::StringImpl *a2)
{
  if ((byte_1EB359E11 & 1) == 0)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v4 = *(void *)(StatusReg + 736);
    if (!v4 || (uint64_t v5 = *(WebKit **)(v4 + 96)) == 0)
    {
      this = (WebKit *)WebCore::threadGlobalDataSlow(this);
      uint64_t v5 = this;
    }
    uint64_t v6 = *((void *)v5 + 5);
    if (!v6)
    {
      this = (WebKit *)WebCore::ThreadGlobalData::initializeEventNames(v5);
      uint64_t v6 = *((void *)v5 + 5);
    }
    uint64_t v7 = *(_DWORD **)(v6 + 1480);
    if (v7) {
      *v7 += 2;
    }
    v20[0] = v7;
    uint64_t v8 = *(void *)(StatusReg + 736);
    if (!v8 || (unint64_t v9 = *(WebKit **)(v8 + 96)) == 0)
    {
      this = (WebKit *)WebCore::threadGlobalDataSlow(this);
      unint64_t v9 = this;
    }
    uint64_t v10 = *((void *)v9 + 5);
    if (!v10)
    {
      this = (WebKit *)WebCore::ThreadGlobalData::initializeEventNames(v9);
      uint64_t v10 = *((void *)v9 + 5);
    }
    uint64_t v11 = *(_DWORD **)(v10 + 1440);
    if (v11) {
      *v11 += 2;
    }
    v20[1] = v11;
    uint64_t v12 = *(void *)(StatusReg + 736);
    if (!v12 || (uint64_t v13 = *(WebCore::ThreadGlobalData **)(v12 + 96)) == 0) {
      uint64_t v13 = (WebCore::ThreadGlobalData *)WebCore::threadGlobalDataSlow(this);
    }
    uint64_t v14 = *((void *)v13 + 5);
    if (!v14)
    {
      WebCore::ThreadGlobalData::initializeEventNames(v13);
      uint64_t v14 = *((void *)v13 + 5);
    }
    uint64_t v15 = *(_DWORD **)(v14 + 1128);
    if (v15) {
      *v15 += 2;
    }
    uint64_t v16 = 0;
    void v20[2] = v15;
    do
    {
      uint64_t v17 = v20[v16];
      v20[v16] = 0;
      *(void *)&_MergedGlobals_107[v16 * 8 + 8] = v17;
      ++v16;
    }
    while (v16 != 3);
    for (uint64_t i = 2; i != -1; --i)
    {
      int v19 = (WTF::StringImpl *)v20[i];
      v20[i] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, a2);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
    }
    byte_1EB359E11 = 1;
  }
  return &unk_1EB359E18;
}

WTF::StringImpl *WebKit::WebFullScreenManager::enterFullScreenForElement(WTF::StringImpl *this, WebCore::Element *a2, int a3)
{
  if (!a2) {
    return this;
  }
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((void *)this + 19);
  uint64_t v6 = *((void *)this + 20);
  *(void *)&long long v36 = "WebFullScreenManager";
  *((void *)&v36 + 1) = 21;
  int v37 = (WTF::StringImpl *)"enterFullScreenForElement";
  uint64_t v38 = v6;
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Element *))(*(void *)a2 + 104))(&v40, a2);
  uint64_t v9 = *((void *)a2 + 14);
  if (v9 && *(void *)(v9 + 24))
  {
    unsigned int v10 = *(_DWORD *)(v9 + 4);
    if (v10)
    {
      uint64_t v11 = *(void **)(v9 + 40);
      LODWORD(v12) = *(_DWORD *)(v9 + 52);
      if (!v12)
      {
LABEL_14:
        uint64_t v11 = 0;
LABEL_15:
        uint64_t v13 = (WTF::StringImpl **)(v11 + 1);
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v11 = (void *)(v9 + 32);
      LODWORD(v12) = v10 >> 5;
      if (!v12) {
        goto LABEL_14;
      }
    }
    uint64_t v14 = *MEMORY[0x1E4FB6898];
    uint64_t v12 = v12;
    while (1)
    {
      uint64_t v15 = *v11;
      if (*v11 == v14
        || *(void *)(v15 + 24) == *(void *)(v14 + 24) && *(void *)(v15 + 32) == *(void *)(v14 + 32))
      {
        goto LABEL_15;
      }
      v11 += 2;
      if (!--v12) {
        goto LABEL_14;
      }
    }
  }
  uint64_t v13 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
LABEL_16:
  if (*(unsigned char *)(v7 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [2],WTF::String,char [6],WTF::AtomString,char [3]>((WTF::Logger::LogSiteIdentifier *)&v36, &v40, v13);
  }
  uint64_t v16 = v40;
  int v40 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v8);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (*(WebCore::Element **)(v5 + 80) != a2)
  {
    WebKit::WebFullScreenManager::clearElement(v5, v8);
    *((_DWORD *)a2 + 7) += 2;
    uint64_t v17 = *(void *)(v5 + 80);
    *(void *)(v5 + 80) = a2;
    if (v17)
    {
      if (*(_DWORD *)(v17 + 28) == 2)
      {
        if ((*(_WORD *)(v17 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v17);
        }
      }
      else
      {
        *(_DWORD *)(v17 + 28) -= 2;
      }
    }
    WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unsigned int *)a2 + 4, (uint64_t)a2);
    int v19 = (atomic_uint *)(*((void *)a2 + 2) & 0xFFFFFFFFFFFFLL);
    if (v19) {
      atomic_fetch_add(v19, 1u);
    }
    uint64_t v20 = *(unsigned int **)(v5 + 88);
    *(void *)(v5 + 88) = v19;
    if (v20) {
      uint64_t v20 = WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v20, v18);
    }
    WebKit::eventsToObserve((WebKit *)v20, (WTF::StringImpl *)v18);
    uint64_t v21 = 8u;
    do
    {
      uint64_t v22 = *(void *)(v5 + 80);
      ++*(_DWORD *)(v5 + 16);
      int v40 = (WTF::StringImpl *)v5;
      LOBYTE(v36) = 1;
      *(_WORD *)((char *)&v36 + 1) = 0;
      BYTE3(v36) = 0;
      *((void *)&v36 + 1) = 0;
      (*(void (**)(uint64_t, char *, WTF::StringImpl **, long long *))(*(void *)v22 + 24))(v22, &_MergedGlobals_107[v21], &v40, &v36);
      uint64_t v23 = *((void *)&v36 + 1);
      *((void *)&v36 + 1) = 0;
      if (v23) {
        WTF::RefCounted<WebCore::AbortSignal>::deref((_DWORD *)(v23 + 24));
      }
      uint64_t v24 = v40;
      int v40 = 0;
      if (v24)
      {
        if (*((_DWORD *)v24 + 4) == 1) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v24 + 8))(v24);
        }
        else {
          --*((_DWORD *)v24 + 4);
        }
      }
      v21 += 8;
    }
    while (v21 != 32);
  }
  LOBYTE(v36) = 0;
  char v39 = 0;
  *(void *)((char *)&v36 + 4) = 0;
  int v37 = 0;
  LOBYTE(v38) = 0;
  uint64_t v25 = *((void *)WebKit::WebPage::videoPresentationManager(*(WebKit::WebPage **)(v5 + 72)) + 11);
  if (!v25 || !*(void *)(v25 + 8)) {
    goto LABEL_43;
  }
  uint64_t v26 = *(WebCore::Quirks **)(*(void *)(*(void *)(*(void *)(v5 + 80) + 48) + 8) + 720);
  if (!v26) {
    uint64_t v26 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(void *)(*(void *)(v5 + 80)
  }
                                                                                               + 48)
                                                                                   + 8));
  if ((WebCore::Quirks::blocksEnteringStandardFullscreenFromPictureInPictureQuirk(v26) & 1) == 0)
  {
LABEL_43:
    int v28 = WebKit::WebPage::playbackSessionManager(*(WebKit::WebPage **)(v5 + 72));
    uint64_t v29 = (WebCore::HTMLMediaElement *)WebKit::PlaybackSessionManager::currentPlaybackControlsElement(v28);
    if (v29) {
      WebCore::HTMLMediaElement::prepareForVideoFullscreenStandby(v29);
    }
    *(void *)(v5 + 24) = WebKit::screenRectOfContents(*(WebCore::Element **)(v5 + 80), v30);
    *(void *)(v5 + 32) = v31;
    WebKit::WebFullScreenManager::updateMainVideoElement((WebKit::WebFullScreenManager *)v5, v31, v32);
    WebKit::WebPage::addReasonsToDisallowLayoutViewportHeightExpansion(*(IPC::Encoder **)(v5 + 72), 1);
    uint64_t v33 = *(void *)(v5 + 72);
    uint64_t v34 = *(WebCore::Quirks **)(*(void *)(*(void *)(*(void *)(v5 + 80) + 48) + 8) + 720);
    if (!v34) {
      uint64_t v34 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(void *)(*(void *)(v5 + 80)
    }
                                                                                                 + 48)
                                                                                     + 8));
    char v35 = WebCore::Quirks::blocksReturnToFullscreenFromPictureInPictureQuirk(v34);
    WebKit::InjectedBundlePageFullScreenClient::enterFullScreenForElement(v33 + 384, v33, a2, v35, a3, (WebKit::InjectedBundleNodeHandle *)&v36);
    if (a3 == 4)
    {
      WebKit::WebFullScreenManager::willEnterFullScreen((WebKit::WebFullScreenManager *)v5);
      WebKit::WebFullScreenManager::didEnterFullScreen((WebKit::WebFullScreenManager *)v5);
      *(unsigned char *)(v5 + 146) = 1;
    }
  }
  if (v39) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v38);
  }
  this = v37;
  int v37 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v27);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
  return this;
}

WebCore::Element *WebKit::screenRectOfContents(WebCore::Element *this, WebCore::Element *a2)
{
  if (this)
  {
    uint64_t v2 = this;
    uint64_t v3 = *((void *)this + 9);
    if ((v3 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(unsigned char *)((v3 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0) {
        goto LABEL_18;
      }
      if ((*(unsigned char *)((v3 & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) != 0
        && *(void *)(WebCore::RenderObject::enclosingLayer((WebCore::RenderObject *)(v3 & 0xFFFFFFFFFFFFLL)) + 256))
      {
        uint64_t v4 = *((void *)v2 + 9);
        if ((v4 & 0xFFFFFFFFFFFFLL) != 0 && (*(unsigned char *)((v4 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19901BAA4);
        }
        uint64_t v5 = WebCore::RenderObject::enclosingLayer((WebCore::RenderObject *)(v4 & 0xFFFFFFFFFFFFLL));
        uint64_t v6 = WebCore::RenderLayerBacking::compositedBounds(*(WebCore::RenderLayerBacking **)(v5 + 256));
        *(float *)&long long v17 = (float)(int)v6 * 0.015625;
        *((float *)&v17 + 1) = (float)SHIDWORD(v6) * 0.015625;
        *((float *)&v17 + 2) = *(float *)&v17 + (float)((float)v7 * 0.015625);
        *((float *)&v17 + 3) = *((float *)&v17 + 1);
        *(float *)&long long v18 = *((float *)&v17 + 2);
        *((float *)&v18 + 1) = *((float *)&v17 + 1) + (float)((float)v8 * 0.015625);
        *((float *)&v18 + 2) = *(float *)&v17;
        *((float *)&v18 + 3) = *((float *)&v18 + 1);
        if ((*((void *)v2 + 9) & 0xFFFFFFFFFFFFLL) != 0
          && (*(unsigned char *)((*((void *)v2 + 9) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19901BAC4);
        }
        WebCore::RenderObject::localToContainerQuad();
        long long v17 = v16[0];
        long long v18 = v16[1];
        if ((*((void *)v2 + 9) & 0xFFFFFFFFFFFFLL) == 0
          || (*(unsigned char *)((*((void *)v2 + 9) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
        {
          uint64_t v9 = *(WebCore::ScrollView **)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)((*((void *)v2 + 9) & 0xFFFFFFFFFFFFLL) + 0x18)
                                                                                       + 8)
                                                                           + 48)
                                                               + 8)
                                                   + 1984)
                                       + 248);
          WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)&v17);
          *(void *)&v16[0] = __PAIR64__(v11, v10);
          *((void *)&v16[0] + 1) = __PAIR64__(v13, v12);
          *(void *)&v16[0] = WebCore::enclosingIntRect((WebCore *)v16, v14);
          *((void *)&v16[0] + 1) = v15;
          return (WebCore::Element *)WebCore::ScrollView::contentsToScreen(v9, (const WebCore::IntRect *)v16);
        }
LABEL_18:
        __break(0xC471u);
        JUMPOUT(0x19901BA84);
      }
    }
    return (WebCore::Element *)WebCore::Element::screenRect(v2);
  }
  return this;
}

uint64_t WebKit::WebFullScreenManager::updateMainVideoElement(WebKit::WebFullScreenManager *this, uint64_t a2, const Node *a3)
{
  uint64_t v4 = *((void *)this + 10);
  if (!v4)
  {
    uint64_t v27 = 0;
    return WebKit::WebFullScreenManager::setMainVideoElement((uint64_t)this, (WTF::StringImpl *)&v27);
  }
  if ((*(_WORD *)(v4 + 32) & 0x10) != 0
    && *(void *)(*(void *)(v4 + 104) + 24) == *(void *)(*MEMORY[0x1E4FB6A48] + 24))
  {
    *(_DWORD *)(v4 + 28) += 2;
    uint64_t v27 = v4;
    uint64_t result = WebKit::WebFullScreenManager::setMainVideoElement((uint64_t)this, (WTF::StringImpl *)&v27);
    uint64_t v27 = 0;
    uint64_t v6 = v4;
    goto LABEL_19;
  }
  uint64_t v27 = 0;
  int v7 = *(_DWORD *)(v4 + 24) + 1;
  *(_DWORD *)(v4 + 24) = v7;
  uint64_t v8 = *(void *)(v4 + 88);
  if (!v8)
  {
LABEL_16:
    uint64_t v6 = 0;
    int v12 = v7 + 1;
    *(_DWORD *)(v4 + 24) = v12;
    if (!v12) {
      goto LABEL_72;
    }
    goto LABEL_17;
  }
  uint64_t v9 = MEMORY[0x1E4FB6A48];
  while (1)
  {
    __int16 v10 = *(_WORD *)(v8 + 32);
    if ((v10 & 0x10) != 0 && *(void *)(*(void *)(v8 + 104) + 24) == *(void *)(*(void *)v9 + 24)) {
      break;
    }
    if ((v10 & 4) == 0 || (uint64_t AncestorSibling = *(void *)(v8 + 88)) == 0)
    {
      if (v8 == v4) {
        goto LABEL_15;
      }
      uint64_t AncestorSibling = *(void *)(v8 + 64);
      if (!AncestorSibling) {
        uint64_t AncestorSibling = WebCore::NodeTraversal::nextAncestorSibling((WebCore::NodeTraversal *)v8, (const Node *)v4, a3);
      }
    }
    uint64_t v8 = AncestorSibling;
    if (!AncestorSibling)
    {
LABEL_15:
      int v7 = *(_DWORD *)(v4 + 24);
      goto LABEL_16;
    }
  }
  uint64_t v6 = 0;
  ++*(_DWORD *)(v4 + 24);
  ++*(_DWORD *)(v8 + 24);
  float v13 = 0.0;
  float v14 = 0.0;
LABEL_24:
  uint64_t v15 = v8;
  WebCore::Element::boundingAbsoluteRectWithoutLayout(&v28, (WebCore::Element *)v8);
  uint64_t v17 = v28;
  if (v31) {
    BOOL v18 = v28 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18)
  {
    float v19 = v13;
    float v20 = v14;
    goto LABEL_42;
  }
  float v20 = v29;
  if (v29 > 0.0 && ((float v19 = v30, v30 > 0.0) ? (v21 = (float)(v29 * v30) > (float)(v13 * v14)) : (v21 = 0), v21))
  {
    *(_DWORD *)(v15 + 28) += 2;
    if (v6)
    {
      if (*(_DWORD *)(v6 + 28) == 2)
      {
        if ((*(_WORD *)(v6 + 34) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v6);
          if (!v31)
          {
            uint64_t v6 = v15;
            goto LABEL_42;
          }
          uint64_t v17 = v28;
          uint64_t v6 = v15;
          if (!v28) {
            goto LABEL_42;
          }
          goto LABEL_40;
        }
      }
      else
      {
        *(_DWORD *)(v6 + 28) -= 2;
      }
    }
    uint64_t v6 = v15;
  }
  else
  {
    float v20 = v14;
    float v19 = v13;
  }
LABEL_40:
  int v22 = *(_DWORD *)(v17 + 16);
  if (!v22) {
    goto LABEL_72;
  }
  *(_DWORD *)(v17 + 16) = v22 - 1;
LABEL_42:
  uint64_t v8 = *(void *)(v15 + 88);
  if (!v8
    && (v15 == v4
     || (uint64_t v8 = *(void *)(v15 + 64)) == 0
     && (uint64_t v8 = WebCore::NodeTraversal::nextAncestorSibling((WebCore::NodeTraversal *)v15, (const Node *)v4, v16)) == 0))
  {
LABEL_64:
    int v26 = *(_DWORD *)(v15 + 24);
    if (v26)
    {
      *(_DWORD *)(v15 + 24) = v26 - 1;
      goto LABEL_66;
    }
LABEL_71:
    __break(0xC471u);
    JUMPOUT(0x19901BE7CLL);
  }
  do
  {
    __int16 v23 = *(_WORD *)(v8 + 32);
    if ((v23 & 0x10) != 0 && *(void *)(*(void *)(v8 + 104) + 24) == *(void *)(*(void *)v9 + 24))
    {
      ++*(_DWORD *)(v8 + 24);
      float v13 = v19;
      float v14 = v20;
      if (v15)
      {
        int v25 = *(_DWORD *)(v15 + 24);
        if (!v25) {
          goto LABEL_71;
        }
        *(_DWORD *)(v15 + 24) = v25 - 1;
        float v13 = v19;
        float v14 = v20;
      }
      goto LABEL_24;
    }
    if ((v23 & 4) == 0 || (uint64_t v24 = *(void *)(v8 + 88)) == 0)
    {
      if (v8 == v4) {
        break;
      }
      uint64_t v24 = *(void *)(v8 + 64);
      if (!v24) {
        uint64_t v24 = WebCore::NodeTraversal::nextAncestorSibling((WebCore::NodeTraversal *)v8, (const Node *)v4, v16);
      }
    }
    uint64_t v8 = v24;
  }
  while (v24);
  if (v15) {
    goto LABEL_64;
  }
LABEL_66:
  uint64_t v27 = v6;
  int v12 = *(_DWORD *)(v4 + 24);
  if (!v12)
  {
LABEL_72:
    __break(0xC471u);
    JUMPOUT(0x19901BE28);
  }
LABEL_17:
  *(_DWORD *)(v4 + 24) = v12 - 1;
  if (v12 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19901BE5CLL);
  }
  *(_DWORD *)(v4 + 24) = v12 - 2;
  uint64_t result = WebKit::WebFullScreenManager::setMainVideoElement((uint64_t)this, (WTF::StringImpl *)&v27);
  uint64_t v27 = 0;
  if (v6)
  {
LABEL_19:
    if (*(_DWORD *)(v6 + 28) == 2)
    {
      if ((*(_WORD *)(v6 + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)v6);
      }
    }
    else
    {
      *(_DWORD *)(v6 + 28) -= 2;
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebFullScreenManager::willEnterFullScreen(WebKit::WebFullScreenManager *this)
{
  uint64_t result = (IPC::Encoder *)*((void *)this + 10);
  if (!result) {
    return result;
  }
  uint64_t v4 = *((void *)this + 19);
  uint64_t v3 = *((void *)this + 20);
  v29[0] = (uint64_t)"WebFullScreenManager";
  v29[1] = 21;
  v29[2] = (uint64_t)"willEnterFullScreen";
  void v29[3] = v3;
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(void *)result + 104))(&v28);
  uint64_t v6 = *(void *)(*((void *)this + 10) + 112);
  if (v6 && *(void *)(v6 + 24))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 4);
    if (v7)
    {
      uint64_t v8 = *(void **)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if (!v9)
      {
LABEL_14:
        uint64_t v8 = 0;
LABEL_15:
        __int16 v10 = (WTF::StringImpl **)(v8 + 1);
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v8 = (void *)(v6 + 32);
      LODWORD(v9) = v7 >> 5;
      if (!v9) {
        goto LABEL_14;
      }
    }
    uint64_t v11 = *MEMORY[0x1E4FB6898];
    uint64_t v9 = v9;
    while (1)
    {
      uint64_t v12 = *v8;
      if (*v8 == v11
        || *(void *)(v12 + 24) == *(void *)(v11 + 24) && *(void *)(v12 + 32) == *(void *)(v11 + 32))
      {
        goto LABEL_15;
      }
      v8 += 2;
      if (!--v9) {
        goto LABEL_14;
      }
    }
  }
  __int16 v10 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
LABEL_16:
  if (*(unsigned char *)(v4 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [2],WTF::String,char [6],WTF::AtomString,char [3]>((WTF::Logger::LogSiteIdentifier *)v29, &v28, v10);
  }
  float v13 = v28;
  uint64_t v28 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v5);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = *((void *)this + 9);
  if (!*(unsigned char *)(v14 + 568))
  {
    *(unsigned char *)(v14 + 568) = 1;
    WebKit::WebPage::resetViewportDefaultConfiguration((WebKit::WebPage *)v14, *(WebKit::WebFrame **)(v14 + 88), *(unsigned __int8 *)(v14 + 1688));
  }
  uint64_t v15 = *((void *)this + 10);
  if (!*(void *)(*(void *)(*(void *)(v15 + 48) + 8) + 2032)) {
    WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*(void *)(v15 + 48) + 8));
  }
  if ((WebCore::FullscreenManager::willEnterFullscreen() & 1) == 0) {
    return (IPC::Encoder *)WebKit::WebFullScreenManager::close((uint64_t)this);
  }
  uint64_t v16 = *((void *)this + 10);
  if (!v16) {
    return (IPC::Encoder *)WebKit::WebFullScreenManager::close((uint64_t)this);
  }
  uint64_t v17 = *(void *)(*(void *)(v16 + 48) + 8);
  *(_DWORD *)(v17 + 28) += 2;
  v29[0] = v17;
  WebCore::Document::updateLayout();
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v29);
  *((void *)this + 5) = WebKit::screenRectOfContents(*((WebCore::Element **)this + 10), v18);
  *((void *)this + 6) = v19;
  return WebKit::InjectedBundlePageFullScreenClient::beganEnterFullScreen((WebKit::InjectedBundlePageFullScreenClient *)(*((void *)this + 9) + 384), *((WebKit::WebPage **)this + 9), (WebKit::WebFullScreenManager *)((char *)this + 24), (WebKit::WebFullScreenManager *)((char *)this + 40), v20, v21, v22, v23, v24, v25, v26, v27);
}

uint64_t WebKit::WebFullScreenManager::didEnterFullScreen(WebKit::WebFullScreenManager *this)
{
  uint64_t result = *((void *)this + 10);
  if (!result) {
    return result;
  }
  uint64_t v4 = *((void *)this + 19);
  uint64_t v3 = *((void *)this + 20);
  v21[0] = "WebFullScreenManager";
  v21[1] = 21;
  void v21[2] = "didEnterFullScreen";
  v21[3] = v3;
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(void *)result + 104))(&v20);
  uint64_t v6 = *(void *)(*((void *)this + 10) + 112);
  if (v6 && *(void *)(v6 + 24))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 4);
    if (v7)
    {
      uint64_t v8 = *(void **)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if (!v9)
      {
LABEL_14:
        uint64_t v8 = 0;
LABEL_15:
        __int16 v10 = (WTF::StringImpl **)(v8 + 1);
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v8 = (void *)(v6 + 32);
      LODWORD(v9) = v7 >> 5;
      if (!v9) {
        goto LABEL_14;
      }
    }
    uint64_t v11 = *MEMORY[0x1E4FB6898];
    uint64_t v9 = v9;
    while (1)
    {
      uint64_t v12 = *v8;
      if (*v8 == v11
        || *(void *)(v12 + 24) == *(void *)(v11 + 24) && *(void *)(v12 + 32) == *(void *)(v11 + 32))
      {
        goto LABEL_15;
      }
      v8 += 2;
      if (!--v9) {
        goto LABEL_14;
      }
    }
  }
  __int16 v10 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
LABEL_16:
  if (*(unsigned char *)(v4 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [2],WTF::String,char [6],WTF::AtomString,char [3]>((WTF::Logger::LogSiteIdentifier *)v21, &v20, v10);
  }
  float v13 = v20;
  __n128 v20 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v5);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = *(WebCore::FullscreenManager **)(*(void *)(*(void *)(*((void *)this + 10) + 48) + 8) + 2032);
  if (!v14) {
    uint64_t v14 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*(void *)(*((void *)this + 10) + 48) + 8));
  }
  if ((WebCore::FullscreenManager::didEnterFullscreen(v14) & 1) == 0) {
    return WebKit::WebFullScreenManager::close((uint64_t)this);
  }
  uint64_t v15 = WebKit::WebPage::playbackSessionManager(*((WebKit::WebPage **)this + 9));
  uint64_t v16 = WebKit::PlaybackSessionManager::currentPlaybackControlsElement(v15);
  if (v16)
  {
    if (*(void *)(*(void *)(v16 + 104) + 24) == *(void *)(*MEMORY[0x1E4FB6A48] + 24)) {
      uint64_t v17 = (WebCore::HTMLVideoElement *)v16;
    }
    else {
      uint64_t v17 = 0;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  WebKit::WebFullScreenManager::setPIPStandbyElement(this, v17);
  return WebKit::WebFullScreenManager::updateMainVideoElement(this, v18, v19);
}

uint64_t WebKit::WebFullScreenManager::exitFullScreenForElement(WebKit::WebFullScreenManager *this, WebCore::Element *a2)
{
  v42[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 19);
  if (a2)
  {
    uint64_t v5 = *((void *)this + 20);
    *(void *)&long long buf = "WebFullScreenManager";
    *((void *)&buf + 1) = 21;
    unsigned int v41 = "exitFullScreenForElement";
    v42[0] = v5;
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Element *))(*(void *)a2 + 104))(v35, a2);
    uint64_t v7 = *((void *)a2 + 14);
    if (!v7 || !*(void *)(v7 + 24))
    {
      uint64_t v11 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
      goto LABEL_21;
    }
    unsigned int v8 = *(_DWORD *)(v7 + 4);
    if (v8)
    {
      uint64_t v9 = *(void **)(v7 + 40);
      LODWORD(v10) = *(_DWORD *)(v7 + 52);
      if (!v10)
      {
LABEL_19:
        uint64_t v9 = 0;
LABEL_20:
        uint64_t v11 = (WTF::StringImpl **)(v9 + 1);
LABEL_21:
        if (*(unsigned char *)(v4 + 12)) {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [2],WTF::String,char [6],WTF::AtomString,char [3]>((WTF::Logger::LogSiteIdentifier *)&buf, v35, v11);
        }
        uint64_t v18 = v35[0];
        v35[0] = 0;
        if (!v18) {
          goto LABEL_57;
        }
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v9 = (void *)(v7 + 32);
      LODWORD(v10) = v8 >> 5;
      if (!v10) {
        goto LABEL_19;
      }
    }
    uint64_t v16 = *MEMORY[0x1E4FB6898];
    uint64_t v10 = v10;
    while (1)
    {
      uint64_t v17 = *v9;
      if (*v9 == v16
        || *(void *)(v17 + 24) == *(void *)(v16 + 24) && *(void *)(v17 + 32) == *(void *)(v16 + 32))
      {
        goto LABEL_20;
      }
      v9 += 2;
      if (!--v10) {
        goto LABEL_19;
      }
    }
  }
  uint64_t v12 = (WTF::StringImpl *)*((void *)this + 20);
  v35[0] = (WTF::StringImpl *)"WebFullScreenManager";
  v35[1] = (WTF::StringImpl *)21;
  void v35[2] = (WTF::StringImpl *)"exitFullScreenForElement";
  v35[3] = v12;
  if (*(unsigned char *)(v4 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v38, (WTF::Logger::LogSiteIdentifier *)v35);
    WTF::String::String((WTF::String *)&v37, "null");
    *(void *)&long long buf = v38;
    v36[0] = v37;
    uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)v36, &v39);
    if (!v39)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v15 = v37;
    int v37 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v19 = v38;
    uint64_t v38 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v14);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    __n128 v20 = qword_1EB357E20;
    __n128 v21 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB357E20, OS_LOG_TYPE_DEFAULT);
    if (v21)
    {
      WTF::String::utf8();
      __n128 v22 = v36[0] ? (char *)v36[0] + 16 : 0;
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v22;
      _os_log_impl(&dword_1985F2000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      __n128 v21 = v36[0];
      v36[0] = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1) {
          __n128 v21 = (WTF *)WTF::fastFree(v21, v6);
        }
        else {
          --*(_DWORD *)v21;
        }
      }
    }
    if (WebKit2LogFullscreen)
    {
      __n128 v23 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v24 = *v23;
        if (v24) {
          break;
        }
        int v25 = *v23;
        atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v25, v24 | 1, memory_order_acquire, memory_order_acquire);
        if (v25 == v24)
        {
          uint64_t v26 = WTF::Logger::observers(v21);
          uint64_t v27 = *(unsigned int *)(v26 + 12);
          if (v27)
          {
            uint64_t v28 = *(uint64_t **)v26;
            uint64_t v29 = *(void *)v26 + 8 * v27;
            do
            {
              uint64_t v30 = *v28;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)v35);
              LODWORD(v41) = 0;
              WTF::String::String((WTF::String *)v42, "null");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v36, (uint64_t)&buf, 2uLL);
              (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v30 + 16))(v30, &WebKit2LogFullscreen, 0, v36);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v36, v31);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v33 = *(WTF::StringImpl **)((char *)&buf + i);
                *(void *)((char *)&buf + i) = 0;
                if (v33)
                {
                  if (*(_DWORD *)v33 == 2) {
                    WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v6);
                  }
                  else {
                    *(_DWORD *)v33 -= 2;
                  }
                }
              }
              ++v28;
            }
            while (v28 != (uint64_t *)v29);
          }
          int v34 = 1;
          atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
          if (v34 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v18 = v39;
    char v39 = 0;
    if (v18)
    {
LABEL_54:
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v6);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
LABEL_57:
  WebKit::WebPage::removeReasonsToDisallowLayoutViewportHeightExpansion(*((void *)this + 9), 1);
  WebKit::InjectedBundlePageFullScreenClient::exitFullScreenForElement((WebKit::InjectedBundlePageFullScreenClient *)(*((void *)this + 9) + 384), *((WebKit::WebPage **)this + 9), a2, *((unsigned char *)this + 146));
  if (*((unsigned char *)this + 146))
  {
    WebKit::WebFullScreenManager::willExitFullScreen(this);
    WebKit::WebFullScreenManager::didExitFullScreen(this);
    *((unsigned char *)this + 146) = 0;
  }
  *(void *)&long long buf = 0;
  return WebKit::WebFullScreenManager::setMainVideoElement((uint64_t)this, (WTF::StringImpl *)&buf);
}

IPC::Encoder *WebKit::WebFullScreenManager::willExitFullScreen(WebKit::WebFullScreenManager *this)
{
  uint64_t result = (IPC::Encoder *)*((void *)this + 10);
  if (!result) {
    return result;
  }
  uint64_t v4 = *((void *)this + 19);
  uint64_t v3 = *((void *)this + 20);
  v26[0] = "WebFullScreenManager";
  v26[1] = 21;
  void v26[2] = "willExitFullScreen";
  v26[3] = v3;
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(void *)result + 104))(&v25);
  uint64_t v6 = *(void *)(*((void *)this + 10) + 112);
  if (v6 && *(void *)(v6 + 24))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 4);
    if (v7)
    {
      unsigned int v8 = *(void **)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if (!v9)
      {
LABEL_14:
        unsigned int v8 = 0;
LABEL_15:
        uint64_t v10 = (WTF::StringImpl **)(v8 + 1);
        goto LABEL_16;
      }
    }
    else
    {
      unsigned int v8 = (void *)(v6 + 32);
      LODWORD(v9) = v7 >> 5;
      if (!v9) {
        goto LABEL_14;
      }
    }
    uint64_t v11 = *MEMORY[0x1E4FB6898];
    uint64_t v9 = v9;
    while (1)
    {
      uint64_t v12 = *v8;
      if (*v8 == v11
        || *(void *)(v12 + 24) == *(void *)(v11 + 24) && *(void *)(v12 + 32) == *(void *)(v11 + 32))
      {
        goto LABEL_15;
      }
      v8 += 2;
      if (!--v9) {
        goto LABEL_14;
      }
    }
  }
  uint64_t v10 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
LABEL_16:
  if (*(unsigned char *)(v4 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [2],WTF::String,char [6],WTF::AtomString,char [3]>((WTF::Logger::LogSiteIdentifier *)v26, &v25, v10);
  }
  float v13 = v25;
  int v25 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v5);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebKit::WebFullScreenManager::setPIPStandbyElement(this, 0);
  *((void *)this + 5) = WebKit::screenRectOfContents(*((WebCore::Element **)this + 10), v14);
  *((void *)this + 6) = v15;
  uint64_t v16 = *(WebCore::FullscreenManager **)(*(void *)(*(void *)(*((void *)this + 10) + 48) + 8) + 2032);
  if (!v16) {
    uint64_t v16 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*(void *)(*((void *)this + 10) + 48) + 8));
  }
  if (WebCore::FullscreenManager::willExitFullscreen(v16)) {
    return WebKit::InjectedBundlePageFullScreenClient::beganExitFullScreen((WebKit::InjectedBundlePageFullScreenClient *)(*((void *)this + 9) + 384), *((WebKit::WebPage **)this + 9), (WebKit::WebFullScreenManager *)((char *)this + 40), (WebKit::WebFullScreenManager *)((char *)this + 24), v17, v18, v19, v20, v21, v22, v23, v24);
  }
  else {
    return (IPC::Encoder *)WebKit::WebFullScreenManager::close((uint64_t)this);
  }
}

uint64_t WebKit::WebFullScreenManager::didExitFullScreen(WebKit::WebFullScreenManager *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (*(unsigned char *)(v2 + 568))
  {
    *(unsigned char *)(v2 + 568) = 0;
    WebKit::WebPage::resetViewportDefaultConfiguration((WebKit::WebPage *)v2, *(WebKit::WebFrame **)(v2 + 88), *(unsigned __int8 *)(v2 + 1688));
  }
  uint64_t result = *((void *)this + 10);
  if (result)
  {
    uint64_t v5 = *((void *)this + 19);
    uint64_t v4 = *((void *)this + 20);
    uint64_t v28 = "WebFullScreenManager";
    uint64_t v29 = 21;
    uint64_t v30 = "didExitFullScreen";
    uint64_t v31 = v4;
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(void *)result + 104))(&v27);
    uint64_t v7 = *(void *)(*((void *)this + 10) + 112);
    if (!v7 || !*(void *)(v7 + 24))
    {
      uint64_t v11 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
LABEL_18:
      if (*(unsigned char *)(v5 + 12)) {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [2],WTF::String,char [6],WTF::AtomString,char [3]>((WTF::Logger::LogSiteIdentifier *)&v28, &v27, v11);
      }
      uint64_t v14 = v27;
      uint64_t v27 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v6);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      WebCore::Page::setFullscreenInsets();
      WebCore::Page::setFullscreenAutoHideDuration();
      uint64_t v15 = *((void *)this + 10);
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      do
      {
        uint64_t v16 = *(WebCore::FullscreenManager **)(*(void *)(*(void *)(v15 + 48) + 8) + 2032);
        if (!v16) {
          uint64_t v16 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*(void *)(v15 + 48) + 8));
        }
        if (WebCore::FullscreenManager::fullscreenElement(v16) != v15) {
          break;
        }
        uint64_t v17 = HIDWORD(v29);
        if (HIDWORD(v29) == v29)
        {
          WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>((uint64_t)&v28, v15);
        }
        else
        {
          __n128 v18 = v28;
          *(_DWORD *)(v15 + 28) += 2;
          *(void *)&v18[8 * v17] = v15;
          HIDWORD(v29) = v17 + 1;
        }
        uint64_t v19 = WebCore::Document::parentDocument(*(WebCore::Document **)(*(void *)(v15 + 48) + 8));
        if (!v19) {
          break;
        }
        __n128 v20 = (WebCore::Document *)v19;
        __n128 v21 = *(WebCore::FullscreenManager **)(v19 + 2032);
        if (!v21) {
          __n128 v21 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(v20);
        }
        uint64_t v15 = WebCore::FullscreenManager::fullscreenElement(v21);
      }
      while (v15);
      __n128 v22 = *(WebCore::FullscreenManager **)(*(void *)(*(void *)(*((void *)this + 10) + 48) + 8) + 2032);
      if (!v22) {
        __n128 v22 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*(void *)(*((void *)this + 10) + 48) + 8));
      }
      WebCore::FullscreenManager::didExitFullscreen(v22);
      while (HIDWORD(v29))
      {
        uint64_t v24 = HIDWORD(v29) - 1;
        int v25 = *(WTF::StringImpl **)&v28[8 * v24];
        *(void *)&v28[8 * v24] = 0;
        uint64_t v27 = v25;
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v28[8 * v24]);
        HIDWORD(v29) = v24;
        WebCore::Element::scrollIntoViewIfNotVisible(v27);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v27);
      }
      WebKit::WebFullScreenManager::clearElement((uint64_t)this, v23);
      return WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v26);
    }
    unsigned int v8 = *(_DWORD *)(v7 + 4);
    if (v8)
    {
      uint64_t v9 = *(void **)(v7 + 40);
      LODWORD(v10) = *(_DWORD *)(v7 + 52);
      if (!v10)
      {
LABEL_16:
        uint64_t v9 = 0;
LABEL_17:
        uint64_t v11 = (WTF::StringImpl **)(v9 + 1);
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v9 = (void *)(v7 + 32);
      LODWORD(v10) = v8 >> 5;
      if (!v10) {
        goto LABEL_16;
      }
    }
    uint64_t v12 = *MEMORY[0x1E4FB6898];
    uint64_t v10 = v10;
    while (1)
    {
      uint64_t v13 = *v9;
      if (*v9 == v12
        || *(void *)(v13 + 24) == *(void *)(v12 + 24) && *(void *)(v13 + 32) == *(void *)(v12 + 32))
      {
        goto LABEL_17;
      }
      v9 += 2;
      if (!--v10) {
        goto LABEL_16;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebFullScreenManager::close(uint64_t this)
{
  if (!*(unsigned char *)(this + 145))
  {
    uint64_t v1 = this;
    *(unsigned char *)(this + 145) = 1;
    uint64_t v2 = *(void *)(this + 152);
    uint64_t v3 = *(void *)(this + 160);
    v6[0] = "WebFullScreenManager";
    v6[1] = 21;
    v6[2] = "close";
    v6[3] = v3;
    if (*(unsigned char *)(v2 + 12)) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v6);
    }
    uint64_t v4 = *(void *)(v1 + 72);
    WebKit::WebPage::removeReasonsToDisallowLayoutViewportHeightExpansion(v4, 1);
    WebKit::InjectedBundlePageFullScreenClient::closeFullScreen((WebKit::InjectedBundlePageFullScreenClient *)(v4 + 384), (WebKit::WebPage *)v4);
    this = WebKit::WebFullScreenManager::invalidate((WebKit::WebFullScreenManager *)v1, v5);
    *(unsigned char *)(v1 + 145) = 0;
  }
  return this;
}

uint64_t WebKit::WebFullScreenManager::setAnimatingFullScreen(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(void *)(this + 80);
  if (v2)
  {
    uint64_t v4 = *(WebCore::Document **)(*(void *)(v2 + 48) + 8);
    uint64_t v5 = *((void *)v4 + 254);
    if (!v5) {
      uint64_t v5 = WebCore::Document::ensureFullscreenManager(v4);
    }
    return MEMORY[0x1F416EDB0](v5, a2);
  }
  return this;
}

WTF::StringImpl *WebKit::WebFullScreenManager::requestRestoreFullScreen(WTF::StringImpl *result)
{
  v45[2] = *MEMORY[0x1E4F143B8];
  if (*((void *)result + 10)) {
    return result;
  }
  uint64_t v1 = *((void *)result + 11);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      *(_DWORD *)(v2 + 28) += 2;
      uint64_t v4 = *((void *)result + 19);
      uint64_t v3 = *((void *)result + 20);
      *(void *)&long long buf = "WebFullScreenManager";
      *((void *)&buf + 1) = 21;
      double v44 = "requestRestoreFullScreen";
      v45[0] = v3;
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(void *)v2 + 104))(v36, v2);
      uint64_t v6 = *(void *)(v2 + 112);
      if (!v6 || !*(void *)(v6 + 24))
      {
        uint64_t v10 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
LABEL_23:
        if (*(unsigned char *)(v4 + 12)) {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [2],WTF::String,char [6],WTF::AtomString,char [3]>((WTF::Logger::LogSiteIdentifier *)&buf, v36, v10);
        }
        uint64_t v17 = v36[0];
        v36[0] = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy(v17, v5);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
        char v41 = 0;
        char v42 = 0;
        WebCore::UserGestureIndicator::UserGestureIndicator();
        if (!*(void *)(*(void *)(*(void *)(v2 + 48) + 8) + 2032)) {
          WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*(void *)(v2 + 48) + 8));
        }
        *(_DWORD *)(v2 + 28) += 2;
        v36[0] = (WTF::StringImpl *)v2;
        v37[0] = 0;
        WebCore::FullscreenManager::requestFullscreenForElement();
        __n128 v18 = v37[0];
        v37[0] = 0;
        if (v18)
        {
          if (*((_DWORD *)v18 + 4) == 1) {
            (*(void (**)(WTF *))(*(void *)v18 + 16))(v18);
          }
          else {
            --*((_DWORD *)v18 + 4);
          }
        }
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v36);
        uint64_t result = (WTF::StringImpl *)MEMORY[0x1997355E0](&buf);
        if (*(_DWORD *)(v2 + 28) == 2)
        {
          if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
            return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v2);
          }
        }
        else
        {
          *(_DWORD *)(v2 + 28) -= 2;
        }
        return result;
      }
      unsigned int v7 = *(_DWORD *)(v6 + 4);
      if (v7)
      {
        unsigned int v8 = *(void **)(v6 + 40);
        LODWORD(v9) = *(_DWORD *)(v6 + 52);
        if (!v9)
        {
LABEL_21:
          unsigned int v8 = 0;
LABEL_22:
          uint64_t v10 = (WTF::StringImpl **)(v8 + 1);
          goto LABEL_23;
        }
      }
      else
      {
        unsigned int v8 = (void *)(v6 + 32);
        LODWORD(v9) = v7 >> 5;
        if (!v9) {
          goto LABEL_21;
        }
      }
      uint64_t v15 = *MEMORY[0x1E4FB6898];
      uint64_t v9 = v9;
      while (1)
      {
        uint64_t v16 = *v8;
        if (*v8 == v15
          || *(void *)(v16 + 24) == *(void *)(v15 + 24) && *(void *)(v16 + 32) == *(void *)(v15 + 32))
        {
          goto LABEL_22;
        }
        v8 += 2;
        if (!--v9) {
          goto LABEL_21;
        }
      }
    }
  }
  uint64_t v11 = *((void *)result + 19);
  uint64_t v12 = (WTF::StringImpl *)*((void *)result + 20);
  v36[0] = (WTF::StringImpl *)"WebFullScreenManager";
  v36[1] = (WTF::StringImpl *)21;
  v36[2] = (WTF::StringImpl *)"requestRestoreFullScreen";
  v36[3] = v12;
  if (*(unsigned char *)(v11 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v39, (WTF::Logger::LogSiteIdentifier *)v36);
    WTF::String::String((WTF::String *)&v38, "no element to restore");
    *(void *)&long long buf = v39;
    v37[0] = v38;
    uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)v37, &v40);
    if (v40)
    {
      uint64_t v14 = v38;
      uint64_t v38 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      uint64_t v19 = v39;
      char v39 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v13);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      __n128 v20 = qword_1EB357E20;
      __n128 v21 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB357E20, OS_LOG_TYPE_DEFAULT);
      if (v21)
      {
        WTF::String::utf8();
        __n128 v23 = v37[0] ? (char *)v37[0] + 16 : 0;
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = v23;
        _os_log_impl(&dword_1985F2000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        __n128 v21 = v37[0];
        v37[0] = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1) {
            __n128 v21 = (WTF *)WTF::fastFree(v21, v22);
          }
          else {
            --*(_DWORD *)v21;
          }
        }
      }
      if (WebKit2LogFullscreen)
      {
        uint64_t v24 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v25 = *v24;
          if (v25) {
            break;
          }
          int v26 = *v24;
          atomic_compare_exchange_strong_explicit(v24, (unsigned __int8 *)&v26, v25 | 1, memory_order_acquire, memory_order_acquire);
          if (v26 == v25)
          {
            uint64_t v27 = WTF::Logger::observers(v21);
            uint64_t v28 = *(unsigned int *)(v27 + 12);
            if (v28)
            {
              uint64_t v29 = *(uint64_t **)v27;
              uint64_t v30 = *(void *)v27 + 8 * v28;
              do
              {
                uint64_t v31 = *v29;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)v36);
                LODWORD(v44) = 0;
                WTF::String::String((WTF::String *)v45, "no element to restore");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v37, (uint64_t)&buf, 2uLL);
                (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v31 + 16))(v31, &WebKit2LogFullscreen, 0, v37);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v32);
                for (uint64_t i = 24; i != -8; i -= 16)
                {
                  int v34 = *(WTF::StringImpl **)((char *)&buf + i);
                  *(void *)((char *)&buf + i) = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2) {
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v22);
                    }
                    else {
                      *(_DWORD *)v34 -= 2;
                    }
                  }
                }
                ++v29;
              }
              while (v29 != (uint64_t *)v30);
            }
            int v35 = 1;
            atomic_compare_exchange_strong_explicit(v24, (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
            if (v35 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      uint64_t result = v40;
      int v40 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v22);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebKit::WebFullScreenManager::requestExitFullScreen(WebKit::WebFullScreenManager *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (!v2)
  {
    uint64_t v10 = *((void *)this + 19);
    uint64_t v11 = *((void *)this + 20);
    uint64_t v13 = "WebFullScreenManager";
    uint64_t v14 = 21;
    uint64_t v15 = "requestExitFullScreen";
    uint64_t v16 = v11;
    if (*(unsigned char *)(v10 + 12)) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [32]>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)&v13, "no element, closing");
    }
    return WebKit::WebFullScreenManager::close((uint64_t)this);
  }
  uint64_t v3 = (WebCore::Document *)WebCore::Document::topDocument(*(WebCore::Document **)(*(void *)(v2 + 48) + 8));
  uint64_t v4 = (WebCore::FullscreenManager *)*((void *)v3 + 254);
  if (!v4) {
    uint64_t v4 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(v3);
  }
  uint64_t v5 = WebCore::FullscreenManager::fullscreenElement(v4);
  uint64_t v6 = *((void *)this + 19);
  if (!v5)
  {
    uint64_t v12 = *((void *)this + 20);
    uint64_t v13 = "WebFullScreenManager";
    uint64_t v14 = 21;
    uint64_t v15 = "requestExitFullScreen";
    uint64_t v16 = v12;
    if (*(unsigned char *)(v6 + 12)) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [32]>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)&v13, "top document not in fullscreen, closing");
    }
    return WebKit::WebFullScreenManager::close((uint64_t)this);
  }
  uint64_t v7 = *((void *)this + 20);
  uint64_t v13 = "WebFullScreenManager";
  uint64_t v14 = 21;
  uint64_t v15 = "requestExitFullScreen";
  uint64_t v16 = v7;
  if (*(unsigned char *)(v6 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)&v13);
  }
  unsigned int v8 = *(WebCore::FullscreenManager **)(*(void *)(*(void *)(*((void *)this + 10) + 48) + 8) + 2032);
  if (!v8) {
    unsigned int v8 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*(void *)(*((void *)this + 10) + 48) + 8));
  }
  return WebCore::FullscreenManager::cancelFullscreen(v8);
}

uint64_t WebKit::WebFullScreenManager::restoreScrollPosition(uint64_t this)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(this + 72) + 48) + 160);
  if (v1) {
    BOOL v2 = *(unsigned char *)(v1 + 144) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    WebCore::LocalFrameView::forceLayout(*(WebCore::LocalFrameView **)(v1 + 288));
    return WebCore::LocalFrameView::setScrollPosition();
  }
  return this;
}

uint64_t WebKit::WebFullScreenManager::handleEvent(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 32);
  if (v3 && (*(unsigned char *)(v3 + 22) & 2) != 0 && (*(_WORD *)(v3 + 32) & 8) != 0)
  {
    uint64_t v4 = (WebKit::WebFullScreenManager *)this;
    int v5 = *(_DWORD *)(v3 + 28);
    *(_DWORD *)(v3 + 28) = v5 + 2;
    uint64_t v6 = *(void *)(this + 80);
    if (v6)
    {
      uint64_t v7 = *(void *)(*(void *)(v6 + 48) + 8);
      *(_DWORD *)(v7 + 28) += 2;
      uint64_t v10 = v7;
      if (v7 + 208 == a2)
      {
        uint64_t v8 = *(void *)(v7 + 2032);
        if (!v8) {
          uint64_t v8 = WebCore::Document::ensureFullscreenManager((WebCore::Document *)v7);
        }
        if (*(void *)(v8 + 56))
        {
          if (v3 == *((void *)v4 + 10))
          {
            WebKit::WebFullScreenManager::updateMainVideoElement(v4, a2, (const Node *)a3);
          }
          else
          {
            uint64_t v9 = *((void *)v4 + 13);
            if (v9 && v3 == *(void *)(v9 + 8))
            {
              if ((*(_WORD *)(v3 + 32) & 0x10) == 0
                || *(void *)(*(void *)(v3 + 104) + 24) != *(void *)(*MEMORY[0x1E4FB6A48] + 24))
              {
                this = 96;
                __break(0xC471u);
                return this;
              }
              if (WebCore::HTMLMediaElement::paused((WebCore::HTMLMediaElement *)v3)
                && (WebCore::HTMLMediaElement::seeking((WebCore::HTMLMediaElement *)v3) & 1) == 0)
              {
                WTF::RunLoop::TimerBase::start();
              }
              else
              {
                WebKit::WebFullScreenManager::endTextRecognitionForMainVideoIfNeeded((WebKit::WebPage **)v4);
              }
            }
          }
        }
      }
      this = (uint64_t)WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v10);
      int v5 = *(_DWORD *)(v3 + 28) - 2;
    }
    if (v5)
    {
      *(_DWORD *)(v3 + 28) = v5;
    }
    else if ((*(_WORD *)(v3 + 34) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
  }
  return this;
}

IPC::Encoder *WebKit::WebFullScreenManager::endTextRecognitionForMainVideoIfNeeded(WebKit::WebPage **this)
{
  uint64_t result = (IPC::Encoder *)WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(this + 14));
  if (*((unsigned char *)this + 144))
  {
    uint64_t result = WebKit::WebPage::cancelTextRecognitionForVideoInElementFullScreen(this[9]);
    *((unsigned char *)this + 144) = 0;
  }
  return result;
}

void WebKit::GPUProcessConnection::~GPUProcessConnection(WebKit::GPUProcessConnection *this)
{
  *(void *)this = &unk_1EE9E7AE8;
  BOOL v2 = (atomic_uchar *volatile **)((char *)this + 32);
  IPC::Connection::invalidate(*((void *)this + 4));
  uint64_t v4 = (WebKit::RemoteAudioSourceProviderManager *)*((void *)this + 17);
  if (v4) {
    WebKit::RemoteAudioSourceProviderManager::setConnection(v4, 0);
  }
  uint64_t v5 = *((void *)this + 23);
  if (v5) {
    WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(v5, v3);
  }
  uint64_t v6 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 16), v3);
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v7);
  }
  std::unique_ptr<WebKit::SampleBufferDisplayLayerManager>::reset[abi:sn180100]((WebKit::SampleBufferDisplayLayerManager **)this + 15, 0);
  uint64_t v9 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9 + 2);
    (*(void (**)(unsigned int *))(*(void *)v9 + 8))(v9);
  }
  IPC::MessageReceiverMap::~MessageReceiverMap((WebKit::GPUProcessConnection *)((char *)this + 40), v8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v2);
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v10);
}

{
  uint64_t v1;
  void *v2;
  uint64_t vars8;

  WebKit::GPUProcessConnection::~GPUProcessConnection(this);
  if (atomic_load((unsigned int *)(v1 + 16)))
  {
    *(_OWORD *)(v1 + 176) = 0u;
    *(_OWORD *)(v1 + 192) = 0u;
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)uint64_t v1 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

uint64_t WebKit::GPUProcessConnection::didBecomeUnresponsive(uint64_t this)
{
  {
    BOOL v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  if (*(void *)(WebKit::WebProcess::singleton(void)::process + 336) == this)
  {
    uint64_t v1 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
    uint64_t v3 = *(void *)(this + 56);
    uint64_t v4 = &v3;
    return IPC::Connection::send<Messages::WebProcessProxy::GPUProcessConnectionDidBecomeUnresponsive>(v1, &v4, 0, 0, 0);
  }
  return this;
}

uint64_t WebKit::GPUProcessConnection::waitForDidInitialize(WebKit::GPUProcessConnection *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 64)) {
    goto LABEL_2;
  }
  uint64_t v4 = *((void *)this + 4);
  WTF::ApproximateTime::now(this);
  IPC::Connection::waitForMessage((atomic_uchar *volatile **)v4, 0x39u, 0, 0, (uint64_t)buf, v5 + 3.0);
  int v6 = *(_DWORD *)&buf[8];
  if (*(_DWORD *)&buf[8])
  {
    if (*(_DWORD *)&buf[8] != 1) {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    int v7 = buf[0];
    goto LABEL_10;
  }
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)(v4 + 33));
  int v6 = buf[8];
  if (v8)
  {
    (*(void (**)(void, uint64_t, void))(**(void **)(v4 + 8) + 16))(*(void *)(v4 + 8), v4, *(void *)buf);
    int v7 = 0;
    int v6 = *(_DWORD *)&buf[8];
  }
  else
  {
    int v7 = 1;
  }
  if (v6 != -1) {
LABEL_10:
  }
    ((void (*)(char *, unsigned char *))off_1EE9E7D30[v6])(&v11, buf);
  if (!v7)
  {
LABEL_2:
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*((void *)this + 4) + 33));
    return v2 & 1;
  }
  uint64_t v9 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = IPC::errorAsString();
    *(_DWORD *)long long buf = 134218242;
    *(void *)&uint8_t buf[4] = this;
    __int16 v13 = 2082;
    uint64_t v14 = v10;
    _os_log_error_impl(&dword_1985F2000, v9, OS_LOG_TYPE_ERROR, "%p - GPUProcessConnection::waitForDidInitialize - failed, error:%{public}s", buf, 0x16u);
  }
  IPC::Connection::invalidate(*((void *)this + 4));
  uint64_t result = 0;
  *((unsigned char *)this + 64) = 1;
  return result;
}

atomic_uchar *WebKit::GPUProcessConnection::didClose(atomic_uchar *this, IPC::Connection *a2)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = this;
    _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "%p - GPUProcessConnection::didClose", buf, 0xCu);
  }
  WTF::Ref<WebKit::GPUProcessConnection,WTF::RawPtrTraits<WebKit::GPUProcessConnection>,WTF::DefaultRefDerefTraits<WebKit::GPUProcessConnection>>::Ref(&v62, (uint64_t)this);
  {
    int v61 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v61);
  }
  uint64_t result = (atomic_uchar *)WebKit::WebProcess::gpuProcessConnectionClosed((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process, v4);
  char v7 = 0;
  unsigned __int8 v8 = (atomic_uchar **)(this + 184);
  int v63 = 0;
  unint64_t v64 = 0;
  atomic_compare_exchange_strong_explicit(this + 200, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7) {
    uint64_t result = (atomic_uchar *)MEMORY[0x19972E8D0](this + 200);
  }
  *(_OWORD *)long long buf = 0uLL;
  if (!*v8)
  {
    unsigned int v15 = 0;
    LODWORD(v9) = 0;
LABEL_20:
    int v16 = 0;
    goto LABEL_21;
  }
  uint64_t v9 = *((unsigned int *)*v8 - 3);
  if (!v9)
  {
    unsigned int v15 = 0;
    goto LABEL_20;
  }
  if (v9 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  uint64_t v10 = (WTF *)WTF::fastMalloc((WTF *)(8 * v9));
  *(_DWORD *)&buf[8] = v9;
  *(void *)long long buf = v10;
  char v11 = *v8;
  if (*v8 && *((_DWORD *)v11 - 3))
  {
    uint64_t v12 = *((unsigned int *)v11 - 1);
    if (v12)
    {
      uint64_t v13 = 16 * v12;
      uint64_t v14 = *v8;
      while ((unint64_t)(*(void *)v14 + 1) <= 1)
      {
        v14 += 16;
        v13 -= 16;
        if (!v13) {
          goto LABEL_95;
        }
      }
    }
    else
    {
      uint64_t v14 = *v8;
    }
    char v48 = &v11[16 * v12];
    if (v48 == v14)
    {
LABEL_95:
      int v16 = 0;
      unsigned int v15 = 0;
    }
    else
    {
      int v16 = 0;
      uint64_t v49 = *(void *)v14;
      do
      {
        char v50 = 0;
        uint64_t v51 = *((void *)v14 + 1);
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v51, (unsigned __int8 *)&v50, 1u, memory_order_acquire, memory_order_acquire);
        if (v50)
        {
          uint64_t v58 = v49;
          MEMORY[0x19972E8D0](v51);
          uint64_t v49 = v58;
        }
        if (*(void *)(v51 + 24)) {
          ++*(void *)(v51 + 8);
        }
        else {
          uint64_t v49 = 0;
        }
        int v52 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v51, (unsigned __int8 *)&v52, 0, memory_order_release, memory_order_relaxed);
        if (v52 == 1)
        {
          if (!v49) {
            goto LABEL_90;
          }
        }
        else
        {
          uint64_t v59 = (WTF::Lock *)v51;
          uint64_t v60 = v49;
          WTF::Lock::unlockSlow(v59);
          uint64_t v49 = v60;
          if (!v60)
          {
LABEL_90:
            int v16 = 1;
            goto LABEL_91;
          }
        }
        uint64_t v65 = v49;
        LODWORD(v53) = *(_DWORD *)&buf[12];
        if (*(_DWORD *)&buf[12] == *(_DWORD *)&buf[8])
        {
          __int16 v54 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)buf, *(unsigned int *)&buf[12] + 1, (unint64_t)&v65);
          uint64_t v53 = *(unsigned int *)&buf[12];
          uint64_t v55 = *(void *)buf;
          uint64_t v56 = *v54;
          uint64_t *v54 = 0;
          *(void *)(v55 + 8 * v53) = v56;
        }
        else
        {
          uint64_t v65 = 0;
          *(void *)(*(void *)buf + 8 * *(unsigned int *)&buf[12]) = v49;
        }
        *(_DWORD *)&unsigned char buf[12] = v53 + 1;
        uint64_t v57 = v65;
        uint64_t v65 = 0;
        if (v57) {
          (*(void (**)(uint64_t))(*(void *)v57 + 24))(v57);
        }
        do
        {
LABEL_91:
          v14 += 16;
          if (v14 == v48) {
            goto LABEL_94;
          }
          uint64_t v49 = *(void *)v14;
        }
        while ((unint64_t)(*(void *)v14 + 1) <= 1);
      }
      while (v14 != v48);
LABEL_94:
      LODWORD(v9) = *(_DWORD *)&buf[8];
      unsigned int v15 = *(_DWORD *)&buf[12];
    }
    if (v9 <= v15) {
      goto LABEL_21;
    }
    uint64_t v10 = *(WTF **)buf;
    if (v15)
    {
      *(void *)long long buf = WTF::fastRealloc(*(WTF **)buf, (void *)(8 * v15));
      LODWORD(v9) = v15;
      goto LABEL_21;
    }
    if (!*(void *)buf)
    {
      unsigned int v15 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    int v16 = 0;
  }
  *(void *)long long buf = 0;
  *(_DWORD *)&buf[8] = 0;
  WTF::fastFree(v10, v6);
  unsigned int v15 = 0;
  LODWORD(v9) = 0;
LABEL_21:
  uint64_t v17 = v63;
  if (HIDWORD(v64))
  {
    uint64_t v18 = 8 * HIDWORD(v64);
    uint64_t v19 = v63;
    do
    {
      uint64_t v20 = *(void *)v19;
      *(void *)uint64_t v19 = 0;
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 24))(v20);
      }
      uint64_t v19 = (WTF *)((char *)v19 + 8);
      v18 -= 8;
    }
    while (v18);
  }
  if (v17) {
    WTF::fastFree(v17, v6);
  }
  __n128 v21 = *(WTF **)buf;
  *(_OWORD *)long long buf = 0uLL;
  int v63 = v21;
  unint64_t v64 = __PAIR64__(v15, v9);
  WTF::Vector<WTF::Ref<WebKit::GPUProcessConnection::Client,WTF::RawPtrTraits<WebKit::GPUProcessConnection::Client>,WTF::DefaultRefDerefTraits<WebKit::GPUProcessConnection::Client>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v6);
  __n128 v23 = *v8;
  if (!v16) {
    goto LABEL_52;
  }
  if (!v23) {
    goto LABEL_51;
  }
  int v24 = *((_DWORD *)v23 - 1);
  if (!v24)
  {
LABEL_50:
    *((_DWORD *)this + 48) = 0;
    goto LABEL_53;
  }
  int v25 = 0;
  unsigned int v26 = v24 - 1;
  do
  {
    uint64_t v27 = v26;
    uint64_t v28 = &v23[16 * v26];
    if ((unint64_t)(*(void *)v28 + 1) >= 2)
    {
      uint64_t v29 = &v23[16 * v26];
      uint64_t v31 = (atomic_uchar *)*((void *)v29 + 1);
      uint64_t v30 = (atomic_uchar **)(v29 + 8);
      if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v31))
      {
        *(void *)uint64_t v28 = -1;
        long long v32 = *v30;
        const char *v30 = 0;
        if (v32) {
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v32, v22);
        }
        ++v25;
      }
    }
    --v26;
  }
  while (v27);
  __n128 v23 = *v8;
  if (v25)
  {
    *((_DWORD *)v23 - 4) += v25;
    uint64_t v33 = *v8;
    if (*v8) {
      int v34 = *((_DWORD *)v33 - 3);
    }
    else {
      int v34 = 0;
    }
    *((_DWORD *)v33 - 3) = v34 - v25;
    __n128 v23 = *v8;
  }
  if (!v23)
  {
LABEL_51:
    unsigned int v37 = 0;
    *((_DWORD *)this + 48) = 0;
    goto LABEL_56;
  }
  unsigned int v35 = *((_DWORD *)v23 - 1);
  if (v35 < 9 || 6 * *((_DWORD *)v23 - 3) >= v35) {
    goto LABEL_50;
  }
  WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::shrinkToBestSize((uint64_t *)this + 23);
  __n128 v23 = *v8;
LABEL_52:
  *((_DWORD *)this + 48) = 0;
  if (v23)
  {
LABEL_53:
    unsigned int v37 = *((_DWORD *)v23 - 3);
    int v38 = 0x7FFFFFFF;
    if (v37 >= 0x7FFFFFFF) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  unsigned int v37 = 0;
LABEL_56:
  int v38 = v37;
LABEL_57:
  *((_DWORD *)this + 49) = 2 * v38;
  int v39 = 1;
  atomic_compare_exchange_strong_explicit(this + 200, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
  if (v39 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(this + 200));
  }
  if (HIDWORD(v64))
  {
    int v40 = v63;
    uint64_t v41 = 8 * HIDWORD(v64);
    do
    {
      uint64_t v42 = *(void *)v40;
      int v40 = (WTF *)((char *)v40 + 8);
      (*(void (**)(uint64_t, atomic_uchar *))(*(void *)v42 + 40))(v42, this);
      v41 -= 8;
    }
    while (v41);
  }
  WTF::Vector<WTF::Ref<WebKit::GPUProcessConnection::Client,WTF::RawPtrTraits<WebKit::GPUProcessConnection::Client>,WTF::DefaultRefDerefTraits<WebKit::GPUProcessConnection::Client>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v22);
  char v44 = 0;
  atomic_compare_exchange_strong_explicit(this + 200, (unsigned __int8 *)&v44, 1u, memory_order_acquire, memory_order_acquire);
  if (v44) {
    MEMORY[0x19972E8D0](this + 200);
  }
  uint64_t result = *v8;
  if (*v8)
  {
    *((void *)this + 23) = 0;
    uint64_t result = (atomic_uchar *)WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable((uint64_t)result, v43);
    uint64_t v45 = *((void *)this + 23);
    *((_DWORD *)this + 48) = 0;
    if (v45)
    {
      LODWORD(v45) = *(_DWORD *)(v45 - 12);
      if (v45 > 0x7FFFFFFE) {
        LODWORD(v45) = 0x7FFFFFFF;
      }
    }
  }
  else
  {
    LODWORD(v45) = 0;
    *((_DWORD *)this + 48) = 0;
  }
  *((_DWORD *)this + 49) = 2 * v45;
  int v46 = 1;
  atomic_compare_exchange_strong_explicit(this + 200, (unsigned __int8 *)&v46, 0, memory_order_release, memory_order_relaxed);
  if (v46 != 1) {
    uint64_t result = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)(this + 200));
  }
  uint64_t v47 = v62;
  uint64_t v62 = 0;
  if (v47) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v47 + 24), v43);
  }
  return result;
}

WebKit::SampleBufferDisplayLayerManager *WebKit::GPUProcessConnection::sampleBufferDisplayLayerManager(WebKit::GPUProcessConnection *this)
{
  unsigned __int8 v2 = (WebKit::SampleBufferDisplayLayerManager **)((char *)this + 120);
  uint64_t result = (WebKit::SampleBufferDisplayLayerManager *)*((void *)this + 15);
  if (!result)
  {
    uint64_t v3 = (WebKit::SampleBufferDisplayLayerManager *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    std::unique_ptr<WebKit::SampleBufferDisplayLayerManager>::reset[abi:sn180100](v2, v3);
    return *v2;
  }
  return result;
}

unsigned int *WebKit::GPUProcessConnection::resetAudioMediaStreamTrackRendererInternalUnit(uint64_t a1, uint64_t a2)
{
  {
    double v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  uint64_t v3 = WebKit::WebProcess::audioMediaStreamTrackRendererInternalUnitManager((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);

  return WebKit::AudioMediaStreamTrackRendererInternalUnitManager::reset((atomic_uint **)v3, a2);
}

uint64_t WebKit::GPUProcessConnection::videoFrameObjectHeapProxy(WebKit::GPUProcessConnection *this)
{
  uint64_t v1 = *((void *)this + 16);
  if (!v1)
  {
    uint64_t v1 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v1 = 1;
    WebKit::RemoteVideoFrameObjectHeapProxyProcessor::create(this, (WebKit::RemoteVideoFrameObjectHeapProxyProcessor **)(v1 + 8));
    uint64_t v3 = (unsigned int *)*((void *)this + 16);
    *((void *)this + 16) = v1;
    if (v3)
    {
      WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v3);
      return *((void *)this + 16);
    }
  }
  return v1;
}

uint64_t WebKit::GPUProcessConnection::mediaPlayerManager(WebKit::GPUProcessConnection *this)
{
  {
    unsigned __int8 v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(void *)(WebKit::WebProcess::singleton(void)::process + 384);
}

WebKit::RemoteAudioSourceProviderManager *WebKit::GPUProcessConnection::audioSourceProviderManager(WebKit::GPUProcessConnection *this)
{
  uint64_t result = (WebKit::RemoteAudioSourceProviderManager *)*((void *)this + 17);
  if (!result)
  {
    uint64_t v3 = (WebKit::RemoteAudioSourceProviderManager *)WTF::fastMalloc((WTF *)0x30);
    uint64_t result = WebKit::RemoteAudioSourceProviderManager::RemoteAudioSourceProviderManager(v3);
    uint64_t v5 = *((void *)this + 17);
    *((void *)this + 17) = result;
    if (v5)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v4);
      return (WebKit::RemoteAudioSourceProviderManager *)*((void *)this + 17);
    }
  }
  return result;
}

uint64_t WebKit::GPUProcessConnection::dispatchMessage(WebKit::GPUProcessConnection *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 >= 0xEF4) {
    unsigned int v5 = 3828;
  }
  int v6 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v5 + 2]);
  if (v6 > 137)
  {
    if (v6 == 138)
    {
      unsigned int v15 = (atomic_uint **)WebKit::GPUProcessConnection::sampleBufferDisplayLayerManager(this);
      WebKit::SampleBufferDisplayLayerManager::didReceiveLayerMessage(v15, a2, a3);
      return 1;
    }
    if (v6 == 149)
    {
      {
        uint64_t v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v17);
      }
      unsigned __int8 v8 = (uint64_t *)WebKit::WebProcess::supplement<WebKit::UserMediaCaptureManager>((WebKit::UserMediaCaptureManager *)WebKit::WebProcess::singleton(void)::process);
      if (v8) {
        WebKit::UserMediaCaptureManager::didReceiveMessage(v8, a2, a3);
      }
      return 1;
    }
  }
  else
  {
    if (v6 == 23)
    {
      {
        uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v18);
      }
      WebKit::RemoteMediaPlayerManager::didReceivePlayerMessage(*(atomic_uchar **)(WebKit::WebProcess::singleton(void)::process + 384), (atomic_uchar *volatile *)a2, a3);
      return 1;
    }
    if (v6 == 67)
    {
      {
        int v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v16);
      }
      char v7 = (atomic_uint **)WebKit::WebProcess::supplement<WebKit::RemoteCDMFactory>(WebKit::WebProcess::singleton(void)::process);
      WebKit::RemoteCDMFactory::didReceiveSessionMessage(v7, a2, a3);
      return 1;
    }
  }
  if (IPC::MessageReceiverMap::dispatchMessage((WebKit::GPUProcessConnection *)((char *)this + 40), a2, a3)) {
    return 1;
  }
  uint64_t result = 0;
  unsigned int v10 = *((unsigned __int16 *)a3 + 25);
  if (v10 >= 0xEF4) {
    unsigned int v10 = 3828;
  }
  int v11 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v10 + 2]);
  if (v11 > 56)
  {
    if (v11 != 143)
    {
      if (v11 != 111)
      {
        if (v11 != 57) {
          return result;
        }
        uint64_t v12 = qword_1EB358078;
        if (!os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_ERROR)) {
          return 1;
        }
        __int16 v23 = 0;
        uint64_t v13 = "The RemoteAudioSession object has beed destroyed";
        uint64_t v14 = (uint8_t *)&v23;
        goto LABEL_37;
      }
      uint64_t v12 = qword_1EB358078;
      if (os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_ERROR))
      {
        __int16 v19 = 0;
        uint64_t v13 = "The RemoteRemoteCommandListener object has beed destroyed";
        uint64_t v14 = (uint8_t *)&v19;
        goto LABEL_37;
      }
      return 1;
    }
    uint64_t v12 = qword_1EB358078;
    if (!os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_ERROR)) {
      return 1;
    }
    __int16 v21 = 0;
    uint64_t v13 = "The SourceBufferPrivateRemote object has beed destroyed";
    uint64_t v14 = (uint8_t *)&v21;
LABEL_37:
    _os_log_error_impl(&dword_1985F2000, v12, OS_LOG_TYPE_ERROR, v13, v14, 2u);
    return 1;
  }
  if (v11 == 24)
  {
    uint64_t v12 = qword_1EB358078;
    if (os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v13 = "The MediaSourcePrivateRemote object has beed destroyed";
      uint64_t v14 = buf;
      goto LABEL_37;
    }
    return 1;
  }
  if (v11 == 55)
  {
    uint64_t v12 = qword_1EB358078;
    if (!os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_ERROR)) {
      return 1;
    }
    __int16 v20 = 0;
    uint64_t v13 = "The RemoteAudioHardwareListener object has beed destroyed";
    uint64_t v14 = (uint8_t *)&v20;
    goto LABEL_37;
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::DestroyVisibilityPropagationContextForPage>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  unsigned int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v10 = 45;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, *a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, a2[1]);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::ConfigureLoggingChannel>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unsigned int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v10 = 38;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTFLogChannelState,WTFLogLevel>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTFLogChannelState,WTFLogLevel>,0ul,1ul,2ul>(v10, a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

IPC::Encoder *WebKit::GPUProcessConnection::updateMediaConfiguration(WebKit::GPUProcessConnection *this, int a2)
{
  uint64_t v4 = (char *)this + 144;
  unsigned int v5 = (unsigned __int16 *)WebCore::SystemBatteryStatusTestingOverrides::singleton(this);
  unsigned int v6 = v5[1];
  int v7 = *((unsigned __int8 *)this + 145);
  if (v6 < 0x100 || v7 == 0)
  {
    if (v6 > 0xFF != (v7 != 0)) {
      goto LABEL_11;
    }
  }
  else if (*v4 != v6)
  {
    goto LABEL_11;
  }
  unsigned int v5 = (unsigned __int16 *)WebCore::SystemBatteryStatusTestingOverrides::singleton((WebCore::SystemBatteryStatusTestingOverrides *)v5);
  unsigned int v9 = *v5;
  int v10 = *((unsigned __int8 *)this + 147);
  if (v9 >= 0x100 && v10 != 0)
  {
    if (*((unsigned __int8 *)this + 146) == v9) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v9 > 0xFF != (v10 != 0)) {
LABEL_11:
  }
    a2 = 1;
LABEL_12:
  uint64_t result = (IPC::Encoder *)WebCore::VP9TestingOverrides::singleton((WebCore::VP9TestingOverrides *)v5);
  unsigned int v13 = *(unsigned __int16 *)result;
  int v14 = *((unsigned __int8 *)this + 149);
  if (v13 < 0x100 || v14 == 0)
  {
    if (v13 > 0xFF != (v14 != 0)) {
      goto LABEL_26;
    }
  }
  else if (*((unsigned __int8 *)this + 148) != v13)
  {
    goto LABEL_26;
  }
  uint64_t result = (IPC::Encoder *)WebCore::VP9TestingOverrides::singleton(result);
  unsigned int v16 = *((unsigned __int16 *)result + 1);
  if (v16 >= 0x100 && *((unsigned char *)this + 151))
  {
    if (*((unsigned __int8 *)this + 150) != v16) {
      goto LABEL_26;
    }
  }
  else if (v16 > 0xFF != (*((unsigned char *)this + 151) != 0))
  {
    goto LABEL_26;
  }
  uint64_t result = (IPC::Encoder *)WebCore::VP9TestingOverrides::singleton(result);
  int v17 = (*((unsigned char *)result + 32) != 0) ^ (*((unsigned char *)this + 176) != 0);
  if (!*((unsigned char *)result + 32) || !*((unsigned char *)this + 176))
  {
LABEL_25:
    if ((a2 | v17) != 1) {
      return result;
    }
    goto LABEL_26;
  }
  if (*((double *)this + 19) == *((double *)result + 1) && *((double *)this + 20) == *((double *)result + 2))
  {
    int v17 = *((double *)this + 21) != *((double *)result + 3);
    goto LABEL_25;
  }
LABEL_26:
  uint64_t v18 = (WebCore::SystemBatteryStatusTestingOverrides *)WebCore::SystemBatteryStatusTestingOverrides::singleton(result);
  __int16 v19 = *((_WORD *)v18 + 1);
  __int16 v20 = (WebCore::VP9TestingOverrides *)WebCore::SystemBatteryStatusTestingOverrides::singleton(v18);
  __int16 v21 = *(_WORD *)v20;
  __n128 v22 = (WebCore::VP9TestingOverrides *)WebCore::VP9TestingOverrides::singleton(v20);
  __int16 v23 = *(_WORD *)v22;
  int v24 = (WebCore::VP9TestingOverrides *)WebCore::VP9TestingOverrides::singleton(v22);
  __int16 v25 = *((_WORD *)v24 + 1);
  uint64_t v26 = WebCore::VP9TestingOverrides::singleton(v24);
  long long v27 = *(_OWORD *)(v26 + 24);
  long long v28 = *(_OWORD *)(v26 + 8);
  *((_WORD *)this + 72) = v19;
  *((_WORD *)this + 73) = v21;
  *((_WORD *)this + 74) = v23;
  *((_WORD *)this + 75) = v25;
  *(_OWORD *)((char *)this + 152) = v28;
  *(_OWORD *)((char *)this + 168) = v27;
  uint64_t v29 = *((void *)this + 4);
  uint64_t v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v30 = 54;
  *((void *)v30 + 1) = 0;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 68) = 0;
  *((void *)v30 + 70) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  int v34 = v30;
  IPC::ArgumentCoder<WebKit::MediaOverridesForTesting,void>::encode(v30, v4);
  IPC::Connection::sendMessageImpl(v29, (uint64_t *)&v34, 0, 0);
  uint64_t result = v34;
  int v34 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v31);
    return (IPC::Encoder *)WTF::fastFree(v32, v33);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::SetMediaEnvironment>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v10 = 53;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  int v17 = v10;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, a2[1]);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  unsigned int v13 = v17;
  int v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::ReleaseRenderingBackend>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v10 = 52;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  __int16 v20 = v10;
  uint64_t v11 = **a2;
  uint64_t v12 = (void *)IPC::Encoder::grow(v10, 8uLL, 8);
  if (v13 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    void *v12 = v11;
    uint64_t v15 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v20, a4, a5);
    unsigned int v16 = v20;
    __int16 v20 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v14);
      WTF::fastFree(v18, v19);
    }
    return v15;
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::CreateGraphicsContextGL>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v10 = 41;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  int v17 = v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::GraphicsContextGLAttributes const&,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,IPC::StreamServerConnectionHandle &&>,void>::encode<IPC::Encoder,IPC::StreamServerConnectionHandle &&,0ul,1ul,2ul,3ul>(v10, a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  unint64_t v13 = v17;
  int v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::ReleaseGraphicsContextGL>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v10 = 50;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  int v17 = v10;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v10, *a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  unint64_t v13 = v17;
  int v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

atomic_uchar *volatile **WebKit::GPUProcessConnection::createGPU(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a2;
  uint64_t v8 = a3;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v7, (uint64_t **)(a1 + 32));
  v6[0] = &v9;
  v6[1] = &v8;
  v6[2] = a4;
  IPC::Connection::send<Messages::GPUConnectionToWebProcess::CreateGPU>((uint64_t)v7, (uint64_t)v6, 0, 1, 0);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v7);
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::CreateGPU>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v10 = 40;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  int v17 = v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,IPC::StreamServerConnectionHandle &&>,void>::encode<IPC::Encoder,IPC::StreamServerConnectionHandle &&,0ul,1ul,2ul>(v10, a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  unint64_t v13 = v17;
  int v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

atomic_uchar *volatile **WebKit::GPUProcessConnection::releaseGPU(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v4, (uint64_t **)(a1 + 32));
  uint64_t v3 = &v5;
  IPC::Connection::send<Messages::GPUConnectionToWebProcess::ReleaseGPU>((uint64_t)v4, &v3, 0, 1, 0);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v4);
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::ReleaseGPU>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v10 = 49;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  int v17 = v10;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v10, *a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  unint64_t v13 = v17;
  int v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t WebKit::ShapeDetection::RemoteBarcodeDetectorProxy::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  v12[1] = a4;
  uint64_t v13 = a3;
  uint64_t v8 = *a1;
  v12[0] = &v13;
  IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::CreateRemoteBarcodeDetector,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v8, (uint64_t)v12, a2);
  uint64_t result = WTF::fastMalloc((WTF *)0x28);
  uint64_t v10 = v13;
  *(_DWORD *)(result + 8) = 1;
  *(void *)uint64_t result = &unk_1EE9E7B58;
  *(void *)(result + 16) = v10;
  uint64_t v11 = *a1;
  *a1 = 0;
  *(void *)(result + 24) = v11;
  *(void *)(result + 32) = a2;
  *a5 = result;
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::CreateRemoteBarcodeDetector,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v55, v7);
    if (!(_BYTE)v57) {
      return 15;
    }
    long long v36 = v55;
    unint64_t v35 = v56;
    unint64_t v37 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v38 = v37 - (void)v55;
    if (v37 >= (unint64_t)v55)
    {
      unint64_t v39 = v38 + 2;
      if (v38 <= 0xFFFFFFFFFFFFFFFDLL && v39 <= v56)
      {
        *(_WORD *)((char *)v55 + v38) = 2871;
        goto LABEL_50;
      }
      unint64_t v35 = 0;
    }
    unint64_t v39 = 0;
LABEL_50:
    uint64_t v41 = (char *)(((unint64_t)v36 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v41 >= (char *)v36 + v39)
    {
      unint64_t v39 = v41 - (char *)v36 + 8;
      if ((unint64_t)(v41 - (char *)v36) > 0xFFFFFFFFFFFFFFF7 || v39 > v35) {
        return 17;
      }
      *(void *)uint64_t v41 = a3;
    }
    if (v35)
    {
      unint64_t v43 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v44 = *(void *)(a1 + 64);
      if (v43 + 16 >= v44) {
        unint64_t v43 = 0;
      }
      if (v39 <= 0x10) {
        unint64_t v39 = 16;
      }
      unint64_t v45 = v43 + v39;
      if (v44 <= v45) {
        unint64_t v45 = 0;
      }
      *(void *)(a1 + 80) = v45;
      unint64_t v46 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v45);
      int v47 = *(_DWORD *)(a1 + 116);
      if (v46 == 0x80000000 || v47 != 0)
      {
        unsigned int v50 = v47 + 1;
        *(_DWORD *)(a1 + 116) = v50;
        if (v50 >= *(_DWORD *)(a1 + 112))
        {
          if (*(unsigned char *)(a1 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
          }
          *(_DWORD *)(a1 + 116) = 0;
        }
      }
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v52, v7);
  if (!v54) {
    return 15;
  }
  uint64_t v9 = v52;
  unint64_t v10 = v53;
  uint64_t v55 = v52;
  unint64_t v56 = v53;
  unint64_t v57 = 0;
  unint64_t v11 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v52;
  if (v11 < (unint64_t)v52)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v53)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v56 = 0;
    }
    else
    {
      *(_WORD *)((char *)v52 + v12) = 1328;
      unint64_t v57 = v12 + 2;
    }
  }
  uint64_t v15 = (char *)(((unint64_t)v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v15 >= (char *)v9 + v13)
  {
    if ((unint64_t)(v15 - (char *)v9) > 0xFFFFFFFFFFFFFFF7 || v15 - (char *)v9 + 8 > v10)
    {
      unint64_t v56 = 0;
    }
    else
    {
      *(void *)uint64_t v15 = **(void **)a2;
      unint64_t v57 = v15 - (char *)v9 + 8;
    }
  }
  IPC::VectorArgumentCoder<false,WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v55, *(void *)(a2 + 8));
  if (v56)
  {
    uint64_t v18 = v57;
    uint64_t v19 = *(void *)(a1 + 72);
    unint64_t v20 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = *(void *)(a1 + 64);
    if (v20 + 16 >= v21) {
      unint64_t v20 = 0;
    }
    if (v57 <= 0x10) {
      uint64_t v18 = 16;
    }
    unint64_t v22 = v20 + v18;
    if (v21 <= v22) {
      unint64_t v22 = 0;
    }
    *(void *)(a1 + 80) = v22;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v19 + 16) + 128), v22) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v24 = v54;
  if (v54)
  {
    unint64_t v25 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v26 = v25 - (void)v52;
    if (v25 < (unint64_t)v52)
    {
      unint64_t v24 = 0;
    }
    else
    {
      unint64_t v24 = 0;
      if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v26 + 2 <= v53)
      {
        *(_WORD *)((char *)v52 + v26) = 2870;
        unint64_t v24 = v26 + 2;
      }
    }
    unint64_t v27 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v27 + 16 < v17) {
      goto LABEL_36;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v27 = 0;
LABEL_36:
  if (v24 <= 0x10) {
    unint64_t v24 = 16;
  }
  unint64_t v28 = v27 + v24;
  if (v17 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(a1 + 80) = v28;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v28);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v51, (uint64_t **)(a1 + 8));
  uint64_t v29 = v51;
  uint64_t v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v30 = 1328;
  *((void *)v30 + 1) = a3;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 68) = 0;
  *((void *)v30 + 70) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  uint64_t v55 = v30;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v30, *(uint64_t **)a2);
  IPC::VectorArgumentCoder<false,WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v30, *(void *)(a2 + 8));
  uint64_t v23 = IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v55, 1, 0);
  long long v32 = v55;
  uint64_t v55 = 0;
  if (v32)
  {
    IPC::Encoder::~Encoder(v32, v31);
    WTF::fastFree(v33, v34);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v51);
  return v23;
}

void WebKit::ShapeDetection::RemoteBarcodeDetectorProxy::~RemoteBarcodeDetectorProxy(WebKit::ShapeDetection::RemoteBarcodeDetectorProxy *this)
{
  *(void *)this = &unk_1EE9E7B58;
  unsigned __int8 v2 = (unsigned int **)((char *)this + 24);
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *((void *)this + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v48, v6);
  if (!v50) {
    goto LABEL_42;
  }
  unint64_t v33 = v48;
  unint64_t v32 = v49;
  unint64_t v34 = (v48 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v34 - v48;
  if (v34 < v48) {
    goto LABEL_78;
  }
  unint64_t v36 = v35 + 2;
  if (v35 > 0xFFFFFFFFFFFFFFFDLL || v36 > v49)
  {
    unint64_t v32 = 0;
LABEL_78:
    unint64_t v36 = 0;
    goto LABEL_50;
  }
  *(_WORD *)(v48 + v35) = 2871;
LABEL_50:
  unint64_t v38 = (void *)((v33 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v38 >= v33 + v36)
  {
    unint64_t v36 = (unint64_t)v38 - v33 + 8;
    if ((unint64_t)v38 - v33 > 0xFFFFFFFFFFFFFFF7 || v36 > v32) {
      goto LABEL_42;
    }
    *unint64_t v38 = v4;
  }
  if (!v32) {
    goto LABEL_42;
  }
  unint64_t v40 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v41 = *(void *)(v3 + 64);
  if (v40 + 16 >= v41) {
    unint64_t v40 = 0;
  }
  if (v36 <= 0x10) {
    unint64_t v36 = 16;
  }
  unint64_t v42 = v40 + v36;
  if (v41 <= v42) {
    unint64_t v42 = 0;
  }
  *(void *)(v3 + 80) = v42;
  unint64_t v43 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v42);
  int v44 = *(_DWORD *)(v3 + 116);
  if (v43 == 0x80000000 || v44 != 0)
  {
    unsigned int v46 = v44 + 1;
    *(_DWORD *)(v3 + 116) = v46;
    if (v46 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v48, v6);
  if (!v50) {
    goto LABEL_42;
  }
  unint64_t v10 = v48;
  unint64_t v9 = v49;
  unint64_t v11 = (v48 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v48;
  if (v11 >= v48)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v49)
    {
      *(_WORD *)(v48 + v12) = 1343;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (void *)((v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 8;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFF7 || v13 > v9) {
      goto LABEL_29;
    }
    *uint64_t v15 = *((void *)this + 2);
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(v3 + 72);
    unint64_t v18 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(v3 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(v3 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    goto LABEL_42;
  }
LABEL_29:
  unint64_t v21 = v50;
  if (v50)
  {
    unint64_t v22 = (v48 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v23 = v22 - v48;
    if (v22 < v48)
    {
      unint64_t v21 = 0;
    }
    else
    {
      unint64_t v21 = 0;
      if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v49)
      {
        *(_WORD *)(v48 + v23) = 2870;
        unint64_t v21 = v23 + 2;
      }
    }
    unint64_t v24 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(v3 + 64);
    if (v24 + 16 < v9) {
      goto LABEL_35;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v24 = 0;
LABEL_35:
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v25 = v24 + v21;
  if (v9 <= v25) {
    unint64_t v25 = 0;
  }
  *(void *)(v3 + 80) = v25;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v25);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v47, (uint64_t **)(v3 + 8));
  unint64_t v26 = v47;
  unint64_t v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v27 = 1343;
  *((void *)v27 + 1) = v4;
  *((void *)v27 + 66) = (char *)v27 + 16;
  *((void *)v27 + 67) = 512;
  *((void *)v27 + 68) = 0;
  *((void *)v27 + 70) = 0;
  *((void *)v27 + 69) = 0;
  IPC::Encoder::encodeHeader(v27);
  uint64_t v51 = v27;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v27, (uint64_t *)this + 2);
  IPC::Connection::sendMessageImpl((uint64_t)v26, (uint64_t *)&v51, 1, 0);
  uint64_t v29 = v51;
  uint64_t v51 = 0;
  if (v29)
  {
    IPC::Encoder::~Encoder(v29, v28);
    WTF::fastFree(v30, v31);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v47);
LABEL_42:
  WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(v2, v8);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::ShapeDetection::RemoteBarcodeDetectorProxy::~RemoteBarcodeDetectorProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  double v7 = *(double *)(a1 + 120);
  double v8 = INFINITY;
  if (fabs(v7) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v8 = v7 + v9;
  }
  if (*(void *)(a1 + 56) == a4) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v66, v8);
  if (!v68) {
    return 0;
  }
  unint64_t v44 = v66;
  unint64_t v43 = v67;
  unint64_t v45 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v46 = v45 - v66;
  if (v45 < v66) {
    goto LABEL_86;
  }
  unint64_t v47 = v46 + 2;
  if (v46 > 0xFFFFFFFFFFFFFFFDLL || v47 > v67)
  {
    unint64_t v43 = 0;
LABEL_86:
    unint64_t v47 = 0;
    goto LABEL_58;
  }
  *(_WORD *)(v66 + v46) = 2871;
LABEL_58:
  unint64_t v49 = (void *)((v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v49 >= v44 + v47)
  {
    unint64_t v47 = (unint64_t)v49 - v44 + 8;
    if ((unint64_t)v49 - v44 > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
      return 0;
    }
    void *v49 = a4;
  }
  if (!v43) {
    return 0;
  }
  uint64_t v51 = *(void *)(a1 + 72);
  unint64_t v52 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v53 = *(void *)(a1 + 64);
  if (v52 + 16 >= v53) {
    unint64_t v52 = 0;
  }
  if (v47 <= 0x10) {
    unint64_t v47 = 16;
  }
  unint64_t v54 = v52 + v47;
  if (v53 <= v54) {
    unint64_t v54 = 0;
  }
  *(void *)(a1 + 80) = v54;
  unint64_t v55 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54);
  int v56 = *(_DWORD *)(a1 + 116);
  if (v55 == 0x80000000 || v56 != 0)
  {
    unsigned int v59 = v56 + 1;
    *(_DWORD *)(a1 + 116) = v59;
    if (v59 >= *(_DWORD *)(a1 + 112))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
  }
  *(void *)(a1 + 56) = a4;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v66, v8);
  if (!v68) {
    return 0;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v65, (uint64_t **)(a1 + 8));
  uint64_t v10 = *a3;
  *a3 = 0;
  unint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v11 = &unk_1EE9E7D50;
  v11[1] = v10;
  v64[0] = (uint64_t)v11;
  uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v64[1] = v12;
  uint64_t v63 = v12;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v65, v64);
  unint64_t v14 = v68;
  if (!v68) {
    goto LABEL_83;
  }
  unint64_t v14 = v66;
  unint64_t v15 = v67;
  unint64_t v16 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = v16 - v66;
  if (v16 < v66)
  {
    unint64_t v18 = 0;
    unint64_t v13 = v67;
  }
  else
  {
    unint64_t v13 = 0;
    if (v17 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_84;
    }
    unint64_t v18 = 0;
    if (v17 + 2 <= v67)
    {
      *(_WORD *)(v66 + v17) = 1335;
      unint64_t v13 = v15;
      unint64_t v18 = v17 + 2;
    }
  }
  while (1)
  {
    unint64_t v19 = (void *)((v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v19 >= v14 + v18)
    {
      unint64_t v20 = (char *)v19 - v14;
      if ((unint64_t)v19 - v14 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_27;
      }
      unint64_t v18 = (unint64_t)(v20 + 8);
      if ((unint64_t)(v20 + 8) > v13) {
        goto LABEL_27;
      }
      *unint64_t v19 = v12;
    }
    if (v13)
    {
      uint64_t v21 = *(void *)(a1 + 72);
      unint64_t v22 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v23 = *(void *)(a1 + 64);
      if (v22 + 16 >= v23) {
        unint64_t v22 = 0;
      }
      if (v18 <= 0x10) {
        unint64_t v18 = 16;
      }
      unint64_t v24 = v22 + v18;
      if (v23 <= v24) {
        unint64_t v24 = 0;
      }
      *(void *)(a1 + 80) = v24;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v21 + 16) + 128), v24) == 0x80000000
        || *(_DWORD *)(a1 + 116))
      {
        if (*(unsigned char *)(a1 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
        }
        *(_DWORD *)(a1 + 116) = 0;
      }
      uint64_t v25 = v63;
      goto LABEL_48;
    }
LABEL_27:
    unint64_t v14 = v68;
    if (v68) {
      break;
    }
LABEL_83:
    __break(1u);
LABEL_84:
    unint64_t v18 = v13;
  }
  unint64_t v26 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = v26 - v66;
  if (v26 < v66)
  {
    unint64_t v28 = 0;
  }
  else
  {
    unint64_t v28 = 0;
    if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v27 + 2 <= v67)
    {
      *(_WORD *)(v66 + v27) = 2870;
      unint64_t v28 = v27 + 2;
    }
  }
  unint64_t v29 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v30 = *(void *)(a1 + 64);
  if (v29 + 16 >= v30) {
    unint64_t v29 = 0;
  }
  if (v28 <= 0x10) {
    unint64_t v28 = 16;
  }
  unint64_t v31 = v29 + v28;
  if (v30 <= v31) {
    unint64_t v31 = 0;
  }
  *(void *)(a1 + 80) = v31;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v31);
  *(_DWORD *)(a1 + 116) = 0;
  unint64_t v32 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v32 = 1335;
  *((void *)v32 + 1) = a4;
  *((void *)v32 + 66) = (char *)v32 + 16;
  *((void *)v32 + 67) = 512;
  *((void *)v32 + 68) = 0;
  *((void *)v32 + 70) = 0;
  *((void *)v32 + 69) = 0;
  IPC::Encoder::encodeHeader(v32);
  uint64_t v62 = v32;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v32, &v63);
  if (IPC::Connection::sendMessageImpl((uint64_t)v65, (uint64_t *)&v62, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v65, v63, &v61);
    if (v61)
    {
      unint64_t v35 = (atomic_uint *)(WTF::RunLoop::main(v34) + 8);
      atomic_fetch_add(v35, 1u);
      uint64_t v36 = v61;
      uint64_t v61 = 0;
      unint64_t v37 = (void *)WTF::fastMalloc((WTF *)0x10);
      *unint64_t v37 = &unk_1EE9E7D78;
      v37[1] = v36;
      uint64_t v60 = v37;
      WTF::RunLoop::dispatch();
      if (v60) {
        (*(void (**)(void *))(*v60 + 8))(v60);
      }
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref((unsigned int *)v35);
      uint64_t v38 = v61;
      uint64_t v61 = 0;
      if (v38) {
        (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
      }
    }
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v25 = v63;
  }
  unint64_t v39 = v62;
  uint64_t v62 = 0;
  if (v39)
  {
    IPC::Encoder::~Encoder(v39, v33);
    WTF::fastFree(v41, v42);
  }
LABEL_48:
  uint64_t v40 = v64[0];
  v64[0] = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v65);
  return v25;
}

atomic_uchar *volatile **WebKit::ShapeDetection::RemoteBarcodeDetectorProxy::detect(WTF::ApproximateTime *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v63 = *(void *)(*(void *)a2 + 120);
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v4 = *((void *)a1 + 3);
  double v6 = *(double *)(v4 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(v4 + 56) != v5)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v70, v7);
    if (!v72) {
      return result;
    }
    unint64_t v47 = v70;
    unint64_t v46 = v71;
    unint64_t v48 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v49 = v48 - v70;
    if (v48 >= v70)
    {
      unint64_t v50 = v49 + 2;
      if (v49 <= 0xFFFFFFFFFFFFFFFDLL && v50 <= v71)
      {
        *(_WORD *)(v70 + v49) = 2871;
LABEL_62:
        unint64_t v52 = (void *)((v47 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v52 >= v47 + v50)
        {
          unint64_t v50 = (unint64_t)v52 - v47 + 8;
          if ((unint64_t)v52 - v47 > 0xFFFFFFFFFFFFFFF7 || v50 > v46) {
            return result;
          }
          *unint64_t v52 = v5;
        }
        if (!v46) {
          return result;
        }
        uint64_t v54 = *(void *)(v4 + 72);
        unint64_t v55 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v56 = *(void *)(v4 + 64);
        if (v55 + 16 >= v56) {
          unint64_t v55 = 0;
        }
        if (v50 <= 0x10) {
          unint64_t v50 = 16;
        }
        unint64_t v57 = v55 + v50;
        if (v56 <= v57) {
          unint64_t v57 = 0;
        }
        *(void *)(v4 + 80) = v57;
        unint64_t v58 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v54 + 16) + 128), v57);
        int v59 = *(_DWORD *)(v4 + 116);
        if (v58 == 0x80000000 || v59 != 0)
        {
          unsigned int v61 = v59 + 1;
          *(_DWORD *)(v4 + 116) = v61;
          if (v61 >= *(_DWORD *)(v4 + 112))
          {
            if (*(unsigned char *)(v4 + 104)) {
              MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
            }
            *(_DWORD *)(v4 + 116) = 0;
          }
        }
        *(void *)(v4 + 56) = v5;
        goto LABEL_4;
      }
      unint64_t v46 = 0;
    }
    unint64_t v50 = 0;
    goto LABEL_62;
  }
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v70, v7);
  if (!v72) {
    return result;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v69, (uint64_t **)(v4 + 8));
  uint64_t v10 = *a3;
  *a3 = 0;
  unint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v11 = &unk_1EE9E7DA0;
  v11[1] = v10;
  v68[0] = (uint64_t)v11;
  uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v68[1] = v12;
  uint64_t v67 = v12;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v69, v68);
  unint64_t v14 = v72;
  if (!v72) {
    goto LABEL_85;
  }
  unint64_t v14 = v70;
  unint64_t v15 = v71;
  unint64_t v16 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = v16 - v70;
  if (v16 < v70)
  {
    unint64_t v18 = 0;
    unint64_t v13 = v71;
  }
  else
  {
    unint64_t v13 = 0;
    if (v17 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_86;
    }
    unint64_t v18 = 0;
    if (v17 + 2 <= v71)
    {
      *(_WORD *)(v70 + v17) = 727;
      unint64_t v13 = v15;
      unint64_t v18 = v17 + 2;
    }
  }
  while (1)
  {
    unint64_t v19 = (v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    BOOL v20 = v19 >= v14 + v18;
    unint64_t v21 = v19 - (v14 + v18);
    if (v20)
    {
      unint64_t v62 = 0;
      unint64_t v22 = v21 + v18;
      if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= v13)
      {
        *(void *)(v14 + v22) = v63;
        unint64_t v62 = v13;
        unint64_t v18 = v22 + 8;
      }
    }
    else
    {
      unint64_t v62 = v13;
    }
    unint64_t v23 = (void *)((v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v13 = (unint64_t)v23 - v14 - v18;
    if ((unint64_t)v23 >= v14 + v18)
    {
      unint64_t v13 = (unint64_t)v23 - v14;
      if ((unint64_t)v23 - v14 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_32;
      }
      unint64_t v18 = v13 + 8;
      if (v13 + 8 > v62) {
        goto LABEL_32;
      }
      *unint64_t v23 = v12;
    }
    if (v62)
    {
      unint64_t v24 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v25 = *(void *)(v4 + 64);
      if (v24 + 16 >= v25) {
        unint64_t v24 = 0;
      }
      if (v18 <= 0x10) {
        unint64_t v18 = 16;
      }
      unint64_t v26 = v24 + v18;
      if (v25 <= v26) {
        unint64_t v27 = 0;
      }
      else {
        unint64_t v27 = v26;
      }
      *(void *)(v4 + 80) = v27;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v27) == 0x80000000
        || *(_DWORD *)(v4 + 116))
      {
        if (*(unsigned char *)(v4 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
        }
        *(_DWORD *)(v4 + 116) = 0;
      }
      goto LABEL_51;
    }
LABEL_32:
    unint64_t v14 = v72;
    if (v72) {
      break;
    }
LABEL_85:
    __break(1u);
LABEL_86:
    unint64_t v18 = v13;
  }
  unint64_t v28 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v29 = v28 - v70;
  if (v28 < v70)
  {
    unint64_t v30 = 0;
  }
  else
  {
    unint64_t v30 = 0;
    if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v29 + 2 <= v71)
    {
      *(_WORD *)(v70 + v29) = 2870;
      unint64_t v30 = v29 + 2;
    }
  }
  unint64_t v31 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = *(void *)(v4 + 64);
  if (v31 + 16 >= v32) {
    unint64_t v31 = 0;
  }
  if (v30 <= 0x10) {
    unint64_t v30 = 16;
  }
  unint64_t v33 = v31 + v30;
  if (v32 <= v33) {
    unint64_t v33 = 0;
  }
  *(void *)(v4 + 80) = v33;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v33);
  *(_DWORD *)(v4 + 116) = 0;
  unint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v34 = 727;
  *((void *)v34 + 1) = v5;
  *((void *)v34 + 66) = (char *)v34 + 16;
  *((void *)v34 + 67) = 512;
  *((void *)v34 + 68) = 0;
  *((void *)v34 + 70) = 0;
  *((void *)v34 + 69) = 0;
  IPC::Encoder::encodeHeader(v34);
  unint64_t v66 = v34;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v34, &v63);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v34, &v67);
  if (IPC::Connection::sendMessageImpl((uint64_t)v69, (uint64_t *)&v66, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v69, v67, &v65);
    if (v65)
    {
      unint64_t v37 = (atomic_uint *)(WTF::RunLoop::main(v36) + 8);
      atomic_fetch_add(v37, 1u);
      uint64_t v38 = v65;
      uint64_t v65 = 0;
      unint64_t v39 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v39 = &unk_1EE9E7DC8;
      v39[1] = v38;
      unint64_t v64 = v39;
      WTF::RunLoop::dispatch();
      uint64_t v40 = v64;
      unint64_t v64 = 0;
      if (v40) {
        (*(void (**)(void *))(*v40 + 8))(v40);
      }
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref((unsigned int *)v37);
      uint64_t v41 = v65;
      uint64_t v65 = 0;
      if (v41) {
        (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
      }
    }
  }
  unint64_t v42 = v66;
  unint64_t v66 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v35);
    WTF::fastFree(v44, v45);
  }
LABEL_51:
  uint64_t v43 = v68[0];
  v68[0] = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v69);
}

uint64_t WebKit::ShapeDetection::RemoteFaceDetectorProxy::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  v12[1] = a4;
  uint64_t v13 = a3;
  uint64_t v8 = *a1;
  v12[0] = &v13;
  IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::CreateRemoteFaceDetector,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v8, (uint64_t)v12, a2);
  uint64_t result = WTF::fastMalloc((WTF *)0x28);
  uint64_t v10 = v13;
  *(_DWORD *)(result + 8) = 1;
  *(void *)uint64_t result = &unk_1EE9E7B80;
  *(void *)(result + 16) = v10;
  uint64_t v11 = *a1;
  *a1 = 0;
  *(void *)(result + 24) = v11;
  *(void *)(result + 32) = a2;
  *a5 = result;
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::CreateRemoteFaceDetector,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v56, v7);
    if (!(_BYTE)v58) {
      return 15;
    }
    unint64_t v37 = v56;
    unint64_t v36 = v57;
    unint64_t v38 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v39 = v38 - (void)v56;
    if (v38 >= (unint64_t)v56)
    {
      unint64_t v40 = v39 + 2;
      if (v39 <= 0xFFFFFFFFFFFFFFFDLL && v40 <= v57)
      {
        *(_WORD *)((char *)v56 + v39) = 2871;
        goto LABEL_50;
      }
      unint64_t v36 = 0;
    }
    unint64_t v40 = 0;
LABEL_50:
    unint64_t v42 = (char *)(((unint64_t)v37 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v42 >= (char *)v37 + v40)
    {
      unint64_t v40 = v42 - (char *)v37 + 8;
      if ((unint64_t)(v42 - (char *)v37) > 0xFFFFFFFFFFFFFFF7 || v40 > v36) {
        return 17;
      }
      *(void *)unint64_t v42 = a3;
    }
    if (v36)
    {
      unint64_t v44 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v45 = *(void *)(a1 + 64);
      if (v44 + 16 >= v45) {
        unint64_t v44 = 0;
      }
      if (v40 <= 0x10) {
        unint64_t v40 = 16;
      }
      unint64_t v46 = v44 + v40;
      if (v45 <= v46) {
        unint64_t v46 = 0;
      }
      *(void *)(a1 + 80) = v46;
      unint64_t v47 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v46);
      int v48 = *(_DWORD *)(a1 + 116);
      if (v47 == 0x80000000 || v48 != 0)
      {
        unsigned int v51 = v48 + 1;
        *(_DWORD *)(a1 + 116) = v51;
        if (v51 >= *(_DWORD *)(a1 + 112))
        {
          if (*(unsigned char *)(a1 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
          }
          *(_DWORD *)(a1 + 116) = 0;
        }
      }
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v53, v7);
  if (!v55) {
    return 15;
  }
  double v9 = v53;
  unint64_t v10 = v54;
  unint64_t v56 = v53;
  unint64_t v57 = v54;
  unint64_t v58 = 0;
  unint64_t v11 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v53;
  if (v11 < (unint64_t)v53)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v54)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v57 = 0;
    }
    else
    {
      *(_WORD *)((char *)v53 + v12) = 1329;
      unint64_t v58 = v12 + 2;
    }
  }
  unint64_t v15 = (char *)(((unint64_t)v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v15 >= (char *)v9 + v13)
  {
    if ((unint64_t)(v15 - (char *)v9) > 0xFFFFFFFFFFFFFFF7 || v15 - (char *)v9 + 8 > v10)
    {
      unint64_t v57 = 0;
    }
    else
    {
      *(void *)unint64_t v15 = **(void **)a2;
      unint64_t v58 = v15 - (char *)v9 + 8;
    }
  }
  IPC::ArgumentCoder<WebCore::ShapeDetection::FaceDetectorOptions,void>::encode(&v56, *(void *)(a2 + 8));
  if (v57)
  {
    uint64_t v18 = v58;
    uint64_t v19 = *(void *)(a1 + 72);
    unint64_t v20 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = *(void *)(a1 + 64);
    if (v20 + 16 >= v21) {
      unint64_t v20 = 0;
    }
    if (v58 <= 0x10) {
      uint64_t v18 = 16;
    }
    unint64_t v22 = v20 + v18;
    if (v21 <= v22) {
      unint64_t v22 = 0;
    }
    *(void *)(a1 + 80) = v22;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v19 + 16) + 128), v22) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v24 = v55;
  if (v55)
  {
    unint64_t v25 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v26 = v25 - (void)v53;
    if (v25 < (unint64_t)v53)
    {
      unint64_t v24 = 0;
    }
    else
    {
      unint64_t v24 = 0;
      if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v26 + 2 <= v54)
      {
        *(_WORD *)((char *)v53 + v26) = 2870;
        unint64_t v24 = v26 + 2;
      }
    }
    unint64_t v27 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v27 + 16 < v17) {
      goto LABEL_36;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v27 = 0;
LABEL_36:
  if (v24 <= 0x10) {
    unint64_t v24 = 16;
  }
  unint64_t v28 = v27 + v24;
  if (v17 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(a1 + 80) = v28;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v28);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
  unint64_t v29 = v52;
  unint64_t v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v30 = 1329;
  *((void *)v30 + 1) = a3;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 68) = 0;
  *((void *)v30 + 70) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  unint64_t v56 = v30;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v30, *(uint64_t **)a2);
  uint64_t v31 = *(void *)(a2 + 8);
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v30, *(_WORD *)v31);
  IPC::Encoder::operator<<<BOOL>(v30, (char *)(v31 + 2));
  uint64_t v23 = IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v56, 1, 0);
  unint64_t v33 = v56;
  unint64_t v56 = 0;
  if (v33)
  {
    IPC::Encoder::~Encoder(v33, v32);
    WTF::fastFree(v34, v35);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v52);
  return v23;
}

void WebKit::ShapeDetection::RemoteFaceDetectorProxy::~RemoteFaceDetectorProxy(WebKit::ShapeDetection::RemoteFaceDetectorProxy *this)
{
  *(void *)this = &unk_1EE9E7B80;
  unsigned __int8 v2 = (unsigned int **)((char *)this + 24);
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *((void *)this + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v48, v6);
  if (!v50) {
    goto LABEL_42;
  }
  unint64_t v33 = v48;
  unint64_t v32 = v49;
  unint64_t v34 = (v48 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v34 - v48;
  if (v34 < v48) {
    goto LABEL_78;
  }
  unint64_t v36 = v35 + 2;
  if (v35 > 0xFFFFFFFFFFFFFFFDLL || v36 > v49)
  {
    unint64_t v32 = 0;
LABEL_78:
    unint64_t v36 = 0;
    goto LABEL_50;
  }
  *(_WORD *)(v48 + v35) = 2871;
LABEL_50:
  unint64_t v38 = (void *)((v33 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v38 >= v33 + v36)
  {
    unint64_t v36 = (unint64_t)v38 - v33 + 8;
    if ((unint64_t)v38 - v33 > 0xFFFFFFFFFFFFFFF7 || v36 > v32) {
      goto LABEL_42;
    }
    *unint64_t v38 = v4;
  }
  if (!v32) {
    goto LABEL_42;
  }
  unint64_t v40 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v41 = *(void *)(v3 + 64);
  if (v40 + 16 >= v41) {
    unint64_t v40 = 0;
  }
  if (v36 <= 0x10) {
    unint64_t v36 = 16;
  }
  unint64_t v42 = v40 + v36;
  if (v41 <= v42) {
    unint64_t v42 = 0;
  }
  *(void *)(v3 + 80) = v42;
  unint64_t v43 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v42);
  int v44 = *(_DWORD *)(v3 + 116);
  if (v43 == 0x80000000 || v44 != 0)
  {
    unsigned int v46 = v44 + 1;
    *(_DWORD *)(v3 + 116) = v46;
    if (v46 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v48, v6);
  if (!v50) {
    goto LABEL_42;
  }
  unint64_t v10 = v48;
  unint64_t v9 = v49;
  unint64_t v11 = (v48 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v48;
  if (v11 >= v48)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v49)
    {
      *(_WORD *)(v48 + v12) = 1344;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (void *)((v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 8;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFF7 || v13 > v9) {
      goto LABEL_29;
    }
    *unint64_t v15 = *((void *)this + 2);
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(v3 + 72);
    unint64_t v18 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(v3 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(v3 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    goto LABEL_42;
  }
LABEL_29:
  unint64_t v21 = v50;
  if (v50)
  {
    unint64_t v22 = (v48 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v23 = v22 - v48;
    if (v22 < v48)
    {
      unint64_t v21 = 0;
    }
    else
    {
      unint64_t v21 = 0;
      if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v49)
      {
        *(_WORD *)(v48 + v23) = 2870;
        unint64_t v21 = v23 + 2;
      }
    }
    unint64_t v24 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(v3 + 64);
    if (v24 + 16 < v9) {
      goto LABEL_35;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v24 = 0;
LABEL_35:
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v25 = v24 + v21;
  if (v9 <= v25) {
    unint64_t v25 = 0;
  }
  *(void *)(v3 + 80) = v25;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v25);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v47, (uint64_t **)(v3 + 8));
  unint64_t v26 = v47;
  unint64_t v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v27 = 1344;
  *((void *)v27 + 1) = v4;
  *((void *)v27 + 66) = (char *)v27 + 16;
  *((void *)v27 + 67) = 512;
  *((void *)v27 + 68) = 0;
  *((void *)v27 + 70) = 0;
  *((void *)v27 + 69) = 0;
  IPC::Encoder::encodeHeader(v27);
  unsigned int v51 = v27;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v27, (uint64_t *)this + 2);
  IPC::Connection::sendMessageImpl((uint64_t)v26, (uint64_t *)&v51, 1, 0);
  unint64_t v29 = v51;
  unsigned int v51 = 0;
  if (v29)
  {
    IPC::Encoder::~Encoder(v29, v28);
    WTF::fastFree(v30, v31);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v47);
LABEL_42:
  WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(v2, v8);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::ShapeDetection::RemoteFaceDetectorProxy::~RemoteFaceDetectorProxy(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *volatile **WebKit::ShapeDetection::RemoteFaceDetectorProxy::detect(WTF::ApproximateTime *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v63 = *(void *)(*(void *)a2 + 120);
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v4 = *((void *)a1 + 3);
  double v6 = *(double *)(v4 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(v4 + 56) != v5)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v70, v7);
    if (!v72) {
      return result;
    }
    unint64_t v47 = v70;
    unint64_t v46 = v71;
    unint64_t v48 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v49 = v48 - v70;
    if (v48 >= v70)
    {
      unint64_t v50 = v49 + 2;
      if (v49 <= 0xFFFFFFFFFFFFFFFDLL && v50 <= v71)
      {
        *(_WORD *)(v70 + v49) = 2871;
LABEL_62:
        unint64_t v52 = (void *)((v47 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v52 >= v47 + v50)
        {
          unint64_t v50 = (unint64_t)v52 - v47 + 8;
          if ((unint64_t)v52 - v47 > 0xFFFFFFFFFFFFFFF7 || v50 > v46) {
            return result;
          }
          *unint64_t v52 = v5;
        }
        if (!v46) {
          return result;
        }
        uint64_t v54 = *(void *)(v4 + 72);
        unint64_t v55 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v56 = *(void *)(v4 + 64);
        if (v55 + 16 >= v56) {
          unint64_t v55 = 0;
        }
        if (v50 <= 0x10) {
          unint64_t v50 = 16;
        }
        unint64_t v57 = v55 + v50;
        if (v56 <= v57) {
          unint64_t v57 = 0;
        }
        *(void *)(v4 + 80) = v57;
        unint64_t v58 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v54 + 16) + 128), v57);
        int v59 = *(_DWORD *)(v4 + 116);
        if (v58 == 0x80000000 || v59 != 0)
        {
          unsigned int v61 = v59 + 1;
          *(_DWORD *)(v4 + 116) = v61;
          if (v61 >= *(_DWORD *)(v4 + 112))
          {
            if (*(unsigned char *)(v4 + 104)) {
              MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
            }
            *(_DWORD *)(v4 + 116) = 0;
          }
        }
        *(void *)(v4 + 56) = v5;
        goto LABEL_4;
      }
      unint64_t v46 = 0;
    }
    unint64_t v50 = 0;
    goto LABEL_62;
  }
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v70, v7);
  if (!v72) {
    return result;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v69, (uint64_t **)(v4 + 8));
  uint64_t v10 = *a3;
  *a3 = 0;
  unint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v11 = &unk_1EE9E7DF0;
  v11[1] = v10;
  v68[0] = (uint64_t)v11;
  uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v68[1] = v12;
  uint64_t v67 = v12;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v69, v68);
  unint64_t v14 = v72;
  if (!v72) {
    goto LABEL_85;
  }
  unint64_t v14 = v70;
  unint64_t v15 = v71;
  unint64_t v16 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = v16 - v70;
  if (v16 < v70)
  {
    unint64_t v18 = 0;
    unint64_t v13 = v71;
  }
  else
  {
    unint64_t v13 = 0;
    if (v17 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_86;
    }
    unint64_t v18 = 0;
    if (v17 + 2 <= v71)
    {
      *(_WORD *)(v70 + v17) = 897;
      unint64_t v13 = v15;
      unint64_t v18 = v17 + 2;
    }
  }
  while (1)
  {
    unint64_t v19 = (v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    BOOL v20 = v19 >= v14 + v18;
    unint64_t v21 = v19 - (v14 + v18);
    if (v20)
    {
      unint64_t v62 = 0;
      unint64_t v22 = v21 + v18;
      if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= v13)
      {
        *(void *)(v14 + v22) = v63;
        unint64_t v62 = v13;
        unint64_t v18 = v22 + 8;
      }
    }
    else
    {
      unint64_t v62 = v13;
    }
    unint64_t v23 = (void *)((v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v13 = (unint64_t)v23 - v14 - v18;
    if ((unint64_t)v23 >= v14 + v18)
    {
      unint64_t v13 = (unint64_t)v23 - v14;
      if ((unint64_t)v23 - v14 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_32;
      }
      unint64_t v18 = v13 + 8;
      if (v13 + 8 > v62) {
        goto LABEL_32;
      }
      *unint64_t v23 = v12;
    }
    if (v62)
    {
      unint64_t v24 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v25 = *(void *)(v4 + 64);
      if (v24 + 16 >= v25) {
        unint64_t v24 = 0;
      }
      if (v18 <= 0x10) {
        unint64_t v18 = 16;
      }
      unint64_t v26 = v24 + v18;
      if (v25 <= v26) {
        unint64_t v27 = 0;
      }
      else {
        unint64_t v27 = v26;
      }
      *(void *)(v4 + 80) = v27;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v27) == 0x80000000
        || *(_DWORD *)(v4 + 116))
      {
        if (*(unsigned char *)(v4 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
        }
        *(_DWORD *)(v4 + 116) = 0;
      }
      goto LABEL_51;
    }
LABEL_32:
    unint64_t v14 = v72;
    if (v72) {
      break;
    }
LABEL_85:
    __break(1u);
LABEL_86:
    unint64_t v18 = v13;
  }
  unint64_t v28 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v29 = v28 - v70;
  if (v28 < v70)
  {
    unint64_t v30 = 0;
  }
  else
  {
    unint64_t v30 = 0;
    if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v29 + 2 <= v71)
    {
      *(_WORD *)(v70 + v29) = 2870;
      unint64_t v30 = v29 + 2;
    }
  }
  unint64_t v31 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = *(void *)(v4 + 64);
  if (v31 + 16 >= v32) {
    unint64_t v31 = 0;
  }
  if (v30 <= 0x10) {
    unint64_t v30 = 16;
  }
  unint64_t v33 = v31 + v30;
  if (v32 <= v33) {
    unint64_t v33 = 0;
  }
  *(void *)(v4 + 80) = v33;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v33);
  *(_DWORD *)(v4 + 116) = 0;
  unint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v34 = 897;
  *((void *)v34 + 1) = v5;
  *((void *)v34 + 66) = (char *)v34 + 16;
  *((void *)v34 + 67) = 512;
  *((void *)v34 + 68) = 0;
  *((void *)v34 + 70) = 0;
  *((void *)v34 + 69) = 0;
  IPC::Encoder::encodeHeader(v34);
  unint64_t v66 = v34;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v34, &v63);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v34, &v67);
  if (IPC::Connection::sendMessageImpl((uint64_t)v69, (uint64_t *)&v66, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v69, v67, &v65);
    if (v65)
    {
      unint64_t v37 = (atomic_uint *)(WTF::RunLoop::main(v36) + 8);
      atomic_fetch_add(v37, 1u);
      uint64_t v38 = v65;
      uint64_t v65 = 0;
      unint64_t v39 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v39 = &unk_1EE9E7E18;
      v39[1] = v38;
      unint64_t v64 = v39;
      WTF::RunLoop::dispatch();
      unint64_t v40 = v64;
      unint64_t v64 = 0;
      if (v40) {
        (*(void (**)(void *))(*v40 + 8))(v40);
      }
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref((unsigned int *)v37);
      uint64_t v41 = v65;
      uint64_t v65 = 0;
      if (v41) {
        (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
      }
    }
  }
  unint64_t v42 = v66;
  unint64_t v66 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v35);
    WTF::fastFree(v44, v45);
  }
LABEL_51:
  uint64_t v43 = v68[0];
  v68[0] = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v69);
}

uint64_t WebKit::ShapeDetection::RemoteTextDetectorProxy::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = *a1;
  unint64_t v11 = &v12;
  uint64_t v12 = a3;
  IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::CreateRemoteTextDetector,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v7, &v11, a2);
  uint64_t result = WTF::fastMalloc((WTF *)0x28);
  uint64_t v9 = v12;
  *(_DWORD *)(result + 8) = 1;
  *(void *)uint64_t result = &unk_1EE9E7BA8;
  *(void *)(result + 16) = v9;
  uint64_t v10 = *a1;
  *a1 = 0;
  *(void *)(result + 24) = v10;
  *(void *)(result + 32) = a2;
  *a4 = result;
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::CreateRemoteTextDetector,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v50, v7);
    if (!v52) {
      return 15;
    }
    unint64_t v34 = v50;
    unint64_t v33 = v51;
    unint64_t v35 = (v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v50;
    if (v35 >= v50)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v51)
      {
        *(_WORD *)(v50 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      unint64_t v44 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43);
      int v45 = *(_DWORD *)(a1 + 116);
      if (v44 == 0x80000000 || v45 != 0)
      {
        unsigned int v48 = v45 + 1;
        *(_DWORD *)(a1 + 116) = v48;
        if (v48 >= *(_DWORD *)(a1 + 112))
        {
          if (*(unsigned char *)(a1 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
          }
          *(_DWORD *)(a1 + 116) = 0;
        }
      }
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v50, v7);
  if (!v52) {
    return 15;
  }
  unint64_t v10 = v50;
  unint64_t v9 = v51;
  unint64_t v11 = (v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v50;
  if (v11 >= v50)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v51)
    {
      *(_WORD *)(v50 + v12) = 1331;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (void *)((v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 8;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFF7 || v13 > v9) {
      goto LABEL_27;
    }
    *unint64_t v15 = **a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v52;
  if (v52)
  {
    unint64_t v23 = (v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v50;
    if (v23 < v50)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v51)
      {
        *(_WORD *)(v50 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v49, (uint64_t **)(a1 + 8));
  unint64_t v27 = v49;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 1331;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v53 = v28;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v28, *a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v53, 1, 0);
  unint64_t v30 = v53;
  unint64_t v53 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v49);
  return v21;
}

void WebKit::ShapeDetection::RemoteTextDetectorProxy::~RemoteTextDetectorProxy(WebKit::ShapeDetection::RemoteTextDetectorProxy *this)
{
  *(void *)this = &unk_1EE9E7BA8;
  unsigned __int8 v2 = (unsigned int **)((char *)this + 24);
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *((void *)this + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v48, v6);
  if (!v50) {
    goto LABEL_42;
  }
  unint64_t v33 = v48;
  unint64_t v32 = v49;
  unint64_t v34 = (v48 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v34 - v48;
  if (v34 < v48) {
    goto LABEL_78;
  }
  unint64_t v36 = v35 + 2;
  if (v35 > 0xFFFFFFFFFFFFFFFDLL || v36 > v49)
  {
    unint64_t v32 = 0;
LABEL_78:
    unint64_t v36 = 0;
    goto LABEL_50;
  }
  *(_WORD *)(v48 + v35) = 2871;
LABEL_50:
  uint64_t v38 = (void *)((v33 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v38 >= v33 + v36)
  {
    unint64_t v36 = (unint64_t)v38 - v33 + 8;
    if ((unint64_t)v38 - v33 > 0xFFFFFFFFFFFFFFF7 || v36 > v32) {
      goto LABEL_42;
    }
    *uint64_t v38 = v4;
  }
  if (!v32) {
    goto LABEL_42;
  }
  unint64_t v40 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v41 = *(void *)(v3 + 64);
  if (v40 + 16 >= v41) {
    unint64_t v40 = 0;
  }
  if (v36 <= 0x10) {
    unint64_t v36 = 16;
  }
  unint64_t v42 = v40 + v36;
  if (v41 <= v42) {
    unint64_t v42 = 0;
  }
  *(void *)(v3 + 80) = v42;
  unint64_t v43 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v42);
  int v44 = *(_DWORD *)(v3 + 116);
  if (v43 == 0x80000000 || v44 != 0)
  {
    unsigned int v46 = v44 + 1;
    *(_DWORD *)(v3 + 116) = v46;
    if (v46 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v48, v6);
  if (!v50) {
    goto LABEL_42;
  }
  unint64_t v10 = v48;
  unint64_t v9 = v49;
  unint64_t v11 = (v48 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v48;
  if (v11 >= v48)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v49)
    {
      *(_WORD *)(v48 + v12) = 1346;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (void *)((v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 8;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFF7 || v13 > v9) {
      goto LABEL_29;
    }
    *unint64_t v15 = *((void *)this + 2);
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(v3 + 72);
    unint64_t v18 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(v3 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(v3 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    goto LABEL_42;
  }
LABEL_29:
  unint64_t v21 = v50;
  if (v50)
  {
    unint64_t v22 = (v48 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v23 = v22 - v48;
    if (v22 < v48)
    {
      unint64_t v21 = 0;
    }
    else
    {
      unint64_t v21 = 0;
      if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v49)
      {
        *(_WORD *)(v48 + v23) = 2870;
        unint64_t v21 = v23 + 2;
      }
    }
    unint64_t v24 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(v3 + 64);
    if (v24 + 16 < v9) {
      goto LABEL_35;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v24 = 0;
LABEL_35:
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v25 = v24 + v21;
  if (v9 <= v25) {
    unint64_t v25 = 0;
  }
  *(void *)(v3 + 80) = v25;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v25);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v47, (uint64_t **)(v3 + 8));
  unint64_t v26 = v47;
  unint64_t v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v27 = 1346;
  *((void *)v27 + 1) = v4;
  *((void *)v27 + 66) = (char *)v27 + 16;
  *((void *)v27 + 67) = 512;
  *((void *)v27 + 68) = 0;
  *((void *)v27 + 70) = 0;
  *((void *)v27 + 69) = 0;
  IPC::Encoder::encodeHeader(v27);
  unint64_t v51 = v27;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v27, (uint64_t *)this + 2);
  IPC::Connection::sendMessageImpl((uint64_t)v26, (uint64_t *)&v51, 1, 0);
  unint64_t v29 = v51;
  unint64_t v51 = 0;
  if (v29)
  {
    IPC::Encoder::~Encoder(v29, v28);
    WTF::fastFree(v30, v31);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v47);
LABEL_42:
  WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(v2, v8);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::ShapeDetection::RemoteTextDetectorProxy::~RemoteTextDetectorProxy(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *volatile **WebKit::ShapeDetection::RemoteTextDetectorProxy::detect(WTF::ApproximateTime *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v63 = *(void *)(*(void *)a2 + 120);
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v4 = *((void *)a1 + 3);
  double v6 = *(double *)(v4 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(v4 + 56) != v5)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v70, v7);
    if (!v72) {
      return result;
    }
    unint64_t v47 = v70;
    unint64_t v46 = v71;
    unint64_t v48 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v49 = v48 - v70;
    if (v48 >= v70)
    {
      unint64_t v50 = v49 + 2;
      if (v49 <= 0xFFFFFFFFFFFFFFFDLL && v50 <= v71)
      {
        *(_WORD *)(v70 + v49) = 2871;
LABEL_62:
        unsigned __int8 v52 = (void *)((v47 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v52 >= v47 + v50)
        {
          unint64_t v50 = (unint64_t)v52 - v47 + 8;
          if ((unint64_t)v52 - v47 > 0xFFFFFFFFFFFFFFF7 || v50 > v46) {
            return result;
          }
          *unsigned __int8 v52 = v5;
        }
        if (!v46) {
          return result;
        }
        uint64_t v54 = *(void *)(v4 + 72);
        unint64_t v55 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v56 = *(void *)(v4 + 64);
        if (v55 + 16 >= v56) {
          unint64_t v55 = 0;
        }
        if (v50 <= 0x10) {
          unint64_t v50 = 16;
        }
        unint64_t v57 = v55 + v50;
        if (v56 <= v57) {
          unint64_t v57 = 0;
        }
        *(void *)(v4 + 80) = v57;
        unint64_t v58 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v54 + 16) + 128), v57);
        int v59 = *(_DWORD *)(v4 + 116);
        if (v58 == 0x80000000 || v59 != 0)
        {
          unsigned int v61 = v59 + 1;
          *(_DWORD *)(v4 + 116) = v61;
          if (v61 >= *(_DWORD *)(v4 + 112))
          {
            if (*(unsigned char *)(v4 + 104)) {
              MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
            }
            *(_DWORD *)(v4 + 116) = 0;
          }
        }
        *(void *)(v4 + 56) = v5;
        goto LABEL_4;
      }
      unint64_t v46 = 0;
    }
    unint64_t v50 = 0;
    goto LABEL_62;
  }
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v70, v7);
  if (!v72) {
    return result;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v69, (uint64_t **)(v4 + 8));
  uint64_t v10 = *a3;
  *a3 = 0;
  unint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v11 = &unk_1EE9E7E40;
  v11[1] = v10;
  v68[0] = (uint64_t)v11;
  uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v68[1] = v12;
  uint64_t v67 = v12;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v69, v68);
  unint64_t v14 = v72;
  if (!v72) {
    goto LABEL_85;
  }
  unint64_t v14 = v70;
  unint64_t v15 = v71;
  unint64_t v16 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = v16 - v70;
  if (v16 < v70)
  {
    unint64_t v18 = 0;
    unint64_t v13 = v71;
  }
  else
  {
    unint64_t v13 = 0;
    if (v17 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_86;
    }
    unint64_t v18 = 0;
    if (v17 + 2 <= v71)
    {
      *(_WORD *)(v70 + v17) = 1406;
      unint64_t v13 = v15;
      unint64_t v18 = v17 + 2;
    }
  }
  while (1)
  {
    unint64_t v19 = (v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    BOOL v20 = v19 >= v14 + v18;
    unint64_t v21 = v19 - (v14 + v18);
    if (v20)
    {
      unint64_t v62 = 0;
      unint64_t v22 = v21 + v18;
      if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= v13)
      {
        *(void *)(v14 + v22) = v63;
        unint64_t v62 = v13;
        unint64_t v18 = v22 + 8;
      }
    }
    else
    {
      unint64_t v62 = v13;
    }
    unint64_t v23 = (void *)((v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v13 = (unint64_t)v23 - v14 - v18;
    if ((unint64_t)v23 >= v14 + v18)
    {
      unint64_t v13 = (unint64_t)v23 - v14;
      if ((unint64_t)v23 - v14 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_32;
      }
      unint64_t v18 = v13 + 8;
      if (v13 + 8 > v62) {
        goto LABEL_32;
      }
      *unint64_t v23 = v12;
    }
    if (v62)
    {
      unint64_t v24 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v25 = *(void *)(v4 + 64);
      if (v24 + 16 >= v25) {
        unint64_t v24 = 0;
      }
      if (v18 <= 0x10) {
        unint64_t v18 = 16;
      }
      unint64_t v26 = v24 + v18;
      if (v25 <= v26) {
        unint64_t v27 = 0;
      }
      else {
        unint64_t v27 = v26;
      }
      *(void *)(v4 + 80) = v27;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v27) == 0x80000000
        || *(_DWORD *)(v4 + 116))
      {
        if (*(unsigned char *)(v4 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
        }
        *(_DWORD *)(v4 + 116) = 0;
      }
      goto LABEL_51;
    }
LABEL_32:
    unint64_t v14 = v72;
    if (v72) {
      break;
    }
LABEL_85:
    __break(1u);
LABEL_86:
    unint64_t v18 = v13;
  }
  unint64_t v28 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v29 = v28 - v70;
  if (v28 < v70)
  {
    unint64_t v30 = 0;
  }
  else
  {
    unint64_t v30 = 0;
    if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v29 + 2 <= v71)
    {
      *(_WORD *)(v70 + v29) = 2870;
      unint64_t v30 = v29 + 2;
    }
  }
  unint64_t v31 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = *(void *)(v4 + 64);
  if (v31 + 16 >= v32) {
    unint64_t v31 = 0;
  }
  if (v30 <= 0x10) {
    unint64_t v30 = 16;
  }
  unint64_t v33 = v31 + v30;
  if (v32 <= v33) {
    unint64_t v33 = 0;
  }
  *(void *)(v4 + 80) = v33;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v33);
  *(_DWORD *)(v4 + 116) = 0;
  unint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v34 = 1406;
  *((void *)v34 + 1) = v5;
  *((void *)v34 + 66) = (char *)v34 + 16;
  *((void *)v34 + 67) = 512;
  *((void *)v34 + 68) = 0;
  *((void *)v34 + 70) = 0;
  *((void *)v34 + 69) = 0;
  IPC::Encoder::encodeHeader(v34);
  unint64_t v66 = v34;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v34, &v63);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v34, &v67);
  if (IPC::Connection::sendMessageImpl((uint64_t)v69, (uint64_t *)&v66, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v69, v67, &v65);
    if (v65)
    {
      unint64_t v37 = (atomic_uint *)(WTF::RunLoop::main(v36) + 8);
      atomic_fetch_add(v37, 1u);
      uint64_t v38 = v65;
      uint64_t v65 = 0;
      unint64_t v39 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v39 = &unk_1EE9E7E68;
      v39[1] = v38;
      unint64_t v64 = v39;
      WTF::RunLoop::dispatch();
      unint64_t v40 = v64;
      unint64_t v64 = 0;
      if (v40) {
        (*(void (**)(void *))(*v40 + 8))(v40);
      }
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref((unsigned int *)v37);
      uint64_t v41 = v65;
      uint64_t v65 = 0;
      if (v41) {
        (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
      }
    }
  }
  unint64_t v42 = v66;
  unint64_t v66 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v35);
    WTF::fastFree(v44, v45);
  }
LABEL_51:
  uint64_t v43 = v68[0];
  v68[0] = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v69);
}

IntSize WebKit::ImageBufferShareableBitmapBackend::calculateSafeBackendSize(const IntSize *a1, uint64_t a2, const WebCore::DestinationColorSpace *a3)
{
  IntSize v6 = *a1;
  if (v6.m_width < 1 || v6.m_height < 1) {
    return 0;
  }
  WebCore::ShareableBitmapConfiguration::calculateSizeInBytes(&v5, (WebCore::ShareableBitmapConfiguration *)&v6, a1 + 2, a3);
  if ((_BYTE)v5) {
    return 0;
  }
  else {
    return v6;
  }
}

uint64_t *WebKit::ImageBufferShareableBitmapBackend::calculateMemoryCost(IntSize *a1, uint64_t a2, const WebCore::DestinationColorSpace *a3)
{
  uint64_t result = WebCore::ShareableBitmapConfiguration::calculateBytesPerRow((uint64_t *)&v5, (WebCore::ShareableBitmapConfiguration *)a1, a1 + 2, a3);
  if (!v5) {
    return (uint64_t *)WebCore::ImageBufferBackend::calculateMemoryCost((WebCore::ImageBufferBackend *)a1, (const IntSize *)v6);
  }
  __break(0xC471u);
  return result;
}

void WebKit::ImageBufferShareableBitmapBackend::create(uint64_t a1@<X0>, uint64_t a2@<X1>, const WebCore::DestinationColorSpace *a3@<X2>, uint64_t *a4@<X8>)
{
  IntSize v6 = WebKit::ImageBufferShareableBitmapBackend::calculateSafeBackendSize((const IntSize *)a1, a2, a3);
  IntSize v21 = v6;
  if (v6.m_width < 1 || v6.m_height <= 0) {
    goto LABEL_22;
  }
  double v7 = *(const void **)(a1 + 16);
  CFTypeRef v15 = v7;
  if (v7) {
    CFRetain(v7);
  }
  char v16 = 1;
  MEMORY[0x199738D60](&v17, &v21, &v15, 0);
  WebCore::ShareableBitmap::create();
  if (v19)
  {
    CFTypeRef v8 = cf;
    CFTypeRef cf = 0;
    if (v8) {
      CFRelease(v8);
    }
  }
  if (v16)
  {
    CFTypeRef v9 = v15;
    CFTypeRef v15 = 0;
    if (v9) {
      CFRelease(v9);
    }
  }
  if (v20)
  {
    if (WebCore::ProcessIdentity::operator BOOL()) {
      WebCore::ShareableBitmap::setOwnershipOfMemory();
    }
    WebCore::ShareableBitmap::createGraphicsContext(&v17, v20);
    if (v17)
    {
      unint64_t v14 = v20;
      BOOL v20 = 0;
      uint64_t v11 = bmalloc::api::isoAllocate();
      *a4 = WebKit::ImageBufferShareableBitmapBackend::ImageBufferShareableBitmapBackend(v11, a1, (uint64_t *)&v14, &v17);
      if (v14) {
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v14, v10);
      }
      uint64_t v12 = v17;
      uint64_t v17 = 0;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
    }
    else
    {
      *a4 = 0;
    }
    unint64_t v13 = v20;
    BOOL v20 = 0;
    if (v13) {
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v13, v10);
    }
  }
  else
  {
LABEL_22:
    *a4 = 0;
  }
}

WebCore::ShareableBitmap *WebKit::ImageBufferShareableBitmapBackend::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  WebCore::ShareableBitmap::create();
  uint64_t result = v10;
  if (v10)
  {
    WebCore::ShareableBitmap::createGraphicsContext(&v9, v10);
    if (v9)
    {
      CFTypeRef v8 = v10;
      uint64_t v10 = 0;
      uint64_t v6 = bmalloc::api::isoAllocate();
      *a2 = WebKit::ImageBufferShareableBitmapBackend::ImageBufferShareableBitmapBackend(v6, a1, (uint64_t *)&v8, &v9);
      if (v8) {
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v8, v5);
      }
      uint64_t v7 = v9;
      uint64_t v9 = 0;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
    }
    else
    {
      *a2 = 0;
    }
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result) {
      return (WebCore::ShareableBitmap *)WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)result, v5);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::ImageBufferShareableBitmapBackend(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = (void *)WebCore::ImageBufferBackend::ImageBufferBackend();
  v7[5] = 0;
  void *v7 = &unk_1EE9E7BD0;
  uint64_t v8 = *a3;
  *a3 = 0;
  v7[6] = &unk_1EE9E7CB8;
  v7[7] = v8;
  uint64_t v9 = *a4;
  *a4 = 0;
  *(void *)(a1 + 64) = v9;
  v10.n128_u32[0] = *(_DWORD *)(a1 + 16);
  (*(void (**)(__n128))(*(void *)v9 + 672))(v10);
  return a1;
}

void WebKit::ImageBufferShareableBitmapBackend::~ImageBufferShareableBitmapBackend(WebKit::ImageBufferShareableBitmapBackend *this, void *a2)
{
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v4, a2);
  }

  MEMORY[0x1F416FA58](this);
}

{
  bmalloc::api *v2;
  void *v3;
  uint64_t vars8;

  WebKit::ImageBufferShareableBitmapBackend::~ImageBufferShareableBitmapBackend(this, a2);

  bmalloc::api::isoDeallocate(v2, v3);
}

void non-virtual thunk to'WebKit::ImageBufferShareableBitmapBackend::~ImageBufferShareableBitmapBackend(WebKit::ImageBufferShareableBitmapBackend *this, void *a2)
{
}

{
  bmalloc::api *v2;
  void *v3;
  uint64_t vars8;

  WebKit::ImageBufferShareableBitmapBackend::~ImageBufferShareableBitmapBackend((WebKit::ImageBufferShareableBitmapBackend *)((char *)this - 48), a2);

  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::canMapBackingStore(WebKit::ImageBufferShareableBitmapBackend *this)
{
  return 1;
}

WTF::MachSendRight *WebKit::ImageBufferShareableBitmapBackend::createBackendHandle@<X0>(uint64_t a1@<X8>)
{
  WebCore::ShareableBitmap::createHandle();
  if (v5[64])
  {
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v3, (uint64_t)v5);
    int v4 = 0;
    *(unsigned char *)a1 = 0;
    *(_DWORD *)(a1 + 64) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>((unsigned int *)a1, (uint64_t)v3);
    *(unsigned char *)(a1 + 72) = 1;
    if (v4 != -1) {
      off_1EE9E7CF8[v4]((int)&v6, (WTF::MachSendRight *)v3);
    }
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v5);
  }
  else
  {
    uint64_t result = std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v5);
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 72) = 0;
  }
  return result;
}

WTF::MachSendRight *non-virtual thunk to'WebKit::ImageBufferShareableBitmapBackend::createBackendHandle@<X0>(uint64_t a1@<X8>)
{
  return WebKit::ImageBufferShareableBitmapBackend::createBackendHandle(a1);
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::transferToNewContext()
{
  uint64_t result = WebCore::ProcessIdentity::operator BOOL();
  if (result)
  {
    return WebCore::ShareableBitmap::setOwnershipOfMemory();
  }
  return result;
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::bytesPerRow(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 56);
  if (!*(unsigned char *)(v1 + 44)) {
    return *(unsigned int *)(v1 + 48);
  }
  __break(0xC471u);
  return this;
}

void WebKit::ImageBufferShareableBitmapBackend::copyNativeImage(WebKit::ImageBufferShareableBitmapBackend *this)
{
  WebCore::ShareableBitmap::createPlatformImage();
  WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WebCore::NativeImage::create();
  if (cf) {
    CFRelease(cf);
  }
}

void WebKit::ImageBufferShareableBitmapBackend::createNativeImageReference(WebKit::ImageBufferShareableBitmapBackend *this)
{
  WebCore::ShareableBitmap::createPlatformImage();
  WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WebCore::NativeImage::create();
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::getPixelBuffer(WebCore::ShareableBitmap **this, const WebCore::IntRect *a2, WebCore::PixelBuffer *a3)
{
  uint64_t v6 = WebCore::ShareableBitmap::span(this[7]);

  return MEMORY[0x1F416F188](this, a2, v6, a3);
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::putPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = WebCore::ShareableBitmap::mutableSpan(*(WebCore::ShareableBitmap **)(a1 + 56));

  return MEMORY[0x1F416F190](a1, a2, a3, a4, a5, v10);
}

WTF::StringImpl *WebKit::ImageBufferShareableBitmapBackend::debugDescription@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = 0;
  char v9 = 1;
  int v10 = 0;
  __int16 v11 = 256;
  int v12 = 0;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::release(a1, (WTF::TextStream *)&v6);
  int v4 = v7;
  uint64_t v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

BOOL WebKit::WebFullScreenManager::operator==(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t WebCore::EventListener::isAttribute(WebCore::EventListener *this)
{
  return 0;
}

uint64_t WebCore::EventListener::jsFunction(WebCore::EventListener *this)
{
  return 0;
}

uint64_t WebCore::EventListener::wrapper(WebCore::EventListener *this)
{
  return 0;
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::context(WebKit::ImageBufferShareableBitmapBackend *this)
{
  return *((void *)this + 8);
}

uint64_t WebCore::ImageBufferBackend::surface(WebCore::ImageBufferBackend *this)
{
  return 0;
}

uint64_t WebCore::ImageBufferBackend::isInUse(WebCore::ImageBufferBackend *this)
{
  return 0;
}

uint64_t WebCore::ImageBufferBackend::setVolatile(WebCore::ImageBufferBackend *this)
{
  return 1;
}

uint64_t WebCore::ImageBufferBackend::setNonVolatile(WebCore::ImageBufferBackend *this)
{
  return 0;
}

uint64_t WebCore::ImageBufferBackend::volatilityState(WebCore::ImageBufferBackend *this)
{
  return 0;
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::toBackendSharing(WebKit::ImageBufferShareableBitmapBackend *this)
{
  return (uint64_t)this + 48;
}

void WebCore::ImageBufferBackend::layerContentsDisplayDelegate(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::bitmap@<X0>(uint64_t this@<X0>, atomic_uint **a2@<X8>)
{
  unsigned __int8 v2 = *(atomic_uint **)(this + 56);
  atomic_fetch_add(v2, 1u);
  *a2 = v2;
  return this;
}

uint64_t WebKit::ImageBufferBackendHandleSharing::takeBackendHandle(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t non-virtual thunk to'WebKit::ImageBufferShareableBitmapBackend::bitmap@<X0>(uint64_t this@<X0>, atomic_uint **a2@<X8>)
{
  unsigned __int8 v2 = *(atomic_uint **)(this + 8);
  atomic_fetch_add(v2, 1u);
  *a2 = v2;
  return this;
}

WebKit::SampleBufferDisplayLayerManager *std::unique_ptr<WebKit::SampleBufferDisplayLayerManager>::reset[abi:sn180100](WebKit::SampleBufferDisplayLayerManager **a1, WebKit::SampleBufferDisplayLayerManager *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::SampleBufferDisplayLayerManager::~SampleBufferDisplayLayerManager(result, a2);
    return (WebKit::SampleBufferDisplayLayerManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::SampleBufferDisplayLayerManager::~SampleBufferDisplayLayerManager(WebKit::SampleBufferDisplayLayerManager *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v3, a2);
  }

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, a2);
}

_DWORD *WTF::RefCounted<WebCore::AbortSignal>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    uint64_t v1 = (bmalloc::api *)MEMORY[0x19972F960](result - 6);
    return (_DWORD *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebFullScreenManager::*&)(void),WebKit::WebFullScreenManager*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  unsigned __int8 v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [2],WTF::String,char [6],WTF::AtomString,char [3]>(WTF::Logger::LogSiteIdentifier *a1, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  v51[1] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v37, a1);
  WTF::String::String((WTF::String *)&v36, "<");
  unint64_t v31 = a2;
  int v4 = *a2;
  if (*a2) {
    *(_DWORD *)v4 += 2;
  }
  WTF::String::String((WTF::String *)&v35, " id=\"");
  char v5 = *a3;
  if (*a3) {
    *(_DWORD *)v5 += 2;
  }
  WTF::String::String((WTF::String *)&v34, "\">");
  unint64_t v42 = v4;
  *(void *)long long buf = v37;
  v33[0] = v36;
  unint64_t v40 = v5;
  uint64_t v41 = v35;
  unint64_t v39 = v34;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v33, (uint64_t *)&v42, (uint64_t *)&v41, (uint64_t *)&v40, (uint64_t *)&v39, &v38);
  if (!v38)
  {
    __break(0xC471u);
    return result;
  }
  int v8 = v34;
  unint64_t v34 = 0;
  if (!v8)
  {
LABEL_9:
    if (!v5) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
    goto LABEL_9;
  }
  WTF::StringImpl::destroy(v8, v7);
  if (!v5) {
    goto LABEL_15;
  }
LABEL_12:
  if (*(_DWORD *)v5 == 2) {
    WTF::StringImpl::destroy(v5, v7);
  }
  else {
    *(_DWORD *)v5 -= 2;
  }
LABEL_15:
  char v9 = v35;
  unint64_t v35 = 0;
  if (!v9) {
    goto LABEL_18;
  }
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
LABEL_18:
    if (!v4) {
      goto LABEL_24;
    }
LABEL_21:
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v7);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v9, v7);
  if (v4) {
    goto LABEL_21;
  }
LABEL_24:
  int v10 = v36;
  unint64_t v36 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  __int16 v11 = v37;
  unint64_t v37 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v7);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  int v12 = qword_1EB357E20;
  unint64_t v13 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB357E20, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    WTF::String::utf8();
    CFTypeRef v15 = v33[0] ? (char *)v33[0] + 16 : 0;
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v15;
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    unint64_t v13 = v33[0];
    v33[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        unint64_t v13 = (WTF *)WTF::fastFree(v13, v14);
      }
      else {
        --*(_DWORD *)v13;
      }
    }
  }
  if (WebKit2LogFullscreen)
  {
    char v16 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v17 = *v16;
      if (v17) {
        break;
      }
      int v18 = *v16;
      atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, v17 | 1, memory_order_acquire, memory_order_acquire);
      if (v18 == v17)
      {
        uint64_t v19 = WTF::Logger::observers(v13);
        uint64_t v20 = *(unsigned int *)(v19 + 12);
        if (v20)
        {
          IntSize v21 = *(uint64_t **)v19;
          uint64_t v22 = *(void *)v19 + 8 * v20;
          do
          {
            uint64_t v23 = *v21;
            *(_DWORD *)long long buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], a1);
            int v44 = 0;
            WTF::String::String((WTF::String *)v45, "<");
            v45[2] = 0;
            unint64_t v24 = *v31;
            if (*v31) {
              *(_DWORD *)v24 += 2;
            }
            unint64_t v46 = v24;
            int v47 = 0;
            WTF::String::String((WTF::String *)v48, " id=\"");
            v48[2] = 0;
            unint64_t v25 = *a3;
            if (*a3) {
              *(_DWORD *)v25 += 2;
            }
            unint64_t v49 = v25;
            int v50 = 0;
            WTF::String::String((WTF::String *)v51, "\">");
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v33, (uint64_t)buf, 6uLL);
            (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v23 + 16))(v23, &WebKit2LogFullscreen, 0, v33);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v26);
            for (uint64_t i = 88; i != -8; i -= 16)
            {
              unint64_t v28 = *(WTF::StringImpl **)&buf[i];
              *(void *)&buf[i] = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 2) {
                  WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v14);
                }
                else {
                  *(_DWORD *)v28 -= 2;
                }
              }
            }
            ++v21;
          }
          while (v21 != (uint64_t *)v22);
        }
        int v29 = 1;
        atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v29, 0, memory_order_release, memory_order_relaxed);
        if (v29 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  uint64_t result = v38;
  uint64_t v38 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    atomic_store(1u, result);
    unsigned __int8 v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)unsigned __int8 v2 = &unk_1EE9E7E90;
    *((void *)v2 + 1) = v1;
    uint64_t v3 = v2;
    WTF::ensureOnMainRunLoop();
    uint64_t result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t result, void *a2)
{
  unsigned __int8 v2 = *(WTF **)(result + 8);
  if (v2)
  {
    uint64_t v3 = *((void *)v2 + 1);
    *((void *)v2 + 1) = 0;
    if (v3) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
    }
    return WTF::fastFree(v2, a2);
  }
  return result;
}

void *WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::shrinkToBestSize(uint64_t *a1)
{
  if (*a1) {
    unsigned int v2 = *(_DWORD *)(*a1 - 12);
  }
  else {
    unsigned int v2 = 0;
  }
  unsigned int v3 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(v2);
  if (v3 <= 8) {
    unsigned int v4 = 8;
  }
  else {
    unsigned int v4 = v3;
  }

  return WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::rehash(a1, v4, 0);
}

void *WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  __int16 v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    unint64_t v13 = (void *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          CFTypeRef v15 = (void *)WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::lookupForReinsert(a1, v13);
          char v16 = (atomic_uchar *)v15[1];
          v15[1] = 0;
          if (v16) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v16, v10);
          }
          *CFTypeRef v15 = *v13;
          uint64_t v17 = v13[1];
          v13[1] = 0;
          v15[1] = v17;
          int v18 = (atomic_uchar *)v13[1];
          v13[1] = 0;
          if (v18) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v18, v10);
          }
          if (v13 == a3) {
            __int16 v11 = v15;
          }
        }
        else
        {
          unint64_t v14 = (atomic_uchar *)v13[1];
          v13[1] = 0;
          if (v14) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v14, v10);
          }
        }
      }
      v13 += 2;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::lookupForReinsert(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  unint64_t v4 = ~(*a2 << 32) + *a2;
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  unsigned int v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = *(void *)(v2 + 16 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 16 * v9;
}

uint64_t WTF::Vector<WTF::Ref<WebKit::GPUProcessConnection::Client,WTF::RawPtrTraits<WebKit::GPUProcessConnection::Client>,WTF::DefaultRefDerefTraits<WebKit::GPUProcessConnection::Client>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    unint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)unint64_t v4 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
      }
      unint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  unsigned int v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::String const&,WTFLogChannelState,WTFLogLevel>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTFLogChannelState,WTFLogLevel>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTFLogChannelState,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 8));
  char v4 = *(unsigned char *)(a2 + 9);

  return IPC::ArgumentCoder<WTFLogChannelState,void>::encode<IPC::Encoder>(a1, v4);
}

unint64_t IPC::ArgumentCoder<WTFLogChannelState,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::GraphicsContextGLAttributes const&,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,IPC::StreamServerConnectionHandle &&>,void>::encode<IPC::Encoder,IPC::StreamServerConnectionHandle &&,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::GraphicsContextGLAttributes,void>::encode(a1, *(char **)(a2 + 8));
  uint64_t v4 = **(void **)(a2 + 16);
  uint64_t v5 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    void *v5 = v4;
    uint64_t v7 = *(void *)(a2 + 24);
    IPC::ArgumentCoder<IPC::ConnectionHandle,void>::encode(a1, v7);
    return (uint64_t)IPC::Encoder::operator<<<WebCore::SharedMemoryHandle>(a1, v7 + 8);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,IPC::StreamServerConnectionHandle &&>,void>::encode<IPC::Encoder,IPC::StreamServerConnectionHandle &&,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, *(uint64_t **)a2);
  uint64_t v4 = **(void **)(a2 + 8);
  uint64_t v5 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    void *v5 = v4;
    uint64_t v7 = *(void *)(a2 + 16);
    IPC::ArgumentCoder<IPC::ConnectionHandle,void>::encode(a1, v7);
    return (uint64_t)IPC::Encoder::operator<<<WebCore::SharedMemoryHandle>(a1, v7 + 8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E7D50;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E7D50;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)v14);
    if (v15)
    {
      __int16 v11 = (WTF *)v14[0];
      uint64_t v12 = v14[1];
      char v13 = 1;
      uint64_t v4 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, WTF **))(*(void *)v4 + 16))(v4, &v11);
      uint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
      if (v13)
      {
        uint64_t result = v11;
        if (v11)
        {
          __int16 v11 = 0;
          LODWORD(v12) = 0;
          return (WTF *)WTF::fastFree(result, v6);
        }
      }
    }
    else
    {
      uint64_t v8 = *a2;
      uint64_t v9 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v10 = a2[3];
      if (v10 && v9) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
      }
      return IPC::Connection::cancelReply<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v7);
  }
  return result;
}

WTF *IPC::Connection::cancelReply<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t result = v4;
  if (v4)
  {
    uint64_t v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::SupportsObjectIdentifierNullState<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E7D78;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::SupportsObjectIdentifierNullState<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E7D78;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::SupportsObjectIdentifierNullState<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteBarcodeDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E7DA0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteBarcodeDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E7DA0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteBarcodeDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && (uint64_t v4 = (void *)*a2) != 0)
  {
    unint64_t v5 = a2[1];
    unint64_t v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
    if (v5 < v6 || v5 - v6 <= 7)
    {
      *a2 = 0;
      a2[1] = 0;
      unint64_t v22 = a2[3];
      if (v22)
      {
        if (v5)
        {
          (*(void (**)(unint64_t))(*(void *)v22 + 16))(v22);
          unint64_t v23 = *a2;
          unint64_t v24 = a2[1];
          unint64_t v25 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          if (v25)
          {
            if (v24) {
              (*(void (**)(unint64_t, unint64_t))(*(void *)v25 + 16))(v25, v23);
            }
          }
        }
      }
      goto LABEL_39;
    }
    uint64_t v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v9 = *v8;
    a2[2] = (unint64_t)(v8 + 1);
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    if (v9 >= 0x5555)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::ShapeDetection::DetectedBarcode>((uint64_t)&v46, a2);
        if (!v52) {
          goto LABEL_38;
        }
        int v26 = HIDWORD(v54);
        if (HIDWORD(v54) == v54)
        {
          WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::DetectedBarcode>((unsigned int *)&v53, (unint64_t)&v46);
        }
        else
        {
          uint64_t v27 = v53 + 48 * HIDWORD(v54);
          *(_OWORD *)uint64_t v27 = v46;
          uint64_t v28 = v47;
          uint64_t v47 = 0;
          *(void *)(v27 + 16) = v28;
          *(unsigned char *)(v27 + 24) = v48;
          *(void *)(v27 + 32) = 0;
          *(void *)(v27 + 40) = 0;
          uint64_t v29 = v49;
          uint64_t v49 = 0;
          *(void *)(v27 + 32) = v29;
          LODWORD(v29) = v50;
          int v50 = 0;
          *(_DWORD *)(v27 + 40) = v29;
          LODWORD(v29) = v51;
          int v51 = 0;
          *(_DWORD *)(v27 + 44) = v29;
          HIDWORD(v54) = v26 + 1;
        }
        uint64_t result = std::__optional_destruct_base<WebCore::ShapeDetection::DetectedBarcode,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v46, v10);
        if (!--v9)
        {
          LODWORD(v9) = v54;
          char v15 = (WTF::StringImpl *)v53;
          if (v54 <= HIDWORD(v54))
          {
            unsigned int v16 = HIDWORD(v54);
            goto LABEL_21;
          }
          unint64_t v30 = (WTF::StringImpl *)v53;
          unsigned int v39 = HIDWORD(v54);
          if (HIDWORD(v54))
          {
            if (HIDWORD(v54) >= 0x5555556)
            {
              __break(0xC471u);
              return result;
            }
            uint64_t v31 = WTF::fastMalloc((WTF *)(48 * HIDWORD(v54)));
            LODWORD(v9) = 48 * v39 / 0x30;
            if ((WTF::StringImpl *)v31 == v15)
            {
              unint64_t v30 = v15;
            }
            else
            {
              unint64_t v30 = (WTF::StringImpl *)v31;
              WTF::VectorMover<false,WebCore::ShapeDetection::DetectedBarcode>::move(v15, (WTF::StringImpl *)((char *)v15 + 48 * v39), v31);
            }
          }
          if (v15)
          {
            if (v30 == v15)
            {
              LODWORD(v9) = 0;
              unint64_t v30 = 0;
              uint64_t v53 = 0;
              LODWORD(v54) = 0;
            }
            WTF::fastFree(v15, v4);
          }
          char v15 = v30;
          unsigned int v16 = v39;
          goto LABEL_21;
        }
      }
    }
    if (v9)
    {
      LODWORD(v54) = 48 * (int)v9 / 0x30u;
      uint64_t v53 = WTF::fastMalloc((WTF *)(48 * v9));
      while (1)
      {
        IPC::Decoder::decode<WebCore::ShapeDetection::DetectedBarcode>((uint64_t)&v46, a2);
        if (!v52) {
          break;
        }
        int v11 = HIDWORD(v54);
        if (HIDWORD(v54) == v54)
        {
          WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::DetectedBarcode>((unsigned int *)&v53, (unint64_t)&v46);
        }
        else
        {
          uint64_t v12 = v53 + 48 * HIDWORD(v54);
          *(_OWORD *)uint64_t v12 = v46;
          uint64_t v13 = v47;
          uint64_t v47 = 0;
          *(void *)(v12 + 16) = v13;
          *(unsigned char *)(v12 + 24) = v48;
          *(void *)(v12 + 32) = 0;
          *(void *)(v12 + 40) = 0;
          uint64_t v14 = v49;
          uint64_t v49 = 0;
          *(void *)(v12 + 32) = v14;
          LODWORD(v14) = v50;
          int v50 = 0;
          *(_DWORD *)(v12 + 40) = v14;
          LODWORD(v14) = v51;
          int v51 = 0;
          *(_DWORD *)(v12 + 44) = v14;
          HIDWORD(v54) = v11 + 1;
        }
        std::__optional_destruct_base<WebCore::ShapeDetection::DetectedBarcode,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v46, v10);
        if (!--v9)
        {
          char v15 = (WTF::StringImpl *)v53;
          LODWORD(v9) = v54;
          unsigned int v16 = HIDWORD(v54);
          goto LABEL_21;
        }
      }
LABEL_38:
      std::__optional_destruct_base<WebCore::ShapeDetection::DetectedBarcode,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v46, v10);
      WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v32);
LABEL_39:
      unint64_t v33 = *a2;
      unint64_t v34 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v35 = a2[3];
      if (v35 && v34)
      {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v35 + 16))(v35, v33);
        unint64_t v36 = *a2;
        unint64_t v37 = a2[1];
        unint64_t v38 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v38)
        {
          if (v37) {
            (*(void (**)(unint64_t, unint64_t))(*(void *)v38 + 16))(v38, v36);
          }
        }
      }
      else
      {
        *a2 = 0;
        a2[1] = 0;
      }
      return IPC::Connection::cancelReply<Messages::RemoteBarcodeDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
    unsigned int v16 = 0;
    char v15 = 0;
LABEL_21:
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    char v45 = 1;
    WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v4);
    v44[0] = 0;
    v44[1] = 0;
    unint64_t v40 = v15;
    int v41 = v9;
    unsigned int v42 = v16;
    WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v19);
    char v43 = 1;
    uint64_t v20 = *v2;
    uint64_t *v2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v20 + 16))(v20, &v40);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 8))(v20);
    if (v43) {
      return WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v21);
    }
  }
  else
  {
    uint64_t v17 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::RemoteBarcodeDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v17);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::RemoteBarcodeDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ShapeDetection::DetectedBarcode>(uint64_t a1, unint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedBarcode,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 48))
  {
    unint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF::StringImpl *)a2[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

__n128 WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::DetectedBarcode>(unsigned int *a1, unint64_t a2)
{
  uint64_t v3 = (__n128 *)WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = *(void *)a1 + 48 * a1[3];
  __n128 result = *v3;
  *(__n128 *)uint64_t v4 = *v3;
  unint64_t v6 = v3[1].n128_u64[0];
  v3[1].n128_u64[0] = 0;
  *(void *)(v4 + 16) = v6;
  *(unsigned char *)(v4 + 24) = v3[1].n128_u8[8];
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  unint64_t v7 = v3[2].n128_u64[0];
  v3[2].n128_u64[0] = 0;
  *(void *)(v4 + 32) = v7;
  LODWORD(v7) = v3[2].n128_u32[2];
  v3[2].n128_u32[2] = 0;
  *(_DWORD *)(v4 + 40) = v7;
  LODWORD(v7) = v3[2].n128_u32[3];
  v3[2].n128_u32[3] = 0;
  *(_DWORD *)(v4 + 44) = v7;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x199023C80);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)result + 48 * *((unsigned int *)result + 3));
    int v5 = 48 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)uint64_t v2 = v6;
    __n128 result = WTF::VectorMover<false,WebCore::ShapeDetection::DetectedBarcode>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ShapeDetection::DetectedBarcode>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      uint64_t v6 = *((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      *(void *)(a3 + 16) = v6;
      *(unsigned char *)(a3 + 24) = *((unsigned char *)v5 + 24);
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      uint64_t v7 = *((void *)v5 + 4);
      *((void *)v5 + 4) = 0;
      *(void *)(a3 + 32) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 10);
      *((_DWORD *)v5 + 10) = 0;
      *(_DWORD *)(a3 + 40) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 11);
      *((_DWORD *)v5 + 11) = 0;
      *(_DWORD *)(a3 + 44) = v7;
      unint64_t v8 = (WTF *)*((void *)v5 + 4);
      if (v8)
      {
        *((void *)v5 + 4) = 0;
        *((_DWORD *)v5 + 10) = 0;
        WTF::fastFree(v8, a2);
      }
      __n128 result = (WTF::StringImpl *)*((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      int v5 = (WTF::StringImpl *)((char *)v5 + 48);
      a3 += 48;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::ShapeDetection::DetectedBarcode,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 48))
  {
    unint64_t v3 = *(WTF **)(a1 + 32);
    if (v3)
    {
      *(void *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v3, a2);
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteBarcodeDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteBarcodeDetector::Detect &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::SupportsObjectIdentifierNullState<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E7DC8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteBarcodeDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteBarcodeDetector::Detect &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::SupportsObjectIdentifierNullState<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E7DC8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteBarcodeDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteBarcodeDetector::Detect &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::SupportsObjectIdentifierNullState<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteFaceDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E7DF0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteFaceDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E7DF0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteFaceDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && (uint64_t v4 = (void *)*a2) != 0)
  {
    unint64_t v5 = a2[1];
    unint64_t v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
    if (v5 < v6 || v5 - v6 <= 7)
    {
      *a2 = 0;
      a2[1] = 0;
      unint64_t v28 = a2[3];
      if (v28)
      {
        if (v5)
        {
          (*(void (**)(unint64_t))(*(void *)v28 + 16))(v28);
          unint64_t v48 = *a2;
          unint64_t v49 = a2[1];
          unint64_t v50 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          if (v50)
          {
            if (v49) {
              (*(void (**)(unint64_t, unint64_t))(*(void *)v50 + 16))(v50, v48);
            }
          }
        }
      }
      goto LABEL_33;
    }
    unint64_t v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v9 = *v8;
    a2[2] = (unint64_t)(v8 + 1);
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    if (v9 >= 0x6666)
    {
      while (1)
      {
        uint64_t result = IPC::Decoder::decode<WebCore::ShapeDetection::DetectedFace>((uint64_t)&v57, a2);
        int v32 = v62;
        if (v62)
        {
          unsigned int v33 = HIDWORD(v64);
          if (HIDWORD(v64) == v64)
          {
            uint64_t result = WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::DetectedFace>((uint64_t)&v63, (unint64_t)&v57);
          }
          else
          {
            uint64_t v34 = v63;
            uint64_t v35 = v63 + 40 * HIDWORD(v64);
            *(_OWORD *)uint64_t v35 = v57;
            *(unsigned char *)(v35 + 16) = 0;
            unint64_t v36 = (void *)(v35 + 16);
            *(unsigned char *)(v35 + 32) = 0;
            unint64_t v37 = (unsigned char *)(v35 + 32);
            if (v61)
            {
              *unint64_t v36 = 0;
              v36[1] = 0;
              uint64_t v38 = v58;
              uint64_t v58 = 0;
              *unint64_t v36 = v38;
              int v39 = v59;
              int v59 = 0;
              uint64_t v40 = v34 + 40 * v33;
              *(_DWORD *)(v40 + 24) = v39;
              int v41 = v60;
              int v60 = 0;
              *(_DWORD *)(v40 + 28) = v41;
              *unint64_t v37 = 1;
            }
            HIDWORD(v64) = v33 + 1;
          }
        }
        if (v62) {
          BOOL v42 = v61 == 0;
        }
        else {
          BOOL v42 = 1;
        }
        if (!v42) {
          uint64_t result = WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v4);
        }
        if (!v32) {
          goto LABEL_68;
        }
        if (!--v9)
        {
          LODWORD(v9) = v64;
          unsigned int v22 = HIDWORD(v64);
          IntSize v21 = (WTF *)v63;
          if (v64 <= HIDWORD(v64)) {
            goto LABEL_29;
          }
          char v43 = (WTF *)v63;
          if (HIDWORD(v64))
          {
            if (HIDWORD(v64) >= 0x6666667)
            {
              __break(0xC471u);
              return result;
            }
            uint64_t v44 = WTF::fastMalloc((WTF *)(40 * HIDWORD(v64)));
            LODWORD(v9) = 40 * v22 / 0x28;
            if ((WTF *)v44 == v21)
            {
              char v43 = v21;
            }
            else
            {
              char v43 = (WTF *)v44;
              WTF::VectorMover<false,WebCore::ShapeDetection::DetectedFace>::move((uint64_t)v21, (char *)v21 + 40 * v22, v44);
            }
          }
          if (v21)
          {
            if (v43 == v21)
            {
              LODWORD(v9) = 0;
              char v43 = 0;
            }
            WTF::fastFree(v21, v4);
          }
          IntSize v21 = v43;
          goto LABEL_29;
        }
      }
    }
    if (v9)
    {
      LODWORD(v64) = 40 * (int)v9 / 0x28u;
      uint64_t v63 = WTF::fastMalloc((WTF *)(40 * v9));
      while (1)
      {
        IPC::Decoder::decode<WebCore::ShapeDetection::DetectedFace>((uint64_t)&v57, a2);
        int v10 = v62;
        if (v62)
        {
          unsigned int v11 = HIDWORD(v64);
          if (HIDWORD(v64) == v64)
          {
            WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::DetectedFace>((uint64_t)&v63, (unint64_t)&v57);
          }
          else
          {
            uint64_t v12 = v63;
            uint64_t v13 = v63 + 40 * HIDWORD(v64);
            *(_OWORD *)uint64_t v13 = v57;
            *(unsigned char *)(v13 + 16) = 0;
            uint64_t v14 = (void *)(v13 + 16);
            *(unsigned char *)(v13 + 32) = 0;
            char v15 = (unsigned char *)(v13 + 32);
            if (v61)
            {
              void *v14 = 0;
              v14[1] = 0;
              uint64_t v16 = v58;
              uint64_t v58 = 0;
              void *v14 = v16;
              int v17 = v59;
              int v59 = 0;
              uint64_t v18 = v12 + 40 * v11;
              *(_DWORD *)(v18 + 24) = v17;
              int v19 = v60;
              int v60 = 0;
              *(_DWORD *)(v18 + 28) = v19;
              *char v15 = 1;
            }
            HIDWORD(v64) = v11 + 1;
          }
        }
        if (v62) {
          BOOL v20 = v61 == 0;
        }
        else {
          BOOL v20 = 1;
        }
        if (!v20) {
          WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v4);
        }
        if (!v10) {
          break;
        }
        if (!--v9)
        {
          IntSize v21 = (WTF *)v63;
          LODWORD(v9) = v64;
          unsigned int v22 = HIDWORD(v64);
          goto LABEL_29;
        }
      }
LABEL_68:
      WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v4);
LABEL_33:
      unint64_t v29 = *a2;
      unint64_t v30 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v31 = a2[3];
      if (v31 && v30)
      {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v31 + 16))(v31, v29);
        unint64_t v45 = *a2;
        unint64_t v46 = a2[1];
        unint64_t v47 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v47)
        {
          if (v46) {
            (*(void (**)(unint64_t, unint64_t))(*(void *)v47 + 16))(v47, v45);
          }
        }
      }
      else
      {
        *a2 = 0;
        a2[1] = 0;
      }
      return IPC::Connection::cancelReply<Messages::RemoteFaceDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
    unsigned int v22 = 0;
    IntSize v21 = 0;
LABEL_29:
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    char v56 = 1;
    WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v4);
    v55[0] = 0;
    v55[1] = 0;
    int v51 = v21;
    int v52 = v9;
    unsigned int v53 = v22;
    WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v55, v25);
    char v54 = 1;
    uint64_t v26 = *v2;
    uint64_t *v2 = 0;
    (*(void (**)(uint64_t, WTF **))(*(void *)v26 + 16))(v26, &v51);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 8))(v26);
    if (v54) {
      return WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v27);
    }
  }
  else
  {
    unint64_t v23 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::RemoteFaceDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v23);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::RemoteFaceDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

uint64_t IPC::Decoder::decode<WebCore::ShapeDetection::DetectedFace>(uint64_t a1, unint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedFace,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 40))
  {
    unint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::DetectedFace>(uint64_t a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)a1 + 40 * v4;
  *(_OWORD *)uint64_t v6 = *(_OWORD *)result;
  *(unsigned char *)(v6 + 16) = 0;
  uint64_t v7 = (void *)(v6 + 16);
  *(unsigned char *)(v6 + 32) = 0;
  unint64_t v8 = (unsigned char *)(v6 + 32);
  if (*(unsigned char *)(result + 32))
  {
    void *v7 = 0;
    v7[1] = 0;
    uint64_t v9 = *(void *)(result + 16);
    *(void *)(result + 16) = 0;
    void *v7 = v9;
    int v10 = *(_DWORD *)(result + 24);
    *(_DWORD *)(result + 24) = 0;
    uint64_t v11 = v5 + 40 * v4;
    *(_DWORD *)(v11 + 24) = v10;
    int v12 = *(_DWORD *)(result + 28);
    *(_DWORD *)(result + 28) = 0;
    *(_DWORD *)(v11 + 28) = v12;
    unsigned char *v8 = 1;
  }
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x199024800);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    unsigned int v4 = (void *)(*(void *)result + 40 * *(unsigned int *)(result + 12));
    int v5 = 40 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)uint64_t v2 = v6;
    unint64_t result = WTF::VectorMover<false,WebCore::ShapeDetection::DetectedFace>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::ShapeDetection::DetectedFace>::move(uint64_t result, void *a2, uint64_t a3)
{
  if ((void *)result != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      unint64_t result = v5 + v6;
      *(_OWORD *)uint64_t v7 = *(_OWORD *)(v5 + v6);
      *(unsigned char *)(a3 + v6 + 16) = 0;
      unint64_t v8 = (void *)(a3 + v6 + 16);
      *(unsigned char *)(v7 + 32) = 0;
      if (*(unsigned char *)(v5 + v6 + 32))
      {
        void *v8 = 0;
        *(void *)(a3 + v6 + 24) = 0;
        uint64_t v9 = *(void *)(result + 16);
        result += 16;
        *(void *)unint64_t result = 0;
        void *v8 = v9;
        int v10 = *(_DWORD *)(result + 8);
        *(_DWORD *)(result + 8) = 0;
        *(_DWORD *)(v7 + 24) = v10;
        int v11 = *(_DWORD *)(result + 12);
        *(_DWORD *)(result + 12) = 0;
        *(_DWORD *)(v7 + 28) = v11;
        *(unsigned char *)(v7 + 32) = 1;
        if (*(unsigned char *)(v5 + v6 + 32)) {
          unint64_t result = WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2);
        }
      }
      v6 += 40;
    }
    while ((void *)(v5 + v6) != a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteFaceDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteFaceDetector::Detect &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::SupportsObjectIdentifierNullState<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E7E18;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteFaceDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteFaceDetector::Detect &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::SupportsObjectIdentifierNullState<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E7E18;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteFaceDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteFaceDetector::Detect &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::SupportsObjectIdentifierNullState<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteTextDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E7E40;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteTextDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E7E40;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteTextDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && (unsigned int v4 = (void *)*a2) != 0)
  {
    unint64_t v5 = a2[1];
    unint64_t v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
    if (v5 < v6 || v5 - v6 <= 7)
    {
      *a2 = 0;
      a2[1] = 0;
      unint64_t v22 = a2[3];
      if (v22)
      {
        if (v5)
        {
          (*(void (**)(unint64_t))(*(void *)v22 + 16))(v22);
          unint64_t v23 = *a2;
          unint64_t v24 = a2[1];
          unint64_t v25 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          if (v25)
          {
            if (v24) {
              (*(void (**)(unint64_t, unint64_t))(*(void *)v25 + 16))(v25, v23);
            }
          }
        }
      }
      goto LABEL_39;
    }
    unint64_t v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v9 = *v8;
    a2[2] = (unint64_t)(v8 + 1);
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    if (v9 >= 0x6666)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::ShapeDetection::DetectedText>((uint64_t)&v46, a2);
        if (!v51) {
          goto LABEL_38;
        }
        int v26 = HIDWORD(v53);
        if (HIDWORD(v53) == v53)
        {
          WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::DetectedText>((unsigned int *)&v52, (unint64_t)&v46);
        }
        else
        {
          uint64_t v27 = v52 + 40 * HIDWORD(v53);
          *(_OWORD *)uint64_t v27 = v46;
          uint64_t v28 = v47;
          uint64_t v47 = 0;
          *(void *)(v27 + 24) = 0;
          *(void *)(v27 + 32) = 0;
          *(void *)(v27 + 16) = v28;
          uint64_t v29 = v48;
          uint64_t v48 = 0;
          *(void *)(v27 + 24) = v29;
          LODWORD(v29) = v49;
          int v49 = 0;
          *(_DWORD *)(v27 + 32) = v29;
          LODWORD(v29) = v50;
          int v50 = 0;
          *(_DWORD *)(v27 + 36) = v29;
          HIDWORD(v53) = v26 + 1;
        }
        uint64_t result = std::__optional_destruct_base<WebCore::ShapeDetection::DetectedText,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v46, v10);
        if (!--v9)
        {
          LODWORD(v9) = v53;
          char v15 = (WTF::StringImpl *)v52;
          if (v53 <= HIDWORD(v53))
          {
            unsigned int v16 = HIDWORD(v53);
            goto LABEL_21;
          }
          unint64_t v30 = (WTF::StringImpl *)v52;
          unsigned int v39 = HIDWORD(v53);
          if (HIDWORD(v53))
          {
            if (HIDWORD(v53) >= 0x6666667)
            {
              __break(0xC471u);
              return result;
            }
            uint64_t v31 = WTF::fastMalloc((WTF *)(40 * HIDWORD(v53)));
            LODWORD(v9) = 40 * v39 / 0x28;
            if ((WTF::StringImpl *)v31 == v15)
            {
              unint64_t v30 = v15;
            }
            else
            {
              unint64_t v30 = (WTF::StringImpl *)v31;
              WTF::VectorMover<false,WebCore::ShapeDetection::DetectedText>::move(v15, (WTF::StringImpl *)((char *)v15 + 40 * v39), v31);
            }
          }
          if (v15)
          {
            if (v30 == v15)
            {
              LODWORD(v9) = 0;
              unint64_t v30 = 0;
              uint64_t v52 = 0;
              LODWORD(v53) = 0;
            }
            WTF::fastFree(v15, v4);
          }
          char v15 = v30;
          unsigned int v16 = v39;
          goto LABEL_21;
        }
      }
    }
    if (v9)
    {
      LODWORD(v53) = 40 * (int)v9 / 0x28u;
      uint64_t v52 = WTF::fastMalloc((WTF *)(40 * v9));
      while (1)
      {
        IPC::Decoder::decode<WebCore::ShapeDetection::DetectedText>((uint64_t)&v46, a2);
        if (!v51) {
          break;
        }
        int v11 = HIDWORD(v53);
        if (HIDWORD(v53) == v53)
        {
          WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::DetectedText>((unsigned int *)&v52, (unint64_t)&v46);
        }
        else
        {
          uint64_t v12 = v52 + 40 * HIDWORD(v53);
          *(_OWORD *)uint64_t v12 = v46;
          uint64_t v13 = v47;
          uint64_t v47 = 0;
          *(void *)(v12 + 24) = 0;
          *(void *)(v12 + 32) = 0;
          *(void *)(v12 + 16) = v13;
          uint64_t v14 = v48;
          uint64_t v48 = 0;
          *(void *)(v12 + 24) = v14;
          LODWORD(v14) = v49;
          int v49 = 0;
          *(_DWORD *)(v12 + 32) = v14;
          LODWORD(v14) = v50;
          int v50 = 0;
          *(_DWORD *)(v12 + 36) = v14;
          HIDWORD(v53) = v11 + 1;
        }
        std::__optional_destruct_base<WebCore::ShapeDetection::DetectedText,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v46, v10);
        if (!--v9)
        {
          char v15 = (WTF::StringImpl *)v52;
          LODWORD(v9) = v53;
          unsigned int v16 = HIDWORD(v53);
          goto LABEL_21;
        }
      }
LABEL_38:
      std::__optional_destruct_base<WebCore::ShapeDetection::DetectedText,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v46, v10);
      WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v32);
LABEL_39:
      unint64_t v33 = *a2;
      unint64_t v34 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v35 = a2[3];
      if (v35 && v34)
      {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v35 + 16))(v35, v33);
        unint64_t v36 = *a2;
        unint64_t v37 = a2[1];
        unint64_t v38 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v38)
        {
          if (v37) {
            (*(void (**)(unint64_t, unint64_t))(*(void *)v38 + 16))(v38, v36);
          }
        }
      }
      else
      {
        *a2 = 0;
        a2[1] = 0;
      }
      return IPC::Connection::cancelReply<Messages::RemoteTextDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
    unsigned int v16 = 0;
    char v15 = 0;
LABEL_21:
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    char v45 = 1;
    WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v4);
    v44[0] = 0;
    v44[1] = 0;
    uint64_t v40 = v15;
    int v41 = v9;
    unsigned int v42 = v16;
    WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v19);
    char v43 = 1;
    uint64_t v20 = *v2;
    uint64_t *v2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v20 + 16))(v20, &v40);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 8))(v20);
    if (v43) {
      return WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v21);
    }
  }
  else
  {
    int v17 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::RemoteTextDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v17);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::RemoteTextDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ShapeDetection::DetectedText>(uint64_t a1, unint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedText,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 40))
  {
    unint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF::StringImpl *)a2[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

__n128 WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::DetectedText>(unsigned int *a1, unint64_t a2)
{
  uint64_t v3 = (__n128 *)WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = *(void *)a1 + 40 * a1[3];
  __n128 result = *v3;
  *(__n128 *)uint64_t v4 = *v3;
  unint64_t v6 = v3[1].n128_u64[0];
  v3[1].n128_u64[0] = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 16) = v6;
  unint64_t v7 = v3[1].n128_u64[1];
  v3[1].n128_u64[1] = 0;
  *(void *)(v4 + 24) = v7;
  LODWORD(v7) = v3[2].n128_u32[0];
  v3[2].n128_u32[0] = 0;
  *(_DWORD *)(v4 + 32) = v7;
  LODWORD(v7) = v3[2].n128_u32[1];
  v3[2].n128_u32[1] = 0;
  *(_DWORD *)(v4 + 36) = v7;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x1990252A0);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)result + 40 * *((unsigned int *)result + 3));
    int v5 = 40 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)uint64_t v2 = v6;
    __n128 result = WTF::VectorMover<false,WebCore::ShapeDetection::DetectedText>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ShapeDetection::DetectedText>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      uint64_t v6 = *((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 16) = v6;
      uint64_t v7 = *((void *)v5 + 3);
      *((void *)v5 + 3) = 0;
      *(void *)(a3 + 24) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 8);
      *((_DWORD *)v5 + 8) = 0;
      *(_DWORD *)(a3 + 32) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 9);
      *((_DWORD *)v5 + 9) = 0;
      *(_DWORD *)(a3 + 36) = v7;
      unint64_t v8 = (WTF *)*((void *)v5 + 3);
      if (v8)
      {
        *((void *)v5 + 3) = 0;
        *((_DWORD *)v5 + 8) = 0;
        WTF::fastFree(v8, a2);
      }
      __n128 result = (WTF::StringImpl *)*((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      int v5 = (WTF::StringImpl *)((char *)v5 + 40);
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::ShapeDetection::DetectedText,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    unint64_t v3 = *(WTF **)(a1 + 24);
    if (v3)
    {
      *(void *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      WTF::fastFree(v3, a2);
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteTextDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteTextDetector::Detect &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::SupportsObjectIdentifierNullState<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E7E68;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteTextDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteTextDetector::Detect &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::SupportsObjectIdentifierNullState<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E7E68;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteTextDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteTextDetector::Detect &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::SupportsObjectIdentifierNullState<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void WebKit::RemoteDisplayListRecorderProxy::~RemoteDisplayListRecorderProxy(WebKit::RemoteDisplayListRecorderProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9E7EB8;
  uint64_t v3 = *((void *)this + 483);
  *((void *)this + 483) = 0;
  if (v3) {
    std::default_delete<WebKit::SharedVideoFrameWriter>::operator()[abi:sn180100](v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 481);
  *((void *)this + 481) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  int v5 = (atomic_uchar *)*((void *)this + 479);
  *((void *)this + 479) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  }

  MEMORY[0x1F416C510](this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteDisplayListRecorderProxy::~RemoteDisplayListRecorderProxy(this, a2);

  WTF::fastFree(v2, v3);
}

unsigned char *WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(unsigned char *this)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (this[248])
  {
    uint64_t v1 = this;
    uint64_t v2 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *((void *)v1 + 8);
      LODWORD(v6[0]) = 134217984;
      *(void *)((char *)v6 + 4) = v3;
      _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::didBecomeUnresponsive", (uint8_t *)v6, 0xCu);
    }
    v1[248] = 0;
    uint64_t v4 = *((void *)v1 + 5);
    *((void *)v1 + 5) = 0;
    int v5 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v5 = &unk_1EE9EA470;
    v5[1] = v4;
    v6[0] = v5;
    WTF::ensureOnMainRunLoop();
    this = (unsigned char *)v6[0];
    v6[0] = 0;
    if (this) {
      return (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)this + 8))(this);
    }
  }
  return this;
}

uint64_t WebKit::RemoteDisplayListRecorderProxy::renderingMode(WebKit::RemoteDisplayListRecorderProxy *this)
{
  return *((unsigned __int8 *)this + 3856);
}

void WebKit::RemoteDisplayListRecorderProxy::recordRotate(WebKit::RemoteDisplayListRecorderProxy *this, float a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  float v47 = a2;
  uint64_t v2 = *((void *)this + 481);
  if (v2)
  {
    uint64_t v4 = *(WebKit::RemoteRenderingBackendProxy **)(v2 + 8);
    if (v4)
    {
      WebKit::RemoteRenderingBackendProxy::connection(v4, &v49);
      int v5 = v49;
      if (v49)
      {
        uint64_t v6 = (WebKit::RemoteImageBufferProxy *)*((void *)this + 479);
        if (v6)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6, *((void *)this + 480), &v48);
          uint64_t v6 = v48;
          if (v48 && !*((unsigned char *)v48 + 4016))
          {
            *((unsigned char *)v48 + 4016) = 1;
            uint64_t v6 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v6);
          }
        }
        else
        {
          uint64_t v48 = 0;
        }
        uint64_t v7 = *((void *)this + 478);
        double v8 = *((double *)v5 + 15);
        double v9 = INFINITY;
        if (fabs(v8) != INFINITY)
        {
          WTF::ApproximateTime::now(v6);
          double v9 = v8 + v10;
        }
        if (*((void *)v5 + 7) == v7)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 16), buf, v9);
            if (!buf[16]) {
              goto LABEL_58;
            }
            uint64_t v12 = *(void *)buf;
            unint64_t v13 = *(void *)&buf[8];
            unint64_t v14 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v15 = v14 - *(void *)buf;
            if (v14 < *(void *)buf)
            {
              unint64_t v17 = 0;
              unint64_t v16 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v16 = 0;
              if (v15 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v17 = 0;
              }
              else
              {
                unint64_t v17 = 0;
                if (v15 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v15) = 869;
                  unint64_t v16 = v13;
                  unint64_t v17 = v15 + 2;
                }
              }
            }
            uint64_t v18 = (float *)((v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v17)
            {
              int v19 = (char *)v18 - v12;
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL) {
                goto LABEL_63;
              }
              unint64_t v17 = (unint64_t)(v19 + 4);
              if ((unint64_t)(v19 + 4) > v16) {
                goto LABEL_63;
              }
              float *v18 = v47;
            }
            if (v16)
            {
              unint64_t v20 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v21 = *((void *)v5 + 8);
              if (v20 + 16 >= v21) {
                unint64_t v20 = 0;
              }
              if (v17 <= 0x10) {
                unint64_t v17 = 16;
              }
              unint64_t v22 = v20 + v17;
              if (v21 <= v22) {
                unint64_t v23 = 0;
              }
              else {
                unint64_t v23 = v22;
              }
              *((void *)v5 + 10) = v23;
              unint64_t v24 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v23);
              atomic_uint v25 = v5[29];
              if (v24 == 0x80000000 || v25 != 0)
              {
                unsigned int v28 = v25 + 1;
                v5[29] = v28;
                if (v28 >= v5[28])
                {
                  if (*((unsigned char *)v5 + 104)) {
                    MEMORY[0x1997420B0](v5[23]);
                  }
                  v5[29] = 0;
                }
              }
              goto LABEL_31;
            }
LABEL_63:
            uint64_t v29 = buf[16];
            if (buf[16])
            {
              IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)v5 + 1);
              int v44 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::Rotate>((uint64_t)v50, &v47, v7);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
              if (!v44) {
                goto LABEL_31;
              }
              goto LABEL_58;
            }
            __break(1u);
LABEL_68:
            unint64_t v33 = v16;
LABEL_45:
            unint64_t v34 = (void *)((v29 + v33 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v34 >= v29 + v33)
            {
              unint64_t v35 = (char *)v34 - v29;
              if ((unint64_t)v34 - v29 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_58;
              }
              unint64_t v33 = (unint64_t)(v35 + 8);
              if ((unint64_t)(v35 + 8) > v16) {
                goto LABEL_58;
              }
              void *v34 = v7;
            }
            if (!v16) {
              goto LABEL_58;
            }
            unint64_t v36 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v37 = *((void *)v5 + 8);
            if (v36 + 16 >= v37) {
              unint64_t v36 = 0;
            }
            if (v33 <= 0x10) {
              unint64_t v33 = 16;
            }
            unint64_t v38 = v36 + v33;
            if (v37 <= v38) {
              unint64_t v39 = 0;
            }
            else {
              unint64_t v39 = v38;
            }
            *((void *)v5 + 10) = v39;
            IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v5, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v39) == 0x80000000);
            *((void *)v5 + 7) = v7;
          }
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 16), buf, v9);
        if (buf[16])
        {
          uint64_t v29 = *(void *)buf;
          unint64_t v30 = *(void *)&buf[8];
          unint64_t v31 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v32 = v31 - *(void *)buf;
          if (v31 < *(void *)buf)
          {
            unint64_t v33 = 0;
            unint64_t v16 = *(void *)&buf[8];
          }
          else
          {
            unint64_t v16 = 0;
            if (v32 > 0xFFFFFFFFFFFFFFFDLL) {
              goto LABEL_68;
            }
            unint64_t v33 = 0;
            if (v32 + 2 <= *(void *)&buf[8])
            {
              *(_WORD *)(*(void *)buf + v32) = 2871;
              unint64_t v16 = v30;
              unint64_t v33 = v32 + 2;
            }
          }
          goto LABEL_45;
        }
LABEL_58:
        uint64_t v40 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          int v41 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_Rotate";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v41;
          _os_log_impl(&dword_1985F2000, v40, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v42 = *((void *)this + 481);
        if (v42)
        {
          char v43 = *(unsigned char **)(v42 + 8);
          if (v43) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v43);
          }
        }
LABEL_31:
        uint64_t v27 = v48;
        uint64_t v48 = 0;
        if (v27) {
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageBuffer,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)v27 + 1, v11);
        }
        int v49 = 0;
        if (atomic_fetch_add(v5, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v5);
          IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v5, v11);
          WTF::fastFree(v45, v46);
        }
      }
    }
  }
}

void WebKit::RemoteDisplayListRecorderProxy::recordSetCTM(WebKit::RemoteDisplayListRecorderProxy *this, const WebCore::AffineTransform *a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 481);
  if (!v2) {
    return;
  }
  uint64_t v4 = *(WebKit::RemoteRenderingBackendProxy **)(v2 + 8);
  if (!v4) {
    return;
  }
  WebKit::RemoteRenderingBackendProxy::connection(v4, &v65);
  uint64_t v6 = v65;
  if (!v65) {
    return;
  }
  uint64_t v7 = (WebKit::RemoteImageBufferProxy *)*((void *)this + 479);
  if (v7)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v7, *((void *)this + 480), &v64);
    uint64_t v7 = v64;
    if (v64 && !*((unsigned char *)v64 + 4016))
    {
      *((unsigned char *)v64 + 4016) = 1;
      uint64_t v7 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v7);
    }
  }
  else
  {
    uint64_t v64 = 0;
  }
  uint64_t v8 = *((void *)this + 478);
  double v9 = *((double *)v6 + 15);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(v7);
    double v10 = v9 + v11;
  }
  if (*((void *)v6 + 7) == v8) {
    goto LABEL_9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 16), buf, v10);
  if (!buf[16]) {
    goto LABEL_83;
  }
  uint64_t v26 = *(void *)buf;
  unint64_t v27 = *(void *)&buf[8];
  unint64_t v28 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v29 = v28 - *(void *)buf;
  BOOL v30 = v28 >= *(void *)buf;
  unint64_t v31 = v28 - *(void *)buf + 2;
  BOOL v33 = v29 < 0xFFFFFFFFFFFFFFFELL && v31 <= *(void *)&buf[8];
  if (v30 && v33) {
    goto LABEL_45;
  }
  if (!v30)
  {
    unint64_t v31 = 0;
    goto LABEL_46;
  }
  unint64_t v34 = 0;
  if (v29 > 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v31 = 0;
    goto LABEL_47;
  }
  unint64_t v31 = 0;
  if (v29 + 2 <= *(void *)&buf[8])
  {
    unint64_t v31 = v29 + 2;
LABEL_45:
    *(_WORD *)(*(void *)buf + v29) = 2871;
LABEL_46:
    unint64_t v34 = v27;
  }
LABEL_47:
  unint64_t v35 = (v26 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v35 >= v26 + v31)
  {
    unint64_t v36 = v35 - v26;
    if (v36 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_83;
    }
    unint64_t v31 = v36 + 8;
    if (v36 + 8 > v34) {
      goto LABEL_83;
    }
    *(void *)(v26 + v36) = v8;
  }
  if (!v34)
  {
LABEL_83:
    long long v57 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v58 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_SetCTM";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v58;
      _os_log_impl(&dword_1985F2000, v57, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v59 = *((void *)this + 481);
    if (v59)
    {
      int v60 = *(unsigned char **)(v59 + 8);
      if (v60) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v60);
      }
    }
    goto LABEL_27;
  }
  unint64_t v37 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v38 = *((void *)v6 + 8);
  if (v37 + 16 >= v38) {
    unint64_t v37 = 0;
  }
  if (v31 <= 0x10) {
    unint64_t v31 = 16;
  }
  unint64_t v39 = v37 + v31;
  if (v38 <= v39) {
    unint64_t v40 = 0;
  }
  else {
    unint64_t v40 = v39;
  }
  *((void *)v6 + 10) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v40);
  atomic_uint v42 = v6[29];
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    v6[29] = v44;
    if (v44 >= v6[28])
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](v6[23]);
      }
      v6[29] = 0;
    }
  }
  *((void *)v6 + 7) = v8;
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 16), &v67, v10);
  if (!v69) {
    goto LABEL_83;
  }
  *(void *)long long buf = v67;
  *(void *)&buf[8] = v68;
  *(void *)&uint8_t buf[16] = 0;
  unint64_t v12 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v13 = v12 >= v67;
  unint64_t v14 = v12 - v67;
  if (v13)
  {
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v68)
    {
      *(void *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v67 + v14) = 872;
      *(void *)&uint8_t buf[16] = v14 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode((uint64_t *)buf, a2);
  if (!*(void *)&buf[8])
  {
    uint64_t v63 = v8;
    unint64_t v47 = v69;
    if (v69)
    {
      unint64_t v48 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v49 = v48 - v67;
      if (v48 < v67)
      {
        unint64_t v47 = 0;
      }
      else
      {
        unint64_t v47 = 0;
        if (v49 <= 0xFFFFFFFFFFFFFFFDLL && v49 + 2 <= v68)
        {
          *(_WORD *)(v67 + v49) = 2870;
          unint64_t v47 = v49 + 2;
        }
      }
      unint64_t v50 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *((void *)v6 + 8);
      if (v50 + 16 < v16)
      {
LABEL_76:
        if (v47 <= 0x10) {
          unint64_t v47 = 16;
        }
        unint64_t v51 = v50 + v47;
        if (v16 <= v51) {
          unint64_t v51 = 0;
        }
        *((void *)v6 + 10) = v51;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v51);
        v6[29] = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v66, (uint64_t **)v6 + 1);
        uint64_t v52 = v66;
        uint64_t v53 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v53 = 872;
        *((void *)v53 + 1) = v63;
        *((void *)v53 + 66) = (char *)v53 + 16;
        *((void *)v53 + 67) = 512;
        *((void *)v53 + 68) = 0;
        *((void *)v53 + 70) = 0;
        *((void *)v53 + 69) = 0;
        IPC::Encoder::encodeHeader(v53);
        *(void *)long long buf = v53;
        IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(v53, (double *)a2);
        int v55 = IPC::Connection::sendMessageImpl((uint64_t)v52, (uint64_t *)buf, 1, 0);
        char v56 = *(IPC::Encoder **)buf;
        *(void *)long long buf = 0;
        if (v56)
        {
          IPC::Encoder::~Encoder(v56, v54);
          WTF::fastFree(v61, v62);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
        if (!v55) {
          goto LABEL_27;
        }
        goto LABEL_83;
      }
    }
    else
    {
      __break(1u);
    }
    unint64_t v50 = 0;
    goto LABEL_76;
  }
  uint64_t v17 = *(void *)&buf[16];
  unint64_t v18 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v19 = *((void *)v6 + 8);
  if (v18 + 16 >= v19) {
    unint64_t v18 = 0;
  }
  if (*(void *)&buf[16] <= 0x10uLL) {
    uint64_t v17 = 16;
  }
  unint64_t v20 = v18 + v17;
  if (v19 <= v20) {
    unint64_t v20 = 0;
  }
  *((void *)v6 + 10) = v20;
  unint64_t v21 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v20);
  atomic_uint v22 = v6[29];
  if (v21 == 0x80000000 || v22 != 0)
  {
    unsigned int v25 = v22 + 1;
    v6[29] = v25;
    if (v25 >= v6[28])
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](v6[23]);
      }
      v6[29] = 0;
    }
  }
LABEL_27:
  unint64_t v24 = v64;
  uint64_t v64 = 0;
  if (v24) {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageBuffer,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)v24 + 1, v15);
  }
  uint64_t v65 = 0;
  if (atomic_fetch_add(v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v6);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v6, v15);
    WTF::fastFree(v45, v46);
  }
}

void WebKit::RemoteDisplayListRecorderProxy::recordConcatenateCTM(WebKit::RemoteDisplayListRecorderProxy *this, const WebCore::AffineTransform *a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 481);
  if (!v2) {
    return;
  }
  uint64_t v4 = *(WebKit::RemoteRenderingBackendProxy **)(v2 + 8);
  if (!v4) {
    return;
  }
  WebKit::RemoteRenderingBackendProxy::connection(v4, &v65);
  uint64_t v6 = v65;
  if (!v65) {
    return;
  }
  uint64_t v7 = (WebKit::RemoteImageBufferProxy *)*((void *)this + 479);
  if (v7)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v7, *((void *)this + 480), &v64);
    uint64_t v7 = v64;
    if (v64 && !*((unsigned char *)v64 + 4016))
    {
      *((unsigned char *)v64 + 4016) = 1;
      uint64_t v7 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v7);
    }
  }
  else
  {
    uint64_t v64 = 0;
  }
  uint64_t v8 = *((void *)this + 478);
  double v9 = *((double *)v6 + 15);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(v7);
    double v10 = v9 + v11;
  }
  if (*((void *)v6 + 7) == v8) {
    goto LABEL_9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 16), buf, v10);
  if (!buf[16]) {
    goto LABEL_83;
  }
  uint64_t v26 = *(void *)buf;
  unint64_t v27 = *(void *)&buf[8];
  unint64_t v28 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v29 = v28 - *(void *)buf;
  BOOL v30 = v28 >= *(void *)buf;
  unint64_t v31 = v28 - *(void *)buf + 2;
  BOOL v33 = v29 < 0xFFFFFFFFFFFFFFFELL && v31 <= *(void *)&buf[8];
  if (v30 && v33) {
    goto LABEL_45;
  }
  if (!v30)
  {
    unint64_t v31 = 0;
    goto LABEL_46;
  }
  unint64_t v34 = 0;
  if (v29 > 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v31 = 0;
    goto LABEL_47;
  }
  unint64_t v31 = 0;
  if (v29 + 2 <= *(void *)&buf[8])
  {
    unint64_t v31 = v29 + 2;
LABEL_45:
    *(_WORD *)(*(void *)buf + v29) = 2871;
LABEL_46:
    unint64_t v34 = v27;
  }
LABEL_47:
  unint64_t v35 = (v26 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v35 >= v26 + v31)
  {
    unint64_t v36 = v35 - v26;
    if (v36 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_83;
    }
    unint64_t v31 = v36 + 8;
    if (v36 + 8 > v34) {
      goto LABEL_83;
    }
    *(void *)(v26 + v36) = v8;
  }
  if (!v34)
  {
LABEL_83:
    long long v57 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v58 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_ConcatenateCTM";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v58;
      _os_log_impl(&dword_1985F2000, v57, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v59 = *((void *)this + 481);
    if (v59)
    {
      int v60 = *(unsigned char **)(v59 + 8);
      if (v60) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v60);
      }
    }
    goto LABEL_27;
  }
  unint64_t v37 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v38 = *((void *)v6 + 8);
  if (v37 + 16 >= v38) {
    unint64_t v37 = 0;
  }
  if (v31 <= 0x10) {
    unint64_t v31 = 16;
  }
  unint64_t v39 = v37 + v31;
  if (v38 <= v39) {
    unint64_t v40 = 0;
  }
  else {
    unint64_t v40 = v39;
  }
  *((void *)v6 + 10) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v40);
  atomic_uint v42 = v6[29];
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    v6[29] = v44;
    if (v44 >= v6[28])
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](v6[23]);
      }
      v6[29] = 0;
    }
  }
  *((void *)v6 + 7) = v8;
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 16), &v67, v10);
  if (!v69) {
    goto LABEL_83;
  }
  *(void *)long long buf = v67;
  *(void *)&buf[8] = v68;
  *(void *)&uint8_t buf[16] = 0;
  unint64_t v12 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v13 = v12 >= v67;
  unint64_t v14 = v12 - v67;
  if (v13)
  {
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v68)
    {
      *(void *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v67 + v14) = 832;
      *(void *)&uint8_t buf[16] = v14 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode((uint64_t *)buf, a2);
  if (!*(void *)&buf[8])
  {
    uint64_t v63 = v8;
    unint64_t v47 = v69;
    if (v69)
    {
      unint64_t v48 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v49 = v48 - v67;
      if (v48 < v67)
      {
        unint64_t v47 = 0;
      }
      else
      {
        unint64_t v47 = 0;
        if (v49 <= 0xFFFFFFFFFFFFFFFDLL && v49 + 2 <= v68)
        {
          *(_WORD *)(v67 + v49) = 2870;
          unint64_t v47 = v49 + 2;
        }
      }
      unint64_t v50 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *((void *)v6 + 8);
      if (v50 + 16 < v16)
      {
LABEL_76:
        if (v47 <= 0x10) {
          unint64_t v47 = 16;
        }
        unint64_t v51 = v50 + v47;
        if (v16 <= v51) {
          unint64_t v51 = 0;
        }
        *((void *)v6 + 10) = v51;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v51);
        v6[29] = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v66, (uint64_t **)v6 + 1);
        uint64_t v52 = v66;
        uint64_t v53 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v53 = 832;
        *((void *)v53 + 1) = v63;
        *((void *)v53 + 66) = (char *)v53 + 16;
        *((void *)v53 + 67) = 512;
        *((void *)v53 + 68) = 0;
        *((void *)v53 + 70) = 0;
        *((void *)v53 + 69) = 0;
        IPC::Encoder::encodeHeader(v53);
        *(void *)long long buf = v53;
        IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(v53, (double *)a2);
        int v55 = IPC::Connection::sendMessageImpl((uint64_t)v52, (uint64_t *)buf, 1, 0);
        char v56 = *(IPC::Encoder **)buf;
        *(void *)long long buf = 0;
        if (v56)
        {
          IPC::Encoder::~Encoder(v56, v54);
          WTF::fastFree(v61, v62);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
        if (!v55) {
          goto LABEL_27;
        }
        goto LABEL_83;
      }
    }
    else
    {
      __break(1u);
    }
    unint64_t v50 = 0;
    goto LABEL_76;
  }
  uint64_t v17 = *(void *)&buf[16];
  unint64_t v18 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v19 = *((void *)v6 + 8);
  if (v18 + 16 >= v19) {
    unint64_t v18 = 0;
  }
  if (*(void *)&buf[16] <= 0x10uLL) {
    uint64_t v17 = 16;
  }
  unint64_t v20 = v18 + v17;
  if (v19 <= v20) {
    unint64_t v20 = 0;
  }
  *((void *)v6 + 10) = v20;
  unint64_t v21 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v20);
  atomic_uint v22 = v6[29];
  if (v21 == 0x80000000 || v22 != 0)
  {
    unsigned int v25 = v22 + 1;
    v6[29] = v25;
    if (v25 >= v6[28])
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](v6[23]);
      }
      v6[29] = 0;
    }
  }
LABEL_27:
  unint64_t v24 = v64;
  uint64_t v64 = 0;
  if (v24) {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageBuffer,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)v24 + 1, v15);
  }
  uint64_t v65 = 0;
  if (atomic_fetch_add(v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v6);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v6, v15);
    WTF::fastFree(v45, v46);
  }
}

void WebKit::RemoteDisplayListRecorderProxy::recordSetInlineFillColor(void *a1, int a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  int v50 = a2;
  unint64_t v51 = &v50;
  uint64_t v2 = a1[481];
  if (v2)
  {
    uint64_t v4 = *(WebKit::RemoteRenderingBackendProxy **)(v2 + 8);
    if (v4)
    {
      WebKit::RemoteRenderingBackendProxy::connection(v4, &v53);
      int v5 = v53;
      if (v53)
      {
        uint64_t v6 = (WebKit::RemoteImageBufferProxy *)a1[479];
        if (v6)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6, a1[480], &v52);
          uint64_t v6 = v52;
          if (v52 && !*((unsigned char *)v52 + 4016))
          {
            *((unsigned char *)v52 + 4016) = 1;
            uint64_t v6 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v6);
          }
        }
        else
        {
          uint64_t v52 = 0;
        }
        uint64_t v7 = a1[478];
        double v8 = *((double *)v5 + 15);
        double v9 = INFINITY;
        if (fabs(v8) != INFINITY)
        {
          WTF::ApproximateTime::now(v6);
          double v9 = v8 + v10;
        }
        if (*((void *)v5 + 7) == v7)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 16), &v54, v9);
            if (!v56) {
              goto LABEL_77;
            }
            *(void *)long long buf = v54;
            *(void *)&buf[8] = v55;
            *(void *)&uint8_t buf[16] = 0;
            unint64_t v11 = (v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
            BOOL v12 = v11 >= v54;
            unint64_t v13 = v11 - v54;
            if (v12)
            {
              if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v55)
              {
                *(void *)&buf[8] = 0;
              }
              else
              {
                *(_WORD *)(v54 + v13) = 873;
                *(void *)&uint8_t buf[16] = v13 + 2;
              }
            }
            IPC::StreamConnectionEncoder::operator<<<int const&>(buf, v51);
            if (*(void *)&buf[8])
            {
              uint64_t v18 = *(void *)&buf[16];
              unint64_t v19 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v20 = *((void *)v5 + 8);
              if (v19 + 16 >= v20) {
                unint64_t v19 = 0;
              }
              if (*(void *)&buf[16] <= 0x10uLL) {
                uint64_t v18 = 16;
              }
              unint64_t v21 = v19 + v18;
              if (v20 <= v21) {
                unint64_t v21 = 0;
              }
              *((void *)v5 + 10) = v21;
              unint64_t v22 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v21);
              atomic_uint v23 = v5[29];
              if (v22 == 0x80000000 || v23 != 0)
              {
                unsigned int v26 = v23 + 1;
                v5[29] = v26;
                if (v26 >= v5[28])
                {
                  if (*((unsigned char *)v5 + 104)) {
                    MEMORY[0x1997420B0](v5[23]);
                  }
                  v5[29] = 0;
                }
              }
              goto LABEL_27;
            }
            uint64_t v27 = v56;
            if (v56)
            {
              IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, v54, v55);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v5 + 1);
              int v45 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::SetInlineFillColor>(*(uint64_t *)buf, &v51, v7);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
              if (v45) {
                goto LABEL_77;
              }
              goto LABEL_27;
            }
            __break(1u);
LABEL_83:
            if (!v15) {
              break;
            }
            unint64_t v32 = 0;
            if (v17 > 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v29 = 0;
            }
            else
            {
              unint64_t v29 = 0;
              if (v17 + 2 <= v16)
              {
                unint64_t v29 = v17 + 2;
LABEL_45:
                *(_WORD *)(v27 + v17) = 2871;
                goto LABEL_46;
              }
            }
LABEL_47:
            unint64_t v33 = (v27 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v33 >= v27 + v29)
            {
              unint64_t v34 = v33 - v27;
              if (v34 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_77;
              }
              unint64_t v29 = v34 + 8;
              if (v34 + 8 > v32) {
                goto LABEL_77;
              }
              *(void *)(v27 + v34) = v7;
            }
            if (!v32) {
              goto LABEL_77;
            }
            unint64_t v35 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v36 = *((void *)v5 + 8);
            if (v35 + 16 >= v36) {
              unint64_t v35 = 0;
            }
            if (v29 <= 0x10) {
              unint64_t v29 = 16;
            }
            unint64_t v37 = v35 + v29;
            if (v36 <= v37) {
              unint64_t v38 = 0;
            }
            else {
              unint64_t v38 = v37;
            }
            *((void *)v5 + 10) = v38;
            unint64_t v39 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v38);
            atomic_uint v40 = v5[29];
            if (v39 == 0x80000000 || v40 != 0)
            {
              unsigned int v42 = v40 + 1;
              v5[29] = v42;
              if (v42 >= v5[28])
              {
                if (*((unsigned char *)v5 + 104)) {
                  MEMORY[0x1997420B0](v5[23]);
                }
                v5[29] = 0;
              }
            }
            *((void *)v5 + 7) = v7;
          }
          unint64_t v29 = 0;
LABEL_46:
          unint64_t v32 = v16;
          goto LABEL_47;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 16), buf, v9);
        if (buf[16])
        {
          uint64_t v27 = *(void *)buf;
          unint64_t v16 = *(void *)&buf[8];
          unint64_t v28 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v17 = v28 - *(void *)buf;
          BOOL v15 = v28 >= *(void *)buf;
          unint64_t v29 = v28 - *(void *)buf + 2;
          BOOL v31 = v17 < 0xFFFFFFFFFFFFFFFELL && v29 <= *(void *)&buf[8];
          if (!v15 || !v31) {
            goto LABEL_83;
          }
          goto LABEL_45;
        }
LABEL_77:
        long long v46 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v47 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_SetInlineFillColor";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v47;
          _os_log_impl(&dword_1985F2000, v46, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v48 = a1[481];
        if (v48)
        {
          unint64_t v49 = *(unsigned char **)(v48 + 8);
          if (v49) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v49);
          }
        }
LABEL_27:
        unsigned int v25 = v52;
        uint64_t v52 = 0;
        if (v25) {
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageBuffer,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)v25 + 1, v14);
        }
        uint64_t v53 = 0;
        if (atomic_fetch_add(v5, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v5);
          IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v5, v14);
          WTF::fastFree(v43, v44);
        }
      }
    }
  }
}

void *WebKit::RemoteDisplayListRecorderProxy::recordSetInlineStroke(void *result, uint64_t *a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  long long v57 = a2;
  uint64_t v2 = result[481];
  if (v2)
  {
    uint64_t v3 = result;
    __n128 result = *(void **)(v2 + 8);
    if (result)
    {
      __n128 result = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (atomic_uint **)&v59);
      uint64_t v4 = v59;
      if (v59)
      {
        int v5 = (WebKit::RemoteImageBufferProxy *)v3[479];
        if (v5)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v5, v3[480], &v58);
          int v5 = v58;
          if (v58 && !*((unsigned char *)v58 + 4016))
          {
            *((unsigned char *)v58 + 4016) = 1;
            int v5 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v5);
          }
        }
        else
        {
          uint64_t v58 = 0;
        }
        uint64_t v6 = v3[478];
        double v7 = *((double *)v4 + 15);
        double v8 = INFINITY;
        if (fabs(v7) != INFINITY)
        {
          WTF::ApproximateTime::now(v5);
          double v8 = v7 + v9;
        }
        if (*((void *)v4 + 7) == v6)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, &v60, v8);
            if (!v62) {
              goto LABEL_89;
            }
            *(void *)long long buf = v60;
            *(void *)&buf[8] = v61;
            *(void *)&uint8_t buf[16] = 0;
            unint64_t v10 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
            BOOL v11 = v10 >= v60;
            unint64_t v12 = v10 - v60;
            if (v11)
            {
              if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v61)
              {
                *(void *)&buf[8] = 0;
              }
              else
              {
                *(_WORD *)(v60 + v12) = 874;
                *(void *)&uint8_t buf[16] = v12 + 2;
              }
            }
            IPC::ArgumentCoder<WebCore::DisplayList::SetInlineStroke,void>::encode(buf, v57);
            if (*(void *)&buf[8])
            {
              uint64_t v17 = *(void *)&buf[16];
              unint64_t v18 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v19 = *((void *)v4 + 8);
              if (v18 + 16 >= v19) {
                unint64_t v18 = 0;
              }
              if (*(void *)&buf[16] <= 0x10uLL) {
                uint64_t v17 = 16;
              }
              unint64_t v20 = v18 + v17;
              if (v19 <= v20) {
                unint64_t v20 = 0;
              }
              *((void *)v4 + 10) = v20;
              unint64_t v21 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v20);
              int v22 = *((_DWORD *)v4 + 29);
              if (v21 == 0x80000000 || v22 != 0)
              {
                unsigned int v32 = v22 + 1;
                *((_DWORD *)v4 + 29) = v32;
                if (v32 >= *((_DWORD *)v4 + 28))
                {
                  if (*((unsigned char *)v4 + 104)) {
                    MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                  }
                  *((_DWORD *)v4 + 29) = 0;
                }
              }
              goto LABEL_27;
            }
            uint64_t v33 = v62;
            if (v62)
            {
              IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v4, v60, v61);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v4 + 1);
              int v52 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::SetInlineStroke>(*(uint64_t *)buf, &v57, v6);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
              if (v52) {
                goto LABEL_89;
              }
              goto LABEL_27;
            }
            __break(1u);
LABEL_95:
            if (!v14) {
              break;
            }
            unint64_t v38 = 0;
            if (v16 > 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v35 = 0;
            }
            else
            {
              unint64_t v35 = 0;
              if (v16 + 2 <= v15)
              {
                unint64_t v35 = v16 + 2;
LABEL_56:
                *(_WORD *)(v33 + v16) = 2871;
                goto LABEL_57;
              }
            }
LABEL_58:
            unint64_t v39 = (v33 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v39 >= v33 + v35)
            {
              unint64_t v40 = v39 - v33;
              if (v40 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_89;
              }
              unint64_t v35 = v40 + 8;
              if (v40 + 8 > v38) {
                goto LABEL_89;
              }
              *(void *)(v33 + v40) = v6;
            }
            if (!v38) {
              goto LABEL_89;
            }
            unint64_t v41 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v42 = *((void *)v4 + 8);
            if (v41 + 16 >= v42) {
              unint64_t v41 = 0;
            }
            if (v35 <= 0x10) {
              unint64_t v35 = 16;
            }
            unint64_t v43 = v41 + v35;
            if (v42 <= v43) {
              unint64_t v44 = 0;
            }
            else {
              unint64_t v44 = v43;
            }
            *((void *)v4 + 10) = v44;
            unint64_t v45 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v44);
            int v46 = *((_DWORD *)v4 + 29);
            if (v45 == 0x80000000 || v46 != 0)
            {
              unsigned int v48 = v46 + 1;
              *((_DWORD *)v4 + 29) = v48;
              if (v48 >= *((_DWORD *)v4 + 28))
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                }
                *((_DWORD *)v4 + 29) = 0;
              }
            }
            *((void *)v4 + 7) = v6;
          }
          unint64_t v35 = 0;
LABEL_57:
          unint64_t v38 = v15;
          goto LABEL_58;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, buf, v8);
        if (buf[16])
        {
          uint64_t v33 = *(void *)buf;
          unint64_t v15 = *(void *)&buf[8];
          unint64_t v34 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v16 = v34 - *(void *)buf;
          BOOL v14 = v34 >= *(void *)buf;
          unint64_t v35 = v34 - *(void *)buf + 2;
          BOOL v37 = v16 < 0xFFFFFFFFFFFFFFFELL && v35 <= *(void *)&buf[8];
          if (!v14 || !v37) {
            goto LABEL_95;
          }
          goto LABEL_56;
        }
LABEL_89:
        uint64_t v53 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v54 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_SetInlineStroke";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v54;
          _os_log_impl(&dword_1985F2000, v53, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v55 = v3[481];
        if (v55)
        {
          unsigned __int8 v56 = *(unsigned char **)(v55 + 8);
          if (v56) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v56);
          }
        }
LABEL_27:
        unint64_t v24 = v58;
        uint64_t v58 = 0;
        if (v24)
        {
          char v25 = 0;
          uint64_t v26 = *((void *)v24 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v26, (unsigned __int8 *)&v25, 1u, memory_order_acquire, memory_order_acquire);
          if (v25) {
            MEMORY[0x19972E8D0](v26);
          }
          uint64_t v27 = *(void *)(v26 + 8);
          int v28 = 1;
          uint64_t v29 = v27 - 1;
          *(void *)(v26 + 8) = v27 - 1;
          if (v27 == 1)
          {
            uint64_t v51 = *(void *)(v26 + 16);
            uint64_t v30 = *(void *)(v26 + 24);
            *(void *)(v26 + 24) = 0;
            BOOL v31 = v51 != 0;
          }
          else
          {
            uint64_t v30 = 0;
            BOOL v31 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v26, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
          if (v28 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v26);
          }
          if (!v29)
          {
            if (v30) {
              (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
            }
            if (!v31) {
              WTF::fastFree((WTF *)v26, v13);
            }
          }
        }
        __n128 result = v59;
        uint64_t v59 = 0;
        if (result)
        {
          if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)result);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result, v13);
            return (void *)WTF::fastFree(v49, v50);
          }
        }
      }
    }
  }
  return result;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordSetLineCap(void *result, char a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = result[481];
  if (!v2) {
    return result;
  }
  uint64_t v3 = result;
  __n128 result = *(void **)(v2 + 8);
  if (!result) {
    return result;
  }
  __n128 result = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (atomic_uint **)&v65);
  int v5 = v65;
  if (!v65) {
    return result;
  }
  uint64_t v6 = v3[479];
  if (v6) {
    goto LABEL_90;
  }
  uint64_t v64 = 0;
  while (1)
  {
    uint64_t v7 = v3[478];
    double v8 = *((double *)v5 + 15);
    double v9 = INFINITY;
    if (fabs(v8) != INFINITY)
    {
      WTF::ApproximateTime::now((WTF::ApproximateTime *)v6);
      double v9 = v8 + v10;
    }
    if (*((void *)v5 + 7) != v7)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
      if (!buf[16]) {
        goto LABEL_81;
      }
      uint64_t v33 = *(void *)buf;
      unint64_t v34 = *(void *)&buf[8];
      unint64_t v35 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v36 = v35 - *(void *)buf;
      if (v35 < *(void *)buf)
      {
        unint64_t v38 = 0;
        unint64_t v37 = *(void *)&buf[8];
      }
      else
      {
        unint64_t v37 = 0;
        if (v36 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v38 = 0;
        }
        else
        {
          unint64_t v38 = 0;
          if (v36 + 2 <= *(void *)&buf[8])
          {
            *(_WORD *)(*(void *)buf + v36) = 2871;
            unint64_t v37 = v34;
            unint64_t v38 = v36 + 2;
          }
        }
      }
      unint64_t v39 = (void *)((v33 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v39 >= v33 + v38)
      {
        unint64_t v40 = (char *)v39 - v33;
        if ((unint64_t)v39 - v33 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_81;
        }
        unint64_t v38 = (unint64_t)(v40 + 8);
        if ((unint64_t)(v40 + 8) > v37) {
          goto LABEL_81;
        }
        void *v39 = v7;
      }
      if (!v37) {
        goto LABEL_81;
      }
      unint64_t v41 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *((void *)v5 + 8);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v38 <= 0x10) {
        unint64_t v38 = 16;
      }
      unint64_t v43 = v41 + v38;
      if (v42 <= v43) {
        unint64_t v44 = 0;
      }
      else {
        unint64_t v44 = v43;
      }
      *((void *)v5 + 10) = v44;
      unint64_t v45 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v44);
      int v46 = *((_DWORD *)v5 + 29);
      if (v45 == 0x80000000 || v46 != 0)
      {
        unsigned int v48 = v46 + 1;
        *((_DWORD *)v5 + 29) = v48;
        if (v48 >= *((_DWORD *)v5 + 28))
        {
          if (*((unsigned char *)v5 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
          }
          *((_DWORD *)v5 + 29) = 0;
        }
      }
      *((void *)v5 + 7) = v7;
    }
    uint64_t v6 = IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
    if (!buf[16]) {
      goto LABEL_81;
    }
    BOOL v11 = *(unsigned char **)buf;
    unint64_t v12 = *(void *)&buf[8];
    unint64_t v13 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    if (v13 < *(void *)buf)
    {
      unint64_t v15 = 0;
    }
    else
    {
      unint64_t v14 = v13 - *(void *)buf;
      if (v13 - *(void *)buf > 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_77;
      }
      unint64_t v15 = v14 + 2;
      if (v14 + 2 > *(void *)&buf[8]) {
        goto LABEL_77;
      }
      *(_WORD *)(*(void *)buf + v14) = 875;
    }
    if (v15 < v12)
    {
      v11[v15] = a2;
      uint64_t v16 = *((void *)v5 + 9);
      unint64_t v17 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v18 = *((void *)v5 + 8);
      if (v17 + 16 >= v18) {
        unint64_t v17 = 0;
      }
      if (v15 <= 0xF) {
        unint64_t v15 = 15;
      }
      unint64_t v19 = v15 + v17;
      if (v18 > v19 + 1) {
        unint64_t v20 = v19 + 1;
      }
      else {
        unint64_t v20 = 0;
      }
      *((void *)v5 + 10) = v20;
      unint64_t v21 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v16 + 16) + 128), v20);
      int v22 = *((_DWORD *)v5 + 29);
      if (v21 == 0x80000000 || v22 != 0)
      {
        unsigned int v32 = v22 + 1;
        *((_DWORD *)v5 + 29) = v32;
        if (v32 >= *((_DWORD *)v5 + 28))
        {
          if (*((unsigned char *)v5 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
          }
          *((_DWORD *)v5 + 29) = 0;
        }
      }
      goto LABEL_27;
    }
    if (buf[16]) {
      break;
    }
LABEL_89:
    __break(1u);
LABEL_90:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6, v3[480], &v64);
    uint64_t v6 = (uint64_t)v64;
    if (v64 && !*((unsigned char *)v64 + 4016))
    {
      *((unsigned char *)v64 + 4016) = 1;
      uint64_t v6 = WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange((WebKit::RemoteImageBufferProxy *)v6);
    }
  }
  BOOL v11 = *(unsigned char **)buf;
  unint64_t v12 = *(void *)&buf[8];
LABEL_77:
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, (unint64_t)v11, v12);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v5 + 1);
  int v5 = v66;
  int v52 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v52 = 875;
  *((void *)v52 + 1) = v7;
  *((void *)v52 + 66) = (char *)v52 + 16;
  *((void *)v52 + 67) = 512;
  *((void *)v52 + 68) = 0;
  *((void *)v52 + 70) = 0;
  *((void *)v52 + 69) = 0;
  IPC::Encoder::encodeHeader(v52);
  unint64_t v67 = v52;
  uint64_t v53 = (unsigned char *)IPC::Encoder::grow(v52, 1uLL, 1);
  if (!v54)
  {
    uint64_t v6 = 831;
    __break(0xC471u);
    goto LABEL_89;
  }
  *uint64_t v53 = a2;
  int v56 = IPC::Connection::sendMessageImpl((uint64_t)v5, (uint64_t *)&v67, 1, 0);
  long long v57 = v67;
  unint64_t v67 = 0;
  if (v57)
  {
    IPC::Encoder::~Encoder(v57, v55);
    WTF::fastFree(v62, v63);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v56)
  {
LABEL_81:
    uint64_t v58 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v59 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_SetLineCap";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v59;
      _os_log_impl(&dword_1985F2000, v58, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v60 = v3[481];
    if (v60)
    {
      unint64_t v61 = *(unsigned char **)(v60 + 8);
      if (v61) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v61);
      }
    }
  }
LABEL_27:
  unint64_t v24 = v64;
  uint64_t v64 = 0;
  if (v24)
  {
    char v25 = 0;
    uint64_t v26 = *((void *)v24 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v26, (unsigned __int8 *)&v25, 1u, memory_order_acquire, memory_order_acquire);
    if (v25) {
      MEMORY[0x19972E8D0](v26);
    }
    uint64_t v27 = *(void *)(v26 + 8);
    int v28 = 1;
    uint64_t v29 = v27 - 1;
    *(void *)(v26 + 8) = v27 - 1;
    if (v27 == 1)
    {
      uint64_t v51 = *(void *)(v26 + 16);
      uint64_t v30 = *(void *)(v26 + 24);
      *(void *)(v26 + 24) = 0;
      BOOL v31 = v51 != 0;
    }
    else
    {
      uint64_t v30 = 0;
      BOOL v31 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v26, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
    if (v28 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v26);
    }
    if (!v29)
    {
      if (v30) {
        (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
      }
      if (!v31) {
        WTF::fastFree((WTF *)v26, v11);
      }
    }
  }
  __n128 result = v65;
  uint64_t v65 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result, v11);
      return (void *)WTF::fastFree(v49, v50);
    }
  }
  return result;
}

WTF *WebKit::RemoteDisplayListRecorderProxy::recordSetLineDash(void *a1, uint64_t a2, float a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v59, a2);
  float v61 = a3;
  unsigned __int8 v62 = &v59;
  uint64_t v6 = a1[481];
  if (v6)
  {
    uint64_t v7 = *(WebKit::RemoteRenderingBackendProxy **)(v6 + 8);
    if (v7)
    {
      WebKit::RemoteRenderingBackendProxy::connection(v7, (atomic_uint **)&v64);
      double v8 = v64;
      if (v64)
      {
        double v9 = (WTF::ApproximateTime *)a1[479];
        if (v9) {
          goto LABEL_88;
        }
        uint64_t v63 = 0;
        while (1)
        {
          uint64_t v10 = a1[478];
          double v11 = *((double *)v8 + 15);
          double v12 = INFINITY;
          if (fabs(v11) != INFINITY)
          {
            WTF::ApproximateTime::now(v9);
            double v12 = v11 + v13;
          }
          if (*((void *)v8 + 7) != v10)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, buf, v12);
            if (!buf[16]) {
              goto LABEL_81;
            }
            uint64_t v35 = *(void *)buf;
            unint64_t v36 = *(void *)&buf[8];
            unint64_t v37 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v38 = v37 - *(void *)buf;
            if (v37 < *(void *)buf)
            {
              unint64_t v40 = 0;
              unint64_t v39 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v39 = 0;
              if (v38 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v40 = 0;
              }
              else
              {
                unint64_t v40 = 0;
                if (v38 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v38) = 2871;
                  unint64_t v39 = v36;
                  unint64_t v40 = v38 + 2;
                }
              }
            }
            unint64_t v41 = (void *)((v35 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v41 >= v35 + v40)
            {
              unint64_t v42 = (char *)v41 - v35;
              if ((unint64_t)v41 - v35 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_81;
              }
              unint64_t v40 = (unint64_t)(v42 + 8);
              if ((unint64_t)(v42 + 8) > v39) {
                goto LABEL_81;
              }
              void *v41 = v10;
            }
            if (!v39) {
              goto LABEL_81;
            }
            unint64_t v43 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v44 = *((void *)v8 + 8);
            if (v43 + 16 >= v44) {
              unint64_t v43 = 0;
            }
            if (v40 <= 0x10) {
              unint64_t v40 = 16;
            }
            unint64_t v45 = v43 + v40;
            if (v44 <= v45) {
              unint64_t v46 = 0;
            }
            else {
              unint64_t v46 = v45;
            }
            *((void *)v8 + 10) = v46;
            unint64_t v47 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v46);
            int v48 = *((_DWORD *)v8 + 29);
            if (v47 == 0x80000000 || v48 != 0)
            {
              unsigned int v50 = v48 + 1;
              *((_DWORD *)v8 + 29) = v50;
              if (v50 >= *((_DWORD *)v8 + 28))
              {
                if (*((unsigned char *)v8 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v8 + 23));
                }
                *((_DWORD *)v8 + 29) = 0;
              }
            }
            *((void *)v8 + 7) = v10;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, &v65, v12);
          if (!v67) {
            goto LABEL_81;
          }
          *(void *)long long buf = v65;
          *(void *)&buf[8] = v66;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v14 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v15 = v14 >= v65;
          unint64_t v16 = v14 - v65;
          if (v15)
          {
            if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v66)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v65 + v16) = 876;
              *(void *)&uint8_t buf[16] = v16 + 2;
            }
          }
          double v9 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::DisplayList::SetLineDash,void>::encode(buf, (uint64_t)v62);
          if (*(void *)&buf[8])
          {
            uint64_t v17 = *(void *)&buf[16];
            unint64_t v18 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v19 = *((void *)v8 + 8);
            if (v18 + 16 >= v19) {
              unint64_t v18 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v17 = 16;
            }
            unint64_t v20 = v18 + v17;
            if (v19 <= v20) {
              unint64_t v20 = 0;
            }
            *((void *)v8 + 10) = v20;
            unint64_t v21 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v20);
            int v22 = *((_DWORD *)v8 + 29);
            if (v21 == 0x80000000 || v22 != 0)
            {
              unsigned int v34 = v22 + 1;
              *((_DWORD *)v8 + 29) = v34;
              if (v34 >= *((_DWORD *)v8 + 28))
              {
                if (*((unsigned char *)v8 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v8 + 23));
                }
                *((_DWORD *)v8 + 29) = 0;
              }
            }
            goto LABEL_27;
          }
          if (v67) {
            break;
          }
          __break(1u);
LABEL_88:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v9, a1[480], &v63);
          double v9 = v63;
          if (v63 && !*((unsigned char *)v63 + 4016))
          {
            *((unsigned char *)v63 + 4016) = 1;
            double v9 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v9);
          }
        }
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v8, v65, v66);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v8 + 1);
        int v54 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::SetLineDash>(*(uint64_t *)buf, (const void ***)&v62, v10);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        if (!v54) {
          goto LABEL_27;
        }
LABEL_81:
        uint64_t v55 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          int v56 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_SetLineDash";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v56;
          _os_log_impl(&dword_1985F2000, v55, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v57 = a1[481];
        if (v57)
        {
          uint64_t v58 = *(unsigned char **)(v57 + 8);
          if (v58) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v58);
          }
        }
LABEL_27:
        unint64_t v24 = v63;
        uint64_t v63 = 0;
        if (v24)
        {
          char v25 = 0;
          uint64_t v26 = *((void *)v24 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v26, (unsigned __int8 *)&v25, 1u, memory_order_acquire, memory_order_acquire);
          if (v25) {
            MEMORY[0x19972E8D0](v26);
          }
          uint64_t v27 = *(void *)(v26 + 8);
          int v28 = 1;
          uint64_t v29 = v27 - 1;
          *(void *)(v26 + 8) = v27 - 1;
          if (v27 == 1)
          {
            uint64_t v53 = *(void *)(v26 + 16);
            uint64_t v30 = *(void *)(v26 + 24);
            *(void *)(v26 + 24) = 0;
            BOOL v31 = v53 != 0;
          }
          else
          {
            uint64_t v30 = 0;
            BOOL v31 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v26, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
          if (v28 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v26);
          }
          if (!v29)
          {
            if (v30) {
              (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
            }
            if (!v31) {
              WTF::fastFree((WTF *)v26, v5);
            }
          }
        }
        unsigned int v32 = (unsigned int *)v64;
        uint64_t v64 = 0;
        if (v32 && atomic_fetch_add((atomic_uint *volatile)v32, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v32);
          IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v32, v5);
          WTF::fastFree(v51, v52);
        }
      }
    }
  }
  __n128 result = v59;
  if (v59)
  {
    uint64_t v59 = 0;
    int v60 = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordSetLineJoin(void *result, char a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = result[481];
  if (!v2) {
    return result;
  }
  uint64_t v3 = result;
  __n128 result = *(void **)(v2 + 8);
  if (!result) {
    return result;
  }
  __n128 result = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (atomic_uint **)&v65);
  int v5 = v65;
  if (!v65) {
    return result;
  }
  uint64_t v6 = v3[479];
  if (v6) {
    goto LABEL_90;
  }
  uint64_t v64 = 0;
  while (1)
  {
    uint64_t v7 = v3[478];
    double v8 = *((double *)v5 + 15);
    double v9 = INFINITY;
    if (fabs(v8) != INFINITY)
    {
      WTF::ApproximateTime::now((WTF::ApproximateTime *)v6);
      double v9 = v8 + v10;
    }
    if (*((void *)v5 + 7) != v7)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
      if (!buf[16]) {
        goto LABEL_81;
      }
      uint64_t v33 = *(void *)buf;
      unint64_t v34 = *(void *)&buf[8];
      unint64_t v35 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v36 = v35 - *(void *)buf;
      if (v35 < *(void *)buf)
      {
        unint64_t v38 = 0;
        unint64_t v37 = *(void *)&buf[8];
      }
      else
      {
        unint64_t v37 = 0;
        if (v36 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v38 = 0;
        }
        else
        {
          unint64_t v38 = 0;
          if (v36 + 2 <= *(void *)&buf[8])
          {
            *(_WORD *)(*(void *)buf + v36) = 2871;
            unint64_t v37 = v34;
            unint64_t v38 = v36 + 2;
          }
        }
      }
      unint64_t v39 = (void *)((v33 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v39 >= v33 + v38)
      {
        unint64_t v40 = (char *)v39 - v33;
        if ((unint64_t)v39 - v33 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_81;
        }
        unint64_t v38 = (unint64_t)(v40 + 8);
        if ((unint64_t)(v40 + 8) > v37) {
          goto LABEL_81;
        }
        void *v39 = v7;
      }
      if (!v37) {
        goto LABEL_81;
      }
      unint64_t v41 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *((void *)v5 + 8);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v38 <= 0x10) {
        unint64_t v38 = 16;
      }
      unint64_t v43 = v41 + v38;
      if (v42 <= v43) {
        unint64_t v44 = 0;
      }
      else {
        unint64_t v44 = v43;
      }
      *((void *)v5 + 10) = v44;
      unint64_t v45 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v44);
      int v46 = *((_DWORD *)v5 + 29);
      if (v45 == 0x80000000 || v46 != 0)
      {
        unsigned int v48 = v46 + 1;
        *((_DWORD *)v5 + 29) = v48;
        if (v48 >= *((_DWORD *)v5 + 28))
        {
          if (*((unsigned char *)v5 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
          }
          *((_DWORD *)v5 + 29) = 0;
        }
      }
      *((void *)v5 + 7) = v7;
    }
    uint64_t v6 = IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
    if (!buf[16]) {
      goto LABEL_81;
    }
    double v11 = *(unsigned char **)buf;
    unint64_t v12 = *(void *)&buf[8];
    unint64_t v13 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    if (v13 < *(void *)buf)
    {
      unint64_t v15 = 0;
    }
    else
    {
      unint64_t v14 = v13 - *(void *)buf;
      if (v13 - *(void *)buf > 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_77;
      }
      unint64_t v15 = v14 + 2;
      if (v14 + 2 > *(void *)&buf[8]) {
        goto LABEL_77;
      }
      *(_WORD *)(*(void *)buf + v14) = 877;
    }
    if (v15 < v12)
    {
      v11[v15] = a2;
      uint64_t v16 = *((void *)v5 + 9);
      unint64_t v17 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v18 = *((void *)v5 + 8);
      if (v17 + 16 >= v18) {
        unint64_t v17 = 0;
      }
      if (v15 <= 0xF) {
        unint64_t v15 = 15;
      }
      unint64_t v19 = v15 + v17;
      if (v18 > v19 + 1) {
        unint64_t v20 = v19 + 1;
      }
      else {
        unint64_t v20 = 0;
      }
      *((void *)v5 + 10) = v20;
      unint64_t v21 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v16 + 16) + 128), v20);
      int v22 = *((_DWORD *)v5 + 29);
      if (v21 == 0x80000000 || v22 != 0)
      {
        unsigned int v32 = v22 + 1;
        *((_DWORD *)v5 + 29) = v32;
        if (v32 >= *((_DWORD *)v5 + 28))
        {
          if (*((unsigned char *)v5 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
          }
          *((_DWORD *)v5 + 29) = 0;
        }
      }
      goto LABEL_27;
    }
    if (buf[16]) {
      break;
    }
LABEL_89:
    __break(1u);
LABEL_90:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6, v3[480], &v64);
    uint64_t v6 = (uint64_t)v64;
    if (v64 && !*((unsigned char *)v64 + 4016))
    {
      *((unsigned char *)v64 + 4016) = 1;
      uint64_t v6 = WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange((WebKit::RemoteImageBufferProxy *)v6);
    }
  }
  double v11 = *(unsigned char **)buf;
  unint64_t v12 = *(void *)&buf[8];
LABEL_77:
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, (unint64_t)v11, v12);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v5 + 1);
  int v5 = v66;
  int v52 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v52 = 877;
  *((void *)v52 + 1) = v7;
  *((void *)v52 + 66) = (char *)v52 + 16;
  *((void *)v52 + 67) = 512;
  *((void *)v52 + 68) = 0;
  *((void *)v52 + 70) = 0;
  *((void *)v52 + 69) = 0;
  IPC::Encoder::encodeHeader(v52);
  char v67 = v52;
  uint64_t v53 = (unsigned char *)IPC::Encoder::grow(v52, 1uLL, 1);
  if (!v54)
  {
    uint64_t v6 = 831;
    __break(0xC471u);
    goto LABEL_89;
  }
  *uint64_t v53 = a2;
  int v56 = IPC::Connection::sendMessageImpl((uint64_t)v5, (uint64_t *)&v67, 1, 0);
  uint64_t v57 = v67;
  char v67 = 0;
  if (v57)
  {
    IPC::Encoder::~Encoder(v57, v55);
    WTF::fastFree(v62, v63);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v56)
  {
LABEL_81:
    uint64_t v58 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v59 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_SetLineJoin";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v59;
      _os_log_impl(&dword_1985F2000, v58, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v60 = v3[481];
    if (v60)
    {
      float v61 = *(unsigned char **)(v60 + 8);
      if (v61) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v61);
      }
    }
  }
LABEL_27:
  unint64_t v24 = v64;
  uint64_t v64 = 0;
  if (v24)
  {
    char v25 = 0;
    uint64_t v26 = *((void *)v24 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v26, (unsigned __int8 *)&v25, 1u, memory_order_acquire, memory_order_acquire);
    if (v25) {
      MEMORY[0x19972E8D0](v26);
    }
    uint64_t v27 = *(void *)(v26 + 8);
    int v28 = 1;
    uint64_t v29 = v27 - 1;
    *(void *)(v26 + 8) = v27 - 1;
    if (v27 == 1)
    {
      uint64_t v51 = *(void *)(v26 + 16);
      uint64_t v30 = *(void *)(v26 + 24);
      *(void *)(v26 + 24) = 0;
      BOOL v31 = v51 != 0;
    }
    else
    {
      uint64_t v30 = 0;
      BOOL v31 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v26, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
    if (v28 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v26);
    }
    if (!v29)
    {
      if (v30) {
        (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
      }
      if (!v31) {
        WTF::fastFree((WTF *)v26, v11);
      }
    }
  }
  __n128 result = v65;
  unint64_t v65 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result, v11);
      return (void *)WTF::fastFree(v49, v50);
    }
  }
  return result;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordSetMiterLimit(void *this, float a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this[481];
  if (!v2) {
    return this;
  }
  uint64_t v3 = this;
  this = *(void **)(v2 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v67);
  int v5 = v67;
  if (!v67) {
    return this;
  }
  uint64_t v6 = (WTF::ApproximateTime *)v3[479];
  if (v6) {
    goto LABEL_92;
  }
  unint64_t v66 = 0;
  while (1)
  {
    uint64_t v7 = v3[478];
    double v8 = *((double *)v5 + 15);
    double v9 = INFINITY;
    if (fabs(v8) != INFINITY)
    {
      WTF::ApproximateTime::now(v6);
      double v9 = v8 + v10;
    }
    if (*((void *)v5 + 7) != v7)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
      if (!buf[16]) {
        goto LABEL_83;
      }
      uint64_t v36 = *(void *)buf;
      unint64_t v37 = *(void *)&buf[8];
      unint64_t v38 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v39 = v38 - *(void *)buf;
      if (v38 < *(void *)buf)
      {
        unint64_t v41 = 0;
        unint64_t v40 = *(void *)&buf[8];
      }
      else
      {
        unint64_t v40 = 0;
        if (v39 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v41 = 0;
        }
        else
        {
          unint64_t v41 = 0;
          if (v39 + 2 <= *(void *)&buf[8])
          {
            *(_WORD *)(*(void *)buf + v39) = 2871;
            unint64_t v40 = v37;
            unint64_t v41 = v39 + 2;
          }
        }
      }
      unint64_t v42 = (void *)((v36 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v42 >= v36 + v41)
      {
        unint64_t v43 = (char *)v42 - v36;
        if ((unint64_t)v42 - v36 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_83;
        }
        unint64_t v41 = (unint64_t)(v43 + 8);
        if ((unint64_t)(v43 + 8) > v40) {
          goto LABEL_83;
        }
        void *v42 = v7;
      }
      if (!v40) {
        goto LABEL_83;
      }
      unint64_t v44 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v45 = *((void *)v5 + 8);
      if (v44 + 16 >= v45) {
        unint64_t v44 = 0;
      }
      if (v41 <= 0x10) {
        unint64_t v41 = 16;
      }
      unint64_t v46 = v44 + v41;
      if (v45 <= v46) {
        unint64_t v47 = 0;
      }
      else {
        unint64_t v47 = v46;
      }
      *((void *)v5 + 10) = v47;
      unint64_t v48 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v47);
      int v49 = *((_DWORD *)v5 + 29);
      if (v48 == 0x80000000 || v49 != 0)
      {
        unsigned int v51 = v49 + 1;
        *((_DWORD *)v5 + 29) = v51;
        if (v51 >= *((_DWORD *)v5 + 28))
        {
          if (*((unsigned char *)v5 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
          }
          *((_DWORD *)v5 + 29) = 0;
        }
      }
      *((void *)v5 + 7) = v7;
    }
    uint64_t v6 = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
    if (!buf[16]) {
      goto LABEL_83;
    }
    uint64_t v12 = *(void *)buf;
    unint64_t v13 = *(void *)&buf[8];
    unint64_t v14 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v15 = v14 - *(void *)buf;
    if (v14 < *(void *)buf)
    {
      unint64_t v17 = 0;
      unint64_t v16 = *(void *)&buf[8];
    }
    else
    {
      unint64_t v16 = 0;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v17 = 0;
      }
      else
      {
        unint64_t v17 = 0;
        if (v15 + 2 <= *(void *)&buf[8])
        {
          *(_WORD *)(*(void *)buf + v15) = 878;
          unint64_t v16 = v13;
          unint64_t v17 = v15 + 2;
        }
      }
    }
    unint64_t v18 = (float *)((v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v18 >= v12 + v17)
    {
      unint64_t v19 = (char *)v18 - v12;
      if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL) {
        goto LABEL_79;
      }
      unint64_t v17 = (unint64_t)(v19 + 4);
      if ((unint64_t)(v19 + 4) > v16) {
        goto LABEL_79;
      }
      float *v18 = a2;
    }
    if (v16)
    {
      unint64_t v20 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v21 = *((void *)v5 + 8);
      if (v20 + 16 >= v21) {
        unint64_t v20 = 0;
      }
      if (v17 <= 0x10) {
        unint64_t v17 = 16;
      }
      unint64_t v22 = v20 + v17;
      if (v21 <= v22) {
        unint64_t v23 = 0;
      }
      else {
        unint64_t v23 = v22;
      }
      *((void *)v5 + 10) = v23;
      unint64_t v24 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v23);
      int v25 = *((_DWORD *)v5 + 29);
      if (v24 == 0x80000000 || v25 != 0)
      {
        unsigned int v35 = v25 + 1;
        *((_DWORD *)v5 + 29) = v35;
        if (v35 >= *((_DWORD *)v5 + 28))
        {
          if (*((unsigned char *)v5 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
          }
          *((_DWORD *)v5 + 29) = 0;
        }
      }
      goto LABEL_31;
    }
LABEL_79:
    if (buf[16]) {
      break;
    }
    __break(1u);
LABEL_92:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6, v3[480], &v66);
    uint64_t v6 = v66;
    if (v66 && !*((unsigned char *)v66 + 4016))
    {
      *((unsigned char *)v66 + 4016) = 1;
      uint64_t v6 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v6);
    }
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v68, (uint64_t **)v5 + 1);
  uint64_t v55 = v68;
  int v56 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v56 = 878;
  *((void *)v56 + 1) = v7;
  *((void *)v56 + 66) = (char *)v56 + 16;
  *((void *)v56 + 67) = 512;
  *((void *)v56 + 68) = 0;
  *((void *)v56 + 70) = 0;
  *((void *)v56 + 69) = 0;
  IPC::Encoder::encodeHeader(v56);
  uint64_t v69 = v56;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v56, a2);
  int v58 = IPC::Connection::sendMessageImpl((uint64_t)v55, (uint64_t *)&v69, 1, 0);
  uint64_t v59 = v69;
  uint64_t v69 = 0;
  if (v59)
  {
    IPC::Encoder::~Encoder(v59, v57);
    WTF::fastFree(v64, v65);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v68);
  if (v58)
  {
LABEL_83:
    uint64_t v60 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      float v61 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_SetMiterLimit";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v61;
      _os_log_impl(&dword_1985F2000, v60, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v62 = v3[481];
    if (v62)
    {
      uint64_t v63 = *(unsigned char **)(v62 + 8);
      if (v63) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v63);
      }
    }
  }
LABEL_31:
  uint64_t v27 = v66;
  unint64_t v66 = 0;
  if (v27)
  {
    char v28 = 0;
    uint64_t v29 = *((void *)v27 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v29, (unsigned __int8 *)&v28, 1u, memory_order_acquire, memory_order_acquire);
    if (v28) {
      MEMORY[0x19972E8D0](v29);
    }
    uint64_t v30 = *(void *)(v29 + 8);
    int v31 = 1;
    uint64_t v32 = v30 - 1;
    *(void *)(v29 + 8) = v30 - 1;
    if (v30 == 1)
    {
      uint64_t v54 = *(void *)(v29 + 16);
      uint64_t v33 = *(void *)(v29 + 24);
      *(void *)(v29 + 24) = 0;
      BOOL v34 = v54 != 0;
    }
    else
    {
      uint64_t v33 = 0;
      BOOL v34 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v29, (unsigned __int8 *)&v31, 0, memory_order_release, memory_order_relaxed);
    if (v31 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v29);
    }
    if (!v32)
    {
      if (v33) {
        (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
      }
      if (!v34) {
        WTF::fastFree((WTF *)v29, v11);
      }
    }
  }
  this = v67;
  char v67 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v11);
      return (void *)WTF::fastFree(v52, v53);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordClearDropShadow(void *this)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = this[481];
  if (!v1) {
    return this;
  }
  uint64_t v2 = this;
  this = *(void **)(v1 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v66);
  if (!v66) {
    return this;
  }
  uint64_t v3 = v2[479];
  char v4 = 1;
  if (!v3)
  {
    uint64_t v5 = 0;
    goto LABEL_6;
  }
  char v41 = 0;
  uint64_t v5 = v2[480];
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v41, 1u, memory_order_acquire, memory_order_acquire);
  if (v41) {
    this = (void *)MEMORY[0x19972E8D0](v3);
  }
  if (*(void *)(v3 + 24)) {
    ++*(void *)(v3 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  int v42 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v42, 0, memory_order_release, memory_order_relaxed);
  if (v42 == 1)
  {
    if (!v5) {
      goto LABEL_6;
    }
  }
  else
  {
    this = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (!v5) {
      goto LABEL_6;
    }
  }
  if (!*(unsigned char *)(v5 + 4016))
  {
    *(unsigned char *)(v5 + 4016) = 1;
    this = (void *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v5);
    if (this) {
      this = (void *)(*(uint64_t (**)(void *))(*this + 160))(this);
    }
  }
  char v4 = 0;
LABEL_6:
  uint64_t v6 = v66;
  uint64_t v7 = v2[478];
  double v8 = *((double *)v66 + 15);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
    double v9 = v8 + v10;
  }
  if (*((void *)v6 + 7) != v7)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, buf, v9);
    if (!buf[16]) {
      goto LABEL_49;
    }
    uint64_t v21 = *(void *)buf;
    unint64_t v22 = *(void *)&buf[8];
    unint64_t v23 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - *(void *)buf;
    if (v23 < *(void *)buf)
    {
      unint64_t v26 = 0;
      unint64_t v25 = *(void *)&buf[8];
    }
    else
    {
      unint64_t v25 = 0;
      if (v24 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v26 = 0;
      }
      else
      {
        unint64_t v26 = 0;
        if (v24 + 2 <= *(void *)&buf[8])
        {
          *(_WORD *)(*(void *)buf + v24) = 2871;
          unint64_t v25 = v22;
          unint64_t v26 = v24 + 2;
        }
      }
    }
    uint64_t v27 = (void *)((v21 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v27 >= v21 + v26)
    {
      char v28 = (char *)v27 - v21;
      if ((unint64_t)v27 - v21 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_49;
      }
      unint64_t v26 = (unint64_t)(v28 + 8);
      if ((unint64_t)(v28 + 8) > v25) {
        goto LABEL_49;
      }
      *uint64_t v27 = v7;
    }
    if (!v25)
    {
LABEL_49:
      uint64_t v36 = off_1EB3583E8;
      if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v37 = IPC::errorAsString();
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_ClearDropShadow";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v37;
        _os_log_impl(&dword_1985F2000, v36, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
      }
      uint64_t v38 = v2[481];
      if (v38)
      {
        unint64_t v39 = *(unsigned char **)(v38 + 8);
        if (v39) {
          WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v39);
        }
      }
      goto LABEL_84;
    }
    unint64_t v29 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v30 = *((void *)v6 + 8);
    if (v29 + 16 >= v30) {
      unint64_t v29 = 0;
    }
    if (v26 <= 0x10) {
      unint64_t v26 = 16;
    }
    unint64_t v31 = v29 + v26;
    if (v30 <= v31) {
      unint64_t v32 = 0;
    }
    else {
      unint64_t v32 = v31;
    }
    *((void *)v6 + 10) = v32;
    unint64_t v33 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v32);
    int v34 = *((_DWORD *)v6 + 29);
    if (v33 == 0x80000000 || v34 != 0)
    {
      unsigned int v40 = v34 + 1;
      *((_DWORD *)v6 + 29) = v40;
      if (v40 >= *((_DWORD *)v6 + 28))
      {
        if (*((unsigned char *)v6 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
        }
        *((_DWORD *)v6 + 29) = 0;
      }
    }
    *((void *)v6 + 7) = v7;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, buf, v9);
  if (!buf[16]) {
    goto LABEL_49;
  }
  unint64_t v12 = *(void *)buf;
  uint64_t v13 = *(void *)&buf[8];
  unint64_t v14 = (_WORD *)((*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v15 = (unint64_t)v14 - *(void *)buf;
  if ((unint64_t)v14 < *(void *)buf)
  {
    unint64_t v16 = 0;
    if (*(void *)&buf[8]) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v15 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_70;
    }
    unint64_t v16 = v15 + 2;
    if (v15 + 2 > *(void *)&buf[8]) {
      goto LABEL_70;
    }
    _WORD *v14 = 823;
    if (v13)
    {
LABEL_14:
      unint64_t v17 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v18 = *((void *)v6 + 8);
      if (v17 + 16 >= v18) {
        unint64_t v17 = 0;
      }
      if (v16 <= 0x10) {
        unint64_t v16 = 16;
      }
      unint64_t v19 = v17 + v16;
      if (v18 <= v19) {
        unint64_t v20 = 0;
      }
      else {
        unint64_t v20 = v19;
      }
      *((void *)v6 + 10) = v20;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v20) == 0x80000000
        || *((_DWORD *)v6 + 29))
      {
        if (*((unsigned char *)v6 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
        }
        *((_DWORD *)v6 + 29) = 0;
      }
      goto LABEL_84;
    }
  }
  unint64_t v43 = buf[16];
  if (!buf[16])
  {
    __break(1u);
LABEL_103:
    unint64_t v46 = 0;
    goto LABEL_76;
  }
  unint64_t v12 = *(void *)buf;
  unint64_t v14 = (_WORD *)((*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_70:
  unint64_t v16 = 0;
  BOOL v44 = (unint64_t)v14 >= v12;
  unint64_t v45 = (unint64_t)v14 - v12;
  if (v44 && v45 <= 0xFFFFFFFFFFFFFFFDLL && v45 + 2 <= *(void *)&buf[8])
  {
    *(_WORD *)(v12 + v45) = 2870;
    unint64_t v16 = v45 + 2;
  }
  unint64_t v46 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *((void *)v6 + 8);
  if (v46 + 16 >= v43) {
    goto LABEL_103;
  }
LABEL_76:
  if (v16 <= 0x10) {
    unint64_t v16 = 16;
  }
  unint64_t v47 = v46 + v16;
  if (v43 <= v47) {
    unint64_t v48 = 0;
  }
  else {
    unint64_t v48 = v47;
  }
  *((void *)v6 + 10) = v48;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v48);
  *((_DWORD *)v6 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v6 + 1);
  int v49 = v67;
  unsigned int v50 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v50 = 823;
  *((void *)v50 + 1) = v7;
  *((void *)v50 + 66) = (char *)v50 + 16;
  *((void *)v50 + 67) = 512;
  *((void *)v50 + 68) = 0;
  *((void *)v50 + 70) = 0;
  *((void *)v50 + 69) = 0;
  IPC::Encoder::encodeHeader(v50);
  unint64_t v68 = v50;
  int v52 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v68, 1, 0);
  uint64_t v53 = v68;
  unint64_t v68 = 0;
  if (v53)
  {
    IPC::Encoder::~Encoder(v53, v51);
    WTF::fastFree(v61, v62);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v67);
  if (v52) {
    goto LABEL_49;
  }
LABEL_84:
  if ((v4 & 1) == 0)
  {
    char v54 = 0;
    uint64_t v55 = *(void *)(v5 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v55, (unsigned __int8 *)&v54, 1u, memory_order_acquire, memory_order_acquire);
    if (v54) {
      MEMORY[0x19972E8D0](v55);
    }
    uint64_t v56 = *(void *)(v55 + 8);
    int v57 = 1;
    uint64_t v58 = v56 - 1;
    *(void *)(v55 + 8) = v56 - 1;
    if (v56 == 1)
    {
      uint64_t v65 = *(void *)(v55 + 16);
      uint64_t v59 = *(void *)(v55 + 24);
      *(void *)(v55 + 24) = 0;
      BOOL v60 = v65 != 0;
    }
    else
    {
      uint64_t v59 = 0;
      BOOL v60 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v55, (unsigned __int8 *)&v57, 0, memory_order_release, memory_order_relaxed);
    if (v57 == 1)
    {
      if (!v58)
      {
LABEL_91:
        if (v59) {
          (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
        }
        if (!v60) {
          WTF::fastFree((WTF *)v55, v11);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v55);
      if (!v58) {
        goto LABEL_91;
      }
    }
  }
  this = v66;
  unint64_t v66 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v11);
      return (void *)WTF::fastFree(v63, v64);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordClip(void *this, const WebCore::FloatRect *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  unsigned int v50 = (float *)a2;
  uint64_t v2 = this[481];
  if (v2)
  {
    uint64_t v3 = this;
    this = *(void **)(v2 + 8);
    if (this)
    {
      this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v52);
      char v4 = v52;
      if (v52)
      {
        uint64_t v5 = (WebKit::RemoteImageBufferProxy *)v3[479];
        if (v5)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v5, v3[480], &v51);
          uint64_t v5 = v51;
          if (v51 && !*((unsigned char *)v51 + 4016))
          {
            *((unsigned char *)v51 + 4016) = 1;
            uint64_t v5 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v5);
          }
        }
        else
        {
          unsigned int v51 = 0;
        }
        uint64_t v6 = v3[478];
        double v7 = *((double *)v4 + 15);
        double v8 = INFINITY;
        if (fabs(v7) != INFINITY)
        {
          WTF::ApproximateTime::now(v5);
          double v8 = v7 + v9;
        }
        if (*((void *)v4 + 7) == v6)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, &v53, v8);
            if (!v55) {
              break;
            }
            *(void *)long long buf = v53;
            *(void *)&buf[8] = v54;
            *(void *)&uint8_t buf[16] = 0;
            unint64_t v10 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
            BOOL v11 = v10 >= v53;
            unint64_t v12 = v10 - v53;
            if (v11)
            {
              if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v54)
              {
                *(void *)&buf[8] = 0;
              }
              else
              {
                *(_WORD *)(v53 + v12) = 825;
                *(void *)&uint8_t buf[16] = v12 + 2;
              }
            }
            IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v50);
            if (*(void *)&buf[8])
            {
              uint64_t v15 = *(void *)&buf[16];
              unint64_t v16 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v17 = *((void *)v4 + 8);
              if (v16 + 16 >= v17) {
                unint64_t v16 = 0;
              }
              if (*(void *)&buf[16] <= 0x10uLL) {
                uint64_t v15 = 16;
              }
              unint64_t v18 = v16 + v15;
              if (v17 <= v18) {
                unint64_t v18 = 0;
              }
              *((void *)v4 + 10) = v18;
              if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v18) == 0x80000000
                || *((_DWORD *)v4 + 29))
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                }
                *((_DWORD *)v4 + 29) = 0;
              }
              goto LABEL_24;
            }
            uint64_t v27 = v55;
            if (v55)
            {
              IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v4, v53, v54);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v4 + 1);
              int v45 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::Clip>(*(uint64_t *)buf, &v50, v6);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
              if (!v45) {
                goto LABEL_24;
              }
              break;
            }
            __break(1u);
LABEL_86:
            unint64_t v31 = 0;
            unint64_t v30 = v14;
LABEL_48:
            unint64_t v32 = (v27 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v32 >= v27 + v31)
            {
              unint64_t v33 = v32 - v27;
              if (v33 > 0xFFFFFFFFFFFFFFF7) {
                break;
              }
              unint64_t v31 = v33 + 8;
              if (v33 + 8 > v30) {
                break;
              }
              *(void *)(v27 + v33) = v6;
            }
            if (!v30) {
              break;
            }
            unint64_t v34 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v35 = *((void *)v4 + 8);
            if (v34 + 16 >= v35) {
              unint64_t v34 = 0;
            }
            if (v31 <= 0x10) {
              unint64_t v31 = 16;
            }
            unint64_t v36 = v34 + v31;
            if (v35 <= v36) {
              unint64_t v37 = 0;
            }
            else {
              unint64_t v37 = v36;
            }
            *((void *)v4 + 10) = v37;
            unint64_t v38 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v37);
            int v39 = *((_DWORD *)v4 + 29);
            if (v38 == 0x80000000 || v39 != 0)
            {
              unsigned int v41 = v39 + 1;
              *((_DWORD *)v4 + 29) = v41;
              if (v41 >= *((_DWORD *)v4 + 28))
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                }
                *((_DWORD *)v4 + 29) = 0;
              }
            }
            *((void *)v4 + 7) = v6;
          }
        }
        else
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, buf, v8);
          if (buf[16])
          {
            uint64_t v27 = *(void *)buf;
            unint64_t v14 = *(void *)&buf[8];
            unint64_t v28 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v29 = v28 - *(void *)buf;
            if (v28 < *(void *)buf) {
              goto LABEL_86;
            }
            unint64_t v30 = 0;
            if (v29 > 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v31 = 0;
            }
            else
            {
              unint64_t v31 = 0;
              if (v29 + 2 <= *(void *)&buf[8])
              {
                *(_WORD *)(*(void *)buf + v29) = 2871;
                unint64_t v30 = v14;
                unint64_t v31 = v29 + 2;
              }
            }
            goto LABEL_48;
          }
        }
        unint64_t v46 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v47 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_Clip";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v47;
          _os_log_impl(&dword_1985F2000, v46, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v48 = v3[481];
        if (v48)
        {
          int v49 = *(unsigned char **)(v48 + 8);
          if (v49) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v49);
          }
        }
LABEL_24:
        unint64_t v19 = v51;
        unsigned int v51 = 0;
        if (v19)
        {
          char v20 = 0;
          uint64_t v21 = *((void *)v19 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
          if (v20) {
            MEMORY[0x19972E8D0](v21);
          }
          uint64_t v22 = *(void *)(v21 + 8);
          int v23 = 1;
          uint64_t v24 = v22 - 1;
          *(void *)(v21 + 8) = v22 - 1;
          if (v22 == 1)
          {
            uint64_t v44 = *(void *)(v21 + 16);
            uint64_t v25 = *(void *)(v21 + 24);
            *(void *)(v21 + 24) = 0;
            BOOL v26 = v44 != 0;
          }
          else
          {
            uint64_t v25 = 0;
            BOOL v26 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
          if (v23 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v21);
          }
          if (!v24)
          {
            if (v25) {
              (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
            }
            if (!v26) {
              WTF::fastFree((WTF *)v21, v13);
            }
          }
        }
        this = v52;
        int v52 = 0;
        if (this)
        {
          if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v13);
            return (void *)WTF::fastFree(v42, v43);
          }
        }
      }
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordClipRoundedRect(void *this, const WebCore::FloatRoundedRect *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  unsigned int v50 = (float *)a2;
  uint64_t v2 = this[481];
  if (v2)
  {
    uint64_t v3 = this;
    this = *(void **)(v2 + 8);
    if (this)
    {
      this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v52);
      char v4 = v52;
      if (v52)
      {
        uint64_t v5 = (WTF::ApproximateTime *)v3[479];
        if (v5) {
          goto LABEL_82;
        }
        unsigned int v51 = 0;
        while (1)
        {
          uint64_t v6 = v3[478];
          double v7 = *((double *)v4 + 15);
          double v8 = INFINITY;
          if (fabs(v7) != INFINITY)
          {
            WTF::ApproximateTime::now(v5);
            double v8 = v7 + v9;
          }
          if (*((void *)v4 + 7) != v6)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, buf, v8);
            if (!buf[16]) {
              goto LABEL_75;
            }
            uint64_t v26 = *(void *)buf;
            unint64_t v27 = *(void *)&buf[8];
            unint64_t v28 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v29 = v28 - *(void *)buf;
            if (v28 < *(void *)buf)
            {
              unint64_t v31 = 0;
              unint64_t v30 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v30 = 0;
              if (v29 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v31 = 0;
              }
              else
              {
                unint64_t v31 = 0;
                if (v29 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v29) = 2871;
                  unint64_t v30 = v27;
                  unint64_t v31 = v29 + 2;
                }
              }
            }
            unint64_t v32 = (void *)((v26 + v31 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v32 >= v26 + v31)
            {
              unint64_t v33 = (char *)v32 - v26;
              if ((unint64_t)v32 - v26 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_75;
              }
              unint64_t v31 = (unint64_t)(v33 + 8);
              if ((unint64_t)(v33 + 8) > v30) {
                goto LABEL_75;
              }
              *unint64_t v32 = v6;
            }
            if (!v30) {
              goto LABEL_75;
            }
            unint64_t v34 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v35 = *((void *)v4 + 8);
            if (v34 + 16 >= v35) {
              unint64_t v34 = 0;
            }
            if (v31 <= 0x10) {
              unint64_t v31 = 16;
            }
            unint64_t v36 = v34 + v31;
            if (v35 <= v36) {
              unint64_t v37 = 0;
            }
            else {
              unint64_t v37 = v36;
            }
            *((void *)v4 + 10) = v37;
            unint64_t v38 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v37);
            int v39 = *((_DWORD *)v4 + 29);
            if (v38 == 0x80000000 || v39 != 0)
            {
              unsigned int v41 = v39 + 1;
              *((_DWORD *)v4 + 29) = v41;
              if (v41 >= *((_DWORD *)v4 + 28))
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                }
                *((_DWORD *)v4 + 29) = 0;
              }
            }
            *((void *)v4 + 7) = v6;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, &v53, v8);
          if (!v55) {
            goto LABEL_75;
          }
          *(void *)long long buf = v53;
          *(void *)&buf[8] = v54;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v10 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v11 = v10 >= v53;
          unint64_t v12 = v10 - v53;
          if (v11)
          {
            if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v54)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v53 + v12) = 830;
              *(void *)&uint8_t buf[16] = v12 + 2;
            }
          }
          uint64_t v5 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode((uint64_t *)buf, v50);
          if (*(void *)&buf[8])
          {
            uint64_t v14 = *(void *)&buf[16];
            unint64_t v15 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v16 = *((void *)v4 + 8);
            if (v15 + 16 >= v16) {
              unint64_t v15 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v14 = 16;
            }
            unint64_t v17 = v15 + v14;
            if (v16 <= v17) {
              unint64_t v17 = 0;
            }
            *((void *)v4 + 10) = v17;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v17) == 0x80000000
              || *((_DWORD *)v4 + 29))
            {
              if (*((unsigned char *)v4 + 104)) {
                MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
              }
              *((_DWORD *)v4 + 29) = 0;
            }
            goto LABEL_24;
          }
          if (v55) {
            break;
          }
          __break(1u);
LABEL_82:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v5, v3[480], &v51);
          uint64_t v5 = v51;
          if (v51 && !*((unsigned char *)v51 + 4016))
          {
            *((unsigned char *)v51 + 4016) = 1;
            uint64_t v5 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v5);
          }
        }
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v4, v53, v54);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v4 + 1);
        int v45 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::ClipRoundedRect>(*(uint64_t *)buf, &v50, v6);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        if (!v45) {
          goto LABEL_24;
        }
LABEL_75:
        unint64_t v46 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v47 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_ClipRoundedRect";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v47;
          _os_log_impl(&dword_1985F2000, v46, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v48 = v3[481];
        if (v48)
        {
          int v49 = *(unsigned char **)(v48 + 8);
          if (v49) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v49);
          }
        }
LABEL_24:
        unint64_t v18 = v51;
        unsigned int v51 = 0;
        if (v18)
        {
          char v19 = 0;
          uint64_t v20 = *((void *)v18 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
          if (v19) {
            MEMORY[0x19972E8D0](v20);
          }
          uint64_t v21 = *(void *)(v20 + 8);
          int v22 = 1;
          uint64_t v23 = v21 - 1;
          *(void *)(v20 + 8) = v21 - 1;
          if (v21 == 1)
          {
            uint64_t v44 = *(void *)(v20 + 16);
            uint64_t v24 = *(void *)(v20 + 24);
            *(void *)(v20 + 24) = 0;
            BOOL v25 = v44 != 0;
          }
          else
          {
            uint64_t v24 = 0;
            BOOL v25 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
          if (v22 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v20);
          }
          if (!v23)
          {
            if (v24) {
              (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
            }
            if (!v25) {
              WTF::fastFree((WTF *)v20, v13);
            }
          }
        }
        this = v52;
        int v52 = 0;
        if (this)
        {
          if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v13);
            return (void *)WTF::fastFree(v42, v43);
          }
        }
      }
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordClipOut(void *this, const WebCore::FloatRect *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  unsigned int v50 = (float *)a2;
  uint64_t v2 = this[481];
  if (v2)
  {
    uint64_t v3 = this;
    this = *(void **)(v2 + 8);
    if (this)
    {
      this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v52);
      char v4 = v52;
      if (v52)
      {
        uint64_t v5 = (WTF::ApproximateTime *)v3[479];
        if (v5) {
          goto LABEL_82;
        }
        unsigned int v51 = 0;
        while (1)
        {
          uint64_t v6 = v3[478];
          double v7 = *((double *)v4 + 15);
          double v8 = INFINITY;
          if (fabs(v7) != INFINITY)
          {
            WTF::ApproximateTime::now(v5);
            double v8 = v7 + v9;
          }
          if (*((void *)v4 + 7) != v6)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, buf, v8);
            if (!buf[16]) {
              goto LABEL_75;
            }
            uint64_t v26 = *(void *)buf;
            unint64_t v27 = *(void *)&buf[8];
            unint64_t v28 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v29 = v28 - *(void *)buf;
            if (v28 < *(void *)buf)
            {
              unint64_t v31 = 0;
              unint64_t v30 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v30 = 0;
              if (v29 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v31 = 0;
              }
              else
              {
                unint64_t v31 = 0;
                if (v29 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v29) = 2871;
                  unint64_t v30 = v27;
                  unint64_t v31 = v29 + 2;
                }
              }
            }
            unint64_t v32 = (void *)((v26 + v31 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v32 >= v26 + v31)
            {
              unint64_t v33 = (char *)v32 - v26;
              if ((unint64_t)v32 - v26 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_75;
              }
              unint64_t v31 = (unint64_t)(v33 + 8);
              if ((unint64_t)(v33 + 8) > v30) {
                goto LABEL_75;
              }
              *unint64_t v32 = v6;
            }
            if (!v30) {
              goto LABEL_75;
            }
            unint64_t v34 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v35 = *((void *)v4 + 8);
            if (v34 + 16 >= v35) {
              unint64_t v34 = 0;
            }
            if (v31 <= 0x10) {
              unint64_t v31 = 16;
            }
            unint64_t v36 = v34 + v31;
            if (v35 <= v36) {
              unint64_t v37 = 0;
            }
            else {
              unint64_t v37 = v36;
            }
            *((void *)v4 + 10) = v37;
            unint64_t v38 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v37);
            int v39 = *((_DWORD *)v4 + 29);
            if (v38 == 0x80000000 || v39 != 0)
            {
              unsigned int v41 = v39 + 1;
              *((_DWORD *)v4 + 29) = v41;
              if (v41 >= *((_DWORD *)v4 + 28))
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                }
                *((_DWORD *)v4 + 29) = 0;
              }
            }
            *((void *)v4 + 7) = v6;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, &v53, v8);
          if (!v55) {
            goto LABEL_75;
          }
          *(void *)long long buf = v53;
          *(void *)&buf[8] = v54;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v10 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v11 = v10 >= v53;
          unint64_t v12 = v10 - v53;
          if (v11)
          {
            if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v54)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v53 + v12) = 826;
              *(void *)&uint8_t buf[16] = v12 + 2;
            }
          }
          uint64_t v5 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v50);
          if (*(void *)&buf[8])
          {
            uint64_t v14 = *(void *)&buf[16];
            unint64_t v15 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v16 = *((void *)v4 + 8);
            if (v15 + 16 >= v16) {
              unint64_t v15 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v14 = 16;
            }
            unint64_t v17 = v15 + v14;
            if (v16 <= v17) {
              unint64_t v17 = 0;
            }
            *((void *)v4 + 10) = v17;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v17) == 0x80000000
              || *((_DWORD *)v4 + 29))
            {
              if (*((unsigned char *)v4 + 104)) {
                MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
              }
              *((_DWORD *)v4 + 29) = 0;
            }
            goto LABEL_24;
          }
          if (v55) {
            break;
          }
          __break(1u);
LABEL_82:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v5, v3[480], &v51);
          uint64_t v5 = v51;
          if (v51 && !*((unsigned char *)v51 + 4016))
          {
            *((unsigned char *)v51 + 4016) = 1;
            uint64_t v5 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v5);
          }
        }
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v4, v53, v54);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v4 + 1);
        int v45 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::ClipOut>(*(uint64_t *)buf, &v50, v6);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        if (!v45) {
          goto LABEL_24;
        }
LABEL_75:
        unint64_t v46 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v47 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_ClipOut";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v47;
          _os_log_impl(&dword_1985F2000, v46, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v48 = v3[481];
        if (v48)
        {
          int v49 = *(unsigned char **)(v48 + 8);
          if (v49) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v49);
          }
        }
LABEL_24:
        unint64_t v18 = v51;
        unsigned int v51 = 0;
        if (v18)
        {
          char v19 = 0;
          uint64_t v20 = *((void *)v18 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
          if (v19) {
            MEMORY[0x19972E8D0](v20);
          }
          uint64_t v21 = *(void *)(v20 + 8);
          int v22 = 1;
          uint64_t v23 = v21 - 1;
          *(void *)(v20 + 8) = v21 - 1;
          if (v21 == 1)
          {
            uint64_t v44 = *(void *)(v20 + 16);
            uint64_t v24 = *(void *)(v20 + 24);
            *(void *)(v20 + 24) = 0;
            BOOL v25 = v44 != 0;
          }
          else
          {
            uint64_t v24 = 0;
            BOOL v25 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
          if (v22 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v20);
          }
          if (!v23)
          {
            if (v24) {
              (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
            }
            if (!v25) {
              WTF::fastFree((WTF *)v20, v13);
            }
          }
        }
        this = v52;
        int v52 = 0;
        if (this)
        {
          if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v13);
            return (void *)WTF::fastFree(v42, v43);
          }
        }
      }
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordClipOutRoundedRect(void *this, const WebCore::FloatRoundedRect *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  unint64_t v46 = (float *)a2;
  uint64_t v2 = this[481];
  if (v2)
  {
    uint64_t v3 = this;
    this = *(void **)(v2 + 8);
    if (this)
    {
      this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v48);
      char v4 = v48;
      if (v48)
      {
        uint64_t v5 = (WebKit::RemoteImageBufferProxy *)v3[479];
        if (v5)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v5, v3[480], &v47);
          uint64_t v5 = v47;
          if (v47 && !*((unsigned char *)v47 + 4016))
          {
            *((unsigned char *)v47 + 4016) = 1;
            uint64_t v5 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v5);
          }
        }
        else
        {
          unint64_t v47 = 0;
        }
        uint64_t v6 = v3[478];
        double v7 = *((double *)v4 + 15);
        double v8 = INFINITY;
        if (fabs(v7) != INFINITY)
        {
          WTF::ApproximateTime::now(v5);
          double v8 = v7 + v9;
        }
        if (*((void *)v4 + 7) == v6)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, &v49, v8);
            if (!v51) {
              break;
            }
            *(void *)long long buf = v49;
            *(void *)&buf[8] = v50;
            *(void *)&uint8_t buf[16] = 0;
            unint64_t v10 = (v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
            BOOL v11 = v10 >= v49;
            unint64_t v12 = v10 - v49;
            if (v11)
            {
              if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v50)
              {
                *(void *)&buf[8] = 0;
              }
              else
              {
                *(_WORD *)(v49 + v12) = 827;
                *(void *)&uint8_t buf[16] = v12 + 2;
              }
            }
            IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode((uint64_t *)buf, v46);
            if (*(void *)&buf[8])
            {
              uint64_t v15 = *(void *)&buf[16];
              unint64_t v16 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v17 = *((void *)v4 + 8);
              if (v16 + 16 >= v17) {
                unint64_t v16 = 0;
              }
              if (*(void *)&buf[16] <= 0x10uLL) {
                uint64_t v15 = 16;
              }
              unint64_t v18 = v16 + v15;
              if (v17 <= v18) {
                unint64_t v18 = 0;
              }
              *((void *)v4 + 10) = v18;
              if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v18) == 0x80000000
                || *((_DWORD *)v4 + 29))
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                }
                *((_DWORD *)v4 + 29) = 0;
              }
              goto LABEL_24;
            }
            uint64_t v27 = v51;
            if (v51)
            {
              IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v4, v49, v50);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v4 + 1);
              int v42 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::ClipOutRoundedRect>(*(uint64_t *)buf, &v46, v6);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
              if (!v42) {
                goto LABEL_24;
              }
              break;
            }
            __break(1u);
LABEL_72:
            unint64_t v31 = v14;
LABEL_48:
            unint64_t v32 = (void *)((v27 + v31 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v32 >= v27 + v31)
            {
              unint64_t v33 = (char *)v32 - v27;
              if ((unint64_t)v32 - v27 > 0xFFFFFFFFFFFFFFF7) {
                break;
              }
              unint64_t v31 = (unint64_t)(v33 + 8);
              if ((unint64_t)(v33 + 8) > v14) {
                break;
              }
              *unint64_t v32 = v6;
            }
            if (!v14) {
              break;
            }
            unint64_t v34 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v35 = *((void *)v4 + 8);
            if (v34 + 16 >= v35) {
              unint64_t v34 = 0;
            }
            if (v31 <= 0x10) {
              unint64_t v31 = 16;
            }
            unint64_t v36 = v34 + v31;
            if (v35 <= v36) {
              unint64_t v37 = 0;
            }
            else {
              unint64_t v37 = v36;
            }
            *((void *)v4 + 10) = v37;
            IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v4, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v37) == 0x80000000);
            *((void *)v4 + 7) = v6;
          }
        }
        else
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, buf, v8);
          if (buf[16])
          {
            uint64_t v27 = *(void *)buf;
            unint64_t v28 = *(void *)&buf[8];
            unint64_t v29 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v30 = v29 - *(void *)buf;
            if (v29 < *(void *)buf)
            {
              unint64_t v31 = 0;
              unint64_t v14 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v14 = 0;
              if (v30 > 0xFFFFFFFFFFFFFFFDLL) {
                goto LABEL_72;
              }
              unint64_t v31 = 0;
              if (v30 + 2 <= *(void *)&buf[8])
              {
                *(_WORD *)(*(void *)buf + v30) = 2871;
                unint64_t v14 = v28;
                unint64_t v31 = v30 + 2;
              }
            }
            goto LABEL_48;
          }
        }
        unint64_t v38 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          int v39 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_ClipOutRoundedRect";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v39;
          _os_log_impl(&dword_1985F2000, v38, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v40 = v3[481];
        if (v40)
        {
          unsigned int v41 = *(unsigned char **)(v40 + 8);
          if (v41) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v41);
          }
        }
LABEL_24:
        char v19 = v47;
        unint64_t v47 = 0;
        if (v19)
        {
          char v20 = 0;
          uint64_t v21 = *((void *)v19 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
          if (v20) {
            MEMORY[0x19972E8D0](v21);
          }
          uint64_t v22 = *(void *)(v21 + 8);
          int v23 = 1;
          uint64_t v24 = v22 - 1;
          *(void *)(v21 + 8) = v22 - 1;
          if (v22 == 1)
          {
            uint64_t v45 = *(void *)(v21 + 16);
            uint64_t v25 = *(void *)(v21 + 24);
            *(void *)(v21 + 24) = 0;
            BOOL v26 = v45 != 0;
          }
          else
          {
            uint64_t v25 = 0;
            BOOL v26 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
          if (v23 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v21);
          }
          if (!v24)
          {
            if (v25) {
              (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
            }
            if (!v26) {
              WTF::fastFree((WTF *)v21, v13);
            }
          }
        }
        this = v48;
        uint64_t v48 = 0;
        if (this)
        {
          if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v13);
            return (void *)WTF::fastFree(v43, v44);
          }
        }
      }
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordClipToImageBuffer(void *this, WebCore::ImageBuffer *a2, const WebCore::FloatRect *a3)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v71 = *((void *)a2 + 15);
  uint64_t v3 = this[481];
  if (!v3) {
    return this;
  }
  char v4 = this;
  this = *(void **)(v3 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v72);
  if (!v72) {
    return this;
  }
  uint64_t v6 = v4[479];
  char v7 = 1;
  if (v6)
  {
    char v69 = 0;
    uint64_t v8 = v4[480];
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v69, 1u, memory_order_acquire, memory_order_acquire);
    if (v69) {
      this = (void *)MEMORY[0x19972E8D0](v6);
    }
    if (*(void *)(v6 + 24)) {
      ++*(void *)(v6 + 8);
    }
    else {
      uint64_t v8 = 0;
    }
    int v70 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v70, 0, memory_order_release, memory_order_relaxed);
    if (v70 == 1)
    {
      if (!v8) {
        goto LABEL_6;
      }
    }
    else
    {
      this = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
      if (!v8) {
        goto LABEL_6;
      }
    }
    if (!*(unsigned char *)(v8 + 4016))
    {
      *(unsigned char *)(v8 + 4016) = 1;
      this = (void *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v8);
      if (this) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 160))(this);
      }
    }
    char v7 = 0;
    goto LABEL_6;
  }
  uint64_t v8 = 0;
LABEL_6:
  double v9 = v72;
  uint64_t v10 = v4[478];
  double v11 = *((double *)v72 + 15);
  double v12 = INFINITY;
  if (fabs(v11) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
    double v12 = v11 + v13;
  }
  if (*((void *)v9 + 7) == v10) {
    goto LABEL_9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v9 + 64, buf, v12);
  if (!buf[16]) {
    goto LABEL_67;
  }
  uint64_t v39 = *(void *)buf;
  unint64_t v40 = *(void *)&buf[8];
  unint64_t v41 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v42 = v41 - *(void *)buf;
  if (v41 < *(void *)buf)
  {
    unint64_t v44 = 0;
    unint64_t v43 = *(void *)&buf[8];
  }
  else
  {
    unint64_t v43 = 0;
    if (v42 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v44 = 0;
    }
    else
    {
      unint64_t v44 = 0;
      if (v42 + 2 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v42) = 2871;
        unint64_t v43 = v40;
        unint64_t v44 = v42 + 2;
      }
    }
  }
  uint64_t v45 = (void *)((v39 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v45 >= v39 + v44)
  {
    unint64_t v46 = (char *)v45 - v39;
    if ((unint64_t)v45 - v39 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_67;
    }
    unint64_t v44 = (unint64_t)(v46 + 8);
    if ((unint64_t)(v46 + 8) > v43) {
      goto LABEL_67;
    }
    *uint64_t v45 = v10;
  }
  if (!v43)
  {
LABEL_67:
    unint64_t v54 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      char v55 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_ClipToImageBuffer";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v55;
      _os_log_impl(&dword_1985F2000, v54, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v56 = v4[481];
    if (v56)
    {
      uint64_t v57 = *(unsigned char **)(v56 + 8);
      if (v57) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v57);
      }
    }
    goto LABEL_72;
  }
  unint64_t v47 = (*((void *)v9 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v48 = *((void *)v9 + 8);
  if (v47 + 16 >= v48) {
    unint64_t v47 = 0;
  }
  if (v44 <= 0x10) {
    unint64_t v44 = 16;
  }
  unint64_t v49 = v47 + v44;
  if (v48 <= v49) {
    unint64_t v50 = 0;
  }
  else {
    unint64_t v50 = v49;
  }
  *((void *)v9 + 10) = v50;
  unint64_t v51 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v9 + 9) + 16) + 128), v50);
  int v52 = *((_DWORD *)v9 + 29);
  if (v51 == 0x80000000 || v52 != 0)
  {
    unsigned int v65 = v52 + 1;
    *((_DWORD *)v9 + 29) = v65;
    if (v65 >= *((_DWORD *)v9 + 28))
    {
      if (*((unsigned char *)v9 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v9 + 23));
      }
      *((_DWORD *)v9 + 29) = 0;
    }
  }
  *((void *)v9 + 7) = v10;
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v9 + 64, &v74, v12);
  if (!v76) {
    goto LABEL_67;
  }
  unint64_t v14 = v74;
  unint64_t v15 = v75;
  *(void *)long long buf = v74;
  *(void *)&buf[8] = v75;
  *(void *)&uint8_t buf[16] = 0;
  unint64_t v16 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = v16 - v74;
  if (v16 < v74)
  {
    unint64_t v18 = 0;
  }
  else if (v17 > 0xFFFFFFFFFFFFFFFDLL || (unint64_t v18 = v17 + 2, v17 + 2 > v75))
  {
    unint64_t v15 = 0;
    unint64_t v18 = 0;
    *(void *)&buf[8] = 0;
  }
  else
  {
    *(_WORD *)(v74 + v17) = 831;
    *(void *)&uint8_t buf[16] = v17 + 2;
  }
  char v19 = (void *)((v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v19 >= v14 + v18)
  {
    char v20 = (char *)v19 - v14;
    if ((unint64_t)v19 - v14 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v20 + 8) > v15)
    {
      *(void *)&buf[8] = 0;
    }
    else
    {
      *char v19 = v71;
      *(void *)&uint8_t buf[16] = v20 + 8;
    }
  }
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, a3);
  if (*(void *)&buf[8])
  {
    unint64_t v23 = *(void *)&buf[16];
    unint64_t v24 = (*((void *)v9 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = *((void *)v9 + 8);
    if (v24 + 16 < v22)
    {
LABEL_20:
      if (v23 <= 0x10) {
        unint64_t v23 = 16;
      }
      unint64_t v25 = v24 + v23;
      if (v22 <= v25) {
        unint64_t v25 = 0;
      }
      *((void *)v9 + 10) = v25;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v9 + 9) + 16) + 128), v25) == 0x80000000
        || *((_DWORD *)v9 + 29))
      {
        if (*((unsigned char *)v9 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v9 + 23));
        }
        *((_DWORD *)v9 + 29) = 0;
      }
      goto LABEL_72;
    }
LABEL_97:
    unint64_t v24 = 0;
    goto LABEL_20;
  }
  unint64_t v23 = v76;
  if (!v76)
  {
    __break(1u);
    goto LABEL_97;
  }
  unint64_t v26 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = v26 - v74;
  if (v26 < v74)
  {
    unint64_t v28 = 0;
  }
  else
  {
    unint64_t v28 = 0;
    if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v27 + 2 <= v75)
    {
      *(_WORD *)(v74 + v27) = 2870;
      unint64_t v28 = v27 + 2;
    }
  }
  unint64_t v29 = (*((void *)v9 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v30 = *((void *)v9 + 8);
  if (v29 + 16 >= v30) {
    unint64_t v29 = 0;
  }
  if (v28 <= 0x10) {
    unint64_t v28 = 16;
  }
  unint64_t v31 = v29 + v28;
  if (v30 <= v31) {
    unint64_t v31 = 0;
  }
  *((void *)v9 + 10) = v31;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v9 + 9) + 16) + 128), v31);
  *((_DWORD *)v9 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)v9 + 1);
  unint64_t v32 = v73;
  unint64_t v33 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v33 = 831;
  *((void *)v33 + 1) = v10;
  *((void *)v33 + 66) = (char *)v33 + 16;
  *((void *)v33 + 67) = 512;
  *((void *)v33 + 68) = 0;
  *((void *)v33 + 70) = 0;
  *((void *)v33 + 69) = 0;
  IPC::Encoder::encodeHeader(v33);
  *(void *)long long buf = v33;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v33, &v71);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v33, (float *)a3);
  int v35 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)buf, 1, 0);
  unint64_t v36 = *(IPC::Encoder **)buf;
  *(void *)long long buf = 0;
  if (v36)
  {
    IPC::Encoder::~Encoder(v36, v34);
    WTF::fastFree(v37, v38);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
  if (v35) {
    goto LABEL_67;
  }
LABEL_72:
  if ((v7 & 1) == 0)
  {
    char v58 = 0;
    uint64_t v59 = *(void *)(v8 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v59, (unsigned __int8 *)&v58, 1u, memory_order_acquire, memory_order_acquire);
    if (v58) {
      MEMORY[0x19972E8D0](v59);
    }
    uint64_t v60 = *(void *)(v59 + 8);
    int v61 = 1;
    uint64_t v62 = v60 - 1;
    *(void *)(v59 + 8) = v60 - 1;
    if (v60 == 1)
    {
      uint64_t v68 = *(void *)(v59 + 16);
      uint64_t v63 = *(void *)(v59 + 24);
      *(void *)(v59 + 24) = 0;
      BOOL v64 = v68 != 0;
    }
    else
    {
      uint64_t v63 = 0;
      BOOL v64 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v59, (unsigned __int8 *)&v61, 0, memory_order_release, memory_order_relaxed);
    if (v61 == 1)
    {
      if (!v62)
      {
LABEL_79:
        if (v63) {
          (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
        }
        if (!v64) {
          WTF::fastFree((WTF *)v59, v21);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v59);
      if (!v62) {
        goto LABEL_79;
      }
    }
  }
  this = v72;
  unsigned __int8 v72 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v21);
      return (void *)WTF::fastFree(v66, v67);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordClipOutToPath(void *this, const WebCore::Path *a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this[481];
  if (!v2) {
    return this;
  }
  uint64_t v3 = this;
  this = *(void **)(v2 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v66);
  if (!v66) {
    return this;
  }
  uint64_t v5 = v3[479];
  char v6 = 1;
  if (v5)
  {
    char v64 = 0;
    uint64_t v7 = v3[480];
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v64, 1u, memory_order_acquire, memory_order_acquire);
    if (v64) {
      this = (void *)MEMORY[0x19972E8D0](v5);
    }
    if (*(void *)(v5 + 24)) {
      ++*(void *)(v5 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    int v65 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v65, 0, memory_order_release, memory_order_relaxed);
    if (v65 == 1)
    {
      if (!v7) {
        goto LABEL_6;
      }
    }
    else
    {
      this = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (!v7) {
        goto LABEL_6;
      }
    }
    if (!*(unsigned char *)(v7 + 4016))
    {
      *(unsigned char *)(v7 + 4016) = 1;
      this = (void *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v7);
      if (this) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 160))(this);
      }
    }
    char v6 = 0;
    goto LABEL_6;
  }
  uint64_t v7 = 0;
LABEL_6:
  uint64_t v8 = v66;
  uint64_t v9 = v3[478];
  double v10 = *((double *)v66 + 15);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
    double v11 = v10 + v12;
  }
  if (*((void *)v8 + 7) == v9) {
    goto LABEL_9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, buf, v11);
  if (!buf[16]) {
    goto LABEL_64;
  }
  uint64_t v34 = *(void *)buf;
  unint64_t v35 = *(void *)&buf[8];
  unint64_t v36 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - *(void *)buf;
  if (v36 < *(void *)buf)
  {
    unint64_t v39 = 0;
    unint64_t v38 = *(void *)&buf[8];
  }
  else
  {
    unint64_t v38 = 0;
    if (v37 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v39 = 0;
    }
    else
    {
      unint64_t v39 = 0;
      if (v37 + 2 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v37) = 2871;
        unint64_t v38 = v35;
        unint64_t v39 = v37 + 2;
      }
    }
  }
  unint64_t v40 = (void *)((v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v40 >= v34 + v39)
  {
    unint64_t v41 = (char *)v40 - v34;
    if ((unint64_t)v40 - v34 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_64;
    }
    unint64_t v39 = (unint64_t)(v41 + 8);
    if ((unint64_t)(v41 + 8) > v38) {
      goto LABEL_64;
    }
    *unint64_t v40 = v9;
  }
  if (!v38)
  {
LABEL_64:
    unint64_t v49 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v50 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_ClipOutToPath";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v50;
      _os_log_impl(&dword_1985F2000, v49, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v51 = v3[481];
    if (v51)
    {
      int v52 = *(unsigned char **)(v51 + 8);
      if (v52) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v52);
      }
    }
    goto LABEL_69;
  }
  unint64_t v42 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *((void *)v8 + 8);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v39 <= 0x10) {
    unint64_t v39 = 16;
  }
  unint64_t v44 = v42 + v39;
  if (v43 <= v44) {
    unint64_t v45 = 0;
  }
  else {
    unint64_t v45 = v44;
  }
  *((void *)v8 + 10) = v45;
  unint64_t v46 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v45);
  int v47 = *((_DWORD *)v8 + 29);
  if (v46 == 0x80000000 || v47 != 0)
  {
    unsigned int v60 = v47 + 1;
    *((_DWORD *)v8 + 29) = v60;
    if (v60 >= *((_DWORD *)v8 + 28))
    {
      if (*((unsigned char *)v8 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v8 + 23));
      }
      *((_DWORD *)v8 + 29) = 0;
    }
  }
  *((void *)v8 + 7) = v9;
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, &v68, v11);
  if (!v70) {
    goto LABEL_64;
  }
  *(void *)long long buf = v68;
  *(void *)&buf[8] = v69;
  *(void *)&uint8_t buf[16] = 0;
  unint64_t v13 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v14 = v13 >= v68;
  unint64_t v15 = v13 - v68;
  if (v14)
  {
    if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v69)
    {
      *(void *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v68 + v15) = 828;
      *(void *)&uint8_t buf[16] = v15 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::Path,void>::encode((uint64_t *)buf, a2);
  if (*(void *)&buf[8])
  {
    unint64_t v18 = *(void *)&buf[16];
    unint64_t v19 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *((void *)v8 + 8);
    if (v19 + 16 < v17)
    {
LABEL_17:
      if (v18 <= 0x10) {
        unint64_t v18 = 16;
      }
      unint64_t v20 = v19 + v18;
      if (v17 <= v20) {
        unint64_t v20 = 0;
      }
      *((void *)v8 + 10) = v20;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v20) == 0x80000000
        || *((_DWORD *)v8 + 29))
      {
        if (*((unsigned char *)v8 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v8 + 23));
        }
        *((_DWORD *)v8 + 29) = 0;
      }
      goto LABEL_69;
    }
LABEL_93:
    unint64_t v19 = 0;
    goto LABEL_17;
  }
  unint64_t v18 = v70;
  if (!v70)
  {
    __break(1u);
    goto LABEL_93;
  }
  unint64_t v21 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v22 = v21 - v68;
  if (v21 < v68)
  {
    unint64_t v23 = 0;
  }
  else
  {
    unint64_t v23 = 0;
    if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v69)
    {
      *(_WORD *)(v68 + v22) = 2870;
      unint64_t v23 = v22 + 2;
    }
  }
  unint64_t v24 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v25 = *((void *)v8 + 8);
  if (v24 + 16 >= v25) {
    unint64_t v24 = 0;
  }
  if (v23 <= 0x10) {
    unint64_t v23 = 16;
  }
  unint64_t v26 = v24 + v23;
  if (v25 <= v26) {
    unint64_t v26 = 0;
  }
  *((void *)v8 + 10) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v26);
  *((_DWORD *)v8 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v8 + 1);
  unint64_t v27 = v67;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 828;
  *((void *)v28 + 1) = v9;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  *(void *)long long buf = v28;
  IPC::ArgumentCoder<WebCore::Path,void>::encode(v28, a2);
  int v30 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)buf, 1, 0);
  unint64_t v31 = *(IPC::Encoder **)buf;
  *(void *)long long buf = 0;
  if (v31)
  {
    IPC::Encoder::~Encoder(v31, v29);
    WTF::fastFree(v32, v33);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v67);
  if (v30) {
    goto LABEL_64;
  }
LABEL_69:
  if ((v6 & 1) == 0)
  {
    char v53 = 0;
    uint64_t v54 = *(void *)(v7 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v54, (unsigned __int8 *)&v53, 1u, memory_order_acquire, memory_order_acquire);
    if (v53) {
      MEMORY[0x19972E8D0](v54);
    }
    uint64_t v55 = *(void *)(v54 + 8);
    int v56 = 1;
    uint64_t v57 = v55 - 1;
    *(void *)(v54 + 8) = v55 - 1;
    if (v55 == 1)
    {
      uint64_t v63 = *(void *)(v54 + 16);
      uint64_t v58 = *(void *)(v54 + 24);
      *(void *)(v54 + 24) = 0;
      BOOL v59 = v63 != 0;
    }
    else
    {
      uint64_t v58 = 0;
      BOOL v59 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v54, (unsigned __int8 *)&v56, 0, memory_order_release, memory_order_relaxed);
    if (v56 == 1)
    {
      if (!v57)
      {
LABEL_76:
        if (v58) {
          (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
        }
        if (!v59) {
          WTF::fastFree((WTF *)v54, v16);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v54);
      if (!v57) {
        goto LABEL_76;
      }
    }
  }
  this = v66;
  unint64_t v66 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v16);
      return (void *)WTF::fastFree(v61, v62);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordClipPath(void *result, WebCore::Path *a2, char a3)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = result[481];
  if (v3)
  {
    char v4 = result;
    __n128 result = *(void **)(v3 + 8);
    if (result)
    {
      __n128 result = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (atomic_uint **)&v67);
      uint64_t v7 = v67;
      if (v67)
      {
        uint64_t v8 = (WTF::ApproximateTime *)v4[479];
        if (v8) {
          goto LABEL_95;
        }
        unint64_t v66 = 0;
        while (1)
        {
          uint64_t v9 = v4[478];
          double v10 = *((double *)v7 + 15);
          double v11 = INFINITY;
          if (fabs(v10) != INFINITY)
          {
            WTF::ApproximateTime::now(v8);
            double v11 = v10 + v12;
          }
          if (*((void *)v7 + 7) != v9)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v7 + 64, buf, v11);
            if (!buf[16]) {
              goto LABEL_86;
            }
            uint64_t v30 = *(void *)buf;
            unint64_t v31 = *(void *)&buf[8];
            unint64_t v32 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v33 = v32 - *(void *)buf;
            if (v32 < *(void *)buf)
            {
              unint64_t v35 = 0;
              unint64_t v34 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v34 = 0;
              if (v33 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v35 = 0;
              }
              else
              {
                unint64_t v35 = 0;
                if (v33 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v33) = 2871;
                  unint64_t v34 = v31;
                  unint64_t v35 = v33 + 2;
                }
              }
            }
            unint64_t v36 = (void *)((v30 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v36 >= v30 + v35)
            {
              unint64_t v37 = (char *)v36 - v30;
              if ((unint64_t)v36 - v30 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_86;
              }
              unint64_t v35 = (unint64_t)(v37 + 8);
              if ((unint64_t)(v37 + 8) > v34) {
                goto LABEL_86;
              }
              *unint64_t v36 = v9;
            }
            if (!v34) {
              goto LABEL_86;
            }
            unint64_t v38 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v39 = *((void *)v7 + 8);
            if (v38 + 16 >= v39) {
              unint64_t v38 = 0;
            }
            if (v35 <= 0x10) {
              unint64_t v35 = 16;
            }
            unint64_t v40 = v38 + v35;
            if (v39 <= v40) {
              unint64_t v41 = 0;
            }
            else {
              unint64_t v41 = v40;
            }
            *((void *)v7 + 10) = v41;
            unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v41);
            int v43 = *((_DWORD *)v7 + 29);
            if (v42 == 0x80000000 || v43 != 0)
            {
              unsigned int v45 = v43 + 1;
              *((_DWORD *)v7 + 29) = v45;
              if (v45 >= *((_DWORD *)v7 + 28))
              {
                if (*((unsigned char *)v7 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v7 + 23));
                }
                *((_DWORD *)v7 + 29) = 0;
              }
            }
            *((void *)v7 + 7) = v9;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v7 + 64, &v69, v11);
          if (!v71) {
            goto LABEL_86;
          }
          *(void *)long long buf = v69;
          *(void *)&buf[8] = v70;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v13 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v14 = v13 >= v69;
          unint64_t v15 = v13 - v69;
          if (v14)
          {
            if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v70)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v69 + v15) = 829;
              *(void *)&uint8_t buf[16] = v15 + 2;
            }
          }
          uint64_t v8 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::Path,void>::encode((uint64_t *)buf, a2);
          uint64_t v17 = *(void *)&buf[16];
          if (*(void *)&buf[16] < *(void *)&buf[8])
          {
            unint64_t v18 = *(void *)&buf[16] + 1;
            *(unsigned char *)(*(void *)buf + *(void *)&buf[16]) = a3;
            *(void *)&uint8_t buf[16] = v17 + 1;
            if (*(void *)&buf[8])
            {
              unint64_t v19 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v20 = *((void *)v7 + 8);
              if (v19 + 16 >= v20) {
                unint64_t v19 = 0;
              }
              if (v18 <= 0x10) {
                unint64_t v18 = 16;
              }
              unint64_t v21 = v19 + v18;
              if (v20 <= v21) {
                unint64_t v21 = 0;
              }
              *((void *)v7 + 10) = v21;
              if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v21) == 0x80000000
                || *((_DWORD *)v7 + 29))
              {
                if (*((unsigned char *)v7 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v7 + 23));
                }
                *((_DWORD *)v7 + 29) = 0;
              }
              goto LABEL_25;
            }
          }
          if (v71) {
            break;
          }
          __break(1u);
LABEL_95:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v8, v4[480], &v66);
          uint64_t v8 = v66;
          if (v66 && !*((unsigned char *)v66 + 4016))
          {
            *((unsigned char *)v66 + 4016) = 1;
            uint64_t v8 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v8);
          }
        }
        unint64_t v49 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v50 = v49 - v69;
        if (v49 < v69)
        {
          unint64_t v51 = 0;
        }
        else
        {
          unint64_t v51 = 0;
          if (v50 <= 0xFFFFFFFFFFFFFFFDLL && v50 + 2 <= v70)
          {
            *(_WORD *)(v69 + v50) = 2870;
            unint64_t v51 = v50 + 2;
          }
        }
        unint64_t v52 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v53 = *((void *)v7 + 8);
        if (v52 + 16 >= v53) {
          unint64_t v52 = 0;
        }
        if (v51 <= 0x10) {
          unint64_t v51 = 16;
        }
        unint64_t v54 = v52 + v51;
        if (v53 <= v54) {
          unint64_t v54 = 0;
        }
        *((void *)v7 + 10) = v54;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v54);
        *((_DWORD *)v7 + 29) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v68, (uint64_t **)v7 + 1);
        uint64_t v55 = v68;
        int v56 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)int v56 = 829;
        *((void *)v56 + 1) = v9;
        *((void *)v56 + 66) = (char *)v56 + 16;
        *((void *)v56 + 67) = 512;
        *((void *)v56 + 68) = 0;
        *((void *)v56 + 70) = 0;
        *((void *)v56 + 69) = 0;
        IPC::Encoder::encodeHeader(v56);
        *(void *)long long buf = v56;
        IPC::ArgumentCoder<WebCore::Path,void>::encode(v56, a2);
        IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v56, a3);
        int v58 = IPC::Connection::sendMessageImpl((uint64_t)v55, (uint64_t *)buf, 1, 0);
        BOOL v59 = *(IPC::Encoder **)buf;
        *(void *)long long buf = 0;
        if (v59)
        {
          IPC::Encoder::~Encoder(v59, v57);
          WTF::fastFree(v64, v65);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v68);
        if (v58)
        {
LABEL_86:
          unsigned int v60 = off_1EB3583E8;
          if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
          {
            int v61 = IPC::errorAsString();
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_ClipPath";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v61;
            _os_log_impl(&dword_1985F2000, v60, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
          }
          uint64_t v62 = v4[481];
          if (v62)
          {
            uint64_t v63 = *(unsigned char **)(v62 + 8);
            if (v63) {
              WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v63);
            }
          }
        }
LABEL_25:
        unint64_t v22 = v66;
        unint64_t v66 = 0;
        if (v22)
        {
          char v23 = 0;
          uint64_t v24 = *((void *)v22 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v23, 1u, memory_order_acquire, memory_order_acquire);
          if (v23) {
            MEMORY[0x19972E8D0](v24);
          }
          uint64_t v25 = *(void *)(v24 + 8);
          int v26 = 1;
          uint64_t v27 = v25 - 1;
          *(void *)(v24 + 8) = v25 - 1;
          if (v25 == 1)
          {
            uint64_t v48 = *(void *)(v24 + 16);
            uint64_t v28 = *(void *)(v24 + 24);
            *(void *)(v24 + 24) = 0;
            BOOL v29 = v48 != 0;
          }
          else
          {
            uint64_t v28 = 0;
            BOOL v29 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
          if (v26 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v24);
          }
          if (!v27)
          {
            if (v28) {
              (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
            }
            if (!v29) {
              WTF::fastFree((WTF *)v24, v16);
            }
          }
        }
        __n128 result = v67;
        char v67 = 0;
        if (result)
        {
          if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)result);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result, v16);
            return (void *)WTF::fastFree(v46, v47);
          }
        }
      }
    }
  }
  return result;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordResetClip(void *this)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = this[481];
  if (!v1) {
    return this;
  }
  uint64_t v2 = this;
  this = *(void **)(v1 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v66);
  if (!v66) {
    return this;
  }
  uint64_t v3 = v2[479];
  char v4 = 1;
  if (!v3)
  {
    uint64_t v5 = 0;
    goto LABEL_6;
  }
  char v41 = 0;
  uint64_t v5 = v2[480];
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v41, 1u, memory_order_acquire, memory_order_acquire);
  if (v41) {
    this = (void *)MEMORY[0x19972E8D0](v3);
  }
  if (*(void *)(v3 + 24)) {
    ++*(void *)(v3 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  int v42 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v42, 0, memory_order_release, memory_order_relaxed);
  if (v42 == 1)
  {
    if (!v5) {
      goto LABEL_6;
    }
  }
  else
  {
    this = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (!v5) {
      goto LABEL_6;
    }
  }
  if (!*(unsigned char *)(v5 + 4016))
  {
    *(unsigned char *)(v5 + 4016) = 1;
    this = (void *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v5);
    if (this) {
      this = (void *)(*(uint64_t (**)(void *))(*this + 160))(this);
    }
  }
  char v4 = 0;
LABEL_6:
  char v6 = v66;
  uint64_t v7 = v2[478];
  double v8 = *((double *)v66 + 15);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
    double v9 = v8 + v10;
  }
  if (*((void *)v6 + 7) != v7)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, buf, v9);
    if (!buf[16]) {
      goto LABEL_49;
    }
    uint64_t v21 = *(void *)buf;
    unint64_t v22 = *(void *)&buf[8];
    unint64_t v23 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - *(void *)buf;
    if (v23 < *(void *)buf)
    {
      unint64_t v26 = 0;
      unint64_t v25 = *(void *)&buf[8];
    }
    else
    {
      unint64_t v25 = 0;
      if (v24 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v26 = 0;
      }
      else
      {
        unint64_t v26 = 0;
        if (v24 + 2 <= *(void *)&buf[8])
        {
          *(_WORD *)(*(void *)buf + v24) = 2871;
          unint64_t v25 = v22;
          unint64_t v26 = v24 + 2;
        }
      }
    }
    uint64_t v27 = (void *)((v21 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v27 >= v21 + v26)
    {
      uint64_t v28 = (char *)v27 - v21;
      if ((unint64_t)v27 - v21 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_49;
      }
      unint64_t v26 = (unint64_t)(v28 + 8);
      if ((unint64_t)(v28 + 8) > v25) {
        goto LABEL_49;
      }
      *uint64_t v27 = v7;
    }
    if (!v25)
    {
LABEL_49:
      unint64_t v36 = off_1EB3583E8;
      if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v37 = IPC::errorAsString();
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_ResetClip";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v37;
        _os_log_impl(&dword_1985F2000, v36, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
      }
      uint64_t v38 = v2[481];
      if (v38)
      {
        unint64_t v39 = *(unsigned char **)(v38 + 8);
        if (v39) {
          WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v39);
        }
      }
      goto LABEL_84;
    }
    unint64_t v29 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v30 = *((void *)v6 + 8);
    if (v29 + 16 >= v30) {
      unint64_t v29 = 0;
    }
    if (v26 <= 0x10) {
      unint64_t v26 = 16;
    }
    unint64_t v31 = v29 + v26;
    if (v30 <= v31) {
      unint64_t v32 = 0;
    }
    else {
      unint64_t v32 = v31;
    }
    *((void *)v6 + 10) = v32;
    unint64_t v33 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v32);
    int v34 = *((_DWORD *)v6 + 29);
    if (v33 == 0x80000000 || v34 != 0)
    {
      unsigned int v40 = v34 + 1;
      *((_DWORD *)v6 + 29) = v40;
      if (v40 >= *((_DWORD *)v6 + 28))
      {
        if (*((unsigned char *)v6 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
        }
        *((_DWORD *)v6 + 29) = 0;
      }
    }
    *((void *)v6 + 7) = v7;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, buf, v9);
  if (!buf[16]) {
    goto LABEL_49;
  }
  unint64_t v12 = *(void *)buf;
  uint64_t v13 = *(void *)&buf[8];
  BOOL v14 = (_WORD *)((*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v15 = (unint64_t)v14 - *(void *)buf;
  if ((unint64_t)v14 < *(void *)buf)
  {
    unint64_t v16 = 0;
    if (*(void *)&buf[8]) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v15 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_70;
    }
    unint64_t v16 = v15 + 2;
    if (v15 + 2 > *(void *)&buf[8]) {
      goto LABEL_70;
    }
    _WORD *v14 = 867;
    if (v13)
    {
LABEL_14:
      unint64_t v17 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v18 = *((void *)v6 + 8);
      if (v17 + 16 >= v18) {
        unint64_t v17 = 0;
      }
      if (v16 <= 0x10) {
        unint64_t v16 = 16;
      }
      unint64_t v19 = v17 + v16;
      if (v18 <= v19) {
        unint64_t v20 = 0;
      }
      else {
        unint64_t v20 = v19;
      }
      *((void *)v6 + 10) = v20;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v20) == 0x80000000
        || *((_DWORD *)v6 + 29))
      {
        if (*((unsigned char *)v6 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
        }
        *((_DWORD *)v6 + 29) = 0;
      }
      goto LABEL_84;
    }
  }
  unint64_t v43 = buf[16];
  if (!buf[16])
  {
    __break(1u);
LABEL_103:
    unint64_t v46 = 0;
    goto LABEL_76;
  }
  unint64_t v12 = *(void *)buf;
  BOOL v14 = (_WORD *)((*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_70:
  unint64_t v16 = 0;
  BOOL v44 = (unint64_t)v14 >= v12;
  unint64_t v45 = (unint64_t)v14 - v12;
  if (v44 && v45 <= 0xFFFFFFFFFFFFFFFDLL && v45 + 2 <= *(void *)&buf[8])
  {
    *(_WORD *)(v12 + v45) = 2870;
    unint64_t v16 = v45 + 2;
  }
  unint64_t v46 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *((void *)v6 + 8);
  if (v46 + 16 >= v43) {
    goto LABEL_103;
  }
LABEL_76:
  if (v16 <= 0x10) {
    unint64_t v16 = 16;
  }
  unint64_t v47 = v46 + v16;
  if (v43 <= v47) {
    unint64_t v48 = 0;
  }
  else {
    unint64_t v48 = v47;
  }
  *((void *)v6 + 10) = v48;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v48);
  *((_DWORD *)v6 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v6 + 1);
  unint64_t v49 = v67;
  unint64_t v50 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v50 = 867;
  *((void *)v50 + 1) = v7;
  *((void *)v50 + 66) = (char *)v50 + 16;
  *((void *)v50 + 67) = 512;
  *((void *)v50 + 68) = 0;
  *((void *)v50 + 70) = 0;
  *((void *)v50 + 69) = 0;
  IPC::Encoder::encodeHeader(v50);
  unint64_t v68 = v50;
  int v52 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v68, 1, 0);
  unint64_t v53 = v68;
  unint64_t v68 = 0;
  if (v53)
  {
    IPC::Encoder::~Encoder(v53, v51);
    WTF::fastFree(v61, v62);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v67);
  if (v52) {
    goto LABEL_49;
  }
LABEL_84:
  if ((v4 & 1) == 0)
  {
    char v54 = 0;
    uint64_t v55 = *(void *)(v5 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v55, (unsigned __int8 *)&v54, 1u, memory_order_acquire, memory_order_acquire);
    if (v54) {
      MEMORY[0x19972E8D0](v55);
    }
    uint64_t v56 = *(void *)(v55 + 8);
    int v57 = 1;
    uint64_t v58 = v56 - 1;
    *(void *)(v55 + 8) = v56 - 1;
    if (v56 == 1)
    {
      uint64_t v65 = *(void *)(v55 + 16);
      uint64_t v59 = *(void *)(v55 + 24);
      *(void *)(v55 + 24) = 0;
      BOOL v60 = v65 != 0;
    }
    else
    {
      uint64_t v59 = 0;
      BOOL v60 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v55, (unsigned __int8 *)&v57, 0, memory_order_release, memory_order_relaxed);
    if (v57 == 1)
    {
      if (!v58)
      {
LABEL_91:
        if (v59) {
          (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
        }
        if (!v60) {
          WTF::fastFree((WTF *)v55, v11);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v55);
      if (!v58) {
        goto LABEL_91;
      }
    }
  }
  this = v66;
  unint64_t v66 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v11);
      return (void *)WTF::fastFree(v63, v64);
    }
  }
  return this;
}

uint64_t *WebKit::RemoteDisplayListRecorderProxy::recordDrawFilteredImageBuffer(void *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  LOBYTE(v61) = 0;
  char v62 = 0;
  if (a2)
  {
    uint64_t v7 = *(void *)(a2 + 120);
    char v62 = 1;
    uint64_t v61 = v7;
  }
  if (*(unsigned char *)(a4 + 48) == 1 && *(unsigned char *)(a4 + 40) != 0)
  {
    uint64_t v9 = a1[481];
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 8);
      if (v10) {
        WebKit::RemoteResourceCacheProxy::recordFilterUse(v10 + 72, a4);
      }
    }
  }
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v57, a4);
  uint64_t v58 = &v61;
  uint64_t v59 = a3;
  BOOL v60 = &v57;
  uint64_t v12 = a1[481];
  if (v12)
  {
    uint64_t v13 = *(WebKit::RemoteRenderingBackendProxy **)(v12 + 8);
    if (v13)
    {
      WebKit::RemoteRenderingBackendProxy::connection(v13, (atomic_uint **)&v64);
      BOOL v14 = v64;
      if (v64)
      {
        unint64_t v15 = (WebKit::RemoteImageBufferProxy *)a1[479];
        if (v15)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v15, a1[480], &v63);
          unint64_t v15 = v63;
          if (v63 && !*((unsigned char *)v63 + 4016))
          {
            *((unsigned char *)v63 + 4016) = 1;
            unint64_t v15 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v15);
          }
        }
        else
        {
          uint64_t v63 = 0;
        }
        uint64_t v16 = a1[478];
        double v17 = *((double *)v14 + 15);
        double v18 = INFINITY;
        if (fabs(v17) != INFINITY)
        {
          WTF::ApproximateTime::now(v15);
          double v18 = v17 + v19;
        }
        if (*((void *)v14 + 7) != v16)
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v14 + 64, buf, v18);
          if (!buf[16]) {
            goto LABEL_70;
          }
          uint64_t v37 = *(void *)buf;
          unint64_t v38 = *(void *)&buf[8];
          unint64_t v39 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v40 = v39 - *(void *)buf;
          if (v39 < *(void *)buf)
          {
            unint64_t v42 = 0;
            unint64_t v41 = *(void *)&buf[8];
          }
          else
          {
            unint64_t v41 = 0;
            if (v40 > 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v42 = 0;
            }
            else
            {
              unint64_t v42 = 0;
              if (v40 + 2 <= *(void *)&buf[8])
              {
                *(_WORD *)(*(void *)buf + v40) = 2871;
                unint64_t v41 = v38;
                unint64_t v42 = v40 + 2;
              }
            }
          }
          unint64_t v43 = (void *)((v37 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((unint64_t)v43 >= v37 + v42)
          {
            BOOL v44 = (char *)v43 - v37;
            if ((unint64_t)v43 - v37 > 0xFFFFFFFFFFFFFFF7) {
              goto LABEL_70;
            }
            unint64_t v42 = (unint64_t)(v44 + 8);
            if ((unint64_t)(v44 + 8) > v41) {
              goto LABEL_70;
            }
            *unint64_t v43 = v16;
          }
          if (!v41)
          {
LABEL_70:
            unint64_t v49 = off_1EB3583E8;
            if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
            {
              unint64_t v50 = IPC::errorAsString();
              *(_DWORD *)long long buf = 136446466;
              *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_DrawFilteredImageBuffer";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v50;
              _os_log_impl(&dword_1985F2000, v49, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
            }
            uint64_t v51 = a1[481];
            if (v51)
            {
              int v52 = *(unsigned char **)(v51 + 8);
              if (v52) {
                WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v52);
              }
            }
            goto LABEL_33;
          }
          unint64_t v45 = (*((void *)v14 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v46 = *((void *)v14 + 8);
          if (v45 + 16 >= v46) {
            unint64_t v45 = 0;
          }
          if (v42 <= 0x10) {
            unint64_t v42 = 16;
          }
          unint64_t v47 = v45 + v42;
          if (v46 <= v47) {
            unint64_t v48 = 0;
          }
          else {
            unint64_t v48 = v47;
          }
          *((void *)v14 + 10) = v48;
          IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v14, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v14 + 9) + 16) + 128), v48) == 0x80000000);
          *((void *)v14 + 7) = v16;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v14 + 64, &v65, v18);
        if (v67)
        {
          *(void *)long long buf = v65;
          *(void *)&buf[8] = v66;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v20 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v21 = v20 >= v65;
          unint64_t v22 = v20 - v65;
          if (v21)
          {
            if (v22 > 0xFFFFFFFFFFFFFFFDLL || v22 + 2 > v66)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v65 + v22) = 838;
              *(void *)&uint8_t buf[16] = v22 + 2;
            }
          }
          IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(buf, (uint64_t)v58);
          IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v59);
          IPC::ArgumentCoder<WebCore::Filter,void>::encode((WTF::StringImpl *)buf, *v60);
          if (*(void *)&buf[8])
          {
            uint64_t v23 = *(void *)&buf[16];
            unint64_t v24 = (*((void *)v14 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v25 = *((void *)v14 + 8);
            if (v24 + 16 >= v25) {
              unint64_t v24 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v23 = 16;
            }
            unint64_t v26 = v24 + v23;
            if (v25 <= v26) {
              unint64_t v26 = 0;
            }
            *((void *)v14 + 10) = v26;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v14 + 9) + 16) + 128), v26) == 0x80000000
              || *((_DWORD *)v14 + 29))
            {
              if (*((unsigned char *)v14 + 104)) {
                MEMORY[0x1997420B0](*((unsigned int *)v14 + 23));
              }
              *((_DWORD *)v14 + 29) = 0;
            }
LABEL_33:
            uint64_t v27 = v63;
            uint64_t v63 = 0;
            if (v27)
            {
              char v28 = 0;
              uint64_t v29 = *((void *)v27 + 1);
              atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v29, (unsigned __int8 *)&v28, 1u, memory_order_acquire, memory_order_acquire);
              if (v28) {
                MEMORY[0x19972E8D0](v29);
              }
              uint64_t v30 = *(void *)(v29 + 8);
              int v31 = 1;
              uint64_t v32 = v30 - 1;
              *(void *)(v29 + 8) = v30 - 1;
              if (v30 == 1)
              {
                uint64_t v56 = *(void *)(v29 + 16);
                uint64_t v33 = *(void *)(v29 + 24);
                *(void *)(v29 + 24) = 0;
                BOOL v34 = v56 != 0;
              }
              else
              {
                uint64_t v33 = 0;
                BOOL v34 = 1;
              }
              atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v29, (unsigned __int8 *)&v31, 0, memory_order_release, memory_order_relaxed);
              if (v31 != 1) {
                WTF::Lock::unlockSlow((WTF::Lock *)v29);
              }
              if (!v32)
              {
                if (v33) {
                  (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
                }
                if (!v34) {
                  WTF::fastFree((WTF *)v29, v11);
                }
              }
            }
            unint64_t v35 = (unsigned int *)v64;
            char v64 = 0;
            if (v35 && atomic_fetch_add((atomic_uint *volatile)v35, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v35);
              IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v35, v11);
              WTF::fastFree(v54, v55);
            }
            return WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v57, v11);
          }
          if (!v67) {
            __break(1u);
          }
          IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v14, v65, v66);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v14 + 1);
          int v53 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawFilteredImageBuffer>(*(uint64_t *)buf, (uint64_t)&v58, v16);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
          if (!v53) {
            goto LABEL_33;
          }
        }
        goto LABEL_70;
      }
    }
  }
  return WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v57, v11);
}

uint64_t WebKit::RemoteDisplayListRecorderProxy::recordResourceUse(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 3848);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return 0;
  }
  WebKit::RemoteResourceCacheProxy::recordFilterUse(v3 + 72, a2);
  return 1;
}

{
  WebKit::RemoteRenderingBackendProxy *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  atomic_uint *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  void *v18;
  int v19;
  atomic_uchar *v20;
  atomic_uchar *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  WTF::ApproximateTime *v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  unint64_t v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  unint64_t v47;
  BOOL v49;
  unint64_t v50;
  void *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  atomic_uint v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  IPC::Encoder *v68;
  void *v69;
  int v70;
  IPC::Encoder *v71;
  NSObject *v72;
  uint64_t v73;
  const char *v74;
  WTF *v75;
  void *v76;
  WTF *v77;
  void *v78;
  atomic_uint *v79;
  atomic_uint *v80;
  uint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  char v84;
  unsigned char buf[24];
  const char *v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 3848);
  if (!v5) {
    return 0;
  }
  char v6 = *(void *)(v5 + 8);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (atomic_uint *)a2;
  if (!*(unsigned char *)(a2 + 40)) {
    goto LABEL_103;
  }
  uint64_t v9 = (uint64_t *)(v6 + 96);
  double v8 = *(void *)(v6 + 96);
  uint64_t v10 = *(void *)(a2 + 32);
  if (v8
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(v6 + 96)),
        (double v8 = *v9) != 0))
  {
    double v11 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v12 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
  uint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  BOOL v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unint64_t v15 = v11 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (void *)(v8 + 24 * v15);
  double v17 = *v16;
  if (*v16)
  {
    double v18 = 0;
    double v19 = 1;
    do
    {
      if (v17 == v10) {
        return 1;
      }
      if (v17 == -1) {
        double v18 = v16;
      }
      unint64_t v15 = (v15 + v19) & v11;
      uint64_t v16 = (void *)(v8 + 24 * v15);
      double v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      WebKit::RemoteImageBufferProxy *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      --*(_DWORD *)(*v9 - 16);
      uint64_t v16 = v18;
    }
  }
  *uint64_t v16 = v10;
  unint64_t v20 = (atomic_uchar *)*((void *)v7 + 1);
  if (v20) {
    unint64_t v20 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v20);
  }
  BOOL v21 = (atomic_uchar *)v16[1];
  v16[1] = v20;
  if (v21) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v21, (void *)a2);
  }
  _OWORD v16[2] = v7;
  unint64_t v22 = *v9;
  if (*v9) {
    uint64_t v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    uint64_t v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  unint64_t v24 = *v9;
  if (*v9) {
    unint64_t v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    unint64_t v25 = 0;
  }
  unint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  uint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26) {
      goto LABEL_24;
    }
  }
  else if (3 * v27 > 4 * v26)
  {
    goto LABEL_24;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(v6 + 96));
LABEL_24:
  WTF::WeakHashSet<WebCore::RenderingResourceObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderingResourceObserver>((uint64_t)buf, v7 + 4, v6 + 72);
  char v28 = 0;
  uint64_t v2 = *(WebKit::RemoteRenderingBackendProxy **)(v6 + 128);
  uint64_t v3 = *((void *)v7 + 1);
  LODWORD(v4) = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v28, 1u, memory_order_acquire, memory_order_acquire);
  if (v28) {
    goto LABEL_104;
  }
  while (1)
  {
    ++*(void *)(v3 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
    }
    v79 = v7;
    char v4 = *((void *)v2 + 8);
    uint64_t v29 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(v2, &v80);
    uint64_t v7 = v80;
    if (!v80) {
      break;
    }
    int v31 = *((double *)v80 + 15);
    uint64_t v32 = INFINITY;
    if (fabs(v31) != INFINITY)
    {
      WTF::ApproximateTime::now(v29);
      uint64_t v32 = v31 + v33;
    }
    if (*((void *)v7 + 7) == v4) {
      goto LABEL_31;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 16), buf, v32);
    if (!buf[16]) {
      goto LABEL_100;
    }
    unint64_t v42 = *(void *)buf;
    unint64_t v43 = *(void *)&buf[8];
    BOOL v44 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v45 = v44 - *(void *)buf;
    unint64_t v46 = v44 >= *(void *)buf;
    unint64_t v47 = v44 - *(void *)buf + 2;
    unint64_t v49 = v45 < 0xFFFFFFFFFFFFFFFELL && v47 <= *(void *)&buf[8];
    if (v46 && v49) {
      goto LABEL_65;
    }
    if (!v46)
    {
      unint64_t v47 = 0;
      goto LABEL_66;
    }
    unint64_t v50 = 0;
    if (v45 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v47 = 0;
      goto LABEL_67;
    }
    unint64_t v47 = 0;
    if (v45 + 2 <= *(void *)&buf[8])
    {
      unint64_t v47 = v45 + 2;
LABEL_65:
      *(_WORD *)(*(void *)buf + v45) = 2871;
LABEL_66:
      unint64_t v50 = v43;
    }
LABEL_67:
    uint64_t v51 = (void *)((v42 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v51 >= v42 + v47)
    {
      int v52 = (char *)v51 - v42;
      uint64_t v3 = 17;
      if ((unint64_t)v51 - v42 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_100;
      }
      unint64_t v47 = (unint64_t)(v52 + 8);
      if ((unint64_t)(v52 + 8) > v50) {
        goto LABEL_100;
      }
      void *v51 = v4;
    }
    if (!v50) {
      goto LABEL_100;
    }
    int v53 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    char v54 = *((void *)v7 + 8);
    if (v53 + 16 >= v54) {
      int v53 = 0;
    }
    if (v47 <= 0x10) {
      unint64_t v47 = 16;
    }
    uint64_t v55 = v53 + v47;
    if (v54 <= v55) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = v55;
    }
    *((void *)v7 + 10) = v56;
    uint64_t v57 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v56);
    uint64_t v58 = v7[29];
    if (v57 == 0x80000000 || v58)
    {
      uint64_t v59 = v58 + 1;
      v7[29] = v59;
      if (v59 >= v7[28])
      {
        if (*((unsigned char *)v7 + 104)) {
          MEMORY[0x1997420B0](v7[23]);
        }
        v7[29] = 0;
      }
    }
    *((void *)v7 + 7) = v4;
LABEL_31:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 16), &v82, v32);
    if (!v84) {
      goto LABEL_100;
    }
    *(void *)long long buf = v82;
    *(void *)&buf[8] = v83;
    *(void *)&uint8_t buf[16] = 0;
    BOOL v34 = (v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = v34 >= v82;
    unint64_t v36 = v34 - v82;
    if (v35)
    {
      if (v36 > 0xFFFFFFFFFFFFFFFDLL || v36 + 2 > v83)
      {
        *(void *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v82 + v36) = 1321;
        *(void *)&uint8_t buf[16] = v36 + 2;
      }
    }
    IPC::ArgumentCoder<WebCore::DecomposedGlyphs,void>::encode((uint64_t *)buf, (uint64_t)v79);
    if (*(void *)&buf[8])
    {
      uint64_t v37 = *(void *)&buf[16];
      unint64_t v38 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v39 = *((void *)v7 + 8);
      if (v38 + 16 >= v39) {
        unint64_t v38 = 0;
      }
      if (*(void *)&buf[16] <= 0x10uLL) {
        uint64_t v37 = 16;
      }
      unint64_t v40 = v38 + v37;
      if (v39 <= v40) {
        unint64_t v40 = 0;
      }
      *((void *)v7 + 10) = v40;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v40) == 0x80000000
        || v7[29])
      {
        if (*((unsigned char *)v7 + 104)) {
          MEMORY[0x1997420B0](v7[23]);
        }
        v7[29] = 0;
      }
      goto LABEL_46;
    }
    if (v84)
    {
      BOOL v60 = v4;
      uint64_t v61 = (v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
      char v62 = v61 - v82;
      if (v61 < v82)
      {
        uint64_t v63 = 0;
      }
      else
      {
        uint64_t v63 = 0;
        if (v62 <= 0xFFFFFFFFFFFFFFFDLL && v62 + 2 <= v83)
        {
          *(_WORD *)(v82 + v62) = 2870;
          uint64_t v63 = v62 + 2;
        }
      }
      char v64 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v65 = *((void *)v7 + 8);
      if (v64 + 16 >= v65) {
        char v64 = 0;
      }
      if (v63 <= 0x10) {
        uint64_t v63 = 16;
      }
      unint64_t v66 = v64 + v63;
      if (v65 <= v66) {
        unint64_t v66 = 0;
      }
      *((void *)v7 + 10) = v66;
      atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v66);
      v7[29] = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v81, (uint64_t **)v7 + 1);
      char v67 = v81;
      unint64_t v68 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unint64_t v68 = 1321;
      *((void *)v68 + 1) = v60;
      *((void *)v68 + 66) = (char *)v68 + 16;
      *((void *)v68 + 67) = 512;
      *((void *)v68 + 68) = 0;
      *((void *)v68 + 70) = 0;
      *((void *)v68 + 69) = 0;
      IPC::Encoder::encodeHeader(v68);
      *(void *)long long buf = v68;
      IPC::ArgumentCoder<WebCore::DecomposedGlyphs,void>::encode(v68, (uint64_t)v79);
      uint64_t v70 = IPC::Connection::sendMessageImpl((uint64_t)v67, (uint64_t *)buf, 1, 0);
      char v71 = *(IPC::Encoder **)buf;
      *(void *)long long buf = 0;
      if (v71)
      {
        IPC::Encoder::~Encoder(v71, v69);
        WTF::fastFree(v77, v78);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v81);
      if (v70)
      {
LABEL_100:
        uint64_t v72 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v73 = *((void *)v2 + 8);
          unint64_t v74 = IPC::errorAsString();
          *(_DWORD *)long long buf = 134218498;
          *(void *)&uint8_t buf[4] = v73;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = "RemoteRenderingBackend_CacheDecomposedGlyphs";
          *(_WORD *)&unsigned char buf[22] = 2082;
          v86 = v74;
          _os_log_impl(&dword_1985F2000, v72, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
        }
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v2);
      }
LABEL_46:
      v80 = 0;
      if (atomic_fetch_add(v7, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v7);
        IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v7, v30);
        WTF::fastFree(v75, v76);
      }
      break;
    }
LABEL_103:
    __break(1u);
LABEL_104:
    MEMORY[0x19972E8D0](v3);
  }
  WTF::Ref<WebCore::DecomposedGlyphs,WTF::RawPtrTraits<WebCore::DecomposedGlyphs>,WTF::DefaultRefDerefTraits<WebCore::DecomposedGlyphs>>::~Ref((uint64_t *)&v79, v30);
  return 1;
}

{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  int v16;
  atomic_uchar *v17;
  atomic_uchar *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  WebKit::RemoteRenderingBackendProxy *v26;
  uint64_t v27;
  WTF::ApproximateTime *v28;
  void *v29;
  atomic_uint *v30;
  double v31;
  double v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  IPC::Encoder *v41;
  void *v42;
  int v43;
  IPC::Encoder *v44;
  WTF *v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  unint64_t v53;
  BOOL v55;
  unint64_t v56;
  void *v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  atomic_uint v64;
  unsigned int v65;
  WTF *v66;
  void *v67;
  NSObject *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  atomic_uint *v72;
  uint64_t *v73;
  IPC::Encoder *v74;
  unsigned char buf[22];
  __int16 v76;
  const char *v77;
  uint64_t v78;

  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 3848);
  if (v5)
  {
    char v6 = *(void *)(v5 + 8);
    if (v6)
    {
      if (*(unsigned char *)(a2 + 40))
      {
        uint64_t v3 = (uint64_t *)(v6 + 96);
        double v8 = *(void *)(v6 + 96);
        char v4 = *(void *)(a2 + 32);
        if (v8
          || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(v6 + 96)),
              (double v8 = *v3) != 0))
        {
          uint64_t v9 = *(_DWORD *)(v8 - 8);
        }
        else
        {
          uint64_t v9 = 0;
        }
        uint64_t v10 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
        double v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        uint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        uint64_t v13 = v9 & ((v12 >> 31) ^ v12);
        BOOL v14 = (void *)(v8 + 24 * v13);
        unint64_t v15 = *v14;
        if (*v14)
        {
          uint64_t v2 = 0;
          uint64_t v16 = 1;
          while (v15 != v4)
          {
            if (v15 == -1) {
              uint64_t v2 = v14;
            }
            uint64_t v13 = (v13 + v16) & v9;
            BOOL v14 = (void *)(v8 + 24 * v13);
            unint64_t v15 = *v14;
            ++v16;
            if (!*v14)
            {
              if (v2) {
                goto LABEL_47;
              }
              goto LABEL_13;
            }
          }
          return 1;
        }
      }
      else
      {
        __break(1u);
LABEL_47:
        void *v2 = 0;
        v2[1] = 0;
        v2[2] = 0;
        --*(_DWORD *)(*v3 - 16);
        BOOL v14 = v2;
      }
LABEL_13:
      IPC::StreamClientConnection *v14 = v4;
      double v17 = *(atomic_uchar **)(a2 + 8);
      if (v17) {
        double v17 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v17);
      }
      double v18 = (atomic_uchar *)v14[1];
      v14[1] = v17;
      if (v18) {
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v18, (void *)a2);
      }
      void v14[2] = a2;
      double v19 = *v3;
      if (*v3) {
        unint64_t v20 = *(_DWORD *)(v19 - 12) + 1;
      }
      else {
        unint64_t v20 = 1;
      }
      BOOL v21 = v6 + 72;
      *(_DWORD *)(v19 - 12) = v20;
      unint64_t v22 = *v3;
      if (*v3) {
        uint64_t v23 = *(_DWORD *)(v22 - 12);
      }
      else {
        uint64_t v23 = 0;
      }
      unint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
      unint64_t v25 = *(unsigned int *)(v22 - 4);
      if (v25 > 0x400)
      {
        if (v25 > 2 * v24) {
          goto LABEL_23;
        }
      }
      else if (3 * v25 > 4 * v24)
      {
        goto LABEL_23;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v3);
      BOOL v21 = v6 + 72;
LABEL_23:
      WTF::WeakHashSet<WebCore::RenderingResourceObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderingResourceObserver>((uint64_t)buf, (_DWORD *)(a2 + 16), v21);
      unint64_t v26 = *(WebKit::RemoteRenderingBackendProxy **)(v6 + 128);
      WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v71, a2);
      uint64_t v27 = *((void *)v26 + 8);
      char v28 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(v26, &v72);
      uint64_t v30 = v72;
      if (!v72)
      {
LABEL_43:
        WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v71, v29);
        return 1;
      }
      int v31 = *((double *)v72 + 15);
      uint64_t v32 = INFINITY;
      if (fabs(v31) != INFINITY)
      {
        WTF::ApproximateTime::now(v28);
        uint64_t v32 = v31 + v33;
      }
      if (*((void *)v30 + 7) == v27)
      {
LABEL_27:
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v30 + 16), buf, v32);
        if (buf[16])
        {
          BOOL v34 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v35 = v34 - *(void *)buf;
          if (v34 < *(void *)buf)
          {
            unint64_t v36 = 0;
          }
          else
          {
            unint64_t v36 = 0;
            if (v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= *(void *)&buf[8])
            {
              *(_WORD *)(*(void *)buf + v35) = 2870;
              unint64_t v36 = v35 + 2;
            }
          }
          uint64_t v37 = (*((void *)v30 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v38 = *((void *)v30 + 8);
          if (v37 + 16 >= v38) {
            uint64_t v37 = 0;
          }
          if (v36 <= 0x10) {
            unint64_t v36 = 16;
          }
          unint64_t v39 = v37 + v36;
          if (v38 <= v39) {
            unint64_t v39 = 0;
          }
          *((void *)v30 + 10) = v39;
          atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v30 + 9) + 16) + 128), v39);
          v30[29] = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)v30 + 1);
          unint64_t v40 = v73;
          unint64_t v41 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)unint64_t v41 = 1325;
          *((void *)v41 + 1) = v27;
          *((void *)v41 + 66) = (char *)v41 + 16;
          *((void *)v41 + 67) = 512;
          *((void *)v41 + 68) = 0;
          *((void *)v41 + 70) = 0;
          *((void *)v41 + 69) = 0;
          IPC::Encoder::encodeHeader(v41);
          unint64_t v74 = v41;
          IPC::ArgumentCoder<WebCore::Gradient,void>::encode(v41, v71);
          unint64_t v43 = IPC::Connection::sendMessageImpl((uint64_t)v40, (uint64_t *)&v74, 1, 0);
          BOOL v44 = v74;
          unint64_t v74 = 0;
          if (v44)
          {
            IPC::Encoder::~Encoder(v44, v42);
            WTF::fastFree(v46, v47);
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
          if (!v43) {
            goto LABEL_41;
          }
        }
        goto LABEL_82;
      }
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v30 + 16), buf, v32);
      if (!buf[16]) {
        goto LABEL_82;
      }
      unint64_t v48 = *(void *)buf;
      unint64_t v49 = *(void *)&buf[8];
      unint64_t v50 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v51 = v50 - *(void *)buf;
      int v52 = v50 >= *(void *)buf;
      int v53 = v50 - *(void *)buf + 2;
      uint64_t v55 = v51 < 0xFFFFFFFFFFFFFFFELL && v53 <= *(void *)&buf[8];
      if (!v52 || !v55)
      {
        if (!v52)
        {
          int v53 = 0;
          goto LABEL_60;
        }
        uint64_t v56 = 0;
        if (v51 > 0xFFFFFFFFFFFFFFFDLL)
        {
          int v53 = 0;
          goto LABEL_61;
        }
        int v53 = 0;
        if (v51 + 2 > *(void *)&buf[8])
        {
LABEL_61:
          uint64_t v57 = (void *)((v48 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((unint64_t)v57 >= v48 + v53)
          {
            uint64_t v58 = (char *)v57 - v48;
            if ((unint64_t)v57 - v48 > 0xFFFFFFFFFFFFFFF7) {
              goto LABEL_82;
            }
            int v53 = (unint64_t)(v58 + 8);
            if ((unint64_t)(v58 + 8) > v56) {
              goto LABEL_82;
            }
            *uint64_t v57 = v27;
          }
          if (v56)
          {
            uint64_t v59 = (*((void *)v30 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            BOOL v60 = *((void *)v30 + 8);
            if (v59 + 16 >= v60) {
              uint64_t v59 = 0;
            }
            if (v53 <= 0x10) {
              int v53 = 16;
            }
            uint64_t v61 = v59 + v53;
            if (v60 <= v61) {
              char v62 = 0;
            }
            else {
              char v62 = v61;
            }
            *((void *)v30 + 10) = v62;
            uint64_t v63 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v30 + 9) + 16) + 128), v62);
            char v64 = v30[29];
            if (v63 == 0x80000000 || v64)
            {
              unint64_t v65 = v64 + 1;
              v30[29] = v65;
              if (v65 >= v30[28])
              {
                if (*((unsigned char *)v30 + 104)) {
                  MEMORY[0x1997420B0](v30[23]);
                }
                v30[29] = 0;
              }
            }
            *((void *)v30 + 7) = v27;
            goto LABEL_27;
          }
LABEL_82:
          unint64_t v68 = off_1EB3583E8;
          if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v69 = *((void *)v26 + 8);
            uint64_t v70 = IPC::errorAsString();
            *(_DWORD *)long long buf = 134218498;
            *(void *)&uint8_t buf[4] = v69;
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = "RemoteRenderingBackend_CacheGradient";
            unsigned __int8 v76 = 2082;
            int v77 = v70;
            _os_log_impl(&dword_1985F2000, v68, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
          }
          WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v26);
LABEL_41:
          uint64_t v72 = 0;
          if (atomic_fetch_add(v30, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v30);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v30, v29);
            WTF::fastFree(v66, v67);
          }
          goto LABEL_43;
        }
        int v53 = v51 + 2;
      }
      *(_WORD *)(*(void *)buf + v51) = 2871;
LABEL_60:
      uint64_t v56 = v49;
      goto LABEL_61;
    }
  }
  return 0;
}

WTF *WebKit::RemoteDisplayListRecorderProxy::recordDrawGlyphs(void *a1)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  WebCore::DisplayList::DrawGlyphs::DrawGlyphs();
  uint64_t v3 = a1[481];
  if (v3)
  {
    char v4 = *(WebKit::RemoteRenderingBackendProxy **)(v3 + 8);
    if (v4)
    {
      WebKit::RemoteRenderingBackendProxy::connection(v4, (atomic_uint **)&v71);
      uint64_t v5 = v71;
      if (v71)
      {
        char v6 = (WTF *)a1[479];
        if (v6) {
          goto LABEL_98;
        }
        uint64_t v70 = 0;
        while (1)
        {
          uint64_t v7 = a1[478];
          double v8 = *((double *)v5 + 15);
          double v9 = INFINITY;
          if (fabs(v8) != INFINITY)
          {
            WTF::ApproximateTime::now(v6);
            double v9 = v8 + v10;
          }
          if (*((void *)v5 + 7) != v7)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
            if (!buf[16]) {
              goto LABEL_89;
            }
            uint64_t v29 = *(void *)buf;
            unint64_t v30 = *(void *)&buf[8];
            unint64_t v31 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v32 = v31 - *(void *)buf;
            if (v31 < *(void *)buf)
            {
              unint64_t v34 = 0;
              unint64_t v33 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v33 = 0;
              if (v32 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v34 = 0;
              }
              else
              {
                unint64_t v34 = 0;
                if (v32 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v32) = 2871;
                  unint64_t v33 = v30;
                  unint64_t v34 = v32 + 2;
                }
              }
            }
            unint64_t v35 = (void *)((v29 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v35 >= v29 + v34)
            {
              unint64_t v36 = (char *)v35 - v29;
              if ((unint64_t)v35 - v29 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_89;
              }
              unint64_t v34 = (unint64_t)(v36 + 8);
              if ((unint64_t)(v36 + 8) > v33) {
                goto LABEL_89;
              }
              *unint64_t v35 = v7;
            }
            if (!v33) {
              goto LABEL_89;
            }
            unint64_t v37 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v38 = *((void *)v5 + 8);
            if (v37 + 16 >= v38) {
              unint64_t v37 = 0;
            }
            if (v34 <= 0x10) {
              unint64_t v34 = 16;
            }
            unint64_t v39 = v37 + v34;
            if (v38 <= v39) {
              unint64_t v40 = 0;
            }
            else {
              unint64_t v40 = v39;
            }
            *((void *)v5 + 10) = v40;
            unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v40);
            int v42 = *((_DWORD *)v5 + 29);
            if (v41 == 0x80000000 || v42 != 0)
            {
              unsigned int v44 = v42 + 1;
              *((_DWORD *)v5 + 29) = v44;
              if (v44 >= *((_DWORD *)v5 + 28))
              {
                if (*((unsigned char *)v5 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
                }
                *((_DWORD *)v5 + 29) = 0;
              }
            }
            *((void *)v5 + 7) = v7;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, &v73, v9);
          if (!v75) {
            goto LABEL_89;
          }
          *(void *)long long buf = v73;
          *(void *)&buf[8] = v74;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v11 = (v73 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v12 = v11 >= v73;
          unint64_t v13 = v11 - v73;
          if (v12)
          {
            if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v74)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v73 + v13) = 841;
              *(void *)&uint8_t buf[16] = v13 + 2;
            }
          }
          char v6 = IPC::ArgumentCoder<WebCore::DisplayList::DrawGlyphs,void>::encode((uint64_t *)buf, &v65);
          if (*(void *)&buf[8])
          {
            uint64_t v14 = *(void *)&buf[16];
            unint64_t v15 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v16 = *((void *)v5 + 8);
            if (v15 + 16 >= v16) {
              unint64_t v15 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v14 = 16;
            }
            unint64_t v17 = v15 + v14;
            if (v16 <= v17) {
              unint64_t v17 = 0;
            }
            *((void *)v5 + 10) = v17;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v17) == 0x80000000
              || *((_DWORD *)v5 + 29))
            {
              if (*((unsigned char *)v5 + 104)) {
                MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
              }
              *((_DWORD *)v5 + 29) = 0;
            }
            goto LABEL_24;
          }
          if (v75) {
            break;
          }
          __break(1u);
LABEL_98:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6, a1[480], &v70);
          char v6 = v70;
          if (v70 && !*((unsigned char *)v70 + 4016))
          {
            *((unsigned char *)v70 + 4016) = 1;
            char v6 = (WTF *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v6);
          }
        }
        unint64_t v48 = (v73 + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v49 = v48 - v73;
        if (v48 < v73)
        {
          unint64_t v50 = 0;
        }
        else
        {
          unint64_t v50 = 0;
          if (v49 <= 0xFFFFFFFFFFFFFFFDLL && v49 + 2 <= v74)
          {
            *(_WORD *)(v73 + v49) = 2870;
            unint64_t v50 = v49 + 2;
          }
        }
        unint64_t v51 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v52 = *((void *)v5 + 8);
        if (v51 + 16 >= v52) {
          unint64_t v51 = 0;
        }
        if (v50 <= 0x10) {
          unint64_t v50 = 16;
        }
        unint64_t v53 = v51 + v50;
        if (v52 <= v53) {
          unint64_t v53 = 0;
        }
        *((void *)v5 + 10) = v53;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v53);
        *((_DWORD *)v5 + 29) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v72, (uint64_t **)v5 + 1);
        char v54 = v72;
        uint64_t v55 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v55 = 841;
        *((void *)v55 + 1) = v7;
        *((void *)v55 + 66) = (char *)v55 + 16;
        *((void *)v55 + 67) = 512;
        *((void *)v55 + 68) = 0;
        *((void *)v55 + 70) = 0;
        *((void *)v55 + 69) = 0;
        IPC::Encoder::encodeHeader(v55);
        *(void *)long long buf = v55;
        IPC::ArgumentCoder<WebCore::DisplayList::DrawGlyphs,void>::encode(v55, &v65);
        int v57 = IPC::Connection::sendMessageImpl((uint64_t)v54, (uint64_t *)buf, 1, 0);
        uint64_t v58 = *(IPC::Encoder **)buf;
        *(void *)long long buf = 0;
        if (v58)
        {
          IPC::Encoder::~Encoder(v58, v56);
          WTF::fastFree(v63, v64);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v72);
        if (v57)
        {
LABEL_89:
          uint64_t v59 = off_1EB3583E8;
          if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v60 = IPC::errorAsString();
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_DrawGlyphs";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v60;
            _os_log_impl(&dword_1985F2000, v59, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
          }
          uint64_t v61 = a1[481];
          if (v61)
          {
            char v62 = *(unsigned char **)(v61 + 8);
            if (v62) {
              WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v62);
            }
          }
        }
LABEL_24:
        double v18 = v70;
        uint64_t v70 = 0;
        if (v18)
        {
          char v19 = 0;
          uint64_t v20 = *((void *)v18 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
          if (v19) {
            MEMORY[0x19972E8D0](v20);
          }
          uint64_t v21 = *(void *)(v20 + 8);
          int v22 = 1;
          uint64_t v23 = v21 - 1;
          *(void *)(v20 + 8) = v21 - 1;
          if (v21 == 1)
          {
            uint64_t v47 = *(void *)(v20 + 16);
            uint64_t v24 = *(void *)(v20 + 24);
            *(void *)(v20 + 24) = 0;
            BOOL v25 = v47 != 0;
          }
          else
          {
            uint64_t v24 = 0;
            BOOL v25 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
          if (v22 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v20);
          }
          if (!v23)
          {
            if (v24) {
              (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
            }
            if (!v25) {
              WTF::fastFree((WTF *)v20, v2);
            }
          }
        }
        unint64_t v26 = (unsigned int *)v71;
        char v71 = 0;
        if (v26 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v26);
          IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v26, v2);
          WTF::fastFree(v45, v46);
        }
      }
    }
  }
  uint64_t v27 = v68;
  if (v68)
  {
    unint64_t v68 = 0;
    int v69 = 0;
    WTF::fastFree(v27, v2);
  }
  __n128 result = v66;
  if (v66)
  {
    unint64_t v66 = 0;
    int v67 = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

WebKit::RemoteRenderingBackendProxy *WebKit::RemoteDisplayListRecorderProxy::recordDrawDecomposedGlyphs(void *a1, WebCore::Font *this, uint64_t a3)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  __n128 result = (WebKit::RemoteRenderingBackendProxy *)WebCore::Font::renderingResourceIdentifier(this);
  v80 = result;
  unsigned int add = *(unsigned __int8 *)(a3 + 40);
  if (!*(unsigned char *)(a3 + 40)) {
    goto LABEL_98;
  }
  uint64_t v79 = *(void *)(a3 + 32);
  uint64_t v8 = a1[481];
  if (v8)
  {
    __n128 result = *(WebKit::RemoteRenderingBackendProxy **)(v8 + 8);
    if (result)
    {
      __n128 result = (WebKit::RemoteRenderingBackendProxy *)WebKit::RemoteRenderingBackendProxy::connection(result, (atomic_uint **)&v81);
      if (v81)
      {
        uint64_t v9 = a1[479];
        char v10 = 1;
        if (!v9)
        {
          uint64_t v11 = 0;
          goto LABEL_7;
        }
        char v77 = 0;
        uint64_t v11 = a1[480];
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v77, 1u, memory_order_acquire, memory_order_acquire);
        if (v77) {
          __n128 result = (WebKit::RemoteRenderingBackendProxy *)MEMORY[0x19972E8D0](v9);
        }
        if (*(void *)(v9 + 24)) {
          ++*(void *)(v9 + 8);
        }
        else {
          uint64_t v11 = 0;
        }
        int v78 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v78, 0, memory_order_release, memory_order_relaxed);
        if (v78 == 1)
        {
          if (!v11) {
            goto LABEL_7;
          }
        }
        else
        {
          __n128 result = (WebKit::RemoteRenderingBackendProxy *)WTF::Lock::unlockSlow((WTF::Lock *)v9);
          if (!v11) {
            goto LABEL_7;
          }
        }
        if (!*(unsigned char *)(v11 + 4016))
        {
          *(unsigned char *)(v11 + 4016) = 1;
          __n128 result = (WebKit::RemoteRenderingBackendProxy *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v11);
          if (result) {
            __n128 result = (WebKit::RemoteRenderingBackendProxy *)(*(uint64_t (**)(WebKit::RemoteRenderingBackendProxy *))(*(void *)result + 160))(result);
          }
        }
        char v10 = 0;
LABEL_7:
        BOOL v12 = v81;
        uint64_t v13 = a1[478];
        double v14 = *((double *)v81 + 15);
        double v15 = INFINITY;
        if (fabs(v14) != INFINITY)
        {
          WTF::ApproximateTime::now(result);
          double v15 = v14 + v16;
        }
        if (*((void *)v12 + 7) != v13)
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v12 + 64, buf, v15);
          if (!buf[16]) {
            goto LABEL_75;
          }
          uint64_t v46 = *(void *)buf;
          unint64_t v47 = *(void *)&buf[8];
          unint64_t v48 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v49 = v48 - *(void *)buf;
          if (v48 < *(void *)buf)
          {
            unint64_t v51 = 0;
            unint64_t v50 = *(void *)&buf[8];
          }
          else
          {
            unint64_t v50 = 0;
            if (v49 > 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v51 = 0;
            }
            else
            {
              unint64_t v51 = 0;
              if (v49 + 2 <= *(void *)&buf[8])
              {
                *(_WORD *)(*(void *)buf + v49) = 2871;
                unint64_t v50 = v47;
                unint64_t v51 = v49 + 2;
              }
            }
          }
          unint64_t v52 = (void *)((v46 + v51 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((unint64_t)v52 >= v46 + v51)
          {
            unint64_t v53 = (char *)v52 - v46;
            if ((unint64_t)v52 - v46 > 0xFFFFFFFFFFFFFFF7) {
              goto LABEL_75;
            }
            unint64_t v51 = (unint64_t)(v53 + 8);
            if ((unint64_t)(v53 + 8) > v50) {
              goto LABEL_75;
            }
            *unint64_t v52 = v13;
          }
          if (!v50)
          {
LABEL_75:
            uint64_t v61 = off_1EB3583E8;
            if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
            {
              char v62 = IPC::errorAsString();
              *(_DWORD *)long long buf = 136446466;
              *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_DrawDecomposedGlyphs";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v62;
              _os_log_impl(&dword_1985F2000, v61, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
            }
            uint64_t v63 = a1[481];
            if (v63)
            {
              char v64 = *(unsigned char **)(v63 + 8);
              if (v64) {
                WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v64);
              }
            }
            goto LABEL_80;
          }
          unint64_t v54 = (*((void *)v12 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v55 = *((void *)v12 + 8);
          if (v54 + 16 >= v55) {
            unint64_t v54 = 0;
          }
          if (v51 <= 0x10) {
            unint64_t v51 = 16;
          }
          unint64_t v56 = v54 + v51;
          if (v55 <= v56) {
            unint64_t v57 = 0;
          }
          else {
            unint64_t v57 = v56;
          }
          *((void *)v12 + 10) = v57;
          unint64_t v58 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v12 + 9) + 16) + 128), v57);
          int v59 = *((_DWORD *)v12 + 29);
          if (v58 == 0x80000000 || v59 != 0)
          {
            unsigned int v72 = v59 + 1;
            *((_DWORD *)v12 + 29) = v72;
            if (v72 >= *((_DWORD *)v12 + 28))
            {
              if (*((unsigned char *)v12 + 104)) {
                MEMORY[0x1997420B0](*((unsigned int *)v12 + 23));
              }
              *((_DWORD *)v12 + 29) = 0;
            }
          }
          *((void *)v12 + 7) = v13;
        }
        __n128 result = (WebKit::RemoteRenderingBackendProxy *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v12 + 64, buf, v15);
        if (!buf[16]) {
          goto LABEL_75;
        }
        uint64_t v17 = *(void *)buf;
        unint64_t v18 = *(void *)&buf[8];
        unint64_t v19 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v20 = v19 - *(void *)buf;
        if (v19 < *(void *)buf)
        {
          unint64_t v22 = 0;
          unint64_t v21 = *(void *)&buf[8];
        }
        else
        {
          unint64_t v21 = 0;
          if (v20 > 0xFFFFFFFFFFFFFFFDLL)
          {
            unint64_t v22 = 0;
          }
          else
          {
            unint64_t v22 = 0;
            if (v20 + 2 <= *(void *)&buf[8])
            {
              *(_WORD *)(*(void *)buf + v20) = 834;
              unint64_t v21 = v18;
              unint64_t v22 = v20 + 2;
            }
          }
        }
        unint64_t v23 = (v17 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
        BOOL v24 = v23 >= v17 + v22;
        unint64_t v25 = v23 - (v17 + v22);
        if (v24)
        {
          unint64_t v76 = 0;
          unint64_t v26 = v25 + v22;
          if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= v21)
          {
            *(void *)(v17 + v26) = v80;
            unint64_t v76 = v21;
            unint64_t v22 = v26 + 8;
          }
        }
        else
        {
          unint64_t v76 = v21;
        }
        uint64_t v27 = (void *)((v17 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v27 >= v17 + v22)
        {
          char v28 = (char *)v27 - v17;
          if ((unint64_t)v27 - v17 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_37;
          }
          unint64_t v22 = (unint64_t)(v28 + 8);
          if ((unint64_t)(v28 + 8) > v76) {
            goto LABEL_37;
          }
          *uint64_t v27 = v79;
        }
        if (v76)
        {
          unint64_t v29 = (*((void *)v12 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v30 = *((void *)v12 + 8);
          if (v29 + 16 >= v30) {
            unint64_t v29 = 0;
          }
          if (v22 <= 0x10) {
            unint64_t v22 = 16;
          }
          unint64_t v31 = v29 + v22;
          if (v30 <= v31) {
            unint64_t v32 = 0;
          }
          else {
            unint64_t v32 = v31;
          }
          *((void *)v12 + 10) = v32;
          if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v12 + 9) + 16) + 128), v32) == 0x80000000
            || *((_DWORD *)v12 + 29))
          {
            if (*((unsigned char *)v12 + 104)) {
              MEMORY[0x1997420B0](*((unsigned int *)v12 + 23));
            }
            *((_DWORD *)v12 + 29) = 0;
          }
          goto LABEL_80;
        }
LABEL_37:
        unsigned int add = buf[16];
        if (buf[16])
        {
          unint64_t v33 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v34 = v33 - *(void *)buf;
          if (v33 < *(void *)buf)
          {
            unint64_t v35 = 0;
          }
          else
          {
            unint64_t v35 = 0;
            if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= *(void *)&buf[8])
            {
              *(_WORD *)(*(void *)buf + v34) = 2870;
              unint64_t v35 = v34 + 2;
            }
          }
          unint64_t v36 = (*((void *)v12 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v37 = *((void *)v12 + 8);
          if (v36 + 16 >= v37) {
            unint64_t v36 = 0;
          }
          if (v35 <= 0x10) {
            unint64_t v35 = 16;
          }
          unint64_t v38 = v36 + v35;
          if (v37 <= v38) {
            unint64_t v38 = 0;
          }
          *((void *)v12 + 10) = v38;
          atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v12 + 9) + 16) + 128), v38);
          *((_DWORD *)v12 + 29) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v82, (uint64_t **)v12 + 1);
          unint64_t v39 = v82;
          unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)unint64_t v40 = 834;
          *((void *)v40 + 1) = v13;
          *((void *)v40 + 66) = (char *)v40 + 16;
          *((void *)v40 + 67) = 512;
          *((void *)v40 + 68) = 0;
          *((void *)v40 + 70) = 0;
          *((void *)v40 + 69) = 0;
          IPC::Encoder::encodeHeader(v40);
          v83 = v40;
          IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v40, (uint64_t *)&v80);
          IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v40, &v79);
          int v42 = IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v83, 1, 0);
          unint64_t v43 = v83;
          v83 = 0;
          if (v43)
          {
            IPC::Encoder::~Encoder(v43, v41);
            WTF::fastFree(v44, v45);
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v82);
          if (!v42)
          {
LABEL_80:
            if ((v10 & 1) == 0)
            {
              char v65 = 0;
              uint64_t v66 = *(void *)(v11 + 8);
              atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v66, (unsigned __int8 *)&v65, 1u, memory_order_acquire, memory_order_acquire);
              if (v65) {
                MEMORY[0x19972E8D0](v66);
              }
              uint64_t v67 = *(void *)(v66 + 8);
              int v68 = 1;
              uint64_t v69 = v67 - 1;
              *(void *)(v66 + 8) = v67 - 1;
              if (v67 == 1)
              {
                uint64_t v75 = *(void *)(v66 + 16);
                uint64_t v70 = *(void *)(v66 + 24);
                *(void *)(v66 + 24) = 0;
                BOOL v71 = v75 != 0;
              }
              else
              {
                uint64_t v70 = 0;
                BOOL v71 = 1;
              }
              atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v66, (unsigned __int8 *)&v68, 0, memory_order_release, memory_order_relaxed);
              if (v68 == 1)
              {
                if (v69) {
                  goto LABEL_91;
                }
              }
              else
              {
                WTF::Lock::unlockSlow((WTF::Lock *)v66);
                if (v69) {
                  goto LABEL_91;
                }
              }
              if (v70) {
                (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
              }
              if (!v71) {
                WTF::fastFree((WTF *)v66, v6);
              }
            }
LABEL_91:
            __n128 result = v81;
            v81 = 0;
            if (!result) {
              return result;
            }
            unsigned int add = atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF);
            if (add != 1) {
              return result;
            }
LABEL_99:
            atomic_store(add, (unsigned int *)result);
            IPC::StreamClientConnection::~StreamClientConnection(result, v6);
            return (WebKit::RemoteRenderingBackendProxy *)WTF::fastFree(v73, v74);
          }
          goto LABEL_75;
        }
LABEL_98:
        __break(1u);
        goto LABEL_99;
      }
    }
  }
  return result;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordDrawDisplayListItems(void *result, uint64_t a2, float *a3)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = result[481];
  if (!v3) {
    return result;
  }
  char v4 = result;
  __n128 result = *(void **)(v3 + 8);
  if (!result) {
    return result;
  }
  __n128 result = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (atomic_uint **)&v78);
  uint64_t v7 = v78;
  if (!v78) {
    return result;
  }
  uint64_t v8 = (WebKit::RemoteImageBufferProxy *)v4[479];
  if (v8)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v8, v4[480], &v77);
    uint64_t v8 = v77;
    if (v77 && !*((unsigned char *)v77 + 4016))
    {
      *((unsigned char *)v77 + 4016) = 1;
      uint64_t v8 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v8);
    }
  }
  else
  {
    char v77 = 0;
  }
  uint64_t v9 = v4[478];
  double v10 = *((double *)v7 + 15);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now(v8);
    double v11 = v10 + v12;
  }
  if (*((void *)v7 + 7) == v9)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v7 + 64, &v80, v11);
      if (!v82) {
        goto LABEL_109;
      }
      unint64_t v13 = v80;
      *(void *)long long buf = v80;
      *(void *)&buf[8] = v81;
      *(void *)&uint8_t buf[16] = 0;
      unint64_t v14 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = v14 - v80;
      if (v14 < v80)
      {
        unint64_t v16 = 0;
      }
      else if (v15 > 0xFFFFFFFFFFFFFFFDLL || (unint64_t v16 = v15 + 2, v15 + 2 > v81))
      {
        unint64_t v16 = 0;
        *(void *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v80 + v15) = 835;
        *(void *)&uint8_t buf[16] = v15 + 2;
        unint64_t v13 = *(void *)buf;
      }
      uint64_t v17 = *(unsigned int *)(a2 + 12);
      unint64_t v18 = (void *)((v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v18 >= v13 + v16)
      {
        unint64_t v19 = (char *)v18 - v13;
        if ((unint64_t)v18 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v19 + 8) > *(void *)&buf[8])
        {
          *(void *)&buf[8] = 0;
        }
        else
        {
          void *v18 = v17;
          *(void *)&uint8_t buf[16] = v19 + 8;
          LODWORD(v17) = *(_DWORD *)(a2 + 12);
        }
      }
      if (!v17)
      {
LABEL_27:
        IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)buf, a3);
        if (*(void *)&buf[8])
        {
          uint64_t v26 = *(void *)&buf[16];
          uint64_t v27 = *((void *)v7 + 9);
          unint64_t v28 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v29 = *((void *)v7 + 8);
          if (v28 + 16 >= v29) {
            unint64_t v28 = 0;
          }
          if (*(void *)&buf[16] <= 0x10uLL) {
            uint64_t v26 = 16;
          }
          unint64_t v30 = v28 + v26;
          if (v29 <= v30) {
            unint64_t v30 = 0;
          }
          *((void *)v7 + 10) = v30;
          if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v27 + 16) + 128), v30) == 0x80000000
            || *((_DWORD *)v7 + 29))
          {
            if (*((unsigned char *)v7 + 104)) {
              MEMORY[0x1997420B0](*((unsigned int *)v7 + 23));
            }
            *((_DWORD *)v7 + 29) = 0;
          }
          goto LABEL_36;
        }
        unint64_t v61 = v82;
        if (v82)
        {
          unint64_t v62 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v63 = v62 - v80;
          if (v62 < v80)
          {
            unint64_t v61 = 0;
          }
          else
          {
            unint64_t v61 = 0;
            if (v63 <= 0xFFFFFFFFFFFFFFFDLL && v63 + 2 <= v81)
            {
              *(_WORD *)(v80 + v63) = 2870;
              unint64_t v61 = v63 + 2;
            }
          }
          unint64_t v64 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v25 = *((void *)v7 + 8);
          if (v64 + 16 < v25)
          {
LABEL_102:
            if (v61 <= 0x10) {
              unint64_t v61 = 16;
            }
            unint64_t v65 = v64 + v61;
            if (v25 <= v65) {
              unint64_t v65 = 0;
            }
            *((void *)v7 + 10) = v65;
            atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v65);
            *((_DWORD *)v7 + 29) = 0;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v79, (uint64_t **)v7 + 1);
            uint64_t v66 = v79;
            uint64_t v67 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v67 = 835;
            *((void *)v67 + 1) = v9;
            *((void *)v67 + 66) = (char *)v67 + 16;
            *((void *)v67 + 67) = 512;
            *((void *)v67 + 68) = 0;
            *((void *)v67 + 70) = 0;
            *((void *)v67 + 69) = 0;
            IPC::Encoder::encodeHeader(v67);
            *(void *)long long buf = v67;
            IPC::VectorArgumentCoder<false,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v67, a2);
            IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v67, a3);
            int v69 = IPC::Connection::sendMessageImpl((uint64_t)v66, (uint64_t *)buf, 1, 0);
            uint64_t v70 = *(IPC::Encoder **)buf;
            *(void *)long long buf = 0;
            if (v70)
            {
              IPC::Encoder::~Encoder(v70, v68);
              WTF::fastFree(v75, v76);
            }
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v79);
            if (!v69) {
              goto LABEL_36;
            }
            goto LABEL_109;
          }
        }
        else
        {
          __break(1u);
        }
        unint64_t v64 = 0;
        goto LABEL_102;
      }
      uint64_t v20 = *(void *)a2;
      uint64_t v21 = 360 * v17;
      while (1)
      {
        uint64_t v22 = *(unsigned __int8 *)(v20 + 352);
        uint64_t v23 = *(void *)&buf[16];
        if (*(void *)&buf[16] >= *(void *)&buf[8])
        {
          *(void *)&buf[8] = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)buf + *(void *)&buf[16]) = v22;
          *(void *)&uint8_t buf[16] = v23 + 1;
        }
        if (!v22) {
          break;
        }
        if (v22 == 20)
        {
          if (*(_DWORD *)(v20 + 352) != 20) {
            goto LABEL_153;
          }
          IPC::ArgumentCoder<WebCore::DisplayList::DrawDecomposedGlyphs,void>::encode(buf, (uint64_t *)(v20 + 8));
        }
        else if (v22 <= 0x14)
        {
          switch((int)v22)
          {
            case 1:
              if (*(_DWORD *)(v20 + 352) == 1) {
                goto LABEL_116;
              }
              goto LABEL_153;
            case 2:
              if (*(_DWORD *)(v20 + 352) != 2) {
                goto LABEL_153;
              }
              IPC::ArgumentCoder<WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,void>::encode(buf, (__int16 *)(v20 + 8));
              break;
            case 3:
              if (*(_DWORD *)(v20 + 352) == 3) {
                goto LABEL_134;
              }
              goto LABEL_153;
            case 4:
              if (*(_DWORD *)(v20 + 352) != 4) {
                goto LABEL_153;
              }
              WTF::isIntegralOrPointerType((WTF *)buf);
              break;
            case 5:
              if (*(_DWORD *)(v20 + 352) == 5) {
                goto LABEL_134;
              }
              goto LABEL_153;
            case 6:
              if (*(_DWORD *)(v20 + 352) == 6) {
                goto LABEL_124;
              }
              goto LABEL_153;
            case 7:
              if (*(_DWORD *)(v20 + 352) != 7) {
                goto LABEL_153;
              }
LABEL_134:
              IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, (_DWORD *)(v20 + 8));
              break;
            case 8:
              if (*(_DWORD *)(v20 + 352) != 8) {
                goto LABEL_153;
              }
LABEL_124:
              IPC::ArgumentCoder<WebCore::DisplayList::ClipRoundedRect,void>::encode(buf, v20 + 8);
              break;
            case 9:
              if (*(_DWORD *)(v20 + 352) != 9) {
                goto LABEL_153;
              }
              IPC::ArgumentCoder<WebCore::DisplayList::ClipOutToPath,void>::encode(buf, v20 + 8);
              break;
            case 10:
              if (*(_DWORD *)(v20 + 352) != 10) {
                goto LABEL_153;
              }
              IPC::ArgumentCoder<WebCore::DisplayList::ClipPath,void>::encode((uint64_t *)buf, (WebCore::Path *)(v20 + 8));
              break;
            case 11:
              if (*(_DWORD *)(v20 + 352) != 11) {
                goto LABEL_153;
              }
              IPC::ArgumentCoder<WebCore::DisplayList::ClipToImageBuffer,void>::encode((uint64_t *)buf, v20 + 8);
              break;
            case 12:
              if (*(_DWORD *)(v20 + 352) != 12) {
                goto LABEL_153;
              }
              IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode((uint64_t *)buf, (void *)(v20 + 8));
              break;
            case 13:
              if (*(_DWORD *)(v20 + 352) != 13) {
                goto LABEL_153;
              }
              IPC::ArgumentCoder<WebCore::DisplayList::DrawControlPart,void>::encode((uint64_t *)buf, v20 + 8);
              break;
            case 14:
              if (*(_DWORD *)(v20 + 352) != 14) {
                goto LABEL_153;
              }
              IPC::ArgumentCoder<WebCore::DisplayList::DrawDotsForDocumentMarker,void>::encode((uint64_t *)buf, (long long *)(v20 + 8));
              break;
            case 15:
              if (*(_DWORD *)(v20 + 352) != 15) {
                goto LABEL_153;
              }
              IPC::ArgumentCoder<WebCore::DisplayList::DrawEllipse,void>::encode((uint64_t *)buf, (long long *)(v20 + 8));
              break;
            case 16:
              if (*(_DWORD *)(v20 + 352) != 16) {
                goto LABEL_153;
              }
              IPC::ArgumentCoder<WebCore::DisplayList::DrawFilteredImageBuffer,void>::encode((uint64_t *)buf, (long long *)(v20 + 8));
              break;
            case 17:
              if (*(_DWORD *)(v20 + 352) != 17) {
                goto LABEL_153;
              }
              IPC::ArgumentCoder<WebCore::DisplayList::DrawFocusRingPath,void>::encode((uint64_t *)buf, (_DWORD *)(v20 + 8));
              break;
            case 18:
              if (*(_DWORD *)(v20 + 352) != 18) {
                goto LABEL_153;
              }
              IPC::ArgumentCoder<WebCore::DisplayList::DrawFocusRingRects,void>::encode((uint64_t *)buf, (_DWORD *)(v20 + 8));
              break;
            case 19:
              if (*(_DWORD *)(v20 + 352) != 19) {
                goto LABEL_153;
              }
              IPC::ArgumentCoder<WebCore::DisplayList::DrawGlyphs,void>::encode((uint64_t *)buf, (void *)(v20 + 8));
              break;
            default:
              JUMPOUT(0);
          }
        }
        else
        {
          IPC::ArgumentCoder<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul>((uint64_t *)buf, v20, v22);
        }
LABEL_26:
        v20 += 360;
        v21 -= 360;
        if (!v21) {
          goto LABEL_27;
        }
      }
      if (!*(_DWORD *)(v20 + 352)) {
        break;
      }
LABEL_153:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_154:
      unint64_t v50 = 0;
LABEL_72:
      if (v44 <= 0x10) {
        unint64_t v44 = 16;
      }
      unint64_t v52 = v50 + v44;
      if (v51 <= v52) {
        unint64_t v53 = 0;
      }
      else {
        unint64_t v53 = v52;
      }
      *((void *)v7 + 10) = v53;
      unint64_t v54 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v53);
      int v55 = *((_DWORD *)v7 + 29);
      if (v54 == 0x80000000 || v55 != 0)
      {
        unsigned int v57 = v55 + 1;
        *((_DWORD *)v7 + 29) = v57;
        if (v57 >= *((_DWORD *)v7 + 28))
        {
          if (*((unsigned char *)v7 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v7 + 23));
          }
          *((_DWORD *)v7 + 29) = 0;
        }
      }
      *((void *)v7 + 7) = v9;
    }
LABEL_116:
    IPC::StreamConnectionEncoder::operator<<<float const&>(buf, (_DWORD *)(v20 + 8));
    goto LABEL_26;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v7 + 64, buf, v11);
  if (!buf[16]) {
    goto LABEL_109;
  }
  uint64_t v39 = *(void *)buf;
  unint64_t v40 = *(void *)&buf[8];
  unint64_t v41 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v42 = v41 - *(void *)buf;
  BOOL v43 = v41 >= *(void *)buf;
  unint64_t v44 = v41 - *(void *)buf + 2;
  BOOL v46 = v42 < 0xFFFFFFFFFFFFFFFELL && v44 <= *(void *)&buf[8];
  if (v43 && v46) {
    goto LABEL_64;
  }
  if (!v43)
  {
    unint64_t v44 = 0;
    goto LABEL_65;
  }
  unint64_t v47 = 0;
  if (v42 > 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v44 = 0;
    goto LABEL_66;
  }
  unint64_t v44 = 0;
  if (v42 + 2 <= *(void *)&buf[8])
  {
    unint64_t v44 = v42 + 2;
LABEL_64:
    *(_WORD *)(*(void *)buf + v42) = 2871;
LABEL_65:
    unint64_t v47 = v40;
  }
LABEL_66:
  unint64_t v48 = (void *)((v39 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v48 >= v39 + v44)
  {
    unint64_t v49 = (char *)v48 - v39;
    if ((unint64_t)v48 - v39 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_109;
    }
    unint64_t v44 = (unint64_t)(v49 + 8);
    if ((unint64_t)(v49 + 8) > v47) {
      goto LABEL_109;
    }
    void *v48 = v9;
  }
  if (v47)
  {
    unint64_t v50 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = *((void *)v7 + 8);
    if (v50 + 16 >= v51) {
      goto LABEL_154;
    }
    goto LABEL_72;
  }
LABEL_109:
  BOOL v71 = off_1EB3583E8;
  if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v72 = IPC::errorAsString();
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_DrawDisplayListItems";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v72;
    _os_log_impl(&dword_1985F2000, v71, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  uint64_t v73 = v4[481];
  if (v73)
  {
    unint64_t v74 = *(unsigned char **)(v73 + 8);
    if (v74) {
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v74);
    }
  }
LABEL_36:
  unint64_t v31 = v77;
  char v77 = 0;
  if (v31)
  {
    char v32 = 0;
    uint64_t v33 = *((void *)v31 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v33, (unsigned __int8 *)&v32, 1u, memory_order_acquire, memory_order_acquire);
    if (v32) {
      MEMORY[0x19972E8D0](v33);
    }
    uint64_t v34 = *(void *)(v33 + 8);
    int v35 = 1;
    uint64_t v36 = v34 - 1;
    *(void *)(v33 + 8) = v34 - 1;
    if (v34 == 1)
    {
      uint64_t v60 = *(void *)(v33 + 16);
      uint64_t v37 = *(void *)(v33 + 24);
      *(void *)(v33 + 24) = 0;
      BOOL v38 = v60 != 0;
    }
    else
    {
      uint64_t v37 = 0;
      BOOL v38 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v33, (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
    if (v35 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v33);
    }
    if (!v36)
    {
      if (v37) {
        (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
      }
      if (!v38) {
        WTF::fastFree((WTF *)v33, v24);
      }
    }
  }
  __n128 result = v78;
  int v78 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result, v24);
      return (void *)WTF::fastFree(v58, v59);
    }
  }
  return result;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordDrawImageBuffer(void *result, uint64_t a2, _DWORD *a3, _DWORD *a4, int a5)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  __int16 v62 = a5;
  char v63 = BYTE2(a5);
  uint64_t v57 = *(void *)(a2 + 120);
  unint64_t v58 = &v57;
  int v59 = a3;
  uint64_t v60 = a4;
  unint64_t v61 = &v62;
  uint64_t v5 = result[481];
  if (v5)
  {
    char v6 = result;
    __n128 result = *(void **)(v5 + 8);
    if (result)
    {
      __n128 result = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (atomic_uint **)&v65);
      uint64_t v7 = v65;
      if (v65)
      {
        uint64_t v8 = (WebKit::RemoteImageBufferProxy *)v6[479];
        if (v8)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v8, v6[480], &v64);
          uint64_t v8 = v64;
          if (v64 && !*((unsigned char *)v64 + 4016))
          {
            *((unsigned char *)v64 + 4016) = 1;
            uint64_t v8 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v8);
          }
        }
        else
        {
          unint64_t v64 = 0;
        }
        uint64_t v9 = v6[478];
        double v10 = *((double *)v7 + 15);
        double v11 = INFINITY;
        if (fabs(v10) != INFINITY)
        {
          WTF::ApproximateTime::now(v8);
          double v11 = v10 + v12;
        }
        if (*((void *)v7 + 7) == v9)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v7 + 64, &v66, v11);
            if (!v68) {
              break;
            }
            unint64_t v13 = v66;
            unint64_t v14 = v67;
            *(void *)long long buf = v66;
            *(void *)&buf[8] = v67;
            *(void *)&uint8_t buf[16] = 0;
            unint64_t v15 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v16 = v15 - v66;
            if (v15 < v66)
            {
              unint64_t v17 = 0;
            }
            else if (v16 > 0xFFFFFFFFFFFFFFFDLL || (unint64_t v17 = v16 + 2, v16 + 2 > v67))
            {
              unint64_t v14 = 0;
              unint64_t v17 = 0;
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v66 + v16) = 842;
              *(void *)&uint8_t buf[16] = v16 + 2;
            }
            unint64_t v18 = (void *)((v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v18 >= v13 + v17)
            {
              unint64_t v19 = (char *)v18 - v13;
              if ((unint64_t)v18 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v19 + 8) > v14)
              {
                *(void *)&buf[8] = 0;
              }
              else
              {
                void *v18 = *v58;
                *(void *)&uint8_t buf[16] = v19 + 8;
              }
            }
            IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v59);
            IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v60);
            IPC::StreamConnectionEncoder::operator<<<WebCore::ImagePaintingOptions>(buf, v61);
            if (*(void *)&buf[8])
            {
              uint64_t v22 = *(void *)&buf[16];
              unint64_t v23 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v24 = *((void *)v7 + 8);
              if (v23 + 16 >= v24) {
                unint64_t v23 = 0;
              }
              if (*(void *)&buf[16] <= 0x10uLL) {
                uint64_t v22 = 16;
              }
              unint64_t v25 = v23 + v22;
              if (v24 <= v25) {
                unint64_t v25 = 0;
              }
              *((void *)v7 + 10) = v25;
              if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v25) == 0x80000000
                || *((_DWORD *)v7 + 29))
              {
                if (*((unsigned char *)v7 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v7 + 23));
                }
                *((_DWORD *)v7 + 29) = 0;
              }
              goto LABEL_27;
            }
            uint64_t v34 = v68;
            if (v68)
            {
              IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v7, v66, v67);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v7 + 1);
              int v52 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawImageBuffer>(*(uint64_t *)buf, (uint64_t)&v58, v9);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
              if (!v52) {
                goto LABEL_27;
              }
              break;
            }
            __break(1u);
LABEL_91:
            unint64_t v38 = 0;
            unint64_t v37 = v21;
LABEL_51:
            unint64_t v39 = (v34 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v39 >= v34 + v38)
            {
              unint64_t v40 = v39 - v34;
              if (v40 > 0xFFFFFFFFFFFFFFF7) {
                break;
              }
              unint64_t v38 = v40 + 8;
              if (v40 + 8 > v37) {
                break;
              }
              *(void *)(v34 + v40) = v9;
            }
            if (!v37) {
              break;
            }
            unint64_t v41 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v42 = *((void *)v7 + 8);
            if (v41 + 16 >= v42) {
              unint64_t v41 = 0;
            }
            if (v38 <= 0x10) {
              unint64_t v38 = 16;
            }
            unint64_t v43 = v41 + v38;
            if (v42 <= v43) {
              unint64_t v44 = 0;
            }
            else {
              unint64_t v44 = v43;
            }
            *((void *)v7 + 10) = v44;
            unint64_t v45 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v44);
            int v46 = *((_DWORD *)v7 + 29);
            if (v45 == 0x80000000 || v46 != 0)
            {
              unsigned int v48 = v46 + 1;
              *((_DWORD *)v7 + 29) = v48;
              if (v48 >= *((_DWORD *)v7 + 28))
              {
                if (*((unsigned char *)v7 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v7 + 23));
                }
                *((_DWORD *)v7 + 29) = 0;
              }
            }
            *((void *)v7 + 7) = v9;
          }
        }
        else
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v7 + 64, buf, v11);
          if (buf[16])
          {
            uint64_t v34 = *(void *)buf;
            unint64_t v21 = *(void *)&buf[8];
            unint64_t v35 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v36 = v35 - *(void *)buf;
            if (v35 < *(void *)buf) {
              goto LABEL_91;
            }
            unint64_t v37 = 0;
            if (v36 > 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v38 = 0;
            }
            else
            {
              unint64_t v38 = 0;
              if (v36 + 2 <= *(void *)&buf[8])
              {
                *(_WORD *)(*(void *)buf + v36) = 2871;
                unint64_t v37 = v21;
                unint64_t v38 = v36 + 2;
              }
            }
            goto LABEL_51;
          }
        }
        unint64_t v53 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v54 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_DrawImageBuffer";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v54;
          _os_log_impl(&dword_1985F2000, v53, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v55 = v6[481];
        if (v55)
        {
          unint64_t v56 = *(unsigned char **)(v55 + 8);
          if (v56) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v56);
          }
        }
LABEL_27:
        uint64_t v26 = v64;
        unint64_t v64 = 0;
        if (v26)
        {
          char v27 = 0;
          uint64_t v28 = *((void *)v26 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v28, (unsigned __int8 *)&v27, 1u, memory_order_acquire, memory_order_acquire);
          if (v27) {
            MEMORY[0x19972E8D0](v28);
          }
          uint64_t v29 = *(void *)(v28 + 8);
          int v30 = 1;
          uint64_t v31 = v29 - 1;
          *(void *)(v28 + 8) = v29 - 1;
          if (v29 == 1)
          {
            uint64_t v51 = *(void *)(v28 + 16);
            uint64_t v32 = *(void *)(v28 + 24);
            *(void *)(v28 + 24) = 0;
            BOOL v33 = v51 != 0;
          }
          else
          {
            uint64_t v32 = 0;
            BOOL v33 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v28, (unsigned __int8 *)&v30, 0, memory_order_release, memory_order_relaxed);
          if (v30 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v28);
          }
          if (!v31)
          {
            if (v32) {
              (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
            }
            if (!v33) {
              WTF::fastFree((WTF *)v28, v20);
            }
          }
        }
        __n128 result = v65;
        unint64_t v65 = 0;
        if (result)
        {
          if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)result);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result, v20);
            return (void *)WTF::fastFree(v49, v50);
          }
        }
      }
    }
  }
  return result;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordDrawNativeImage(void *result, uint64_t a2, _DWORD *a3, _DWORD *a4, int a5)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  uint64_t v83 = a2;
  __int16 v81 = a5;
  char v82 = BYTE2(a5);
  char v77 = &v83;
  int v78 = a3;
  uint64_t v79 = a4;
  unint64_t v80 = &v81;
  uint64_t v5 = result[481];
  if (!v5) {
    return result;
  }
  char v6 = result;
  __n128 result = *(void **)(v5 + 8);
  if (!result) {
    return result;
  }
  __n128 result = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (atomic_uint **)&v85);
  uint64_t v7 = v85;
  if (!v85) {
    return result;
  }
  uint64_t v8 = (WTF::ApproximateTime *)v6[479];
  if (v8) {
    goto LABEL_107;
  }
  uint64_t v84 = 0;
  while (1)
  {
    uint64_t v9 = v6[478];
    double v10 = *((double *)v7 + 15);
    double v11 = INFINITY;
    if (fabs(v10) != INFINITY)
    {
      WTF::ApproximateTime::now(v8);
      double v11 = v10 + v12;
    }
    if (*((void *)v7 + 7) == v9) {
      goto LABEL_9;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v7 + 64, buf, v11);
    if (!buf[16]) {
      goto LABEL_98;
    }
    uint64_t v38 = *(void *)buf;
    unint64_t v39 = *(void *)&buf[8];
    unint64_t v40 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v41 = v40 - *(void *)buf;
    BOOL v42 = v40 >= *(void *)buf;
    unint64_t v43 = v40 - *(void *)buf + 2;
    BOOL v45 = v41 < 0xFFFFFFFFFFFFFFFELL && v43 <= *(void *)&buf[8];
    if (v42 && v45) {
      goto LABEL_59;
    }
    if (!v42)
    {
      unint64_t v43 = 0;
      goto LABEL_60;
    }
    unint64_t v46 = 0;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v43 = 0;
      goto LABEL_61;
    }
    unint64_t v43 = 0;
    if (v41 + 2 <= *(void *)&buf[8])
    {
      unint64_t v43 = v41 + 2;
LABEL_59:
      *(_WORD *)(*(void *)buf + v41) = 2871;
LABEL_60:
      unint64_t v46 = v39;
    }
LABEL_61:
    unint64_t v47 = (void *)((v38 + v43 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v47 >= v38 + v43)
    {
      unsigned int v48 = (char *)v47 - v38;
      if ((unint64_t)v47 - v38 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_98;
      }
      unint64_t v43 = (unint64_t)(v48 + 8);
      if ((unint64_t)(v48 + 8) > v46) {
        goto LABEL_98;
      }
      *unint64_t v47 = v9;
    }
    if (!v46) {
      goto LABEL_98;
    }
    unint64_t v49 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v50 = *((void *)v7 + 8);
    if (v49 + 16 >= v50) {
      unint64_t v49 = 0;
    }
    if (v43 <= 0x10) {
      unint64_t v43 = 16;
    }
    unint64_t v51 = v49 + v43;
    if (v50 <= v51) {
      unint64_t v52 = 0;
    }
    else {
      unint64_t v52 = v51;
    }
    *((void *)v7 + 10) = v52;
    unint64_t v53 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v52);
    int v54 = *((_DWORD *)v7 + 29);
    if (v53 == 0x80000000 || v54 != 0)
    {
      unsigned int v56 = v54 + 1;
      *((_DWORD *)v7 + 29) = v56;
      if (v56 >= *((_DWORD *)v7 + 28))
      {
        if (*((unsigned char *)v7 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v7 + 23));
        }
        *((_DWORD *)v7 + 29) = 0;
      }
    }
    *((void *)v7 + 7) = v9;
LABEL_9:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v7 + 64, &v87, v11);
    if (!v89) {
      goto LABEL_98;
    }
    unint64_t v13 = v87;
    unint64_t v14 = v88;
    *(void *)long long buf = v87;
    *(void *)&buf[8] = v88;
    *(void *)&uint8_t buf[16] = 0;
    unint64_t v15 = (v87 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v16 = v15 - v87;
    if (v15 < v87)
    {
      unint64_t v17 = 0;
    }
    else if (v16 > 0xFFFFFFFFFFFFFFFDLL || (unint64_t v17 = v16 + 2, v16 + 2 > v88))
    {
      unint64_t v14 = 0;
      unint64_t v17 = 0;
      *(void *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v87 + v16) = 845;
      *(void *)&uint8_t buf[16] = v16 + 2;
    }
    unint64_t v18 = (void *)((v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v18 >= v13 + v17)
    {
      unint64_t v19 = (char *)v18 - v13;
      if ((unint64_t)v18 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v19 + 8) > v14)
      {
        *(void *)&buf[8] = 0;
      }
      else
      {
        void *v18 = *v77;
        *(void *)&uint8_t buf[16] = v19 + 8;
      }
    }
    IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v78);
    uint64_t v8 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v79);
    unint64_t v22 = *(void *)&buf[8];
    uint64_t v21 = *(void *)&buf[16];
    if (*(void *)&buf[16] < *(void *)&buf[8])
    {
      unint64_t v23 = v80;
      uint64_t v24 = *(void *)buf;
      *(unsigned char *)(*(void *)buf + *(void *)&buf[16]) = *((unsigned char *)v80 + 1) & 0xF;
      if (v21 + 1 < v22)
      {
        *(unsigned char *)(v24 + v21 + 1) = *(unsigned char *)v23 & 0x1F;
        if (v21 + 2 < v22)
        {
          *(unsigned char *)(v24 + v21 + 2) = *(unsigned char *)v23 >> 5;
          if (v21 + 3 < v22)
          {
            uint64_t v25 = v21 + 4;
            *(unsigned char *)(v24 + v21 + 3) = (unsigned __int16)*v23 >> 12;
            if (v21 + 4 < v22)
            {
              unint64_t v26 = v21 + 5;
              *(unsigned char *)(v24 + v25) = v23[1] & 0xF;
              *(void *)&uint8_t buf[16] = v26;
              unint64_t v27 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v28 = *((void *)v7 + 8);
              if (v27 + 16 >= v28) {
                unint64_t v27 = 0;
              }
              if (v26 <= 0x10) {
                unint64_t v26 = 16;
              }
              unint64_t v29 = v27 + v26;
              if (v28 <= v29) {
                unint64_t v29 = 0;
              }
              *((void *)v7 + 10) = v29;
              if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v29) == 0x80000000
                || *((_DWORD *)v7 + 29))
              {
                if (*((unsigned char *)v7 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v7 + 23));
                }
                *((_DWORD *)v7 + 29) = 0;
              }
              goto LABEL_31;
            }
          }
        }
      }
    }
    if (v89) {
      break;
    }
    __break(1u);
LABEL_107:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v8, v6[480], &v84);
    uint64_t v8 = v84;
    if (v84 && !*((unsigned char *)v84 + 4016))
    {
      *((unsigned char *)v84 + 4016) = 1;
      uint64_t v8 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v8);
    }
  }
  unint64_t v60 = (v87 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v61 = v60 - v87;
  if (v60 < v87)
  {
    unint64_t v62 = 0;
  }
  else
  {
    unint64_t v62 = 0;
    if (v61 <= 0xFFFFFFFFFFFFFFFDLL && v61 + 2 <= v88)
    {
      *(_WORD *)(v87 + v61) = 2870;
      unint64_t v62 = v61 + 2;
    }
  }
  unint64_t v63 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v64 = *((void *)v7 + 8);
  if (v63 + 16 >= v64) {
    unint64_t v63 = 0;
  }
  if (v62 <= 0x10) {
    unint64_t v62 = 16;
  }
  unint64_t v65 = v63 + v62;
  if (v64 <= v65) {
    unint64_t v65 = 0;
  }
  *((void *)v7 + 10) = v65;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v65);
  *((_DWORD *)v7 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v86, (uint64_t **)v7 + 1);
  unint64_t v66 = v86;
  unint64_t v67 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v67 = 845;
  *((void *)v67 + 1) = v9;
  *((void *)v67 + 66) = (char *)v67 + 16;
  *((void *)v67 + 67) = 512;
  *((void *)v67 + 68) = 0;
  *((void *)v67 + 70) = 0;
  *((void *)v67 + 69) = 0;
  IPC::Encoder::encodeHeader(v67);
  *(void *)long long buf = v67;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::ImagePaintingOptions const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::ImagePaintingOptions const&>,0ul,1ul,2ul,3ul>(v67, (uint64_t)&v77);
  int v69 = IPC::Connection::sendMessageImpl((uint64_t)v66, (uint64_t *)buf, 1, 0);
  uint64_t v70 = *(IPC::Encoder **)buf;
  *(void *)long long buf = 0;
  if (v70)
  {
    IPC::Encoder::~Encoder(v70, v68);
    WTF::fastFree(v75, v76);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v86);
  if (v69)
  {
LABEL_98:
    BOOL v71 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v72 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_DrawNativeImage";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v72;
      _os_log_impl(&dword_1985F2000, v71, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v73 = v6[481];
    if (v73)
    {
      unint64_t v74 = *(unsigned char **)(v73 + 8);
      if (v74) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v74);
      }
    }
  }
LABEL_31:
  int v30 = v84;
  uint64_t v84 = 0;
  if (v30)
  {
    char v31 = 0;
    uint64_t v32 = *((void *)v30 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v32, (unsigned __int8 *)&v31, 1u, memory_order_acquire, memory_order_acquire);
    if (v31) {
      MEMORY[0x19972E8D0](v32);
    }
    uint64_t v33 = *(void *)(v32 + 8);
    int v34 = 1;
    uint64_t v35 = v33 - 1;
    *(void *)(v32 + 8) = v33 - 1;
    if (v33 == 1)
    {
      uint64_t v59 = *(void *)(v32 + 16);
      uint64_t v36 = *(void *)(v32 + 24);
      *(void *)(v32 + 24) = 0;
      BOOL v37 = v59 != 0;
    }
    else
    {
      uint64_t v36 = 0;
      BOOL v37 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v32, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
    if (v34 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v32);
    }
    if (!v35)
    {
      if (v36) {
        (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
      }
      if (!v37) {
        WTF::fastFree((WTF *)v32, v20);
      }
    }
  }
  __n128 result = v85;
  uint64_t v85 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result, v20);
      return (void *)WTF::fastFree(v57, v58);
    }
  }
  return result;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordDrawSystemImage(void *result, WebCore::ARKitBadgeSystemImage *a2, float *a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  ++*((_DWORD *)a2 + 2);
  uint64_t v4 = result[481];
  if (!v4) {
    goto LABEL_83;
  }
  uint64_t v5 = result;
  __n128 result = *(void **)(v4 + 8);
  if (!result) {
    goto LABEL_83;
  }
  __n128 result = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (atomic_uint **)&v68);
  if (!v68) {
    goto LABEL_83;
  }
  uint64_t v7 = v5[479];
  char v8 = 1;
  if (v7)
  {
    char v66 = 0;
    uint64_t v9 = v5[480];
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v66, 1u, memory_order_acquire, memory_order_acquire);
    if (v66) {
      __n128 result = (void *)MEMORY[0x19972E8D0](v7);
    }
    if (*(void *)(v7 + 24)) {
      ++*(void *)(v7 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
    int v67 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v67, 0, memory_order_release, memory_order_relaxed);
    if (v67 == 1)
    {
      if (!v9) {
        goto LABEL_6;
      }
    }
    else
    {
      __n128 result = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (!v9) {
        goto LABEL_6;
      }
    }
    if (!*(unsigned char *)(v9 + 4016))
    {
      *(unsigned char *)(v9 + 4016) = 1;
      __n128 result = (void *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v9);
      if (result) {
        __n128 result = (void *)(*(uint64_t (**)(void *))(*result + 160))(result);
      }
    }
    char v8 = 0;
    goto LABEL_6;
  }
  uint64_t v9 = 0;
LABEL_6:
  double v10 = v68;
  uint64_t v11 = v5[478];
  double v12 = *((double *)v68 + 15);
  double v13 = INFINITY;
  if (fabs(v12) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    double v13 = v12 + v14;
  }
  if (*((void *)v10 + 7) == v11) {
    goto LABEL_9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v10 + 64, buf, v13);
  if (!buf[16]) {
    goto LABEL_64;
  }
  uint64_t v36 = *(void *)buf;
  unint64_t v37 = *(void *)&buf[8];
  unint64_t v38 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = v38 - *(void *)buf;
  if (v38 < *(void *)buf)
  {
    unint64_t v41 = 0;
    unint64_t v40 = *(void *)&buf[8];
  }
  else
  {
    unint64_t v40 = 0;
    if (v39 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v41 = 0;
    }
    else
    {
      unint64_t v41 = 0;
      if (v39 + 2 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v39) = 2871;
        unint64_t v40 = v37;
        unint64_t v41 = v39 + 2;
      }
    }
  }
  BOOL v42 = (void *)((v36 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v42 >= v36 + v41)
  {
    unint64_t v43 = (char *)v42 - v36;
    if ((unint64_t)v42 - v36 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_64;
    }
    unint64_t v41 = (unint64_t)(v43 + 8);
    if ((unint64_t)(v43 + 8) > v40) {
      goto LABEL_64;
    }
    void *v42 = v11;
  }
  if (!v40)
  {
LABEL_64:
    unint64_t v51 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v52 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_DrawSystemImage";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v52;
      _os_log_impl(&dword_1985F2000, v51, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v53 = v5[481];
    if (v53)
    {
      int v54 = *(unsigned char **)(v53 + 8);
      if (v54) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v54);
      }
    }
    goto LABEL_69;
  }
  unint64_t v44 = (*((void *)v10 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v45 = *((void *)v10 + 8);
  if (v44 + 16 >= v45) {
    unint64_t v44 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v46 = v44 + v41;
  if (v45 <= v46) {
    unint64_t v47 = 0;
  }
  else {
    unint64_t v47 = v46;
  }
  *((void *)v10 + 10) = v47;
  unint64_t v48 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v10 + 9) + 16) + 128), v47);
  int v49 = *((_DWORD *)v10 + 29);
  if (v48 == 0x80000000 || v49 != 0)
  {
    unsigned int v62 = v49 + 1;
    *((_DWORD *)v10 + 29) = v62;
    if (v62 >= *((_DWORD *)v10 + 28))
    {
      if (*((unsigned char *)v10 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v10 + 23));
      }
      *((_DWORD *)v10 + 29) = 0;
    }
  }
  *((void *)v10 + 7) = v11;
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v10 + 64, &v70, v13);
  if (!v72) {
    goto LABEL_64;
  }
  *(void *)long long buf = v70;
  *(void *)&buf[8] = v71;
  *(void *)&uint8_t buf[16] = 0;
  unint64_t v15 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v16 = v15 >= v70;
  unint64_t v17 = v15 - v70;
  if (v16)
  {
    if (v17 > 0xFFFFFFFFFFFFFFFDLL || v17 + 2 > v71)
    {
      *(void *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v70 + v17) = 849;
      *(void *)&uint8_t buf[16] = v17 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::SystemImage,void>::encode((uint64_t *)buf, a2);
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, a3);
  if (*(void *)&buf[8])
  {
    unint64_t v20 = *(void *)&buf[16];
    unint64_t v21 = (*((void *)v10 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *((void *)v10 + 8);
    if (v21 + 16 < v19)
    {
LABEL_17:
      if (v20 <= 0x10) {
        unint64_t v20 = 16;
      }
      unint64_t v22 = v21 + v20;
      if (v19 <= v22) {
        unint64_t v22 = 0;
      }
      *((void *)v10 + 10) = v22;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v10 + 9) + 16) + 128), v22) == 0x80000000
        || *((_DWORD *)v10 + 29))
      {
        if (*((unsigned char *)v10 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v10 + 23));
        }
        *((_DWORD *)v10 + 29) = 0;
      }
      goto LABEL_69;
    }
LABEL_95:
    unint64_t v21 = 0;
    goto LABEL_17;
  }
  unint64_t v20 = v72;
  if (!v72)
  {
    __break(1u);
    goto LABEL_95;
  }
  unint64_t v23 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v24 = v23 - v70;
  if (v23 < v70)
  {
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v25 = 0;
    if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v71)
    {
      *(_WORD *)(v70 + v24) = 2870;
      unint64_t v25 = v24 + 2;
    }
  }
  unint64_t v26 = (*((void *)v10 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *((void *)v10 + 8);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v25 <= 0x10) {
    unint64_t v25 = 16;
  }
  unint64_t v28 = v26 + v25;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *((void *)v10 + 10) = v28;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v10 + 9) + 16) + 128), v28);
  *((_DWORD *)v10 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v69, (uint64_t **)v10 + 1);
  unint64_t v29 = v69;
  int v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v30 = 849;
  *((void *)v30 + 1) = v11;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 68) = 0;
  *((void *)v30 + 70) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  *(void *)long long buf = v30;
  IPC::ArgumentCoder<WebCore::SystemImage,void>::encode(v30, a2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v30, a3);
  int v32 = IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)buf, 1, 0);
  uint64_t v33 = *(IPC::Encoder **)buf;
  *(void *)long long buf = 0;
  if (v33)
  {
    IPC::Encoder::~Encoder(v33, v31);
    WTF::fastFree(v34, v35);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v69);
  if (v32) {
    goto LABEL_64;
  }
LABEL_69:
  if ((v8 & 1) == 0)
  {
    char v55 = 0;
    uint64_t v56 = *(void *)(v9 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v56, (unsigned __int8 *)&v55, 1u, memory_order_acquire, memory_order_acquire);
    if (v55) {
      MEMORY[0x19972E8D0](v56);
    }
    uint64_t v57 = *(void *)(v56 + 8);
    int v58 = 1;
    uint64_t v59 = v57 - 1;
    *(void *)(v56 + 8) = v57 - 1;
    if (v57 == 1)
    {
      uint64_t v65 = *(void *)(v56 + 16);
      uint64_t v60 = *(void *)(v56 + 24);
      *(void *)(v56 + 24) = 0;
      BOOL v61 = v65 != 0;
    }
    else
    {
      uint64_t v60 = 0;
      BOOL v61 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v56, (unsigned __int8 *)&v58, 0, memory_order_release, memory_order_relaxed);
    if (v58 == 1)
    {
      if (!v59)
      {
LABEL_76:
        if (v60) {
          (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
        }
        if (!v61) {
          WTF::fastFree((WTF *)v56, v18);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v56);
      if (!v59) {
        goto LABEL_76;
      }
    }
  }
  __n128 result = v68;
  unsigned __int8 v68 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result, v18);
    __n128 result = (void *)WTF::fastFree(v63, v64);
  }
LABEL_83:
  if (*((_DWORD *)a2 + 2) == 1) {
    return (void *)(*(uint64_t (**)(WebCore::ARKitBadgeSystemImage *))(*(void *)a2 + 8))(a2);
  }
  --*((_DWORD *)a2 + 2);
  return result;
}

unsigned int *WebKit::RemoteDisplayListRecorderProxy::recordDrawPattern(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a2;
  __int16 v20 = a8;
  char v21 = BYTE2(a8);
  v19[0] = &v22;
  v19[1] = a3;
  v19[2] = a4;
  v19[3] = a5;
  v19[4] = a6;
  v19[5] = a7;
  v19[6] = &v20;
  uint64_t v8 = *((void *)result + 481);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)result;
    __n128 result = *(unsigned int **)(v8 + 8);
    if (result)
    {
      __n128 result = (unsigned int *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, &v24);
      double v10 = (unsigned int *)v24;
      if (v24)
      {
        uint64_t v11 = (atomic_uchar *)v9[479];
        if (v11)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>(v11, v9[480], &v23);
          unint64_t v18 = v23;
          if (v23 && !*((unsigned char *)v23 + 4016))
          {
            *((unsigned char *)v23 + 4016) = 1;
            WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v18);
          }
        }
        else
        {
          unint64_t v23 = 0;
        }
        if (IPC::StreamClientConnection::send<Messages::RemoteDisplayListRecorder::DrawPattern,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>((uint64_t)v10, (uint64_t)v19, v9[478]))
        {
          double v14 = off_1EB3583E8;
          if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v15 = IPC::errorAsString();
            *(_DWORD *)long long buf = 136446466;
            unint64_t v26 = "RemoteDisplayListRecorder_DrawPattern";
            __int16 v27 = 2082;
            unint64_t v28 = v15;
            _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
          }
          uint64_t v16 = v9[481];
          if (v16)
          {
            unint64_t v17 = *(unsigned char **)(v16 + 8);
            if (v17) {
              WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v17);
            }
          }
        }
        double v13 = v23;
        unint64_t v23 = 0;
        if (v13) {
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageBuffer,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)v13 + 1, v12);
        }
        return WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(v10, v12);
      }
    }
  }
  return result;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordBeginTransparencyLayer(void *this, float a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  float v55 = a2;
  uint64_t v2 = this[481];
  if (!v2) {
    return this;
  }
  uint64_t v3 = this;
  this = *(void **)(v2 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v57);
  uint64_t v4 = v57;
  if (!v57) {
    return this;
  }
  uint64_t v5 = (WTF::ApproximateTime *)v3[479];
  if (v5) {
    goto LABEL_85;
  }
  uint64_t v56 = 0;
  while (1)
  {
    uint64_t v6 = v3[478];
    double v7 = *((double *)v4 + 15);
    double v8 = INFINITY;
    if (fabs(v7) != INFINITY)
    {
      WTF::ApproximateTime::now(v5);
      double v8 = v7 + v9;
    }
    if (*((void *)v4 + 7) != v6)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, buf, v8);
      if (!buf[16]) {
        goto LABEL_77;
      }
      uint64_t v31 = *(void *)buf;
      unint64_t v32 = *(void *)&buf[8];
      unint64_t v33 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v34 = v33 - *(void *)buf;
      if (v33 < *(void *)buf)
      {
        unint64_t v36 = 0;
        unint64_t v35 = *(void *)&buf[8];
      }
      else
      {
        unint64_t v35 = 0;
        if (v34 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v36 = 0;
        }
        else
        {
          unint64_t v36 = 0;
          if (v34 + 2 <= *(void *)&buf[8])
          {
            *(_WORD *)(*(void *)buf + v34) = 2871;
            unint64_t v35 = v32;
            unint64_t v36 = v34 + 2;
          }
        }
      }
      unint64_t v37 = (void *)((v31 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v37 >= v31 + v36)
      {
        unint64_t v38 = (char *)v37 - v31;
        if ((unint64_t)v37 - v31 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_77;
        }
        unint64_t v36 = (unint64_t)(v38 + 8);
        if ((unint64_t)(v38 + 8) > v35) {
          goto LABEL_77;
        }
        *unint64_t v37 = v6;
      }
      if (!v35) {
        goto LABEL_77;
      }
      unint64_t v39 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *((void *)v4 + 8);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v36 <= 0x10) {
        unint64_t v36 = 16;
      }
      unint64_t v41 = v39 + v36;
      if (v40 <= v41) {
        unint64_t v42 = 0;
      }
      else {
        unint64_t v42 = v41;
      }
      *((void *)v4 + 10) = v42;
      unint64_t v43 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v42);
      int v44 = *((_DWORD *)v4 + 29);
      if (v43 == 0x80000000 || v44 != 0)
      {
        unsigned int v46 = v44 + 1;
        *((_DWORD *)v4 + 29) = v46;
        if (v46 >= *((_DWORD *)v4 + 28))
        {
          if (*((unsigned char *)v4 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
          }
          *((_DWORD *)v4 + 29) = 0;
        }
      }
      *((void *)v4 + 7) = v6;
    }
    uint64_t v5 = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, buf, v8);
    if (!buf[16]) {
      goto LABEL_77;
    }
    uint64_t v11 = *(void *)buf;
    unint64_t v12 = *(void *)&buf[8];
    unint64_t v13 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v14 = v13 - *(void *)buf;
    if (v13 < *(void *)buf)
    {
      unint64_t v16 = 0;
      unint64_t v15 = *(void *)&buf[8];
    }
    else
    {
      unint64_t v15 = 0;
      if (v14 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v16 = 0;
      }
      else
      {
        unint64_t v16 = 0;
        if (v14 + 2 <= *(void *)&buf[8])
        {
          *(_WORD *)(*(void *)buf + v14) = 821;
          unint64_t v15 = v12;
          unint64_t v16 = v14 + 2;
        }
      }
    }
    unint64_t v17 = (float *)((v11 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v17 >= v11 + v16)
    {
      unint64_t v18 = (char *)v17 - v11;
      if ((unint64_t)v17 - v11 > 0xFFFFFFFFFFFFFFFBLL) {
        goto LABEL_75;
      }
      unint64_t v16 = (unint64_t)(v18 + 4);
      if ((unint64_t)(v18 + 4) > v15) {
        goto LABEL_75;
      }
      float *v17 = v55;
    }
    if (v15)
    {
      unint64_t v19 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v20 = *((void *)v4 + 8);
      if (v19 + 16 >= v20) {
        unint64_t v19 = 0;
      }
      if (v16 <= 0x10) {
        unint64_t v16 = 16;
      }
      unint64_t v21 = v19 + v16;
      if (v20 <= v21) {
        unint64_t v22 = 0;
      }
      else {
        unint64_t v22 = v21;
      }
      *((void *)v4 + 10) = v22;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v22) == 0x80000000
        || *((_DWORD *)v4 + 29))
      {
        if (*((unsigned char *)v4 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
        }
        *((_DWORD *)v4 + 29) = 0;
      }
      goto LABEL_28;
    }
LABEL_75:
    if (buf[16]) {
      break;
    }
    __break(1u);
LABEL_85:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v5, v3[480], &v56);
    uint64_t v5 = v56;
    if (v56 && !*((unsigned char *)v56 + 4016))
    {
      *((unsigned char *)v56 + 4016) = 1;
      uint64_t v5 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v5);
    }
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v4, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)v4 + 1);
  int v50 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::BeginTransparencyLayer>((uint64_t)v58, &v55, v6);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v58);
  if (!v50) {
    goto LABEL_28;
  }
LABEL_77:
  unint64_t v51 = off_1EB3583E8;
  if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v52 = IPC::errorAsString();
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_BeginTransparencyLayer";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v52;
    _os_log_impl(&dword_1985F2000, v51, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  uint64_t v53 = v3[481];
  if (v53)
  {
    int v54 = *(unsigned char **)(v53 + 8);
    if (v54) {
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v54);
    }
  }
LABEL_28:
  unint64_t v23 = v56;
  uint64_t v56 = 0;
  if (v23)
  {
    char v24 = 0;
    uint64_t v25 = *((void *)v23 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v25, (unsigned __int8 *)&v24, 1u, memory_order_acquire, memory_order_acquire);
    if (v24) {
      MEMORY[0x19972E8D0](v25);
    }
    uint64_t v26 = *(void *)(v25 + 8);
    int v27 = 1;
    uint64_t v28 = v26 - 1;
    *(void *)(v25 + 8) = v26 - 1;
    if (v26 == 1)
    {
      uint64_t v49 = *(void *)(v25 + 16);
      uint64_t v29 = *(void *)(v25 + 24);
      *(void *)(v25 + 24) = 0;
      BOOL v30 = v49 != 0;
    }
    else
    {
      uint64_t v29 = 0;
      BOOL v30 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v25, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
    if (v27 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v25);
    }
    if (!v28)
    {
      if (v29) {
        (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
      }
      if (!v30) {
        WTF::fastFree((WTF *)v25, v10);
      }
    }
  }
  this = v57;
  uint64_t v57 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v10);
      return (void *)WTF::fastFree(v47, v48);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordBeginTransparencyLayer(void *result, char a2, char a3)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  char v69 = a2;
  char v70 = a3;
  uint64_t v3 = result[481];
  if (!v3) {
    return result;
  }
  uint64_t v4 = result;
  __n128 result = *(void **)(v3 + 8);
  if (!result) {
    return result;
  }
  __n128 result = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (atomic_uint **)&v71);
  if (!v71) {
    return result;
  }
  uint64_t v5 = v4[479];
  unsigned __int8 v6 = 1;
  if (v5) {
    goto LABEL_96;
  }
  uint64_t v7 = 0;
  while (1)
  {
    double v8 = v71;
    uint64_t v9 = v4[478];
    double v10 = *((double *)v71 + 15);
    double v11 = INFINITY;
    if (fabs(v10) != INFINITY)
    {
      WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
      double v11 = v10 + v12;
    }
    if (*((void *)v8 + 7) != v9)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, buf, v11);
      if (!buf[16]) {
        goto LABEL_51;
      }
      uint64_t v24 = *(void *)buf;
      unint64_t v25 = *(void *)&buf[8];
      unint64_t v26 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v27 = v26 - *(void *)buf;
      if (v26 < *(void *)buf)
      {
        unint64_t v29 = 0;
        unint64_t v28 = *(void *)&buf[8];
      }
      else
      {
        unint64_t v28 = 0;
        if (v27 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v29 = 0;
        }
        else
        {
          unint64_t v29 = 0;
          if (v27 + 2 <= *(void *)&buf[8])
          {
            *(_WORD *)(*(void *)buf + v27) = 2871;
            unint64_t v28 = v25;
            unint64_t v29 = v27 + 2;
          }
        }
      }
      BOOL v30 = (void *)((v24 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v30 >= v24 + v29)
      {
        uint64_t v31 = (char *)v30 - v24;
        uint64_t v5 = 17;
        if ((unint64_t)v30 - v24 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_51;
        }
        unint64_t v29 = (unint64_t)(v31 + 8);
        if ((unint64_t)(v31 + 8) > v28) {
          goto LABEL_51;
        }
        void *v30 = v9;
      }
      if (!v28) {
        goto LABEL_51;
      }
      unint64_t v32 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *((void *)v8 + 8);
      if (v32 + 16 >= v33) {
        unint64_t v32 = 0;
      }
      if (v29 <= 0x10) {
        unint64_t v29 = 16;
      }
      unint64_t v34 = v32 + v29;
      if (v33 <= v34) {
        unint64_t v35 = 0;
      }
      else {
        unint64_t v35 = v34;
      }
      *((void *)v8 + 10) = v35;
      unint64_t v36 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v35);
      int v37 = *((_DWORD *)v8 + 29);
      if (v36 == 0x80000000 || v37 != 0)
      {
        unsigned int v50 = v37 + 1;
        *((_DWORD *)v8 + 29) = v50;
        if (v50 >= *((_DWORD *)v8 + 28))
        {
          if (*((unsigned char *)v8 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v8 + 23));
          }
          *((_DWORD *)v8 + 29) = 0;
        }
      }
      *((void *)v8 + 7) = v9;
    }
    __n128 result = (void *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, buf, v11);
    if (!buf[16]) {
      goto LABEL_51;
    }
    uint64_t v14 = *(void *)buf;
    unint64_t v15 = *(void *)&buf[8];
    unint64_t v16 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = v16 - *(void *)buf;
    if (v16 < *(void *)buf)
    {
      unint64_t v19 = 0;
      unint64_t v18 = *(void *)&buf[8];
    }
    else
    {
      unint64_t v18 = 0;
      if (v17 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v19 = 0;
      }
      else
      {
        unint64_t v19 = 0;
        if (v17 + 2 <= *(void *)&buf[8])
        {
          *(_WORD *)(*(void *)buf + v17) = 822;
          unint64_t v18 = v15;
          unint64_t v19 = v17 + 2;
        }
      }
    }
    if (v19 < v18)
    {
      *(unsigned char *)(v14 + v19) = v69;
      if (v19 + 1 < v18)
      {
        *(unsigned char *)(v14 + v19 + 1) = v70;
        unint64_t v20 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v21 = *((void *)v8 + 8);
        if (v20 + 16 >= v21) {
          unint64_t v20 = 0;
        }
        if (v19 <= 0xE) {
          unint64_t v19 = 14;
        }
        unint64_t v22 = v19 + v20 + 2;
        if (v21 <= v22) {
          unint64_t v23 = 0;
        }
        else {
          unint64_t v23 = v22;
        }
        *((void *)v8 + 10) = v23;
        if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v23) == 0x80000000
          || *((_DWORD *)v8 + 29))
        {
          if (*((unsigned char *)v8 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v8 + 23));
          }
          *((_DWORD *)v8 + 29) = 0;
        }
        goto LABEL_56;
      }
    }
    if (buf[16]) {
      break;
    }
    __break(1u);
LABEL_96:
    char v67 = 0;
    uint64_t v7 = v4[480];
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v67, v6, memory_order_acquire, memory_order_acquire);
    if (v67) {
      __n128 result = (void *)MEMORY[0x19972E8D0](v5);
    }
    if (*(void *)(v5 + 24)) {
      ++*(void *)(v5 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    int v68 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v68, 0, memory_order_release, memory_order_relaxed);
    if (v68 == 1)
    {
      if (v7)
      {
LABEL_102:
        if (!*(unsigned char *)(v7 + 4016))
        {
          *(unsigned char *)(v7 + 4016) = 1;
          __n128 result = (void *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v7);
          if (result) {
            __n128 result = (void *)(*(uint64_t (**)(void *))(*result + 160))(result);
          }
        }
        unsigned __int8 v6 = 0;
      }
    }
    else
    {
      __n128 result = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (v7) {
        goto LABEL_102;
      }
    }
  }
  unint64_t v54 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v55 = v54 - *(void *)buf;
  if (v54 < *(void *)buf)
  {
    unint64_t v56 = 0;
  }
  else
  {
    unint64_t v56 = 0;
    if (v55 <= 0xFFFFFFFFFFFFFFFDLL && v55 + 2 <= *(void *)&buf[8])
    {
      *(_WORD *)(*(void *)buf + v55) = 2870;
      unint64_t v56 = v55 + 2;
    }
  }
  unint64_t v57 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v58 = *((void *)v8 + 8);
  if (v57 + 16 >= v58) {
    unint64_t v57 = 0;
  }
  if (v56 <= 0x10) {
    unint64_t v56 = 16;
  }
  unint64_t v59 = v57 + v56;
  if (v58 <= v59) {
    unint64_t v59 = 0;
  }
  *((void *)v8 + 10) = v59;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v59);
  *((_DWORD *)v8 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v72, (uint64_t **)v8 + 1);
  uint64_t v60 = v72;
  BOOL v61 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v61 = 822;
  *((void *)v61 + 1) = v9;
  *((void *)v61 + 66) = (char *)v61 + 16;
  *((void *)v61 + 67) = 512;
  *((void *)v61 + 68) = 0;
  *((void *)v61 + 70) = 0;
  *((void *)v61 + 69) = 0;
  IPC::Encoder::encodeHeader(v61);
  uint64_t v73 = v61;
  IPC::ArgumentCoder<WebCore::CompositeMode,void>::encode(v61, &v69);
  int v63 = IPC::Connection::sendMessageImpl((uint64_t)v60, (uint64_t *)&v73, 1, 0);
  unint64_t v64 = v73;
  uint64_t v73 = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v62);
    WTF::fastFree(v65, v66);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v72);
  if (v63)
  {
LABEL_51:
    unint64_t v39 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v40 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_BeginTransparencyLayerWithCompositeMode";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v40;
      _os_log_impl(&dword_1985F2000, v39, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v41 = v4[481];
    if (v41)
    {
      unint64_t v42 = *(unsigned char **)(v41 + 8);
      if (v42) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v42);
      }
    }
  }
LABEL_56:
  if ((v6 & 1) == 0)
  {
    char v43 = 0;
    uint64_t v44 = *(void *)(v7 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v44, (unsigned __int8 *)&v43, 1u, memory_order_acquire, memory_order_acquire);
    if (v43) {
      MEMORY[0x19972E8D0](v44);
    }
    uint64_t v45 = *(void *)(v44 + 8);
    int v46 = 1;
    uint64_t v47 = v45 - 1;
    *(void *)(v44 + 8) = v45 - 1;
    if (v45 == 1)
    {
      uint64_t v53 = *(void *)(v44 + 16);
      uint64_t v48 = *(void *)(v44 + 24);
      *(void *)(v44 + 24) = 0;
      BOOL v49 = v53 != 0;
    }
    else
    {
      uint64_t v48 = 0;
      BOOL v49 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v44, (unsigned __int8 *)&v46, 0, memory_order_release, memory_order_relaxed);
    if (v46 == 1)
    {
      if (!v47) {
        goto LABEL_63;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v44);
      if (!v47)
      {
LABEL_63:
        if (v48) {
          (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
        }
        if (!v49) {
          WTF::fastFree((WTF *)v44, v13);
        }
      }
    }
  }
  __n128 result = v71;
  unint64_t v71 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result, v13);
      return (void *)WTF::fastFree(v51, v52);
    }
  }
  return result;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordEndTransparencyLayer(void *this)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = this[481];
  if (v1)
  {
    uint64_t v2 = this;
    this = *(void **)(v1 + 8);
    if (this)
    {
      this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v50);
      uint64_t v3 = v50;
      if (v50)
      {
        uint64_t v4 = (WTF::ApproximateTime *)v2[479];
        if (v4) {
          goto LABEL_81;
        }
        BOOL v49 = 0;
        while (1)
        {
          uint64_t v5 = v2[478];
          double v6 = *((double *)v3 + 15);
          double v7 = INFINITY;
          if (fabs(v6) != INFINITY)
          {
            WTF::ApproximateTime::now(v4);
            double v7 = v6 + v8;
          }
          if (*((void *)v3 + 7) != v5)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v3 + 64, buf, v7);
            if (!buf[16]) {
              goto LABEL_70;
            }
            uint64_t v25 = *(void *)buf;
            unint64_t v26 = *(void *)&buf[8];
            unint64_t v27 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v28 = v27 - *(void *)buf;
            if (v27 < *(void *)buf)
            {
              unint64_t v30 = 0;
              unint64_t v29 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v29 = 0;
              if (v28 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v30 = 0;
              }
              else
              {
                unint64_t v30 = 0;
                if (v28 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v28) = 2871;
                  unint64_t v29 = v26;
                  unint64_t v30 = v28 + 2;
                }
              }
            }
            uint64_t v31 = (void *)((v25 + v30 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v31 >= v25 + v30)
            {
              unint64_t v32 = (char *)v31 - v25;
              if ((unint64_t)v31 - v25 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_70;
              }
              unint64_t v30 = (unint64_t)(v32 + 8);
              if ((unint64_t)(v32 + 8) > v29) {
                goto LABEL_70;
              }
              *uint64_t v31 = v5;
            }
            if (!v29) {
              goto LABEL_70;
            }
            unint64_t v33 = (*((void *)v3 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v34 = *((void *)v3 + 8);
            if (v33 + 16 >= v34) {
              unint64_t v33 = 0;
            }
            if (v30 <= 0x10) {
              unint64_t v30 = 16;
            }
            unint64_t v35 = v33 + v30;
            if (v34 <= v35) {
              unint64_t v36 = 0;
            }
            else {
              unint64_t v36 = v35;
            }
            *((void *)v3 + 10) = v36;
            unint64_t v37 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v3 + 9) + 16) + 128), v36);
            int v38 = *((_DWORD *)v3 + 29);
            if (v37 == 0x80000000 || v38 != 0)
            {
              unsigned int v40 = v38 + 1;
              *((_DWORD *)v3 + 29) = v40;
              if (v40 >= *((_DWORD *)v3 + 28))
              {
                if (*((unsigned char *)v3 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v3 + 23));
                }
                *((_DWORD *)v3 + 29) = 0;
              }
            }
            *((void *)v3 + 7) = v5;
          }
          uint64_t v4 = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v3 + 64, buf, v7);
          if (!buf[16]) {
            goto LABEL_70;
          }
          uint64_t v9 = *(void **)buf;
          unint64_t v10 = *(void *)&buf[8];
          unint64_t v11 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v12 = v11 - *(void *)buf;
          if (v11 < *(void *)buf)
          {
            unint64_t v13 = 0;
          }
          else
          {
            if (v12 > 0xFFFFFFFFFFFFFFFDLL) {
              goto LABEL_77;
            }
            unint64_t v13 = v12 + 2;
            if (v12 + 2 > *(void *)&buf[8]) {
              goto LABEL_77;
            }
            *(_WORD *)(*(void *)buf + v12) = 851;
          }
          if (v10)
          {
            unint64_t v14 = (*((void *)v3 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v15 = *((void *)v3 + 8);
            if (v14 + 16 >= v15) {
              unint64_t v14 = 0;
            }
            if (v13 <= 0x10) {
              unint64_t v13 = 16;
            }
            unint64_t v16 = v14 + v13;
            if (v15 <= v16) {
              unint64_t v16 = 0;
            }
            *((void *)v3 + 10) = v16;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v3 + 9) + 16) + 128), v16) == 0x80000000
              || *((_DWORD *)v3 + 29))
            {
              if (*((unsigned char *)v3 + 104)) {
                MEMORY[0x1997420B0](*((unsigned int *)v3 + 23));
              }
              *((_DWORD *)v3 + 29) = 0;
            }
            goto LABEL_23;
          }
          if (buf[16]) {
            break;
          }
          __break(1u);
LABEL_81:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v4, v2[480], &v49);
          uint64_t v4 = v49;
          if (v49 && !*((unsigned char *)v49 + 4016))
          {
            *((unsigned char *)v49 + 4016) = 1;
            uint64_t v4 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v4);
          }
        }
        uint64_t v9 = *(void **)buf;
        unint64_t v10 = *(void *)&buf[8];
LABEL_77:
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v3, (unint64_t)v9, v10);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v51, (uint64_t **)v3 + 1);
        int v48 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::EndTransparencyLayer>((uint64_t)v51, v5);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v51);
        if (!v48) {
          goto LABEL_23;
        }
LABEL_70:
        uint64_t v44 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v45 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_EndTransparencyLayer";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v45;
          _os_log_impl(&dword_1985F2000, v44, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v46 = v2[481];
        if (v46)
        {
          uint64_t v47 = *(unsigned char **)(v46 + 8);
          if (v47) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v47);
          }
        }
LABEL_23:
        unint64_t v17 = v49;
        BOOL v49 = 0;
        if (v17)
        {
          char v18 = 0;
          uint64_t v19 = *((void *)v17 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v19, (unsigned __int8 *)&v18, 1u, memory_order_acquire, memory_order_acquire);
          if (v18) {
            MEMORY[0x19972E8D0](v19);
          }
          uint64_t v20 = *(void *)(v19 + 8);
          int v21 = 1;
          uint64_t v22 = v20 - 1;
          *(void *)(v19 + 8) = v20 - 1;
          if (v20 == 1)
          {
            uint64_t v43 = *(void *)(v19 + 16);
            uint64_t v23 = *(void *)(v19 + 24);
            *(void *)(v19 + 24) = 0;
            BOOL v24 = v43 != 0;
          }
          else
          {
            uint64_t v23 = 0;
            BOOL v24 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
          if (v21 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v19);
          }
          if (!v22)
          {
            if (v23) {
              (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
            }
            if (!v24) {
              WTF::fastFree((WTF *)v19, v9);
            }
          }
        }
        this = v50;
        unsigned int v50 = 0;
        if (this)
        {
          if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v9);
            return (void *)WTF::fastFree(v41, v42);
          }
        }
      }
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordDrawRect(void *this, const WebCore::FloatRect *a2, float a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  unint64_t v51 = a2;
  float v52 = a3;
  uint64_t v3 = this[481];
  if (v3)
  {
    uint64_t v4 = this;
    this = *(void **)(v3 + 8);
    if (this)
    {
      this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v54);
      uint64_t v5 = v54;
      if (v54)
      {
        double v6 = (WTF::ApproximateTime *)v4[479];
        if (v6) {
          goto LABEL_82;
        }
        uint64_t v53 = 0;
        while (1)
        {
          uint64_t v7 = v4[478];
          double v8 = *((double *)v5 + 15);
          double v9 = INFINITY;
          if (fabs(v8) != INFINITY)
          {
            WTF::ApproximateTime::now(v6);
            double v9 = v8 + v10;
          }
          if (*((void *)v5 + 7) != v7)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
            if (!buf[16]) {
              goto LABEL_75;
            }
            uint64_t v27 = *(void *)buf;
            unint64_t v28 = *(void *)&buf[8];
            unint64_t v29 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v30 = v29 - *(void *)buf;
            if (v29 < *(void *)buf)
            {
              unint64_t v32 = 0;
              unint64_t v31 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v31 = 0;
              if (v30 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v32 = 0;
              }
              else
              {
                unint64_t v32 = 0;
                if (v30 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v30) = 2871;
                  unint64_t v31 = v28;
                  unint64_t v32 = v30 + 2;
                }
              }
            }
            unint64_t v33 = (v27 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v33 >= v27 + v32)
            {
              unint64_t v34 = v33 - v27;
              if (v34 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_75;
              }
              unint64_t v32 = v34 + 8;
              if (v34 + 8 > v31) {
                goto LABEL_75;
              }
              *(void *)(v27 + v34) = v7;
            }
            if (!v31) {
              goto LABEL_75;
            }
            unint64_t v35 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v36 = *((void *)v5 + 8);
            if (v35 + 16 >= v36) {
              unint64_t v35 = 0;
            }
            if (v32 <= 0x10) {
              unint64_t v32 = 16;
            }
            unint64_t v37 = v35 + v32;
            if (v36 <= v37) {
              unint64_t v38 = 0;
            }
            else {
              unint64_t v38 = v37;
            }
            *((void *)v5 + 10) = v38;
            unint64_t v39 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v38);
            int v40 = *((_DWORD *)v5 + 29);
            if (v39 == 0x80000000 || v40 != 0)
            {
              unsigned int v42 = v40 + 1;
              *((_DWORD *)v5 + 29) = v42;
              if (v42 >= *((_DWORD *)v5 + 28))
              {
                if (*((unsigned char *)v5 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
                }
                *((_DWORD *)v5 + 29) = 0;
              }
            }
            *((void *)v5 + 7) = v7;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, &v55, v9);
          if (!v57) {
            goto LABEL_75;
          }
          *(void *)long long buf = v55;
          *(void *)&buf[8] = v56;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v11 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v12 = v11 >= v55;
          unint64_t v13 = v11 - v55;
          if (v12)
          {
            if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v56)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v55 + v13) = 848;
              *(void *)&uint8_t buf[16] = v13 + 2;
            }
          }
          double v6 = (WTF::ApproximateTime *)IPC::ArgumentCoder<std::tuple<WebCore::FloatRect const&,float>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<WebCore::FloatRect const&,float>,0ul,1ul>((uint64_t *)buf, (uint64_t)&v51);
          if (*(void *)&buf[8])
          {
            uint64_t v15 = *(void *)&buf[16];
            unint64_t v16 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v17 = *((void *)v5 + 8);
            if (v16 + 16 >= v17) {
              unint64_t v16 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v15 = 16;
            }
            unint64_t v18 = v16 + v15;
            if (v17 <= v18) {
              unint64_t v18 = 0;
            }
            *((void *)v5 + 10) = v18;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v18) == 0x80000000
              || *((_DWORD *)v5 + 29))
            {
              if (*((unsigned char *)v5 + 104)) {
                MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
              }
              *((_DWORD *)v5 + 29) = 0;
            }
            goto LABEL_24;
          }
          if (v57) {
            break;
          }
          __break(1u);
LABEL_82:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6, v4[480], &v53);
          double v6 = v53;
          if (v53 && !*((unsigned char *)v53 + 4016))
          {
            *((unsigned char *)v53 + 4016) = 1;
            double v6 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v6);
          }
        }
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, v55, v56);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v5 + 1);
        int v46 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawRect>(*(uint64_t *)buf, (uint64_t)&v51, v7);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        if (!v46) {
          goto LABEL_24;
        }
LABEL_75:
        uint64_t v47 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          int v48 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_DrawRect";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v48;
          _os_log_impl(&dword_1985F2000, v47, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v49 = v4[481];
        if (v49)
        {
          unsigned int v50 = *(unsigned char **)(v49 + 8);
          if (v50) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v50);
          }
        }
LABEL_24:
        uint64_t v19 = v53;
        uint64_t v53 = 0;
        if (v19)
        {
          char v20 = 0;
          uint64_t v21 = *((void *)v19 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
          if (v20) {
            MEMORY[0x19972E8D0](v21);
          }
          uint64_t v22 = *(void *)(v21 + 8);
          int v23 = 1;
          uint64_t v24 = v22 - 1;
          *(void *)(v21 + 8) = v22 - 1;
          if (v22 == 1)
          {
            uint64_t v45 = *(void *)(v21 + 16);
            uint64_t v25 = *(void *)(v21 + 24);
            *(void *)(v21 + 24) = 0;
            BOOL v26 = v45 != 0;
          }
          else
          {
            uint64_t v25 = 0;
            BOOL v26 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
          if (v23 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v21);
          }
          if (!v24)
          {
            if (v25) {
              (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
            }
            if (!v26) {
              WTF::fastFree((WTF *)v21, v14);
            }
          }
        }
        this = v54;
        unint64_t v54 = 0;
        if (this)
        {
          if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v14);
            return (void *)WTF::fastFree(v43, v44);
          }
        }
      }
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordDrawLine(void *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = this[481];
  if (!v3) {
    return this;
  }
  uint64_t v4 = this;
  this = *(void **)(v3 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v68);
  if (!v68) {
    return this;
  }
  uint64_t v7 = v4[479];
  char v8 = 1;
  if (v7)
  {
    char v66 = 0;
    uint64_t v9 = v4[480];
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v66, 1u, memory_order_acquire, memory_order_acquire);
    if (v66) {
      this = (void *)MEMORY[0x19972E8D0](v7);
    }
    if (*(void *)(v7 + 24)) {
      ++*(void *)(v7 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
    int v67 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v67, 0, memory_order_release, memory_order_relaxed);
    if (v67 == 1)
    {
      if (!v9) {
        goto LABEL_6;
      }
    }
    else
    {
      this = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (!v9) {
        goto LABEL_6;
      }
    }
    if (!*(unsigned char *)(v9 + 4016))
    {
      *(unsigned char *)(v9 + 4016) = 1;
      this = (void *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v9);
      if (this) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 160))(this);
      }
    }
    char v8 = 0;
    goto LABEL_6;
  }
  uint64_t v9 = 0;
LABEL_6:
  double v10 = v68;
  uint64_t v11 = v4[478];
  double v12 = *((double *)v68 + 15);
  double v13 = INFINITY;
  if (fabs(v12) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
    double v13 = v12 + v14;
  }
  if (*((void *)v10 + 7) == v11) {
    goto LABEL_9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v10 + 64, buf, v13);
  if (!buf[16]) {
    goto LABEL_64;
  }
  uint64_t v36 = *(void *)buf;
  unint64_t v37 = *(void *)&buf[8];
  unint64_t v38 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = v38 - *(void *)buf;
  if (v38 < *(void *)buf)
  {
    unint64_t v41 = 0;
    unint64_t v40 = *(void *)&buf[8];
  }
  else
  {
    unint64_t v40 = 0;
    if (v39 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v41 = 0;
    }
    else
    {
      unint64_t v41 = 0;
      if (v39 + 2 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v39) = 2871;
        unint64_t v40 = v37;
        unint64_t v41 = v39 + 2;
      }
    }
  }
  unsigned int v42 = (void *)((v36 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v42 >= v36 + v41)
  {
    uint64_t v43 = (char *)v42 - v36;
    if ((unint64_t)v42 - v36 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_64;
    }
    unint64_t v41 = (unint64_t)(v43 + 8);
    if ((unint64_t)(v43 + 8) > v40) {
      goto LABEL_64;
    }
    void *v42 = v11;
  }
  if (!v40)
  {
LABEL_64:
    unint64_t v51 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      float v52 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_DrawLine";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v52;
      _os_log_impl(&dword_1985F2000, v51, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v53 = v4[481];
    if (v53)
    {
      unint64_t v54 = *(unsigned char **)(v53 + 8);
      if (v54) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v54);
      }
    }
    goto LABEL_69;
  }
  unint64_t v44 = (*((void *)v10 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v45 = *((void *)v10 + 8);
  if (v44 + 16 >= v45) {
    unint64_t v44 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v46 = v44 + v41;
  if (v45 <= v46) {
    unint64_t v47 = 0;
  }
  else {
    unint64_t v47 = v46;
  }
  *((void *)v10 + 10) = v47;
  unint64_t v48 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v10 + 9) + 16) + 128), v47);
  int v49 = *((_DWORD *)v10 + 29);
  if (v48 == 0x80000000 || v49 != 0)
  {
    unsigned int v62 = v49 + 1;
    *((_DWORD *)v10 + 29) = v62;
    if (v62 >= *((_DWORD *)v10 + 28))
    {
      if (*((unsigned char *)v10 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v10 + 23));
      }
      *((_DWORD *)v10 + 29) = 0;
    }
  }
  *((void *)v10 + 7) = v11;
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v10 + 64, &v70, v13);
  if (!v72) {
    goto LABEL_64;
  }
  *(void *)long long buf = v70;
  *(void *)&buf[8] = v71;
  *(void *)&uint8_t buf[16] = 0;
  unint64_t v15 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v16 = v15 >= v70;
  unint64_t v17 = v15 - v70;
  if (v16)
  {
    if (v17 > 0xFFFFFFFFFFFFFFFDLL || v17 + 2 > v71)
    {
      *(void *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v70 + v17) = 843;
      *(void *)&uint8_t buf[16] = v17 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)buf, a2);
  IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)buf, a3);
  if (*(void *)&buf[8])
  {
    unint64_t v20 = *(void *)&buf[16];
    unint64_t v21 = (*((void *)v10 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *((void *)v10 + 8);
    if (v21 + 16 < v19)
    {
LABEL_17:
      if (v20 <= 0x10) {
        unint64_t v20 = 16;
      }
      unint64_t v22 = v21 + v20;
      if (v19 <= v22) {
        unint64_t v22 = 0;
      }
      *((void *)v10 + 10) = v22;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v10 + 9) + 16) + 128), v22) == 0x80000000
        || *((_DWORD *)v10 + 29))
      {
        if (*((unsigned char *)v10 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v10 + 23));
        }
        *((_DWORD *)v10 + 29) = 0;
      }
      goto LABEL_69;
    }
LABEL_93:
    unint64_t v21 = 0;
    goto LABEL_17;
  }
  unint64_t v20 = v72;
  if (!v72)
  {
    __break(1u);
    goto LABEL_93;
  }
  unint64_t v23 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v24 = v23 - v70;
  if (v23 < v70)
  {
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v25 = 0;
    if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v71)
    {
      *(_WORD *)(v70 + v24) = 2870;
      unint64_t v25 = v24 + 2;
    }
  }
  unint64_t v26 = (*((void *)v10 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *((void *)v10 + 8);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v25 <= 0x10) {
    unint64_t v25 = 16;
  }
  unint64_t v28 = v26 + v25;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *((void *)v10 + 10) = v28;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v10 + 9) + 16) + 128), v28);
  *((_DWORD *)v10 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v69, (uint64_t **)v10 + 1);
  unint64_t v29 = v69;
  unint64_t v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v30 = 843;
  *((void *)v30 + 1) = v11;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 68) = 0;
  *((void *)v30 + 70) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  *(void *)long long buf = v30;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v30, (float *)a2);
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v30, (float *)a3);
  int v32 = IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)buf, 1, 0);
  unint64_t v33 = *(IPC::Encoder **)buf;
  *(void *)long long buf = 0;
  if (v33)
  {
    IPC::Encoder::~Encoder(v33, v31);
    WTF::fastFree(v34, v35);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v69);
  if (v32) {
    goto LABEL_64;
  }
LABEL_69:
  if ((v8 & 1) == 0)
  {
    char v55 = 0;
    uint64_t v56 = *(void *)(v9 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v56, (unsigned __int8 *)&v55, 1u, memory_order_acquire, memory_order_acquire);
    if (v55) {
      MEMORY[0x19972E8D0](v56);
    }
    uint64_t v57 = *(void *)(v56 + 8);
    int v58 = 1;
    uint64_t v59 = v57 - 1;
    *(void *)(v56 + 8) = v57 - 1;
    if (v57 == 1)
    {
      uint64_t v65 = *(void *)(v56 + 16);
      uint64_t v60 = *(void *)(v56 + 24);
      *(void *)(v56 + 24) = 0;
      BOOL v61 = v65 != 0;
    }
    else
    {
      uint64_t v60 = 0;
      BOOL v61 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v56, (unsigned __int8 *)&v58, 0, memory_order_release, memory_order_relaxed);
    if (v58 == 1)
    {
      if (!v59)
      {
LABEL_76:
        if (v60) {
          (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
        }
        if (!v61) {
          WTF::fastFree((WTF *)v56, v18);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v56);
      if (!v59) {
        goto LABEL_76;
      }
    }
  }
  this = v68;
  int v68 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v18);
      return (void *)WTF::fastFree(v63, v64);
    }
  }
  return this;
}

WTF *WebKit::RemoteDisplayListRecorderProxy::recordDrawLinesForText(void *a1)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  WebCore::DisplayList::DrawLinesForText::DrawLinesForText();
  char v55 = &v52;
  uint64_t v3 = a1[481];
  if (v3)
  {
    uint64_t v4 = *(WebKit::RemoteRenderingBackendProxy **)(v3 + 8);
    if (v4)
    {
      WebKit::RemoteRenderingBackendProxy::connection(v4, (atomic_uint **)&v57);
      uint64_t v5 = v57;
      if (v57)
      {
        double v6 = (WTF::ApproximateTime *)a1[479];
        if (v6) {
          goto LABEL_84;
        }
        uint64_t v56 = 0;
        while (1)
        {
          uint64_t v7 = a1[478];
          double v8 = *((double *)v5 + 15);
          double v9 = INFINITY;
          if (fabs(v8) != INFINITY)
          {
            WTF::ApproximateTime::now(v6);
            double v9 = v8 + v10;
          }
          if (*((void *)v5 + 7) != v7)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
            if (!buf[16]) {
              goto LABEL_73;
            }
            uint64_t v28 = *(void *)buf;
            unint64_t v29 = *(void *)&buf[8];
            unint64_t v30 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v31 = v30 - *(void *)buf;
            if (v30 < *(void *)buf)
            {
              unint64_t v33 = 0;
              unint64_t v32 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v32 = 0;
              if (v31 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v33 = 0;
              }
              else
              {
                unint64_t v33 = 0;
                if (v31 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v31) = 2871;
                  unint64_t v32 = v29;
                  unint64_t v33 = v31 + 2;
                }
              }
            }
            unint64_t v34 = (void *)((v28 + v33 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v34 >= v28 + v33)
            {
              unint64_t v35 = (char *)v34 - v28;
              if ((unint64_t)v34 - v28 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_73;
              }
              unint64_t v33 = (unint64_t)(v35 + 8);
              if ((unint64_t)(v35 + 8) > v32) {
                goto LABEL_73;
              }
              void *v34 = v7;
            }
            if (!v32) {
              goto LABEL_73;
            }
            unint64_t v36 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v37 = *((void *)v5 + 8);
            if (v36 + 16 >= v37) {
              unint64_t v36 = 0;
            }
            if (v33 <= 0x10) {
              unint64_t v33 = 16;
            }
            unint64_t v38 = v36 + v33;
            if (v37 <= v38) {
              unint64_t v39 = 0;
            }
            else {
              unint64_t v39 = v38;
            }
            *((void *)v5 + 10) = v39;
            unint64_t v40 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v39);
            int v41 = *((_DWORD *)v5 + 29);
            if (v40 == 0x80000000 || v41 != 0)
            {
              unsigned int v43 = v41 + 1;
              *((_DWORD *)v5 + 29) = v43;
              if (v43 >= *((_DWORD *)v5 + 28))
              {
                if (*((unsigned char *)v5 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
                }
                *((_DWORD *)v5 + 29) = 0;
              }
            }
            *((void *)v5 + 7) = v7;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, &v58, v9);
          if (!v60) {
            goto LABEL_73;
          }
          *(void *)long long buf = v58;
          *(void *)&buf[8] = v59;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v11 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v12 = v11 >= v58;
          unint64_t v13 = v11 - v58;
          if (v12)
          {
            if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v59)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v58 + v13) = 844;
              *(void *)&uint8_t buf[16] = v13 + 2;
            }
          }
          double v6 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::DisplayList::DrawLinesForText,void>::encode((uint64_t *)buf, (uint64_t)v55);
          if (*(void *)&buf[8])
          {
            uint64_t v14 = *(void *)&buf[16];
            unint64_t v15 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v16 = *((void *)v5 + 8);
            if (v15 + 16 >= v16) {
              unint64_t v15 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v14 = 16;
            }
            unint64_t v17 = v15 + v14;
            if (v16 <= v17) {
              unint64_t v17 = 0;
            }
            *((void *)v5 + 10) = v17;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v17) == 0x80000000
              || *((_DWORD *)v5 + 29))
            {
              if (*((unsigned char *)v5 + 104)) {
                MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
              }
              *((_DWORD *)v5 + 29) = 0;
            }
            goto LABEL_24;
          }
          if (v60) {
            break;
          }
          __break(1u);
LABEL_84:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6, a1[480], &v56);
          double v6 = v56;
          if (v56 && !*((unsigned char *)v56 + 4016))
          {
            *((unsigned char *)v56 + 4016) = 1;
            double v6 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v6);
          }
        }
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, v58, v59);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v5 + 1);
        int v51 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawLinesForText>(*(uint64_t *)buf, (uint64_t *)&v55, v7);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        if (!v51) {
          goto LABEL_24;
        }
LABEL_73:
        unint64_t v47 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v48 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_DrawLinesForText";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v48;
          _os_log_impl(&dword_1985F2000, v47, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v49 = a1[481];
        if (v49)
        {
          unsigned int v50 = *(unsigned char **)(v49 + 8);
          if (v50) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v50);
          }
        }
LABEL_24:
        unint64_t v18 = v56;
        uint64_t v56 = 0;
        if (v18)
        {
          char v19 = 0;
          uint64_t v20 = *((void *)v18 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
          if (v19) {
            MEMORY[0x19972E8D0](v20);
          }
          uint64_t v21 = *(void *)(v20 + 8);
          int v22 = 1;
          uint64_t v23 = v21 - 1;
          *(void *)(v20 + 8) = v21 - 1;
          if (v21 == 1)
          {
            uint64_t v46 = *(void *)(v20 + 16);
            uint64_t v24 = *(void *)(v20 + 24);
            *(void *)(v20 + 24) = 0;
            BOOL v25 = v46 != 0;
          }
          else
          {
            uint64_t v24 = 0;
            BOOL v25 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
          if (v22 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v20);
          }
          if (!v23)
          {
            if (v24) {
              (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
            }
            if (!v25) {
              WTF::fastFree((WTF *)v20, v2);
            }
          }
        }
        unint64_t v26 = (unsigned int *)v57;
        uint64_t v57 = 0;
        if (v26 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v26);
          IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v26, v2);
          WTF::fastFree(v44, v45);
        }
      }
    }
  }
  __n128 result = v53;
  if (v53)
  {
    uint64_t v53 = 0;
    int v54 = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordDrawDotsForDocumentMarker(void *result, float *a2, char *a3)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = result[481];
  if (!v3) {
    return result;
  }
  uint64_t v4 = result;
  __n128 result = *(void **)(v3 + 8);
  if (!result) {
    return result;
  }
  __n128 result = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (atomic_uint **)&v68);
  if (!v68) {
    return result;
  }
  uint64_t v7 = v4[479];
  char v8 = 1;
  if (v7)
  {
    char v66 = 0;
    uint64_t v9 = v4[480];
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v66, 1u, memory_order_acquire, memory_order_acquire);
    if (v66) {
      __n128 result = (void *)MEMORY[0x19972E8D0](v7);
    }
    if (*(void *)(v7 + 24)) {
      ++*(void *)(v7 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
    int v67 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v67, 0, memory_order_release, memory_order_relaxed);
    if (v67 == 1)
    {
      if (!v9) {
        goto LABEL_6;
      }
    }
    else
    {
      __n128 result = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (!v9) {
        goto LABEL_6;
      }
    }
    if (!*(unsigned char *)(v9 + 4016))
    {
      *(unsigned char *)(v9 + 4016) = 1;
      __n128 result = (void *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v9);
      if (result) {
        __n128 result = (void *)(*(uint64_t (**)(void *))(*result + 160))(result);
      }
    }
    char v8 = 0;
    goto LABEL_6;
  }
  uint64_t v9 = 0;
LABEL_6:
  double v10 = v68;
  uint64_t v11 = v4[478];
  double v12 = *((double *)v68 + 15);
  double v13 = INFINITY;
  if (fabs(v12) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    double v13 = v12 + v14;
  }
  if (*((void *)v10 + 7) == v11) {
    goto LABEL_9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v10 + 64, buf, v13);
  if (!buf[16]) {
    goto LABEL_64;
  }
  uint64_t v36 = *(void *)buf;
  unint64_t v37 = *(void *)&buf[8];
  unint64_t v38 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = v38 - *(void *)buf;
  if (v38 < *(void *)buf)
  {
    unint64_t v41 = 0;
    unint64_t v40 = *(void *)&buf[8];
  }
  else
  {
    unint64_t v40 = 0;
    if (v39 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v41 = 0;
    }
    else
    {
      unint64_t v41 = 0;
      if (v39 + 2 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v39) = 2871;
        unint64_t v40 = v37;
        unint64_t v41 = v39 + 2;
      }
    }
  }
  unsigned int v42 = (void *)((v36 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v42 >= v36 + v41)
  {
    unsigned int v43 = (char *)v42 - v36;
    if ((unint64_t)v42 - v36 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_64;
    }
    unint64_t v41 = (unint64_t)(v43 + 8);
    if ((unint64_t)(v43 + 8) > v40) {
      goto LABEL_64;
    }
    void *v42 = v11;
  }
  if (!v40)
  {
LABEL_64:
    int v51 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      char v52 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_DrawDotsForDocumentMarker";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v52;
      _os_log_impl(&dword_1985F2000, v51, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v53 = v4[481];
    if (v53)
    {
      int v54 = *(unsigned char **)(v53 + 8);
      if (v54) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v54);
      }
    }
    goto LABEL_69;
  }
  unint64_t v44 = (*((void *)v10 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v45 = *((void *)v10 + 8);
  if (v44 + 16 >= v45) {
    unint64_t v44 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v46 = v44 + v41;
  if (v45 <= v46) {
    unint64_t v47 = 0;
  }
  else {
    unint64_t v47 = v46;
  }
  *((void *)v10 + 10) = v47;
  unint64_t v48 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v10 + 9) + 16) + 128), v47);
  int v49 = *((_DWORD *)v10 + 29);
  if (v48 == 0x80000000 || v49 != 0)
  {
    unsigned int v62 = v49 + 1;
    *((_DWORD *)v10 + 29) = v62;
    if (v62 >= *((_DWORD *)v10 + 28))
    {
      if (*((unsigned char *)v10 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v10 + 23));
      }
      *((_DWORD *)v10 + 29) = 0;
    }
  }
  *((void *)v10 + 7) = v11;
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v10 + 64, &v70, v13);
  if (!v72) {
    goto LABEL_64;
  }
  *(void *)long long buf = v70;
  *(void *)&buf[8] = v71;
  *(void *)&uint8_t buf[16] = 0;
  unint64_t v15 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v16 = v15 >= v70;
  unint64_t v17 = v15 - v70;
  if (v16)
  {
    if (v17 > 0xFFFFFFFFFFFFFFFDLL || v17 + 2 > v71)
    {
      *(void *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v70 + v17) = 836;
      *(void *)&uint8_t buf[16] = v17 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, a2);
  IPC::ArgumentCoder<WebCore::DocumentMarkerLineStyle,void>::encode((uint64_t *)buf, a3);
  if (*(void *)&buf[8])
  {
    unint64_t v20 = *(void *)&buf[16];
    unint64_t v21 = (*((void *)v10 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *((void *)v10 + 8);
    if (v21 + 16 < v19)
    {
LABEL_17:
      if (v20 <= 0x10) {
        unint64_t v20 = 16;
      }
      unint64_t v22 = v21 + v20;
      if (v19 <= v22) {
        unint64_t v22 = 0;
      }
      *((void *)v10 + 10) = v22;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v10 + 9) + 16) + 128), v22) == 0x80000000
        || *((_DWORD *)v10 + 29))
      {
        if (*((unsigned char *)v10 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v10 + 23));
        }
        *((_DWORD *)v10 + 29) = 0;
      }
      goto LABEL_69;
    }
LABEL_93:
    unint64_t v21 = 0;
    goto LABEL_17;
  }
  unint64_t v20 = v72;
  if (!v72)
  {
    __break(1u);
    goto LABEL_93;
  }
  unint64_t v23 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v24 = v23 - v70;
  if (v23 < v70)
  {
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v25 = 0;
    if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v71)
    {
      *(_WORD *)(v70 + v24) = 2870;
      unint64_t v25 = v24 + 2;
    }
  }
  unint64_t v26 = (*((void *)v10 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *((void *)v10 + 8);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v25 <= 0x10) {
    unint64_t v25 = 16;
  }
  unint64_t v28 = v26 + v25;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *((void *)v10 + 10) = v28;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v10 + 9) + 16) + 128), v28);
  *((_DWORD *)v10 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v69, (uint64_t **)v10 + 1);
  unint64_t v29 = v69;
  unint64_t v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v30 = 836;
  *((void *)v30 + 1) = v11;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 68) = 0;
  *((void *)v30 + 70) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  *(void *)long long buf = v30;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v30, a2);
  char v73 = *a3;
  IPC::Encoder::operator<<<BOOL>(v30, &v73);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(v30, (WebCore::Color *)(a3 + 8));
  int v32 = IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)buf, 1, 0);
  unint64_t v33 = *(IPC::Encoder **)buf;
  *(void *)long long buf = 0;
  if (v33)
  {
    IPC::Encoder::~Encoder(v33, v31);
    WTF::fastFree(v34, v35);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v69);
  if (v32) {
    goto LABEL_64;
  }
LABEL_69:
  if ((v8 & 1) == 0)
  {
    char v55 = 0;
    uint64_t v56 = *(void *)(v9 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v56, (unsigned __int8 *)&v55, 1u, memory_order_acquire, memory_order_acquire);
    if (v55) {
      MEMORY[0x19972E8D0](v56);
    }
    uint64_t v57 = *(void *)(v56 + 8);
    int v58 = 1;
    uint64_t v59 = v57 - 1;
    *(void *)(v56 + 8) = v57 - 1;
    if (v57 == 1)
    {
      uint64_t v65 = *(void *)(v56 + 16);
      uint64_t v60 = *(void *)(v56 + 24);
      *(void *)(v56 + 24) = 0;
      BOOL v61 = v65 != 0;
    }
    else
    {
      uint64_t v60 = 0;
      BOOL v61 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v56, (unsigned __int8 *)&v58, 0, memory_order_release, memory_order_relaxed);
    if (v58 == 1)
    {
      if (!v59)
      {
LABEL_76:
        if (v60) {
          (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
        }
        if (!v61) {
          WTF::fastFree((WTF *)v56, v18);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v56);
      if (!v59) {
        goto LABEL_76;
      }
    }
  }
  __n128 result = v68;
  int v68 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result, v18);
      return (void *)WTF::fastFree(v63, v64);
    }
  }
  return result;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordDrawEllipse(void *this, const WebCore::FloatRect *a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this[481];
  if (!v2) {
    return this;
  }
  uint64_t v3 = this;
  this = *(void **)(v2 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v66);
  if (!v66) {
    return this;
  }
  uint64_t v5 = v3[479];
  char v6 = 1;
  if (v5)
  {
    char v64 = 0;
    uint64_t v7 = v3[480];
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v64, 1u, memory_order_acquire, memory_order_acquire);
    if (v64) {
      this = (void *)MEMORY[0x19972E8D0](v5);
    }
    if (*(void *)(v5 + 24)) {
      ++*(void *)(v5 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    int v65 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v65, 0, memory_order_release, memory_order_relaxed);
    if (v65 == 1)
    {
      if (!v7) {
        goto LABEL_6;
      }
    }
    else
    {
      this = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (!v7) {
        goto LABEL_6;
      }
    }
    if (!*(unsigned char *)(v7 + 4016))
    {
      *(unsigned char *)(v7 + 4016) = 1;
      this = (void *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v7);
      if (this) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 160))(this);
      }
    }
    char v6 = 0;
    goto LABEL_6;
  }
  uint64_t v7 = 0;
LABEL_6:
  char v8 = v66;
  uint64_t v9 = v3[478];
  double v10 = *((double *)v66 + 15);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
    double v11 = v10 + v12;
  }
  if (*((void *)v8 + 7) == v9) {
    goto LABEL_9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, buf, v11);
  if (!buf[16]) {
    goto LABEL_64;
  }
  uint64_t v34 = *(void *)buf;
  unint64_t v35 = *(void *)&buf[8];
  unint64_t v36 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - *(void *)buf;
  if (v36 < *(void *)buf)
  {
    unint64_t v39 = 0;
    unint64_t v38 = *(void *)&buf[8];
  }
  else
  {
    unint64_t v38 = 0;
    if (v37 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v39 = 0;
    }
    else
    {
      unint64_t v39 = 0;
      if (v37 + 2 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v37) = 2871;
        unint64_t v38 = v35;
        unint64_t v39 = v37 + 2;
      }
    }
  }
  unint64_t v40 = (void *)((v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v40 >= v34 + v39)
  {
    unint64_t v41 = (char *)v40 - v34;
    if ((unint64_t)v40 - v34 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_64;
    }
    unint64_t v39 = (unint64_t)(v41 + 8);
    if ((unint64_t)(v41 + 8) > v38) {
      goto LABEL_64;
    }
    *unint64_t v40 = v9;
  }
  if (!v38)
  {
LABEL_64:
    int v49 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v50 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_DrawEllipse";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v50;
      _os_log_impl(&dword_1985F2000, v49, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v51 = v3[481];
    if (v51)
    {
      char v52 = *(unsigned char **)(v51 + 8);
      if (v52) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v52);
      }
    }
    goto LABEL_69;
  }
  unint64_t v42 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *((void *)v8 + 8);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v39 <= 0x10) {
    unint64_t v39 = 16;
  }
  unint64_t v44 = v42 + v39;
  if (v43 <= v44) {
    unint64_t v45 = 0;
  }
  else {
    unint64_t v45 = v44;
  }
  *((void *)v8 + 10) = v45;
  unint64_t v46 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v45);
  int v47 = *((_DWORD *)v8 + 29);
  if (v46 == 0x80000000 || v47 != 0)
  {
    unsigned int v60 = v47 + 1;
    *((_DWORD *)v8 + 29) = v60;
    if (v60 >= *((_DWORD *)v8 + 28))
    {
      if (*((unsigned char *)v8 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v8 + 23));
      }
      *((_DWORD *)v8 + 29) = 0;
    }
  }
  *((void *)v8 + 7) = v9;
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, &v68, v11);
  if (!v70) {
    goto LABEL_64;
  }
  *(void *)long long buf = v68;
  *(void *)&buf[8] = v69;
  *(void *)&uint8_t buf[16] = 0;
  unint64_t v13 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v14 = v13 >= v68;
  unint64_t v15 = v13 - v68;
  if (v14)
  {
    if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v69)
    {
      *(void *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v68 + v15) = 837;
      *(void *)&uint8_t buf[16] = v15 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, a2);
  if (*(void *)&buf[8])
  {
    unint64_t v18 = *(void *)&buf[16];
    unint64_t v19 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *((void *)v8 + 8);
    if (v19 + 16 < v17)
    {
LABEL_17:
      if (v18 <= 0x10) {
        unint64_t v18 = 16;
      }
      unint64_t v20 = v19 + v18;
      if (v17 <= v20) {
        unint64_t v20 = 0;
      }
      *((void *)v8 + 10) = v20;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v20) == 0x80000000
        || *((_DWORD *)v8 + 29))
      {
        if (*((unsigned char *)v8 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v8 + 23));
        }
        *((_DWORD *)v8 + 29) = 0;
      }
      goto LABEL_69;
    }
LABEL_93:
    unint64_t v19 = 0;
    goto LABEL_17;
  }
  unint64_t v18 = v70;
  if (!v70)
  {
    __break(1u);
    goto LABEL_93;
  }
  unint64_t v21 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v22 = v21 - v68;
  if (v21 < v68)
  {
    unint64_t v23 = 0;
  }
  else
  {
    unint64_t v23 = 0;
    if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v69)
    {
      *(_WORD *)(v68 + v22) = 2870;
      unint64_t v23 = v22 + 2;
    }
  }
  unint64_t v24 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v25 = *((void *)v8 + 8);
  if (v24 + 16 >= v25) {
    unint64_t v24 = 0;
  }
  if (v23 <= 0x10) {
    unint64_t v23 = 16;
  }
  unint64_t v26 = v24 + v23;
  if (v25 <= v26) {
    unint64_t v26 = 0;
  }
  *((void *)v8 + 10) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v26);
  *((_DWORD *)v8 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v8 + 1);
  unint64_t v27 = v67;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 837;
  *((void *)v28 + 1) = v9;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  *(void *)long long buf = v28;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v28, (float *)a2);
  int v30 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)buf, 1, 0);
  unint64_t v31 = *(IPC::Encoder **)buf;
  *(void *)long long buf = 0;
  if (v31)
  {
    IPC::Encoder::~Encoder(v31, v29);
    WTF::fastFree(v32, v33);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v67);
  if (v30) {
    goto LABEL_64;
  }
LABEL_69:
  if ((v6 & 1) == 0)
  {
    char v53 = 0;
    uint64_t v54 = *(void *)(v7 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v54, (unsigned __int8 *)&v53, 1u, memory_order_acquire, memory_order_acquire);
    if (v53) {
      MEMORY[0x19972E8D0](v54);
    }
    uint64_t v55 = *(void *)(v54 + 8);
    int v56 = 1;
    uint64_t v57 = v55 - 1;
    *(void *)(v54 + 8) = v55 - 1;
    if (v55 == 1)
    {
      uint64_t v63 = *(void *)(v54 + 16);
      uint64_t v58 = *(void *)(v54 + 24);
      *(void *)(v54 + 24) = 0;
      BOOL v59 = v63 != 0;
    }
    else
    {
      uint64_t v58 = 0;
      BOOL v59 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v54, (unsigned __int8 *)&v56, 0, memory_order_release, memory_order_relaxed);
    if (v56 == 1)
    {
      if (!v57)
      {
LABEL_76:
        if (v58) {
          (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
        }
        if (!v59) {
          WTF::fastFree((WTF *)v54, v16);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v54);
      if (!v57) {
        goto LABEL_76;
      }
    }
  }
  this = v66;
  char v66 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v16);
      return (void *)WTF::fastFree(v61, v62);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordDrawPath(void *this, const WebCore::Path *a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this[481];
  if (!v2) {
    return this;
  }
  uint64_t v3 = this;
  this = *(void **)(v2 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v66);
  if (!v66) {
    return this;
  }
  uint64_t v5 = v3[479];
  char v6 = 1;
  if (v5)
  {
    char v64 = 0;
    uint64_t v7 = v3[480];
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v64, 1u, memory_order_acquire, memory_order_acquire);
    if (v64) {
      this = (void *)MEMORY[0x19972E8D0](v5);
    }
    if (*(void *)(v5 + 24)) {
      ++*(void *)(v5 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    int v65 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v65, 0, memory_order_release, memory_order_relaxed);
    if (v65 == 1)
    {
      if (!v7) {
        goto LABEL_6;
      }
    }
    else
    {
      this = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (!v7) {
        goto LABEL_6;
      }
    }
    if (!*(unsigned char *)(v7 + 4016))
    {
      *(unsigned char *)(v7 + 4016) = 1;
      this = (void *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v7);
      if (this) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 160))(this);
      }
    }
    char v6 = 0;
    goto LABEL_6;
  }
  uint64_t v7 = 0;
LABEL_6:
  char v8 = v66;
  uint64_t v9 = v3[478];
  double v10 = *((double *)v66 + 15);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
    double v11 = v10 + v12;
  }
  if (*((void *)v8 + 7) == v9) {
    goto LABEL_9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, buf, v11);
  if (!buf[16]) {
    goto LABEL_64;
  }
  uint64_t v34 = *(void *)buf;
  unint64_t v35 = *(void *)&buf[8];
  unint64_t v36 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - *(void *)buf;
  if (v36 < *(void *)buf)
  {
    unint64_t v39 = 0;
    unint64_t v38 = *(void *)&buf[8];
  }
  else
  {
    unint64_t v38 = 0;
    if (v37 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v39 = 0;
    }
    else
    {
      unint64_t v39 = 0;
      if (v37 + 2 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v37) = 2871;
        unint64_t v38 = v35;
        unint64_t v39 = v37 + 2;
      }
    }
  }
  unint64_t v40 = (void *)((v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v40 >= v34 + v39)
  {
    unint64_t v41 = (char *)v40 - v34;
    if ((unint64_t)v40 - v34 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_64;
    }
    unint64_t v39 = (unint64_t)(v41 + 8);
    if ((unint64_t)(v41 + 8) > v38) {
      goto LABEL_64;
    }
    *unint64_t v40 = v9;
  }
  if (!v38)
  {
LABEL_64:
    int v49 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v50 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_DrawPath";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v50;
      _os_log_impl(&dword_1985F2000, v49, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v51 = v3[481];
    if (v51)
    {
      char v52 = *(unsigned char **)(v51 + 8);
      if (v52) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v52);
      }
    }
    goto LABEL_69;
  }
  unint64_t v42 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *((void *)v8 + 8);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v39 <= 0x10) {
    unint64_t v39 = 16;
  }
  unint64_t v44 = v42 + v39;
  if (v43 <= v44) {
    unint64_t v45 = 0;
  }
  else {
    unint64_t v45 = v44;
  }
  *((void *)v8 + 10) = v45;
  unint64_t v46 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v45);
  int v47 = *((_DWORD *)v8 + 29);
  if (v46 == 0x80000000 || v47 != 0)
  {
    unsigned int v60 = v47 + 1;
    *((_DWORD *)v8 + 29) = v60;
    if (v60 >= *((_DWORD *)v8 + 28))
    {
      if (*((unsigned char *)v8 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v8 + 23));
      }
      *((_DWORD *)v8 + 29) = 0;
    }
  }
  *((void *)v8 + 7) = v9;
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, &v68, v11);
  if (!v70) {
    goto LABEL_64;
  }
  *(void *)long long buf = v68;
  *(void *)&buf[8] = v69;
  *(void *)&uint8_t buf[16] = 0;
  unint64_t v13 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v14 = v13 >= v68;
  unint64_t v15 = v13 - v68;
  if (v14)
  {
    if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v69)
    {
      *(void *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v68 + v15) = 846;
      *(void *)&uint8_t buf[16] = v15 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::Path,void>::encode((uint64_t *)buf, a2);
  if (*(void *)&buf[8])
  {
    unint64_t v18 = *(void *)&buf[16];
    unint64_t v19 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *((void *)v8 + 8);
    if (v19 + 16 < v17)
    {
LABEL_17:
      if (v18 <= 0x10) {
        unint64_t v18 = 16;
      }
      unint64_t v20 = v19 + v18;
      if (v17 <= v20) {
        unint64_t v20 = 0;
      }
      *((void *)v8 + 10) = v20;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v20) == 0x80000000
        || *((_DWORD *)v8 + 29))
      {
        if (*((unsigned char *)v8 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v8 + 23));
        }
        *((_DWORD *)v8 + 29) = 0;
      }
      goto LABEL_69;
    }
LABEL_93:
    unint64_t v19 = 0;
    goto LABEL_17;
  }
  unint64_t v18 = v70;
  if (!v70)
  {
    __break(1u);
    goto LABEL_93;
  }
  unint64_t v21 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v22 = v21 - v68;
  if (v21 < v68)
  {
    unint64_t v23 = 0;
  }
  else
  {
    unint64_t v23 = 0;
    if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v69)
    {
      *(_WORD *)(v68 + v22) = 2870;
      unint64_t v23 = v22 + 2;
    }
  }
  unint64_t v24 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v25 = *((void *)v8 + 8);
  if (v24 + 16 >= v25) {
    unint64_t v24 = 0;
  }
  if (v23 <= 0x10) {
    unint64_t v23 = 16;
  }
  unint64_t v26 = v24 + v23;
  if (v25 <= v26) {
    unint64_t v26 = 0;
  }
  *((void *)v8 + 10) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v26);
  *((_DWORD *)v8 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v8 + 1);
  unint64_t v27 = v67;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 846;
  *((void *)v28 + 1) = v9;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  *(void *)long long buf = v28;
  IPC::ArgumentCoder<WebCore::Path,void>::encode(v28, a2);
  int v30 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)buf, 1, 0);
  unint64_t v31 = *(IPC::Encoder **)buf;
  *(void *)long long buf = 0;
  if (v31)
  {
    IPC::Encoder::~Encoder(v31, v29);
    WTF::fastFree(v32, v33);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v67);
  if (v30) {
    goto LABEL_64;
  }
LABEL_69:
  if ((v6 & 1) == 0)
  {
    char v53 = 0;
    uint64_t v54 = *(void *)(v7 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v54, (unsigned __int8 *)&v53, 1u, memory_order_acquire, memory_order_acquire);
    if (v53) {
      MEMORY[0x19972E8D0](v54);
    }
    uint64_t v55 = *(void *)(v54 + 8);
    int v56 = 1;
    uint64_t v57 = v55 - 1;
    *(void *)(v54 + 8) = v55 - 1;
    if (v55 == 1)
    {
      uint64_t v63 = *(void *)(v54 + 16);
      uint64_t v58 = *(void *)(v54 + 24);
      *(void *)(v54 + 24) = 0;
      BOOL v59 = v63 != 0;
    }
    else
    {
      uint64_t v58 = 0;
      BOOL v59 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v54, (unsigned __int8 *)&v56, 0, memory_order_release, memory_order_relaxed);
    if (v56 == 1)
    {
      if (!v57)
      {
LABEL_76:
        if (v58) {
          (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
        }
        if (!v59) {
          WTF::fastFree((WTF *)v54, v16);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v54);
      if (!v57) {
        goto LABEL_76;
      }
    }
  }
  this = v66;
  char v66 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v16);
      return (void *)WTF::fastFree(v61, v62);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordDrawFocusRingPath(void *this, const WebCore::Path *a2, float a3, const WebCore::Color *a4)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = this[481];
  if (!v4) {
    return this;
  }
  uint64_t v5 = this;
  this = *(void **)(v4 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v72);
  if (!v72) {
    return this;
  }
  uint64_t v9 = v5[479];
  char v10 = 1;
  if (v9)
  {
    char v70 = 0;
    uint64_t v11 = v5[480];
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v70, 1u, memory_order_acquire, memory_order_acquire);
    if (v70) {
      this = (void *)MEMORY[0x19972E8D0](v9);
    }
    if (*(void *)(v9 + 24)) {
      ++*(void *)(v9 + 8);
    }
    else {
      uint64_t v11 = 0;
    }
    int v71 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v71, 0, memory_order_release, memory_order_relaxed);
    if (v71 == 1)
    {
      if (!v11) {
        goto LABEL_6;
      }
    }
    else
    {
      this = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v9);
      if (!v11) {
        goto LABEL_6;
      }
    }
    if (!*(unsigned char *)(v11 + 4016))
    {
      *(unsigned char *)(v11 + 4016) = 1;
      this = (void *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v11);
      if (this) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 160))(this);
      }
    }
    char v10 = 0;
    goto LABEL_6;
  }
  uint64_t v11 = 0;
LABEL_6:
  double v12 = v72;
  uint64_t v13 = v5[478];
  double v14 = *((double *)v72 + 15);
  double v15 = INFINITY;
  if (fabs(v14) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
    double v15 = v14 + v16;
  }
  if (*((void *)v12 + 7) == v13) {
    goto LABEL_9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v12 + 64, buf, v15);
  if (!buf[16]) {
    goto LABEL_68;
  }
  uint64_t v40 = *(void *)buf;
  unint64_t v41 = *(void *)&buf[8];
  unint64_t v42 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = v42 - *(void *)buf;
  if (v42 < *(void *)buf)
  {
    unint64_t v45 = 0;
    unint64_t v44 = *(void *)&buf[8];
  }
  else
  {
    unint64_t v44 = 0;
    if (v43 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v45 = 0;
    }
    else
    {
      unint64_t v45 = 0;
      if (v43 + 2 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v43) = 2871;
        unint64_t v44 = v41;
        unint64_t v45 = v43 + 2;
      }
    }
  }
  unint64_t v46 = (void *)((v40 + v45 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v46 >= v40 + v45)
  {
    int v47 = (char *)v46 - v40;
    if ((unint64_t)v46 - v40 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_68;
    }
    unint64_t v45 = (unint64_t)(v47 + 8);
    if ((unint64_t)(v47 + 8) > v44) {
      goto LABEL_68;
    }
    *unint64_t v46 = v13;
  }
  if (!v44)
  {
LABEL_68:
    uint64_t v55 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      int v56 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_DrawFocusRingPath";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v56;
      _os_log_impl(&dword_1985F2000, v55, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v57 = v5[481];
    if (v57)
    {
      uint64_t v58 = *(unsigned char **)(v57 + 8);
      if (v58) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v58);
      }
    }
    goto LABEL_73;
  }
  unint64_t v48 = (*((void *)v12 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v49 = *((void *)v12 + 8);
  if (v48 + 16 >= v49) {
    unint64_t v48 = 0;
  }
  if (v45 <= 0x10) {
    unint64_t v45 = 16;
  }
  unint64_t v50 = v48 + v45;
  if (v49 <= v50) {
    unint64_t v51 = 0;
  }
  else {
    unint64_t v51 = v50;
  }
  *((void *)v12 + 10) = v51;
  unint64_t v52 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v12 + 9) + 16) + 128), v51);
  int v53 = *((_DWORD *)v12 + 29);
  if (v52 == 0x80000000 || v53 != 0)
  {
    unsigned int v66 = v53 + 1;
    *((_DWORD *)v12 + 29) = v66;
    if (v66 >= *((_DWORD *)v12 + 28))
    {
      if (*((unsigned char *)v12 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v12 + 23));
      }
      *((_DWORD *)v12 + 29) = 0;
    }
  }
  *((void *)v12 + 7) = v13;
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v12 + 64, &v74, v15);
  if (!v76) {
    goto LABEL_68;
  }
  *(void *)long long buf = v74;
  *(void *)&buf[8] = v75;
  *(void *)&uint8_t buf[16] = 0;
  unint64_t v17 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v18 = v17 >= v74;
  unint64_t v19 = v17 - v74;
  if (v18)
  {
    if (v19 > 0xFFFFFFFFFFFFFFFDLL || v19 + 2 > v75)
    {
      *(void *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v74 + v19) = 839;
      *(void *)&uint8_t buf[16] = v19 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::Path,void>::encode((uint64_t *)buf, a2);
  unint64_t v20 = (float *)((*(void *)buf + *(void *)&buf[16] + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v20 >= *(void *)buf + *(void *)&buf[16])
  {
    unint64_t v21 = (char *)v20 - *(void *)buf;
    if ((unint64_t)v20 - *(void *)buf > 0xFFFFFFFFFFFFFFFBLL
      || (unint64_t)(v21 + 4) > *(void *)&buf[8])
    {
      *(void *)&buf[8] = 0;
    }
    else
    {
      *unint64_t v20 = a3;
      *(void *)&uint8_t buf[16] = v21 + 4;
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::encode((uint64_t *)buf, a4);
  if (*(void *)&buf[8])
  {
    unint64_t v24 = *(void *)&buf[16];
    unint64_t v25 = (*((void *)v12 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v23 = *((void *)v12 + 8);
    if (v25 + 16 < v23)
    {
LABEL_21:
      if (v24 <= 0x10) {
        unint64_t v24 = 16;
      }
      unint64_t v26 = v25 + v24;
      if (v23 <= v26) {
        unint64_t v26 = 0;
      }
      *((void *)v12 + 10) = v26;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v12 + 9) + 16) + 128), v26) == 0x80000000
        || *((_DWORD *)v12 + 29))
      {
        if (*((unsigned char *)v12 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v12 + 23));
        }
        *((_DWORD *)v12 + 29) = 0;
      }
      goto LABEL_73;
    }
LABEL_98:
    unint64_t v25 = 0;
    goto LABEL_21;
  }
  unint64_t v24 = v76;
  if (!v76)
  {
    __break(1u);
    goto LABEL_98;
  }
  unint64_t v27 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v28 = v27 - v74;
  if (v27 < v74)
  {
    unint64_t v29 = 0;
  }
  else
  {
    unint64_t v29 = 0;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v75)
    {
      *(_WORD *)(v74 + v28) = 2870;
      unint64_t v29 = v28 + 2;
    }
  }
  unint64_t v30 = (*((void *)v12 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = *((void *)v12 + 8);
  if (v30 + 16 >= v31) {
    unint64_t v30 = 0;
  }
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v32 = v30 + v29;
  if (v31 <= v32) {
    unint64_t v32 = 0;
  }
  *((void *)v12 + 10) = v32;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v12 + 9) + 16) + 128), v32);
  *((_DWORD *)v12 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)v12 + 1);
  unint64_t v33 = v73;
  uint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v34 = 839;
  *((void *)v34 + 1) = v13;
  *((void *)v34 + 66) = (char *)v34 + 16;
  *((void *)v34 + 67) = 512;
  *((void *)v34 + 68) = 0;
  *((void *)v34 + 70) = 0;
  *((void *)v34 + 69) = 0;
  IPC::Encoder::encodeHeader(v34);
  *(void *)long long buf = v34;
  IPC::ArgumentCoder<WebCore::Path,void>::encode(v34, a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v34, a3);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(v34, a4);
  int v36 = IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)buf, 1, 0);
  unint64_t v37 = *(IPC::Encoder **)buf;
  *(void *)long long buf = 0;
  if (v37)
  {
    IPC::Encoder::~Encoder(v37, v35);
    WTF::fastFree(v38, v39);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
  if (v36) {
    goto LABEL_68;
  }
LABEL_73:
  if ((v10 & 1) == 0)
  {
    char v59 = 0;
    uint64_t v60 = *(void *)(v11 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v60, (unsigned __int8 *)&v59, 1u, memory_order_acquire, memory_order_acquire);
    if (v59) {
      MEMORY[0x19972E8D0](v60);
    }
    uint64_t v61 = *(void *)(v60 + 8);
    int v62 = 1;
    uint64_t v63 = v61 - 1;
    *(void *)(v60 + 8) = v61 - 1;
    if (v61 == 1)
    {
      uint64_t v69 = *(void *)(v60 + 16);
      uint64_t v64 = *(void *)(v60 + 24);
      *(void *)(v60 + 24) = 0;
      BOOL v65 = v69 != 0;
    }
    else
    {
      uint64_t v64 = 0;
      BOOL v65 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v60, (unsigned __int8 *)&v62, 0, memory_order_release, memory_order_relaxed);
    if (v62 == 1)
    {
      if (!v63)
      {
LABEL_80:
        if (v64) {
          (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
        }
        if (!v65) {
          WTF::fastFree((WTF *)v60, v22);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v60);
      if (!v63) {
        goto LABEL_80;
      }
    }
  }
  this = v72;
  uint64_t v72 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v22);
      return (void *)WTF::fastFree(v67, v68);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordDrawFocusRingRects(void *result, uint64_t a2, WebCore::Color *a3, float a4, float a5)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v55 = a2;
  float v56 = a4;
  float v57 = a5;
  uint64_t v58 = a3;
  uint64_t v5 = result[481];
  if (v5)
  {
    char v6 = result;
    __n128 result = *(void **)(v5 + 8);
    if (result)
    {
      __n128 result = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (atomic_uint **)&v60);
      uint64_t v7 = v60;
      if (v60)
      {
        char v8 = (WebKit::RemoteImageBufferProxy *)v6[479];
        if (v8)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v8, v6[480], &v59);
          char v8 = v59;
          if (v59 && !*((unsigned char *)v59 + 4016))
          {
            *((unsigned char *)v59 + 4016) = 1;
            char v8 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v8);
          }
        }
        else
        {
          char v59 = 0;
        }
        uint64_t v9 = v6[478];
        double v10 = *((double *)v7 + 15);
        double v11 = INFINITY;
        if (fabs(v10) != INFINITY)
        {
          WTF::ApproximateTime::now(v8);
          double v11 = v10 + v12;
        }
        if (*((void *)v7 + 7) == v9)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v7 + 64, &v61, v11);
            if (!v63) {
              break;
            }
            *(void *)long long buf = v61;
            *(void *)&buf[8] = v62;
            *(void *)&uint8_t buf[16] = 0;
            unint64_t v13 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
            BOOL v14 = v13 >= v61;
            unint64_t v15 = v13 - v61;
            if (v14)
            {
              if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v62)
              {
                *(void *)&buf[8] = 0;
              }
              else
              {
                *(_WORD *)(v61 + v15) = 840;
                *(void *)&uint8_t buf[16] = v15 + 2;
              }
            }
            IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t *)buf, v55);
            uint64_t v16 = *(void *)buf;
            unint64_t v17 = *(char **)&buf[16];
            BOOL v18 = (float *)((*(void *)buf + *(void *)&buf[16] + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= *(void *)buf + *(void *)&buf[16])
            {
              unint64_t v19 = (char *)v18 - *(void *)buf;
              if ((unint64_t)v18 - *(void *)buf > 0xFFFFFFFFFFFFFFFBLL
                || (unint64_t)(v19 + 4) > *(void *)&buf[8])
              {
                *(void *)&buf[8] = 0;
              }
              else
              {
                float *v18 = v56;
                *(void *)&uint8_t buf[16] = v19 + 4;
                uint64_t v16 = *(void *)buf;
                unint64_t v17 = v19 + 4;
              }
            }
            unint64_t v20 = (float *)((unint64_t)&v17[v16 + 3] & 0xFFFFFFFFFFFFFFFCLL);
            if (v20 >= (float *)&v17[v16])
            {
              unint64_t v21 = (char *)v20 - v16;
              if ((unint64_t)v20 - v16 > 0xFFFFFFFFFFFFFFFBLL
                || (unint64_t)(v21 + 4) > *(void *)&buf[8])
              {
                *(void *)&buf[8] = 0;
              }
              else
              {
                *unint64_t v20 = v57;
                *(void *)&uint8_t buf[16] = v21 + 4;
              }
            }
            IPC::ArgumentCoder<WebCore::Color,void>::encode((uint64_t *)buf, v58);
            if (*(void *)&buf[8])
            {
              uint64_t v24 = *(void *)&buf[16];
              unint64_t v25 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v26 = *((void *)v7 + 8);
              if (v25 + 16 >= v26) {
                unint64_t v25 = 0;
              }
              if (*(void *)&buf[16] <= 0x10uLL) {
                uint64_t v24 = 16;
              }
              unint64_t v27 = v25 + v24;
              if (v26 <= v27) {
                unint64_t v27 = 0;
              }
              *((void *)v7 + 10) = v27;
              if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v27) == 0x80000000
                || *((_DWORD *)v7 + 29))
              {
                if (*((unsigned char *)v7 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v7 + 23));
                }
                *((_DWORD *)v7 + 29) = 0;
              }
              goto LABEL_32;
            }
            uint64_t v36 = v63;
            if (v63)
            {
              IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v7, v61, v62);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v7 + 1);
              int v37 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawFocusRingRects>(*(uint64_t *)buf, (uint64_t)&v55, v9);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
              if (!v37) {
                goto LABEL_32;
              }
              break;
            }
            __break(1u);
LABEL_82:
            unint64_t v41 = v23;
LABEL_59:
            unint64_t v42 = (void *)((v36 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v42 >= v36 + v41)
            {
              unint64_t v43 = (char *)v42 - v36;
              if ((unint64_t)v42 - v36 > 0xFFFFFFFFFFFFFFF7) {
                break;
              }
              unint64_t v41 = (unint64_t)(v43 + 8);
              if ((unint64_t)(v43 + 8) > v23) {
                break;
              }
              void *v42 = v9;
            }
            if (!v23) {
              break;
            }
            unint64_t v44 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v45 = *((void *)v7 + 8);
            if (v44 + 16 >= v45) {
              unint64_t v44 = 0;
            }
            if (v41 <= 0x10) {
              unint64_t v41 = 16;
            }
            unint64_t v46 = v44 + v41;
            if (v45 <= v46) {
              unint64_t v47 = 0;
            }
            else {
              unint64_t v47 = v46;
            }
            *((void *)v7 + 10) = v47;
            IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v7, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v47) == 0x80000000);
            *((void *)v7 + 7) = v9;
          }
        }
        else
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v7 + 64, buf, v11);
          if (buf[16])
          {
            uint64_t v36 = *(void *)buf;
            unint64_t v38 = *(void *)&buf[8];
            unint64_t v39 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v40 = v39 - *(void *)buf;
            if (v39 < *(void *)buf)
            {
              unint64_t v41 = 0;
              unint64_t v23 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v23 = 0;
              if (v40 > 0xFFFFFFFFFFFFFFFDLL) {
                goto LABEL_82;
              }
              unint64_t v41 = 0;
              if (v40 + 2 <= *(void *)&buf[8])
              {
                *(_WORD *)(*(void *)buf + v40) = 2871;
                unint64_t v23 = v38;
                unint64_t v41 = v40 + 2;
              }
            }
            goto LABEL_59;
          }
        }
        unint64_t v48 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v49 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_DrawFocusRingRects";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v49;
          _os_log_impl(&dword_1985F2000, v48, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v50 = v6[481];
        if (v50)
        {
          unint64_t v51 = *(unsigned char **)(v50 + 8);
          if (v51) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v51);
          }
        }
LABEL_32:
        unint64_t v28 = v59;
        char v59 = 0;
        if (v28)
        {
          char v29 = 0;
          uint64_t v30 = *((void *)v28 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v30, (unsigned __int8 *)&v29, 1u, memory_order_acquire, memory_order_acquire);
          if (v29) {
            MEMORY[0x19972E8D0](v30);
          }
          uint64_t v31 = *(void *)(v30 + 8);
          int v32 = 1;
          uint64_t v33 = v31 - 1;
          *(void *)(v30 + 8) = v31 - 1;
          if (v31 == 1)
          {
            uint64_t v54 = *(void *)(v30 + 16);
            uint64_t v34 = *(void *)(v30 + 24);
            *(void *)(v30 + 24) = 0;
            BOOL v35 = v54 != 0;
          }
          else
          {
            uint64_t v34 = 0;
            BOOL v35 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v30, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
          if (v32 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v30);
          }
          if (!v33)
          {
            if (v34) {
              (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
            }
            if (!v35) {
              WTF::fastFree((WTF *)v30, v22);
            }
          }
        }
        __n128 result = v60;
        uint64_t v60 = 0;
        if (result)
        {
          if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)result);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result, v22);
            return (void *)WTF::fastFree(v52, v53);
          }
        }
      }
    }
  }
  return result;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordFillRect(void *result, _DWORD *a2, char a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  char v54 = a3;
  unint64_t v52 = a2;
  int v53 = &v54;
  uint64_t v3 = result[481];
  if (v3)
  {
    uint64_t v4 = result;
    __n128 result = *(void **)(v3 + 8);
    if (result)
    {
      __n128 result = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (atomic_uint **)&v56);
      uint64_t v5 = v56;
      if (v56)
      {
        char v6 = (WTF::ApproximateTime *)v4[479];
        if (v6) {
          goto LABEL_82;
        }
        uint64_t v55 = 0;
        while (1)
        {
          uint64_t v7 = v4[478];
          double v8 = *((double *)v5 + 15);
          double v9 = INFINITY;
          if (fabs(v8) != INFINITY)
          {
            WTF::ApproximateTime::now(v6);
            double v9 = v8 + v10;
          }
          if (*((void *)v5 + 7) != v7)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
            if (!buf[16]) {
              goto LABEL_73;
            }
            uint64_t v28 = *(void *)buf;
            unint64_t v29 = *(void *)&buf[8];
            unint64_t v30 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v31 = v30 - *(void *)buf;
            if (v30 < *(void *)buf)
            {
              unint64_t v33 = 0;
              unint64_t v32 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v32 = 0;
              if (v31 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v33 = 0;
              }
              else
              {
                unint64_t v33 = 0;
                if (v31 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v31) = 2871;
                  unint64_t v32 = v29;
                  unint64_t v33 = v31 + 2;
                }
              }
            }
            uint64_t v34 = (void *)((v28 + v33 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v34 >= v28 + v33)
            {
              BOOL v35 = (char *)v34 - v28;
              if ((unint64_t)v34 - v28 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_73;
              }
              unint64_t v33 = (unint64_t)(v35 + 8);
              if ((unint64_t)(v35 + 8) > v32) {
                goto LABEL_73;
              }
              void *v34 = v7;
            }
            if (!v32) {
              goto LABEL_73;
            }
            unint64_t v36 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v37 = *((void *)v5 + 8);
            if (v36 + 16 >= v37) {
              unint64_t v36 = 0;
            }
            if (v33 <= 0x10) {
              unint64_t v33 = 16;
            }
            unint64_t v38 = v36 + v33;
            if (v37 <= v38) {
              unint64_t v39 = 0;
            }
            else {
              unint64_t v39 = v38;
            }
            *((void *)v5 + 10) = v39;
            unint64_t v40 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v39);
            int v41 = *((_DWORD *)v5 + 29);
            if (v40 == 0x80000000 || v41 != 0)
            {
              unsigned int v43 = v41 + 1;
              *((_DWORD *)v5 + 29) = v43;
              if (v43 >= *((_DWORD *)v5 + 28))
              {
                if (*((unsigned char *)v5 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
                }
                *((_DWORD *)v5 + 29) = 0;
              }
            }
            *((void *)v5 + 7) = v7;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, &v57, v9);
          if (!v59) {
            goto LABEL_73;
          }
          *(void *)long long buf = v57;
          *(void *)&buf[8] = v58;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v11 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v12 = v11 >= v57;
          unint64_t v13 = v11 - v57;
          if (v12)
          {
            if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v58)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v57 + v13) = 861;
              *(void *)&uint8_t buf[16] = v13 + 2;
            }
          }
          char v6 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v52);
          uint64_t v15 = *(void *)&buf[16];
          if (*(void *)&buf[16] < *(void *)&buf[8])
          {
            unint64_t v16 = *(void *)&buf[16] + 1;
            *(unsigned char *)(*(void *)buf + *(void *)&buf[16]) = *v53;
            *(void *)&uint8_t buf[16] = v15 + 1;
            unint64_t v17 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v18 = *((void *)v5 + 8);
            if (v17 + 16 >= v18) {
              unint64_t v17 = 0;
            }
            if (v16 <= 0x10) {
              unint64_t v16 = 16;
            }
            unint64_t v19 = v17 + v16;
            if (v18 <= v19) {
              unint64_t v19 = 0;
            }
            *((void *)v5 + 10) = v19;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v19) == 0x80000000
              || *((_DWORD *)v5 + 29))
            {
              if (*((unsigned char *)v5 + 104)) {
                MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
              }
              *((_DWORD *)v5 + 29) = 0;
            }
            goto LABEL_24;
          }
          if (v59) {
            break;
          }
          __break(1u);
LABEL_82:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6, v4[480], &v55);
          char v6 = v55;
          if (v55 && !*((unsigned char *)v55 + 4016))
          {
            *((unsigned char *)v55 + 4016) = 1;
            char v6 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v6);
          }
        }
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, v57, v58);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v5 + 1);
        int v47 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillRect>(*(uint64_t *)buf, (uint64_t)&v52, v7);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        if (!v47) {
          goto LABEL_24;
        }
LABEL_73:
        unint64_t v48 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v49 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_FillRect";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v49;
          _os_log_impl(&dword_1985F2000, v48, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v50 = v4[481];
        if (v50)
        {
          unint64_t v51 = *(unsigned char **)(v50 + 8);
          if (v51) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v51);
          }
        }
LABEL_24:
        unint64_t v20 = v55;
        uint64_t v55 = 0;
        if (v20)
        {
          char v21 = 0;
          uint64_t v22 = *((void *)v20 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v22, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
          if (v21) {
            MEMORY[0x19972E8D0](v22);
          }
          uint64_t v23 = *(void *)(v22 + 8);
          int v24 = 1;
          uint64_t v25 = v23 - 1;
          *(void *)(v22 + 8) = v23 - 1;
          if (v23 == 1)
          {
            uint64_t v46 = *(void *)(v22 + 16);
            uint64_t v26 = *(void *)(v22 + 24);
            *(void *)(v22 + 24) = 0;
            BOOL v27 = v46 != 0;
          }
          else
          {
            uint64_t v26 = 0;
            BOOL v27 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v22, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
          if (v24 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v22);
          }
          if (!v25)
          {
            if (v26) {
              (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
            }
            if (!v27) {
              WTF::fastFree((WTF *)v22, v14);
            }
          }
        }
        __n128 result = v56;
        float v56 = 0;
        if (result)
        {
          if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)result);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result, v14);
            return (void *)WTF::fastFree(v44, v45);
          }
        }
      }
    }
  }
  return result;
}

uint64_t *WebKit::RemoteDisplayListRecorderProxy::recordFillRectWithGradient(void *a1)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  WebCore::DisplayList::FillRectWithGradient::FillRectWithGradient();
  char v54 = (float *)&v52;
  uint64_t v3 = a1[481];
  if (v3)
  {
    uint64_t v4 = *(WebKit::RemoteRenderingBackendProxy **)(v3 + 8);
    if (v4)
    {
      WebKit::RemoteRenderingBackendProxy::connection(v4, (atomic_uint **)&v56);
      uint64_t v5 = v56;
      if (v56)
      {
        char v6 = (WTF::ApproximateTime *)a1[479];
        if (v6) {
          goto LABEL_82;
        }
        uint64_t v55 = 0;
        while (1)
        {
          uint64_t v7 = a1[478];
          double v8 = *((double *)v5 + 15);
          double v9 = INFINITY;
          if (fabs(v8) != INFINITY)
          {
            WTF::ApproximateTime::now(v6);
            double v9 = v8 + v10;
          }
          if (*((void *)v5 + 7) != v7)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
            if (!buf[16]) {
              goto LABEL_75;
            }
            uint64_t v28 = *(void *)buf;
            unint64_t v29 = *(void *)&buf[8];
            unint64_t v30 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v31 = v30 - *(void *)buf;
            if (v30 < *(void *)buf)
            {
              unint64_t v33 = 0;
              unint64_t v32 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v32 = 0;
              if (v31 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v33 = 0;
              }
              else
              {
                unint64_t v33 = 0;
                if (v31 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v31) = 2871;
                  unint64_t v32 = v29;
                  unint64_t v33 = v31 + 2;
                }
              }
            }
            uint64_t v34 = (void *)((v28 + v33 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v34 >= v28 + v33)
            {
              BOOL v35 = (char *)v34 - v28;
              if ((unint64_t)v34 - v28 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_75;
              }
              unint64_t v33 = (unint64_t)(v35 + 8);
              if ((unint64_t)(v35 + 8) > v32) {
                goto LABEL_75;
              }
              void *v34 = v7;
            }
            if (!v32) {
              goto LABEL_75;
            }
            unint64_t v36 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v37 = *((void *)v5 + 8);
            if (v36 + 16 >= v37) {
              unint64_t v36 = 0;
            }
            if (v33 <= 0x10) {
              unint64_t v33 = 16;
            }
            unint64_t v38 = v36 + v33;
            if (v37 <= v38) {
              unint64_t v39 = 0;
            }
            else {
              unint64_t v39 = v38;
            }
            *((void *)v5 + 10) = v39;
            unint64_t v40 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v39);
            int v41 = *((_DWORD *)v5 + 29);
            if (v40 == 0x80000000 || v41 != 0)
            {
              unsigned int v43 = v41 + 1;
              *((_DWORD *)v5 + 29) = v43;
              if (v43 >= *((_DWORD *)v5 + 28))
              {
                if (*((unsigned char *)v5 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
                }
                *((_DWORD *)v5 + 29) = 0;
              }
            }
            *((void *)v5 + 7) = v7;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, &v57, v9);
          if (!v59) {
            goto LABEL_75;
          }
          *(void *)long long buf = v57;
          *(void *)&buf[8] = v58;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v11 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v12 = v11 >= v57;
          unint64_t v13 = v11 - v57;
          if (v12)
          {
            if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v58)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v57 + v13) = 863;
              *(void *)&uint8_t buf[16] = v13 + 2;
            }
          }
          char v6 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithGradient,void>::encode((uint64_t *)buf, (uint64_t)v54);
          if (*(void *)&buf[8])
          {
            uint64_t v14 = *(void *)&buf[16];
            unint64_t v15 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v16 = *((void *)v5 + 8);
            if (v15 + 16 >= v16) {
              unint64_t v15 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v14 = 16;
            }
            unint64_t v17 = v15 + v14;
            if (v16 <= v17) {
              unint64_t v17 = 0;
            }
            *((void *)v5 + 10) = v17;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v17) == 0x80000000
              || *((_DWORD *)v5 + 29))
            {
              if (*((unsigned char *)v5 + 104)) {
                MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
              }
              *((_DWORD *)v5 + 29) = 0;
            }
            goto LABEL_24;
          }
          if (v59) {
            break;
          }
          __break(1u);
LABEL_82:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6, a1[480], &v55);
          char v6 = v55;
          if (v55 && !*((unsigned char *)v55 + 4016))
          {
            *((unsigned char *)v55 + 4016) = 1;
            char v6 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v6);
          }
        }
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, v57, v58);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v5 + 1);
        int v47 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillRectWithGradient>(*(uint64_t *)buf, &v54, v7);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        if (!v47) {
          goto LABEL_24;
        }
LABEL_75:
        unint64_t v48 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v49 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_FillRectWithGradient";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v49;
          _os_log_impl(&dword_1985F2000, v48, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v50 = a1[481];
        if (v50)
        {
          unint64_t v51 = *(unsigned char **)(v50 + 8);
          if (v51) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v51);
          }
        }
LABEL_24:
        unint64_t v18 = v55;
        uint64_t v55 = 0;
        if (v18)
        {
          char v19 = 0;
          uint64_t v20 = *((void *)v18 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
          if (v19) {
            MEMORY[0x19972E8D0](v20);
          }
          uint64_t v21 = *(void *)(v20 + 8);
          int v22 = 1;
          uint64_t v23 = v21 - 1;
          *(void *)(v20 + 8) = v21 - 1;
          if (v21 == 1)
          {
            uint64_t v46 = *(void *)(v20 + 16);
            uint64_t v24 = *(void *)(v20 + 24);
            *(void *)(v20 + 24) = 0;
            BOOL v25 = v46 != 0;
          }
          else
          {
            uint64_t v24 = 0;
            BOOL v25 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
          if (v22 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v20);
          }
          if (!v23)
          {
            if (v24) {
              (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
            }
            if (!v25) {
              WTF::fastFree((WTF *)v20, v2);
            }
          }
        }
        uint64_t v26 = (unsigned int *)v56;
        float v56 = 0;
        if (v26 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v26);
          IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v26, v2);
          WTF::fastFree(v44, v45);
        }
      }
    }
  }
  return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v53, v2);
}

uint64_t *WebKit::RemoteDisplayListRecorderProxy::recordFillRectWithGradientAndSpaceTransform(void *a1)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  WebCore::DisplayList::FillRectWithGradientAndSpaceTransform::FillRectWithGradientAndSpaceTransform();
  uint64_t v3 = a1[481];
  if (!v3) {
    return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(v69, v2);
  }
  uint64_t v4 = *(WebKit::RemoteRenderingBackendProxy **)(v3 + 8);
  if (!v4) {
    return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(v69, v2);
  }
  uint64_t v5 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(v4, (atomic_uint **)&v70);
  if (!v70) {
    return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(v69, v2);
  }
  uint64_t v6 = a1[479];
  char v7 = 1;
  if (v6)
  {
    char v66 = 0;
    uint64_t v8 = a1[480];
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v66, 1u, memory_order_acquire, memory_order_acquire);
    if (v66) {
      uint64_t v5 = (WTF::ApproximateTime *)MEMORY[0x19972E8D0](v6);
    }
    if (*(void *)(v6 + 24)) {
      ++*(void *)(v6 + 8);
    }
    else {
      uint64_t v8 = 0;
    }
    int v67 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v67, 0, memory_order_release, memory_order_relaxed);
    if (v67 == 1)
    {
      if (!v8) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v5 = (WTF::ApproximateTime *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
      if (!v8) {
        goto LABEL_6;
      }
    }
    if (!*(unsigned char *)(v8 + 4016))
    {
      *(unsigned char *)(v8 + 4016) = 1;
      uint64_t v5 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v8);
      if (v5) {
        uint64_t v5 = (WTF::ApproximateTime *)(*(uint64_t (**)(WTF::ApproximateTime *))(*(void *)v5 + 160))(v5);
      }
    }
    char v7 = 0;
    goto LABEL_6;
  }
  uint64_t v8 = 0;
LABEL_6:
  double v9 = v70;
  uint64_t v10 = a1[478];
  double v11 = *((double *)v70 + 15);
  double v12 = INFINITY;
  if (fabs(v11) != INFINITY)
  {
    WTF::ApproximateTime::now(v5);
    double v12 = v11 + v13;
  }
  if (*((void *)v9 + 7) == v10) {
    goto LABEL_9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v9 + 64, buf, v12);
  if (!buf[16]) {
    goto LABEL_64;
  }
  uint64_t v34 = *(void *)buf;
  unint64_t v35 = *(void *)&buf[8];
  unint64_t v36 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - *(void *)buf;
  if (v36 < *(void *)buf)
  {
    unint64_t v39 = 0;
    unint64_t v38 = *(void *)&buf[8];
  }
  else
  {
    unint64_t v38 = 0;
    if (v37 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v39 = 0;
    }
    else
    {
      unint64_t v39 = 0;
      if (v37 + 2 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v37) = 2871;
        unint64_t v38 = v35;
        unint64_t v39 = v37 + 2;
      }
    }
  }
  unint64_t v40 = (void *)((v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v40 >= v34 + v39)
  {
    int v41 = (char *)v40 - v34;
    if ((unint64_t)v40 - v34 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_64;
    }
    unint64_t v39 = (unint64_t)(v41 + 8);
    if ((unint64_t)(v41 + 8) > v38) {
      goto LABEL_64;
    }
    *unint64_t v40 = v10;
  }
  if (!v38)
  {
LABEL_64:
    unint64_t v49 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v50 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_FillRectWithGradientAndSpaceTransform";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v50;
      _os_log_impl(&dword_1985F2000, v49, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v51 = a1[481];
    if (v51)
    {
      char v52 = *(unsigned char **)(v51 + 8);
      if (v52) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v52);
      }
    }
    goto LABEL_69;
  }
  unint64_t v42 = (*((void *)v9 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *((void *)v9 + 8);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v39 <= 0x10) {
    unint64_t v39 = 16;
  }
  unint64_t v44 = v42 + v39;
  if (v43 <= v44) {
    unint64_t v45 = 0;
  }
  else {
    unint64_t v45 = v44;
  }
  *((void *)v9 + 10) = v45;
  unint64_t v46 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v9 + 9) + 16) + 128), v45);
  int v47 = *((_DWORD *)v9 + 29);
  if (v46 == 0x80000000 || v47 != 0)
  {
    unsigned int v62 = v47 + 1;
    *((_DWORD *)v9 + 29) = v62;
    if (v62 >= *((_DWORD *)v9 + 28))
    {
      if (*((unsigned char *)v9 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v9 + 23));
      }
      *((_DWORD *)v9 + 29) = 0;
    }
  }
  *((void *)v9 + 7) = v10;
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v9 + 64, &v72, v12);
  if (!v74) {
    goto LABEL_64;
  }
  *(void *)long long buf = v72;
  *(void *)&buf[8] = v73;
  *(void *)&uint8_t buf[16] = 0;
  unint64_t v14 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v15 = v14 >= v72;
  unint64_t v16 = v14 - v72;
  if (v15)
  {
    if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v73)
    {
      *(void *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v72 + v16) = 864;
      *(void *)&uint8_t buf[16] = v16 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,void>::encode((uint64_t *)buf, (uint64_t)v68);
  if (*(void *)&buf[8])
  {
    unint64_t v18 = *(void *)&buf[16];
    unint64_t v19 = (*((void *)v9 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *((void *)v9 + 8);
    if (v19 + 16 < v17)
    {
LABEL_17:
      if (v18 <= 0x10) {
        unint64_t v18 = 16;
      }
      unint64_t v20 = v19 + v18;
      if (v17 <= v20) {
        unint64_t v20 = 0;
      }
      *((void *)v9 + 10) = v20;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v9 + 9) + 16) + 128), v20) == 0x80000000
        || *((_DWORD *)v9 + 29))
      {
        if (*((unsigned char *)v9 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v9 + 23));
        }
        *((_DWORD *)v9 + 29) = 0;
      }
      goto LABEL_69;
    }
LABEL_93:
    unint64_t v19 = 0;
    goto LABEL_17;
  }
  unint64_t v18 = v74;
  if (!v74)
  {
    __break(1u);
    goto LABEL_93;
  }
  unint64_t v21 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v22 = v21 - v72;
  if (v21 < v72)
  {
    unint64_t v23 = 0;
  }
  else
  {
    unint64_t v23 = 0;
    if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v73)
    {
      *(_WORD *)(v72 + v22) = 2870;
      unint64_t v23 = v22 + 2;
    }
  }
  unint64_t v24 = (*((void *)v9 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v25 = *((void *)v9 + 8);
  if (v24 + 16 >= v25) {
    unint64_t v24 = 0;
  }
  if (v23 <= 0x10) {
    unint64_t v23 = 16;
  }
  unint64_t v26 = v24 + v23;
  if (v25 <= v26) {
    unint64_t v26 = 0;
  }
  *((void *)v9 + 10) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v9 + 9) + 16) + 128), v26);
  *((_DWORD *)v9 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v71, (uint64_t **)v9 + 1);
  BOOL v27 = v71;
  uint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v28 = 864;
  *((void *)v28 + 1) = v10;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  *(void *)long long buf = v28;
  IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,void>::encode(v28, (uint64_t)v68);
  int v30 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)buf, 1, 0);
  unint64_t v31 = *(IPC::Encoder **)buf;
  *(void *)long long buf = 0;
  if (v31)
  {
    IPC::Encoder::~Encoder(v31, v29);
    WTF::fastFree(v32, v33);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
  if (v30) {
    goto LABEL_64;
  }
LABEL_69:
  if ((v7 & 1) == 0)
  {
    char v53 = 0;
    uint64_t v54 = *(void *)(v8 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v54, (unsigned __int8 *)&v53, 1u, memory_order_acquire, memory_order_acquire);
    if (v53) {
      MEMORY[0x19972E8D0](v54);
    }
    uint64_t v55 = *(void *)(v54 + 8);
    int v56 = 1;
    uint64_t v57 = v55 - 1;
    *(void *)(v54 + 8) = v55 - 1;
    if (v55 == 1)
    {
      uint64_t v65 = *(void *)(v54 + 16);
      uint64_t v58 = *(void *)(v54 + 24);
      *(void *)(v54 + 24) = 0;
      BOOL v59 = v65 != 0;
    }
    else
    {
      uint64_t v58 = 0;
      BOOL v59 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v54, (unsigned __int8 *)&v56, 0, memory_order_release, memory_order_relaxed);
    if (v56 == 1)
    {
      if (!v57)
      {
LABEL_76:
        if (v58) {
          (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
        }
        if (!v59) {
          WTF::fastFree((WTF *)v54, v2);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v54);
      if (!v57) {
        goto LABEL_76;
      }
    }
  }
  uint64_t v60 = (unsigned int *)v70;
  char v70 = 0;
  if (v60 && atomic_fetch_add((atomic_uint *volatile)v60, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v60);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v60, v2);
    WTF::fastFree(v63, v64);
  }
  return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(v69, v2);
}

void *WebKit::RemoteDisplayListRecorderProxy::recordFillRoundedRect(void *result, float *a2, WebCore::Color *a3, char a4)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = result[481];
  if (!v4) {
    return result;
  }
  uint64_t v5 = result;
  __n128 result = *(void **)(v4 + 8);
  if (!result) {
    return result;
  }
  __n128 result = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (atomic_uint **)&v72);
  double v9 = v72;
  if (!v72) {
    return result;
  }
  uint64_t v10 = (WTF::ApproximateTime *)v5[479];
  if (v10) {
    goto LABEL_100;
  }
  int v71 = 0;
  while (1)
  {
    uint64_t v11 = v5[478];
    double v12 = *((double *)v9 + 15);
    double v13 = INFINITY;
    if (fabs(v12) != INFINITY)
    {
      WTF::ApproximateTime::now(v10);
      double v13 = v12 + v14;
    }
    if (*((void *)v9 + 7) == v11) {
      goto LABEL_9;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v9 + 64, buf, v13);
    if (!buf[16]) {
      goto LABEL_92;
    }
    uint64_t v32 = *(void *)buf;
    unint64_t v33 = *(void *)&buf[8];
    unint64_t v34 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = v34 - *(void *)buf;
    BOOL v36 = v34 >= *(void *)buf;
    unint64_t v37 = v34 - *(void *)buf + 2;
    BOOL v39 = v35 < 0xFFFFFFFFFFFFFFFELL && v37 <= *(void *)&buf[8];
    if (v36 && v39) {
      goto LABEL_53;
    }
    if (!v36)
    {
      unint64_t v37 = 0;
      goto LABEL_54;
    }
    unint64_t v40 = 0;
    if (v35 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v37 = 0;
      goto LABEL_55;
    }
    unint64_t v37 = 0;
    if (v35 + 2 <= *(void *)&buf[8])
    {
      unint64_t v37 = v35 + 2;
LABEL_53:
      *(_WORD *)(*(void *)buf + v35) = 2871;
LABEL_54:
      unint64_t v40 = v33;
    }
LABEL_55:
    int v41 = (void *)((v32 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v41 >= v32 + v37)
    {
      unint64_t v42 = (char *)v41 - v32;
      if ((unint64_t)v41 - v32 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_92;
      }
      unint64_t v37 = (unint64_t)(v42 + 8);
      if ((unint64_t)(v42 + 8) > v40) {
        goto LABEL_92;
      }
      void *v41 = v11;
    }
    if (!v40) {
      goto LABEL_92;
    }
    unint64_t v43 = (*((void *)v9 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v44 = *((void *)v9 + 8);
    if (v43 + 16 >= v44) {
      unint64_t v43 = 0;
    }
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v45 = v43 + v37;
    if (v44 <= v45) {
      unint64_t v46 = 0;
    }
    else {
      unint64_t v46 = v45;
    }
    *((void *)v9 + 10) = v46;
    unint64_t v47 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v9 + 9) + 16) + 128), v46);
    int v48 = *((_DWORD *)v9 + 29);
    if (v47 == 0x80000000 || v48 != 0)
    {
      unsigned int v50 = v48 + 1;
      *((_DWORD *)v9 + 29) = v50;
      if (v50 >= *((_DWORD *)v9 + 28))
      {
        if (*((unsigned char *)v9 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v9 + 23));
        }
        *((_DWORD *)v9 + 29) = 0;
      }
    }
    *((void *)v9 + 7) = v11;
LABEL_9:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v9 + 64, &v74, v13);
    if (!v76) {
      goto LABEL_92;
    }
    *(void *)long long buf = v74;
    *(void *)&buf[8] = v75;
    *(void *)&uint8_t buf[16] = 0;
    unint64_t v15 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
    BOOL v16 = v15 >= v74;
    unint64_t v17 = v15 - v74;
    if (v16)
    {
      if (v17 > 0xFFFFFFFFFFFFFFFDLL || v17 + 2 > v75)
      {
        *(void *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v74 + v17) = 866;
        *(void *)&uint8_t buf[16] = v17 + 2;
      }
    }
    IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode((uint64_t *)buf, a2);
    uint64_t v10 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::Color,void>::encode((uint64_t *)buf, a3);
    uint64_t v19 = *(void *)&buf[16];
    if (*(void *)&buf[16] < *(void *)&buf[8])
    {
      unint64_t v20 = *(void *)&buf[16] + 1;
      *(unsigned char *)(*(void *)buf + *(void *)&buf[16]) = a4;
      *(void *)&uint8_t buf[16] = v19 + 1;
      if (*(void *)&buf[8])
      {
        unint64_t v21 = (*((void *)v9 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v22 = *((void *)v9 + 8);
        if (v21 + 16 >= v22) {
          unint64_t v21 = 0;
        }
        if (v20 <= 0x10) {
          unint64_t v20 = 16;
        }
        unint64_t v23 = v21 + v20;
        if (v22 <= v23) {
          unint64_t v23 = 0;
        }
        *((void *)v9 + 10) = v23;
        if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v9 + 9) + 16) + 128), v23) == 0x80000000
          || *((_DWORD *)v9 + 29))
        {
          if (*((unsigned char *)v9 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v9 + 23));
          }
          *((_DWORD *)v9 + 29) = 0;
        }
        goto LABEL_25;
      }
    }
    if (v76) {
      break;
    }
    __break(1u);
LABEL_100:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v10, v5[480], &v71);
    uint64_t v10 = v71;
    if (v71 && !*((unsigned char *)v71 + 4016))
    {
      *((unsigned char *)v71 + 4016) = 1;
      uint64_t v10 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v10);
    }
  }
  unint64_t v54 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v55 = v54 - v74;
  if (v54 < v74)
  {
    unint64_t v56 = 0;
  }
  else
  {
    unint64_t v56 = 0;
    if (v55 <= 0xFFFFFFFFFFFFFFFDLL && v55 + 2 <= v75)
    {
      *(_WORD *)(v74 + v55) = 2870;
      unint64_t v56 = v55 + 2;
    }
  }
  unint64_t v57 = (*((void *)v9 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v58 = *((void *)v9 + 8);
  if (v57 + 16 >= v58) {
    unint64_t v57 = 0;
  }
  if (v56 <= 0x10) {
    unint64_t v56 = 16;
  }
  unint64_t v59 = v57 + v56;
  if (v58 <= v59) {
    unint64_t v59 = 0;
  }
  *((void *)v9 + 10) = v59;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v9 + 9) + 16) + 128), v59);
  *((_DWORD *)v9 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)v9 + 1);
  uint64_t v60 = v73;
  uint64_t v61 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v61 = 866;
  *((void *)v61 + 1) = v11;
  *((void *)v61 + 66) = (char *)v61 + 16;
  *((void *)v61 + 67) = 512;
  *((void *)v61 + 68) = 0;
  *((void *)v61 + 70) = 0;
  *((void *)v61 + 69) = 0;
  IPC::Encoder::encodeHeader(v61);
  *(void *)long long buf = v61;
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(v61, a2);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(v61, a3);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v61, a4);
  int v63 = IPC::Connection::sendMessageImpl((uint64_t)v60, (uint64_t *)buf, 1, 0);
  uint64_t v64 = *(IPC::Encoder **)buf;
  *(void *)long long buf = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v62);
    WTF::fastFree(v69, v70);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
  if (v63)
  {
LABEL_92:
    uint64_t v65 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      char v66 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_FillRoundedRect";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v66;
      _os_log_impl(&dword_1985F2000, v65, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v67 = v5[481];
    if (v67)
    {
      unint64_t v68 = *(unsigned char **)(v67 + 8);
      if (v68) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v68);
      }
    }
  }
LABEL_25:
  unint64_t v24 = v71;
  int v71 = 0;
  if (v24)
  {
    char v25 = 0;
    uint64_t v26 = *((void *)v24 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v26, (unsigned __int8 *)&v25, 1u, memory_order_acquire, memory_order_acquire);
    if (v25) {
      MEMORY[0x19972E8D0](v26);
    }
    uint64_t v27 = *(void *)(v26 + 8);
    int v28 = 1;
    uint64_t v29 = v27 - 1;
    *(void *)(v26 + 8) = v27 - 1;
    if (v27 == 1)
    {
      uint64_t v53 = *(void *)(v26 + 16);
      uint64_t v30 = *(void *)(v26 + 24);
      *(void *)(v26 + 24) = 0;
      BOOL v31 = v53 != 0;
    }
    else
    {
      uint64_t v30 = 0;
      BOOL v31 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v26, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
    if (v28 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v26);
    }
    if (!v29)
    {
      if (v30) {
        (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
      }
      if (!v31) {
        WTF::fastFree((WTF *)v26, v18);
      }
    }
  }
  __n128 result = v72;
  unint64_t v72 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result, v18);
      return (void *)WTF::fastFree(v51, v52);
    }
  }
  return result;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordFillRectWithRoundedHole(void *this, const WebCore::FloatRect *a2, const WebCore::FloatRoundedRect *a3, const WebCore::Color *a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  int v48 = a2;
  unint64_t v49 = a3;
  unsigned int v50 = a4;
  uint64_t v4 = this[481];
  if (!v4) {
    return this;
  }
  uint64_t v5 = this;
  this = *(void **)(v4 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v52);
  uint64_t v6 = v52;
  if (!v52) {
    return this;
  }
  char v7 = (WebKit::RemoteImageBufferProxy *)v5[479];
  if (v7)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v7, v5[480], &v51);
    char v7 = v51;
    if (v51 && !*((unsigned char *)v51 + 4016))
    {
      *((unsigned char *)v51 + 4016) = 1;
      char v7 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v7);
    }
  }
  else
  {
    uint64_t v51 = 0;
  }
  uint64_t v8 = v5[478];
  double v9 = *((double *)v6 + 15);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(v7);
    double v10 = v9 + v11;
  }
  if (*((void *)v6 + 7) != v8)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, buf, v10);
    if (!buf[16]) {
      goto LABEL_61;
    }
    uint64_t v28 = *(void *)buf;
    unint64_t v29 = *(void *)&buf[8];
    unint64_t v30 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v31 = v30 - *(void *)buf;
    if (v30 < *(void *)buf)
    {
      unint64_t v33 = 0;
      unint64_t v32 = *(void *)&buf[8];
    }
    else
    {
      unint64_t v32 = 0;
      if (v31 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v33 = 0;
      }
      else
      {
        unint64_t v33 = 0;
        if (v31 + 2 <= *(void *)&buf[8])
        {
          *(_WORD *)(*(void *)buf + v31) = 2871;
          unint64_t v32 = v29;
          unint64_t v33 = v31 + 2;
        }
      }
    }
    unint64_t v34 = (void *)((v28 + v33 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v34 >= v28 + v33)
    {
      unint64_t v35 = (char *)v34 - v28;
      if ((unint64_t)v34 - v28 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_61;
      }
      unint64_t v33 = (unint64_t)(v35 + 8);
      if ((unint64_t)(v35 + 8) > v32) {
        goto LABEL_61;
      }
      void *v34 = v8;
    }
    if (!v32)
    {
LABEL_61:
      unint64_t v40 = off_1EB3583E8;
      if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
      {
        int v41 = IPC::errorAsString();
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_FillRectWithRoundedHole";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v41;
        _os_log_impl(&dword_1985F2000, v40, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
      }
      uint64_t v42 = v5[481];
      if (v42)
      {
        unint64_t v43 = *(unsigned char **)(v42 + 8);
        if (v43) {
          WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v43);
        }
      }
      goto LABEL_24;
    }
    unint64_t v36 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v37 = *((void *)v6 + 8);
    if (v36 + 16 >= v37) {
      unint64_t v36 = 0;
    }
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v38 = v36 + v33;
    if (v37 <= v38) {
      unint64_t v39 = 0;
    }
    else {
      unint64_t v39 = v38;
    }
    *((void *)v6 + 10) = v39;
    IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v39) == 0x80000000);
    *((void *)v6 + 7) = v8;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v53, v10);
  if (!v55) {
    goto LABEL_61;
  }
  *(void *)long long buf = v53;
  *(void *)&buf[8] = v54;
  *(void *)&uint8_t buf[16] = 0;
  unint64_t v12 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v13 = v12 >= v53;
  unint64_t v14 = v12 - v53;
  if (v13)
  {
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v54)
    {
      *(void *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v53 + v14) = 865;
      *(void *)&uint8_t buf[16] = v14 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v48);
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode((uint64_t *)buf, v49);
  IPC::ArgumentCoder<WebCore::Color,void>::encode((uint64_t *)buf, v50);
  if (!*(void *)&buf[8])
  {
    if (!v55) {
      __break(1u);
    }
    IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v6, v53, v54);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v6 + 1);
    int v44 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillRectWithRoundedHole>(*(uint64_t *)buf, (uint64_t)&v48, v8);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
    if (!v44) {
      goto LABEL_24;
    }
    goto LABEL_61;
  }
  uint64_t v16 = *(void *)&buf[16];
  unint64_t v17 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = *((void *)v6 + 8);
  if (v17 + 16 >= v18) {
    unint64_t v17 = 0;
  }
  if (*(void *)&buf[16] <= 0x10uLL) {
    uint64_t v16 = 16;
  }
  unint64_t v19 = v17 + v16;
  if (v18 <= v19) {
    unint64_t v19 = 0;
  }
  *((void *)v6 + 10) = v19;
  if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v19) == 0x80000000
    || *((_DWORD *)v6 + 29))
  {
    if (*((unsigned char *)v6 + 104)) {
      MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
    }
    *((_DWORD *)v6 + 29) = 0;
  }
LABEL_24:
  unint64_t v20 = v51;
  uint64_t v51 = 0;
  if (v20)
  {
    char v21 = 0;
    uint64_t v22 = *((void *)v20 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v22, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
    if (v21) {
      MEMORY[0x19972E8D0](v22);
    }
    uint64_t v23 = *(void *)(v22 + 8);
    int v24 = 1;
    uint64_t v25 = v23 - 1;
    *(void *)(v22 + 8) = v23 - 1;
    if (v23 == 1)
    {
      uint64_t v47 = *(void *)(v22 + 16);
      uint64_t v26 = *(void *)(v22 + 24);
      *(void *)(v22 + 24) = 0;
      BOOL v27 = v47 != 0;
    }
    else
    {
      uint64_t v26 = 0;
      BOOL v27 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v22, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
    if (v24 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v22);
    }
    if (!v25)
    {
      if (v26) {
        (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      }
      if (!v27) {
        WTF::fastFree((WTF *)v22, v15);
      }
    }
  }
  this = v52;
  char v52 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v15);
      return (void *)WTF::fastFree(v45, v46);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordFillLine(void *this, PathDataLine *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  unsigned int v50 = a2;
  uint64_t v2 = this[481];
  if (v2)
  {
    uint64_t v3 = this;
    this = *(void **)(v2 + 8);
    if (this)
    {
      this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v52);
      uint64_t v4 = v52;
      if (v52)
      {
        uint64_t v5 = (WTF::ApproximateTime *)v3[479];
        if (v5) {
          goto LABEL_82;
        }
        uint64_t v51 = 0;
        while (1)
        {
          uint64_t v6 = v3[478];
          double v7 = *((double *)v4 + 15);
          double v8 = INFINITY;
          if (fabs(v7) != INFINITY)
          {
            WTF::ApproximateTime::now(v5);
            double v8 = v7 + v9;
          }
          if (*((void *)v4 + 7) != v6)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, buf, v8);
            if (!buf[16]) {
              goto LABEL_75;
            }
            uint64_t v26 = *(void *)buf;
            unint64_t v27 = *(void *)&buf[8];
            unint64_t v28 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v29 = v28 - *(void *)buf;
            if (v28 < *(void *)buf)
            {
              unint64_t v31 = 0;
              unint64_t v30 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v30 = 0;
              if (v29 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v31 = 0;
              }
              else
              {
                unint64_t v31 = 0;
                if (v29 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v29) = 2871;
                  unint64_t v30 = v27;
                  unint64_t v31 = v29 + 2;
                }
              }
            }
            unint64_t v32 = (void *)((v26 + v31 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v32 >= v26 + v31)
            {
              unint64_t v33 = (char *)v32 - v26;
              if ((unint64_t)v32 - v26 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_75;
              }
              unint64_t v31 = (unint64_t)(v33 + 8);
              if ((unint64_t)(v33 + 8) > v30) {
                goto LABEL_75;
              }
              *unint64_t v32 = v6;
            }
            if (!v30) {
              goto LABEL_75;
            }
            unint64_t v34 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v35 = *((void *)v4 + 8);
            if (v34 + 16 >= v35) {
              unint64_t v34 = 0;
            }
            if (v31 <= 0x10) {
              unint64_t v31 = 16;
            }
            unint64_t v36 = v34 + v31;
            if (v35 <= v36) {
              unint64_t v37 = 0;
            }
            else {
              unint64_t v37 = v36;
            }
            *((void *)v4 + 10) = v37;
            unint64_t v38 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v37);
            int v39 = *((_DWORD *)v4 + 29);
            if (v38 == 0x80000000 || v39 != 0)
            {
              unsigned int v41 = v39 + 1;
              *((_DWORD *)v4 + 29) = v41;
              if (v41 >= *((_DWORD *)v4 + 28))
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                }
                *((_DWORD *)v4 + 29) = 0;
              }
            }
            *((void *)v4 + 7) = v6;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, &v53, v8);
          if (!v55) {
            goto LABEL_75;
          }
          *(void *)long long buf = v53;
          *(void *)&buf[8] = v54;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v10 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v11 = v10 >= v53;
          unint64_t v12 = v10 - v53;
          if (v11)
          {
            if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v54)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v53 + v12) = 857;
              *(void *)&uint8_t buf[16] = v12 + 2;
            }
          }
          uint64_t v5 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::PathDataLine,void>::encode((uint64_t *)buf, v50);
          if (*(void *)&buf[8])
          {
            uint64_t v14 = *(void *)&buf[16];
            unint64_t v15 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v16 = *((void *)v4 + 8);
            if (v15 + 16 >= v16) {
              unint64_t v15 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v14 = 16;
            }
            unint64_t v17 = v15 + v14;
            if (v16 <= v17) {
              unint64_t v17 = 0;
            }
            *((void *)v4 + 10) = v17;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v17) == 0x80000000
              || *((_DWORD *)v4 + 29))
            {
              if (*((unsigned char *)v4 + 104)) {
                MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
              }
              *((_DWORD *)v4 + 29) = 0;
            }
            goto LABEL_24;
          }
          if (v55) {
            break;
          }
          __break(1u);
LABEL_82:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v5, v3[480], &v51);
          uint64_t v5 = v51;
          if (v51 && !*((unsigned char *)v51 + 4016))
          {
            *((unsigned char *)v51 + 4016) = 1;
            uint64_t v5 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v5);
          }
        }
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v4, v53, v54);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v4 + 1);
        int v45 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillLine>(*(uint64_t *)buf, (float **)&v50, v6);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        if (!v45) {
          goto LABEL_24;
        }
LABEL_75:
        unint64_t v46 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v47 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_FillLine";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v47;
          _os_log_impl(&dword_1985F2000, v46, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v48 = v3[481];
        if (v48)
        {
          unint64_t v49 = *(unsigned char **)(v48 + 8);
          if (v49) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v49);
          }
        }
LABEL_24:
        unint64_t v18 = v51;
        uint64_t v51 = 0;
        if (v18)
        {
          char v19 = 0;
          uint64_t v20 = *((void *)v18 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
          if (v19) {
            MEMORY[0x19972E8D0](v20);
          }
          uint64_t v21 = *(void *)(v20 + 8);
          int v22 = 1;
          uint64_t v23 = v21 - 1;
          *(void *)(v20 + 8) = v21 - 1;
          if (v21 == 1)
          {
            uint64_t v44 = *(void *)(v20 + 16);
            uint64_t v24 = *(void *)(v20 + 24);
            *(void *)(v20 + 24) = 0;
            BOOL v25 = v44 != 0;
          }
          else
          {
            uint64_t v24 = 0;
            BOOL v25 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
          if (v22 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v20);
          }
          if (!v23)
          {
            if (v24) {
              (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
            }
            if (!v25) {
              WTF::fastFree((WTF *)v20, v13);
            }
          }
        }
        this = v52;
        char v52 = 0;
        if (this)
        {
          if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v13);
            return (void *)WTF::fastFree(v42, v43);
          }
        }
      }
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordFillArc(void *this, const PathArc *a2)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  unint64_t v73 = a2;
  uint64_t v2 = this[481];
  if (!v2) {
    return this;
  }
  uint64_t v3 = this;
  this = *(void **)(v2 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v75);
  uint64_t v4 = v75;
  if (!v75) {
    return this;
  }
  uint64_t v5 = (WTF::ApproximateTime *)v3[479];
  if (v5) {
    goto LABEL_105;
  }
  unint64_t v74 = 0;
  while (1)
  {
    uint64_t v6 = v3[478];
    double v7 = *((double *)v4 + 15);
    double v8 = INFINITY;
    if (fabs(v7) != INFINITY)
    {
      WTF::ApproximateTime::now(v5);
      double v8 = v7 + v9;
    }
    if (*((void *)v4 + 7) != v6)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, buf, v8);
      if (!buf[16]) {
        goto LABEL_95;
      }
      uint64_t v46 = *(void *)buf;
      unint64_t v47 = *(void *)&buf[8];
      unint64_t v48 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v49 = v48 - *(void *)buf;
      if (v48 < *(void *)buf)
      {
        unint64_t v51 = 0;
        unint64_t v50 = *(void *)&buf[8];
      }
      else
      {
        unint64_t v50 = 0;
        if (v49 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v51 = 0;
        }
        else
        {
          unint64_t v51 = 0;
          if (v49 + 2 <= *(void *)&buf[8])
          {
            *(_WORD *)(*(void *)buf + v49) = 2871;
            unint64_t v50 = v47;
            unint64_t v51 = v49 + 2;
          }
        }
      }
      char v52 = (void *)((v46 + v51 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v52 >= v46 + v51)
      {
        unint64_t v53 = (char *)v52 - v46;
        if ((unint64_t)v52 - v46 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_95;
        }
        unint64_t v51 = (unint64_t)(v53 + 8);
        if ((unint64_t)(v53 + 8) > v50) {
          goto LABEL_95;
        }
        *char v52 = v6;
      }
      if (!v50) {
        goto LABEL_95;
      }
      unint64_t v54 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v55 = *((void *)v4 + 8);
      if (v54 + 16 >= v55) {
        unint64_t v54 = 0;
      }
      if (v51 <= 0x10) {
        unint64_t v51 = 16;
      }
      unint64_t v56 = v54 + v51;
      if (v55 <= v56) {
        unint64_t v57 = 0;
      }
      else {
        unint64_t v57 = v56;
      }
      *((void *)v4 + 10) = v57;
      unint64_t v58 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v57);
      int v59 = *((_DWORD *)v4 + 29);
      if (v58 == 0x80000000 || v59 != 0)
      {
        unsigned int v61 = v59 + 1;
        *((_DWORD *)v4 + 29) = v61;
        if (v61 >= *((_DWORD *)v4 + 28))
        {
          if (*((unsigned char *)v4 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
          }
          *((_DWORD *)v4 + 29) = 0;
        }
      }
      *((void *)v4 + 7) = v6;
    }
    uint64_t v5 = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, buf, v8);
    if (!buf[16]) {
      goto LABEL_95;
    }
    uint64_t v11 = *(void *)buf;
    unint64_t v12 = *(void *)&buf[8];
    unint64_t v13 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v14 = v13 - *(void *)buf;
    if (v13 < *(void *)buf)
    {
      unint64_t v16 = 0;
      unint64_t v15 = *(void *)&buf[8];
    }
    else
    {
      unint64_t v15 = 0;
      if (v14 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v16 = 0;
      }
      else
      {
        unint64_t v16 = 0;
        if (v14 + 2 <= *(void *)&buf[8])
        {
          *(_WORD *)(*(void *)buf + v14) = 852;
          unint64_t v15 = v12;
          unint64_t v16 = v14 + 2;
        }
      }
    }
    unint64_t v17 = v73;
    unint64_t v18 = (v11 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    BOOL v19 = v18 >= v11 + v16;
    unint64_t v20 = v18 - (v11 + v16);
    if (v19)
    {
      unint64_t v70 = 0;
      unint64_t v21 = v20 + v16;
      if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= v15)
      {
        *(float *)(v11 + v21) = v73->center.m_x;
        unint64_t v70 = v15;
        unint64_t v16 = v21 + 4;
      }
    }
    else
    {
      unint64_t v70 = v15;
    }
    unint64_t v22 = (v11 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    BOOL v19 = v22 >= v11 + v16;
    unint64_t v23 = v22 - (v11 + v16);
    if (v19)
    {
      unint64_t v71 = 0;
      unint64_t v24 = v23 + v16;
      if (v24 <= 0xFFFFFFFFFFFFFFFBLL && v24 + 4 <= v70)
      {
        *(float *)(v11 + v24) = v17->center.m_y;
        unint64_t v71 = v70;
        unint64_t v16 = v24 + 4;
      }
    }
    else
    {
      unint64_t v71 = v70;
    }
    unint64_t v25 = (v11 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v26 = v25 - (v11 + v16);
    if (v25 < v11 + v16)
    {
      unint64_t v27 = v71;
    }
    else
    {
      unint64_t v27 = 0;
      unint64_t v28 = v26 + v16;
      if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v71)
      {
        *(float *)(v11 + v28) = v17->radius;
        unint64_t v27 = v71;
        unint64_t v16 = v28 + 4;
      }
    }
    unint64_t v29 = (v11 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    BOOL v19 = v29 >= v11 + v16;
    unint64_t v30 = v29 - (v11 + v16);
    if (v19)
    {
      unint64_t v72 = 0;
      unint64_t v31 = v30 + v16;
      if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v27)
      {
        *(float *)(v11 + v31) = v17->startAngle;
        unint64_t v72 = v27;
        unint64_t v16 = v31 + 4;
      }
    }
    else
    {
      unint64_t v72 = v27;
    }
    unint64_t v32 = (_DWORD *)((v11 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v32 >= v11 + v16)
    {
      unint64_t v33 = (char *)v32 - v11;
      if ((unint64_t)v32 - v11 > 0xFFFFFFFFFFFFFFFBLL) {
        goto LABEL_93;
      }
      unint64_t v16 = (unint64_t)(v33 + 4);
      if ((unint64_t)(v33 + 4) > v72) {
        goto LABEL_93;
      }
      *unint64_t v32 = LODWORD(v17->endAngle);
    }
    if (v16 < v72)
    {
      *(unsigned char *)(v11 + v16) = v17->direction;
      unint64_t v34 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v35 = *((void *)v4 + 8);
      if (v34 + 16 >= v35) {
        unint64_t v34 = 0;
      }
      if (v16 <= 0xF) {
        unint64_t v16 = 15;
      }
      unint64_t v36 = v16 + v34;
      if (v35 > v36 + 1) {
        unint64_t v37 = v36 + 1;
      }
      else {
        unint64_t v37 = 0;
      }
      *((void *)v4 + 10) = v37;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v37) == 0x80000000
        || *((_DWORD *)v4 + 29))
      {
        if (*((unsigned char *)v4 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
        }
        *((_DWORD *)v4 + 29) = 0;
      }
      goto LABEL_47;
    }
LABEL_93:
    if (buf[16]) {
      break;
    }
    __break(1u);
LABEL_105:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v5, v3[480], &v74);
    uint64_t v5 = v74;
    if (v74 && !*((unsigned char *)v74 + 4016))
    {
      *((unsigned char *)v74 + 4016) = 1;
      uint64_t v5 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v5);
    }
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v4, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v76, (uint64_t **)v4 + 1);
  int v62 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillArc>((uint64_t)v76, (uint64_t *)&v73, v6);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v76);
  if (!v62) {
    goto LABEL_47;
  }
LABEL_95:
  int v63 = off_1EB3583E8;
  if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v64 = IPC::errorAsString();
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_FillArc";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v64;
    _os_log_impl(&dword_1985F2000, v63, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  uint64_t v65 = v3[481];
  if (v65)
  {
    char v66 = *(unsigned char **)(v65 + 8);
    if (v66) {
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v66);
    }
  }
LABEL_47:
  unint64_t v38 = v74;
  unint64_t v74 = 0;
  if (v38)
  {
    char v39 = 0;
    uint64_t v40 = *((void *)v38 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v40, (unsigned __int8 *)&v39, 1u, memory_order_acquire, memory_order_acquire);
    if (v39) {
      MEMORY[0x19972E8D0](v40);
    }
    uint64_t v41 = *(void *)(v40 + 8);
    int v42 = 1;
    uint64_t v43 = v41 - 1;
    *(void *)(v40 + 8) = v41 - 1;
    if (v41 == 1)
    {
      uint64_t v69 = *(void *)(v40 + 16);
      uint64_t v44 = *(void *)(v40 + 24);
      *(void *)(v40 + 24) = 0;
      BOOL v45 = v69 != 0;
    }
    else
    {
      uint64_t v44 = 0;
      BOOL v45 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v40, (unsigned __int8 *)&v42, 0, memory_order_release, memory_order_relaxed);
    if (v42 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v40);
    }
    if (!v43)
    {
      if (v44) {
        (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
      }
      if (!v45) {
        WTF::fastFree((WTF *)v40, v10);
      }
    }
  }
  this = v75;
  unint64_t v75 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v10);
      return (void *)WTF::fastFree(v67, v68);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordFillClosedArc(void *this, const PathClosedArc *a2)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this[481];
  if (!v2) {
    return this;
  }
  uint64_t v3 = this;
  this = *(void **)(v2 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v97);
  uint64_t v5 = v97;
  if (!v97) {
    return this;
  }
  uint64_t v6 = (WTF::ApproximateTime *)v3[479];
  if (v6) {
    goto LABEL_142;
  }
  v96 = 0;
  while (1)
  {
    uint64_t v7 = v3[478];
    double v8 = *((double *)v5 + 15);
    double v9 = INFINITY;
    if (fabs(v8) != INFINITY)
    {
      WTF::ApproximateTime::now(v6);
      double v9 = v8 + v10;
    }
    if (*((void *)v5 + 7) == v7) {
      goto LABEL_9;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
    if (!buf[16]) {
      goto LABEL_134;
    }
    uint64_t v63 = *(void *)buf;
    unint64_t v64 = *(void *)&buf[8];
    unint64_t v65 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v66 = v65 - *(void *)buf;
    BOOL v67 = v65 >= *(void *)buf;
    unint64_t v68 = v65 - *(void *)buf + 2;
    BOOL v70 = v66 < 0xFFFFFFFFFFFFFFFELL && v68 <= *(void *)&buf[8];
    if (v67 && v70) {
      goto LABEL_106;
    }
    if (!v67)
    {
      unint64_t v68 = 0;
      goto LABEL_107;
    }
    unint64_t v71 = 0;
    if (v66 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v68 = 0;
      goto LABEL_108;
    }
    unint64_t v68 = 0;
    if (v66 + 2 <= *(void *)&buf[8])
    {
      unint64_t v68 = v66 + 2;
LABEL_106:
      *(_WORD *)(*(void *)buf + v66) = 2871;
LABEL_107:
      unint64_t v71 = v64;
    }
LABEL_108:
    unint64_t v72 = (void *)((v63 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v72 >= v63 + v68)
    {
      unint64_t v73 = (char *)v72 - v63;
      if ((unint64_t)v72 - v63 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_134;
      }
      unint64_t v68 = (unint64_t)(v73 + 8);
      if ((unint64_t)(v73 + 8) > v71) {
        goto LABEL_134;
      }
      void *v72 = v7;
    }
    if (!v71) {
      goto LABEL_134;
    }
    unint64_t v74 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v75 = *((void *)v5 + 8);
    if (v74 + 16 >= v75) {
      unint64_t v74 = 0;
    }
    if (v68 <= 0x10) {
      unint64_t v68 = 16;
    }
    unint64_t v76 = v74 + v68;
    if (v75 <= v76) {
      unint64_t v77 = 0;
    }
    else {
      unint64_t v77 = v76;
    }
    *((void *)v5 + 10) = v77;
    unint64_t v78 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v77);
    int v79 = *((_DWORD *)v5 + 29);
    if (v78 == 0x80000000 || v79 != 0)
    {
      unsigned int v81 = v79 + 1;
      *((_DWORD *)v5 + 29) = v81;
      if (v81 >= *((_DWORD *)v5 + 28))
      {
        if (*((unsigned char *)v5 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
        }
        *((_DWORD *)v5 + 29) = 0;
      }
    }
    *((void *)v5 + 7) = v7;
LABEL_9:
    uint64_t v6 = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
    if (!buf[16]) {
      goto LABEL_134;
    }
    uint64_t v12 = *(void *)buf;
    unint64_t v13 = *(void *)&buf[8];
    unint64_t v14 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v15 = v14 - *(void *)buf;
    BOOL v16 = v14 >= *(void *)buf;
    unint64_t v17 = v14 - *(void *)buf + 2;
    BOOL v19 = v15 < 0xFFFFFFFFFFFFFFFELL && v17 <= *(void *)&buf[8];
    if (v16 && v19) {
      goto LABEL_18;
    }
    if (!v16)
    {
      unint64_t v17 = 0;
      goto LABEL_19;
    }
    unint64_t v20 = 0;
    if (v15 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v17 = 0;
    }
    else
    {
      unint64_t v17 = 0;
      if (v15 + 2 <= *(void *)&buf[8])
      {
        unint64_t v17 = v15 + 2;
LABEL_18:
        *(_WORD *)(*(void *)buf + v15) = 854;
LABEL_19:
        unint64_t v20 = v13;
      }
    }
    unint64_t v21 = (v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v22 = v21 - (v12 + v17);
    BOOL v23 = v21 >= v12 + v17;
    unint64_t v24 = v21 - v12;
    BOOL v25 = v22 + v17 >= 0xFFFFFFFFFFFFFFFCLL || v22 + v17 + 4 > v20;
    BOOL v26 = !v25;
    if (v23 && v26)
    {
      v17 += v22 + 4;
    }
    else
    {
      if (!v23) {
        goto LABEL_30;
      }
      unint64_t v27 = 0;
      unint64_t v24 = v22 + v17;
      if (v22 + v17 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > v20) {
        goto LABEL_31;
      }
      unint64_t v17 = v24 + 4;
    }
    *(float *)(v12 + v24) = a2->arc.center.m_x;
LABEL_30:
    unint64_t v27 = v20;
LABEL_31:
    unint64_t v28 = (v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v29 = v28 - (v12 + v17);
    BOOL v30 = v28 >= v12 + v17;
    unint64_t v31 = v28 - v12;
    BOOL v32 = v29 + v17 >= 0xFFFFFFFFFFFFFFFCLL || v29 + v17 + 4 > v27;
    BOOL v33 = !v32;
    if (v30 && v33)
    {
      v17 += v29 + 4;
    }
    else
    {
      if (!v30) {
        goto LABEL_41;
      }
      unint64_t v34 = 0;
      unint64_t v31 = v29 + v17;
      if (v29 + v17 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > v27) {
        goto LABEL_42;
      }
      unint64_t v17 = v31 + 4;
    }
    *(float *)(v12 + v31) = a2->arc.center.m_y;
LABEL_41:
    unint64_t v34 = v27;
LABEL_42:
    unint64_t v35 = (v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v36 = v35 - (v12 + v17);
    BOOL v37 = v35 >= v12 + v17;
    unint64_t v38 = v35 - v12;
    BOOL v39 = v36 + v17 >= 0xFFFFFFFFFFFFFFFCLL || v36 + v17 + 4 > v34;
    BOOL v40 = !v39;
    if (v37 && v40)
    {
      v17 += v36 + 4;
    }
    else
    {
      if (!v37) {
        goto LABEL_52;
      }
      unint64_t v41 = 0;
      unint64_t v38 = v36 + v17;
      if (v36 + v17 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > v34) {
        goto LABEL_53;
      }
      unint64_t v17 = v38 + 4;
    }
    *(float *)(v12 + v38) = a2->arc.radius;
LABEL_52:
    unint64_t v41 = v34;
LABEL_53:
    unint64_t v42 = (v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v43 = v42 - (v12 + v17);
    BOOL v44 = v42 >= v12 + v17;
    unint64_t v45 = v42 - v12;
    BOOL v47 = v43 + v17 < 0xFFFFFFFFFFFFFFFCLL && v43 + v17 + 4 <= v41;
    if (v44 && v47)
    {
      v17 += v43 + 4;
LABEL_62:
      *(float *)(v12 + v45) = a2->arc.startAngle;
LABEL_63:
      unint64_t v48 = v41;
      goto LABEL_64;
    }
    if (!v44) {
      goto LABEL_63;
    }
    unint64_t v48 = 0;
    unint64_t v45 = v43 + v17;
    if (v43 + v17 <= 0xFFFFFFFFFFFFFFFBLL && v45 + 4 <= v41)
    {
      unint64_t v17 = v45 + 4;
      goto LABEL_62;
    }
LABEL_64:
    unint64_t v49 = (float *)((v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v49 >= v12 + v17)
    {
      unint64_t v50 = (char *)v49 - v12;
      if ((unint64_t)v49 - v12 > 0xFFFFFFFFFFFFFFFBLL) {
        goto LABEL_130;
      }
      unint64_t v17 = (unint64_t)(v50 + 4);
      if ((unint64_t)(v50 + 4) > v48) {
        goto LABEL_130;
      }
      float *v49 = a2->arc.endAngle;
    }
    if (v17 < v48)
    {
      *(unsigned char *)(v12 + v17) = a2->arc.direction;
      unint64_t v51 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v52 = *((void *)v5 + 8);
      if (v51 + 16 >= v52) {
        unint64_t v51 = 0;
      }
      if (v17 <= 0xF) {
        unint64_t v17 = 15;
      }
      unint64_t v53 = v17 + v51;
      if (v52 > v53 + 1) {
        unint64_t v54 = v53 + 1;
      }
      else {
        unint64_t v54 = 0;
      }
      *((void *)v5 + 10) = v54;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v54) == 0x80000000
        || *((_DWORD *)v5 + 29))
      {
        if (*((unsigned char *)v5 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
        }
        *((_DWORD *)v5 + 29) = 0;
      }
      goto LABEL_78;
    }
LABEL_130:
    if (buf[16]) {
      break;
    }
    __break(1u);
LABEL_142:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6, v3[480], &v96);
    uint64_t v6 = v96;
    if (v96 && !*((unsigned char *)v96 + 4016))
    {
      *((unsigned char *)v96 + 4016) = 1;
      uint64_t v6 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v6);
    }
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v98, (uint64_t **)v5 + 1);
  char v82 = v98;
  uint64_t v83 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v83 = 854;
  *((void *)v83 + 1) = v7;
  *((void *)v83 + 66) = (char *)v83 + 16;
  *((void *)v83 + 67) = 512;
  *((void *)v83 + 68) = 0;
  *((void *)v83 + 70) = 0;
  *((void *)v83 + 69) = 0;
  IPC::Encoder::encodeHeader(v83);
  v99 = v83;
  IPC::ArgumentCoder<WebCore::PathArc,void>::encode(v83, (uint64_t)a2);
  int v85 = IPC::Connection::sendMessageImpl((uint64_t)v82, (uint64_t *)&v99, 1, 0);
  v86 = v99;
  v99 = 0;
  if (v86)
  {
    IPC::Encoder::~Encoder(v86, v84);
    WTF::fastFree(v94, v95);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v98);
  if (v85)
  {
LABEL_134:
    unint64_t v87 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v88 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_FillClosedArc";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v88;
      _os_log_impl(&dword_1985F2000, v87, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v89 = v3[481];
    if (v89)
    {
      v90 = *(unsigned char **)(v89 + 8);
      if (v90) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v90);
      }
    }
  }
LABEL_78:
  unint64_t v55 = v96;
  v96 = 0;
  if (v55)
  {
    char v56 = 0;
    uint64_t v57 = *((void *)v55 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v57, (unsigned __int8 *)&v56, 1u, memory_order_acquire, memory_order_acquire);
    if (v56) {
      MEMORY[0x19972E8D0](v57);
    }
    uint64_t v58 = *(void *)(v57 + 8);
    int v59 = 1;
    uint64_t v60 = v58 - 1;
    *(void *)(v57 + 8) = v58 - 1;
    if (v58 == 1)
    {
      uint64_t v93 = *(void *)(v57 + 16);
      uint64_t v61 = *(void *)(v57 + 24);
      *(void *)(v57 + 24) = 0;
      BOOL v62 = v93 != 0;
    }
    else
    {
      uint64_t v61 = 0;
      BOOL v62 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v57, (unsigned __int8 *)&v59, 0, memory_order_release, memory_order_relaxed);
    if (v59 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v57);
    }
    if (!v60)
    {
      if (v61) {
        (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
      }
      if (!v62) {
        WTF::fastFree((WTF *)v57, v11);
      }
    }
  }
  this = v97;
  v97 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v11);
      return (void *)WTF::fastFree(v91, v92);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordFillQuadCurve(void *this, PathDataQuadCurve *a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this[481];
  if (!v2) {
    return this;
  }
  uint64_t v3 = this;
  this = *(void **)(v2 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v66);
  if (!v66) {
    return this;
  }
  uint64_t v5 = v3[479];
  char v6 = 1;
  if (v5)
  {
    char v64 = 0;
    uint64_t v7 = v3[480];
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v64, 1u, memory_order_acquire, memory_order_acquire);
    if (v64) {
      this = (void *)MEMORY[0x19972E8D0](v5);
    }
    if (*(void *)(v5 + 24)) {
      ++*(void *)(v5 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    int v65 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v65, 0, memory_order_release, memory_order_relaxed);
    if (v65 == 1)
    {
      if (!v7) {
        goto LABEL_6;
      }
    }
    else
    {
      this = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (!v7) {
        goto LABEL_6;
      }
    }
    if (!*(unsigned char *)(v7 + 4016))
    {
      *(unsigned char *)(v7 + 4016) = 1;
      this = (void *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v7);
      if (this) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 160))(this);
      }
    }
    char v6 = 0;
    goto LABEL_6;
  }
  uint64_t v7 = 0;
LABEL_6:
  double v8 = v66;
  uint64_t v9 = v3[478];
  double v10 = *((double *)v66 + 15);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
    double v11 = v10 + v12;
  }
  if (*((void *)v8 + 7) == v9) {
    goto LABEL_9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, buf, v11);
  if (!buf[16]) {
    goto LABEL_64;
  }
  uint64_t v34 = *(void *)buf;
  unint64_t v35 = *(void *)&buf[8];
  unint64_t v36 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - *(void *)buf;
  if (v36 < *(void *)buf)
  {
    unint64_t v39 = 0;
    unint64_t v38 = *(void *)&buf[8];
  }
  else
  {
    unint64_t v38 = 0;
    if (v37 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v39 = 0;
    }
    else
    {
      unint64_t v39 = 0;
      if (v37 + 2 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v37) = 2871;
        unint64_t v38 = v35;
        unint64_t v39 = v37 + 2;
      }
    }
  }
  BOOL v40 = (void *)((v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v40 >= v34 + v39)
  {
    unint64_t v41 = (char *)v40 - v34;
    if ((unint64_t)v40 - v34 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_64;
    }
    unint64_t v39 = (unint64_t)(v41 + 8);
    if ((unint64_t)(v41 + 8) > v38) {
      goto LABEL_64;
    }
    *BOOL v40 = v9;
  }
  if (!v38)
  {
LABEL_64:
    unint64_t v49 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v50 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_FillQuadCurve";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v50;
      _os_log_impl(&dword_1985F2000, v49, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v51 = v3[481];
    if (v51)
    {
      unint64_t v52 = *(unsigned char **)(v51 + 8);
      if (v52) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v52);
      }
    }
    goto LABEL_69;
  }
  unint64_t v42 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *((void *)v8 + 8);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v39 <= 0x10) {
    unint64_t v39 = 16;
  }
  unint64_t v44 = v42 + v39;
  if (v43 <= v44) {
    unint64_t v45 = 0;
  }
  else {
    unint64_t v45 = v44;
  }
  *((void *)v8 + 10) = v45;
  unint64_t v46 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v45);
  int v47 = *((_DWORD *)v8 + 29);
  if (v46 == 0x80000000 || v47 != 0)
  {
    unsigned int v60 = v47 + 1;
    *((_DWORD *)v8 + 29) = v60;
    if (v60 >= *((_DWORD *)v8 + 28))
    {
      if (*((unsigned char *)v8 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v8 + 23));
      }
      *((_DWORD *)v8 + 29) = 0;
    }
  }
  *((void *)v8 + 7) = v9;
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, &v68, v11);
  if (!v70) {
    goto LABEL_64;
  }
  *(void *)long long buf = v68;
  *(void *)&buf[8] = v69;
  *(void *)&uint8_t buf[16] = 0;
  unint64_t v13 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v14 = v13 >= v68;
  unint64_t v15 = v13 - v68;
  if (v14)
  {
    if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v69)
    {
      *(void *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v68 + v15) = 860;
      *(void *)&uint8_t buf[16] = v15 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::encode((uint64_t *)buf, a2);
  if (*(void *)&buf[8])
  {
    unint64_t v18 = *(void *)&buf[16];
    unint64_t v19 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *((void *)v8 + 8);
    if (v19 + 16 < v17)
    {
LABEL_17:
      if (v18 <= 0x10) {
        unint64_t v18 = 16;
      }
      unint64_t v20 = v19 + v18;
      if (v17 <= v20) {
        unint64_t v20 = 0;
      }
      *((void *)v8 + 10) = v20;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v20) == 0x80000000
        || *((_DWORD *)v8 + 29))
      {
        if (*((unsigned char *)v8 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v8 + 23));
        }
        *((_DWORD *)v8 + 29) = 0;
      }
      goto LABEL_69;
    }
LABEL_93:
    unint64_t v19 = 0;
    goto LABEL_17;
  }
  unint64_t v18 = v70;
  if (!v70)
  {
    __break(1u);
    goto LABEL_93;
  }
  unint64_t v21 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v22 = v21 - v68;
  if (v21 < v68)
  {
    unint64_t v23 = 0;
  }
  else
  {
    unint64_t v23 = 0;
    if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v69)
    {
      *(_WORD *)(v68 + v22) = 2870;
      unint64_t v23 = v22 + 2;
    }
  }
  unint64_t v24 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v25 = *((void *)v8 + 8);
  if (v24 + 16 >= v25) {
    unint64_t v24 = 0;
  }
  if (v23 <= 0x10) {
    unint64_t v23 = 16;
  }
  unint64_t v26 = v24 + v23;
  if (v25 <= v26) {
    unint64_t v26 = 0;
  }
  *((void *)v8 + 10) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v26);
  *((_DWORD *)v8 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v8 + 1);
  unint64_t v27 = v67;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 860;
  *((void *)v28 + 1) = v9;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  *(void *)long long buf = v28;
  IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::encode(v28, (float *)&a2->start);
  int v30 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)buf, 1, 0);
  unint64_t v31 = *(IPC::Encoder **)buf;
  *(void *)long long buf = 0;
  if (v31)
  {
    IPC::Encoder::~Encoder(v31, v29);
    WTF::fastFree(v32, v33);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v67);
  if (v30) {
    goto LABEL_64;
  }
LABEL_69:
  if ((v6 & 1) == 0)
  {
    char v53 = 0;
    uint64_t v54 = *(void *)(v7 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v54, (unsigned __int8 *)&v53, 1u, memory_order_acquire, memory_order_acquire);
    if (v53) {
      MEMORY[0x19972E8D0](v54);
    }
    uint64_t v55 = *(void *)(v54 + 8);
    int v56 = 1;
    uint64_t v57 = v55 - 1;
    *(void *)(v54 + 8) = v55 - 1;
    if (v55 == 1)
    {
      uint64_t v63 = *(void *)(v54 + 16);
      uint64_t v58 = *(void *)(v54 + 24);
      *(void *)(v54 + 24) = 0;
      BOOL v59 = v63 != 0;
    }
    else
    {
      uint64_t v58 = 0;
      BOOL v59 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v54, (unsigned __int8 *)&v56, 0, memory_order_release, memory_order_relaxed);
    if (v56 == 1)
    {
      if (!v57)
      {
LABEL_76:
        if (v58) {
          (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
        }
        if (!v59) {
          WTF::fastFree((WTF *)v54, v16);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v54);
      if (!v57) {
        goto LABEL_76;
      }
    }
  }
  this = v66;
  unint64_t v66 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v16);
      return (void *)WTF::fastFree(v61, v62);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordFillBezierCurve(void *this, PathDataBezierCurve *a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this[481];
  if (!v2) {
    return this;
  }
  uint64_t v3 = this;
  this = *(void **)(v2 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v66);
  if (!v66) {
    return this;
  }
  uint64_t v5 = v3[479];
  char v6 = 1;
  if (v5)
  {
    char v64 = 0;
    uint64_t v7 = v3[480];
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v64, 1u, memory_order_acquire, memory_order_acquire);
    if (v64) {
      this = (void *)MEMORY[0x19972E8D0](v5);
    }
    if (*(void *)(v5 + 24)) {
      ++*(void *)(v5 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    int v65 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v65, 0, memory_order_release, memory_order_relaxed);
    if (v65 == 1)
    {
      if (!v7) {
        goto LABEL_6;
      }
    }
    else
    {
      this = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (!v7) {
        goto LABEL_6;
      }
    }
    if (!*(unsigned char *)(v7 + 4016))
    {
      *(unsigned char *)(v7 + 4016) = 1;
      this = (void *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v7);
      if (this) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 160))(this);
      }
    }
    char v6 = 0;
    goto LABEL_6;
  }
  uint64_t v7 = 0;
LABEL_6:
  double v8 = v66;
  uint64_t v9 = v3[478];
  double v10 = *((double *)v66 + 15);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
    double v11 = v10 + v12;
  }
  if (*((void *)v8 + 7) == v9) {
    goto LABEL_9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, buf, v11);
  if (!buf[16]) {
    goto LABEL_64;
  }
  uint64_t v34 = *(void *)buf;
  unint64_t v35 = *(void *)&buf[8];
  unint64_t v36 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - *(void *)buf;
  if (v36 < *(void *)buf)
  {
    unint64_t v39 = 0;
    unint64_t v38 = *(void *)&buf[8];
  }
  else
  {
    unint64_t v38 = 0;
    if (v37 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v39 = 0;
    }
    else
    {
      unint64_t v39 = 0;
      if (v37 + 2 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v37) = 2871;
        unint64_t v38 = v35;
        unint64_t v39 = v37 + 2;
      }
    }
  }
  BOOL v40 = (void *)((v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v40 >= v34 + v39)
  {
    unint64_t v41 = (char *)v40 - v34;
    if ((unint64_t)v40 - v34 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_64;
    }
    unint64_t v39 = (unint64_t)(v41 + 8);
    if ((unint64_t)(v41 + 8) > v38) {
      goto LABEL_64;
    }
    *BOOL v40 = v9;
  }
  if (!v38)
  {
LABEL_64:
    unint64_t v49 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v50 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_FillBezierCurve";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v50;
      _os_log_impl(&dword_1985F2000, v49, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v51 = v3[481];
    if (v51)
    {
      unint64_t v52 = *(unsigned char **)(v51 + 8);
      if (v52) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v52);
      }
    }
    goto LABEL_69;
  }
  unint64_t v42 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *((void *)v8 + 8);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v39 <= 0x10) {
    unint64_t v39 = 16;
  }
  unint64_t v44 = v42 + v39;
  if (v43 <= v44) {
    unint64_t v45 = 0;
  }
  else {
    unint64_t v45 = v44;
  }
  *((void *)v8 + 10) = v45;
  unint64_t v46 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v45);
  int v47 = *((_DWORD *)v8 + 29);
  if (v46 == 0x80000000 || v47 != 0)
  {
    unsigned int v60 = v47 + 1;
    *((_DWORD *)v8 + 29) = v60;
    if (v60 >= *((_DWORD *)v8 + 28))
    {
      if (*((unsigned char *)v8 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v8 + 23));
      }
      *((_DWORD *)v8 + 29) = 0;
    }
  }
  *((void *)v8 + 7) = v9;
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, &v68, v11);
  if (!v70) {
    goto LABEL_64;
  }
  *(void *)long long buf = v68;
  *(void *)&buf[8] = v69;
  *(void *)&uint8_t buf[16] = 0;
  unint64_t v13 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v14 = v13 >= v68;
  unint64_t v15 = v13 - v68;
  if (v14)
  {
    if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v69)
    {
      *(void *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v68 + v15) = 853;
      *(void *)&uint8_t buf[16] = v15 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode((uint64_t *)buf, a2);
  if (*(void *)&buf[8])
  {
    unint64_t v18 = *(void *)&buf[16];
    unint64_t v19 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *((void *)v8 + 8);
    if (v19 + 16 < v17)
    {
LABEL_17:
      if (v18 <= 0x10) {
        unint64_t v18 = 16;
      }
      unint64_t v20 = v19 + v18;
      if (v17 <= v20) {
        unint64_t v20 = 0;
      }
      *((void *)v8 + 10) = v20;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v20) == 0x80000000
        || *((_DWORD *)v8 + 29))
      {
        if (*((unsigned char *)v8 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v8 + 23));
        }
        *((_DWORD *)v8 + 29) = 0;
      }
      goto LABEL_69;
    }
LABEL_93:
    unint64_t v19 = 0;
    goto LABEL_17;
  }
  unint64_t v18 = v70;
  if (!v70)
  {
    __break(1u);
    goto LABEL_93;
  }
  unint64_t v21 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v22 = v21 - v68;
  if (v21 < v68)
  {
    unint64_t v23 = 0;
  }
  else
  {
    unint64_t v23 = 0;
    if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v69)
    {
      *(_WORD *)(v68 + v22) = 2870;
      unint64_t v23 = v22 + 2;
    }
  }
  unint64_t v24 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v25 = *((void *)v8 + 8);
  if (v24 + 16 >= v25) {
    unint64_t v24 = 0;
  }
  if (v23 <= 0x10) {
    unint64_t v23 = 16;
  }
  unint64_t v26 = v24 + v23;
  if (v25 <= v26) {
    unint64_t v26 = 0;
  }
  *((void *)v8 + 10) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v26);
  *((_DWORD *)v8 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v8 + 1);
  unint64_t v27 = v67;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 853;
  *((void *)v28 + 1) = v9;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  *(void *)long long buf = v28;
  IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode(v28, (float *)&a2->start);
  int v30 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)buf, 1, 0);
  unint64_t v31 = *(IPC::Encoder **)buf;
  *(void *)long long buf = 0;
  if (v31)
  {
    IPC::Encoder::~Encoder(v31, v29);
    WTF::fastFree(v32, v33);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v67);
  if (v30) {
    goto LABEL_64;
  }
LABEL_69:
  if ((v6 & 1) == 0)
  {
    char v53 = 0;
    uint64_t v54 = *(void *)(v7 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v54, (unsigned __int8 *)&v53, 1u, memory_order_acquire, memory_order_acquire);
    if (v53) {
      MEMORY[0x19972E8D0](v54);
    }
    uint64_t v55 = *(void *)(v54 + 8);
    int v56 = 1;
    uint64_t v57 = v55 - 1;
    *(void *)(v54 + 8) = v55 - 1;
    if (v55 == 1)
    {
      uint64_t v63 = *(void *)(v54 + 16);
      uint64_t v58 = *(void *)(v54 + 24);
      *(void *)(v54 + 24) = 0;
      BOOL v59 = v63 != 0;
    }
    else
    {
      uint64_t v58 = 0;
      BOOL v59 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v54, (unsigned __int8 *)&v56, 0, memory_order_release, memory_order_relaxed);
    if (v56 == 1)
    {
      if (!v57)
      {
LABEL_76:
        if (v58) {
          (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
        }
        if (!v59) {
          WTF::fastFree((WTF *)v54, v16);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v54);
      if (!v57) {
        goto LABEL_76;
      }
    }
  }
  this = v66;
  unint64_t v66 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v16);
      return (void *)WTF::fastFree(v61, v62);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordFillPathSegment(void *this, const PathSegment *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v54 = a2;
  uint64_t v2 = this[481];
  if (v2)
  {
    uint64_t v3 = this;
    this = *(void **)(v2 + 8);
    if (this)
    {
      this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v56);
      uint64_t v4 = v56;
      if (v56)
      {
        uint64_t v5 = (WTF::ApproximateTime *)v3[479];
        if (v5) {
          goto LABEL_86;
        }
        uint64_t v55 = 0;
        while (1)
        {
          uint64_t v6 = v3[478];
          double v7 = *((double *)v4 + 15);
          double v8 = INFINITY;
          if (fabs(v7) != INFINITY)
          {
            WTF::ApproximateTime::now(v5);
            double v8 = v7 + v9;
          }
          if (*((void *)v4 + 7) != v6)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, buf, v8);
            if (!buf[16]) {
              goto LABEL_79;
            }
            uint64_t v30 = *(void *)buf;
            unint64_t v31 = *(void *)&buf[8];
            unint64_t v32 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v33 = v32 - *(void *)buf;
            if (v32 < *(void *)buf)
            {
              unint64_t v35 = 0;
              unint64_t v34 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v34 = 0;
              if (v33 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v35 = 0;
              }
              else
              {
                unint64_t v35 = 0;
                if (v33 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v33) = 2871;
                  unint64_t v34 = v31;
                  unint64_t v35 = v33 + 2;
                }
              }
            }
            unint64_t v36 = (void *)((v30 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v36 >= v30 + v35)
            {
              unint64_t v37 = (char *)v36 - v30;
              if ((unint64_t)v36 - v30 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_79;
              }
              unint64_t v35 = (unint64_t)(v37 + 8);
              if ((unint64_t)(v37 + 8) > v34) {
                goto LABEL_79;
              }
              *unint64_t v36 = v6;
            }
            if (!v34) {
              goto LABEL_79;
            }
            unint64_t v38 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v39 = *((void *)v4 + 8);
            if (v38 + 16 >= v39) {
              unint64_t v38 = 0;
            }
            if (v35 <= 0x10) {
              unint64_t v35 = 16;
            }
            unint64_t v40 = v38 + v35;
            if (v39 <= v40) {
              unint64_t v41 = 0;
            }
            else {
              unint64_t v41 = v40;
            }
            *((void *)v4 + 10) = v41;
            unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v41);
            int v43 = *((_DWORD *)v4 + 29);
            if (v42 == 0x80000000 || v43 != 0)
            {
              unsigned int v45 = v43 + 1;
              *((_DWORD *)v4 + 29) = v45;
              if (v45 >= *((_DWORD *)v4 + 28))
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                }
                *((_DWORD *)v4 + 29) = 0;
              }
            }
            *((void *)v4 + 7) = v6;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, &v57, v8);
          if (!v59) {
            goto LABEL_79;
          }
          *(void *)long long buf = v57;
          *(void *)&buf[8] = v58;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v10 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v11 = v10 >= v57;
          unint64_t v12 = v10 - v57;
          if (v11)
          {
            if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v58)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v57 + v12) = 859;
              *(void *)&uint8_t buf[16] = v12 + 2;
            }
          }
          uint64_t v5 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::PathSegment,void>::encode((uint64_t *)buf, (uint64_t)v54);
          if (*(void *)&buf[8])
          {
            uint64_t v14 = *(void *)&buf[16];
            unint64_t v15 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v16 = *((void *)v4 + 8);
            if (v15 + 16 >= v16) {
              unint64_t v15 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v14 = 16;
            }
            unint64_t v17 = v15 + v14;
            if (v16 <= v17) {
              unint64_t v17 = 0;
            }
            *((void *)v4 + 10) = v17;
            unint64_t v18 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v17);
            int v19 = *((_DWORD *)v4 + 29);
            if (v18 == 0x80000000 || v19 != 0)
            {
              unsigned int v29 = v19 + 1;
              *((_DWORD *)v4 + 29) = v29;
              if (v29 >= *((_DWORD *)v4 + 28))
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                }
                *((_DWORD *)v4 + 29) = 0;
              }
            }
            goto LABEL_27;
          }
          if (v59) {
            break;
          }
          __break(1u);
LABEL_86:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v5, v3[480], &v55);
          uint64_t v5 = v55;
          if (v55 && !*((unsigned char *)v55 + 4016))
          {
            *((unsigned char *)v55 + 4016) = 1;
            uint64_t v5 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v5);
          }
        }
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v4, v57, v58);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v4 + 1);
        int v49 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillPathSegment>(*(uint64_t *)buf, (uint64_t *)&v54, v6);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        if (!v49) {
          goto LABEL_27;
        }
LABEL_79:
        unint64_t v50 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v51 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_FillPathSegment";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v51;
          _os_log_impl(&dword_1985F2000, v50, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v52 = v3[481];
        if (v52)
        {
          char v53 = *(unsigned char **)(v52 + 8);
          if (v53) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v53);
          }
        }
LABEL_27:
        unint64_t v21 = v55;
        uint64_t v55 = 0;
        if (v21)
        {
          char v22 = 0;
          uint64_t v23 = *((void *)v21 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v23, (unsigned __int8 *)&v22, 1u, memory_order_acquire, memory_order_acquire);
          if (v22) {
            MEMORY[0x19972E8D0](v23);
          }
          uint64_t v24 = *(void *)(v23 + 8);
          int v25 = 1;
          uint64_t v26 = v24 - 1;
          *(void *)(v23 + 8) = v24 - 1;
          if (v24 == 1)
          {
            uint64_t v48 = *(void *)(v23 + 16);
            uint64_t v27 = *(void *)(v23 + 24);
            *(void *)(v23 + 24) = 0;
            BOOL v28 = v48 != 0;
          }
          else
          {
            uint64_t v27 = 0;
            BOOL v28 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v23, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
          if (v25 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v23);
          }
          if (!v26)
          {
            if (v27) {
              (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
            }
            if (!v28) {
              WTF::fastFree((WTF *)v23, v13);
            }
          }
        }
        this = v56;
        int v56 = 0;
        if (this)
        {
          if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v13);
            return (void *)WTF::fastFree(v46, v47);
          }
        }
      }
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordFillPath(void *this, const WebCore::Path *a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this[481];
  if (!v2) {
    return this;
  }
  uint64_t v3 = this;
  this = *(void **)(v2 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v68);
  uint64_t v5 = v68;
  if (!v68) {
    return this;
  }
  uint64_t v6 = (WTF::ApproximateTime *)v3[479];
  if (v6) {
    goto LABEL_99;
  }
  BOOL v67 = 0;
  while (1)
  {
    uint64_t v7 = v3[478];
    double v8 = *((double *)v5 + 15);
    double v9 = INFINITY;
    if (fabs(v8) != INFINITY)
    {
      WTF::ApproximateTime::now(v6);
      double v9 = v8 + v10;
    }
    if (*((void *)v5 + 7) == v7) {
      goto LABEL_9;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
    if (!buf[16]) {
      goto LABEL_92;
    }
    uint64_t v27 = *(void *)buf;
    unint64_t v28 = *(void *)&buf[8];
    unint64_t v29 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v30 = v29 - *(void *)buf;
    BOOL v31 = v29 >= *(void *)buf;
    unint64_t v32 = v29 - *(void *)buf + 2;
    BOOL v34 = v30 < 0xFFFFFFFFFFFFFFFELL && v32 <= *(void *)&buf[8];
    if (v31 && v34) {
      goto LABEL_52;
    }
    if (!v31)
    {
      unint64_t v32 = 0;
      goto LABEL_53;
    }
    unint64_t v35 = 0;
    if (v30 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v32 = 0;
      goto LABEL_54;
    }
    unint64_t v32 = 0;
    if (v30 + 2 <= *(void *)&buf[8])
    {
      unint64_t v32 = v30 + 2;
LABEL_52:
      *(_WORD *)(*(void *)buf + v30) = 2871;
LABEL_53:
      unint64_t v35 = v28;
    }
LABEL_54:
    unint64_t v36 = (v27 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v36 >= v27 + v32)
    {
      unint64_t v37 = v36 - v27;
      if (v37 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_92;
      }
      unint64_t v32 = v37 + 8;
      if (v37 + 8 > v35) {
        goto LABEL_92;
      }
      *(void *)(v27 + v37) = v7;
    }
    if (!v35) {
      goto LABEL_92;
    }
    unint64_t v38 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v39 = *((void *)v5 + 8);
    if (v38 + 16 >= v39) {
      unint64_t v38 = 0;
    }
    if (v32 <= 0x10) {
      unint64_t v32 = 16;
    }
    unint64_t v40 = v38 + v32;
    if (v39 <= v40) {
      unint64_t v41 = 0;
    }
    else {
      unint64_t v41 = v40;
    }
    *((void *)v5 + 10) = v41;
    unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v41);
    int v43 = *((_DWORD *)v5 + 29);
    if (v42 == 0x80000000 || v43 != 0)
    {
      unsigned int v45 = v43 + 1;
      *((_DWORD *)v5 + 29) = v45;
      if (v45 >= *((_DWORD *)v5 + 28))
      {
        if (*((unsigned char *)v5 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
        }
        *((_DWORD *)v5 + 29) = 0;
      }
    }
    *((void *)v5 + 7) = v7;
LABEL_9:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, &v70, v9);
    if (!v72) {
      goto LABEL_92;
    }
    *(void *)long long buf = v70;
    *(void *)&buf[8] = v71;
    *(void *)&uint8_t buf[16] = 0;
    unint64_t v11 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
    BOOL v12 = v11 >= v70;
    unint64_t v13 = v11 - v70;
    if (v12)
    {
      if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v71)
      {
        *(void *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v70 + v13) = 858;
        *(void *)&uint8_t buf[16] = v13 + 2;
      }
    }
    uint64_t v6 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::Path,void>::encode((uint64_t *)buf, a2);
    if (*(void *)&buf[8])
    {
      uint64_t v15 = *(void *)&buf[16];
      unint64_t v16 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v17 = *((void *)v5 + 8);
      if (v16 + 16 >= v17) {
        unint64_t v16 = 0;
      }
      if (*(void *)&buf[16] <= 0x10uLL) {
        uint64_t v15 = 16;
      }
      unint64_t v18 = v16 + v15;
      if (v17 <= v18) {
        unint64_t v18 = 0;
      }
      *((void *)v5 + 10) = v18;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v18) == 0x80000000
        || *((_DWORD *)v5 + 29))
      {
        if (*((unsigned char *)v5 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
        }
        *((_DWORD *)v5 + 29) = 0;
      }
      goto LABEL_24;
    }
    uint64_t v66 = v7;
    if (v72) {
      break;
    }
    __break(1u);
LABEL_99:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6, v3[480], &v67);
    uint64_t v6 = v67;
    if (v67 && !*((unsigned char *)v67 + 4016))
    {
      *((unsigned char *)v67 + 4016) = 1;
      uint64_t v6 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v6);
    }
  }
  unint64_t v49 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v50 = v49 - v70;
  if (v49 < v70)
  {
    unint64_t v51 = 0;
  }
  else
  {
    unint64_t v51 = 0;
    if (v50 <= 0xFFFFFFFFFFFFFFFDLL && v50 + 2 <= v71)
    {
      *(_WORD *)(v70 + v50) = 2870;
      unint64_t v51 = v50 + 2;
    }
  }
  unint64_t v52 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v53 = *((void *)v5 + 8);
  if (v52 + 16 >= v53) {
    unint64_t v52 = 0;
  }
  if (v51 <= 0x10) {
    unint64_t v51 = 16;
  }
  unint64_t v54 = v52 + v51;
  if (v53 <= v54) {
    unint64_t v54 = 0;
  }
  *((void *)v5 + 10) = v54;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v54);
  *((_DWORD *)v5 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v69, (uint64_t **)v5 + 1);
  uint64_t v55 = v69;
  int v56 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v56 = 858;
  *((void *)v56 + 1) = v66;
  *((void *)v56 + 66) = (char *)v56 + 16;
  *((void *)v56 + 67) = 512;
  *((void *)v56 + 68) = 0;
  *((void *)v56 + 70) = 0;
  *((void *)v56 + 69) = 0;
  IPC::Encoder::encodeHeader(v56);
  *(void *)long long buf = v56;
  IPC::ArgumentCoder<WebCore::Path,void>::encode(v56, a2);
  int v58 = IPC::Connection::sendMessageImpl((uint64_t)v55, (uint64_t *)buf, 1, 0);
  char v59 = *(IPC::Encoder **)buf;
  *(void *)long long buf = 0;
  if (v59)
  {
    IPC::Encoder::~Encoder(v59, v57);
    WTF::fastFree(v64, v65);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v69);
  if (v58)
  {
LABEL_92:
    unsigned int v60 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v61 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_FillPath";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v61;
      _os_log_impl(&dword_1985F2000, v60, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v62 = v3[481];
    if (v62)
    {
      uint64_t v63 = *(unsigned char **)(v62 + 8);
      if (v63) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v63);
      }
    }
  }
LABEL_24:
  int v19 = v67;
  BOOL v67 = 0;
  if (v19)
  {
    char v20 = 0;
    uint64_t v21 = *((void *)v19 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
    if (v20) {
      MEMORY[0x19972E8D0](v21);
    }
    uint64_t v22 = *(void *)(v21 + 8);
    int v23 = 1;
    uint64_t v24 = v22 - 1;
    *(void *)(v21 + 8) = v22 - 1;
    if (v22 == 1)
    {
      uint64_t v48 = *(void *)(v21 + 16);
      uint64_t v25 = *(void *)(v21 + 24);
      *(void *)(v21 + 24) = 0;
      BOOL v26 = v48 != 0;
    }
    else
    {
      uint64_t v25 = 0;
      BOOL v26 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
    if (v23 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v21);
    }
    if (!v24)
    {
      if (v25) {
        (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      }
      if (!v26) {
        WTF::fastFree((WTF *)v21, v14);
      }
    }
  }
  this = v68;
  unint64_t v68 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v14);
      return (void *)WTF::fastFree(v46, v47);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordFillEllipse(void *this, const WebCore::FloatRect *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  unint64_t v46 = (float *)a2;
  uint64_t v2 = this[481];
  if (v2)
  {
    uint64_t v3 = this;
    this = *(void **)(v2 + 8);
    if (this)
    {
      this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v48);
      uint64_t v4 = v48;
      if (v48)
      {
        uint64_t v5 = (WebKit::RemoteImageBufferProxy *)v3[479];
        if (v5)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v5, v3[480], &v47);
          uint64_t v5 = v47;
          if (v47 && !*((unsigned char *)v47 + 4016))
          {
            *((unsigned char *)v47 + 4016) = 1;
            uint64_t v5 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v5);
          }
        }
        else
        {
          int v47 = 0;
        }
        uint64_t v6 = v3[478];
        double v7 = *((double *)v4 + 15);
        double v8 = INFINITY;
        if (fabs(v7) != INFINITY)
        {
          WTF::ApproximateTime::now(v5);
          double v8 = v7 + v9;
        }
        if (*((void *)v4 + 7) == v6)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, &v49, v8);
            if (!v51) {
              break;
            }
            *(void *)long long buf = v49;
            *(void *)&buf[8] = v50;
            *(void *)&uint8_t buf[16] = 0;
            unint64_t v10 = (v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
            BOOL v11 = v10 >= v49;
            unint64_t v12 = v10 - v49;
            if (v11)
            {
              if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v50)
              {
                *(void *)&buf[8] = 0;
              }
              else
              {
                *(_WORD *)(v49 + v12) = 856;
                *(void *)&uint8_t buf[16] = v12 + 2;
              }
            }
            IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v46);
            if (*(void *)&buf[8])
            {
              uint64_t v15 = *(void *)&buf[16];
              unint64_t v16 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v17 = *((void *)v4 + 8);
              if (v16 + 16 >= v17) {
                unint64_t v16 = 0;
              }
              if (*(void *)&buf[16] <= 0x10uLL) {
                uint64_t v15 = 16;
              }
              unint64_t v18 = v16 + v15;
              if (v17 <= v18) {
                unint64_t v18 = 0;
              }
              *((void *)v4 + 10) = v18;
              if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v18) == 0x80000000
                || *((_DWORD *)v4 + 29))
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                }
                *((_DWORD *)v4 + 29) = 0;
              }
              goto LABEL_24;
            }
            uint64_t v27 = v51;
            if (v51)
            {
              IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v4, v49, v50);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v4 + 1);
              int v42 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillEllipse>(*(uint64_t *)buf, &v46, v6);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
              if (!v42) {
                goto LABEL_24;
              }
              break;
            }
            __break(1u);
LABEL_72:
            unint64_t v31 = v14;
LABEL_48:
            unint64_t v32 = (void *)((v27 + v31 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v32 >= v27 + v31)
            {
              unint64_t v33 = (char *)v32 - v27;
              if ((unint64_t)v32 - v27 > 0xFFFFFFFFFFFFFFF7) {
                break;
              }
              unint64_t v31 = (unint64_t)(v33 + 8);
              if ((unint64_t)(v33 + 8) > v14) {
                break;
              }
              *unint64_t v32 = v6;
            }
            if (!v14) {
              break;
            }
            unint64_t v34 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v35 = *((void *)v4 + 8);
            if (v34 + 16 >= v35) {
              unint64_t v34 = 0;
            }
            if (v31 <= 0x10) {
              unint64_t v31 = 16;
            }
            unint64_t v36 = v34 + v31;
            if (v35 <= v36) {
              unint64_t v37 = 0;
            }
            else {
              unint64_t v37 = v36;
            }
            *((void *)v4 + 10) = v37;
            IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v4, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v37) == 0x80000000);
            *((void *)v4 + 7) = v6;
          }
        }
        else
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, buf, v8);
          if (buf[16])
          {
            uint64_t v27 = *(void *)buf;
            unint64_t v28 = *(void *)&buf[8];
            unint64_t v29 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v30 = v29 - *(void *)buf;
            if (v29 < *(void *)buf)
            {
              unint64_t v31 = 0;
              unint64_t v14 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v14 = 0;
              if (v30 > 0xFFFFFFFFFFFFFFFDLL) {
                goto LABEL_72;
              }
              unint64_t v31 = 0;
              if (v30 + 2 <= *(void *)&buf[8])
              {
                *(_WORD *)(*(void *)buf + v30) = 2871;
                unint64_t v14 = v28;
                unint64_t v31 = v30 + 2;
              }
            }
            goto LABEL_48;
          }
        }
        unint64_t v38 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v39 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_FillEllipse";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v39;
          _os_log_impl(&dword_1985F2000, v38, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v40 = v3[481];
        if (v40)
        {
          unint64_t v41 = *(unsigned char **)(v40 + 8);
          if (v41) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v41);
          }
        }
LABEL_24:
        int v19 = v47;
        int v47 = 0;
        if (v19)
        {
          char v20 = 0;
          uint64_t v21 = *((void *)v19 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
          if (v20) {
            MEMORY[0x19972E8D0](v21);
          }
          uint64_t v22 = *(void *)(v21 + 8);
          int v23 = 1;
          uint64_t v24 = v22 - 1;
          *(void *)(v21 + 8) = v22 - 1;
          if (v22 == 1)
          {
            uint64_t v45 = *(void *)(v21 + 16);
            uint64_t v25 = *(void *)(v21 + 24);
            *(void *)(v21 + 24) = 0;
            BOOL v26 = v45 != 0;
          }
          else
          {
            uint64_t v25 = 0;
            BOOL v26 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
          if (v23 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v21);
          }
          if (!v24)
          {
            if (v25) {
              (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
            }
            if (!v26) {
              WTF::fastFree((WTF *)v21, v13);
            }
          }
        }
        this = v48;
        uint64_t v48 = 0;
        if (this)
        {
          if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v13);
            return (void *)WTF::fastFree(v43, v44);
          }
        }
      }
    }
  }
  return this;
}

WebKit::RemoteRenderingBackendProxy *WebKit::RemoteDisplayListRecorderProxy::recordDrawVideoFrame(uint64_t a1, uint64_t a2, float *a3, char a4, char a5)
{
  char v10 = 0;
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  BOOL v11 = (atomic_uchar *)(a1 + 3857);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 3857), (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
  if (v10) {
    MEMORY[0x19972E8D0](a1 + 3857);
  }
  unint64_t v12 = *(WebKit::SharedVideoFrameWriter **)(a1 + 3864);
  if (!v12)
  {
    unint64_t v12 = (WebKit::SharedVideoFrameWriter *)WTF::fastMalloc((WTF *)0x18);
    WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter(v12);
    uint64_t v13 = *(void *)(a1 + 3864);
    *(void *)(a1 + 3864) = v12;
    if (v13)
    {
      std::default_delete<WebKit::SharedVideoFrameWriter>::operator()[abi:sn180100](v13);
      unint64_t v12 = *(WebKit::SharedVideoFrameWriter **)(a1 + 3864);
    }
  }
  unint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v14 = &unk_1EE9E9ED0;
  v14[1] = a1;
  *(void *)long long buf = v14;
  uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v15 = &unk_1EE9E9EF8;
  *((void *)v15 + 1) = a1;
  unint64_t v80 = v15;
  WebKit::SharedVideoFrameWriter::write(v12, a2, (uint64_t *)buf, &v80, (uint64_t)v74);
  (*(void (**)(IPC::Encoder *))(*(void *)v15 + 8))(v15);
  __n128 result = (WebKit::RemoteRenderingBackendProxy *)(*(uint64_t (**)(void *))(*v14 + 8))(v14);
  if (v77)
  {
    uint64_t v17 = *(void *)(a1 + 3848);
    if (!v17
      || (__n128 result = *(WebKit::RemoteRenderingBackendProxy **)(v17 + 8)) == 0
      || (__n128 result = (WebKit::RemoteRenderingBackendProxy *)WebKit::RemoteRenderingBackendProxy::connection(result, (atomic_uint **)&v78), !v78))
    {
LABEL_70:
      if (v77 && v76 != -1) {
        __n128 result = (WebKit::RemoteRenderingBackendProxy *)((uint64_t (*)(unsigned char *, uint64_t *))off_1EE9E98A8[v76])(buf, &v75);
      }
      goto LABEL_73;
    }
    uint64_t v18 = *(void *)(a1 + 3832);
    char v19 = 1;
    if (!v18)
    {
      uint64_t v20 = 0;
      goto LABEL_12;
    }
    char v72 = 0;
    uint64_t v20 = *(void *)(a1 + 3840);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v18, (unsigned __int8 *)&v72, 1u, memory_order_acquire, memory_order_acquire);
    if (v72) {
      __n128 result = (WebKit::RemoteRenderingBackendProxy *)MEMORY[0x19972E8D0](v18);
    }
    if (*(void *)(v18 + 24)) {
      ++*(void *)(v18 + 8);
    }
    else {
      uint64_t v20 = 0;
    }
    int v73 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v18, (unsigned __int8 *)&v73, 0, memory_order_release, memory_order_relaxed);
    if (v73 == 1)
    {
      if (!v20) {
        goto LABEL_12;
      }
    }
    else
    {
      __n128 result = (WebKit::RemoteRenderingBackendProxy *)WTF::Lock::unlockSlow((WTF::Lock *)v18);
      if (!v20) {
        goto LABEL_12;
      }
    }
    if (!*(unsigned char *)(v20 + 4016))
    {
      *(unsigned char *)(v20 + 4016) = 1;
      __n128 result = (WebKit::RemoteRenderingBackendProxy *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v20);
      if (result) {
        __n128 result = (WebKit::RemoteRenderingBackendProxy *)(*(uint64_t (**)(WebKit::RemoteRenderingBackendProxy *))(*(void *)result + 160))(result);
      }
    }
    char v19 = 0;
LABEL_12:
    uint64_t v21 = v78;
    uint64_t v22 = *(void *)(a1 + 3824);
    double v23 = *((double *)v78 + 15);
    double v24 = INFINITY;
    if (fabs(v23) != INFINITY)
    {
      WTF::ApproximateTime::now(result);
      double v24 = v23 + v25;
    }
    if (*((void *)v21 + 7) != v22)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v21 + 64, buf, v24);
      if (!buf[16]) {
        goto LABEL_51;
      }
      uint64_t v42 = *(void *)buf;
      unint64_t v43 = *(void *)&buf[8];
      unint64_t v44 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v45 = v44 - *(void *)buf;
      if (v44 < *(void *)buf)
      {
        unint64_t v47 = 0;
        unint64_t v46 = *(void *)&buf[8];
      }
      else
      {
        unint64_t v46 = 0;
        if (v45 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v47 = 0;
        }
        else
        {
          unint64_t v47 = 0;
          if (v45 + 2 <= *(void *)&buf[8])
          {
            *(_WORD *)(*(void *)buf + v45) = 2871;
            unint64_t v46 = v43;
            unint64_t v47 = v45 + 2;
          }
        }
      }
      uint64_t v48 = (void *)((v42 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v48 >= v42 + v47)
      {
        unint64_t v49 = (char *)v48 - v42;
        if ((unint64_t)v48 - v42 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_51;
        }
        unint64_t v47 = (unint64_t)(v49 + 8);
        if ((unint64_t)(v49 + 8) > v46) {
          goto LABEL_51;
        }
        void *v48 = v22;
      }
      if (!v46)
      {
LABEL_51:
        int v56 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v57 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_DrawVideoFrame";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v57;
          _os_log_impl(&dword_1985F2000, v56, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v58 = *(void *)(a1 + 3848);
        if (v58)
        {
          char v59 = *(unsigned char **)(v58 + 8);
          if (v59) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v59);
          }
        }
        goto LABEL_56;
      }
      unint64_t v50 = (*((void *)v21 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v51 = *((void *)v21 + 8);
      if (v50 + 16 >= v51) {
        unint64_t v50 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v52 = v50 + v47;
      if (v51 <= v52) {
        unint64_t v53 = 0;
      }
      else {
        unint64_t v53 = v52;
      }
      *((void *)v21 + 10) = v53;
      unint64_t v54 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v21 + 9) + 16) + 128), v53);
      int v55 = *((_DWORD *)v21 + 29);
      if (v54 == 0x80000000 || v55)
      {
        unsigned int v68 = v55 + 1;
        *((_DWORD *)v21 + 29) = v68;
        if (v68 >= *((_DWORD *)v21 + 28))
        {
          if (*((unsigned char *)v21 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v21 + 23));
          }
          *((_DWORD *)v21 + 29) = 0;
        }
      }
      *((void *)v21 + 7) = v22;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v21 + 64, buf, v24);
    if (buf[16])
    {
      unint64_t v26 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v27 = v26 - *(void *)buf;
      if (v26 < *(void *)buf)
      {
        unint64_t v28 = 0;
      }
      else
      {
        unint64_t v28 = 0;
        if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v27 + 2 <= *(void *)&buf[8])
        {
          *(_WORD *)(*(void *)buf + v27) = 2870;
          unint64_t v28 = v27 + 2;
        }
      }
      unint64_t v29 = (*((void *)v21 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v30 = *((void *)v21 + 8);
      if (v29 + 16 >= v30) {
        unint64_t v29 = 0;
      }
      if (v28 <= 0x10) {
        unint64_t v28 = 16;
      }
      unint64_t v31 = v29 + v28;
      if (v30 <= v31) {
        unint64_t v31 = 0;
      }
      *((void *)v21 + 10) = v31;
      atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v21 + 9) + 16) + 128), v31);
      *((_DWORD *)v21 + 29) = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v79, (uint64_t **)v21 + 1);
      unint64_t v32 = v79;
      unint64_t v33 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unint64_t v33 = 850;
      *((void *)v33 + 1) = v22;
      *((void *)v33 + 66) = (char *)v33 + 16;
      *((void *)v33 + 67) = 512;
      *((void *)v33 + 68) = 0;
      *((void *)v33 + 70) = 0;
      *((void *)v33 + 69) = 0;
      IPC::Encoder::encodeHeader(v33);
      unint64_t v80 = v33;
      IPC::ArgumentCoder<WebKit::SharedVideoFrame,void>::encode(v33, (uint64_t)v74);
      IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v33, a3);
      char v81 = a4;
      IPC::Encoder::operator<<<BOOL>(v33, &v81);
      unint64_t v34 = (unsigned char *)IPC::Encoder::grow(v33, 1uLL, 1);
      if (!v35)
      {
        __break(0xC471u);
        JUMPOUT(0x1990377A4);
      }
      unsigned char *v34 = a5;
      int v37 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v80, 1, 0);
      unint64_t v38 = v80;
      unint64_t v80 = 0;
      if (v38)
      {
        IPC::Encoder::~Encoder(v38, v36);
        WTF::fastFree(v40, v41);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v79);
      if (!v37)
      {
LABEL_56:
        if ((v19 & 1) == 0)
        {
          char v60 = 0;
          uint64_t v61 = *(void *)(v20 + 8);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v61, (unsigned __int8 *)&v60, 1u, memory_order_acquire, memory_order_acquire);
          if (v60) {
            MEMORY[0x19972E8D0](v61);
          }
          uint64_t v62 = *(void *)(v61 + 8);
          int v63 = 1;
          uint64_t v64 = v62 - 1;
          *(void *)(v61 + 8) = v62 - 1;
          if (v62 == 1)
          {
            uint64_t v71 = *(void *)(v61 + 16);
            uint64_t v65 = *(void *)(v61 + 24);
            *(void *)(v61 + 24) = 0;
            BOOL v66 = v71 != 0;
          }
          else
          {
            uint64_t v65 = 0;
            BOOL v66 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v61, (unsigned __int8 *)&v63, 0, memory_order_release, memory_order_relaxed);
          if (v63 == 1)
          {
            if (!v64)
            {
LABEL_63:
              if (v65) {
                (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
              }
              if (!v66) {
                WTF::fastFree((WTF *)v61, v39);
              }
            }
          }
          else
          {
            WTF::Lock::unlockSlow((WTF::Lock *)v61);
            if (!v64) {
              goto LABEL_63;
            }
          }
        }
        __n128 result = v78;
        unint64_t v78 = 0;
        if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)result);
          IPC::StreamClientConnection::~StreamClientConnection(result, v39);
          __n128 result = (WebKit::RemoteRenderingBackendProxy *)WTF::fastFree(v69, v70);
        }
        goto LABEL_70;
      }
    }
    goto LABEL_51;
  }
LABEL_73:
  int v67 = 1;
  atomic_compare_exchange_strong_explicit(v11, (unsigned __int8 *)&v67, 0, memory_order_release, memory_order_relaxed);
  if (v67 != 1) {
    return (WebKit::RemoteRenderingBackendProxy *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
  }
  return result;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordStrokeRect(void *this, const WebCore::FloatRect *a2, float a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  unint64_t v51 = a2;
  float v52 = a3;
  uint64_t v3 = this[481];
  if (v3)
  {
    uint64_t v4 = this;
    this = *(void **)(v3 + 8);
    if (this)
    {
      this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v54);
      uint64_t v5 = v54;
      if (v54)
      {
        uint64_t v6 = (WTF::ApproximateTime *)v4[479];
        if (v6) {
          goto LABEL_82;
        }
        unint64_t v53 = 0;
        while (1)
        {
          uint64_t v7 = v4[478];
          double v8 = *((double *)v5 + 15);
          double v9 = INFINITY;
          if (fabs(v8) != INFINITY)
          {
            WTF::ApproximateTime::now(v6);
            double v9 = v8 + v10;
          }
          if (*((void *)v5 + 7) != v7)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
            if (!buf[16]) {
              goto LABEL_75;
            }
            uint64_t v27 = *(void *)buf;
            unint64_t v28 = *(void *)&buf[8];
            unint64_t v29 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v30 = v29 - *(void *)buf;
            if (v29 < *(void *)buf)
            {
              unint64_t v32 = 0;
              unint64_t v31 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v31 = 0;
              if (v30 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v32 = 0;
              }
              else
              {
                unint64_t v32 = 0;
                if (v30 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v30) = 2871;
                  unint64_t v31 = v28;
                  unint64_t v32 = v30 + 2;
                }
              }
            }
            unint64_t v33 = (v27 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v33 >= v27 + v32)
            {
              unint64_t v34 = v33 - v27;
              if (v34 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_75;
              }
              unint64_t v32 = v34 + 8;
              if (v34 + 8 > v31) {
                goto LABEL_75;
              }
              *(void *)(v27 + v34) = v7;
            }
            if (!v31) {
              goto LABEL_75;
            }
            unint64_t v35 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v36 = *((void *)v5 + 8);
            if (v35 + 16 >= v36) {
              unint64_t v35 = 0;
            }
            if (v32 <= 0x10) {
              unint64_t v32 = 16;
            }
            unint64_t v37 = v35 + v32;
            if (v36 <= v37) {
              unint64_t v38 = 0;
            }
            else {
              unint64_t v38 = v37;
            }
            *((void *)v5 + 10) = v38;
            unint64_t v39 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v38);
            int v40 = *((_DWORD *)v5 + 29);
            if (v39 == 0x80000000 || v40 != 0)
            {
              unsigned int v42 = v40 + 1;
              *((_DWORD *)v5 + 29) = v42;
              if (v42 >= *((_DWORD *)v5 + 28))
              {
                if (*((unsigned char *)v5 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
                }
                *((_DWORD *)v5 + 29) = 0;
              }
            }
            *((void *)v5 + 7) = v7;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, &v55, v9);
          if (!v57) {
            goto LABEL_75;
          }
          *(void *)long long buf = v55;
          *(void *)&buf[8] = v56;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v11 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v12 = v11 >= v55;
          unint64_t v13 = v11 - v55;
          if (v12)
          {
            if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v56)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v55 + v13) = 891;
              *(void *)&uint8_t buf[16] = v13 + 2;
            }
          }
          uint64_t v6 = (WTF::ApproximateTime *)IPC::ArgumentCoder<std::tuple<WebCore::FloatRect const&,float>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<WebCore::FloatRect const&,float>,0ul,1ul>((uint64_t *)buf, (uint64_t)&v51);
          if (*(void *)&buf[8])
          {
            uint64_t v15 = *(void *)&buf[16];
            unint64_t v16 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v17 = *((void *)v5 + 8);
            if (v16 + 16 >= v17) {
              unint64_t v16 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v15 = 16;
            }
            unint64_t v18 = v16 + v15;
            if (v17 <= v18) {
              unint64_t v18 = 0;
            }
            *((void *)v5 + 10) = v18;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v18) == 0x80000000
              || *((_DWORD *)v5 + 29))
            {
              if (*((unsigned char *)v5 + 104)) {
                MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
              }
              *((_DWORD *)v5 + 29) = 0;
            }
            goto LABEL_24;
          }
          if (v57) {
            break;
          }
          __break(1u);
LABEL_82:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6, v4[480], &v53);
          uint64_t v6 = v53;
          if (v53 && !*((unsigned char *)v53 + 4016))
          {
            *((unsigned char *)v53 + 4016) = 1;
            uint64_t v6 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v6);
          }
        }
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, v55, v56);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v5 + 1);
        int v46 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeRect>(*(uint64_t *)buf, (uint64_t)&v51, v7);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        if (!v46) {
          goto LABEL_24;
        }
LABEL_75:
        unint64_t v47 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v48 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_StrokeRect";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v48;
          _os_log_impl(&dword_1985F2000, v47, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v49 = v4[481];
        if (v49)
        {
          unint64_t v50 = *(unsigned char **)(v49 + 8);
          if (v50) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v50);
          }
        }
LABEL_24:
        char v19 = v53;
        unint64_t v53 = 0;
        if (v19)
        {
          char v20 = 0;
          uint64_t v21 = *((void *)v19 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
          if (v20) {
            MEMORY[0x19972E8D0](v21);
          }
          uint64_t v22 = *(void *)(v21 + 8);
          int v23 = 1;
          uint64_t v24 = v22 - 1;
          *(void *)(v21 + 8) = v22 - 1;
          if (v22 == 1)
          {
            uint64_t v45 = *(void *)(v21 + 16);
            uint64_t v25 = *(void *)(v21 + 24);
            *(void *)(v21 + 24) = 0;
            BOOL v26 = v45 != 0;
          }
          else
          {
            uint64_t v25 = 0;
            BOOL v26 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
          if (v23 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v21);
          }
          if (!v24)
          {
            if (v25) {
              (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
            }
            if (!v26) {
              WTF::fastFree((WTF *)v21, v14);
            }
          }
        }
        this = v54;
        unint64_t v54 = 0;
        if (this)
        {
          if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v14);
            return (void *)WTF::fastFree(v43, v44);
          }
        }
      }
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordStrokeLine(void *this, PathDataLine *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  unint64_t v54 = a2;
  uint64_t v2 = this[481];
  if (v2)
  {
    uint64_t v3 = this;
    this = *(void **)(v2 + 8);
    if (this)
    {
      this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v56);
      uint64_t v4 = v56;
      if (v56)
      {
        uint64_t v5 = (WebKit::RemoteImageBufferProxy *)v3[479];
        if (v5)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v5, v3[480], &v55);
          uint64_t v5 = v55;
          if (v55 && !*((unsigned char *)v55 + 4016))
          {
            *((unsigned char *)v55 + 4016) = 1;
            uint64_t v5 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v5);
          }
        }
        else
        {
          unint64_t v55 = 0;
        }
        uint64_t v6 = v3[478];
        double v7 = *((double *)v4 + 15);
        double v8 = INFINITY;
        if (fabs(v7) != INFINITY)
        {
          WTF::ApproximateTime::now(v5);
          double v8 = v7 + v9;
        }
        if (*((void *)v4 + 7) == v6)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, &v57, v8);
            if (!v59) {
              break;
            }
            *(void *)long long buf = v57;
            *(void *)&buf[8] = v58;
            *(void *)&uint8_t buf[16] = 0;
            unint64_t v10 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
            BOOL v11 = v10 >= v57;
            unint64_t v12 = v10 - v57;
            if (v11)
            {
              if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v58)
              {
                *(void *)&buf[8] = 0;
              }
              else
              {
                *(_WORD *)(v57 + v12) = 886;
                *(void *)&uint8_t buf[16] = v12 + 2;
              }
            }
            IPC::ArgumentCoder<WebCore::PathDataLine,void>::encode((uint64_t *)buf, v54);
            if (*(void *)&buf[8])
            {
              uint64_t v15 = *(void *)&buf[16];
              unint64_t v16 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v17 = *((void *)v4 + 8);
              if (v16 + 16 >= v17) {
                unint64_t v16 = 0;
              }
              if (*(void *)&buf[16] <= 0x10uLL) {
                uint64_t v15 = 16;
              }
              unint64_t v18 = v16 + v15;
              if (v17 <= v18) {
                unint64_t v18 = 0;
              }
              *((void *)v4 + 10) = v18;
              unint64_t v19 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v18);
              int v20 = *((_DWORD *)v4 + 29);
              if (v19 == 0x80000000 || v20 != 0)
              {
                unsigned int v30 = v20 + 1;
                *((_DWORD *)v4 + 29) = v30;
                if (v30 >= *((_DWORD *)v4 + 28))
                {
                  if (*((unsigned char *)v4 + 104)) {
                    MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                  }
                  *((_DWORD *)v4 + 29) = 0;
                }
              }
              goto LABEL_27;
            }
            uint64_t v31 = v59;
            if (v59)
            {
              IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v4, v57, v58);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v4 + 1);
              int v49 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeLine>(*(uint64_t *)buf, (float **)&v54, v6);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
              if (!v49) {
                goto LABEL_27;
              }
              break;
            }
            __break(1u);
LABEL_90:
            unint64_t v35 = 0;
            unint64_t v34 = v14;
LABEL_52:
            unint64_t v36 = (v31 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v36 >= v31 + v35)
            {
              unint64_t v37 = v36 - v31;
              if (v37 > 0xFFFFFFFFFFFFFFF7) {
                break;
              }
              unint64_t v35 = v37 + 8;
              if (v37 + 8 > v34) {
                break;
              }
              *(void *)(v31 + v37) = v6;
            }
            if (!v34) {
              break;
            }
            unint64_t v38 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v39 = *((void *)v4 + 8);
            if (v38 + 16 >= v39) {
              unint64_t v38 = 0;
            }
            if (v35 <= 0x10) {
              unint64_t v35 = 16;
            }
            unint64_t v40 = v38 + v35;
            if (v39 <= v40) {
              unint64_t v41 = 0;
            }
            else {
              unint64_t v41 = v40;
            }
            *((void *)v4 + 10) = v41;
            unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v41);
            int v43 = *((_DWORD *)v4 + 29);
            if (v42 == 0x80000000 || v43 != 0)
            {
              unsigned int v45 = v43 + 1;
              *((_DWORD *)v4 + 29) = v45;
              if (v45 >= *((_DWORD *)v4 + 28))
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                }
                *((_DWORD *)v4 + 29) = 0;
              }
            }
            *((void *)v4 + 7) = v6;
          }
        }
        else
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, buf, v8);
          if (buf[16])
          {
            uint64_t v31 = *(void *)buf;
            unint64_t v14 = *(void *)&buf[8];
            unint64_t v32 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v33 = v32 - *(void *)buf;
            if (v32 < *(void *)buf) {
              goto LABEL_90;
            }
            unint64_t v34 = 0;
            if (v33 > 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v35 = 0;
            }
            else
            {
              unint64_t v35 = 0;
              if (v33 + 2 <= *(void *)&buf[8])
              {
                *(_WORD *)(*(void *)buf + v33) = 2871;
                unint64_t v34 = v14;
                unint64_t v35 = v33 + 2;
              }
            }
            goto LABEL_52;
          }
        }
        unint64_t v50 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v51 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_StrokeLine";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v51;
          _os_log_impl(&dword_1985F2000, v50, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v52 = v3[481];
        if (v52)
        {
          unint64_t v53 = *(unsigned char **)(v52 + 8);
          if (v53) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v53);
          }
        }
LABEL_27:
        uint64_t v22 = v55;
        unint64_t v55 = 0;
        if (v22)
        {
          char v23 = 0;
          uint64_t v24 = *((void *)v22 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v23, 1u, memory_order_acquire, memory_order_acquire);
          if (v23) {
            MEMORY[0x19972E8D0](v24);
          }
          uint64_t v25 = *(void *)(v24 + 8);
          int v26 = 1;
          uint64_t v27 = v25 - 1;
          *(void *)(v24 + 8) = v25 - 1;
          if (v25 == 1)
          {
            uint64_t v48 = *(void *)(v24 + 16);
            uint64_t v28 = *(void *)(v24 + 24);
            *(void *)(v24 + 24) = 0;
            BOOL v29 = v48 != 0;
          }
          else
          {
            uint64_t v28 = 0;
            BOOL v29 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
          if (v26 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v24);
          }
          if (!v27)
          {
            if (v28) {
              (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
            }
            if (!v29) {
              WTF::fastFree((WTF *)v24, v13);
            }
          }
        }
        this = v56;
        unint64_t v56 = 0;
        if (this)
        {
          if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v13);
            return (void *)WTF::fastFree(v46, v47);
          }
        }
      }
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordStrokeLineWithColorAndThickness(void *result, float *a2, uint64_t *a3)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = result[481];
  if (!v3) {
    return result;
  }
  uint64_t v4 = result;
  __n128 result = *(void **)(v3 + 8);
  if (!result) {
    return result;
  }
  __n128 result = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (atomic_uint **)&v74);
  double v7 = v74;
  if (!v74) {
    return result;
  }
  double v8 = (WebKit::RemoteImageBufferProxy *)v4[479];
  if (v8)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v8, v4[480], &v73);
    double v8 = v73;
    if (v73 && !*((unsigned char *)v73 + 4016))
    {
      *((unsigned char *)v73 + 4016) = 1;
      double v8 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v8);
    }
  }
  else
  {
    int v73 = 0;
  }
  uint64_t v9 = v4[478];
  double v10 = *((double *)v7 + 15);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now(v8);
    double v11 = v10 + v12;
  }
  if (*((void *)v7 + 7) == v9) {
    goto LABEL_9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v7 + 64, buf, v11);
  if (!buf[16]) {
    goto LABEL_95;
  }
  uint64_t v34 = *(void *)buf;
  unint64_t v35 = *(void *)&buf[8];
  unint64_t v36 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - *(void *)buf;
  BOOL v38 = v36 >= *(void *)buf;
  unint64_t v39 = v36 - *(void *)buf + 2;
  BOOL v41 = v37 < 0xFFFFFFFFFFFFFFFELL && v39 <= *(void *)&buf[8];
  if (v38 && v41) {
    goto LABEL_56;
  }
  if (!v38)
  {
    unint64_t v39 = 0;
    goto LABEL_57;
  }
  unint64_t v42 = 0;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v39 = 0;
    goto LABEL_58;
  }
  unint64_t v39 = 0;
  if (v37 + 2 <= *(void *)&buf[8])
  {
    unint64_t v39 = v37 + 2;
LABEL_56:
    *(_WORD *)(*(void *)buf + v37) = 2871;
LABEL_57:
    unint64_t v42 = v35;
  }
LABEL_58:
  unint64_t v43 = (v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v43 >= v34 + v39)
  {
    unint64_t v44 = v43 - v34;
    if (v44 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_95;
    }
    unint64_t v39 = v44 + 8;
    if (v44 + 8 > v42) {
      goto LABEL_95;
    }
    *(void *)(v34 + v44) = v9;
  }
  if (!v42)
  {
LABEL_95:
    BOOL v66 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      int v67 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_StrokeLineWithColorAndThickness";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v67;
      _os_log_impl(&dword_1985F2000, v66, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v68 = v4[481];
    if (v68)
    {
      unint64_t v69 = *(unsigned char **)(v68 + 8);
      if (v69) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v69);
      }
    }
    goto LABEL_27;
  }
  unint64_t v45 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v46 = *((void *)v7 + 8);
  if (v45 + 16 >= v46) {
    unint64_t v45 = 0;
  }
  if (v39 <= 0x10) {
    unint64_t v39 = 16;
  }
  unint64_t v47 = v45 + v39;
  if (v46 <= v47) {
    unint64_t v48 = 0;
  }
  else {
    unint64_t v48 = v47;
  }
  *((void *)v7 + 10) = v48;
  unint64_t v49 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v48);
  int v50 = *((_DWORD *)v7 + 29);
  if (v49 == 0x80000000 || v50 != 0)
  {
    unsigned int v52 = v50 + 1;
    *((_DWORD *)v7 + 29) = v52;
    if (v52 >= *((_DWORD *)v7 + 28))
    {
      if (*((unsigned char *)v7 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v7 + 23));
      }
      *((_DWORD *)v7 + 29) = 0;
    }
  }
  *((void *)v7 + 7) = v9;
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v7 + 64, &v76, v11);
  if (!v78) {
    goto LABEL_95;
  }
  *(void *)long long buf = v76;
  *(void *)&buf[8] = v77;
  *(void *)&uint8_t buf[16] = 0;
  unint64_t v13 = (v76 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v14 = v13 >= v76;
  unint64_t v15 = v13 - v76;
  if (v14)
  {
    if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v77)
    {
      *(void *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v76 + v15) = 887;
      *(void *)&uint8_t buf[16] = v15 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::PathDataLine,void>::encode((uint64_t *)buf, a2);
  IPC::ArgumentCoder<WebCore::DisplayList::SetInlineStroke,void>::encode(buf, a3);
  if (!*(void *)&buf[8])
  {
    uint64_t v72 = v9;
    unint64_t v56 = v78;
    if (v78)
    {
      unint64_t v57 = (v76 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v58 = v57 - v76;
      if (v57 < v76)
      {
        unint64_t v56 = 0;
      }
      else
      {
        unint64_t v56 = 0;
        if (v58 <= 0xFFFFFFFFFFFFFFFDLL && v58 + 2 <= v77)
        {
          *(_WORD *)(v76 + v58) = 2870;
          unint64_t v56 = v58 + 2;
        }
      }
      unint64_t v59 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v17 = *((void *)v7 + 8);
      if (v59 + 16 < v17)
      {
LABEL_88:
        if (v56 <= 0x10) {
          unint64_t v56 = 16;
        }
        unint64_t v60 = v59 + v56;
        if (v17 <= v60) {
          unint64_t v60 = 0;
        }
        *((void *)v7 + 10) = v60;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v60);
        *((_DWORD *)v7 + 29) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v75, (uint64_t **)v7 + 1);
        uint64_t v61 = v75;
        uint64_t v62 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v62 = 887;
        *((void *)v62 + 1) = v72;
        *((void *)v62 + 66) = (char *)v62 + 16;
        *((void *)v62 + 67) = 512;
        *((void *)v62 + 68) = 0;
        *((void *)v62 + 70) = 0;
        *((void *)v62 + 69) = 0;
        IPC::Encoder::encodeHeader(v62);
        *(void *)long long buf = v62;
        IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(v62, a2);
        IPC::ArgumentCoder<WebCore::DisplayList::SetInlineStroke,void>::encode(v62, a3);
        int v64 = IPC::Connection::sendMessageImpl((uint64_t)v61, (uint64_t *)buf, 1, 0);
        uint64_t v65 = *(IPC::Encoder **)buf;
        *(void *)long long buf = 0;
        if (v65)
        {
          IPC::Encoder::~Encoder(v65, v63);
          WTF::fastFree(v70, v71);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v75);
        if (!v64) {
          goto LABEL_27;
        }
        goto LABEL_95;
      }
    }
    else
    {
      __break(1u);
    }
    unint64_t v59 = 0;
    goto LABEL_88;
  }
  uint64_t v18 = *(void *)&buf[16];
  unint64_t v19 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = *((void *)v7 + 8);
  if (v19 + 16 >= v20) {
    unint64_t v19 = 0;
  }
  if (*(void *)&buf[16] <= 0x10uLL) {
    uint64_t v18 = 16;
  }
  unint64_t v21 = v19 + v18;
  if (v20 <= v21) {
    unint64_t v21 = 0;
  }
  *((void *)v7 + 10) = v21;
  unint64_t v22 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v21);
  int v23 = *((_DWORD *)v7 + 29);
  if (v22 == 0x80000000 || v23 != 0)
  {
    unsigned int v33 = v23 + 1;
    *((_DWORD *)v7 + 29) = v33;
    if (v33 >= *((_DWORD *)v7 + 28))
    {
      if (*((unsigned char *)v7 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v7 + 23));
      }
      *((_DWORD *)v7 + 29) = 0;
    }
  }
LABEL_27:
  uint64_t v25 = v73;
  int v73 = 0;
  if (v25)
  {
    char v26 = 0;
    uint64_t v27 = *((void *)v25 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v27, (unsigned __int8 *)&v26, 1u, memory_order_acquire, memory_order_acquire);
    if (v26) {
      MEMORY[0x19972E8D0](v27);
    }
    uint64_t v28 = *(void *)(v27 + 8);
    int v29 = 1;
    uint64_t v30 = v28 - 1;
    *(void *)(v27 + 8) = v28 - 1;
    if (v28 == 1)
    {
      uint64_t v55 = *(void *)(v27 + 16);
      uint64_t v31 = *(void *)(v27 + 24);
      *(void *)(v27 + 24) = 0;
      BOOL v32 = v55 != 0;
    }
    else
    {
      uint64_t v31 = 0;
      BOOL v32 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v27, (unsigned __int8 *)&v29, 0, memory_order_release, memory_order_relaxed);
    if (v29 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v27);
    }
    if (!v30)
    {
      if (v31) {
        (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
      }
      if (!v32) {
        WTF::fastFree((WTF *)v27, v16);
      }
    }
  }
  __n128 result = v74;
  uint64_t v74 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result, v16);
      return (void *)WTF::fastFree(v53, v54);
    }
  }
  return result;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordStrokeArc(void *this, const PathArc *a2)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this[481];
  if (!v2) {
    return this;
  }
  uint64_t v3 = this;
  this = *(void **)(v2 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v106);
  uint64_t v5 = v106;
  if (!v106) {
    return this;
  }
  uint64_t v6 = (WebKit::RemoteImageBufferProxy *)v3[479];
  if (v6)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6, v3[480], &v105);
    uint64_t v6 = v105;
    if (v105 && !*((unsigned char *)v105 + 4016))
    {
      *((unsigned char *)v105 + 4016) = 1;
      uint64_t v6 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v6);
    }
  }
  else
  {
    v105 = 0;
  }
  uint64_t v7 = v3[478];
  double v8 = *((double *)v5 + 15);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now(v6);
    double v9 = v8 + v10;
  }
  if (*((void *)v5 + 7) == v7) {
    goto LABEL_9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
  if (!buf[16]) {
    goto LABEL_145;
  }
  uint64_t v66 = *(void *)buf;
  unint64_t v67 = *(void *)&buf[8];
  unint64_t v68 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v69 = v68 - *(void *)buf;
  BOOL v70 = v68 >= *(void *)buf;
  unint64_t v71 = v68 - *(void *)buf + 2;
  BOOL v73 = v69 < 0xFFFFFFFFFFFFFFFELL && v71 <= *(void *)&buf[8];
  if (v70 && v73) {
    goto LABEL_107;
  }
  if (!v70)
  {
    unint64_t v71 = 0;
    goto LABEL_108;
  }
  unint64_t v74 = 0;
  if (v69 > 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v71 = 0;
    goto LABEL_109;
  }
  unint64_t v71 = 0;
  if (v69 + 2 <= *(void *)&buf[8])
  {
    unint64_t v71 = v69 + 2;
LABEL_107:
    *(_WORD *)(*(void *)buf + v69) = 2871;
LABEL_108:
    unint64_t v74 = v67;
  }
LABEL_109:
  uint64_t v75 = (void *)((v66 + v71 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v75 >= v66 + v71)
  {
    unint64_t v76 = (char *)v75 - v66;
    if ((unint64_t)v75 - v66 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_145;
    }
    unint64_t v71 = (unint64_t)(v76 + 8);
    if ((unint64_t)(v76 + 8) > v74) {
      goto LABEL_145;
    }
    *uint64_t v75 = v7;
  }
  if (!v74)
  {
LABEL_145:
    v96 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      v97 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_StrokeArc";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v97;
      _os_log_impl(&dword_1985F2000, v96, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v98 = v3[481];
    if (v98)
    {
      v99 = *(unsigned char **)(v98 + 8);
      if (v99) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v99);
      }
    }
    goto LABEL_78;
  }
  unint64_t v77 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v78 = *((void *)v5 + 8);
  if (v77 + 16 >= v78) {
    unint64_t v77 = 0;
  }
  if (v71 <= 0x10) {
    unint64_t v71 = 16;
  }
  unint64_t v79 = v77 + v71;
  if (v78 <= v79) {
    unint64_t v80 = 0;
  }
  else {
    unint64_t v80 = v79;
  }
  *((void *)v5 + 10) = v80;
  unint64_t v81 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v80);
  int v82 = *((_DWORD *)v5 + 29);
  if (v81 == 0x80000000 || v82 != 0)
  {
    unsigned int v84 = v82 + 1;
    *((_DWORD *)v5 + 29) = v84;
    if (v84 >= *((_DWORD *)v5 + 28))
    {
      if (*((unsigned char *)v5 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
      }
      *((_DWORD *)v5 + 29) = 0;
    }
  }
  *((void *)v5 + 7) = v7;
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
  if (!buf[16]) {
    goto LABEL_145;
  }
  uint64_t v12 = *(void *)buf;
  unint64_t v13 = *(void *)&buf[8];
  unint64_t v14 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v15 = v14 - *(void *)buf;
  BOOL v16 = v14 >= *(void *)buf;
  unint64_t v17 = v14 - *(void *)buf + 2;
  BOOL v19 = v15 < 0xFFFFFFFFFFFFFFFELL && v17 <= *(void *)&buf[8];
  if (v16 && v19) {
    goto LABEL_18;
  }
  if (!v16)
  {
    unint64_t v17 = 0;
    goto LABEL_19;
  }
  unint64_t v20 = 0;
  if (v15 > 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v17 = 0;
  }
  else
  {
    unint64_t v17 = 0;
    if (v15 + 2 <= *(void *)&buf[8])
    {
      unint64_t v17 = v15 + 2;
LABEL_18:
      *(_WORD *)(*(void *)buf + v15) = 882;
LABEL_19:
      unint64_t v20 = v13;
    }
  }
  unint64_t v21 = (v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = v21 - (v12 + v17);
  BOOL v23 = v21 >= v12 + v17;
  unint64_t v24 = v21 - v12;
  BOOL v26 = v22 + v17 < 0xFFFFFFFFFFFFFFFCLL && v22 + v17 + 4 <= v20;
  if (v23 && v26)
  {
    v17 += v22 + 4;
  }
  else
  {
    if (!v23) {
      goto LABEL_30;
    }
    unint64_t v27 = 0;
    unint64_t v24 = v22 + v17;
    if (v22 + v17 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > v20) {
      goto LABEL_31;
    }
    unint64_t v17 = v24 + 4;
  }
  *(float *)(v12 + v24) = a2->center.m_x;
LABEL_30:
  unint64_t v27 = v20;
LABEL_31:
  unint64_t v28 = (v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v29 = v28 - (v12 + v17);
  BOOL v30 = v28 >= v12 + v17;
  unint64_t v31 = v28 - v12;
  BOOL v33 = v29 + v17 < 0xFFFFFFFFFFFFFFFCLL && v29 + v17 + 4 <= v27;
  if (v30 && v33)
  {
    v17 += v29 + 4;
  }
  else
  {
    if (!v30) {
      goto LABEL_41;
    }
    unint64_t v34 = 0;
    unint64_t v31 = v29 + v17;
    if (v29 + v17 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > v27) {
      goto LABEL_42;
    }
    unint64_t v17 = v31 + 4;
  }
  *(float *)(v12 + v31) = a2->center.m_y;
LABEL_41:
  unint64_t v34 = v27;
LABEL_42:
  unint64_t v35 = (v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v36 = v35 - (v12 + v17);
  BOOL v37 = v35 >= v12 + v17;
  unint64_t v38 = v35 - v12;
  BOOL v40 = v36 + v17 < 0xFFFFFFFFFFFFFFFCLL && v36 + v17 + 4 <= v34;
  if (v37 && v40)
  {
    v17 += v36 + 4;
  }
  else
  {
    if (!v37) {
      goto LABEL_52;
    }
    unint64_t v41 = 0;
    unint64_t v38 = v36 + v17;
    if (v36 + v17 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > v34) {
      goto LABEL_53;
    }
    unint64_t v17 = v38 + 4;
  }
  *(float *)(v12 + v38) = a2->radius;
LABEL_52:
  unint64_t v41 = v34;
LABEL_53:
  unint64_t v42 = (v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v43 = v42 - (v12 + v17);
  BOOL v44 = v42 >= v12 + v17;
  unint64_t v45 = v42 - v12;
  BOOL v47 = v43 + v17 < 0xFFFFFFFFFFFFFFFCLL && v43 + v17 + 4 <= v41;
  if (v44 && v47)
  {
    v17 += v43 + 4;
LABEL_62:
    *(float *)(v12 + v45) = a2->startAngle;
LABEL_63:
    unint64_t v48 = v41;
    goto LABEL_64;
  }
  if (!v44) {
    goto LABEL_63;
  }
  unint64_t v48 = 0;
  unint64_t v45 = v43 + v17;
  if (v43 + v17 <= 0xFFFFFFFFFFFFFFFBLL && v45 + 4 <= v41)
  {
    unint64_t v17 = v45 + 4;
    goto LABEL_62;
  }
LABEL_64:
  unint64_t v49 = (float *)((v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v49 >= v12 + v17)
  {
    int v50 = (char *)v49 - v12;
    if ((unint64_t)v49 - v12 > 0xFFFFFFFFFFFFFFFBLL
      || (unint64_t v17 = (unint64_t)(v50 + 4), (unint64_t)(v50 + 4) > v48))
    {
LABEL_131:
      if (buf[16])
      {
        unint64_t v85 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v86 = v85 - *(void *)buf;
        if (v85 < *(void *)buf)
        {
          unint64_t v87 = 0;
        }
        else
        {
          unint64_t v87 = 0;
          if (v86 <= 0xFFFFFFFFFFFFFFFDLL && v86 + 2 <= *(void *)&buf[8])
          {
            *(_WORD *)(*(void *)buf + v86) = 2870;
            unint64_t v87 = v86 + 2;
          }
        }
        unint64_t v88 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v89 = *((void *)v5 + 8);
        if (v88 + 16 >= v89) {
          unint64_t v88 = 0;
        }
        if (v87 <= 0x10) {
          unint64_t v87 = 16;
        }
        unint64_t v90 = v88 + v87;
        if (v89 <= v90) {
          unint64_t v90 = 0;
        }
        *((void *)v5 + 10) = v90;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v90);
        *((_DWORD *)v5 + 29) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v107, (uint64_t **)v5 + 1);
        uint64_t v91 = v107;
        v92 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)v92 = 882;
        *((void *)v92 + 1) = v7;
        *((void *)v92 + 66) = (char *)v92 + 16;
        *((void *)v92 + 67) = 512;
        *((void *)v92 + 68) = 0;
        *((void *)v92 + 70) = 0;
        *((void *)v92 + 69) = 0;
        IPC::Encoder::encodeHeader(v92);
        v108 = v92;
        IPC::ArgumentCoder<WebCore::PathArc,void>::encode(v92, (uint64_t)a2);
        int v94 = IPC::Connection::sendMessageImpl((uint64_t)v91, (uint64_t *)&v108, 1, 0);
        v95 = v108;
        v108 = 0;
        if (v95)
        {
          IPC::Encoder::~Encoder(v95, v93);
          WTF::fastFree(v103, v104);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v107);
        if (!v94) {
          goto LABEL_78;
        }
      }
      else
      {
        __break(1u);
      }
      goto LABEL_145;
    }
    float *v49 = a2->endAngle;
  }
  if (v17 >= v48) {
    goto LABEL_131;
  }
  *(unsigned char *)(v12 + v17) = a2->direction;
  unint64_t v51 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v52 = *((void *)v5 + 8);
  if (v51 + 16 >= v52) {
    unint64_t v51 = 0;
  }
  if (v17 <= 0xF) {
    unint64_t v17 = 15;
  }
  unint64_t v53 = v17 + v51;
  if (v52 > v53 + 1) {
    unint64_t v54 = v53 + 1;
  }
  else {
    unint64_t v54 = 0;
  }
  *((void *)v5 + 10) = v54;
  unint64_t v55 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v54);
  int v56 = *((_DWORD *)v5 + 29);
  if (v55 == 0x80000000 || v56)
  {
    unsigned int v65 = v56 + 1;
    *((_DWORD *)v5 + 29) = v65;
    if (v65 >= *((_DWORD *)v5 + 28))
    {
      if (*((unsigned char *)v5 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
      }
      *((_DWORD *)v5 + 29) = 0;
    }
  }
LABEL_78:
  unint64_t v57 = v105;
  v105 = 0;
  if (v57)
  {
    char v58 = 0;
    uint64_t v59 = *((void *)v57 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v59, (unsigned __int8 *)&v58, 1u, memory_order_acquire, memory_order_acquire);
    if (v58) {
      MEMORY[0x19972E8D0](v59);
    }
    uint64_t v60 = *(void *)(v59 + 8);
    int v61 = 1;
    uint64_t v62 = v60 - 1;
    *(void *)(v59 + 8) = v60 - 1;
    if (v60 == 1)
    {
      uint64_t v102 = *(void *)(v59 + 16);
      uint64_t v63 = *(void *)(v59 + 24);
      *(void *)(v59 + 24) = 0;
      BOOL v64 = v102 != 0;
    }
    else
    {
      uint64_t v63 = 0;
      BOOL v64 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v59, (unsigned __int8 *)&v61, 0, memory_order_release, memory_order_relaxed);
    if (v61 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v59);
    }
    if (!v62)
    {
      if (v63) {
        (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
      }
      if (!v64) {
        WTF::fastFree((WTF *)v59, v11);
      }
    }
  }
  this = v106;
  v106 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v11);
      return (void *)WTF::fastFree(v100, v101);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordStrokeClosedArc(void *this, const PathClosedArc *a2)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this[481];
  if (!v2) {
    return this;
  }
  uint64_t v3 = this;
  this = *(void **)(v2 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v106);
  uint64_t v5 = v106;
  if (!v106) {
    return this;
  }
  uint64_t v6 = (WTF::ApproximateTime *)v3[479];
  if (v6) {
    goto LABEL_153;
  }
  v105 = 0;
  while (1)
  {
    uint64_t v7 = v3[478];
    double v8 = *((double *)v5 + 15);
    double v9 = INFINITY;
    if (fabs(v8) != INFINITY)
    {
      WTF::ApproximateTime::now(v6);
      double v9 = v8 + v10;
    }
    if (*((void *)v5 + 7) == v7) {
      goto LABEL_9;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
    if (!buf[16]) {
      goto LABEL_145;
    }
    uint64_t v66 = *(void *)buf;
    unint64_t v67 = *(void *)&buf[8];
    unint64_t v68 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v69 = v68 - *(void *)buf;
    BOOL v70 = v68 >= *(void *)buf;
    unint64_t v71 = v68 - *(void *)buf + 2;
    BOOL v73 = v69 < 0xFFFFFFFFFFFFFFFELL && v71 <= *(void *)&buf[8];
    if (v70 && v73) {
      goto LABEL_107;
    }
    if (!v70)
    {
      unint64_t v71 = 0;
      goto LABEL_108;
    }
    unint64_t v74 = 0;
    if (v69 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v71 = 0;
      goto LABEL_109;
    }
    unint64_t v71 = 0;
    if (v69 + 2 <= *(void *)&buf[8])
    {
      unint64_t v71 = v69 + 2;
LABEL_107:
      *(_WORD *)(*(void *)buf + v69) = 2871;
LABEL_108:
      unint64_t v74 = v67;
    }
LABEL_109:
    uint64_t v75 = (void *)((v66 + v71 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v75 >= v66 + v71)
    {
      unint64_t v76 = (char *)v75 - v66;
      if ((unint64_t)v75 - v66 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_145;
      }
      unint64_t v71 = (unint64_t)(v76 + 8);
      if ((unint64_t)(v76 + 8) > v74) {
        goto LABEL_145;
      }
      *uint64_t v75 = v7;
    }
    if (!v74) {
      goto LABEL_145;
    }
    unint64_t v77 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v78 = *((void *)v5 + 8);
    if (v77 + 16 >= v78) {
      unint64_t v77 = 0;
    }
    if (v71 <= 0x10) {
      unint64_t v71 = 16;
    }
    unint64_t v79 = v77 + v71;
    if (v78 <= v79) {
      unint64_t v80 = 0;
    }
    else {
      unint64_t v80 = v79;
    }
    *((void *)v5 + 10) = v80;
    unint64_t v81 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v80);
    int v82 = *((_DWORD *)v5 + 29);
    if (v81 == 0x80000000 || v82 != 0)
    {
      unsigned int v84 = v82 + 1;
      *((_DWORD *)v5 + 29) = v84;
      if (v84 >= *((_DWORD *)v5 + 28))
      {
        if (*((unsigned char *)v5 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
        }
        *((_DWORD *)v5 + 29) = 0;
      }
    }
    *((void *)v5 + 7) = v7;
LABEL_9:
    uint64_t v6 = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
    if (!buf[16]) {
      goto LABEL_145;
    }
    uint64_t v12 = *(void *)buf;
    unint64_t v13 = *(void *)&buf[8];
    unint64_t v14 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v15 = v14 - *(void *)buf;
    BOOL v16 = v14 >= *(void *)buf;
    unint64_t v17 = v14 - *(void *)buf + 2;
    BOOL v19 = v15 < 0xFFFFFFFFFFFFFFFELL && v17 <= *(void *)&buf[8];
    if (v16 && v19) {
      goto LABEL_18;
    }
    if (!v16)
    {
      unint64_t v17 = 0;
      goto LABEL_19;
    }
    unint64_t v20 = 0;
    if (v15 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v17 = 0;
    }
    else
    {
      unint64_t v17 = 0;
      if (v15 + 2 <= *(void *)&buf[8])
      {
        unint64_t v17 = v15 + 2;
LABEL_18:
        *(_WORD *)(*(void *)buf + v15) = 884;
LABEL_19:
        unint64_t v20 = v13;
      }
    }
    unint64_t v21 = (v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v22 = v21 - (v12 + v17);
    BOOL v23 = v21 >= v12 + v17;
    unint64_t v24 = v21 - v12;
    BOOL v25 = v22 + v17 >= 0xFFFFFFFFFFFFFFFCLL || v22 + v17 + 4 > v20;
    BOOL v26 = !v25;
    if (v23 && v26)
    {
      v17 += v22 + 4;
    }
    else
    {
      if (!v23) {
        goto LABEL_30;
      }
      unint64_t v27 = 0;
      unint64_t v24 = v22 + v17;
      if (v22 + v17 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > v20) {
        goto LABEL_31;
      }
      unint64_t v17 = v24 + 4;
    }
    *(float *)(v12 + v24) = a2->arc.center.m_x;
LABEL_30:
    unint64_t v27 = v20;
LABEL_31:
    unint64_t v28 = (v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v29 = v28 - (v12 + v17);
    BOOL v30 = v28 >= v12 + v17;
    unint64_t v31 = v28 - v12;
    BOOL v32 = v29 + v17 >= 0xFFFFFFFFFFFFFFFCLL || v29 + v17 + 4 > v27;
    BOOL v33 = !v32;
    if (v30 && v33)
    {
      v17 += v29 + 4;
    }
    else
    {
      if (!v30) {
        goto LABEL_41;
      }
      unint64_t v34 = 0;
      unint64_t v31 = v29 + v17;
      if (v29 + v17 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > v27) {
        goto LABEL_42;
      }
      unint64_t v17 = v31 + 4;
    }
    *(float *)(v12 + v31) = a2->arc.center.m_y;
LABEL_41:
    unint64_t v34 = v27;
LABEL_42:
    unint64_t v35 = (v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v36 = v35 - (v12 + v17);
    BOOL v37 = v35 >= v12 + v17;
    unint64_t v38 = v35 - v12;
    BOOL v39 = v36 + v17 >= 0xFFFFFFFFFFFFFFFCLL || v36 + v17 + 4 > v34;
    BOOL v40 = !v39;
    if (v37 && v40)
    {
      v17 += v36 + 4;
    }
    else
    {
      if (!v37) {
        goto LABEL_52;
      }
      unint64_t v41 = 0;
      unint64_t v38 = v36 + v17;
      if (v36 + v17 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > v34) {
        goto LABEL_53;
      }
      unint64_t v17 = v38 + 4;
    }
    *(float *)(v12 + v38) = a2->arc.radius;
LABEL_52:
    unint64_t v41 = v34;
LABEL_53:
    unint64_t v42 = (v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v43 = v42 - (v12 + v17);
    BOOL v44 = v42 >= v12 + v17;
    unint64_t v45 = v42 - v12;
    BOOL v47 = v43 + v17 < 0xFFFFFFFFFFFFFFFCLL && v43 + v17 + 4 <= v41;
    if (v44 && v47)
    {
      v17 += v43 + 4;
LABEL_62:
      *(float *)(v12 + v45) = a2->arc.startAngle;
LABEL_63:
      unint64_t v48 = v41;
      goto LABEL_64;
    }
    if (!v44) {
      goto LABEL_63;
    }
    unint64_t v48 = 0;
    unint64_t v45 = v43 + v17;
    if (v43 + v17 <= 0xFFFFFFFFFFFFFFFBLL && v45 + 4 <= v41)
    {
      unint64_t v17 = v45 + 4;
      goto LABEL_62;
    }
LABEL_64:
    unint64_t v49 = (float *)((v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v49 >= v12 + v17)
    {
      int v50 = (char *)v49 - v12;
      if ((unint64_t)v49 - v12 > 0xFFFFFFFFFFFFFFFBLL) {
        goto LABEL_131;
      }
      unint64_t v17 = (unint64_t)(v50 + 4);
      if ((unint64_t)(v50 + 4) > v48) {
        goto LABEL_131;
      }
      float *v49 = a2->arc.endAngle;
    }
    if (v17 < v48)
    {
      *(unsigned char *)(v12 + v17) = a2->arc.direction;
      unint64_t v51 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v52 = *((void *)v5 + 8);
      if (v51 + 16 >= v52) {
        unint64_t v51 = 0;
      }
      if (v17 <= 0xF) {
        unint64_t v17 = 15;
      }
      unint64_t v53 = v17 + v51;
      if (v52 > v53 + 1) {
        unint64_t v54 = v53 + 1;
      }
      else {
        unint64_t v54 = 0;
      }
      *((void *)v5 + 10) = v54;
      unint64_t v55 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v54);
      int v56 = *((_DWORD *)v5 + 29);
      if (v55 == 0x80000000 || v56)
      {
        unsigned int v65 = v56 + 1;
        *((_DWORD *)v5 + 29) = v65;
        if (v65 >= *((_DWORD *)v5 + 28))
        {
          if (*((unsigned char *)v5 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
          }
          *((_DWORD *)v5 + 29) = 0;
        }
      }
      goto LABEL_78;
    }
LABEL_131:
    if (buf[16]) {
      break;
    }
    __break(1u);
LABEL_153:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6, v3[480], &v105);
    uint64_t v6 = v105;
    if (v105 && !*((unsigned char *)v105 + 4016))
    {
      *((unsigned char *)v105 + 4016) = 1;
      uint64_t v6 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v6);
    }
  }
  unint64_t v85 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v86 = v85 - *(void *)buf;
  if (v85 < *(void *)buf)
  {
    unint64_t v87 = 0;
  }
  else
  {
    unint64_t v87 = 0;
    if (v86 <= 0xFFFFFFFFFFFFFFFDLL && v86 + 2 <= *(void *)&buf[8])
    {
      *(_WORD *)(*(void *)buf + v86) = 2870;
      unint64_t v87 = v86 + 2;
    }
  }
  unint64_t v88 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v89 = *((void *)v5 + 8);
  if (v88 + 16 >= v89) {
    unint64_t v88 = 0;
  }
  if (v87 <= 0x10) {
    unint64_t v87 = 16;
  }
  unint64_t v90 = v88 + v87;
  if (v89 <= v90) {
    unint64_t v90 = 0;
  }
  *((void *)v5 + 10) = v90;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v90);
  *((_DWORD *)v5 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v107, (uint64_t **)v5 + 1);
  uint64_t v91 = v107;
  v92 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)v92 = 884;
  *((void *)v92 + 1) = v7;
  *((void *)v92 + 66) = (char *)v92 + 16;
  *((void *)v92 + 67) = 512;
  *((void *)v92 + 68) = 0;
  *((void *)v92 + 70) = 0;
  *((void *)v92 + 69) = 0;
  IPC::Encoder::encodeHeader(v92);
  v108 = v92;
  IPC::ArgumentCoder<WebCore::PathArc,void>::encode(v92, (uint64_t)a2);
  int v94 = IPC::Connection::sendMessageImpl((uint64_t)v91, (uint64_t *)&v108, 1, 0);
  v95 = v108;
  v108 = 0;
  if (v95)
  {
    IPC::Encoder::~Encoder(v95, v93);
    WTF::fastFree(v103, v104);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v107);
  if (v94)
  {
LABEL_145:
    v96 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      v97 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_StrokeClosedArc";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v97;
      _os_log_impl(&dword_1985F2000, v96, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v98 = v3[481];
    if (v98)
    {
      v99 = *(unsigned char **)(v98 + 8);
      if (v99) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v99);
      }
    }
  }
LABEL_78:
  unint64_t v57 = v105;
  v105 = 0;
  if (v57)
  {
    char v58 = 0;
    uint64_t v59 = *((void *)v57 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v59, (unsigned __int8 *)&v58, 1u, memory_order_acquire, memory_order_acquire);
    if (v58) {
      MEMORY[0x19972E8D0](v59);
    }
    uint64_t v60 = *(void *)(v59 + 8);
    int v61 = 1;
    uint64_t v62 = v60 - 1;
    *(void *)(v59 + 8) = v60 - 1;
    if (v60 == 1)
    {
      uint64_t v102 = *(void *)(v59 + 16);
      uint64_t v63 = *(void *)(v59 + 24);
      *(void *)(v59 + 24) = 0;
      BOOL v64 = v102 != 0;
    }
    else
    {
      uint64_t v63 = 0;
      BOOL v64 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v59, (unsigned __int8 *)&v61, 0, memory_order_release, memory_order_relaxed);
    if (v61 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v59);
    }
    if (!v62)
    {
      if (v63) {
        (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
      }
      if (!v64) {
        WTF::fastFree((WTF *)v59, v11);
      }
    }
  }
  this = v106;
  v106 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v11);
      return (void *)WTF::fastFree(v100, v101);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordStrokeQuadCurve(void *this, PathDataQuadCurve *a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  unint64_t v57 = a2;
  uint64_t v2 = this[481];
  if (v2)
  {
    uint64_t v3 = this;
    this = *(void **)(v2 + 8);
    if (this)
    {
      this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v59);
      uint64_t v4 = v59;
      if (v59)
      {
        uint64_t v5 = (WebKit::RemoteImageBufferProxy *)v3[479];
        if (v5)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v5, v3[480], &v58);
          uint64_t v5 = v58;
          if (v58 && !*((unsigned char *)v58 + 4016))
          {
            *((unsigned char *)v58 + 4016) = 1;
            uint64_t v5 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v5);
          }
        }
        else
        {
          char v58 = 0;
        }
        uint64_t v6 = v3[478];
        double v7 = *((double *)v4 + 15);
        double v8 = INFINITY;
        if (fabs(v7) != INFINITY)
        {
          WTF::ApproximateTime::now(v5);
          double v8 = v7 + v9;
        }
        if (*((void *)v4 + 7) == v6)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, &v60, v8);
            if (!v62) {
              goto LABEL_84;
            }
            *(void *)long long buf = v60;
            *(void *)&buf[8] = v61;
            *(void *)&uint8_t buf[16] = 0;
            unint64_t v10 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
            BOOL v11 = v10 >= v60;
            unint64_t v12 = v10 - v60;
            if (v11)
            {
              if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v61)
              {
                *(void *)&buf[8] = 0;
              }
              else
              {
                *(_WORD *)(v60 + v12) = 890;
                *(void *)&uint8_t buf[16] = v12 + 2;
              }
            }
            IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::encode((uint64_t *)buf, v57);
            if (*(void *)&buf[8])
            {
              uint64_t v17 = *(void *)&buf[16];
              unint64_t v18 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v19 = *((void *)v4 + 8);
              if (v18 + 16 >= v19) {
                unint64_t v18 = 0;
              }
              if (*(void *)&buf[16] <= 0x10uLL) {
                uint64_t v17 = 16;
              }
              unint64_t v20 = v18 + v17;
              if (v19 <= v20) {
                unint64_t v20 = 0;
              }
              *((void *)v4 + 10) = v20;
              unint64_t v21 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v20);
              int v22 = *((_DWORD *)v4 + 29);
              if (v21 == 0x80000000 || v22 != 0)
              {
                unsigned int v32 = v22 + 1;
                *((_DWORD *)v4 + 29) = v32;
                if (v32 >= *((_DWORD *)v4 + 28))
                {
                  if (*((unsigned char *)v4 + 104)) {
                    MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                  }
                  *((_DWORD *)v4 + 29) = 0;
                }
              }
              goto LABEL_27;
            }
            uint64_t v33 = v62;
            if (v62)
            {
              IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v4, v60, v61);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v4 + 1);
              int v52 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeQuadCurve>(*(uint64_t *)buf, (float **)&v57, v6);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
              if (!v52) {
                goto LABEL_27;
              }
              goto LABEL_84;
            }
            __break(1u);
LABEL_95:
            if (!v14) {
              break;
            }
            unint64_t v38 = 0;
            if (v16 > 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v35 = 0;
            }
            else
            {
              unint64_t v35 = 0;
              if (v16 + 2 <= v15)
              {
                unint64_t v35 = v16 + 2;
LABEL_56:
                *(_WORD *)(v33 + v16) = 2871;
                goto LABEL_57;
              }
            }
LABEL_58:
            unint64_t v39 = (v33 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v39 >= v33 + v35)
            {
              unint64_t v40 = v39 - v33;
              if (v40 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_84;
              }
              unint64_t v35 = v40 + 8;
              if (v40 + 8 > v38) {
                goto LABEL_84;
              }
              *(void *)(v33 + v40) = v6;
            }
            if (!v38) {
              goto LABEL_84;
            }
            unint64_t v41 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v42 = *((void *)v4 + 8);
            if (v41 + 16 >= v42) {
              unint64_t v41 = 0;
            }
            if (v35 <= 0x10) {
              unint64_t v35 = 16;
            }
            unint64_t v43 = v41 + v35;
            if (v42 <= v43) {
              unint64_t v44 = 0;
            }
            else {
              unint64_t v44 = v43;
            }
            *((void *)v4 + 10) = v44;
            unint64_t v45 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v44);
            int v46 = *((_DWORD *)v4 + 29);
            if (v45 == 0x80000000 || v46 != 0)
            {
              unsigned int v48 = v46 + 1;
              *((_DWORD *)v4 + 29) = v48;
              if (v48 >= *((_DWORD *)v4 + 28))
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                }
                *((_DWORD *)v4 + 29) = 0;
              }
            }
            *((void *)v4 + 7) = v6;
          }
          unint64_t v35 = 0;
LABEL_57:
          unint64_t v38 = v15;
          goto LABEL_58;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, buf, v8);
        if (buf[16])
        {
          uint64_t v33 = *(void *)buf;
          unint64_t v15 = *(void *)&buf[8];
          unint64_t v34 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v16 = v34 - *(void *)buf;
          BOOL v14 = v34 >= *(void *)buf;
          unint64_t v35 = v34 - *(void *)buf + 2;
          BOOL v37 = v16 < 0xFFFFFFFFFFFFFFFELL && v35 <= *(void *)&buf[8];
          if (!v14 || !v37) {
            goto LABEL_95;
          }
          goto LABEL_56;
        }
LABEL_84:
        unint64_t v53 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v54 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_StrokeQuadCurve";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v54;
          _os_log_impl(&dword_1985F2000, v53, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v55 = v3[481];
        if (v55)
        {
          int v56 = *(unsigned char **)(v55 + 8);
          if (v56) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v56);
          }
        }
LABEL_27:
        unint64_t v24 = v58;
        char v58 = 0;
        if (v24)
        {
          char v25 = 0;
          uint64_t v26 = *((void *)v24 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v26, (unsigned __int8 *)&v25, 1u, memory_order_acquire, memory_order_acquire);
          if (v25) {
            MEMORY[0x19972E8D0](v26);
          }
          uint64_t v27 = *(void *)(v26 + 8);
          int v28 = 1;
          uint64_t v29 = v27 - 1;
          *(void *)(v26 + 8) = v27 - 1;
          if (v27 == 1)
          {
            uint64_t v51 = *(void *)(v26 + 16);
            uint64_t v30 = *(void *)(v26 + 24);
            *(void *)(v26 + 24) = 0;
            BOOL v31 = v51 != 0;
          }
          else
          {
            uint64_t v30 = 0;
            BOOL v31 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v26, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
          if (v28 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v26);
          }
          if (!v29)
          {
            if (v30) {
              (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
            }
            if (!v31) {
              WTF::fastFree((WTF *)v26, v13);
            }
          }
        }
        this = v59;
        uint64_t v59 = 0;
        if (this)
        {
          if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v13);
            return (void *)WTF::fastFree(v49, v50);
          }
        }
      }
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordStrokeBezierCurve(void *this, PathDataBezierCurve *a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v63 = a2;
  uint64_t v2 = this[481];
  if (!v2) {
    return this;
  }
  uint64_t v3 = this;
  this = *(void **)(v2 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v65);
  uint64_t v4 = v65;
  if (!v65) {
    return this;
  }
  uint64_t v5 = (WebKit::RemoteImageBufferProxy *)v3[479];
  if (v5)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v5, v3[480], &v64);
    uint64_t v5 = v64;
    if (v64 && !*((unsigned char *)v64 + 4016))
    {
      *((unsigned char *)v64 + 4016) = 1;
      uint64_t v5 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v5);
    }
  }
  else
  {
    uint64_t v64 = 0;
  }
  uint64_t v6 = v3[478];
  double v7 = *((double *)v4 + 15);
  double v8 = INFINITY;
  if (fabs(v7) != INFINITY)
  {
    WTF::ApproximateTime::now(v5);
    double v8 = v7 + v9;
  }
  if (*((void *)v4 + 7) == v6) {
    goto LABEL_9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, buf, v8);
  if (!buf[16]) {
    goto LABEL_93;
  }
  uint64_t v31 = *(void *)buf;
  unint64_t v32 = *(void *)&buf[8];
  unint64_t v33 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - *(void *)buf;
  BOOL v35 = v33 >= *(void *)buf;
  unint64_t v36 = v33 - *(void *)buf + 2;
  BOOL v38 = v34 < 0xFFFFFFFFFFFFFFFELL && v36 <= *(void *)&buf[8];
  if (v35 && v38) {
    goto LABEL_56;
  }
  if (!v35)
  {
    unint64_t v36 = 0;
    goto LABEL_57;
  }
  unint64_t v39 = 0;
  if (v34 > 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v36 = 0;
    goto LABEL_58;
  }
  unint64_t v36 = 0;
  if (v34 + 2 <= *(void *)&buf[8])
  {
    unint64_t v36 = v34 + 2;
LABEL_56:
    *(_WORD *)(*(void *)buf + v34) = 2871;
LABEL_57:
    unint64_t v39 = v32;
  }
LABEL_58:
  unint64_t v40 = (v31 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v40 >= v31 + v36)
  {
    unint64_t v41 = v40 - v31;
    if (v41 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_93;
    }
    unint64_t v36 = v41 + 8;
    if (v41 + 8 > v39) {
      goto LABEL_93;
    }
    *(void *)(v31 + v41) = v6;
  }
  if (!v39)
  {
LABEL_93:
    uint64_t v59 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v60 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_StrokeBezierCurve";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v60;
      _os_log_impl(&dword_1985F2000, v59, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v61 = v3[481];
    if (v61)
    {
      unsigned __int8 v62 = *(unsigned char **)(v61 + 8);
      if (v62) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v62);
      }
    }
    goto LABEL_27;
  }
  unint64_t v42 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *((void *)v4 + 8);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v36 <= 0x10) {
    unint64_t v36 = 16;
  }
  unint64_t v44 = v42 + v36;
  if (v43 <= v44) {
    unint64_t v45 = 0;
  }
  else {
    unint64_t v45 = v44;
  }
  *((void *)v4 + 10) = v45;
  unint64_t v46 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v45);
  int v47 = *((_DWORD *)v4 + 29);
  if (v46 == 0x80000000 || v47 != 0)
  {
    unsigned int v49 = v47 + 1;
    *((_DWORD *)v4 + 29) = v49;
    if (v49 >= *((_DWORD *)v4 + 28))
    {
      if (*((unsigned char *)v4 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
      }
      *((_DWORD *)v4 + 29) = 0;
    }
  }
  *((void *)v4 + 7) = v6;
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, &v66, v8);
  if (!v68) {
    goto LABEL_93;
  }
  *(void *)long long buf = v66;
  *(void *)&buf[8] = v67;
  *(void *)&uint8_t buf[16] = 0;
  unint64_t v10 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v10 >= v66;
  unint64_t v12 = v10 - v66;
  if (v11)
  {
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v67)
    {
      *(void *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v66 + v12) = 883;
      *(void *)&uint8_t buf[16] = v12 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode((uint64_t *)buf, v63);
  if (!*(void *)&buf[8])
  {
    unint64_t v53 = v68;
    if (v68)
    {
      unint64_t v54 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v55 = v54 - v66;
      if (v54 < v66)
      {
        unint64_t v53 = 0;
      }
      else
      {
        unint64_t v53 = 0;
        if (v55 <= 0xFFFFFFFFFFFFFFFDLL && v55 + 2 <= v67)
        {
          *(_WORD *)(v66 + v55) = 2870;
          unint64_t v53 = v55 + 2;
        }
      }
      unint64_t v56 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v14 = *((void *)v4 + 8);
      if (v56 + 16 < v14)
      {
LABEL_88:
        if (v53 <= 0x10) {
          unint64_t v53 = 16;
        }
        unint64_t v57 = v56 + v53;
        if (v14 <= v57) {
          unint64_t v57 = 0;
        }
        *((void *)v4 + 10) = v57;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v57);
        *((_DWORD *)v4 + 29) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v4 + 1);
        int v58 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeBezierCurve>(*(uint64_t *)buf, (float **)&v63, v6);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        if (!v58) {
          goto LABEL_27;
        }
        goto LABEL_93;
      }
    }
    else
    {
      __break(1u);
    }
    unint64_t v56 = 0;
    goto LABEL_88;
  }
  uint64_t v15 = *(void *)&buf[16];
  unint64_t v16 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = *((void *)v4 + 8);
  if (v16 + 16 >= v17) {
    unint64_t v16 = 0;
  }
  if (*(void *)&buf[16] <= 0x10uLL) {
    uint64_t v15 = 16;
  }
  unint64_t v18 = v16 + v15;
  if (v17 <= v18) {
    unint64_t v18 = 0;
  }
  *((void *)v4 + 10) = v18;
  unint64_t v19 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v18);
  int v20 = *((_DWORD *)v4 + 29);
  if (v19 == 0x80000000 || v20 != 0)
  {
    unsigned int v30 = v20 + 1;
    *((_DWORD *)v4 + 29) = v30;
    if (v30 >= *((_DWORD *)v4 + 28))
    {
      if (*((unsigned char *)v4 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
      }
      *((_DWORD *)v4 + 29) = 0;
    }
  }
LABEL_27:
  int v22 = v64;
  uint64_t v64 = 0;
  if (v22)
  {
    char v23 = 0;
    uint64_t v24 = *((void *)v22 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v23, 1u, memory_order_acquire, memory_order_acquire);
    if (v23) {
      MEMORY[0x19972E8D0](v24);
    }
    uint64_t v25 = *(void *)(v24 + 8);
    int v26 = 1;
    uint64_t v27 = v25 - 1;
    *(void *)(v24 + 8) = v25 - 1;
    if (v25 == 1)
    {
      uint64_t v52 = *(void *)(v24 + 16);
      uint64_t v28 = *(void *)(v24 + 24);
      *(void *)(v24 + 24) = 0;
      BOOL v29 = v52 != 0;
    }
    else
    {
      uint64_t v28 = 0;
      BOOL v29 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
    if (v26 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v24);
    }
    if (!v27)
    {
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
      }
      if (!v29) {
        WTF::fastFree((WTF *)v24, v13);
      }
    }
  }
  this = v65;
  unsigned int v65 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v13);
      return (void *)WTF::fastFree(v50, v51);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordStrokePathSegment(void *this, const PathSegment *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  unint64_t v54 = a2;
  uint64_t v2 = this[481];
  if (v2)
  {
    uint64_t v3 = this;
    this = *(void **)(v2 + 8);
    if (this)
    {
      this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v56);
      uint64_t v4 = v56;
      if (v56)
      {
        uint64_t v5 = (WTF::ApproximateTime *)v3[479];
        if (v5) {
          goto LABEL_86;
        }
        unint64_t v55 = 0;
        while (1)
        {
          uint64_t v6 = v3[478];
          double v7 = *((double *)v4 + 15);
          double v8 = INFINITY;
          if (fabs(v7) != INFINITY)
          {
            WTF::ApproximateTime::now(v5);
            double v8 = v7 + v9;
          }
          if (*((void *)v4 + 7) != v6)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, buf, v8);
            if (!buf[16]) {
              goto LABEL_74;
            }
            uint64_t v30 = *(void *)buf;
            unint64_t v31 = *(void *)&buf[8];
            unint64_t v32 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v33 = v32 - *(void *)buf;
            if (v32 < *(void *)buf)
            {
              unint64_t v35 = 0;
              unint64_t v34 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v34 = 0;
              if (v33 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v35 = 0;
              }
              else
              {
                unint64_t v35 = 0;
                if (v33 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v33) = 2871;
                  unint64_t v34 = v31;
                  unint64_t v35 = v33 + 2;
                }
              }
            }
            unint64_t v36 = (void *)((v30 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v36 >= v30 + v35)
            {
              BOOL v37 = (char *)v36 - v30;
              if ((unint64_t)v36 - v30 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_74;
              }
              unint64_t v35 = (unint64_t)(v37 + 8);
              if ((unint64_t)(v37 + 8) > v34) {
                goto LABEL_74;
              }
              *unint64_t v36 = v6;
            }
            if (!v34) {
              goto LABEL_74;
            }
            unint64_t v38 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v39 = *((void *)v4 + 8);
            if (v38 + 16 >= v39) {
              unint64_t v38 = 0;
            }
            if (v35 <= 0x10) {
              unint64_t v35 = 16;
            }
            unint64_t v40 = v38 + v35;
            if (v39 <= v40) {
              unint64_t v41 = 0;
            }
            else {
              unint64_t v41 = v40;
            }
            *((void *)v4 + 10) = v41;
            unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v41);
            int v43 = *((_DWORD *)v4 + 29);
            if (v42 == 0x80000000 || v43 != 0)
            {
              unsigned int v45 = v43 + 1;
              *((_DWORD *)v4 + 29) = v45;
              if (v45 >= *((_DWORD *)v4 + 28))
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                }
                *((_DWORD *)v4 + 29) = 0;
              }
            }
            *((void *)v4 + 7) = v6;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, &v57, v8);
          if (!v59) {
            goto LABEL_74;
          }
          *(void *)long long buf = v57;
          *(void *)&buf[8] = v58;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v10 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v11 = v10 >= v57;
          unint64_t v12 = v10 - v57;
          if (v11)
          {
            if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v58)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v57 + v12) = 889;
              *(void *)&uint8_t buf[16] = v12 + 2;
            }
          }
          uint64_t v5 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::PathSegment,void>::encode((uint64_t *)buf, (uint64_t)v54);
          if (*(void *)&buf[8])
          {
            uint64_t v14 = *(void *)&buf[16];
            unint64_t v15 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v16 = *((void *)v4 + 8);
            if (v15 + 16 >= v16) {
              unint64_t v15 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v14 = 16;
            }
            unint64_t v17 = v15 + v14;
            if (v16 <= v17) {
              unint64_t v17 = 0;
            }
            *((void *)v4 + 10) = v17;
            unint64_t v18 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v17);
            int v19 = *((_DWORD *)v4 + 29);
            if (v18 == 0x80000000 || v19 != 0)
            {
              unsigned int v29 = v19 + 1;
              *((_DWORD *)v4 + 29) = v29;
              if (v29 >= *((_DWORD *)v4 + 28))
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                }
                *((_DWORD *)v4 + 29) = 0;
              }
            }
            goto LABEL_27;
          }
          if (v59) {
            break;
          }
          __break(1u);
LABEL_86:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v5, v3[480], &v55);
          uint64_t v5 = v55;
          if (v55 && !*((unsigned char *)v55 + 4016))
          {
            *((unsigned char *)v55 + 4016) = 1;
            uint64_t v5 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v5);
          }
        }
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v4, v57, v58);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v4 + 1);
        int v50 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokePathSegment>(*(uint64_t *)buf, (uint64_t *)&v54, v6);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        if (!v50) {
          goto LABEL_27;
        }
LABEL_74:
        unint64_t v46 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          int v47 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_StrokePathSegment";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v47;
          _os_log_impl(&dword_1985F2000, v46, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v48 = v3[481];
        if (v48)
        {
          unsigned int v49 = *(unsigned char **)(v48 + 8);
          if (v49) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v49);
          }
        }
LABEL_27:
        unint64_t v21 = v55;
        unint64_t v55 = 0;
        if (v21)
        {
          char v22 = 0;
          uint64_t v23 = *((void *)v21 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v23, (unsigned __int8 *)&v22, 1u, memory_order_acquire, memory_order_acquire);
          if (v22) {
            MEMORY[0x19972E8D0](v23);
          }
          uint64_t v24 = *(void *)(v23 + 8);
          int v25 = 1;
          uint64_t v26 = v24 - 1;
          *(void *)(v23 + 8) = v24 - 1;
          if (v24 == 1)
          {
            uint64_t v53 = *(void *)(v23 + 16);
            uint64_t v27 = *(void *)(v23 + 24);
            *(void *)(v23 + 24) = 0;
            BOOL v28 = v53 != 0;
          }
          else
          {
            uint64_t v27 = 0;
            BOOL v28 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v23, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
          if (v25 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v23);
          }
          if (!v26)
          {
            if (v27) {
              (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
            }
            if (!v28) {
              WTF::fastFree((WTF *)v23, v13);
            }
          }
        }
        this = v56;
        unint64_t v56 = 0;
        if (this)
        {
          if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v13);
            return (void *)WTF::fastFree(v51, v52);
          }
        }
      }
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordStrokePath(void *this, const WebCore::Path *a2)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this[481];
  if (!v2) {
    return this;
  }
  uint64_t v3 = this;
  this = *(void **)(v2 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v72);
  uint64_t v5 = v72;
  if (!v72) {
    return this;
  }
  uint64_t v6 = (WebKit::RemoteImageBufferProxy *)v3[479];
  if (v6)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6, v3[480], &v71);
    uint64_t v6 = v71;
    if (v71 && !*((unsigned char *)v71 + 4016))
    {
      *((unsigned char *)v71 + 4016) = 1;
      uint64_t v6 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v6);
    }
  }
  else
  {
    unint64_t v71 = 0;
  }
  uint64_t v7 = v3[478];
  double v8 = *((double *)v5 + 15);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now(v6);
    double v9 = v8 + v10;
  }
  if (*((void *)v5 + 7) == v7) {
    goto LABEL_9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
  if (!buf[16]) {
    goto LABEL_95;
  }
  uint64_t v32 = *(void *)buf;
  unint64_t v33 = *(void *)&buf[8];
  unint64_t v34 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v34 - *(void *)buf;
  BOOL v36 = v34 >= *(void *)buf;
  unint64_t v37 = v34 - *(void *)buf + 2;
  BOOL v39 = v35 < 0xFFFFFFFFFFFFFFFELL && v37 <= *(void *)&buf[8];
  if (v36 && v39) {
    goto LABEL_56;
  }
  if (!v36)
  {
    unint64_t v37 = 0;
    goto LABEL_57;
  }
  unint64_t v40 = 0;
  if (v35 > 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v37 = 0;
    goto LABEL_58;
  }
  unint64_t v37 = 0;
  if (v35 + 2 <= *(void *)&buf[8])
  {
    unint64_t v37 = v35 + 2;
LABEL_56:
    *(_WORD *)(*(void *)buf + v35) = 2871;
LABEL_57:
    unint64_t v40 = v33;
  }
LABEL_58:
  unint64_t v41 = (v32 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v41 >= v32 + v37)
  {
    unint64_t v42 = v41 - v32;
    if (v42 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_95;
    }
    unint64_t v37 = v42 + 8;
    if (v42 + 8 > v40) {
      goto LABEL_95;
    }
    *(void *)(v32 + v42) = v7;
  }
  if (!v40)
  {
LABEL_95:
    uint64_t v64 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v65 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_StrokePath";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v65;
      _os_log_impl(&dword_1985F2000, v64, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v66 = v3[481];
    if (v66)
    {
      unint64_t v67 = *(unsigned char **)(v66 + 8);
      if (v67) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v67);
      }
    }
    goto LABEL_27;
  }
  unint64_t v43 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v44 = *((void *)v5 + 8);
  if (v43 + 16 >= v44) {
    unint64_t v43 = 0;
  }
  if (v37 <= 0x10) {
    unint64_t v37 = 16;
  }
  unint64_t v45 = v43 + v37;
  if (v44 <= v45) {
    unint64_t v46 = 0;
  }
  else {
    unint64_t v46 = v45;
  }
  *((void *)v5 + 10) = v46;
  unint64_t v47 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v46);
  int v48 = *((_DWORD *)v5 + 29);
  if (v47 == 0x80000000 || v48 != 0)
  {
    unsigned int v50 = v48 + 1;
    *((_DWORD *)v5 + 29) = v50;
    if (v50 >= *((_DWORD *)v5 + 28))
    {
      if (*((unsigned char *)v5 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
      }
      *((_DWORD *)v5 + 29) = 0;
    }
  }
  *((void *)v5 + 7) = v7;
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, &v74, v9);
  if (!v76) {
    goto LABEL_95;
  }
  *(void *)long long buf = v74;
  *(void *)&buf[8] = v75;
  *(void *)&uint8_t buf[16] = 0;
  unint64_t v11 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v12 = v11 >= v74;
  unint64_t v13 = v11 - v74;
  if (v12)
  {
    if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v75)
    {
      *(void *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v74 + v13) = 888;
      *(void *)&uint8_t buf[16] = v13 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::Path,void>::encode((uint64_t *)buf, a2);
  if (!*(void *)&buf[8])
  {
    uint64_t v70 = v7;
    unint64_t v54 = v76;
    if (v76)
    {
      unint64_t v55 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v56 = v55 - v74;
      if (v55 < v74)
      {
        unint64_t v54 = 0;
      }
      else
      {
        unint64_t v54 = 0;
        if (v56 <= 0xFFFFFFFFFFFFFFFDLL && v56 + 2 <= v75)
        {
          *(_WORD *)(v74 + v56) = 2870;
          unint64_t v54 = v56 + 2;
        }
      }
      unint64_t v57 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *((void *)v5 + 8);
      if (v57 + 16 < v15)
      {
LABEL_88:
        if (v54 <= 0x10) {
          unint64_t v54 = 16;
        }
        unint64_t v58 = v57 + v54;
        if (v15 <= v58) {
          unint64_t v58 = 0;
        }
        *((void *)v5 + 10) = v58;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v58);
        *((_DWORD *)v5 + 29) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)v5 + 1);
        char v59 = v73;
        unint64_t v60 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)unint64_t v60 = 888;
        *((void *)v60 + 1) = v70;
        *((void *)v60 + 66) = (char *)v60 + 16;
        *((void *)v60 + 67) = 512;
        *((void *)v60 + 68) = 0;
        *((void *)v60 + 70) = 0;
        *((void *)v60 + 69) = 0;
        IPC::Encoder::encodeHeader(v60);
        *(void *)long long buf = v60;
        IPC::ArgumentCoder<WebCore::Path,void>::encode(v60, a2);
        int v62 = IPC::Connection::sendMessageImpl((uint64_t)v59, (uint64_t *)buf, 1, 0);
        uint64_t v63 = *(IPC::Encoder **)buf;
        *(void *)long long buf = 0;
        if (v63)
        {
          IPC::Encoder::~Encoder(v63, v61);
          WTF::fastFree(v68, v69);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
        if (!v62) {
          goto LABEL_27;
        }
        goto LABEL_95;
      }
    }
    else
    {
      __break(1u);
    }
    unint64_t v57 = 0;
    goto LABEL_88;
  }
  uint64_t v16 = *(void *)&buf[16];
  unint64_t v17 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = *((void *)v5 + 8);
  if (v17 + 16 >= v18) {
    unint64_t v17 = 0;
  }
  if (*(void *)&buf[16] <= 0x10uLL) {
    uint64_t v16 = 16;
  }
  unint64_t v19 = v17 + v16;
  if (v18 <= v19) {
    unint64_t v19 = 0;
  }
  *((void *)v5 + 10) = v19;
  unint64_t v20 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v19);
  int v21 = *((_DWORD *)v5 + 29);
  if (v20 == 0x80000000 || v21 != 0)
  {
    unsigned int v31 = v21 + 1;
    *((_DWORD *)v5 + 29) = v31;
    if (v31 >= *((_DWORD *)v5 + 28))
    {
      if (*((unsigned char *)v5 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
      }
      *((_DWORD *)v5 + 29) = 0;
    }
  }
LABEL_27:
  uint64_t v23 = v71;
  unint64_t v71 = 0;
  if (v23)
  {
    char v24 = 0;
    uint64_t v25 = *((void *)v23 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v25, (unsigned __int8 *)&v24, 1u, memory_order_acquire, memory_order_acquire);
    if (v24) {
      MEMORY[0x19972E8D0](v25);
    }
    uint64_t v26 = *(void *)(v25 + 8);
    int v27 = 1;
    uint64_t v28 = v26 - 1;
    *(void *)(v25 + 8) = v26 - 1;
    if (v26 == 1)
    {
      uint64_t v53 = *(void *)(v25 + 16);
      uint64_t v29 = *(void *)(v25 + 24);
      *(void *)(v25 + 24) = 0;
      BOOL v30 = v53 != 0;
    }
    else
    {
      uint64_t v29 = 0;
      BOOL v30 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v25, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
    if (v27 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v25);
    }
    if (!v28)
    {
      if (v29) {
        (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
      }
      if (!v30) {
        WTF::fastFree((WTF *)v25, v14);
      }
    }
  }
  this = v72;
  uint64_t v72 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v14);
      return (void *)WTF::fastFree(v51, v52);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordStrokeEllipse(void *this, const WebCore::FloatRect *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  unint64_t v54 = (float *)a2;
  uint64_t v2 = this[481];
  if (v2)
  {
    uint64_t v3 = this;
    this = *(void **)(v2 + 8);
    if (this)
    {
      this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v56);
      uint64_t v4 = v56;
      if (v56)
      {
        uint64_t v5 = (WTF::ApproximateTime *)v3[479];
        if (v5) {
          goto LABEL_86;
        }
        unint64_t v55 = 0;
        while (1)
        {
          uint64_t v6 = v3[478];
          double v7 = *((double *)v4 + 15);
          double v8 = INFINITY;
          if (fabs(v7) != INFINITY)
          {
            WTF::ApproximateTime::now(v5);
            double v8 = v7 + v9;
          }
          if (*((void *)v4 + 7) != v6)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, buf, v8);
            if (!buf[16]) {
              goto LABEL_79;
            }
            uint64_t v30 = *(void *)buf;
            unint64_t v31 = *(void *)&buf[8];
            unint64_t v32 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v33 = v32 - *(void *)buf;
            if (v32 < *(void *)buf)
            {
              unint64_t v35 = 0;
              unint64_t v34 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v34 = 0;
              if (v33 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v35 = 0;
              }
              else
              {
                unint64_t v35 = 0;
                if (v33 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v33) = 2871;
                  unint64_t v34 = v31;
                  unint64_t v35 = v33 + 2;
                }
              }
            }
            unint64_t v36 = (v30 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v36 >= v30 + v35)
            {
              unint64_t v37 = v36 - v30;
              if (v37 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_79;
              }
              unint64_t v35 = v37 + 8;
              if (v37 + 8 > v34) {
                goto LABEL_79;
              }
              *(void *)(v30 + v37) = v6;
            }
            if (!v34) {
              goto LABEL_79;
            }
            unint64_t v38 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v39 = *((void *)v4 + 8);
            if (v38 + 16 >= v39) {
              unint64_t v38 = 0;
            }
            if (v35 <= 0x10) {
              unint64_t v35 = 16;
            }
            unint64_t v40 = v38 + v35;
            if (v39 <= v40) {
              unint64_t v41 = 0;
            }
            else {
              unint64_t v41 = v40;
            }
            *((void *)v4 + 10) = v41;
            unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v41);
            int v43 = *((_DWORD *)v4 + 29);
            if (v42 == 0x80000000 || v43 != 0)
            {
              unsigned int v45 = v43 + 1;
              *((_DWORD *)v4 + 29) = v45;
              if (v45 >= *((_DWORD *)v4 + 28))
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                }
                *((_DWORD *)v4 + 29) = 0;
              }
            }
            *((void *)v4 + 7) = v6;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, &v57, v8);
          if (!v59) {
            goto LABEL_79;
          }
          *(void *)long long buf = v57;
          *(void *)&buf[8] = v58;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v10 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v11 = v10 >= v57;
          unint64_t v12 = v10 - v57;
          if (v11)
          {
            if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v58)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v57 + v12) = 885;
              *(void *)&uint8_t buf[16] = v12 + 2;
            }
          }
          uint64_t v5 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v54);
          if (*(void *)&buf[8])
          {
            uint64_t v14 = *(void *)&buf[16];
            unint64_t v15 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v16 = *((void *)v4 + 8);
            if (v15 + 16 >= v16) {
              unint64_t v15 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v14 = 16;
            }
            unint64_t v17 = v15 + v14;
            if (v16 <= v17) {
              unint64_t v17 = 0;
            }
            *((void *)v4 + 10) = v17;
            unint64_t v18 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v17);
            int v19 = *((_DWORD *)v4 + 29);
            if (v18 == 0x80000000 || v19 != 0)
            {
              unsigned int v29 = v19 + 1;
              *((_DWORD *)v4 + 29) = v29;
              if (v29 >= *((_DWORD *)v4 + 28))
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                }
                *((_DWORD *)v4 + 29) = 0;
              }
            }
            goto LABEL_27;
          }
          if (v59) {
            break;
          }
          __break(1u);
LABEL_86:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v5, v3[480], &v55);
          uint64_t v5 = v55;
          if (v55 && !*((unsigned char *)v55 + 4016))
          {
            *((unsigned char *)v55 + 4016) = 1;
            uint64_t v5 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v5);
          }
        }
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v4, v57, v58);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v4 + 1);
        int v49 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeEllipse>(*(uint64_t *)buf, &v54, v6);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        if (!v49) {
          goto LABEL_27;
        }
LABEL_79:
        unsigned int v50 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v51 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_StrokeEllipse";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v51;
          _os_log_impl(&dword_1985F2000, v50, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v52 = v3[481];
        if (v52)
        {
          uint64_t v53 = *(unsigned char **)(v52 + 8);
          if (v53) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v53);
          }
        }
LABEL_27:
        int v21 = v55;
        unint64_t v55 = 0;
        if (v21)
        {
          char v22 = 0;
          uint64_t v23 = *((void *)v21 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v23, (unsigned __int8 *)&v22, 1u, memory_order_acquire, memory_order_acquire);
          if (v22) {
            MEMORY[0x19972E8D0](v23);
          }
          uint64_t v24 = *(void *)(v23 + 8);
          int v25 = 1;
          uint64_t v26 = v24 - 1;
          *(void *)(v23 + 8) = v24 - 1;
          if (v24 == 1)
          {
            uint64_t v48 = *(void *)(v23 + 16);
            uint64_t v27 = *(void *)(v23 + 24);
            *(void *)(v23 + 24) = 0;
            BOOL v28 = v48 != 0;
          }
          else
          {
            uint64_t v27 = 0;
            BOOL v28 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v23, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
          if (v25 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v23);
          }
          if (!v26)
          {
            if (v27) {
              (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
            }
            if (!v28) {
              WTF::fastFree((WTF *)v23, v13);
            }
          }
        }
        this = v56;
        unint64_t v56 = 0;
        if (this)
        {
          if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v13);
            return (void *)WTF::fastFree(v46, v47);
          }
        }
      }
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordClearRect(void *this, const WebCore::FloatRect *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  unsigned int v50 = (float *)a2;
  uint64_t v2 = this[481];
  if (v2)
  {
    uint64_t v3 = this;
    this = *(void **)(v2 + 8);
    if (this)
    {
      this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v52);
      uint64_t v4 = v52;
      if (v52)
      {
        uint64_t v5 = (WTF::ApproximateTime *)v3[479];
        if (v5) {
          goto LABEL_82;
        }
        uint64_t v51 = 0;
        while (1)
        {
          uint64_t v6 = v3[478];
          double v7 = *((double *)v4 + 15);
          double v8 = INFINITY;
          if (fabs(v7) != INFINITY)
          {
            WTF::ApproximateTime::now(v5);
            double v8 = v7 + v9;
          }
          if (*((void *)v4 + 7) != v6)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, buf, v8);
            if (!buf[16]) {
              goto LABEL_75;
            }
            uint64_t v26 = *(void *)buf;
            unint64_t v27 = *(void *)&buf[8];
            unint64_t v28 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v29 = v28 - *(void *)buf;
            if (v28 < *(void *)buf)
            {
              unint64_t v31 = 0;
              unint64_t v30 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v30 = 0;
              if (v29 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v31 = 0;
              }
              else
              {
                unint64_t v31 = 0;
                if (v29 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v29) = 2871;
                  unint64_t v30 = v27;
                  unint64_t v31 = v29 + 2;
                }
              }
            }
            unint64_t v32 = (void *)((v26 + v31 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v32 >= v26 + v31)
            {
              unint64_t v33 = (char *)v32 - v26;
              if ((unint64_t)v32 - v26 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_75;
              }
              unint64_t v31 = (unint64_t)(v33 + 8);
              if ((unint64_t)(v33 + 8) > v30) {
                goto LABEL_75;
              }
              *unint64_t v32 = v6;
            }
            if (!v30) {
              goto LABEL_75;
            }
            unint64_t v34 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v35 = *((void *)v4 + 8);
            if (v34 + 16 >= v35) {
              unint64_t v34 = 0;
            }
            if (v31 <= 0x10) {
              unint64_t v31 = 16;
            }
            unint64_t v36 = v34 + v31;
            if (v35 <= v36) {
              unint64_t v37 = 0;
            }
            else {
              unint64_t v37 = v36;
            }
            *((void *)v4 + 10) = v37;
            unint64_t v38 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v37);
            int v39 = *((_DWORD *)v4 + 29);
            if (v38 == 0x80000000 || v39 != 0)
            {
              unsigned int v41 = v39 + 1;
              *((_DWORD *)v4 + 29) = v41;
              if (v41 >= *((_DWORD *)v4 + 28))
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
                }
                *((_DWORD *)v4 + 29) = 0;
              }
            }
            *((void *)v4 + 7) = v6;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, &v53, v8);
          if (!v55) {
            goto LABEL_75;
          }
          *(void *)long long buf = v53;
          *(void *)&buf[8] = v54;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v10 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v11 = v10 >= v53;
          unint64_t v12 = v10 - v53;
          if (v11)
          {
            if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v54)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v53 + v12) = 824;
              *(void *)&uint8_t buf[16] = v12 + 2;
            }
          }
          uint64_t v5 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v50);
          if (*(void *)&buf[8])
          {
            uint64_t v14 = *(void *)&buf[16];
            unint64_t v15 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v16 = *((void *)v4 + 8);
            if (v15 + 16 >= v16) {
              unint64_t v15 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v14 = 16;
            }
            unint64_t v17 = v15 + v14;
            if (v16 <= v17) {
              unint64_t v17 = 0;
            }
            *((void *)v4 + 10) = v17;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v17) == 0x80000000
              || *((_DWORD *)v4 + 29))
            {
              if (*((unsigned char *)v4 + 104)) {
                MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
              }
              *((_DWORD *)v4 + 29) = 0;
            }
            goto LABEL_24;
          }
          if (v55) {
            break;
          }
          __break(1u);
LABEL_82:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v5, v3[480], &v51);
          uint64_t v5 = v51;
          if (v51 && !*((unsigned char *)v51 + 4016))
          {
            *((unsigned char *)v51 + 4016) = 1;
            uint64_t v5 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v5);
          }
        }
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v4, v53, v54);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v4 + 1);
        int v45 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::ClearRect>(*(uint64_t *)buf, &v50, v6);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        if (!v45) {
          goto LABEL_24;
        }
LABEL_75:
        unint64_t v46 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v47 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_ClearRect";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v47;
          _os_log_impl(&dword_1985F2000, v46, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v48 = v3[481];
        if (v48)
        {
          int v49 = *(unsigned char **)(v48 + 8);
          if (v49) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v49);
          }
        }
LABEL_24:
        unint64_t v18 = v51;
        uint64_t v51 = 0;
        if (v18)
        {
          char v19 = 0;
          uint64_t v20 = *((void *)v18 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
          if (v19) {
            MEMORY[0x19972E8D0](v20);
          }
          uint64_t v21 = *(void *)(v20 + 8);
          int v22 = 1;
          uint64_t v23 = v21 - 1;
          *(void *)(v20 + 8) = v21 - 1;
          if (v21 == 1)
          {
            uint64_t v44 = *(void *)(v20 + 16);
            uint64_t v24 = *(void *)(v20 + 24);
            *(void *)(v20 + 24) = 0;
            BOOL v25 = v44 != 0;
          }
          else
          {
            uint64_t v24 = 0;
            BOOL v25 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
          if (v22 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v20);
          }
          if (!v23)
          {
            if (v24) {
              (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
            }
            if (!v25) {
              WTF::fastFree((WTF *)v20, v13);
            }
          }
        }
        this = v52;
        uint64_t v52 = 0;
        if (this)
        {
          if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v13);
            return (void *)WTF::fastFree(v42, v43);
          }
        }
      }
    }
  }
  return this;
}

WebCore::ControlPart *WebKit::RemoteDisplayListRecorderProxy::recordDrawControlPart(WebKit::RemoteDisplayListRecorderProxy *this, WebCore::ControlPart *a2, const WebCore::FloatRoundedRect *a3, float a4, const WebCore::ControlStyle *a5)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  ++*((_DWORD *)a2 + 2);
  unint64_t v58 = a2;
  char v59 = (uint64_t *)&v58;
  unint64_t v60 = a3;
  float v61 = a4;
  int v62 = a5;
  uint64_t v5 = *((void *)this + 481);
  if (v5)
  {
    double v7 = *(WebKit::RemoteRenderingBackendProxy **)(v5 + 8);
    if (v7)
    {
      WebKit::RemoteRenderingBackendProxy::connection(v7, (atomic_uint **)&v64);
      double v8 = v64;
      if (v64)
      {
        double v9 = (WTF::ApproximateTime *)*((void *)this + 479);
        if (v9) {
          goto LABEL_91;
        }
        uint64_t v63 = 0;
        while (1)
        {
          uint64_t v10 = *((void *)this + 478);
          double v11 = *((double *)v8 + 15);
          double v12 = INFINITY;
          if (fabs(v11) != INFINITY)
          {
            WTF::ApproximateTime::now(v9);
            double v12 = v11 + v13;
          }
          if (*((void *)v8 + 7) != v10)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, buf, v12);
            if (!buf[16]) {
              goto LABEL_79;
            }
            uint64_t v34 = *(void *)buf;
            unint64_t v35 = *(void *)&buf[8];
            unint64_t v36 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v37 = v36 - *(void *)buf;
            if (v36 < *(void *)buf)
            {
              unint64_t v39 = 0;
              unint64_t v38 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v38 = 0;
              if (v37 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v39 = 0;
              }
              else
              {
                unint64_t v39 = 0;
                if (v37 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v37) = 2871;
                  unint64_t v38 = v35;
                  unint64_t v39 = v37 + 2;
                }
              }
            }
            unint64_t v40 = (void *)((v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v40 >= v34 + v39)
            {
              unsigned int v41 = (char *)v40 - v34;
              if ((unint64_t)v40 - v34 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_79;
              }
              unint64_t v39 = (unint64_t)(v41 + 8);
              if ((unint64_t)(v41 + 8) > v38) {
                goto LABEL_79;
              }
              *unint64_t v40 = v10;
            }
            if (!v38) {
              goto LABEL_79;
            }
            unint64_t v42 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v43 = *((void *)v8 + 8);
            if (v42 + 16 >= v43) {
              unint64_t v42 = 0;
            }
            if (v39 <= 0x10) {
              unint64_t v39 = 16;
            }
            unint64_t v44 = v42 + v39;
            if (v43 <= v44) {
              unint64_t v45 = 0;
            }
            else {
              unint64_t v45 = v44;
            }
            *((void *)v8 + 10) = v45;
            unint64_t v46 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v45);
            int v47 = *((_DWORD *)v8 + 29);
            if (v46 == 0x80000000 || v47 != 0)
            {
              unsigned int v49 = v47 + 1;
              *((_DWORD *)v8 + 29) = v49;
              if (v49 >= *((_DWORD *)v8 + 28))
              {
                if (*((unsigned char *)v8 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v8 + 23));
                }
                *((_DWORD *)v8 + 29) = 0;
              }
            }
            *((void *)v8 + 7) = v10;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, &v65, v12);
          if (!v67) {
            goto LABEL_79;
          }
          *(void *)long long buf = v65;
          *(void *)&buf[8] = v66;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v14 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v15 = v14 >= v65;
          unint64_t v16 = v14 - v65;
          if (v15)
          {
            if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v66)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v65 + v16) = 833;
              *(void *)&uint8_t buf[16] = v16 + 2;
            }
          }
          IPC::ArgumentCoder<WebCore::ControlPart,void>::encode((uint64_t *)buf, *v59);
          IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode((uint64_t *)buf, v60);
          unint64_t v17 = (float *)((*(void *)buf + *(void *)&buf[16] + 3) & 0xFFFFFFFFFFFFFFFCLL);
          if ((unint64_t)v17 >= *(void *)buf + *(void *)&buf[16])
          {
            unint64_t v18 = (char *)v17 - *(void *)buf;
            if ((unint64_t)v17 - *(void *)buf > 0xFFFFFFFFFFFFFFFBLL
              || (unint64_t)(v18 + 4) > *(void *)&buf[8])
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              float *v17 = v61;
              *(void *)&uint8_t buf[16] = v18 + 4;
            }
          }
          double v9 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::ControlStyle,void>::encode((uint64_t *)buf, v62);
          if (*(void *)&buf[8])
          {
            uint64_t v20 = *(void *)&buf[16];
            unint64_t v21 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v22 = *((void *)v8 + 8);
            if (v21 + 16 >= v22) {
              unint64_t v21 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v20 = 16;
            }
            unint64_t v23 = v21 + v20;
            if (v22 <= v23) {
              unint64_t v23 = 0;
            }
            *((void *)v8 + 10) = v23;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v23) == 0x80000000
              || *((_DWORD *)v8 + 29))
            {
              if (*((unsigned char *)v8 + 104)) {
                MEMORY[0x1997420B0](*((unsigned int *)v8 + 23));
              }
              *((_DWORD *)v8 + 29) = 0;
            }
            goto LABEL_28;
          }
          if (v67) {
            break;
          }
          __break(1u);
LABEL_91:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v9, *((void *)this + 480), &v63);
          double v9 = v63;
          if (v63 && !*((unsigned char *)v63 + 4016))
          {
            *((unsigned char *)v63 + 4016) = 1;
            double v9 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v9);
          }
        }
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v8, v65, v66);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v8 + 1);
        int v57 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawControlPart>(*(uint64_t *)buf, (uint64_t)&v59, v10);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        if (!v57) {
          goto LABEL_28;
        }
LABEL_79:
        unint64_t v53 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v54 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_DrawControlPart";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v54;
          _os_log_impl(&dword_1985F2000, v53, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v55 = *((void *)this + 481);
        if (v55)
        {
          unint64_t v56 = *(unsigned char **)(v55 + 8);
          if (v56) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v56);
          }
        }
LABEL_28:
        uint64_t v24 = v63;
        uint64_t v63 = 0;
        if (v24)
        {
          char v25 = 0;
          uint64_t v26 = *((void *)v24 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v26, (unsigned __int8 *)&v25, 1u, memory_order_acquire, memory_order_acquire);
          if (v25) {
            MEMORY[0x19972E8D0](v26);
          }
          uint64_t v27 = *(void *)(v26 + 8);
          int v28 = 1;
          uint64_t v29 = v27 - 1;
          *(void *)(v26 + 8) = v27 - 1;
          if (v27 == 1)
          {
            uint64_t v52 = *(void *)(v26 + 16);
            uint64_t v30 = *(void *)(v26 + 24);
            *(void *)(v26 + 24) = 0;
            BOOL v31 = v52 != 0;
          }
          else
          {
            uint64_t v30 = 0;
            BOOL v31 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v26, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
          if (v28 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v26);
          }
          if (!v29)
          {
            if (v30) {
              (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
            }
            if (!v31) {
              WTF::fastFree((WTF *)v26, v19);
            }
          }
        }
        unint64_t v32 = (unsigned int *)v64;
        uint64_t v64 = 0;
        if (v32 && atomic_fetch_add((atomic_uint *volatile)v32, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v32);
          IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v32, v19);
          WTF::fastFree(v50, v51);
        }
      }
    }
  }
  __n128 result = v58;
  unint64_t v58 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1) {
      return (WebCore::ControlPart *)(*(uint64_t (**)(WebCore::ControlPart *))(*(void *)result + 8))(result);
    }
    else {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordApplyStrokePattern(void *this)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = this[481];
  if (!v1) {
    return this;
  }
  uint64_t v2 = this;
  this = *(void **)(v1 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v66);
  if (!v66) {
    return this;
  }
  uint64_t v3 = v2[479];
  char v4 = 1;
  if (!v3)
  {
    uint64_t v5 = 0;
    goto LABEL_6;
  }
  char v41 = 0;
  uint64_t v5 = v2[480];
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v41, 1u, memory_order_acquire, memory_order_acquire);
  if (v41) {
    this = (void *)MEMORY[0x19972E8D0](v3);
  }
  if (*(void *)(v3 + 24)) {
    ++*(void *)(v3 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  int v42 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v42, 0, memory_order_release, memory_order_relaxed);
  if (v42 == 1)
  {
    if (!v5) {
      goto LABEL_6;
    }
  }
  else
  {
    this = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (!v5) {
      goto LABEL_6;
    }
  }
  if (!*(unsigned char *)(v5 + 4016))
  {
    *(unsigned char *)(v5 + 4016) = 1;
    this = (void *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v5);
    if (this) {
      this = (void *)(*(uint64_t (**)(void *))(*this + 160))(this);
    }
  }
  char v4 = 0;
LABEL_6:
  uint64_t v6 = v66;
  uint64_t v7 = v2[478];
  double v8 = *((double *)v66 + 15);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
    double v9 = v8 + v10;
  }
  if (*((void *)v6 + 7) != v7)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, buf, v9);
    if (!buf[16]) {
      goto LABEL_49;
    }
    uint64_t v21 = *(void *)buf;
    unint64_t v22 = *(void *)&buf[8];
    unint64_t v23 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - *(void *)buf;
    if (v23 < *(void *)buf)
    {
      unint64_t v26 = 0;
      unint64_t v25 = *(void *)&buf[8];
    }
    else
    {
      unint64_t v25 = 0;
      if (v24 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v26 = 0;
      }
      else
      {
        unint64_t v26 = 0;
        if (v24 + 2 <= *(void *)&buf[8])
        {
          *(_WORD *)(*(void *)buf + v24) = 2871;
          unint64_t v25 = v22;
          unint64_t v26 = v24 + 2;
        }
      }
    }
    uint64_t v27 = (void *)((v21 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v27 >= v21 + v26)
    {
      int v28 = (char *)v27 - v21;
      if ((unint64_t)v27 - v21 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_49;
      }
      unint64_t v26 = (unint64_t)(v28 + 8);
      if ((unint64_t)(v28 + 8) > v25) {
        goto LABEL_49;
      }
      *uint64_t v27 = v7;
    }
    if (!v25)
    {
LABEL_49:
      unint64_t v36 = off_1EB3583E8;
      if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v37 = IPC::errorAsString();
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_ApplyStrokePattern";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v37;
        _os_log_impl(&dword_1985F2000, v36, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
      }
      uint64_t v38 = v2[481];
      if (v38)
      {
        unint64_t v39 = *(unsigned char **)(v38 + 8);
        if (v39) {
          WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v39);
        }
      }
      goto LABEL_84;
    }
    unint64_t v29 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v30 = *((void *)v6 + 8);
    if (v29 + 16 >= v30) {
      unint64_t v29 = 0;
    }
    if (v26 <= 0x10) {
      unint64_t v26 = 16;
    }
    unint64_t v31 = v29 + v26;
    if (v30 <= v31) {
      unint64_t v32 = 0;
    }
    else {
      unint64_t v32 = v31;
    }
    *((void *)v6 + 10) = v32;
    unint64_t v33 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v32);
    int v34 = *((_DWORD *)v6 + 29);
    if (v33 == 0x80000000 || v34 != 0)
    {
      unsigned int v40 = v34 + 1;
      *((_DWORD *)v6 + 29) = v40;
      if (v40 >= *((_DWORD *)v6 + 28))
      {
        if (*((unsigned char *)v6 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
        }
        *((_DWORD *)v6 + 29) = 0;
      }
    }
    *((void *)v6 + 7) = v7;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, buf, v9);
  if (!buf[16]) {
    goto LABEL_49;
  }
  unint64_t v12 = *(void *)buf;
  uint64_t v13 = *(void *)&buf[8];
  unint64_t v14 = (_WORD *)((*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v15 = (unint64_t)v14 - *(void *)buf;
  if ((unint64_t)v14 < *(void *)buf)
  {
    unint64_t v16 = 0;
    if (*(void *)&buf[8]) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v15 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_70;
    }
    unint64_t v16 = v15 + 2;
    if (v15 + 2 > *(void *)&buf[8]) {
      goto LABEL_70;
    }
    _WORD *v14 = 820;
    if (v13)
    {
LABEL_14:
      unint64_t v17 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v18 = *((void *)v6 + 8);
      if (v17 + 16 >= v18) {
        unint64_t v17 = 0;
      }
      if (v16 <= 0x10) {
        unint64_t v16 = 16;
      }
      unint64_t v19 = v17 + v16;
      if (v18 <= v19) {
        unint64_t v20 = 0;
      }
      else {
        unint64_t v20 = v19;
      }
      *((void *)v6 + 10) = v20;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v20) == 0x80000000
        || *((_DWORD *)v6 + 29))
      {
        if (*((unsigned char *)v6 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
        }
        *((_DWORD *)v6 + 29) = 0;
      }
      goto LABEL_84;
    }
  }
  unint64_t v43 = buf[16];
  if (!buf[16])
  {
    __break(1u);
LABEL_103:
    unint64_t v46 = 0;
    goto LABEL_76;
  }
  unint64_t v12 = *(void *)buf;
  unint64_t v14 = (_WORD *)((*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_70:
  unint64_t v16 = 0;
  BOOL v44 = (unint64_t)v14 >= v12;
  unint64_t v45 = (unint64_t)v14 - v12;
  if (v44 && v45 <= 0xFFFFFFFFFFFFFFFDLL && v45 + 2 <= *(void *)&buf[8])
  {
    *(_WORD *)(v12 + v45) = 2870;
    unint64_t v16 = v45 + 2;
  }
  unint64_t v46 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *((void *)v6 + 8);
  if (v46 + 16 >= v43) {
    goto LABEL_103;
  }
LABEL_76:
  if (v16 <= 0x10) {
    unint64_t v16 = 16;
  }
  unint64_t v47 = v46 + v16;
  if (v43 <= v47) {
    unint64_t v48 = 0;
  }
  else {
    unint64_t v48 = v47;
  }
  *((void *)v6 + 10) = v48;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v48);
  *((_DWORD *)v6 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v6 + 1);
  unsigned int v49 = v67;
  unsigned int v50 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v50 = 820;
  *((void *)v50 + 1) = v7;
  *((void *)v50 + 66) = (char *)v50 + 16;
  *((void *)v50 + 67) = 512;
  *((void *)v50 + 68) = 0;
  *((void *)v50 + 70) = 0;
  *((void *)v50 + 69) = 0;
  IPC::Encoder::encodeHeader(v50);
  unsigned __int8 v68 = v50;
  int v52 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v68, 1, 0);
  unint64_t v53 = v68;
  unsigned __int8 v68 = 0;
  if (v53)
  {
    IPC::Encoder::~Encoder(v53, v51);
    WTF::fastFree(v61, v62);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v67);
  if (v52) {
    goto LABEL_49;
  }
LABEL_84:
  if ((v4 & 1) == 0)
  {
    char v54 = 0;
    uint64_t v55 = *(void *)(v5 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v55, (unsigned __int8 *)&v54, 1u, memory_order_acquire, memory_order_acquire);
    if (v54) {
      MEMORY[0x19972E8D0](v55);
    }
    uint64_t v56 = *(void *)(v55 + 8);
    int v57 = 1;
    uint64_t v58 = v56 - 1;
    *(void *)(v55 + 8) = v56 - 1;
    if (v56 == 1)
    {
      uint64_t v65 = *(void *)(v55 + 16);
      uint64_t v59 = *(void *)(v55 + 24);
      *(void *)(v55 + 24) = 0;
      BOOL v60 = v65 != 0;
    }
    else
    {
      uint64_t v59 = 0;
      BOOL v60 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v55, (unsigned __int8 *)&v57, 0, memory_order_release, memory_order_relaxed);
    if (v57 == 1)
    {
      if (!v58)
      {
LABEL_91:
        if (v59) {
          (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
        }
        if (!v60) {
          WTF::fastFree((WTF *)v55, v11);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v55);
      if (!v58) {
        goto LABEL_91;
      }
    }
  }
  this = v66;
  unint64_t v66 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v11);
      return (void *)WTF::fastFree(v63, v64);
    }
  }
  return this;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordApplyFillPattern(void *this)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = this[481];
  if (!v1) {
    return this;
  }
  uint64_t v2 = this;
  this = *(void **)(v1 + 8);
  if (!this) {
    return this;
  }
  this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v66);
  if (!v66) {
    return this;
  }
  uint64_t v3 = v2[479];
  char v4 = 1;
  if (!v3)
  {
    uint64_t v5 = 0;
    goto LABEL_6;
  }
  char v41 = 0;
  uint64_t v5 = v2[480];
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v41, 1u, memory_order_acquire, memory_order_acquire);
  if (v41) {
    this = (void *)MEMORY[0x19972E8D0](v3);
  }
  if (*(void *)(v3 + 24)) {
    ++*(void *)(v3 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  int v42 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v42, 0, memory_order_release, memory_order_relaxed);
  if (v42 == 1)
  {
    if (!v5) {
      goto LABEL_6;
    }
  }
  else
  {
    this = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (!v5) {
      goto LABEL_6;
    }
  }
  if (!*(unsigned char *)(v5 + 4016))
  {
    *(unsigned char *)(v5 + 4016) = 1;
    this = (void *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v5);
    if (this) {
      this = (void *)(*(uint64_t (**)(void *))(*this + 160))(this);
    }
  }
  char v4 = 0;
LABEL_6:
  uint64_t v6 = v66;
  uint64_t v7 = v2[478];
  double v8 = *((double *)v66 + 15);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
    double v9 = v8 + v10;
  }
  if (*((void *)v6 + 7) != v7)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, buf, v9);
    if (!buf[16]) {
      goto LABEL_49;
    }
    uint64_t v21 = *(void *)buf;
    unint64_t v22 = *(void *)&buf[8];
    unint64_t v23 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - *(void *)buf;
    if (v23 < *(void *)buf)
    {
      unint64_t v26 = 0;
      unint64_t v25 = *(void *)&buf[8];
    }
    else
    {
      unint64_t v25 = 0;
      if (v24 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v26 = 0;
      }
      else
      {
        unint64_t v26 = 0;
        if (v24 + 2 <= *(void *)&buf[8])
        {
          *(_WORD *)(*(void *)buf + v24) = 2871;
          unint64_t v25 = v22;
          unint64_t v26 = v24 + 2;
        }
      }
    }
    uint64_t v27 = (void *)((v21 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v27 >= v21 + v26)
    {
      int v28 = (char *)v27 - v21;
      if ((unint64_t)v27 - v21 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_49;
      }
      unint64_t v26 = (unint64_t)(v28 + 8);
      if ((unint64_t)(v28 + 8) > v25) {
        goto LABEL_49;
      }
      *uint64_t v27 = v7;
    }
    if (!v25)
    {
LABEL_49:
      unint64_t v36 = off_1EB3583E8;
      if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v37 = IPC::errorAsString();
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_ApplyFillPattern";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v37;
        _os_log_impl(&dword_1985F2000, v36, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
      }
      uint64_t v38 = v2[481];
      if (v38)
      {
        unint64_t v39 = *(unsigned char **)(v38 + 8);
        if (v39) {
          WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v39);
        }
      }
      goto LABEL_84;
    }
    unint64_t v29 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v30 = *((void *)v6 + 8);
    if (v29 + 16 >= v30) {
      unint64_t v29 = 0;
    }
    if (v26 <= 0x10) {
      unint64_t v26 = 16;
    }
    unint64_t v31 = v29 + v26;
    if (v30 <= v31) {
      unint64_t v32 = 0;
    }
    else {
      unint64_t v32 = v31;
    }
    *((void *)v6 + 10) = v32;
    unint64_t v33 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v32);
    int v34 = *((_DWORD *)v6 + 29);
    if (v33 == 0x80000000 || v34 != 0)
    {
      unsigned int v40 = v34 + 1;
      *((_DWORD *)v6 + 29) = v40;
      if (v40 >= *((_DWORD *)v6 + 28))
      {
        if (*((unsigned char *)v6 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
        }
        *((_DWORD *)v6 + 29) = 0;
      }
    }
    *((void *)v6 + 7) = v7;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, buf, v9);
  if (!buf[16]) {
    goto LABEL_49;
  }
  unint64_t v12 = *(void *)buf;
  uint64_t v13 = *(void *)&buf[8];
  unint64_t v14 = (_WORD *)((*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v15 = (unint64_t)v14 - *(void *)buf;
  if ((unint64_t)v14 < *(void *)buf)
  {
    unint64_t v16 = 0;
    if (*(void *)&buf[8]) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v15 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_70;
    }
    unint64_t v16 = v15 + 2;
    if (v15 + 2 > *(void *)&buf[8]) {
      goto LABEL_70;
    }
    _WORD *v14 = 819;
    if (v13)
    {
LABEL_14:
      unint64_t v17 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v18 = *((void *)v6 + 8);
      if (v17 + 16 >= v18) {
        unint64_t v17 = 0;
      }
      if (v16 <= 0x10) {
        unint64_t v16 = 16;
      }
      unint64_t v19 = v17 + v16;
      if (v18 <= v19) {
        unint64_t v20 = 0;
      }
      else {
        unint64_t v20 = v19;
      }
      *((void *)v6 + 10) = v20;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v20) == 0x80000000
        || *((_DWORD *)v6 + 29))
      {
        if (*((unsigned char *)v6 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
        }
        *((_DWORD *)v6 + 29) = 0;
      }
      goto LABEL_84;
    }
  }
  unint64_t v43 = buf[16];
  if (!buf[16])
  {
    __break(1u);
LABEL_103:
    unint64_t v46 = 0;
    goto LABEL_76;
  }
  unint64_t v12 = *(void *)buf;
  unint64_t v14 = (_WORD *)((*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_70:
  unint64_t v16 = 0;
  BOOL v44 = (unint64_t)v14 >= v12;
  unint64_t v45 = (unint64_t)v14 - v12;
  if (v44 && v45 <= 0xFFFFFFFFFFFFFFFDLL && v45 + 2 <= *(void *)&buf[8])
  {
    *(_WORD *)(v12 + v45) = 2870;
    unint64_t v16 = v45 + 2;
  }
  unint64_t v46 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *((void *)v6 + 8);
  if (v46 + 16 >= v43) {
    goto LABEL_103;
  }
LABEL_76:
  if (v16 <= 0x10) {
    unint64_t v16 = 16;
  }
  unint64_t v47 = v46 + v16;
  if (v43 <= v47) {
    unint64_t v48 = 0;
  }
  else {
    unint64_t v48 = v47;
  }
  *((void *)v6 + 10) = v48;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v48);
  *((_DWORD *)v6 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v6 + 1);
  unsigned int v49 = v67;
  unsigned int v50 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v50 = 819;
  *((void *)v50 + 1) = v7;
  *((void *)v50 + 66) = (char *)v50 + 16;
  *((void *)v50 + 67) = 512;
  *((void *)v50 + 68) = 0;
  *((void *)v50 + 70) = 0;
  *((void *)v50 + 69) = 0;
  IPC::Encoder::encodeHeader(v50);
  unsigned __int8 v68 = v50;
  int v52 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v68, 1, 0);
  unint64_t v53 = v68;
  unsigned __int8 v68 = 0;
  if (v53)
  {
    IPC::Encoder::~Encoder(v53, v51);
    WTF::fastFree(v61, v62);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v67);
  if (v52) {
    goto LABEL_49;
  }
LABEL_84:
  if ((v4 & 1) == 0)
  {
    char v54 = 0;
    uint64_t v55 = *(void *)(v5 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v55, (unsigned __int8 *)&v54, 1u, memory_order_acquire, memory_order_acquire);
    if (v54) {
      MEMORY[0x19972E8D0](v55);
    }
    uint64_t v56 = *(void *)(v55 + 8);
    int v57 = 1;
    uint64_t v58 = v56 - 1;
    *(void *)(v55 + 8) = v56 - 1;
    if (v56 == 1)
    {
      uint64_t v65 = *(void *)(v55 + 16);
      uint64_t v59 = *(void *)(v55 + 24);
      *(void *)(v55 + 24) = 0;
      BOOL v60 = v65 != 0;
    }
    else
    {
      uint64_t v59 = 0;
      BOOL v60 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v55, (unsigned __int8 *)&v57, 0, memory_order_release, memory_order_relaxed);
    if (v57 == 1)
    {
      if (!v58)
      {
LABEL_91:
        if (v59) {
          (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
        }
        if (!v60) {
          WTF::fastFree((WTF *)v55, v11);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v55);
      if (!v58) {
        goto LABEL_91;
      }
    }
  }
  this = v66;
  unint64_t v66 = 0;
  if (this)
  {
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v11);
      return (void *)WTF::fastFree(v63, v64);
    }
  }
  return this;
}

unsigned int *WebKit::RemoteDisplayListRecorderProxy::recordApplyDeviceScaleFactor(unsigned int *this, float a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  float v13 = a2;
  uint64_t v2 = *((void *)this + 481);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)this;
    this = *(unsigned int **)(v2 + 8);
    if (this)
    {
      this = (unsigned int *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, &v15);
      char v4 = (unsigned int *)v15;
      if (v15)
      {
        uint64_t v5 = (atomic_uchar *)v3[479];
        if (v5)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>(v5, v3[480], &v14);
          unint64_t v12 = v14;
          if (v14 && !*((unsigned char *)v14 + 4016))
          {
            *((unsigned char *)v14 + 4016) = 1;
            WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v12);
          }
        }
        else
        {
          unint64_t v14 = 0;
        }
        if (IPC::StreamClientConnection::send<Messages::RemoteDisplayListRecorder::ApplyDeviceScaleFactor,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>((uint64_t)v4, &v13, v3[478]))
        {
          double v8 = off_1EB3583E8;
          if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
          {
            double v9 = IPC::errorAsString();
            *(_DWORD *)long long buf = 136446466;
            unint64_t v17 = "RemoteDisplayListRecorder_ApplyDeviceScaleFactor";
            __int16 v18 = 2082;
            unint64_t v19 = v9;
            _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
          }
          uint64_t v10 = v3[481];
          if (v10)
          {
            double v11 = *(unsigned char **)(v10 + 8);
            if (v11) {
              WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v11);
            }
          }
        }
        uint64_t v7 = v14;
        unint64_t v14 = 0;
        if (v7) {
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageBuffer,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)v7 + 1, v6);
        }
        return WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(v4, v6);
      }
    }
  }
  return this;
}

uint64_t WebKit::RemoteDisplayListRecorderProxy::recordResourceUse(WebKit::RemoteDisplayListRecorderProxy *this, WebCore::NativeImage *a2)
{
  uint64_t v2 = *((void *)this + 481);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return 0;
  }
  WebKit::RemoteResourceCacheProxy::recordNativeImageUse((WebKit::RemoteRenderingBackendProxy **)(v3 + 72), a2);
  return 1;
}

WTF::MachSendRight *WebKit::RemoteResourceCacheProxy::recordNativeImageUse(WebKit::RemoteRenderingBackendProxy **this, WebCore::NativeImage *a2)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  __n128 result = (WTF::MachSendRight *)WTF::isMainRunLoop((WTF *)this);
  if (result)
  {
    uint64_t v2 = &qword_1EB35A000;
    {
      unint64_t v75 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v75);
    }
    __n128 result = (WTF::MachSendRight *)WebKit::WebProcess::singleton(void)::process;
    if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 584)) {
      __n128 result = (WTF::MachSendRight *)WebCore::DeferrableOneShotTimer::restart(WebKit::WebProcess::singleton(void)::process + 520);
    }
  }
  if (!*((unsigned char *)a2 + 40)) {
    goto LABEL_61;
  }
  uint64_t v4 = *((void *)a2 + 4);
  uint64_t v2 = (uint64_t *)(this + 3);
  uint64_t v10 = this[3];
  if (v10)
  {
    int v11 = *((_DWORD *)v10 - 2);
    unint64_t v12 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
    unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    unsigned int v15 = v11 & ((v14 >> 31) ^ v14);
    uint64_t v16 = *((void *)v10 + 3 * v15);
    if (v16 == v4) {
      return result;
    }
    int v17 = 1;
    while (v16)
    {
      unsigned int v15 = (v15 + v17) & v11;
      uint64_t v16 = *((void *)v10 + 3 * v15);
      ++v17;
      if (v16 == v4) {
        return result;
      }
    }
  }
  if (!(*(unsigned int (**)(void))(**((void **)a2 + 6) + 48))(*((void *)a2 + 6)))
  {
    WebCore::ShareableBitmap::createFromImagePixels();
    if (cf[0])
    {
      WebCore::ShareableBitmap::createPlatformImage();
      operator new();
    }
    unint64_t v74 = (WebCore::DestinationColorSpace *)WebCore::ShareableBitmap::createFromImageDraw();
    WebCore::DestinationColorSpace::SRGB(v74);
    WebCore::ShareableBitmap::createFromImageDraw();
    cf[0] = 0;
    char v80 = 0;
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)cf);
  }
  uint64_t v3 = 0;
  LOBYTE(cf[0]) = 0;
  char v80 = 0;
  WebCore::ShareableBitmap::createHandle();
  std::__optional_storage_base<WebCore::ShareableBitmapHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ShareableBitmapHandle,false>>((WTF::MachSendRight *)cf, (uint64_t)buf);
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)buf);
  if (!v80) {
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)cf);
  }
  __n128 result = (WTF::MachSendRight *)*((void *)a2 + 1);
  if (result) {
    __n128 result = (WTF::MachSendRight *)WTF::ThreadSafeWeakPtrControlBlock::weakRef((atomic_uchar *)result);
  }
  uint64_t v18 = *v2;
  if (*v2
    || (uint64_t v70 = result,
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)this + 3),
        __n128 result = v70,
        (uint64_t v18 = *v2) != 0))
  {
    int v19 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    int v19 = 0;
  }
  unint64_t v20 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
  unint64_t v24 = (uint64_t *)(v18 + 24 * v23);
  uint64_t v25 = *v24;
  if (*v24)
  {
    double v9 = 0;
    int v26 = 1;
    do
    {
      if (v25 == v4)
      {
        if (result) {
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)result, v8);
        }
        goto LABEL_36;
      }
      if (v25 == -1) {
        double v9 = v24;
      }
      unsigned int v23 = (v23 + v26) & v19;
      unint64_t v24 = (uint64_t *)(v18 + 24 * v23);
      uint64_t v25 = *v24;
      ++v26;
    }
    while (*v24);
    if (v9) {
      goto LABEL_62;
    }
  }
  while (1)
  {
    uint64_t v27 = (atomic_uchar *)v24[1];
    *unint64_t v24 = v4;
    v24[1] = (uint64_t)result;
    if (v27) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v27, v8);
    }
    uint64_t v24[2] = (uint64_t)a2;
    uint64_t v28 = *v2;
    int v29 = *v2 ? *(_DWORD *)(v28 - 12) + 1 : 1;
    *(_DWORD *)(v28 - 12) = v29;
    uint64_t v30 = *v2;
    int v31 = *v2 ? *(_DWORD *)(v30 - 12) : 0;
    uint64_t v32 = (*(_DWORD *)(v30 - 16) + v31);
    unint64_t v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 <= 2 * v32) {
LABEL_64:
      }
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v2);
    }
    else if (3 * v33 <= 4 * v32)
    {
      goto LABEL_64;
    }
LABEL_36:
    __n128 result = (WTF::MachSendRight *)WTF::WeakHashSet<WebCore::RenderingResourceObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderingResourceObserver>((uint64_t)buf, (_DWORD *)a2 + 4, (uint64_t)this);
    if (v80)
    {
      __n128 result = (WTF::MachSendRight *)WebCore::SharedMemoryHandle::takeOwnershipOfMemory();
      if (v3)
      {
        WebCore::NativeImage::replaceBackend();
        __n128 result = (WTF::MachSendRight *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      if (v80) {
        break;
      }
    }
LABEL_61:
    __break(1u);
LABEL_62:
    *double v9 = 0;
    v9[1] = 0;
    unsigned char v9[2] = 0;
    --*(_DWORD *)(*v2 - 16);
    unint64_t v24 = v9;
  }
  int v34 = this[7];
  uint64_t v81 = v4;
  uint64_t v35 = *((void *)v34 + 8);
  unint64_t v36 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(v34, &v82);
  unint64_t v37 = v82;
  if (!v82) {
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)cf);
  }
  double v38 = *((double *)v82 + 15);
  double v39 = INFINITY;
  if (fabs(v38) != INFINITY)
  {
    WTF::ApproximateTime::now(v36);
    double v39 = v38 + v40;
  }
  if (*((void *)v37 + 7) != v35)
  {
    double v78 = v39;
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v37 + 16), buf, v39);
    if (!buf[16]) {
      goto LABEL_92;
    }
    uint64_t v55 = *(void *)buf;
    unint64_t v56 = *(void *)&buf[8];
    unint64_t v57 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v58 = v57 - *(void *)buf;
    BOOL v59 = v57 >= *(void *)buf;
    unint64_t v60 = v57 - *(void *)buf + 2;
    BOOL v62 = v58 < 0xFFFFFFFFFFFFFFFELL && v60 <= *(void *)&buf[8];
    if (!v59 || !v62)
    {
      if (!v59)
      {
        unint64_t v60 = 0;
        goto LABEL_75;
      }
      unint64_t v63 = 0;
      if (v58 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v60 = 0;
        goto LABEL_76;
      }
      unint64_t v60 = 0;
      if (v58 + 2 > *(void *)&buf[8])
      {
LABEL_76:
        uint64_t v64 = (void *)((v55 + v60 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v64 < v55 + v60) {
          goto LABEL_80;
        }
        uint64_t v65 = (char *)v64 - v55;
        if ((unint64_t)v64 - v55 <= 0xFFFFFFFFFFFFFFF7)
        {
          unint64_t v60 = (unint64_t)(v65 + 8);
          if ((unint64_t)(v65 + 8) <= v63)
          {
            *uint64_t v64 = v35;
LABEL_80:
            if (v63)
            {
              unint64_t v66 = (*((void *)v37 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v67 = *((void *)v37 + 8);
              if (v66 + 16 >= v67) {
                unint64_t v66 = 0;
              }
              if (v60 <= 0x10) {
                unint64_t v60 = 16;
              }
              unint64_t v68 = v66 + v60;
              if (v67 <= v68) {
                unint64_t v69 = 0;
              }
              else {
                unint64_t v69 = v68;
              }
              *((void *)v37 + 10) = v69;
              IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v37, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v37 + 9) + 16) + 128), v69) == 0x80000000);
              *((void *)v37 + 7) = v35;
              double v39 = v78;
              goto LABEL_44;
            }
          }
        }
LABEL_92:
        unint64_t v71 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v72 = *((void *)v34 + 8);
          BOOL v73 = IPC::errorAsString();
          *(_DWORD *)long long buf = 134218498;
          *(void *)&uint8_t buf[4] = v72;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = "RemoteRenderingBackend_CacheNativeImage";
          __int16 v86 = 2082;
          unint64_t v87 = v73;
          _os_log_impl(&dword_1985F2000, v71, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
        }
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v34);
        goto LABEL_58;
      }
      unint64_t v60 = v58 + 2;
    }
    *(_WORD *)(*(void *)buf + v58) = 2871;
LABEL_75:
    unint64_t v63 = v56;
    goto LABEL_76;
  }
LABEL_44:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v37 + 16), buf, v39);
  if (!buf[16]) {
    goto LABEL_92;
  }
  unint64_t v41 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v42 = v41 - *(void *)buf;
  if (v41 < *(void *)buf)
  {
    unint64_t v43 = 0;
  }
  else
  {
    unint64_t v43 = 0;
    if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= *(void *)&buf[8])
    {
      *(_WORD *)(*(void *)buf + v42) = 2870;
      unint64_t v43 = v42 + 2;
    }
  }
  unint64_t v44 = (*((void *)v37 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v45 = *((void *)v37 + 8);
  if (v44 + 16 >= v45) {
    unint64_t v44 = 0;
  }
  if (v43 <= 0x10) {
    unint64_t v43 = 16;
  }
  unint64_t v46 = v44 + v43;
  if (v45 <= v46) {
    unint64_t v46 = 0;
  }
  *((void *)v37 + 10) = v46;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v37 + 9) + 16) + 128), v46);
  v37[29] = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v83, (uint64_t **)v37 + 1);
  unint64_t v47 = v83;
  unint64_t v48 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v48 = 1326;
  *((void *)v48 + 1) = v35;
  *((void *)v48 + 66) = (char *)v48 + 16;
  *((void *)v48 + 67) = 512;
  *((void *)v48 + 68) = 0;
  *((void *)v48 + 70) = 0;
  *((void *)v48 + 69) = 0;
  IPC::Encoder::encodeHeader(v48);
  unsigned int v84 = v48;
  IPC::ArgumentCoder<WebCore::ShareableBitmapHandle,void>::encode(v48, (unint64_t)cf);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v48, &v81);
  int v50 = IPC::Connection::sendMessageImpl((uint64_t)v47, (uint64_t *)&v84, 1, 0);
  uint64_t v51 = v84;
  unsigned int v84 = 0;
  if (v51)
  {
    IPC::Encoder::~Encoder(v51, v49);
    WTF::fastFree(v53, v54);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v83);
  if (v50) {
    goto LABEL_92;
  }
LABEL_58:
  int v82 = 0;
  if (atomic_fetch_add(v37, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v37);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v37, v52);
    WTF::fastFree(v76, v77);
  }
  return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)cf);
}

uint64_t WebKit::RemoteDisplayListRecorderProxy::recordResourceUse(WebKit::RemoteDisplayListRecorderProxy *this, WebCore::ImageBuffer *a2)
{
  uint64_t v2 = *((void *)this + 481);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return 0;
  }
  WebKit::RemoteResourceCacheProxy::cachedImageBuffer(v3 + 72, *((void *)a2 + 15), &v17);
  uint64_t v7 = v17;
  uint64_t v17 = 0;
  if (!v7) {
    return 0;
  }
  char v8 = 0;
  uint64_t v9 = *(void *)(v7 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    MEMORY[0x19972E8D0](v9);
  }
  uint64_t v10 = *(void *)(v9 + 8);
  int v11 = 1;
  uint64_t v12 = v10 - 1;
  *(void *)(v9 + 8) = v10 - 1;
  if (v10 == 1)
  {
    uint64_t v16 = *(void *)(v9 + 16);
    uint64_t v13 = *(void *)(v9 + 24);
    *(void *)(v9 + 24) = 0;
    BOOL v14 = v16 != 0;
  }
  else
  {
    uint64_t v13 = 0;
    BOOL v14 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
  if (!v12)
  {
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    if (!v14) {
      WTF::fastFree((WTF *)v9, v6);
    }
  }
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::find(*(void *)(*(void *)(*((void *)this + 481) + 8) + 88), *((void *)a2 + 15));
  return 1;
}

uint64_t WebKit::RemoteDisplayListRecorderProxy::recordResourceUse(WebKit::RemoteDisplayListRecorderProxy *this, const WebCore::SourceImage *a2)
{
  uint64_t v4 = (WebCore::ImageBuffer *)WebCore::SourceImage::imageBufferIfExists(a2);
  if (v4)
  {
    return WebKit::RemoteDisplayListRecorderProxy::recordResourceUse(this, v4);
  }
  else
  {
    uint64_t v7 = (WebCore::NativeImage *)WebCore::SourceImage::nativeImageIfExists(a2);
    if (v7)
    {
      uint64_t v6 = *((void *)this + 481);
      if (v6)
      {
        uint64_t v6 = *(void *)(v6 + 8);
        if (v6)
        {
          WebKit::RemoteResourceCacheProxy::recordNativeImageUse((WebKit::RemoteRenderingBackendProxy **)(v6 + 72), v7);
          LOBYTE(v6) = 1;
        }
      }
    }
    return (v7 == 0) | (v6 & 1);
  }
}

uint64_t WebKit::RemoteDisplayListRecorderProxy::recordResourceUse(WebKit::RemoteDisplayListRecorderProxy *this, WebCore::Font *a2)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 481);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = (const WebCore::FontCustomPlatformData *)*((void *)a2 + 13);
  if (v5) {
    WebKit::RemoteResourceCacheProxy::recordFontCustomPlatformDataUse(v3 + 72, v5);
  }
  uint64_t v6 = WebCore::Font::renderingResourceIdentifier(a2);
  char v8 = (uint64_t *)(v3 + 104);
  uint64_t v7 = *(void *)(v3 + 104);
  if (v7
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(v3 + 104)),
        (uint64_t v7 = *v8) != 0))
  {
    int v9 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unint64_t v10 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v9 & ((v12 >> 31) ^ v12);
  BOOL v14 = (uint64_t *)(v7 + 16 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    while (v15 != v6)
    {
      if (v15 == -1) {
        uint64_t v16 = v14;
      }
      unsigned int v13 = (v13 + v17) & v9;
      BOOL v14 = (uint64_t *)(v7 + 16 * v13);
      uint64_t v15 = *v14;
      ++v17;
      if (!*v14)
      {
        if (v16)
        {
          *uint64_t v16 = 0;
          v16[1] = 0;
          --*(_DWORD *)(*v8 - 16);
          BOOL v14 = v16;
        }
        goto LABEL_17;
      }
    }
    uint64_t v18 = *(void *)(v3 + 136);
    if (v14[1] == v18) {
      return 1;
    }
    v14[1] = v18;
    goto LABEL_52;
  }
LABEL_17:
  uint64_t *v14 = v6;
  v14[1] = *(void *)(v3 + 136);
  uint64_t v20 = *(void *)(v3 + 104);
  if (v20) {
    int v21 = *(_DWORD *)(v20 - 12) + 1;
  }
  else {
    int v21 = 1;
  }
  *(_DWORD *)(v20 - 12) = v21;
  uint64_t v22 = *v8;
  if (*v8) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  unint64_t v24 = (WebCore::Font *)((char *)a2 + 88);
  uint64_t v25 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v26 = *(unsigned int *)(v22 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25) {
      goto LABEL_23;
    }
  }
  else if (3 * v26 > 4 * v25)
  {
    goto LABEL_23;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(v3 + 104));
  unint64_t v24 = (WebCore::Font *)((char *)a2 + 88);
LABEL_23:
  uint64_t v27 = *((void *)a2 + 13);
  if (v27)
  {
    uint64_t v29 = *(void *)(v27 + 32);
    uint64_t v28 = 1;
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
  }
  uint64_t v30 = *(WebKit::RemoteRenderingBackendProxy **)(v3 + 128);
  WebCore::FontPlatformData::attributes(v79, v24);
  v83[0] = v29;
  v83[1] = v28;
  uint64_t v31 = *((void *)v30 + 8);
  uint64_t v32 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(v30, &v84);
  unint64_t v33 = v84;
  if (v84)
  {
    double v34 = *((double *)v84 + 15);
    double v35 = INFINITY;
    if (fabs(v34) != INFINITY)
    {
      WTF::ApproximateTime::now(v32);
      double v35 = v34 + v36;
    }
    if (*((void *)v33 + 7) == v31)
    {
LABEL_29:
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v33 + 16), buf, v35);
      if (buf[16])
      {
        unint64_t v37 = (char *)a2 + 240;
        unint64_t v38 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v39 = v38 - *(void *)buf;
        if (v38 < *(void *)buf)
        {
          unint64_t v40 = 0;
        }
        else
        {
          unint64_t v40 = 0;
          if (v39 <= 0xFFFFFFFFFFFFFFFDLL && v39 + 2 <= *(void *)&buf[8])
          {
            *(_WORD *)(*(void *)buf + v39) = 2870;
            unint64_t v40 = v39 + 2;
          }
        }
        unint64_t v41 = (*((void *)v33 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v42 = *((void *)v33 + 8);
        if (v41 + 16 >= v42) {
          unint64_t v41 = 0;
        }
        if (v40 <= 0x10) {
          unint64_t v40 = 16;
        }
        unint64_t v43 = v41 + v40;
        if (v42 <= v43) {
          unint64_t v43 = 0;
        }
        *((void *)v33 + 10) = v43;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v33 + 9) + 16) + 128), v43);
        v33[29] = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v85, (uint64_t **)v33 + 1);
        unint64_t v44 = v85;
        unint64_t v45 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)unint64_t v45 = 1323;
        *((void *)v45 + 1) = v31;
        *((void *)v45 + 66) = (char *)v45 + 16;
        *((void *)v45 + 67) = 512;
        *((void *)v45 + 68) = 0;
        *((void *)v45 + 70) = 0;
        *((void *)v45 + 69) = 0;
        IPC::Encoder::encodeHeader(v45);
        __int16 v86 = v45;
        IPC::ArgumentCoder<WebCore::FontInternalAttributes,void>::encode(v45, (uint64_t)v37);
        IPC::ArgumentCoder<WebCore::FontPlatformDataAttributes,void>::encode(v45, (uint64_t)v79);
        IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(v45, (uint64_t)v83);
        int v47 = IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v86, 1, 0);
        unint64_t v48 = v86;
        __int16 v86 = 0;
        if (v48)
        {
          IPC::Encoder::~Encoder(v48, v46);
          WTF::fastFree(v53, v54);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v85);
        if (!v47) {
          goto LABEL_43;
        }
      }
      goto LABEL_90;
    }
    double v78 = v35;
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v33 + 16), buf, v35);
    if (!buf[16]) {
      goto LABEL_90;
    }
    uint64_t v55 = *(void *)buf;
    unint64_t v56 = *(void *)&buf[8];
    unint64_t v57 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v58 = v57 - *(void *)buf;
    BOOL v59 = v57 >= *(void *)buf;
    unint64_t v60 = v57 - *(void *)buf + 2;
    BOOL v62 = v58 < 0xFFFFFFFFFFFFFFFELL && v60 <= *(void *)&buf[8];
    if (!v59 || !v62)
    {
      if (!v59)
      {
        unint64_t v60 = 0;
        goto LABEL_67;
      }
      unint64_t v63 = 0;
      if (v58 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v60 = 0;
        goto LABEL_68;
      }
      unint64_t v60 = 0;
      if (v58 + 2 > *(void *)&buf[8])
      {
LABEL_68:
        unint64_t v64 = (v55 + v60 + 7) & 0xFFFFFFFFFFFFFFF8;
        if (v64 >= v55 + v60)
        {
          unint64_t v65 = v64 - v55;
          if (v65 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_90;
          }
          unint64_t v60 = v65 + 8;
          if (v65 + 8 > v63) {
            goto LABEL_90;
          }
          *(void *)(v55 + v65) = v31;
        }
        if (v63)
        {
          unint64_t v66 = (*((void *)v33 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v67 = *((void *)v33 + 8);
          if (v66 + 16 >= v67) {
            unint64_t v66 = 0;
          }
          if (v60 <= 0x10) {
            unint64_t v60 = 16;
          }
          unint64_t v68 = v66 + v60;
          if (v67 <= v68) {
            unint64_t v69 = 0;
          }
          else {
            unint64_t v69 = v68;
          }
          *((void *)v33 + 10) = v69;
          unint64_t v70 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v33 + 9) + 16) + 128), v69);
          atomic_uint v71 = v33[29];
          if (v70 == 0x80000000 || v71)
          {
            unsigned int v72 = v71 + 1;
            v33[29] = v72;
            if (v72 >= v33[28])
            {
              if (*((unsigned char *)v33 + 104)) {
                MEMORY[0x1997420B0](v33[23]);
              }
              v33[29] = 0;
            }
          }
          *((void *)v33 + 7) = v31;
          double v35 = v78;
          goto LABEL_29;
        }
LABEL_90:
        unint64_t v75 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v76 = *((void *)v30 + 8);
          unint64_t v77 = IPC::errorAsString();
          *(_DWORD *)long long buf = 134218498;
          *(void *)&uint8_t buf[4] = v76;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = "RemoteRenderingBackend_CacheFont";
          __int16 v88 = 2082;
          unint64_t v89 = v77;
          _os_log_impl(&dword_1985F2000, v75, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
        }
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v30);
LABEL_43:
        unsigned int v84 = 0;
        if (atomic_fetch_add(v33, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v33);
          IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v33, v49);
          WTF::fastFree(v73, v74);
        }
        goto LABEL_45;
      }
      unint64_t v60 = v58 + 2;
    }
    *(_WORD *)(*(void *)buf + v58) = 2871;
LABEL_67:
    unint64_t v63 = v56;
    goto LABEL_68;
  }
LABEL_45:
  CFTypeRef v50 = cf;
  CFTypeRef cf = 0;
  if (v50) {
    CFRelease(v50);
  }
  CFTypeRef v51 = v81;
  CFTypeRef v81 = 0;
  if (v51) {
    CFRelease(v51);
  }
  CFTypeRef v52 = v80;
  CFTypeRef v80 = 0;
  if (v52) {
    CFRelease(v52);
  }
LABEL_52:
  ++*(_DWORD *)(v3 + 120);
  return 1;
}

void WebKit::RemoteResourceCacheProxy::recordFilterUse(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = *(unsigned __int8 *)(a2 + 40);
  if (!*(unsigned char *)(a2 + 40))
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v7 = *(void **)(a2 + 32);
  uint64_t v5 = (uint64_t *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 24);
  v25[0] = (uint64_t *)a2;
  if (v8
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 24)),
        (uint64_t v8 = *v5) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unint64_t v10 = ((unint64_t)v7 + ~((void)v7 << 32)) ^ (((unint64_t)v7 + ~((void)v7 << 32)) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v9 & ((v12 >> 31) ^ v12);
  BOOL v14 = (void *)(v8 + 24 * v13);
  uint64_t v15 = (void *)*v14;
  if (!*v14)
  {
LABEL_12:
    WTF::HashMapTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::translate<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>> WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::inlineAdd<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::Filter &>(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> &&,WebCore::Filter &)::{lambda(void)#1}>(v14, v7, (uint64_t *)v25);
    uint64_t v18 = *v5;
    if (*v5) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - 12) = v19;
    uint64_t v20 = *v5;
    if (*v5) {
      int v21 = *(_DWORD *)(v20 - 12);
    }
    else {
      int v21 = 0;
    }
    uint64_t v2 = (*(_DWORD *)(v20 - 16) + v21);
    unint64_t v6 = *(unsigned int *)(v20 - 4);
    if (v6 <= 0x400)
    {
      if (3 * v6 > 4 * v2)
      {
LABEL_19:
        WTF::WeakHashSet<WebCore::RenderingResourceObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderingResourceObserver>((uint64_t)v25, (_DWORD *)(v3 + 16), v4);
        uint64_t v22 = *(uint64_t **)(v4 + 56);
        WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v24, v3);
        v25[0] = &v24;
        WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CacheFilter,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>((WebKit::RemoteRenderingBackendProxy *)v22, v25, v22[8]);
        WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v24, v23);
        return;
      }
LABEL_18:
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v5);
      goto LABEL_19;
    }
LABEL_23:
    if (v6 > 2 * v2) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v16 = 0;
  int v17 = 1;
  while (v15 != v7)
  {
    if (v15 == (void *)-1) {
      uint64_t v16 = v14;
    }
    unsigned int v13 = (v13 + v17) & v9;
    BOOL v14 = (void *)(v8 + 24 * v13);
    uint64_t v15 = (void *)*v14;
    ++v17;
    if (!*v14)
    {
      if (v16)
      {
        *uint64_t v16 = 0;
        v16[1] = 0;
        _OWORD v16[2] = 0;
        --*(_DWORD *)(*v5 - 16);
        BOOL v14 = v16;
      }
      goto LABEL_12;
    }
  }
}

void WebKit::RemoteDisplayListRecorderProxy::createImageBuffer(uint64_t a1@<X0>, uint64_t *a2@<X1>, CFTypeRef *a3@<X2>, __int16 a4@<W3>, __int16 a5@<W4>, WebCore::ImageBuffer **a6@<X8>, float a7@<S0>)
{
  uint64_t v7 = *(void *)(a1 + 3848);
  if (v7 && (uint64_t v8 = *(WebKit::RemoteRenderingBackendProxy **)(v7 + 8)) != 0)
  {
    if ((a5 & 0xFF00) != 0)
    {
      MEMORY[0x1F4174C98]();
    }
    else
    {
      char v9 = *(unsigned char *)(a1 + 3856);
      if ((a4 & 0xFF00) != 0) {
        char v9 = a4;
      }
      WebKit::RemoteRenderingBackendProxy::createImageBuffer(v8, a2, 0, a3, 1, v9 != 0, a6, a7);
    }
  }
  else
  {
    *a6 = 0;
  }
}

void WebKit::RemoteRenderingBackendProxy::createImageBuffer(WebKit::RemoteRenderingBackendProxy *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, CFTypeRef *a4@<X3>, char a5@<W4>, char a6@<W5>, WebCore::ImageBuffer **a7@<X8>, float a8@<S0>)
{
  if (a6)
  {
    {
      int v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v17);
    }
    if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 762)) {
      WebKit::RemoteImageBufferProxy::create<WebKit::ImageBufferRemoteIOSurfaceBackend>(a2, a4, a5, a3, (uint64_t)a1, (a6 & 2) != 0, (uint64_t *)&v18, a8);
    }
    else {
      WebKit::RemoteImageBufferProxy::create<WebKit::ImageBufferShareableMappedIOSurfaceBackend>(a2, a4, a5, a3, (uint64_t)a1, (a6 & 2) != 0, (uint64_t *)&v18, a8);
    }
    uint64_t v16 = v18;
    if (v18) {
      goto LABEL_6;
    }
  }
  WebKit::RemoteImageBufferProxy::create<WebKit::ImageBufferShareableBitmapBackend>(a2, a4, a5, a3, (uint64_t)a1, (a6 & 2) != 0, (uint64_t *)&v18, a8);
  uint64_t v16 = v18;
  if (v18) {
LABEL_6:
  }
    WebKit::RemoteRenderingBackendProxy::createRemoteImageBuffer(a1, v16);
  *a7 = v16;
}

uint64_t WebKit::RemoteDisplayListRecorderProxy::createAlignedImageBuffer(WebCore::GraphicsContext *this)
{
  return WebCore::GraphicsContext::createScaledImageBuffer();
}

{
  WebCore::GraphicsContext::scaleFactor(this);
  return WebCore::GraphicsContext::createScaledImageBuffer();
}

unsigned int *WebKit::RemoteDisplayListRecorderProxy::disconnect(WebKit::RemoteDisplayListRecorderProxy *this, void *a2)
{
  __n128 result = (unsigned int *)*((void *)this + 481);
  *((void *)this + 481) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    __n128 result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  char v4 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 3857, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    __n128 result = (unsigned int *)MEMORY[0x19972E8D0]((char *)this + 3857);
  }
  uint64_t v5 = *((void *)this + 483);
  if (v5)
  {
    *(unsigned char *)(v5 + 17) = 1;
    IPC::Semaphore::signal(*(IPC::Semaphore **)v5);
  }
  int v6 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 3857, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1)
  {
    return (unsigned int *)WTF::Lock::unlockSlow((WebKit::RemoteDisplayListRecorderProxy *)((char *)this + 3857));
  }
  return result;
}

unsigned int **WebKit::RemoteGraphicsContextGLProxy::create@<X0>(unsigned char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, WebKit::RemoteGraphicsContextGLProxy **a4@<X8>)
{
  if (a1[8] == 1) {
    uint64_t v8 = 50;
  }
  else {
    uint64_t v8 = 21;
  }
  {
    uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  double v9 = WebKit::WebProcess::gpuProcessTimeoutDuration((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  __n128 result = (unsigned int **)IPC::StreamClientConnection::create(v8, &v20, v9);
  if (v23)
  {
    unint64_t v11 = v20;
    uint64_t v20 = 0;
    int v17 = v11;
    WTF::MachSendRight::MachSendRight();
    WTF::MachSendRight::MachSendRight();
    v19[1] = v22[1];
    WebKit::RemoteGraphicsContextGLProxy::platformCreate(a1, a3, (uint64_t *)&v16);
    unint64_t v12 = v16;
    WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection((WebKit::WebProcess *)a2);
    WebKit::RemoteGraphicsContextGLProxy::initializeIPC((uint64_t)v12, (uint64_t *)&v17, a2[8], (uint64_t)&v18);
    if (a1[8] == 2) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v12);
    }
    WebKit::RemoteGraphicsContextGLProxy::waitUntilInitialized(v12);
    *a4 = v12;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v19);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v18);
    __n128 result = WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v17, v13);
    if (v23)
    {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v22);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v21);
      return WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v20, v14);
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::initializeIPC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = *(unsigned int **)(a1 + 104);
  *(void *)(a1 + 104) = v6;
  if (v7)
  {
    WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(v7, a2);
    uint64_t v6 = *(void *)(a1 + 104);
  }
  IPC::StreamClientConnection::open(v6, (void *)a1, (_OWORD *)(a1 + 72));
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v8 = &unk_1EE9E9F20;
  v8[1] = a1;
  v8[2] = &v11;
  v8[3] = a4;
  unint64_t v10 = v8;
  WTF::callOnMainRunLoopAndWait();
  uint64_t result = (uint64_t)v10;
  if (v10) {
    return (*(uint64_t (**)(void *))(*v10 + 8))(v10);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::waitUntilInitialized(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t result = *((void *)this + 13);
  if (result && !*((unsigned char *)this + 112))
  {
    uint64_t result = IPC::StreamClientConnection::waitForAndDispatchImmediately<Messages::RemoteGraphicsContextGLProxy::WasCreated,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, *((void *)this + 10), 0);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t sub_19903F0AC()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)(v0 + 24) + 2304);
  return v1(v0 + 24);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::RemoteGraphicsContextGLProxy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE9E98D8;
  *(void *)(a1 + 8) = 0;
  WebCore::GraphicsContextGL::GraphicsContextGL();
  WTF::FunctionDispatcher::FunctionDispatcher((WTF::FunctionDispatcher *)(a1 + 72));
  *(void *)a1 = &unk_1EE9E8418;
  *(void *)(a1 + 24) = &unk_1EE9E8D48;
  *(void *)(a1 + 72) = &unk_1EE9E9660;
  *(void *)(a1 + 80) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(a1 + 88) = a3;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0;
  WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter((WebKit::SharedVideoFrameWriter *)(a1 + 144));
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  return a1;
}

void WebKit::RemoteGraphicsContextGLProxy::~RemoteGraphicsContextGLProxy(WebKit::RemoteGraphicsContextGLProxy *this)
{
  *(void *)this = &unk_1EE9E8418;
  *((void *)this + 3) = &unk_1EE9E8D48;
  *((void *)this + 9) = &unk_1EE9E9660;
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
}

uint64_t sub_19903F260()
{
  uint64_t v3 = *(unsigned int **)(v0 + 168);
  *(void *)(v0 + 168) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v3);
  }
  char v4 = *(unsigned int **)(v0 + 152);
  *(void *)(v0 + 152) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v4);
  }
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)(v0 + 144), 0);
  uint64_t v6 = *(WTF::StringImpl ***)(v0 + 136);
  if (v6) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v5);
  }
  uint64_t v7 = *(WTF::StringImpl ***)(v0 + 128);
  if (v7) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v7, v5);
  }
  uint64_t v8 = *(WTF::StringImpl ***)(v0 + 120);
  if (v8) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v5);
  }
  double v9 = *(unsigned int **)(v0 + 104);
  *(void *)(v0 + 104) = 0;
  if (v9) {
    WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(v9, v5);
  }
  unint64_t v10 = *(unsigned int **)(v0 + 96);
  *(void *)(v0 + 96) = 0;
  if (v10 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v5);
  }
  WTF::FunctionDispatcher::~FunctionDispatcher(v2);
  WebCore::GraphicsContextGL::~GraphicsContextGL(v1);
  *(void *)uint64_t v0 = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v0 + 8), v11);
  return v0;
}

void WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(WebKit::RemoteGraphicsContextGLProxy *this)
{
  *((unsigned char *)this + 161) = 1;
  IPC::Semaphore::signal(*((IPC::Semaphore **)this + 18));
}

uint64_t **sub_19903F36C()
{
  uint64_t result = (uint64_t **)v0[13];
  if (result)
  {
    IPC::StreamClientConnection::invalidate(result);
    uint64_t v3 = (unsigned int *)v0[13];
    v0[13] = 0;
    if (v3) {
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(v3, v2);
    }
    char v4 = (uint64_t *)v0[10];
    uint64_t v5 = (uint64_t *)v0[12];
    v0[12] = 0;
    uint64_t v6 = (uint64_t **)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v6 = (uint64_t *)&unk_1EE9EA010;
    v6[1] = v4;
    v6[2] = v5;
    uint64_t v7 = v6;
    WTF::ensureOnMainRunLoop();
    uint64_t result = v7;
    if (v7) {
      return (uint64_t **)((uint64_t (*)(uint64_t **))(*v7)[1])(v7);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::supportsExtension(WebKit::RemoteGraphicsContextGLProxy *this, WTF::StringImpl **a2)
{
  WebKit::RemoteGraphicsContextGLProxy::waitUntilInitialized(this);
  uint64_t v5 = *((void *)this + 15);
  if (v5)
  {
    int v8 = *(_DWORD *)(v5 - 8);
    unsigned int v9 = *((_DWORD *)*a2 + 4);
    if (v9 >= 0x100) {
      unsigned int v10 = v9 >> 8;
    }
    else {
      unsigned int v10 = WTF::StringImpl::hashSlowCase(*a2);
    }
    for (i = 0; ; unsigned int v10 = i + v15)
    {
      int v15 = v10 & v8;
      uint64_t v16 = *(WTF **)(v5 + 8 * (v10 & v8));
      if (v16 != (WTF *)-1)
      {
        if (!v16) {
          goto LABEL_2;
        }
        if (WTF::equal(v16, *a2, v4)) {
          break;
        }
      }
      ++i;
    }
    return 1;
  }
LABEL_2:
  uint64_t v6 = *((void *)this + 16);
  if (v6)
  {
    int v11 = *(_DWORD *)(v6 - 8);
    unsigned int v12 = *((_DWORD *)*a2 + 4);
    if (v12 >= 0x100) {
      unsigned int v13 = v12 >> 8;
    }
    else {
      unsigned int v13 = WTF::StringImpl::hashSlowCase(*a2);
    }
    for (j = 0; ; unsigned int v13 = j + v18)
    {
      int v18 = v13 & v11;
      uint64_t result = *(void *)(v6 + 8 * (v13 & v11));
      if (result != -1)
      {
        if (!result) {
          return result;
        }
        if (WTF::equal((WTF *)result, *a2, v4)) {
          break;
        }
      }
      ++j;
    }
    return 1;
  }
  return 0;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::supportsExtension(WebKit::RemoteGraphicsContextGLProxy *this, WTF::StringImpl **a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::supportsExtension((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::ensureExtensionEnabled(WebKit::RemoteGraphicsContextGLProxy *this, WTF::StringImpl **a2)
{
  uint64_t result = WebKit::RemoteGraphicsContextGLProxy::waitUntilInitialized(this);
  uint64_t v6 = *((void *)this + 16);
  if (v6)
  {
    int v7 = *(_DWORD *)(v6 - 8);
    unsigned int v8 = *((_DWORD *)*a2 + 4);
    if (v8 >= 0x100) {
      unsigned int v9 = v8 >> 8;
    }
    else {
      unsigned int v9 = WTF::StringImpl::hashSlowCase(*a2);
    }
    for (i = 0; ; unsigned int v9 = i + v11)
    {
      int v11 = v9 & v7;
      uint64_t result = *(void *)(v6 + 8 * (v9 & v7));
      if (result != -1)
      {
        if (!result) {
          return result;
        }
        if (WTF::equal((WTF *)result, *a2, v5)) {
          break;
        }
      }
      ++i;
    }
    unsigned int v12 = (uint64_t *)((char *)this + 136);
    uint64_t v13 = *((void *)this + 17);
    if (v13)
    {
      int v14 = *(_DWORD *)(v13 - 8);
      unsigned int v15 = *((_DWORD *)*a2 + 4);
      if (v15 >= 0x100) {
        unsigned int v16 = v15 >> 8;
      }
      else {
        unsigned int v16 = WTF::StringImpl::hashSlowCase(*a2);
      }
      for (j = 0; ; unsigned int v16 = j + v18)
      {
        int v18 = v16 & v14;
        int v19 = *(WTF **)(v13 + 8 * (v16 & v14));
        if (v19 != (WTF *)-1)
        {
          unsigned int v12 = (uint64_t *)((char *)this + 136);
          if (!v19) {
            goto LABEL_12;
          }
          uint64_t result = WTF::equal(v19, *a2, v5);
          if (result) {
            break;
          }
        }
        ++j;
      }
    }
    else
    {
LABEL_12:
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v12, a2, v5, (uint64_t)v20);
      uint64_t result = *((void *)this + 13);
      if (result)
      {
        v20[0] = (uint64_t *)a2;
        uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EnsureExtensionEnabled,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v20, *((void *)this + 10));
        if (result) {
          WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
        }
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::ensureExtensionEnabled(WebKit::RemoteGraphicsContextGLProxy *this, WTF::StringImpl **a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::ensureExtensionEnabled((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::isExtensionEnabled(WebKit::RemoteGraphicsContextGLProxy *this, WTF::StringImpl **a2)
{
  WebKit::RemoteGraphicsContextGLProxy::waitUntilInitialized(this);
  uint64_t v5 = *((void *)this + 15);
  if (v5)
  {
    int v8 = *(_DWORD *)(v5 - 8);
    unsigned int v9 = *((_DWORD *)*a2 + 4);
    if (v9 >= 0x100) {
      unsigned int v10 = v9 >> 8;
    }
    else {
      unsigned int v10 = WTF::StringImpl::hashSlowCase(*a2);
    }
    for (i = 0; ; unsigned int v10 = i + v15)
    {
      int v15 = v10 & v8;
      unsigned int v16 = *(WTF **)(v5 + 8 * (v10 & v8));
      if (v16 != (WTF *)-1)
      {
        if (!v16) {
          goto LABEL_2;
        }
        if (WTF::equal(v16, *a2, v4)) {
          break;
        }
      }
      ++i;
    }
    return 1;
  }
LABEL_2:
  uint64_t v6 = *((void *)this + 17);
  if (v6)
  {
    int v11 = *(_DWORD *)(v6 - 8);
    unsigned int v12 = *((_DWORD *)*a2 + 4);
    if (v12 >= 0x100) {
      unsigned int v13 = v12 >> 8;
    }
    else {
      unsigned int v13 = WTF::StringImpl::hashSlowCase(*a2);
    }
    for (j = 0; ; unsigned int v13 = j + v18)
    {
      int v18 = v13 & v11;
      uint64_t result = *(void *)(v6 + 8 * (v13 & v11));
      if (result != -1)
      {
        if (!result) {
          return result;
        }
        if (WTF::equal((WTF *)result, *a2, v4)) {
          break;
        }
      }
      ++j;
    }
    return 1;
  }
  return 0;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isExtensionEnabled(WebKit::RemoteGraphicsContextGLProxy *this, WTF::StringImpl **a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isExtensionEnabled((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::externalImageTextureBindingPoint(WebKit::RemoteGraphicsContextGLProxy *this)
{
  if (*((void *)this + 13)) {
    return *((void *)this + 22);
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::externalImageTextureBindingPoint(WebKit::RemoteGraphicsContextGLProxy *this)
{
  if (*((void *)this + 10)) {
    return *((void *)this + 19);
  }
  else {
    return 0;
  }
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::reshape(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    *((_DWORD *)this + 9) = a2;
    *((_DWORD *)this + 10) = a3;
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Reshape,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::reshape(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::reshape((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::drawSurfaceBufferToImageBuffer(uint64_t result, char a2, void *a3)
{
  if (*(void *)(result + 104))
  {
    uint64_t v5 = result;
    (*(void (**)(void *))(*a3 + 24))(a3);
    uint64_t v6 = a3[15];
    v7[0] = a2;
    int v8 = &v6;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(double **)(v5 + 104), (uint64_t)v7, *(IPC::Encoder **)(v5 + 80), (uint64_t)v9);
    if (v10) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)v5);
    }
    return ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(v7, v9);
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawSurfaceBufferToImageBuffer(uint64_t a1, char a2, void *a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawSurfaceBufferToImageBuffer(a1 - 24, a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::surfaceBufferToVideoFrame@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result = (double *)a1[13];
  if (result)
  {
    LOBYTE(v14[0]) = a2;
    uint64_t result = (double *)IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, (char *)v14, a1[10], (uint64_t)v15);
    if (v20) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
    v14[0] = v16;
    v14[1] = v17;
    void v14[2] = v18;
    v14[3] = v19;
    if (BYTE8(v19))
    {
      {
        int v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v11);
      }
      uint64_t v6 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v13, (uint64_t **)(v6 + 32));
      int v7 = v13;
      {
        unsigned int v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v12);
      }
      int v8 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
      unsigned int v9 = (atomic_uint *)WebKit::GPUProcessConnection::videoFrameObjectHeapProxy(v8);
      uint64_t v10 = WTF::fastMalloc((WTF *)0x88);
      *a3 = WebKit::RemoteVideoFrameProxy::RemoteVideoFrameProxy(v10, v7, v9, (uint64_t)v14);
      uint64_t result = (double *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
    }
    else
    {
      *a3 = 0;
    }
    if (v20 != -1) {
      return (double *)((uint64_t (*)(_OWORD *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v20])(v14, v15);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::surfaceBufferToVideoFrame@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::surfaceBufferToVideoFrame((uint64_t *)(a1 - 24), a2, a3);
}

BOOL WebKit::RemoteGraphicsContextGLProxy::copyTextureFromMedia(WebKit::RemoteGraphicsContextGLProxy *this, WebCore::MediaPlayer *a2, int a3, int a4, int a5, int a6, int a7, int a8, BOOL a9, BOOL a10)
{
  WebCore::MediaPlayer::videoFrameForCurrentTime((uint64_t *)&v20, a2);
  if (!v20) {
    return 0;
  }
  BOOL v17 = WebKit::RemoteGraphicsContextGLProxy::copyTextureFromVideoFrame(this, v20, a3, a4, a5, a6, a7, a8, a9, a10);
  long long v18 = (unsigned int *)v20;
  int v20 = 0;
  if (v18 && atomic_fetch_add((atomic_uint *volatile)v18 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v18 + 2);
    (*(void (**)(unsigned int *))(*(void *)v18 + 8))(v18);
  }
  return v17;
}

BOOL WebKit::RemoteGraphicsContextGLProxy::copyTextureFromVideoFrame(WebKit::RemoteGraphicsContextGLProxy *this, WebCore::VideoFrame *a2, int a3, int a4, int a5, int a6, int a7, int a8, BOOL a9, BOOL a10)
{
  int v76 = a3;
  if (!*((void *)this + 13)) {
    return 0;
  }
  BOOL v17 = (void *)((char *)this + 144);
  long long v18 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v18 = &unk_1EE9E9F68;
  v18[1] = this;
  unint64_t v78 = (unint64_t)v18;
  long long v19 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  *long long v19 = (uint64_t)&unk_1EE9E9F90;
  v19[1] = (uint64_t)this;
  unint64_t v69 = v19;
  WebKit::SharedVideoFrameWriter::write(v17, (uint64_t)a2, (uint64_t *)&v78, &v69, (uint64_t)v72);
  (*(void (**)(uint64_t *))(*v19 + 8))(v19);
  int v20 = (WTF::ApproximateTime *)(*(uint64_t (**)(void *))(*v18 + 8))(v18);
  if (!v75) {
    return 0;
  }
  uint64_t v21 = (uint64_t *)*((void *)this + 13);
  if (!v21)
  {
    BOOL v49 = 0;
    goto LABEL_41;
  }
  uint64_t v22 = (IPC::Encoder *)*((void *)this + 10);
  double v23 = *((double *)v21 + 15);
  double v24 = INFINITY;
  if (fabs(v23) != INFINITY)
  {
    WTF::ApproximateTime::now(v20);
    double v24 = v23 + v25;
  }
  if ((IPC::Encoder *)v21[7] != v22)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v21 + 8), &v78, v24);
    if (v80)
    {
      unint64_t v56 = v78;
      unint64_t v57 = v79;
      unint64_t v58 = (v78 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v59 = v58 - v78;
      if (v58 < v78)
      {
        unint64_t v61 = 0;
        unint64_t v60 = v79;
      }
      else
      {
        unint64_t v60 = 0;
        if (v59 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v61 = 0;
        }
        else
        {
          unint64_t v61 = 0;
          if (v59 + 2 <= v79)
          {
            *(_WORD *)(v78 + v59) = 2871;
            unint64_t v60 = v57;
            unint64_t v61 = v59 + 2;
          }
        }
      }
      unint64_t v62 = (v56 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v62 >= v56 + v61)
      {
        unint64_t v63 = v62 - v56;
        char v64 = 17;
        if (v63 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_72;
        }
        unint64_t v61 = v63 + 8;
        if (v63 + 8 > v60) {
          goto LABEL_72;
        }
        *(void *)(v56 + v63) = v22;
      }
      if (v60)
      {
        uint64_t v65 = v21[9];
        unint64_t v66 = (v21[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v67 = v21[8];
        if (v66 + 16 >= v67) {
          unint64_t v66 = 0;
        }
        if (v61 <= 0x10) {
          unint64_t v61 = 16;
        }
        unint64_t v68 = v66 + v61;
        if (v67 <= v68) {
          unint64_t v68 = 0;
        }
        v21[10] = v68;
        IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v21, atomic_exchange((atomic_ullong *volatile)(*(void *)(v65 + 16) + 128), v68) == 0x80000000);
        v21[7] = (uint64_t)v22;
        goto LABEL_7;
      }
      char v64 = 17;
    }
    else
    {
      char v64 = 15;
    }
LABEL_72:
    LOBYTE(v69) = v64;
    goto LABEL_30;
  }
LABEL_7:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v21 + 8), &v78, v24);
  if (!v80)
  {
    LOBYTE(v69) = 15;
LABEL_30:
    int v71 = 1;
    goto LABEL_39;
  }
  unint64_t v26 = (v78 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = v26 - v78;
  if (v26 < v78)
  {
    unint64_t v28 = 0;
  }
  else
  {
    unint64_t v28 = 0;
    if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v27 + 2 <= v79)
    {
      *(_WORD *)(v78 + v27) = 2870;
      unint64_t v28 = v27 + 2;
    }
  }
  unint64_t v29 = (v21[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v30 = v21[8];
  if (v29 + 16 >= v30) {
    goto LABEL_69;
  }
  while (1)
  {
    if (v28 <= 0x10) {
      unint64_t v28 = 16;
    }
    unint64_t v31 = v29 + v28;
    if (v30 <= v31) {
      unint64_t v31 = 0;
    }
    v21[10] = v31;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v21[9] + 16) + 128), v31);
    *((_DWORD *)v21 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v77, (uint64_t **)v21 + 1);
    uint64_t v21 = v77;
    uint64_t v85 = 0;
    IPC::Connection::createSyncMessageEncoder(3639, (uint64_t)v22, &v85, &v84);
    uint64_t v32 = v84;
    IPC::ArgumentCoder<WebKit::SharedVideoFrame,void>::encode(v84, (uint64_t)v72);
    uint64_t v22 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v32, &v76);
    unint64_t v33 = (_DWORD *)IPC::Encoder::grow(v22, 4uLL, 4);
    if (v34 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x199040194);
    }
    _DWORD *v33 = a4;
    double v35 = (_DWORD *)IPC::Encoder::grow(v22, 4uLL, 4);
    if (v36 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1990401B4);
    }
    *double v35 = a5;
    unint64_t v37 = (_DWORD *)IPC::Encoder::grow(v22, 4uLL, 4);
    if (v38 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1990401D4);
    }
    *unint64_t v37 = a6;
    unint64_t v39 = (_DWORD *)IPC::Encoder::grow(v22, 4uLL, 4);
    if (v40 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1990401F4);
    }
    _DWORD *v39 = a7;
    unint64_t v41 = (_DWORD *)IPC::Encoder::grow(v22, 4uLL, 4);
    if (v42 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x199040214);
    }
    _DWORD *v41 = a8;
    unint64_t v43 = (unsigned char *)IPC::Encoder::grow(v22, 1uLL, 1);
    if (!v44)
    {
      __break(0xC471u);
      JUMPOUT(0x199040234);
    }
    *unint64_t v43 = a9;
    unint64_t v45 = (unsigned char *)IPC::Encoder::grow(v22, 1uLL, 1);
    if (!v46)
    {
      __break(0xC471u);
      JUMPOUT(0x199040254);
    }
    *unint64_t v45 = a10;
    IPC::Connection::sendSyncMessage((uint64_t)v21, v85, (uint64_t *)&v84, 0, (uint64_t)&v82, v24);
    if (v83)
    {
      if (v83 == 1)
      {
        LOBYTE(v69) = (_BYTE)v82;
        int v47 = 1;
        int v71 = 1;
        int v48 = 1;
        goto LABEL_35;
      }
      goto LABEL_68;
    }
    __int16 v81 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v82, &v81);
    if (!HIBYTE(v81)) {
      break;
    }
    int v48 = v83;
    if (!v83)
    {
      int v47 = 0;
      CFTypeRef v51 = v82;
      int v82 = 0;
      unint64_t v69 = v51;
      char v70 = v81;
      int v71 = 0;
      goto LABEL_35;
    }
LABEL_68:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_69:
    unint64_t v29 = 0;
  }
  LOBYTE(v69) = 13;
  int v47 = 1;
  int v71 = 1;
  int v48 = v83;
  if (v83 == -1) {
    goto LABEL_36;
  }
LABEL_35:
  ((void (*)(__int16 *, uint64_t **))off_1EE9E9D68[v48])(&v81, &v82);
LABEL_36:
  CFTypeRef v52 = v84;
  unsigned int v84 = 0;
  if (v52)
  {
    IPC::Encoder::~Encoder(v52, v50);
    WTF::fastFree(v54, v55);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v77);
  if (v47) {
LABEL_39:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  BOOL v49 = v70 != 0;
  off_1EE9E9938(&v78, &v69);
  if (v75)
  {
LABEL_41:
    if (v74 != -1) {
      ((void (*)(unint64_t *, uint64_t *))off_1EE9E98A8[v74])(&v78, &v73);
    }
  }
  return v49;
}

BOOL non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::copyTextureFromMedia(WebKit::RemoteGraphicsContextGLProxy *this, WebCore::MediaPlayer *a2, int a3, int a4, int a5, int a6, int a7, int a8, BOOL a9, BOOL a10)
{
  return WebKit::RemoteGraphicsContextGLProxy::copyTextureFromMedia((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

BOOL non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::copyTextureFromVideoFrame(WebKit::RemoteGraphicsContextGLProxy *this, WebCore::VideoFrame *a2, int a3, int a4, int a5, int a6, int a7, int a8, BOOL a9, BOOL a10)
{
  return WebKit::RemoteGraphicsContextGLProxy::copyTextureFromVideoFrame((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::videoFrameToImage@<X0>(uint64_t this@<X0>, WebCore::VideoFrame *a2@<X1>, void *a3@<X8>)
{
  if (!*(void *)(this + 104))
  {
    *a3 = 0;
    return this;
  }
  uint64_t v4 = this;
  uint64_t v17 = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v5 = &unk_1EE9E9FB8;
  v5[1] = &v17;
  int v5[2] = v4;
  v5[3] = a2;
  long long v16 = v5;
  WTF::callOnMainRunLoopAndWait();
  if (v16) {
    (*(void (**)(void *))(*v16 + 8))(v16);
  }
  this = WebCore::BitmapImage::create();
  uint64_t v7 = v17;
  uint64_t v17 = 0;
  if (v7)
  {
    char v8 = 0;
    uint64_t v9 = *(void *)(v7 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
    if (v8) {
      this = MEMORY[0x19972E8D0](v9);
    }
    uint64_t v10 = *(void *)(v9 + 8);
    int v11 = 1;
    uint64_t v12 = v10 - 1;
    *(void *)(v9 + 8) = v10 - 1;
    if (v10 == 1)
    {
      uint64_t v15 = *(void *)(v9 + 16);
      uint64_t v13 = *(void *)(v9 + 24);
      *(void *)(v9 + 24) = 0;
      BOOL v14 = v15 != 0;
    }
    else
    {
      uint64_t v13 = 0;
      BOOL v14 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
    if (v11 == 1)
    {
      if (v12) {
        return this;
      }
    }
    else
    {
      this = WTF::Lock::unlockSlow((WTF::Lock *)v9);
      if (v12) {
        return this;
      }
    }
    if (v13) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    if (!v14) {
      return WTF::fastFree((WTF *)v9, v6);
    }
  }
  return this;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::videoFrameToImage@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, WebCore::VideoFrame *a2@<X1>, void *a3@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::videoFrameToImage((uint64_t)this - 24, a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getErrors(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 13);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 10);
  double v4 = *((double *)v1 + 15);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  uint64_t v7 = (uint64_t)(v1 + 7);
  if (v1[7] != v3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v1 + 8), &v53, v5);
    if (!(_BYTE)v55)
    {
      char v52 = 15;
      goto LABEL_113;
    }
    unint64_t v41 = v53;
    unint64_t v40 = v54;
    unint64_t v42 = (unint64_t)(v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v43 = v42 - (void)v53;
    if (v42 >= (unint64_t)v53)
    {
      unint64_t v44 = v43 + 2;
      if (v43 <= 0xFFFFFFFFFFFFFFFDLL && v44 <= v54)
      {
        *(_WORD *)&v53[v43] = 2871;
        goto LABEL_92;
      }
      unint64_t v40 = 0;
    }
    unint64_t v44 = 0;
LABEL_92:
    uint64_t v46 = (char *)((unint64_t)&v41[v44 + 7] & 0xFFFFFFFFFFFFFFF8);
    if (v46 >= &v41[v44])
    {
      unint64_t v44 = v46 - v41 + 8;
      if ((unint64_t)(v46 - v41) > 0xFFFFFFFFFFFFFFF7 || v44 > v40)
      {
LABEL_112:
        char v52 = 17;
LABEL_113:
        LOBYTE(v64) = v52;
        int v66 = 1;
        goto LABEL_78;
      }
      *(void *)uint64_t v46 = v3;
    }
    if (v40)
    {
      uint64_t v48 = v1[9];
      unint64_t v49 = (v1[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v50 = v1[8];
      if (v49 + 16 >= v50) {
        unint64_t v49 = 0;
      }
      if (v44 <= 0x10) {
        unint64_t v44 = 16;
      }
      unint64_t v51 = v49 + v44;
      if (v50 <= v51) {
        unint64_t v51 = 0;
      }
      v1[10] = v51;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v1, atomic_exchange((atomic_ullong *volatile)(*(void *)(v48 + 16) + 128), v51) == 0x80000000);
      v1[7] = v3;
      goto LABEL_5;
    }
    goto LABEL_112;
  }
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v1 + 8), &v57, v5);
  if (!v59)
  {
    LOBYTE(v64) = 15;
    int v66 = 1;
    goto LABEL_77;
  }
  unint64_t v8 = v57;
  unint64_t v9 = v58;
  uint64_t v10 = (uint64_t **)(v1 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v63, (uint64_t **)v1 + 1);
  uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v63, v11))
  {
    LOBYTE(v64) = 11;
    uint64_t v7 = 1;
    int v66 = 1;
    LOBYTE(v53) = 0;
    int v55 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetErrors>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetErrors>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v53, (uint64_t)&v64);
    char v56 = 1;
    if (v66 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9948[v66])(&v60, &v64);
    }
    goto LABEL_50;
  }
  unint64_t v12 = (v8 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v13 = v12 - v8;
  if (v12 < v8)
  {
    unint64_t v15 = 0;
    unint64_t v14 = v9;
  }
  else
  {
    unint64_t v14 = 0;
    if (v13 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_107;
    }
    unint64_t v15 = 0;
    if (v13 + 2 <= v9)
    {
      *(_WORD *)(v8 + v13) = 3652;
      unint64_t v14 = v9;
      unint64_t v15 = v13 + 2;
    }
  }
  while (1)
  {
    long long v16 = (void *)((v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v16 >= v8 + v15)
    {
      uint64_t v17 = (char *)v16 - v8;
      if ((unint64_t)v16 - v8 > 0xFFFFFFFFFFFFFFF7
        || (unint64_t v15 = (unint64_t)(v17 + 8), (unint64_t)(v17 + 8) > v14))
      {
LABEL_35:
        LOBYTE(v60) = 0;
        char v62 = 0;
        goto LABEL_39;
      }
      *long long v16 = v11;
    }
    if (!v14) {
      goto LABEL_35;
    }
    unint64_t v18 = (v1[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = v1[8];
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v15 <= 0x10) {
      unint64_t v15 = 16;
    }
    unint64_t v20 = v18 + v15;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    v1[10] = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v1[9] + 16) + 128), v20) == 0x80000000
      || *((_DWORD *)v1 + 29))
    {
      if (*((unsigned char *)v1 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v1 + 23));
      }
      *((_DWORD *)v1 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v64, (uint64_t)(v1 + 8), v5);
    if (!(_BYTE)v66)
    {
      LOBYTE(v60) = 16;
      int v61 = 1;
LABEL_38:
      char v62 = 1;
      goto LABEL_39;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v67, (uint64_t)&v64, (uint64_t *)v7);
    if (*((_WORD *)v67 + 25) != 2870)
    {
      unint64_t v60 = v67;
      int v61 = 0;
      goto LABEL_38;
    }
    IPC::Decoder::~Decoder(v67);
    WTF::fastFree(v21, v22);
    IPC::Connection::waitForSyncReply((uint64_t)v63, v11, 0xE44u, (uint64_t)&v64, v5);
    LOBYTE(v60) = 0;
    int v61 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v60, (uint64_t)&v64);
    char v62 = 1;
    if (v65 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9D68[v65])(&v67, &v64);
    }
LABEL_39:
    IPC::Connection::popPendingSyncRequestID(v63);
    if (!v62)
    {
      LOBYTE(v53) = 0;
      char v56 = 0;
      goto LABEL_47;
    }
    if (v61 == 1)
    {
      char v25 = (char)v60;
      goto LABEL_46;
    }
    if (v61) {
      goto LABEL_108;
    }
    unsigned __int16 v24 = IPC::Decoder::decode<std::tuple<WTF::OptionSet<GCGLErrorCode>>>(v60);
    if (v24 < 0x100u)
    {
      char v25 = 13;
LABEL_46:
      LOBYTE(v53) = v25;
      int v55 = 1;
      char v56 = 1;
      goto LABEL_47;
    }
    if (v62) {
      break;
    }
LABEL_106:
    __break(1u);
LABEL_107:
    unint64_t v15 = v14;
  }
  if (v61) {
    goto LABEL_108;
  }
  unint64_t v37 = v60;
  unint64_t v60 = 0;
  char v64 = v37;
  LOBYTE(v65) = v24;
  int v66 = 0;
  LOBYTE(v53) = 0;
  int v55 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetErrors>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetErrors>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v53, (uint64_t)&v64);
  char v56 = 1;
  if (v66 != -1) {
    ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9948[v66])(&v67, &v64);
  }
LABEL_47:
  if (v62 && v61 != -1) {
    ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9D68[v61])(&v64, &v60);
  }
LABEL_50:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
  if (v56)
  {
    LOBYTE(v64) = 0;
    int v66 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetErrors>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetErrors>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v64, (uint64_t)&v53);
    if (v56 && v55 != -1) {
      ((void (*)(IPC::Decoder **, char **))off_1EE9E9948[v55])(&v60, &v53);
    }
    goto LABEL_77;
  }
  if (!v59) {
    goto LABEL_106;
  }
  unint64_t v26 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = v26 - v57;
  if (v26 < v57)
  {
    unint64_t v28 = 0;
  }
  else
  {
    unint64_t v28 = 0;
    if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v27 + 2 <= v58)
    {
      *(_WORD *)(v57 + v27) = 2870;
      unint64_t v28 = v27 + 2;
    }
  }
  unint64_t v29 = (v1[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v30 = v1[8];
  if (v29 + 16 >= v30) {
    goto LABEL_109;
  }
  while (1)
  {
    if (v28 <= 0x10) {
      unint64_t v28 = 16;
    }
    unint64_t v31 = v29 + v28;
    if (v30 <= v31) {
      unint64_t v31 = 0;
    }
    v1[10] = v31;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v1[9] + 16) + 128), v31);
    *((_DWORD *)v1 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v63, v10);
    uint64_t v1 = (uint64_t *)v63;
    unint64_t v60 = 0;
    IPC::Connection::createSyncMessageEncoder(3652, v3, (uint64_t *)&v60, &v67);
    IPC::Connection::sendSyncMessage((uint64_t)v1, (uint64_t)v60, (uint64_t *)&v67, 0, (uint64_t)&v53, v5);
    uint64_t v3 = v54;
    if (v54)
    {
      if (v54 == 1)
      {
        LOBYTE(v64) = (_BYTE)v53;
LABEL_72:
        int v66 = v3;
        goto LABEL_73;
      }
      goto LABEL_108;
    }
    unsigned __int16 v32 = IPC::Decoder::decode<std::tuple<WTF::OptionSet<GCGLErrorCode>>>(v53);
    if (v32 < 0x100u) {
      break;
    }
    if (!v54)
    {
      unint64_t v34 = (IPC::Decoder *)v53;
      unint64_t v53 = 0;
      char v64 = v34;
      LOBYTE(v65) = v32;
      goto LABEL_72;
    }
LABEL_108:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
    unint64_t v29 = 0;
  }
  LOBYTE(v64) = 13;
  int v66 = 1;
  LODWORD(v3) = v54;
  if (v54 == -1) {
    goto LABEL_74;
  }
LABEL_73:
  ((void (*)(char *, char **))off_1EE9E9D68[v3])(&v68, &v53);
LABEL_74:
  double v35 = v67;
  unint64_t v67 = 0;
  if (v35)
  {
    IPC::Encoder::~Encoder(v35, v33);
    WTF::fastFree(v38, v39);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
LABEL_77:
  if (v66) {
LABEL_78:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  uint64_t v23 = v65;
  ((void (*)(char **, IPC::Decoder **))off_1EE9E9948[0])(&v53, &v64);
  return v23;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getErrors(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::getErrors((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::simulateEventForTesting(uint64_t *a1, char a2)
{
  uint64_t result = a1[13];
  if (result)
  {
    char v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SimulateEventForTesting,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::simulateEventForTesting(uint64_t a1, char a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::simulateEventForTesting((uint64_t *)(a1 - 24), a2);
}

uint64_t *WebKit::RemoteGraphicsContextGLProxy::getBufferSubData(uint64_t *result, int a2, uint64_t a3, char *a4, unint64_t a5)
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  if (result[13]) {
    BOOL v5 = a5 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return result;
  }
  unint64_t v6 = a5;
  uint64_t v7 = result;
  if (a5 <= 0x10000) {
    goto LABEL_85;
  }
  unint64_t v8 = (WebCore::SharedMemory *)(a5 >= 0x6400000 ? 104857600 : a5);
  uint64_t result = (uint64_t *)WebCore::SharedMemory::allocate(v8);
  if (!v125) {
    goto LABEL_85;
  }
  while (1)
  {
    if (!v6)
    {
LABEL_80:
      char v48 = 1;
      goto LABEL_82;
    }
    Handle = (WTF::ApproximateTime *)WebCore::SharedMemory::createHandle();
    if (!v133[16]) {
      break;
    }
    if (v6 >= 0x6400000) {
      unint64_t v10 = 104857600;
    }
    else {
      unint64_t v10 = v6;
    }
    uint64_t v11 = v7[13];
    uint64_t v12 = v7[10];
    double v13 = *(double *)(v11 + 120);
    double v14 = INFINITY;
    if (fabs(v13) != INFINITY)
    {
      WTF::ApproximateTime::now(Handle);
      double v14 = v13 + v15;
    }
    if (*(void *)(v11 + 56) != v12)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v126, v14);
      if (!v127)
      {
        char v43 = 15;
        goto LABEL_76;
      }
      long long v36 = v126;
      unint64_t v37 = (v126 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v38 = v37 - v126;
      if (v37 < (unint64_t)v126)
      {
        unint64_t v40 = 0;
        unint64_t v39 = *((void *)&v126 + 1);
      }
      else
      {
        unint64_t v39 = 0;
        if (v38 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v40 = 0;
        }
        else
        {
          unint64_t v40 = 0;
          if (v38 + 2 <= *((void *)&v126 + 1))
          {
            *(_WORD *)(v126 + v38) = 2871;
            unint64_t v39 = *((void *)&v36 + 1);
            unint64_t v40 = v38 + 2;
          }
        }
      }
      unint64_t v41 = (v36 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v41 >= (unint64_t)v36 + v40)
      {
        unint64_t v42 = v41 - v36;
        char v43 = 17;
        if (v42 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_76;
        }
        unint64_t v40 = v42 + 8;
        if (v42 + 8 > v39) {
          goto LABEL_76;
        }
        *(void *)(v36 + v42) = v12;
      }
      if (!v39)
      {
        char v43 = 17;
LABEL_76:
        LOBYTE(v121) = v43;
LABEL_37:
        DWORD2(__src) = 1;
LABEL_46:
        WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)v7);
      }
      uint64_t v44 = *(void *)(v11 + 72);
      unint64_t v45 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v46 = *(void *)(v11 + 64);
      if (v45 + 16 >= v46) {
        unint64_t v45 = 0;
      }
      if (v40 <= 0x10) {
        unint64_t v40 = 16;
      }
      unint64_t v47 = v45 + v40;
      if (v46 <= v47) {
        unint64_t v47 = 0;
      }
      *(void *)(v11 + 80) = v47;
      IPC::StreamClientConnection::wakeUpServerBatched(v11, atomic_exchange((atomic_ullong *volatile)(*(void *)(v44 + 16) + 128), v47) == 0x80000000);
      *(void *)(v11 + 56) = v12;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v126, v14);
    if (!v127)
    {
      LOBYTE(v121) = 15;
      goto LABEL_37;
    }
    unint64_t v16 = (v126 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = v16 - v126;
    if (v16 < (unint64_t)v126)
    {
      unint64_t v18 = 0;
    }
    else
    {
      unint64_t v18 = 0;
      if (v17 <= 0xFFFFFFFFFFFFFFFDLL && v17 + 2 <= *((void *)&v126 + 1))
      {
        *(_WORD *)(v126 + v17) = 2870;
        unint64_t v18 = v17 + 2;
      }
    }
    unint64_t v19 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v20 = *(void *)(v11 + 64);
    if (v19 + 16 >= v20) {
      unint64_t v19 = 0;
    }
    if (v18 <= 0x10) {
      unint64_t v18 = 16;
    }
    unint64_t v21 = v19 + v18;
    if (v20 <= v21) {
      unint64_t v21 = 0;
    }
    *(void *)(v11 + 80) = v21;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v21);
    *(_DWORD *)(v11 + 116) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v135, (uint64_t **)(v11 + 8));
    uint64_t v22 = (uint64_t *)v135;
    unint64_t v130 = 0;
    IPC::Connection::createSyncMessageEncoder(3651, v12, (uint64_t *)&v130, (IPC::Encoder **)v136);
    uint64_t v23 = *(IPC::Encoder **)v136;
    unsigned __int16 v24 = (_DWORD *)IPC::Encoder::grow(*(IPC::Encoder **)v136, 4uLL, 4);
    if (v25 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x199041AF4);
    }
    *unsigned __int16 v24 = a2;
    unint64_t v26 = (void *)IPC::Encoder::grow(v23, 8uLL, 8);
    if (v27 <= 7)
    {
      __break(0xC471u);
      JUMPOUT(0x199041B14);
    }
    *unint64_t v26 = a3;
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v23, v10);
    IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(v23, (unint64_t)v133);
    IPC::Connection::sendSyncMessage((uint64_t)v22, v130, (uint64_t *)v136, 0, (uint64_t)v137, v14);
    if (*(_DWORD *)&v137[8])
    {
      if (*(_DWORD *)&v137[8] != 1) {
        goto LABEL_229;
      }
      LOBYTE(v121) = v137[0];
      DWORD2(__src) = 1;
      uint64_t v28 = 1;
    }
    else
    {
      __int16 v124 = 0;
      IPC::Decoder::operator>><std::tuple<BOOL>>(*(uint64_t **)v137, &v124);
      if (HIBYTE(v124))
      {
        if (*(_DWORD *)&v137[8]) {
LABEL_229:
        }
          std::__throw_bad_variant_access[abi:sn180100]();
        uint64_t v28 = 0;
        uint64_t v30 = *(void *)v137;
        *(void *)v137 = 0;
        uint64_t v121 = v30;
        LOBYTE(__src) = v124;
        DWORD2(__src) = 0;
      }
      else
      {
        LOBYTE(v121) = 13;
        DWORD2(__src) = 1;
        uint64_t v28 = *(unsigned int *)&v137[8];
        if (*(_DWORD *)&v137[8] == -1) {
          goto LABEL_43;
        }
      }
    }
    ((void (*)(__int16 *, unsigned char *))off_1EE9E9D68[v28])(&v124, v137);
LABEL_43:
    unint64_t v31 = *(IPC::Encoder **)v136;
    *(void *)v136 = 0;
    if (v31)
    {
      IPC::Encoder::~Encoder(v31, v29);
      WTF::fastFree(v34, v35);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v135);
    if (DWORD2(__src)) {
      goto LABEL_46;
    }
    if ((_BYTE)__src)
    {
      if (v125[1] < v10)
      {
LABEL_223:
        __break(1u);
LABEL_224:
        __break(0xC471u);
        JUMPOUT(0x199041AB4);
      }
      memmove(a4, (const void *)v125[2], v10);
      v6 -= v10;
      a4 += v10;
      a3 += v10;
      char v33 = 1;
      uint64_t v32 = DWORD2(__src);
      if (DWORD2(__src) == -1) {
        goto LABEL_49;
      }
    }
    else
    {
      char v33 = 0;
      uint64_t v32 = 0;
    }
    ((void (*)(long long *, uint64_t *))off_1EE9E9958[v32])(&v126, &v121);
LABEL_49:
    if (v133[16]) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v133);
    }
    if ((v33 & 1) == 0) {
      goto LABEL_80;
    }
  }
  char v48 = 0;
LABEL_82:
  uint64_t result = v125;
  v125 = 0;
  if (result) {
    uint64_t result = (uint64_t *)WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)result);
  }
  if ((v48 & 1) == 0)
  {
LABEL_85:
    while (2)
    {
      if (!v6) {
        return result;
      }
      if (v6 >= 0x10000) {
        size_t v49 = 0x10000;
      }
      else {
        size_t v49 = v6;
      }
      uint64_t v50 = v7[13];
      uint64_t v51 = v7[10];
      double v52 = *(double *)(v50 + 120);
      double v53 = INFINITY;
      if (fabs(v52) != INFINITY)
      {
        WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
        double v53 = v52 + v54;
      }
      if (*(void *)(v50 + 56) == v51) {
        goto LABEL_92;
      }
      IPC::StreamClientConnectionBuffer::tryAcquire(v50 + 64, &v126, v53);
      if (!v127)
      {
        char v114 = 15;
LABEL_216:
        LOBYTE(v121) = v114;
LABEL_134:
        int v123 = 1;
LABEL_183:
        WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)v7);
      }
      unint64_t v102 = *((void *)&v126 + 1);
      uint64_t v103 = v126;
      unint64_t v104 = (v126 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v105 = v104 - v126;
      if (v104 >= (unint64_t)v126)
      {
        unint64_t v106 = v105 + 2;
        if (v105 <= 0xFFFFFFFFFFFFFFFDLL && v106 <= *((void *)&v126 + 1))
        {
          *(_WORD *)(v126 + v105) = 2871;
LABEL_199:
          v108 = (void *)((v103 + v106 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((unint64_t)v108 >= v103 + v106)
          {
            unint64_t v106 = (unint64_t)v108 - v103 + 8;
            if ((unint64_t)v108 - v103 > 0xFFFFFFFFFFFFFFF7 || v106 > v102)
            {
LABEL_215:
              char v114 = 17;
              goto LABEL_216;
            }
            void *v108 = v51;
          }
          if (!v102) {
            goto LABEL_215;
          }
          uint64_t v110 = *(void *)(v50 + 72);
          unint64_t v111 = (*(void *)(v50 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v112 = *(void *)(v50 + 64);
          if (v111 + 16 >= v112) {
            unint64_t v111 = 0;
          }
          if (v106 <= 0x10) {
            unint64_t v106 = 16;
          }
          unint64_t v113 = v111 + v106;
          if (v112 <= v113) {
            unint64_t v113 = 0;
          }
          *(void *)(v50 + 80) = v113;
          IPC::StreamClientConnection::wakeUpServerBatched(v50, atomic_exchange((atomic_ullong *volatile)(*(void *)(v110 + 16) + 128), v113) == 0x80000000);
          *(void *)(v50 + 56) = v51;
LABEL_92:
          IPC::StreamClientConnectionBuffer::tryAcquire(v50 + 64, &v130, v53);
          if (!v132)
          {
            LOBYTE(v121) = 15;
            goto LABEL_134;
          }
          unint64_t v55 = v130;
          unint64_t v56 = v131;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v135, (uint64_t **)(v50 + 8));
          uint64_t v57 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
          if (IPC::Connection::pushPendingSyncRequestID((uint64_t)v135, v57))
          {
            unint64_t v58 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v59 = v58 - v55;
            if (v58 < v55)
            {
              unint64_t v61 = 0;
              unint64_t v60 = v56;
            }
            else
            {
              unint64_t v60 = 0;
              if (v59 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v61 = 0;
              }
              else
              {
                unint64_t v61 = 0;
                if (v59 + 2 <= v56)
                {
                  *(_WORD *)(v55 + v59) = 3650;
                  unint64_t v60 = v56;
                  unint64_t v61 = v59 + 2;
                }
              }
            }
            unint64_t v62 = (v55 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
            BOOL v63 = v62 >= v55 + v61;
            unint64_t v64 = v62 - (v55 + v61);
            if (v63)
            {
              unint64_t v115 = 0;
              unint64_t v65 = v64 + v61;
              if (v65 <= 0xFFFFFFFFFFFFFFF7 && v65 + 8 <= v60)
              {
                *(void *)(v55 + v65) = v57;
                unint64_t v115 = v60;
                unint64_t v61 = v65 + 8;
              }
            }
            else
            {
              unint64_t v115 = v60;
            }
            unint64_t v66 = (v55 + v61 + 3) & 0xFFFFFFFFFFFFFFFCLL;
            BOOL v63 = v66 >= v55 + v61;
            unint64_t v67 = v66 - (v55 + v61);
            if (v63)
            {
              unint64_t v117 = 0;
              unint64_t v68 = v67 + v61;
              if (v68 <= 0xFFFFFFFFFFFFFFFBLL && v68 + 4 <= v115)
              {
                *(_DWORD *)(v55 + v68) = a2;
                unint64_t v117 = v115;
                unint64_t v61 = v68 + 4;
              }
            }
            else
            {
              unint64_t v117 = v115;
            }
            unint64_t v69 = (v55 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
            BOOL v63 = v69 >= v55 + v61;
            unint64_t v70 = v69 - (v55 + v61);
            if (v63)
            {
              unint64_t v116 = 0;
              unint64_t v71 = v70 + v61;
              if (v71 <= 0xFFFFFFFFFFFFFFF7 && v71 + 8 <= v117)
              {
                *(void *)(v55 + v71) = a3;
                unint64_t v116 = v117;
                unint64_t v61 = v71 + 8;
              }
            }
            else
            {
              unint64_t v116 = v117;
            }
            unsigned int v72 = (void *)((v55 + v61 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v72 < v55 + v61)
            {
LABEL_117:
              if (!v116) {
                goto LABEL_137;
              }
              unint64_t v74 = (*(void *)(v50 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v75 = *(void *)(v50 + 64);
              if (v74 + 16 >= v75) {
                unint64_t v74 = 0;
              }
              if (v61 <= 0x10) {
                unint64_t v61 = 16;
              }
              unint64_t v76 = v74 + v61;
              if (v75 <= v76) {
                unint64_t v76 = 0;
              }
              *(void *)(v50 + 80) = v76;
              if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v50 + 72) + 16) + 128), v76) == 0x80000000
                || *(_DWORD *)(v50 + 116))
              {
                if (*(unsigned char *)(v50 + 104)) {
                  MEMORY[0x1997420B0](*(unsigned int *)(v50 + 92));
                }
                *(_DWORD *)(v50 + 116) = 0;
              }
              IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)v133, v50 + 64, v53);
              if (v133[16])
              {
                WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)v136, (uint64_t)v133, (uint64_t *)(v50 + 56));
                if (*(_WORD *)(*(void *)v136 + 50) == 2870)
                {
                  IPC::Decoder::~Decoder(*(IPC::Decoder **)v136);
                  WTF::fastFree(v77, v78);
                  IPC::Connection::waitForSyncReply((uint64_t)v135, v57, 0xE42u, (uint64_t)v133, v53);
                  v137[0] = 0;
                  *(_DWORD *)&v137[8] = -1;
                  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v137, (uint64_t)v133);
                  char v138 = 1;
                  if (*(_DWORD *)&v133[8] != -1) {
                    ((void (*)(unsigned char *, unsigned char *))off_1EE9E9D68[*(unsigned int *)&v133[8]])(v136, v133);
                  }
                  goto LABEL_141;
                }
                *(void *)v137 = *(void *)v136;
                *(_DWORD *)&v137[8] = 0;
              }
              else
              {
                v137[0] = 16;
                *(_DWORD *)&v137[8] = 1;
              }
              char v138 = 1;
              goto LABEL_141;
            }
            uint64_t v73 = (char *)v72 - v55;
            if ((unint64_t)v72 - v55 <= 0xFFFFFFFFFFFFFFF7)
            {
              unint64_t v61 = (unint64_t)(v73 + 8);
              if ((unint64_t)(v73 + 8) <= v116)
              {
                void *v72 = v49;
                goto LABEL_117;
              }
            }
LABEL_137:
            v137[0] = 0;
            char v138 = 0;
LABEL_141:
            IPC::Connection::popPendingSyncRequestID(v135);
            if (v138)
            {
              if (*(_DWORD *)&v137[8] == 1)
              {
                LOBYTE(v126) = v137[0];
                int v128 = 1;
                char v129 = 1;
                uint64_t v81 = 1;
                goto LABEL_153;
              }
              if (*(_DWORD *)&v137[8]) {
                goto LABEL_229;
              }
              IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>(*(uint64_t **)v137, (uint64_t)v133);
              if (v133[16])
              {
                char v79 = v133[0];
                *(void *)v136 = *(void *)&v133[1];
                *(void *)&v136[7] = *(void *)&v133[8];
                if (!v138) {
                  goto LABEL_223;
                }
                if (*(_DWORD *)&v137[8]) {
                  goto LABEL_229;
                }
                uint64_t v80 = *(void *)v137;
                *(void *)v137 = 0;
                *(void *)&v133[9] = *(void *)v136;
                *(void *)&v133[16] = *(void *)&v136[7];
                *(void *)v133 = v80;
                v133[8] = v79;
                int v134 = 0;
                LOBYTE(v126) = 0;
                int v128 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferSubDataInline>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferSubDataInline>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v126, (uint64_t)v133);
                char v129 = 1;
                if (v134 != -1) {
                  ((void (*)(uint64_t **, unsigned char *))off_1EE9E9968[v134])(&v125, v133);
                }
              }
              else
              {
                LOBYTE(v126) = 13;
                int v128 = 1;
                char v129 = 1;
              }
              if (v138)
              {
                uint64_t v81 = *(unsigned int *)&v137[8];
                if (*(unsigned int *)&v137[8] != 0xFFFFFFFFLL) {
LABEL_153:
                }
                  ((void (*)(unsigned char *, unsigned char *))off_1EE9E9D68[v81])(v133, v137);
              }
            }
            else
            {
              LOBYTE(v126) = 0;
              char v129 = 0;
            }
          }
          else
          {
            v133[0] = 11;
            int v134 = 1;
            LOBYTE(v126) = 0;
            int v128 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferSubDataInline>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferSubDataInline>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v126, (uint64_t)v133);
            char v129 = 1;
            if (v134 != -1) {
              ((void (*)(unsigned char *, unsigned char *))off_1EE9E9968[v134])(v137, v133);
            }
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v135);
          if (v129)
          {
            LOBYTE(v121) = 0;
            int v123 = -1;
            uint64_t result = (uint64_t *)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferSubDataInline>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferSubDataInline>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v121, (uint64_t)&v126);
            if (v129 && v128 != -1) {
              uint64_t result = (uint64_t *)((uint64_t (*)(unsigned char *, long long *))off_1EE9E9968[v128])(v133, &v126);
            }
            goto LABEL_182;
          }
          if (!v132) {
            goto LABEL_223;
          }
          unint64_t v82 = (v130 + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v83 = v82 - v130;
          if (v82 < v130)
          {
            unint64_t v84 = 0;
          }
          else
          {
            unint64_t v84 = 0;
            if (v83 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              uint64_t v85 = (uint64_t **)(v50 + 8);
              if (v83 + 2 <= v131)
              {
                *(_WORD *)(v130 + v83) = 2870;
                unint64_t v84 = v83 + 2;
              }
LABEL_163:
              unint64_t v86 = (*(void *)(v50 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v87 = *(void *)(v50 + 64);
              if (v86 + 16 >= v87) {
                unint64_t v86 = 0;
              }
              if (v84 <= 0x10) {
                unint64_t v84 = 16;
              }
              unint64_t v88 = v86 + v84;
              if (v87 <= v88) {
                unint64_t v88 = 0;
              }
              *(void *)(v50 + 80) = v88;
              atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v50 + 72) + 16) + 128), v88);
              *(_DWORD *)(v50 + 116) = 0;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v125, v85);
              unint64_t v89 = v125;
              *(void *)v136 = 0;
              IPC::Connection::createSyncMessageEncoder(3650, v51, (uint64_t *)v136, (IPC::Encoder **)&v135);
              uint64_t v90 = (IPC::Encoder *)v135;
              uint64_t v91 = (_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v135, 4uLL, 4);
              if (v92 <= 3) {
                goto LABEL_224;
              }
              *uint64_t v91 = a2;
              uint64_t v93 = (void *)IPC::Encoder::grow(v90, 8uLL, 8);
              if (v94 <= 7)
              {
                __break(0xC471u);
                JUMPOUT(0x199041AD4);
              }
              *uint64_t v93 = a3;
              IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v90, v49);
              IPC::Connection::sendSyncMessage((uint64_t)v89, *(uint64_t *)v136, (uint64_t *)&v135, 0, (uint64_t)v133, v53);
              if (*(_DWORD *)&v133[8])
              {
                if (*(_DWORD *)&v133[8] != 1) {
                  goto LABEL_229;
                }
                LOBYTE(v121) = v133[0];
                int v123 = 1;
                uint64_t v95 = 1;
                goto LABEL_178;
              }
              IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>(*(uint64_t **)v133, (uint64_t)&v126);
              if (v127)
              {
                *(void *)v137 = *(void *)((char *)&v126 + 1);
                *(void *)&v137[7] = *((void *)&v126 + 1);
                if (*(_DWORD *)&v133[8]) {
                  goto LABEL_229;
                }
                uint64_t v95 = 0;
                uint64_t v97 = *(void *)v133;
                *(void *)v133 = 0;
                *(void *)((char *)&__src + 1) = *(void *)v137;
                *((void *)&__src + 1) = *(void *)&v137[7];
                uint64_t v121 = v97;
                LOBYTE(__src) = v126;
                int v123 = 0;
LABEL_178:
                ((void (*)(long long *, unsigned char *))off_1EE9E9D68[v95])(&v126, v133);
              }
              else
              {
                LOBYTE(v121) = 13;
                int v123 = 1;
                uint64_t v95 = *(unsigned int *)&v133[8];
                if (*(_DWORD *)&v133[8] != -1) {
                  goto LABEL_178;
                }
              }
              uint64_t v98 = (IPC::Encoder *)v135;
              v135 = 0;
              if (v98)
              {
                IPC::Encoder::~Encoder(v98, v96);
                WTF::fastFree(v100, v101);
              }
              uint64_t result = (uint64_t *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v125);
LABEL_182:
              if (v123) {
                goto LABEL_183;
              }
              if (*((void *)&__src + 1))
              {
                if (v49 != *((void *)&__src + 1))
                {
                  __break(0xC471u);
                  JUMPOUT(0x199041B34);
                }
                uint64_t result = (uint64_t *)memmove(a4, (const void *)__src, v49);
                v6 -= v49;
                a4 += v49;
                a3 += v49;
                char v99 = 1;
              }
              else
              {
                char v99 = 0;
              }
              if (v123 != -1) {
                uint64_t result = (uint64_t *)((uint64_t (*)(long long *, uint64_t *))off_1EE9E9968[v123])(&v126, &v121);
              }
              if ((v99 & 1) == 0) {
                return result;
              }
              continue;
            }
          }
          uint64_t v85 = (uint64_t **)(v50 + 8);
          goto LABEL_163;
        }
        unint64_t v102 = 0;
      }
      break;
    }
    unint64_t v106 = 0;
    goto LABEL_199;
  }
  return result;
}

uint64_t *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getBufferSubData(uint64_t a1, int a2, uint64_t a3, char *a4, unint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::getBufferSubData((uint64_t *)(a1 - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::readPixels(uint64_t result, uint64_t a2, unint64_t a3, WebCore::GraphicsContextGL *this, int a5, uint64_t a6, unint64_t a7, int a8, int a9, char a10)
{
  uint64_t v148 = a2;
  unint64_t v149 = a3;
  if (!*(void *)(result + 104)) {
    return result;
  }
  int v13 = (int)this;
  int v14 = a3;
  unint64_t v16 = (WebKit::RemoteGraphicsContextGLProxy *)result;
  unint64_t v17 = HIDWORD(a3);
  int v18 = WebCore::GraphicsContextGL::computeBytesPerGroup(this);
  if (a9 <= 0) {
    int v19 = v14;
  }
  else {
    int v19 = a9;
  }
  int v20 = a8 + v18 * v19;
  if ((a2 & 0x80000000) != 0)
  {
    int v21 = -(int)a2;
    int v14 = (v14 + a2) & ~((v14 + (int)a2) >> 31);
    LODWORD(v148) = 0;
    LODWORD(v149) = v14;
  }
  else
  {
    int v21 = 0;
  }
  int v22 = v20 - 1;
  if (a2 < 0)
  {
    int v23 = -HIDWORD(a2);
    LODWORD(v17) = (v17 + HIDWORD(a2)) & ~(((int)v17 + HIDWORD(a2)) >> 31);
    HIDWORD(v148) = 0;
    HIDWORD(v149) = v17;
  }
  else
  {
    int v23 = 0;
  }
  unsigned __int16 v24 = (const unsigned __int8 *)(v22 & -a8);
  if (v14 >= 1 && (int)v17 >= 1 && v21 | v23)
  {
    unint64_t v25 = (v21 * v18 + v23 * v24);
    BOOL v26 = a7 >= v25;
    a7 -= v25;
    if (!v26) {
      goto LABEL_205;
    }
    a6 += v25;
  }
  char v27 = a10;
  int v145 = v18;
  unsigned int v143 = v14 * v18;
  uint64_t result = (v17 * v14 * v18);
  if (result > 0x10000)
  {
    WebCore::SharedMemory::allocate((WebCore::SharedMemory *)result);
    uint64_t result = v147;
    if (v147)
    {
      Handle = (WTF::ApproximateTime *)WebCore::SharedMemory::createHandle();
      int v29 = v160;
      if (!(_BYTE)v160)
      {
LABEL_55:
        uint64_t result = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v147);
        if (v29) {
          return result;
        }
        goto LABEL_56;
      }
      uint64_t v30 = a10 != 0;
      uint64_t v31 = *((void *)v16 + 13);
      uint64_t v32 = *((void *)v16 + 10);
      double v33 = *(double *)(v31 + 120);
      double v34 = INFINITY;
      if (fabs(v33) != INFINITY)
      {
        WTF::ApproximateTime::now(Handle);
        double v34 = v33 + v35;
      }
      if (*(void *)(v31 + 56) == v32) {
        goto LABEL_23;
      }
      IPC::StreamClientConnectionBuffer::tryAcquire(v31 + 64, v151, v34);
      if ((_BYTE)v152)
      {
        v125 = v151[0];
        long long v126 = v151[1];
        char v127 = (unsigned __int8 *)((unint64_t)(v151[0] + 1) & 0xFFFFFFFFFFFFFFFELL);
        unint64_t v128 = v127 - v151[0];
        if (v127 < v151[0])
        {
          unint64_t v130 = 0;
          char v129 = v151[1];
        }
        else
        {
          char v129 = 0;
          if (v128 > 0xFFFFFFFFFFFFFFFDLL)
          {
            unint64_t v130 = 0;
          }
          else
          {
            unint64_t v130 = 0;
            if ((unsigned __int8 *)(v128 + 2) <= v151[1])
            {
              *(_WORD *)&v151[0][v128] = 2871;
              char v129 = v126;
              unint64_t v130 = v128 + 2;
            }
          }
        }
        unint64_t v131 = (unint64_t)&v125[v130 + 7] & 0xFFFFFFFFFFFFFFF8;
        if (v131 >= (unint64_t)&v125[v130])
        {
          unint64_t v132 = v131 - (void)v125;
          char v133 = 17;
          if (v132 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_231;
          }
          unint64_t v130 = v132 + 8;
          if (v132 + 8 > (unint64_t)v129) {
            goto LABEL_231;
          }
          *(void *)&v125[v132] = v32;
        }
        if (v129)
        {
          uint64_t v134 = *(void *)(v31 + 72);
          unint64_t v135 = (*(void *)(v31 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v136 = *(void *)(v31 + 64);
          if (v135 + 16 >= v136) {
            unint64_t v135 = 0;
          }
          if (v130 <= 0x10) {
            unint64_t v130 = 16;
          }
          unint64_t v137 = v135 + v130;
          if (v136 <= v137) {
            unint64_t v137 = 0;
          }
          *(void *)(v31 + 80) = v137;
          IPC::StreamClientConnection::wakeUpServerBatched(v31, atomic_exchange((atomic_ullong *volatile)(*(void *)(v134 + 16) + 128), v137) == 0x80000000);
          *(void *)(v31 + 56) = v32;
LABEL_23:
          IPC::StreamClientConnectionBuffer::tryAcquire(v31 + 64, &v165, v34);
          if (BYTE8(v166))
          {
            unint64_t v36 = (v165 + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v37 = v36 - v165;
            if (v36 < v165)
            {
              unint64_t v38 = 0;
            }
            else
            {
              unint64_t v38 = 0;
              if (v37 <= 0xFFFFFFFFFFFFFFFDLL && v37 + 2 <= (unint64_t)v166)
              {
                *(_WORD *)(v165 + v37) = 2870;
                unint64_t v38 = v37 + 2;
              }
            }
            unint64_t v39 = (*(void *)(v31 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v40 = *(void *)(v31 + 64);
            if (v39 + 16 >= v40) {
              unint64_t v39 = 0;
            }
            if (v38 <= 0x10) {
              unint64_t v38 = 16;
            }
            unint64_t v41 = v39 + v38;
            if (v40 <= v41) {
              unint64_t v41 = 0;
            }
            *(void *)(v31 + 80) = v41;
            atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v31 + 72) + 16) + 128), v41);
            *(_DWORD *)(v31 + 116) = 0;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v169, (uint64_t **)(v31 + 8));
            unint64_t v42 = (uint64_t *)v169;
            unint64_t v156 = 0;
            IPC::Connection::createSyncMessageEncoder(3704, v32, (uint64_t *)&v156, v170);
            char v43 = v170[0];
            IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v170[0], &v148);
            uint64_t v44 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
            if (v45 <= 3)
            {
              __break(0xC471u);
              JUMPOUT(0x199042A30);
            }
            *uint64_t v44 = v13;
            unint64_t v46 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
            if (v47 <= 3)
            {
              __break(0xC471u);
              JUMPOUT(0x199042A50);
            }
            *unint64_t v46 = a5;
            char v48 = (unsigned char *)IPC::Encoder::grow(v43, 1uLL, 1);
            if (!v49)
            {
              __break(0xC471u);
              JUMPOUT(0x199042A70);
            }
            unsigned char *v48 = v30;
            IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(v43, (unint64_t)&v159);
            IPC::Connection::sendSyncMessage((uint64_t)v42, v156, (uint64_t *)v170, 0, (uint64_t)&v162, v34);
            int v50 = v163;
            if (v163)
            {
              if (v163 != 1) {
                goto LABEL_220;
              }
              LOBYTE(v151[0]) = (_BYTE)v162;
            }
            else
            {
              uint64_t v51 = v162;
              double v52 = (unsigned __int8 *)IPC::Decoder::decode<std::optional<WebCore::IntSize>>(v162);
              if ((v53 & 0xFF00000000) == 0)
              {
                unint64_t v55 = (void *)*v51;
                unint64_t v138 = v51[1];
                unint64_t *v51 = 0;
                v51[1] = 0;
                unint64_t v139 = v51[3];
                if (v139 && v138) {
                  (*(void (**)(unint64_t, void *))(*(void *)v139 + 16))(v139, v55);
                }
                LOBYTE(v151[0]) = 13;
                DWORD2(v152) = 1;
                int v50 = v163;
                if (v163 == -1) {
                  goto LABEL_47;
                }
                goto LABEL_46;
              }
              if (v163) {
                goto LABEL_220;
              }
              double v54 = (unsigned __int8 *)v162;
              v162 = 0;
              v151[0] = v54;
              v151[1] = v52;
              LODWORD(v152) = v53;
            }
            DWORD2(v152) = v50;
LABEL_46:
            ((void (*)(char *, unint64_t **))off_1EE9E9D68[v50])(&v150, &v162);
LABEL_47:
            unint64_t v56 = v170[0];
            v170[0] = 0;
            if (v56)
            {
              IPC::Encoder::~Encoder(v56, v55);
              WTF::fastFree(v110, v111);
            }
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v169);
            if (DWORD2(v152)) {
LABEL_50:
            }
              WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v16);
            if ((_BYTE)v152)
            {
              if (SLODWORD(v151[1]) >= 1)
              {
                int v103 = HIDWORD(v151[1]) - 1;
                if (SHIDWORD(v151[1]) >= 1)
                {
                  unsigned int v104 = v145 * LODWORD(v151[1]);
                  if (v145 * LODWORD(v151[1]))
                  {
                    if (*(void *)(v147 + 8) >= (unint64_t)(v104 + v103 * v143)
                      && a7 >= v104 + v103 * v24
                      && (HIDWORD(v151[1]) < 2 || v143 >= v104 && v24 >= v104))
                    {
                      WebCore::copyRows((WebCore *)v143, *(void *)(v147 + 16), v24, a6, (unsigned __int8 *)HIDWORD(v151[1]));
                    }
                  }
                }
              }
            }
            if (DWORD2(v152) != -1) {
              ((void (*)(unint64_t *, unsigned __int8 **))off_1EE9E9978[DWORD2(v152)])(&v165, v151);
            }
            if ((_BYTE)v160) {
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v159);
            }
            goto LABEL_55;
          }
          LOBYTE(v151[0]) = 15;
LABEL_41:
          DWORD2(v152) = 1;
          goto LABEL_50;
        }
        char v133 = 17;
      }
      else
      {
        char v133 = 15;
      }
LABEL_231:
      LOBYTE(v151[0]) = v133;
      goto LABEL_41;
    }
  }
LABEL_56:
  v144 = (WebCore *)a6;
  a6 = *((void *)v16 + 13);
  uint64_t v30 = *((void *)v16 + 10);
  double v57 = *(double *)(a6 + 120);
  double v34 = INFINITY;
  if (fabs(v57) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    double v34 = v57 + v58;
  }
  if (*(void *)(a6 + 56) != v30)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a6 + 64, v151, v34);
    if ((_BYTE)v152)
    {
      unint64_t v112 = v151[0];
      unint64_t v113 = v151[1];
      char v114 = (unsigned __int8 *)((unint64_t)(v151[0] + 1) & 0xFFFFFFFFFFFFFFFELL);
      unint64_t v115 = v114 - v151[0];
      if (v114 < v151[0])
      {
        unint64_t v117 = 0;
        unint64_t v116 = v151[1];
      }
      else
      {
        unint64_t v116 = 0;
        if (v115 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v117 = 0;
        }
        else
        {
          unint64_t v117 = 0;
          if ((unsigned __int8 *)(v115 + 2) <= v151[1])
          {
            *(_WORD *)&v151[0][v115] = 2871;
            unint64_t v116 = v113;
            unint64_t v117 = v115 + 2;
          }
        }
      }
      unint64_t v118 = (unint64_t)&v112[v117 + 7] & 0xFFFFFFFFFFFFFFF8;
      if (v118 >= (unint64_t)&v112[v117])
      {
        unint64_t v119 = v118 - (void)v112;
        char v120 = 17;
        if (v119 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_227;
        }
        unint64_t v117 = v119 + 8;
        if (v119 + 8 > (unint64_t)v116) {
          goto LABEL_227;
        }
        *(void *)&v112[v119] = v30;
      }
      if (v116)
      {
        unint64_t v121 = (*(void *)(a6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v122 = *(void *)(a6 + 64);
        if (v121 + 16 >= v122) {
          unint64_t v121 = 0;
        }
        if (v117 <= 0x10) {
          unint64_t v117 = 16;
        }
        unint64_t v123 = v121 + v117;
        if (v122 <= v123) {
          unint64_t v124 = 0;
        }
        else {
          unint64_t v124 = v123;
        }
        *(void *)(a6 + 80) = v124;
        IPC::StreamClientConnection::wakeUpServerBatched(a6, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a6 + 72) + 16) + 128), v124) == 0x80000000);
        *(void *)(a6 + 56) = v30;
        goto LABEL_59;
      }
      char v120 = 17;
    }
    else
    {
      char v120 = 15;
    }
LABEL_227:
    LOBYTE(v165) = v120;
    int v168 = 1;
    goto LABEL_156;
  }
LABEL_59:
  unsigned int v141 = v24;
  uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(a6 + 64, &v156, v34);
  if (!v158)
  {
    LOBYTE(v165) = 15;
    int v168 = 1;
LABEL_120:
    uint64_t v85 = (uint64_t)v144;
    goto LABEL_155;
  }
  int v142 = v13;
  int v13 = a5;
  unint64_t v59 = v156;
  unint64_t v60 = v157;
  v140 = (uint64_t **)(a6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v169, (uint64_t **)(a6 + 8));
  uint64_t v61 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v169, v61))
  {
    LOBYTE(v165) = 11;
    int v168 = 1;
    LOBYTE(v151[0]) = 0;
    int v154 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ReadPixelsInline>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ReadPixelsInline>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v151, (uint64_t)&v165);
    char v155 = 1;
    if (v168 != -1) {
      ((void (*)(long long *, unint64_t *))off_1EE9E9988[v168])(&v159, &v165);
    }
    char v27 = a10 != 0;
    goto LABEL_116;
  }
  unint64_t v165 = v59;
  long long v166 = v60;
  unint64_t v62 = (v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v63 = v62 - v59;
  if (v62 < v59)
  {
    unint64_t v64 = 0;
  }
  else if (v63 > 0xFFFFFFFFFFFFFFFDLL || (unint64_t v64 = v63 + 2, v63 + 2 > v60))
  {
    unint64_t v60 = 0;
    unint64_t v64 = 0;
    *(void *)&long long v166 = 0;
  }
  else
  {
    *(_WORD *)(v59 + v63) = 3703;
    *((void *)&v166 + 1) = v63 + 2;
  }
  unint64_t v65 = (void *)((v59 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v65 >= v59 + v64)
  {
    unint64_t v66 = (char *)v65 - v59;
    if ((unint64_t)v65 - v59 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v66 + 8) > v60)
    {
      *(void *)&long long v166 = 0;
    }
    else
    {
      *unint64_t v65 = v61;
      *((void *)&v166 + 1) = v66 + 8;
    }
  }
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode((uint64_t *)&v165, &v148);
  unint64_t v67 = *((void *)&v166 + 1);
  unint64_t v68 = v166;
  unint64_t v69 = v165;
  unint64_t v70 = (v165 + *((void *)&v166 + 1) + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v71 = v70 - (v165 + *((void *)&v166 + 1));
  if (v70 < v165 + *((void *)&v166 + 1))
  {
    char v27 = a10 != 0;
  }
  else
  {
    unint64_t v72 = v70 - v165;
    char v27 = a10 != 0;
    if (v71 + *((void *)&v166 + 1) > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > (unint64_t)v166)
    {
      unint64_t v68 = 0;
      *(void *)&long long v166 = 0;
    }
    else
    {
      *(_DWORD *)(v165 + v72) = v142;
      unint64_t v69 = v165;
      unint64_t v68 = v166;
      unint64_t v67 = v72 + 4;
    }
  }
  uint64_t v73 = (_DWORD *)((v69 + v67 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v73 >= v69 + v67)
  {
    unint64_t v74 = (char *)v73 - v69;
    if ((unint64_t)v73 - v69 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v74 + 4) > v68)
    {
      unint64_t v68 = 0;
      *(void *)&long long v166 = 0;
    }
    else
    {
      *uint64_t v73 = v13;
      unint64_t v68 = v166;
      unint64_t v67 = (unint64_t)(v74 + 4);
    }
  }
  if (v67 >= v68 || (unint64_t v75 = v67 + 1, *(unsigned char *)(v165 + v67) = v27, *((void *)&v166 + 1) = v67 + 1, !(void)v166))
  {
    LOBYTE(v162) = 0;
    char v164 = 0;
    goto LABEL_103;
  }
  unint64_t v76 = (*(void *)(a6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v77 = *(void *)(a6 + 64);
  if (v76 + 16 >= v77) {
    unint64_t v76 = 0;
  }
  if (v75 <= 0x10) {
    unint64_t v75 = 16;
  }
  unint64_t v78 = v76 + v75;
  if (v77 <= v78) {
    unint64_t v79 = 0;
  }
  else {
    unint64_t v79 = v78;
  }
  *(void *)(a6 + 80) = v79;
  if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a6 + 72) + 16) + 128), v79) == 0x80000000
    || *(_DWORD *)(a6 + 116))
  {
    if (*(unsigned char *)(a6 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a6 + 92));
    }
    *(_DWORD *)(a6 + 116) = 0;
  }
  IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v159, a6 + 64, v34);
  if (!(_BYTE)v160)
  {
    LOBYTE(v162) = 16;
    int v163 = 1;
LABEL_102:
    char v164 = 1;
    goto LABEL_103;
  }
  WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)v170, (uint64_t)&v159, (uint64_t *)(a6 + 56));
  if (*((_WORD *)v170[0] + 25) != 2870)
  {
    v162 = (unint64_t *)v170[0];
    int v163 = 0;
    goto LABEL_102;
  }
  IPC::Decoder::~Decoder(v170[0]);
  WTF::fastFree(v80, v81);
  IPC::Connection::waitForSyncReply((uint64_t)v169, v61, 0xE77u, (uint64_t)&v159, v34);
  LOBYTE(v162) = 0;
  int v163 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v162, (uint64_t)&v159);
  char v164 = 1;
  if (DWORD2(v159) != -1) {
    ((void (*)(IPC::Encoder **, long long *))off_1EE9E9D68[DWORD2(v159)])(v170, &v159);
  }
LABEL_103:
  IPC::Connection::popPendingSyncRequestID(v169);
  if (v164)
  {
    if (v163 == 1)
    {
      LOBYTE(v151[0]) = (_BYTE)v162;
      int v83 = 1;
      int v154 = 1;
      char v155 = 1;
    }
    else
    {
      if (v163) {
        goto LABEL_220;
      }
      LOBYTE(v159) = 0;
      char v161 = 0;
      IPC::Decoder::operator>><std::tuple<std::optional<WebCore::IntSize>,std::span<unsigned char const,18446744073709551615ul>>>(v162, (uint64_t)&v159);
      if (v161)
      {
        if (!v164) {
          goto LABEL_205;
        }
        if (v163) {
          goto LABEL_220;
        }
        unint64_t v82 = v162;
        v162 = 0;
        long long v166 = v159;
        long long v167 = v160;
        unint64_t v165 = (unint64_t)v82;
        int v168 = 0;
        LOBYTE(v151[0]) = 0;
        int v154 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ReadPixelsInline>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ReadPixelsInline>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v151, (uint64_t)&v165);
        char v155 = 1;
        if (v168 != -1) {
          ((void (*)(IPC::Encoder **, unint64_t *))off_1EE9E9988[v168])(v170, &v165);
        }
      }
      else
      {
        LOBYTE(v151[0]) = 13;
        int v154 = 1;
        char v155 = 1;
      }
      if (!v164) {
        goto LABEL_116;
      }
      int v83 = v163;
      if (v163 == -1) {
        goto LABEL_116;
      }
    }
    ((void (*)(unint64_t *, unint64_t **))off_1EE9E9D68[v83])(&v165, &v162);
  }
  else
  {
    LOBYTE(v151[0]) = 0;
    char v155 = 0;
  }
LABEL_116:
  unint64_t v84 = (uint64_t **)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v169);
  if (v155)
  {
    LOBYTE(v165) = 0;
    int v168 = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ReadPixelsInline>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ReadPixelsInline>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v165, (uint64_t)v151);
    if (v155 && v154 != -1) {
      uint64_t result = ((uint64_t (*)(long long *, unsigned __int8 **))off_1EE9E9988[v154])(&v159, v151);
    }
    goto LABEL_120;
  }
  if (!v158)
  {
LABEL_205:
    __break(1u);
LABEL_206:
    __break(0xC471u);
    JUMPOUT(0x1990429A0);
  }
  unint64_t v86 = (v156 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v87 = v86 - v156;
  if (v86 < v156)
  {
    unint64_t v88 = 0;
  }
  else
  {
    unint64_t v88 = 0;
    if (v87 <= 0xFFFFFFFFFFFFFFFDLL && v87 + 2 <= v157)
    {
      *(_WORD *)(v156 + v87) = 2870;
      unint64_t v88 = v87 + 2;
    }
  }
  unint64_t v89 = (*(void *)(a6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v90 = *(void *)(a6 + 64);
  if (v89 + 16 >= v90) {
    goto LABEL_221;
  }
  while (1)
  {
    if (v88 <= 0x10) {
      unint64_t v88 = 16;
    }
    unint64_t v91 = v89 + v88;
    if (v90 <= v91) {
      unint64_t v91 = 0;
    }
    *(void *)(a6 + 80) = v91;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a6 + 72) + 16) + 128), v91);
    *(_DWORD *)(a6 + 116) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v84, v140);
    unint64_t v92 = (uint64_t *)v169;
    v162 = 0;
    IPC::Connection::createSyncMessageEncoder(3703, v30, (uint64_t *)&v162, v170);
    uint64_t v93 = v170[0];
    IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v170[0], &v148);
    unint64_t v94 = (_DWORD *)IPC::Encoder::grow(v93, 4uLL, 4);
    if (v95 <= 3) {
      goto LABEL_206;
    }
    _DWORD *v94 = v142;
    v96 = (_DWORD *)IPC::Encoder::grow(v93, 4uLL, 4);
    uint64_t v85 = (uint64_t)v144;
    if (v97 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1990429C0);
    }
    _DWORD *v96 = v13;
    uint64_t v98 = (unsigned char *)IPC::Encoder::grow(v93, 1uLL, 1);
    if (!v99)
    {
      __break(0xC471u);
      JUMPOUT(0x1990429E0);
    }
    unsigned char *v98 = v27;
    IPC::Connection::sendSyncMessage((uint64_t)v92, (uint64_t)v162, (uint64_t *)v170, 0, (uint64_t)&v159, v34);
    if (DWORD2(v159))
    {
      if (DWORD2(v159) == 1)
      {
        LOBYTE(v165) = v159;
        int v100 = 1;
        int v168 = 1;
        goto LABEL_151;
      }
      goto LABEL_220;
    }
    LOBYTE(v151[0]) = 0;
    char v153 = 0;
    IPC::Decoder::operator>><std::tuple<std::optional<WebCore::IntSize>,std::span<unsigned char const,18446744073709551615ul>>>((unint64_t *)v159, (uint64_t)v151);
    if (!v153) {
      break;
    }
    int v100 = DWORD2(v159);
    if (!DWORD2(v159))
    {
      unint64_t v102 = v159;
      *(void *)&long long v159 = 0;
      long long v166 = *(_OWORD *)v151;
      long long v167 = v152;
      unint64_t v165 = v102;
      int v168 = 0;
      goto LABEL_151;
    }
LABEL_220:
    unint64_t v84 = (uint64_t **)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_221:
    unint64_t v89 = 0;
  }
  LOBYTE(v165) = 13;
  int v168 = 1;
  int v100 = DWORD2(v159);
  if (DWORD2(v159) == -1) {
    goto LABEL_152;
  }
LABEL_151:
  ((void (*)(unsigned __int8 **, long long *))off_1EE9E9D68[v100])(v151, &v159);
LABEL_152:
  unint64_t v105 = v170[0];
  v170[0] = 0;
  if (v105)
  {
    IPC::Encoder::~Encoder(v105, v101);
    WTF::fastFree(v108, v109);
  }
  uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v169);
LABEL_155:
  if (v168) {
LABEL_156:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v16);
  if (BYTE8(v166))
  {
    if ((int)v166 >= 1)
    {
      int v106 = DWORD1(v166) - 1;
      if (SDWORD1(v166) >= 1)
      {
        unsigned int v107 = v145 * v166;
        if (v145 * v166)
        {
          if (*((void *)&v167 + 1) >= (unint64_t)(v107 + v106 * v143)
            && a7 >= v107 + v106 * v141
            && (DWORD1(v166) < 2 || v143 >= v107 && v141 >= v107))
          {
            uint64_t result = WebCore::copyRows((WebCore *)v143, v167, (const unsigned __int8 *)v141, v85, (unsigned __int8 *)DWORD1(v166));
          }
        }
      }
    }
  }
  if (v168 != -1) {
    return ((uint64_t (*)(unsigned __int8 **, unint64_t *))off_1EE9E9988[v168])(v151, &v165);
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::readPixels(uint64_t a1, uint64_t a2, unint64_t a3, WebCore::GraphicsContextGL *a4, int a5, uint64_t a6, unint64_t a7, int a8, int a9, char a10)
{
  return WebKit::RemoteGraphicsContextGLProxy::readPixels(a1 - 24, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysANGLE(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3)
{
  uint64_t v3 = *((void *)result + 13);
  if (!v3) {
    return result;
  }
  BOOL v5 = result;
  long long v6 = *(_OWORD *)(a3 + 8);
  uint64_t v7 = *(void *)a3;
  long long v52 = 0uLL;
  uint64_t v51 = v7;
  if (v7) {
    long long v52 = v6;
  }
  uint64_t v8 = *((void *)result + 10);
  double v9 = *(double *)(v3 + 120);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v10 = v9 + v11;
  }
  if (*(void *)(v3 + 56) != v8)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v57, v10);
    if (!(_BYTE)v59) {
      goto LABEL_45;
    }
    unint64_t v39 = v57;
    unint64_t v40 = v58;
    unint64_t v41 = ((unint64_t)v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v42 = v41 - (void)v57;
    if (v41 < (unint64_t)v57)
    {
      unint64_t v44 = 0;
      unint64_t v43 = v58;
    }
    else
    {
      unint64_t v43 = 0;
      if (v42 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v44 = 0;
        if (v42 + 2 <= v58)
        {
          *(_WORD *)((char *)v57 + v42) = 2871;
          unint64_t v43 = v40;
          unint64_t v44 = v42 + 2;
        }
      }
    }
    unint64_t v45 = (char *)(((unint64_t)v39 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v45 >= (char *)v39 + v44)
    {
      unint64_t v44 = v45 - (char *)v39 + 8;
      if ((unint64_t)(v45 - (char *)v39) > 0xFFFFFFFFFFFFFFF7 || v44 > v43) {
        goto LABEL_45;
      }
      *(void *)unint64_t v45 = v8;
    }
    if (!v43) {
      goto LABEL_45;
    }
    unint64_t v47 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v48 = *(void *)(v3 + 64);
    if (v47 + 16 >= v48) {
      unint64_t v47 = 0;
    }
    if (v44 <= 0x10) {
      unint64_t v44 = 16;
    }
    unint64_t v49 = v47 + v44;
    if (v48 <= v49) {
      unint64_t v50 = 0;
    }
    else {
      unint64_t v50 = v49;
    }
    *(void *)(v3 + 80) = v50;
    IPC::StreamClientConnection::wakeUpServerBatched(v3, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v50) == 0x80000000);
    *(void *)(v3 + 56) = v8;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v54, v10);
  if (!v56) {
    goto LABEL_45;
  }
  uint64_t v12 = v54;
  unint64_t v13 = v55;
  double v57 = v54;
  unint64_t v58 = v55;
  unint64_t v59 = 0;
  unint64_t v14 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v15 = v14 - (void)v54;
  if (v14 < (unint64_t)v54)
  {
    unint64_t v16 = 0;
  }
  else if (v15 > 0xFFFFFFFFFFFFFFFDLL || (unint64_t v16 = v15 + 2, v15 + 2 > v55))
  {
    unint64_t v13 = 0;
    unint64_t v16 = 0;
    unint64_t v58 = 0;
  }
  else
  {
    *(_WORD *)((char *)v54 + v15) = 1016;
    unint64_t v59 = v15 + 2;
  }
  unint64_t v17 = (char *)(((unint64_t)v12 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v17 >= (char *)v12 + v16)
  {
    if ((unint64_t)(v17 - (char *)v12) > 0xFFFFFFFFFFFFFFFBLL || v17 - (char *)v12 + 4 > v13)
    {
      unint64_t v58 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v17 = a2;
      unint64_t v59 = v17 - (char *)v12 + 4;
    }
  }
  uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int>,void>::encode<IPC::StreamConnectionEncoder,0ul,1ul>(&v57, (uint64_t)&v51);
  if (v58)
  {
    uint64_t v19 = v59;
    uint64_t v20 = *(void *)(v3 + 72);
    unint64_t v21 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = *(void *)(v3 + 64);
    if (v21 + 16 >= v22) {
      unint64_t v21 = 0;
    }
    if (v59 <= 0x10) {
      uint64_t v19 = 16;
    }
    unint64_t v23 = v21 + v19;
    if (v22 <= v23) {
      unint64_t v23 = 0;
    }
    *(void *)(v3 + 80) = v23;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v20 + 16) + 128), v23) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  if (!v56)
  {
    __break(1u);
    goto LABEL_70;
  }
  unint64_t v24 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v25 = v24 - (void)v54;
  if (v24 < (unint64_t)v54)
  {
    unint64_t v26 = 0;
  }
  else
  {
    unint64_t v26 = 0;
    if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v55)
    {
      *(_WORD *)((char *)v54 + v25) = 2870;
      unint64_t v26 = v25 + 2;
    }
  }
  unint64_t v27 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v28 = *(void *)(v3 + 64);
  if (v27 + 16 >= v28) {
    unint64_t v27 = 0;
  }
  if (v26 <= 0x10) {
    unint64_t v26 = 16;
  }
  unint64_t v29 = v27 + v26;
  if (v28 <= v29) {
    unint64_t v29 = 0;
  }
  *(void *)(v3 + 80) = v29;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v29);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v53, (uint64_t **)(v3 + 8));
  uint64_t v30 = v53;
  uint64_t v31 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v31 = 1016;
  *((void *)v31 + 1) = v8;
  *((void *)v31 + 66) = (char *)v31 + 16;
  *((void *)v31 + 67) = 512;
  *((void *)v31 + 68) = 0;
  *((void *)v31 + 70) = 0;
  *((void *)v31 + 69) = 0;
  IPC::Encoder::encodeHeader(v31);
  double v57 = v31;
  uint64_t v32 = (_DWORD *)IPC::Encoder::grow(v31, 4uLL, 4);
  if (v33 <= 3)
  {
LABEL_70:
    __break(0xC471u);
    JUMPOUT(0x199042FCCLL);
  }
  *uint64_t v32 = a2;
  IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int>,void>::encode<IPC::Encoder,0ul,1ul>(v31, &v51);
  int v35 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v57, 1, 0);
  unint64_t v36 = v57;
  double v57 = 0;
  if (v36)
  {
    IPC::Encoder::~Encoder(v36, v34);
    WTF::fastFree(v37, v38);
  }
  uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v53);
  if (v35) {
LABEL_45:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
  return result;
}

WebKit::RemoteGraphicsContextGLProxy *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysANGLE(uint64_t a1, int a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysANGLE((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 24), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysInstancedANGLE(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3)
{
  uint64_t v3 = *((void *)result + 13);
  if (!v3) {
    return result;
  }
  BOOL v5 = result;
  long long v6 = *(_OWORD *)(a3 + 8);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v51 = *(void *)a3;
  long long v52 = 0uLL;
  uint64_t v53 = 0;
  if (v51)
  {
    long long v52 = v6;
    uint64_t v53 = v7;
  }
  uint64_t v8 = *((void *)result + 10);
  double v9 = *(double *)(v3 + 120);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v10 = v9 + v11;
  }
  if (*(void *)(v3 + 56) != v8)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v58, v10);
    if (!(_BYTE)v60) {
      goto LABEL_45;
    }
    unint64_t v39 = v58;
    unint64_t v40 = v59;
    unint64_t v41 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v42 = v41 - (void)v58;
    if (v41 < (unint64_t)v58)
    {
      unint64_t v44 = 0;
      unint64_t v43 = v59;
    }
    else
    {
      unint64_t v43 = 0;
      if (v42 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v44 = 0;
        if (v42 + 2 <= v59)
        {
          *(_WORD *)((char *)v58 + v42) = 2871;
          unint64_t v43 = v40;
          unint64_t v44 = v42 + 2;
        }
      }
    }
    unint64_t v45 = (char *)(((unint64_t)v39 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v45 >= (char *)v39 + v44)
    {
      unint64_t v44 = v45 - (char *)v39 + 8;
      if ((unint64_t)(v45 - (char *)v39) > 0xFFFFFFFFFFFFFFF7 || v44 > v43) {
        goto LABEL_45;
      }
      *(void *)unint64_t v45 = v8;
    }
    if (!v43) {
      goto LABEL_45;
    }
    unint64_t v47 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v48 = *(void *)(v3 + 64);
    if (v47 + 16 >= v48) {
      unint64_t v47 = 0;
    }
    if (v44 <= 0x10) {
      unint64_t v44 = 16;
    }
    unint64_t v49 = v47 + v44;
    if (v48 <= v49) {
      unint64_t v50 = 0;
    }
    else {
      unint64_t v50 = v49;
    }
    *(void *)(v3 + 80) = v50;
    IPC::StreamClientConnection::wakeUpServerBatched(v3, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v50) == 0x80000000);
    *(void *)(v3 + 56) = v8;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v55, v10);
  if (!v57) {
    goto LABEL_45;
  }
  uint64_t v12 = v55;
  unint64_t v13 = v56;
  unint64_t v58 = v55;
  unint64_t v59 = v56;
  unint64_t v60 = 0;
  unint64_t v14 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v15 = v14 - (void)v55;
  if (v14 < (unint64_t)v55)
  {
    unint64_t v16 = 0;
  }
  else if (v15 > 0xFFFFFFFFFFFFFFFDLL || (unint64_t v16 = v15 + 2, v15 + 2 > v56))
  {
    unint64_t v13 = 0;
    unint64_t v16 = 0;
    unint64_t v59 = 0;
  }
  else
  {
    *(_WORD *)((char *)v55 + v15) = 1017;
    unint64_t v60 = v15 + 2;
  }
  unint64_t v17 = (char *)(((unint64_t)v12 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v17 >= (char *)v12 + v16)
  {
    if ((unint64_t)(v17 - (char *)v12) > 0xFFFFFFFFFFFFFFFBLL || v17 - (char *)v12 + 4 > v13)
    {
      unint64_t v59 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v17 = a2;
      unint64_t v60 = v17 - (char *)v12 + 4;
    }
  }
  uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int,int>,void>::encode<IPC::StreamConnectionEncoder,0ul,1ul,2ul>(&v58, (uint64_t)&v51);
  if (v59)
  {
    uint64_t v19 = v60;
    uint64_t v20 = *(void *)(v3 + 72);
    unint64_t v21 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = *(void *)(v3 + 64);
    if (v21 + 16 >= v22) {
      unint64_t v21 = 0;
    }
    if (v60 <= 0x10) {
      uint64_t v19 = 16;
    }
    unint64_t v23 = v21 + v19;
    if (v22 <= v23) {
      unint64_t v23 = 0;
    }
    *(void *)(v3 + 80) = v23;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v20 + 16) + 128), v23) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  if (!v57)
  {
    __break(1u);
    goto LABEL_70;
  }
  unint64_t v24 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v25 = v24 - (void)v55;
  if (v24 < (unint64_t)v55)
  {
    unint64_t v26 = 0;
  }
  else
  {
    unint64_t v26 = 0;
    if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v56)
    {
      *(_WORD *)((char *)v55 + v25) = 2870;
      unint64_t v26 = v25 + 2;
    }
  }
  unint64_t v27 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v28 = *(void *)(v3 + 64);
  if (v27 + 16 >= v28) {
    unint64_t v27 = 0;
  }
  if (v26 <= 0x10) {
    unint64_t v26 = 16;
  }
  unint64_t v29 = v27 + v26;
  if (v28 <= v29) {
    unint64_t v29 = 0;
  }
  *(void *)(v3 + 80) = v29;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v29);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(v3 + 8));
  uint64_t v30 = v54;
  uint64_t v31 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v31 = 1017;
  *((void *)v31 + 1) = v8;
  *((void *)v31 + 66) = (char *)v31 + 16;
  *((void *)v31 + 67) = 512;
  *((void *)v31 + 68) = 0;
  *((void *)v31 + 70) = 0;
  *((void *)v31 + 69) = 0;
  IPC::Encoder::encodeHeader(v31);
  unint64_t v58 = v31;
  uint64_t v32 = (_DWORD *)IPC::Encoder::grow(v31, 4uLL, 4);
  if (v33 <= 3)
  {
LABEL_70:
    __break(0xC471u);
    JUMPOUT(0x199043448);
  }
  *uint64_t v32 = a2;
  IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int,int>,void>::encode<IPC::Encoder,0ul,1ul,2ul>(v31, &v51);
  int v35 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
  unint64_t v36 = v58;
  unint64_t v58 = 0;
  if (v36)
  {
    IPC::Encoder::~Encoder(v36, v34);
    WTF::fastFree(v37, v38);
  }
  uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v54);
  if (v35) {
LABEL_45:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
  return result;
}

WebKit::RemoteGraphicsContextGLProxy *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysInstancedANGLE(uint64_t a1, int a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysInstancedANGLE((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 24), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsANGLE(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, int a4)
{
  uint64_t v4 = *((void *)result + 13);
  if (!v4) {
    return result;
  }
  uint64_t v7 = result;
  long long v8 = *(_OWORD *)(a3 + 8);
  uint64_t v9 = *(void *)a3;
  long long v58 = 0uLL;
  uint64_t v57 = v9;
  if (v9) {
    long long v58 = v8;
  }
  uint64_t v10 = *((void *)result + 10);
  double v11 = *(double *)(v4 + 120);
  double v12 = INFINITY;
  if (fabs(v11) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v12 = v11 + v13;
  }
  if (*(void *)(v4 + 56) != v10)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v63, v12);
    if (!(_BYTE)v65) {
      goto LABEL_50;
    }
    unint64_t v45 = v63;
    unint64_t v46 = v64;
    unint64_t v47 = ((unint64_t)v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v48 = v47 - (void)v63;
    if (v47 < (unint64_t)v63)
    {
      unint64_t v50 = 0;
      unint64_t v49 = v64;
    }
    else
    {
      unint64_t v49 = 0;
      if (v48 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v50 = 0;
      }
      else
      {
        unint64_t v50 = 0;
        if (v48 + 2 <= v64)
        {
          *(_WORD *)((char *)v63 + v48) = 2871;
          unint64_t v49 = v46;
          unint64_t v50 = v48 + 2;
        }
      }
    }
    uint64_t v51 = (char *)(((unint64_t)v45 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v51 >= (char *)v45 + v50)
    {
      unint64_t v50 = v51 - (char *)v45 + 8;
      if ((unint64_t)(v51 - (char *)v45) > 0xFFFFFFFFFFFFFFF7 || v50 > v49) {
        goto LABEL_50;
      }
      *(void *)uint64_t v51 = v10;
    }
    if (!v49) {
      goto LABEL_50;
    }
    unint64_t v53 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v54 = *(void *)(v4 + 64);
    if (v53 + 16 >= v54) {
      unint64_t v53 = 0;
    }
    if (v50 <= 0x10) {
      unint64_t v50 = 16;
    }
    unint64_t v55 = v53 + v50;
    if (v54 <= v55) {
      unint64_t v56 = 0;
    }
    else {
      unint64_t v56 = v55;
    }
    *(void *)(v4 + 80) = v56;
    IPC::StreamClientConnection::wakeUpServerBatched(v4, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v56) == 0x80000000);
    *(void *)(v4 + 56) = v10;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v60, v12);
  if (!v62) {
    goto LABEL_50;
  }
  unint64_t v14 = v60;
  unint64_t v15 = v61;
  unint64_t v63 = v60;
  unint64_t v64 = v61;
  uint64_t v65 = 0;
  unint64_t v16 = ((unint64_t)v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = v16 - (void)v60;
  if (v16 < (unint64_t)v60)
  {
    unint64_t v18 = 0;
  }
  else if (v17 > 0xFFFFFFFFFFFFFFFDLL || (unint64_t v18 = v17 + 2, v17 + 2 > v61))
  {
    unint64_t v15 = 0;
    unint64_t v18 = 0;
    unint64_t v64 = 0;
  }
  else
  {
    *(_WORD *)((char *)v60 + v17) = 1019;
    uint64_t v65 = v17 + 2;
  }
  uint64_t v19 = (char *)(((unint64_t)v14 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v19 >= (char *)v14 + v18)
  {
    if ((unint64_t)(v19 - (char *)v14) > 0xFFFFFFFFFFFFFFFBLL || v19 - (char *)v14 + 4 > v15)
    {
      unint64_t v64 = 0;
    }
    else
    {
      *(_DWORD *)uint64_t v19 = a2;
      uint64_t v65 = v19 - (char *)v14 + 4;
    }
  }
  uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int>,void>::encode<IPC::StreamConnectionEncoder,0ul,1ul>(&v63, (uint64_t)&v57);
  unint64_t v21 = v65;
  unint64_t v22 = (char *)(((unint64_t)v63 + v65 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v22 >= (char *)v63 + v65)
  {
    int64_t v23 = v22 - (char *)v63;
    if ((unint64_t)(v22 - (char *)v63) > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_34;
    }
    unint64_t v21 = v23 + 4;
    if (v23 + 4 > v64) {
      goto LABEL_34;
    }
    *(_DWORD *)unint64_t v22 = a4;
    uint64_t v65 = v23 + 4;
  }
  if (v64)
  {
    uint64_t v24 = *(void *)(v4 + 72);
    unint64_t v25 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v26 = *(void *)(v4 + 64);
    if (v25 + 16 >= v26) {
      unint64_t v25 = 0;
    }
    if (v21 <= 0x10) {
      unint64_t v21 = 16;
    }
    unint64_t v27 = v25 + v21;
    if (v26 <= v27) {
      unint64_t v27 = 0;
    }
    *(void *)(v4 + 80) = v27;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v24 + 16) + 128), v27) == 0x80000000
      || *(_DWORD *)(v4 + 116))
    {
      if (*(unsigned char *)(v4 + 104)) {
        uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
      }
      *(_DWORD *)(v4 + 116) = 0;
    }
    return result;
  }
LABEL_34:
  if (!v62)
  {
    __break(1u);
    goto LABEL_75;
  }
  unint64_t v28 = ((unint64_t)v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v29 = v28 - (void)v60;
  if (v28 < (unint64_t)v60)
  {
    unint64_t v30 = 0;
  }
  else
  {
    unint64_t v30 = 0;
    if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v29 + 2 <= v61)
    {
      *(_WORD *)((char *)v60 + v29) = 2870;
      unint64_t v30 = v29 + 2;
    }
  }
  unint64_t v31 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = *(void *)(v4 + 64);
  if (v31 + 16 >= v32) {
    unint64_t v31 = 0;
  }
  if (v30 <= 0x10) {
    unint64_t v30 = 16;
  }
  unint64_t v33 = v31 + v30;
  if (v32 <= v33) {
    unint64_t v33 = 0;
  }
  *(void *)(v4 + 80) = v33;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v33);
  *(_DWORD *)(v4 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v59, (uint64_t **)(v4 + 8));
  double v34 = v59;
  int v35 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v35 = 1019;
  *((void *)v35 + 1) = v10;
  *((void *)v35 + 66) = (char *)v35 + 16;
  *((void *)v35 + 67) = 512;
  *((void *)v35 + 68) = 0;
  *((void *)v35 + 70) = 0;
  *((void *)v35 + 69) = 0;
  IPC::Encoder::encodeHeader(v35);
  unint64_t v63 = v35;
  unint64_t v36 = (_DWORD *)IPC::Encoder::grow(v35, 4uLL, 4);
  if (v37 <= 3)
  {
LABEL_75:
    __break(0xC471u);
    JUMPOUT(0x199043918);
  }
  *unint64_t v36 = a2;
  IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int>,void>::encode<IPC::Encoder,0ul,1ul>(v35, &v57);
  unint64_t v38 = (_DWORD *)IPC::Encoder::grow(v35, 4uLL, 4);
  if (v39 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199043938);
  }
  *unint64_t v38 = a4;
  int v41 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v63, 1, 0);
  unint64_t v42 = v63;
  unint64_t v63 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v40);
    WTF::fastFree(v43, v44);
  }
  uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v59);
  if (v41) {
LABEL_50:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v7);
  return result;
}

WebKit::RemoteGraphicsContextGLProxy *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsANGLE(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsANGLE((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 24), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsInstancedANGLE(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, int a4)
{
  uint64_t v4 = *((void *)result + 13);
  if (!v4) {
    return result;
  }
  uint64_t v7 = result;
  long long v8 = *(_OWORD *)(a3 + 8);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v57 = *(void *)a3;
  long long v58 = 0uLL;
  uint64_t v59 = 0;
  if (v57)
  {
    long long v58 = v8;
    uint64_t v59 = v9;
  }
  uint64_t v10 = *((void *)result + 10);
  double v11 = *(double *)(v4 + 120);
  double v12 = INFINITY;
  if (fabs(v11) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v12 = v11 + v13;
  }
  if (*(void *)(v4 + 56) != v10)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v64, v12);
    if (!(_BYTE)v66) {
      goto LABEL_50;
    }
    unint64_t v45 = v64;
    unint64_t v46 = v65;
    unint64_t v47 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v48 = v47 - (void)v64;
    if (v47 < (unint64_t)v64)
    {
      unint64_t v50 = 0;
      unint64_t v49 = v65;
    }
    else
    {
      unint64_t v49 = 0;
      if (v48 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v50 = 0;
      }
      else
      {
        unint64_t v50 = 0;
        if (v48 + 2 <= v65)
        {
          *(_WORD *)((char *)v64 + v48) = 2871;
          unint64_t v49 = v46;
          unint64_t v50 = v48 + 2;
        }
      }
    }
    uint64_t v51 = (char *)(((unint64_t)v45 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v51 >= (char *)v45 + v50)
    {
      unint64_t v50 = v51 - (char *)v45 + 8;
      if ((unint64_t)(v51 - (char *)v45) > 0xFFFFFFFFFFFFFFF7 || v50 > v49) {
        goto LABEL_50;
      }
      *(void *)uint64_t v51 = v10;
    }
    if (!v49) {
      goto LABEL_50;
    }
    unint64_t v53 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v54 = *(void *)(v4 + 64);
    if (v53 + 16 >= v54) {
      unint64_t v53 = 0;
    }
    if (v50 <= 0x10) {
      unint64_t v50 = 16;
    }
    unint64_t v55 = v53 + v50;
    if (v54 <= v55) {
      unint64_t v56 = 0;
    }
    else {
      unint64_t v56 = v55;
    }
    *(void *)(v4 + 80) = v56;
    IPC::StreamClientConnection::wakeUpServerBatched(v4, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v56) == 0x80000000);
    *(void *)(v4 + 56) = v10;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v61, v12);
  if (!v63) {
    goto LABEL_50;
  }
  unint64_t v14 = v61;
  unint64_t v15 = v62;
  unint64_t v64 = v61;
  unint64_t v65 = v62;
  uint64_t v66 = 0;
  unint64_t v16 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = v16 - (void)v61;
  if (v16 < (unint64_t)v61)
  {
    unint64_t v18 = 0;
  }
  else if (v17 > 0xFFFFFFFFFFFFFFFDLL || (unint64_t v18 = v17 + 2, v17 + 2 > v62))
  {
    unint64_t v15 = 0;
    unint64_t v18 = 0;
    unint64_t v65 = 0;
  }
  else
  {
    *(_WORD *)((char *)v61 + v17) = 1020;
    uint64_t v66 = v17 + 2;
  }
  uint64_t v19 = (char *)(((unint64_t)v14 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v19 >= (char *)v14 + v18)
  {
    if ((unint64_t)(v19 - (char *)v14) > 0xFFFFFFFFFFFFFFFBLL || v19 - (char *)v14 + 4 > v15)
    {
      unint64_t v65 = 0;
    }
    else
    {
      *(_DWORD *)uint64_t v19 = a2;
      uint64_t v66 = v19 - (char *)v14 + 4;
    }
  }
  uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int,int>,void>::encode<IPC::StreamConnectionEncoder,0ul,1ul,2ul>(&v64, (uint64_t)&v57);
  unint64_t v21 = v66;
  unint64_t v22 = (char *)(((unint64_t)v64 + v66 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v22 >= (char *)v64 + v66)
  {
    int64_t v23 = v22 - (char *)v64;
    if ((unint64_t)(v22 - (char *)v64) > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_34;
    }
    unint64_t v21 = v23 + 4;
    if (v23 + 4 > v65) {
      goto LABEL_34;
    }
    *(_DWORD *)unint64_t v22 = a4;
    uint64_t v66 = v23 + 4;
  }
  if (v65)
  {
    uint64_t v24 = *(void *)(v4 + 72);
    unint64_t v25 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v26 = *(void *)(v4 + 64);
    if (v25 + 16 >= v26) {
      unint64_t v25 = 0;
    }
    if (v21 <= 0x10) {
      unint64_t v21 = 16;
    }
    unint64_t v27 = v25 + v21;
    if (v26 <= v27) {
      unint64_t v27 = 0;
    }
    *(void *)(v4 + 80) = v27;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v24 + 16) + 128), v27) == 0x80000000
      || *(_DWORD *)(v4 + 116))
    {
      if (*(unsigned char *)(v4 + 104)) {
        uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
      }
      *(_DWORD *)(v4 + 116) = 0;
    }
    return result;
  }
LABEL_34:
  if (!v63)
  {
    __break(1u);
    goto LABEL_75;
  }
  unint64_t v28 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v29 = v28 - (void)v61;
  if (v28 < (unint64_t)v61)
  {
    unint64_t v30 = 0;
  }
  else
  {
    unint64_t v30 = 0;
    if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v29 + 2 <= v62)
    {
      *(_WORD *)((char *)v61 + v29) = 2870;
      unint64_t v30 = v29 + 2;
    }
  }
  unint64_t v31 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = *(void *)(v4 + 64);
  if (v31 + 16 >= v32) {
    unint64_t v31 = 0;
  }
  if (v30 <= 0x10) {
    unint64_t v30 = 16;
  }
  unint64_t v33 = v31 + v30;
  if (v32 <= v33) {
    unint64_t v33 = 0;
  }
  *(void *)(v4 + 80) = v33;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v33);
  *(_DWORD *)(v4 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v60, (uint64_t **)(v4 + 8));
  double v34 = v60;
  int v35 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v35 = 1020;
  *((void *)v35 + 1) = v10;
  *((void *)v35 + 66) = (char *)v35 + 16;
  *((void *)v35 + 67) = 512;
  *((void *)v35 + 68) = 0;
  *((void *)v35 + 70) = 0;
  *((void *)v35 + 69) = 0;
  IPC::Encoder::encodeHeader(v35);
  unint64_t v64 = v35;
  unint64_t v36 = (_DWORD *)IPC::Encoder::grow(v35, 4uLL, 4);
  if (v37 <= 3)
  {
LABEL_75:
    __break(0xC471u);
    JUMPOUT(0x199043E10);
  }
  *unint64_t v36 = a2;
  IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int,int>,void>::encode<IPC::Encoder,0ul,1ul,2ul>(v35, &v57);
  unint64_t v38 = (_DWORD *)IPC::Encoder::grow(v35, 4uLL, 4);
  if (v39 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199043E30);
  }
  *unint64_t v38 = a4;
  int v41 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v64, 1, 0);
  unint64_t v42 = v64;
  unint64_t v64 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v40);
    WTF::fastFree(v43, v44);
  }
  uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v60);
  if (v41) {
LABEL_50:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v7);
  return result;
}

WebKit::RemoteGraphicsContextGLProxy *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsInstancedANGLE(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsInstancedANGLE((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 24), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysInstancedBaseInstanceANGLE(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t *a3)
{
  uint64_t v3 = *((void *)result + 13);
  if (!v3) {
    return result;
  }
  BOOL v5 = result;
  uint64_t v6 = *a3;
  if (*a3)
  {
    uint64_t v7 = (const void *)a3[4];
    unint64_t v78 = (void *)a3[3];
    unint64_t v79 = (void *)a3[2];
    long long __src = (void *)a3[1];
  }
  else
  {
    unint64_t v78 = 0;
    unint64_t v79 = 0;
    uint64_t v7 = 0;
    long long __src = 0;
  }
  uint64_t v8 = *((void *)result + 10);
  double v9 = *(double *)(v3 + 120);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v10 = v9 + v11;
  }
  if (*(void *)(v3 + 56) != v8)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v82, v10);
    if (!v84) {
      goto LABEL_101;
    }
    unint64_t v42 = v82;
    unint64_t v43 = v83;
    unint64_t v44 = (v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v45 = v44 - v82;
    if (v44 < v82)
    {
      unint64_t v47 = 0;
      unint64_t v46 = v83;
    }
    else
    {
      unint64_t v46 = 0;
      if (v45 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v47 = 0;
      }
      else
      {
        unint64_t v47 = 0;
        if (v45 + 2 <= v83)
        {
          *(_WORD *)(v82 + v45) = 2871;
          unint64_t v46 = v43;
          unint64_t v47 = v45 + 2;
        }
      }
    }
    unint64_t v48 = (void *)((v42 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v48 >= v42 + v47)
    {
      unint64_t v47 = (unint64_t)v48 - v42 + 8;
      if ((unint64_t)v48 - v42 > 0xFFFFFFFFFFFFFFF7 || v47 > v46) {
        goto LABEL_101;
      }
      void *v48 = v8;
    }
    if (!v46) {
      goto LABEL_101;
    }
    unint64_t v50 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = *(void *)(v3 + 64);
    if (v50 + 16 >= v51) {
      unint64_t v50 = 0;
    }
    if (v47 <= 0x10) {
      unint64_t v47 = 16;
    }
    unint64_t v52 = v50 + v47;
    if (v51 <= v52) {
      unint64_t v53 = 0;
    }
    else {
      unint64_t v53 = v52;
    }
    *(void *)(v3 + 80) = v53;
    IPC::StreamClientConnection::wakeUpServerBatched(v3, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v53) == 0x80000000);
    *(void *)(v3 + 56) = v8;
  }
  uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v82, v10);
  if (!v84) {
    goto LABEL_101;
  }
  unint64_t v13 = v82;
  unint64_t v12 = v83;
  unint64_t v14 = (v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v15 = v14 - v82;
  uint64_t v77 = v8;
  if (v14 < v82)
  {
    unint64_t v17 = 0;
    unint64_t v16 = v83;
  }
  else
  {
    unint64_t v16 = 0;
    if (v15 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v17 = 0;
    }
    else
    {
      unint64_t v17 = 0;
      if (v15 + 2 <= v83)
      {
        *(_WORD *)(v82 + v15) = 1018;
        unint64_t v16 = v12;
        unint64_t v17 = v15 + 2;
      }
    }
  }
  unint64_t v18 = (v13 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = v18 - (v13 + v17);
  if (v18 >= v13 + v17)
  {
    unint64_t v20 = v18 - v13;
    unint64_t v21 = v19 + v17 + 4;
    if (v20 > 0xFFFFFFFFFFFFFFFBLL || v21 > v16)
    {
      unint64_t v16 = 0;
    }
    else
    {
      *(_DWORD *)(v13 + v20) = a2;
      unint64_t v17 = v21;
    }
  }
  int64_t v23 = (void *)((v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v76 = a2;
  if ((unint64_t)v23 < v13 + v17)
  {
    unint64_t v24 = v16;
  }
  else
  {
    unint64_t v24 = 0;
    unint64_t v25 = (char *)v23 - v13;
    if ((unint64_t)v23 - v13 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t)(v25 + 8) <= v16)
    {
      *int64_t v23 = v6;
      unint64_t v24 = v16;
      unint64_t v17 = (unint64_t)(v25 + 8);
    }
  }
  unint64_t v26 = 4 * v6;
  if (v6)
  {
    unint64_t v27 = v7;
    unint64_t v28 = (v13 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (v28 < v13 + v17)
    {
      unint64_t v29 = v24;
    }
    else
    {
      unint64_t v29 = 0;
      unint64_t v30 = v28 - v13 + v26;
      if (!__CFADD__(v28 - v13, v26) && v30 <= v24)
      {
        uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)memcpy((void *)((v13 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL), __src, 4 * v6);
        unint64_t v29 = v24;
        unint64_t v17 = v30;
      }
    }
    unint64_t v31 = (v13 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (v31 < v13 + v17)
    {
      unint64_t v32 = v29;
    }
    else
    {
      unint64_t v32 = 0;
      unint64_t v33 = v31 - v13 + v26;
      if (!__CFADD__(v31 - v13, v26) && v33 <= v29)
      {
        uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)memcpy((void *)((v13 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL), v79, 4 * v6);
        unint64_t v32 = v29;
        unint64_t v17 = v33;
      }
    }
    unint64_t v34 = (v13 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (v34 < v13 + v17)
    {
      unint64_t v24 = v32;
    }
    else
    {
      unint64_t v24 = 0;
      unint64_t v35 = v34 - v13 + v26;
      if (!__CFADD__(v34 - v13, v26) && v35 <= v32)
      {
        uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)memcpy((void *)((v13 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL), v78, 4 * v6);
        unint64_t v24 = v32;
        unint64_t v17 = v35;
      }
    }
    unint64_t v36 = (char *)((v13 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v36 < v13 + v17)
    {
      uint64_t v7 = v27;
      if (v24) {
        goto LABEL_41;
      }
      goto LABEL_80;
    }
    unint64_t v17 = (unint64_t)&v36[v26 - v13];
    uint64_t v7 = v27;
    if (__CFADD__(&v36[-v13], v26) || v17 > v24) {
      goto LABEL_80;
    }
    uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)memcpy(v36, v27, 4 * v6);
  }
  if (v24)
  {
LABEL_41:
    uint64_t v37 = *(void *)(v3 + 72);
    unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v39 = *(void *)(v3 + 64);
    if (v38 + 16 >= v39) {
      unint64_t v38 = 0;
    }
    uint64_t v40 = 16;
    if (v17 > 0x10) {
      uint64_t v40 = v17;
    }
    unint64_t v41 = v38 + v40;
    if (v39 <= v41) {
      unint64_t v41 = 0;
    }
    *(void *)(v3 + 80) = v41;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v37 + 16) + 128), v41) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
LABEL_80:
  if (!v84)
  {
    __break(1u);
    goto LABEL_104;
  }
  unint64_t v54 = (v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v55 = v54 >= v82;
  unint64_t v56 = v54 - v82;
  unint64_t v57 = 0;
  if (v55 && v56 <= 0xFFFFFFFFFFFFFFFDLL && v56 + 2 <= v83)
  {
    *(_WORD *)(v82 + v56) = 2870;
    unint64_t v57 = v56 + 2;
  }
  unint64_t v58 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v59 = *(void *)(v3 + 64);
  if (v58 + 16 >= v59) {
    unint64_t v58 = 0;
  }
  if (v57 <= 0x10) {
    unint64_t v57 = 16;
  }
  unint64_t v60 = v58 + v57;
  if (v59 <= v60) {
    unint64_t v60 = 0;
  }
  *(void *)(v3 + 80) = v60;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v60);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v81, (uint64_t **)(v3 + 8));
  unint64_t v61 = v81;
  unint64_t v62 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v62 = 1018;
  *((void *)v62 + 1) = v77;
  *((void *)v62 + 66) = (char *)v62 + 16;
  *((void *)v62 + 67) = 512;
  *((void *)v62 + 68) = 0;
  *((void *)v62 + 70) = 0;
  *((void *)v62 + 69) = 0;
  IPC::Encoder::encodeHeader(v62);
  uint64_t v85 = v62;
  char v63 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v64 <= 3)
  {
LABEL_104:
    __break(0xC471u);
    JUMPOUT(0x1990444C0);
  }
  *char v63 = v76;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v62, v6);
  if (v6)
  {
    unint64_t v65 = (void *)IPC::Encoder::grow(v62, 4uLL, 4 * v6);
    if (v66 < 4 * v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1990444E0);
    }
    memcpy(v65, __src, 4 * v6);
    unint64_t v67 = (void *)IPC::Encoder::grow(v62, 4uLL, 4 * v6);
    if (v68 < v26)
    {
      __break(0xC471u);
      JUMPOUT(0x199044500);
    }
    memcpy(v67, v79, 4 * v6);
    unint64_t v69 = (void *)IPC::Encoder::grow(v62, 4uLL, 4 * v6);
    if (v70 < v26)
    {
      __break(0xC471u);
      JUMPOUT(0x199044520);
    }
    memcpy(v69, v78, 4 * v6);
    IPC::Encoder::encodeSpan<float const,18446744073709551615ul>(v62, v7, v6);
  }
  int v72 = IPC::Connection::sendMessageImpl((uint64_t)v61, (uint64_t *)&v85, 1, 0);
  uint64_t v73 = v85;
  uint64_t v85 = 0;
  if (v73)
  {
    IPC::Encoder::~Encoder(v73, v71);
    WTF::fastFree(v74, v75);
  }
  uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v81);
  if (v72) {
LABEL_101:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
  return result;
}

WebKit::RemoteGraphicsContextGLProxy *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysInstancedBaseInstanceANGLE(uint64_t a1, int a2, uint64_t *a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysInstancedBaseInstanceANGLE((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 24), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsInstancedBaseVertexBaseInstanceANGLE(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t *a3, int a4)
{
  uint64_t v4 = *((void *)result + 13);
  if (!v4) {
    return result;
  }
  uint64_t v7 = result;
  uint64_t v8 = *a3;
  if (*a3)
  {
    unint64_t v86 = (void *)a3[4];
    unint64_t v87 = (void *)a3[5];
    unint64_t v88 = (void *)a3[3];
    unint64_t v89 = (void *)a3[2];
    long long __src = (void *)a3[1];
  }
  else
  {
    unint64_t v88 = 0;
    unint64_t v89 = 0;
    unint64_t v86 = 0;
    unint64_t v87 = 0;
    long long __src = 0;
  }
  uint64_t v9 = *((void *)result + 10);
  double v10 = *(double *)(v4 + 120);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v11 = v10 + v12;
  }
  if (*(void *)(v4 + 56) != v9)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v92, v11);
    if (!v94) {
      goto LABEL_82;
    }
    unint64_t v73 = v92;
    unint64_t v74 = v93;
    unint64_t v75 = (v92 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v76 = v75 - v92;
    if (v75 < v92)
    {
      unint64_t v78 = 0;
      unint64_t v77 = v93;
    }
    else
    {
      unint64_t v77 = 0;
      if (v76 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v78 = 0;
      }
      else
      {
        unint64_t v78 = 0;
        if (v76 + 2 <= v93)
        {
          *(_WORD *)(v92 + v76) = 2871;
          unint64_t v77 = v74;
          unint64_t v78 = v76 + 2;
        }
      }
    }
    unint64_t v79 = (void *)((v73 + v78 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v79 >= v73 + v78)
    {
      unint64_t v78 = (unint64_t)v79 - v73 + 8;
      if ((unint64_t)v79 - v73 > 0xFFFFFFFFFFFFFFF7 || v78 > v77) {
        goto LABEL_82;
      }
      *unint64_t v79 = v9;
    }
    if (!v77) {
      goto LABEL_82;
    }
    unint64_t v81 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v82 = *(void *)(v4 + 64);
    if (v81 + 16 >= v82) {
      unint64_t v81 = 0;
    }
    if (v78 <= 0x10) {
      unint64_t v78 = 16;
    }
    unint64_t v83 = v81 + v78;
    if (v82 <= v83) {
      unint64_t v84 = 0;
    }
    else {
      unint64_t v84 = v83;
    }
    *(void *)(v4 + 80) = v84;
    IPC::StreamClientConnection::wakeUpServerBatched(v4, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v84) == 0x80000000);
    *(void *)(v4 + 56) = v9;
  }
  uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v92, v11);
  if (!v94) {
    goto LABEL_82;
  }
  unint64_t v14 = v92;
  unint64_t v13 = v93;
  unint64_t v15 = (v92 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v16 = v15 - v92;
  if (v15 < v92)
  {
    unint64_t v18 = 0;
    unint64_t v17 = v93;
  }
  else
  {
    unint64_t v17 = 0;
    if (v16 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v18 = 0;
    }
    else
    {
      unint64_t v18 = 0;
      if (v16 + 2 <= v93)
      {
        *(_WORD *)(v92 + v16) = 1021;
        unint64_t v17 = v13;
        unint64_t v18 = v16 + 2;
      }
    }
  }
  unint64_t v19 = (v14 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v20 = v19 - (v14 + v18);
  if (v19 >= v14 + v18)
  {
    unint64_t v21 = v19 - v14;
    unint64_t v22 = v20 + v18 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v17)
    {
      unint64_t v17 = 0;
    }
    else
    {
      *(_DWORD *)(v14 + v21) = a2;
      unint64_t v18 = v22;
    }
  }
  unint64_t v24 = (void *)((v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v85 = a2;
  if ((unint64_t)v24 < v14 + v18)
  {
    unint64_t v25 = v17;
  }
  else
  {
    unint64_t v25 = 0;
    unint64_t v26 = (char *)v24 - v14;
    if ((unint64_t)v24 - v14 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t)(v26 + 8) <= v17)
    {
      *unint64_t v24 = v8;
      unint64_t v25 = v17;
      unint64_t v18 = (unint64_t)(v26 + 8);
    }
  }
  unint64_t v27 = 4 * v8;
  if (v8)
  {
    unint64_t v28 = (v14 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (v28 < v14 + v18)
    {
      unint64_t v29 = v25;
    }
    else
    {
      unint64_t v29 = 0;
      unint64_t v30 = v28 - v14 + v27;
      if (!__CFADD__(v28 - v14, v27) && v30 <= v25)
      {
        uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)memcpy((void *)((v14 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL), __src, 4 * v8);
        unint64_t v29 = v25;
        unint64_t v18 = v30;
      }
    }
    unint64_t v31 = (v14 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (v31 < v14 + v18)
    {
      unint64_t v32 = v29;
    }
    else
    {
      unint64_t v32 = 0;
      unint64_t v33 = v31 - v14 + v27;
      if (!__CFADD__(v31 - v14, v27) && v33 <= v29)
      {
        uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)memcpy((void *)((v14 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL), v89, 4 * v8);
        unint64_t v32 = v29;
        unint64_t v18 = v33;
      }
    }
    unint64_t v34 = (v14 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (v34 < v14 + v18)
    {
      unint64_t v35 = v32;
    }
    else
    {
      unint64_t v35 = 0;
      unint64_t v36 = v34 - v14 + v27;
      if (!__CFADD__(v34 - v14, v27) && v36 <= v32)
      {
        uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)memcpy((void *)((v14 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL), v88, 4 * v8);
        unint64_t v35 = v32;
        unint64_t v18 = v36;
      }
    }
    unint64_t v37 = (v14 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (v37 < v14 + v18)
    {
      unint64_t v38 = v35;
    }
    else
    {
      unint64_t v38 = 0;
      unint64_t v39 = v37 - v14 + v27;
      if (!__CFADD__(v37 - v14, v27) && v39 <= v35)
      {
        uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)memcpy((void *)((v14 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL), v86, 4 * v8);
        unint64_t v38 = v35;
        unint64_t v18 = v39;
      }
    }
    unint64_t v40 = (v14 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (v40 < v14 + v18)
    {
      unint64_t v25 = v38;
    }
    else
    {
      unint64_t v25 = 0;
      unint64_t v41 = v40 - v14 + v27;
      if (!__CFADD__(v40 - v14, v27) && v41 <= v38)
      {
        uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)memcpy((void *)((v14 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL), v87, 4 * v8);
        unint64_t v25 = v38;
        unint64_t v18 = v41;
      }
    }
  }
  unint64_t v42 = (_DWORD *)((v14 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v42 >= v14 + v18)
  {
    unint64_t v43 = (char *)v42 - v14;
    if ((unint64_t)v42 - v14 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_60;
    }
    unint64_t v18 = (unint64_t)(v43 + 4);
    if ((unint64_t)(v43 + 4) > v25) {
      goto LABEL_60;
    }
    _DWORD *v42 = a4;
  }
  if (v25)
  {
    uint64_t v44 = *(void *)(v4 + 72);
    unint64_t v45 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = *(void *)(v4 + 64);
    if (v45 + 16 >= v46) {
      unint64_t v45 = 0;
    }
    if (v18 <= 0x10) {
      unint64_t v18 = 16;
    }
    unint64_t v47 = v45 + v18;
    if (v46 <= v47) {
      unint64_t v47 = 0;
    }
    *(void *)(v4 + 80) = v47;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v44 + 16) + 128), v47) == 0x80000000
      || *(_DWORD *)(v4 + 116))
    {
      if (*(unsigned char *)(v4 + 104)) {
        uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
      }
      *(_DWORD *)(v4 + 116) = 0;
    }
    return result;
  }
LABEL_60:
  if (!v94)
  {
    __break(1u);
    goto LABEL_106;
  }
  unint64_t v48 = (v92 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v49 = v48 - v92;
  if (v48 < v92)
  {
    unint64_t v50 = 0;
  }
  else
  {
    unint64_t v50 = 0;
    if (v49 <= 0xFFFFFFFFFFFFFFFDLL && v49 + 2 <= v93)
    {
      *(_WORD *)(v92 + v49) = 2870;
      unint64_t v50 = v49 + 2;
    }
  }
  unint64_t v51 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v52 = *(void *)(v4 + 64);
  if (v51 + 16 >= v52) {
    unint64_t v51 = 0;
  }
  if (v50 <= 0x10) {
    unint64_t v50 = 16;
  }
  unint64_t v53 = v51 + v50;
  if (v52 <= v53) {
    unint64_t v53 = 0;
  }
  *(void *)(v4 + 80) = v53;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v53);
  *(_DWORD *)(v4 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v91, (uint64_t **)(v4 + 8));
  unint64_t v54 = v91;
  BOOL v55 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v55 = 1021;
  *((void *)v55 + 1) = v9;
  *((void *)v55 + 66) = (char *)v55 + 16;
  *((void *)v55 + 67) = 512;
  *((void *)v55 + 68) = 0;
  *((void *)v55 + 70) = 0;
  *((void *)v55 + 69) = 0;
  IPC::Encoder::encodeHeader(v55);
  unint64_t v95 = v55;
  unint64_t v56 = (_DWORD *)IPC::Encoder::grow(v55, 4uLL, 4);
  if (v57 <= 3)
  {
LABEL_106:
    __break(0xC471u);
    JUMPOUT(0x199044C24);
  }
  _DWORD *v56 = v85;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v55, v8);
  if (v8)
  {
    unint64_t v58 = (void *)IPC::Encoder::grow(v55, 4uLL, 4 * v8);
    if (v59 < 4 * v8)
    {
      __break(0xC471u);
      JUMPOUT(0x199044C44);
    }
    memcpy(v58, __src, 4 * v8);
    unint64_t v60 = (void *)IPC::Encoder::grow(v55, 4uLL, 4 * v8);
    if (v61 < v27)
    {
      __break(0xC471u);
      JUMPOUT(0x199044C64);
    }
    memcpy(v60, v89, 4 * v8);
    unint64_t v62 = (void *)IPC::Encoder::grow(v55, 4uLL, 4 * v8);
    if (v63 < v27)
    {
      __break(0xC471u);
      JUMPOUT(0x199044C84);
    }
    memcpy(v62, v88, 4 * v8);
    unint64_t v64 = (void *)IPC::Encoder::grow(v55, 4uLL, 4 * v8);
    if (v65 < v27)
    {
      __break(0xC471u);
      JUMPOUT(0x199044CC4);
    }
    memcpy(v64, v86, 4 * v8);
    IPC::Encoder::encodeSpan<float const,18446744073709551615ul>(v55, v87, v8);
  }
  unint64_t v66 = (_DWORD *)IPC::Encoder::grow(v55, 4uLL, 4);
  if (v67 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199044CA4);
  }
  *unint64_t v66 = a4;
  int v69 = IPC::Connection::sendMessageImpl((uint64_t)v54, (uint64_t *)&v95, 1, 0);
  unint64_t v70 = v95;
  unint64_t v95 = 0;
  if (v70)
  {
    IPC::Encoder::~Encoder(v70, v68);
    WTF::fastFree(v71, v72);
  }
  uint64_t result = (WebKit::RemoteGraphicsContextGLProxy *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v91);
  if (v69) {
LABEL_82:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v7);
  return result;
}

WebKit::RemoteGraphicsContextGLProxy *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsInstancedBaseVertexBaseInstanceANGLE(uint64_t a1, int a2, uint64_t *a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsInstancedBaseVertexBaseInstanceANGLE((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 24), a2, a3, a4);
}

void *WebKit::RemoteGraphicsContextGLProxy::wasCreated(void *this, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = this[13];
  if (v4)
  {
    uint64_t v6 = this;
    if (!*((unsigned char *)a4 + 24)) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)this);
    }
    IPC::StreamClientConnectionBuffer::setSemaphores(v4 + 64, a2, a3);
    *((unsigned char *)v6 + 112) = 1;
    if (*((unsigned char *)a4 + 24))
    {
      uint64_t v7 = *a4;
      if (*a4)
      {
        uint64_t v8 = *(void *)(v7 + 8);
        unint64_t v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
      }
      else
      {
        uint64_t v8 = 0;
        unint64_t v9 = 0x100000000;
      }
      uint64_t v32 = v8;
      unint64_t v33 = v9;
      __int16 v34 = 32;
      char v35 = 0;
      unint64_t v28 = (WTF::StringView *)&v32;
      unsigned int v29 = 0;
      BOOL v31 = v9 == 0;
      WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v28);
      int v10 = v33;
      for (unsigned int i = v29; v29 != v10 || !v31; unsigned int i = v29)
      {
        WTF::StringView::substring((const char *)v28, i, v30);
        if ((v17 & 0xFF00000000) != 0) {
          WTF::String::String();
        }
        else {
          WTF::String::String();
        }
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v6 + 15, &v27, v18, (uint64_t)v26);
        unint64_t v20 = v27;
        unint64_t v27 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, v19);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
        WTF::StringView::SplitResult::Iterator::operator++();
      }
      uint64_t v12 = a4[1];
      if (v12)
      {
        uint64_t v13 = *(void *)(v12 + 8);
        unint64_t v14 = *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
      }
      else
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0x100000000;
      }
      uint64_t v32 = v13;
      unint64_t v33 = v14;
      __int16 v34 = 32;
      char v35 = 0;
      unint64_t v28 = (WTF::StringView *)&v32;
      unsigned int v29 = 0;
      BOOL v31 = v14 == 0;
      this = (void *)WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v28);
      int v15 = v33;
      for (unsigned int j = v29; v29 != v15 || !v31; unsigned int j = v29)
      {
        WTF::StringView::substring((const char *)v28, j, v30);
        if ((v21 & 0xFF00000000) != 0) {
          WTF::String::String();
        }
        else {
          WTF::String::String();
        }
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v6 + 16, &v27, v22, (uint64_t)v26);
        unint64_t v24 = v27;
        unint64_t v27 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2) {
            WTF::StringImpl::destroy(v24, v23);
          }
          else {
            *(_DWORD *)v24 -= 2;
          }
        }
        this = (void *)WTF::StringView::SplitResult::Iterator::operator++();
      }
      v6[22] = a4[2];
    }
    else
    {
      unint64_t v25 = (WebKit::RemoteGraphicsContextGLProxy *)std::__throw_bad_optional_access[abi:sn180100]();
      return (void *)WebKit::RemoteGraphicsContextGLProxy::wasLost(v25);
    }
  }
  return this;
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::wasLost(WebKit::RemoteGraphicsContextGLProxy *this)
{
  if (*((void *)this + 13)) {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  }
  return this;
}

void *WebKit::RemoteGraphicsContextGLProxy::addDebugMessage(void *result)
{
  if (result[13])
  {
    uint64_t result = (void *)result[6];
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*result + 24))();
    }
  }
  return result;
}

uint64_t IPC::StreamClientConnection::waitForAndDispatchImmediately<Messages::RemoteGraphicsContextGLProxy::WasCreated,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2, int a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, (uint64_t **)(a1 + 8));
  uint64_t v9 = IPC::Connection::waitForAndDispatchImmediately<Messages::RemoteGraphicsContextGLProxy::WasCreated>((uint64_t)v11, a2, a3, v7);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v11);
  return v9;
}

void WebKit::RemoteGraphicsContextGLProxy::didClose(WebKit::RemoteGraphicsContextGLProxy *this, IPC::Connection *a2)
{
  uint64_t v3 = (uint64_t **)*((void *)this + 13);
  if (v3)
  {
    IPC::StreamClientConnection::invalidate(v3);
    BOOL v5 = (unsigned int *)*((void *)this + 13);
    *((void *)this + 13) = 0;
    if (v5) {
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(v5, v4);
    }
    double v6 = (unsigned int *)*((void *)this + 12);
    *((void *)this + 12) = 0;
    if (v6)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v4);
      }
    }
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::activeTexture(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ActiveTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::activeTexture(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::activeTexture((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::attachShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::AttachShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::attachShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::attachShader((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::bindAttribLocation(WebKit::RemoteGraphicsContextGLProxy *this, unsigned int a2, unsigned int a3, const WTF::String *a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v6[0] = (uint64_t *)__PAIR64__(a3, a2);
    v6[1] = (uint64_t *)a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindAttribLocation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindAttribLocation(WebKit::RemoteGraphicsContextGLProxy *this, unsigned int a2, unsigned int a3, const WTF::String *a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindAttribLocation((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::bindBuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindBuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindBuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::bindFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindFramebuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::bindRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindRenderbuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::bindTexture(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindTexture(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindTexture((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::blendColor(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3, float a4, float a5)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a4;
    uint64_t v7[3] = a5;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendColor,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blendColor(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3, float a4, float a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::blendColor((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::blendEquation(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendEquation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blendEquation(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::blendEquation((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::blendEquationSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendEquationSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blendEquationSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::blendEquationSeparate((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::blendFunc(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendFunc,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blendFunc(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::blendFunc((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::blendFuncSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a4;
    uint64_t v7[3] = a5;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendFuncSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blendFuncSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::blendFuncSeparate((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5);
}

double *WebKit::RemoteGraphicsContextGLProxy::checkFramebufferStatus(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v5 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, *((void *)this + 10), (uint64_t)v6);
    if (v8) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v4 = v7;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v5, v6);
    return (double *)v4;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::checkFramebufferStatus(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::checkFramebufferStatus((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::clear(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Clear,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clear(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::clear((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::clearColor(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3, float a4, float a5)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a4;
    uint64_t v7[3] = a5;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearColor,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clearColor(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3, float a4, float a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::clearColor((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::clearDepth(WebKit::RemoteGraphicsContextGLProxy *this, float a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    float v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearDepth,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clearDepth(WebKit::RemoteGraphicsContextGLProxy *this, float a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::clearDepth((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::clearStencil(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearStencil,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clearStencil(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::clearStencil((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::colorMask(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v7[0] = a2 != 0;
    v7[1] = a3 != 0;
    v7[2] = a4 != 0;
    uint64_t v7[3] = a5 != 0;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ColorMask,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::colorMask(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::colorMask((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::compileShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompileShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::compileShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::compileShader((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::copyTexImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v11[0] = a2;
    v11[1] = a3;
    void v11[2] = a4;
    void v11[3] = a5;
    v11[4] = a6;
    v11[5] = a7;
    v11[6] = a8;
    v11[7] = a9;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CopyTexImage2D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v11, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::copyTexImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  return WebKit::RemoteGraphicsContextGLProxy::copyTexImage2D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::copyTexSubImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v11[0] = a2;
    v11[1] = a3;
    void v11[2] = a4;
    void v11[3] = a5;
    v11[4] = a6;
    v11[5] = a7;
    v11[6] = a8;
    v11[7] = a9;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CopyTexSubImage2D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v11, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::copyTexSubImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  return WebKit::RemoteGraphicsContextGLProxy::copyTexSubImage2D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createBuffer(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (!v2) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 46);
  uint64_t v4 = (v3 + 1);
  *((_DWORD *)this + 46) = v4;
  int v6 = v3 + 1;
  if (IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v2, &v6, *((void *)this + 10)))WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this); {
  return v4;
  }
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createBuffer(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createBuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (!v2) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 46);
  uint64_t v4 = (v3 + 1);
  *((_DWORD *)this + 46) = v4;
  int v6 = v3 + 1;
  if (IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v2, &v6, *((void *)this + 10)))WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this); {
  return v4;
  }
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createFramebuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createProgram(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (!v2) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 46);
  uint64_t v4 = (v3 + 1);
  *((_DWORD *)this + 46) = v4;
  int v6 = v3 + 1;
  if (IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v2, &v6, *((void *)this + 10)))WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this); {
  return v4;
  }
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createProgram(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createProgram((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (!v2) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 46);
  uint64_t v4 = (v3 + 1);
  *((_DWORD *)this + 46) = v4;
  int v6 = v3 + 1;
  if (IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v2, &v6, *((void *)this + 10)))WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this); {
  return v4;
  }
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createRenderbuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t v3 = *((void *)this + 13);
  if (!v3) {
    return 0;
  }
  int v4 = *((_DWORD *)this + 46);
  uint64_t v5 = (v4 + 1);
  *((_DWORD *)this + 46) = v5;
  v7[0] = v4 + 1;
  v7[1] = a2;
  if (IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v3, v7, *((void *)this + 10)))WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this); {
  return v5;
  }
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::createShader((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createTexture(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (!v2) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 46);
  uint64_t v4 = (v3 + 1);
  *((_DWORD *)this + 46) = v4;
  int v6 = v3 + 1;
  if (IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v2, &v6, *((void *)this + 10)))WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this); {
  return v4;
  }
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createTexture(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createTexture((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::cullFace(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CullFace,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::cullFace(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::cullFace((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::deleteBuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteBuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteBuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::deleteFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteFramebuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::deleteProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteProgram((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::deleteRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteRenderbuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::deleteShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteShader((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::deleteTexture(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteTexture(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteTexture((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::depthFunc(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DepthFunc,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::depthFunc(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::depthFunc((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::depthMask(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    BOOL v4 = a2 != 0;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DepthMask,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, (char *)&v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::depthMask(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::depthMask((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::depthRange(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    *(float *)uint64_t v5 = a2;
    *(float *)&v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DepthRange,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, (uint64_t)v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::depthRange(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::depthRange((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::detachShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DetachShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::detachShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::detachShader((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::disable(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Disable,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::disable(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::disable((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::disableVertexAttribArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DisableVertexAttribArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::disableVertexAttribArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::disableVertexAttribArray((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::drawArrays(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    v6[2] = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawArrays,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawArrays(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawArrays((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::drawElements(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v7[0] = a2;
    v7[1] = a3;
    int v7[2] = a4;
    uint64_t v8 = a5;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawElements,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawElements(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawElements((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::enable(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Enable,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::enable(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::enable((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::enableVertexAttribArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EnableVertexAttribArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::enableVertexAttribArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::enableVertexAttribArray((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::finish(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    char v3 = 0;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Finish,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, (uint64_t)&v3, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::finish(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::finish((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::flush(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    char v3 = 0;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Flush,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, (uint64_t)&v3, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::flush(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::flush((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::framebufferRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v7[0] = a2;
    v7[1] = a3;
    int v7[2] = a4;
    uint64_t v7[3] = a5;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::FramebufferRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::framebufferRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::framebufferRenderbuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::framebufferTexture2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v8[0] = a2;
    v8[1] = a3;
    v8[2] = a4;
    v8[3] = a5;
    void v8[4] = a6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::FramebufferTexture2D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::framebufferTexture2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::framebufferTexture2D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::frontFace(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::FrontFace,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::frontFace(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::frontFace((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::generateMipmap(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::GenerateMipmap,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::generateMipmap(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::generateMipmap((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

BOOL WebKit::RemoteGraphicsContextGLProxy::getActiveAttrib(uint64_t *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5 = (double *)a1[13];
  if (!v5) {
    return 0;
  }
  v12[0] = a2;
  v12[1] = a3;
  IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetActiveAttrib,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v5, v12, a1[10], (uint64_t)v13);
  if (v16) {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
  }
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  int v10 = *(WTF::StringImpl **)a4;
  *(void *)a4 = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  *(void *)(a4 + 8) = v15;
  BOOL v8 = v13[8] != 0;
  if (v16 != -1) {
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v16])(v12, v13);
  }
  return v8;
}

BOOL non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getActiveAttrib(uint64_t a1, int a2, int a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::getActiveAttrib((uint64_t *)(a1 - 24), a2, a3, a4);
}

BOOL WebKit::RemoteGraphicsContextGLProxy::getActiveUniform(uint64_t *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5 = (double *)a1[13];
  if (!v5) {
    return 0;
  }
  v12[0] = a2;
  v12[1] = a3;
  IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetActiveUniform,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v5, v12, a1[10], (uint64_t)v13);
  if (v16) {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
  }
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  int v10 = *(WTF::StringImpl **)a4;
  *(void *)a4 = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  *(void *)(a4 + 8) = v15;
  BOOL v8 = v13[8] != 0;
  if (v16 != -1) {
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v16])(v12, v13);
  }
  return v8;
}

BOOL non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getActiveUniform(uint64_t a1, int a2, int a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::getActiveUniform((uint64_t *)(a1 - 24), a2, a3, a4);
}

double *WebKit::RemoteGraphicsContextGLProxy::getAttribLocation(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v6 = a2;
    unsigned int v7 = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetAttribLocation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, (uint64_t)&v6, *((void *)this + 10), (uint64_t)v8);
    if (v10) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v9;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v6, v8);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getAttribLocation(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getAttribLocation((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::getBufferParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetBufferParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10), (uint64_t)v7);
    if (v9) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v8;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(v6, v7);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getBufferParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getBufferParameteri((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::getString@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v7 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetString,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v7, *((void *)this + 10), (uint64_t)v8);
    if (v10) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    int v6 = v9;
    if (v9) {
      *v9 += 2;
    }
    *a3 = v6;
    return (double *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetStringEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix(&v7, v8);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getString@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::getString((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getFloatv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, void *a3, uint64_t a4)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  int v4 = (uint64_t *)*((void *)result + 13);
  if (!v4) {
    return result;
  }
  int v7 = result;
  int v56 = a2;
  uint64_t v57 = a4;
  uint64_t v8 = *((void *)result + 10);
  double v9 = *((double *)v4 + 15);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v10 = v9 + v11;
  }
  if (v4[7] != v8)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v4 + 8), &v59, v10);
    if (!v60)
    {
      char v54 = 15;
      goto LABEL_111;
    }
    unint64_t v42 = *((void *)&v59 + 1);
    uint64_t v43 = v59;
    unint64_t v44 = (v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v45 = v44 - v59;
    if (v44 >= (unint64_t)v59)
    {
      unint64_t v46 = v45 + 2;
      if (v45 <= 0xFFFFFFFFFFFFFFFDLL && v46 <= *((void *)&v59 + 1))
      {
        *(_WORD *)(v59 + v45) = 2871;
        goto LABEL_88;
      }
      unint64_t v42 = 0;
    }
    unint64_t v46 = 0;
LABEL_88:
    unint64_t v48 = (void *)((v43 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v48 >= v43 + v46)
    {
      unint64_t v46 = (unint64_t)v48 - v43 + 8;
      if ((unint64_t)v48 - v43 > 0xFFFFFFFFFFFFFFF7 || v46 > v42)
      {
LABEL_110:
        char v54 = 17;
LABEL_111:
        v66[0] = v54;
        unsigned int v67 = 1;
        goto LABEL_78;
      }
      void *v48 = v8;
    }
    if (v42)
    {
      uint64_t v50 = v4[9];
      unint64_t v51 = (v4[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v52 = v4[8];
      if (v51 + 16 >= v52) {
        unint64_t v51 = 0;
      }
      if (v46 <= 0x10) {
        unint64_t v46 = 16;
      }
      unint64_t v53 = v51 + v46;
      if (v52 <= v53) {
        unint64_t v53 = 0;
      }
      v4[10] = v53;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v4, atomic_exchange((atomic_ullong *volatile)(*(void *)(v50 + 16) + 128), v53) == 0x80000000);
      v4[7] = v8;
      goto LABEL_5;
    }
    goto LABEL_110;
  }
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v4 + 8), &v63, v10);
  if (!v65)
  {
    v66[0] = 15;
    unsigned int v67 = 1;
    goto LABEL_77;
  }
  BOOL v55 = a3;
  unint64_t v13 = v63;
  unint64_t v12 = v64;
  uint64_t v14 = (uint64_t **)(v4 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v68, (uint64_t **)v4 + 1);
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v68, v15))
  {
    v66[0] = 11;
    unsigned int v67 = 1;
    LOBYTE(v59) = 0;
    unsigned int v61 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFloatv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFloatv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v59, (uint64_t)v66);
    char v62 = 1;
    if (v67 != -1) {
      (*(&off_1EE9E99F8 + v67))(v72, v66);
    }
    goto LABEL_51;
  }
  *(void *)unint64_t v66 = v13;
  *(void *)&v66[8] = v12;
  *(void *)&v66[16] = 0;
  unint64_t v16 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = v16 - v13;
  if (v16 < v13)
  {
    unint64_t v18 = 0;
  }
  else
  {
    if (v17 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_103;
    }
    unint64_t v18 = v17 + 2;
    if (v17 + 2 > v12) {
      goto LABEL_103;
    }
    *(_WORD *)(v13 + v17) = 3653;
    *(void *)&v66[16] = v17 + 2;
  }
  while (1)
  {
    unint64_t v19 = (void *)((v13 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v19 >= v13 + v18)
    {
      unint64_t v20 = (char *)v19 - v13;
      if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v20 + 8) > v12)
      {
        *(void *)&v66[8] = 0;
      }
      else
      {
        *unint64_t v19 = v15;
        *(void *)&v66[16] = v20 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned long>,0ul,1ul>((uint64_t *)v66, (uint64_t)&v56);
    if (!*(void *)&v66[8])
    {
      v70[0] = 0;
      char v71 = 0;
      goto LABEL_38;
    }
    uint64_t v21 = *(void *)&v66[16];
    unint64_t v22 = (v4[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v23 = v4[8];
    if (v22 + 16 >= v23) {
      unint64_t v22 = 0;
    }
    if (*(void *)&v66[16] <= 0x10uLL) {
      uint64_t v21 = 16;
    }
    unint64_t v24 = v22 + v21;
    if (v23 <= v24) {
      unint64_t v24 = 0;
    }
    v4[10] = v24;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v4[9] + 16) + 128), v24) == 0x80000000
      || *((_DWORD *)v4 + 29))
    {
      if (*((unsigned char *)v4 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
      }
      *((_DWORD *)v4 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)v72, (uint64_t)(v4 + 8), v10);
    if (!v73)
    {
      v70[0] = 16;
      *(_DWORD *)&v70[8] = 1;
LABEL_37:
      char v71 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v69, (uint64_t)v72, v4 + 7);
    if (*((_WORD *)v69 + 25) != 2870)
    {
      *(void *)unint64_t v70 = v69;
      *(_DWORD *)&v70[8] = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v69);
    WTF::fastFree(v25, v26);
    IPC::Connection::waitForSyncReply((uint64_t)v68, v15, 0xE45u, (uint64_t)v72, v10);
    v70[0] = 0;
    *(_DWORD *)&v70[8] = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v70, (uint64_t)v72);
    char v71 = 1;
    if (*(_DWORD *)&v72[8] != -1) {
      ((void (*)(IPC::Decoder **, unsigned char *))off_1EE9E9D68[*(unsigned int *)&v72[8]])(&v69, v72);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID((IPC::Decoder **)v68);
    if (!v71)
    {
      LOBYTE(v59) = 0;
      char v62 = 0;
      goto LABEL_51;
    }
    if (*(_DWORD *)&v70[8] == 1)
    {
      LOBYTE(v59) = v70[0];
      int v29 = 1;
      unsigned int v61 = 1;
      char v62 = 1;
      goto LABEL_50;
    }
    if (*(_DWORD *)&v70[8]) {
      goto LABEL_106;
    }
    IPC::Decoder::decode<std::tuple<std::span<float const,18446744073709551615ul>>>((uint64_t)v66, *(IPC::Decoder **)v70);
    if (!v66[16])
    {
      LOBYTE(v59) = 13;
      unsigned int v61 = 1;
      char v62 = 1;
      goto LABEL_48;
    }
    char v27 = v66[0];
    *(void *)int v72 = *(void *)&v66[1];
    *(void *)&v72[7] = *(void *)&v66[8];
    if (v71) {
      break;
    }
LABEL_102:
    __break(1u);
LABEL_103:
    unint64_t v12 = 0;
    unint64_t v18 = 0;
    *(void *)&v66[8] = 0;
  }
  if (*(_DWORD *)&v70[8]) {
    goto LABEL_106;
  }
  uint64_t v28 = *(void *)v70;
  *(void *)unint64_t v70 = 0;
  *(void *)&v66[9] = *(void *)v72;
  *(void *)&v66[16] = *(void *)&v72[7];
  *(void *)unint64_t v66 = v28;
  v66[8] = v27;
  unsigned int v67 = 0;
  LOBYTE(v59) = 0;
  unsigned int v61 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFloatv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFloatv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v59, (uint64_t)v66);
  char v62 = 1;
  if (v67 != -1) {
    (*(&off_1EE9E99F8 + v67))(&v69, v66);
  }
LABEL_48:
  if (v71)
  {
    int v29 = *(_DWORD *)&v70[8];
    if (*(_DWORD *)&v70[8] != -1) {
LABEL_50:
    }
      ((void (*)(unsigned char *, unsigned char *))off_1EE9E9D68[v29])(v66, v70);
  }
LABEL_51:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v68);
  if (v62)
  {
    v66[0] = 0;
    unsigned int v67 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFloatv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFloatv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v66, (uint64_t)&v59);
    if (v62)
    {
      if (v61 != -1) {
        (*(&off_1EE9E99F8 + v61))(v72, &v59);
      }
    }
    a3 = v55;
    goto LABEL_77;
  }
  if (!v65) {
    goto LABEL_102;
  }
  unint64_t v30 = (v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = v30 - v63;
  if (v30 < v63)
  {
    unint64_t v32 = 0;
  }
  else
  {
    unint64_t v32 = 0;
    if (v31 <= 0xFFFFFFFFFFFFFFFDLL && v31 + 2 <= v64)
    {
      *(_WORD *)(v63 + v31) = 2870;
      unint64_t v32 = v31 + 2;
    }
  }
  unint64_t v33 = (v4[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v4[8];
  if (v33 + 16 >= v34) {
    goto LABEL_107;
  }
  while (1)
  {
    if (v32 <= 0x10) {
      unint64_t v32 = 16;
    }
    unint64_t v35 = v33 + v32;
    if (v34 <= v35) {
      unint64_t v35 = 0;
    }
    v4[10] = v35;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v4[9] + 16) + 128), v35);
    *((_DWORD *)v4 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, v14);
    int v4 = v58;
    int v69 = 0;
    IPC::Connection::createSyncMessageEncoder(3653, v8, (uint64_t *)&v69, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int,unsigned long>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned long>,0ul,1ul>(v68, &v56);
    IPC::Connection::sendSyncMessage((uint64_t)v4, (uint64_t)v69, (uint64_t *)&v68, 0, (uint64_t)v72, v10);
    if (*(_DWORD *)&v72[8])
    {
      a3 = v55;
      if (*(_DWORD *)&v72[8] == 1)
      {
        v66[0] = v72[0];
        int v36 = 1;
        unsigned int v67 = 1;
        goto LABEL_73;
      }
      goto LABEL_106;
    }
    IPC::Decoder::decode<std::tuple<std::span<float const,18446744073709551615ul>>>((uint64_t)&v59, *(IPC::Decoder **)v72);
    a3 = v55;
    if (!v60) {
      break;
    }
    *(void *)unint64_t v70 = *(void *)((char *)&v59 + 1);
    *(void *)&v70[7] = *((void *)&v59 + 1);
    int v36 = *(_DWORD *)&v72[8];
    if (!*(_DWORD *)&v72[8])
    {
      uint64_t v38 = *(void *)v72;
      *(void *)int v72 = 0;
      *(void *)&v66[9] = *(void *)v70;
      *(void *)&v66[16] = *(void *)&v70[7];
      *(void *)unint64_t v66 = v38;
      v66[8] = v59;
      unsigned int v67 = 0;
      goto LABEL_73;
    }
LABEL_106:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_107:
    unint64_t v33 = 0;
  }
  v66[0] = 13;
  unsigned int v67 = 1;
  int v36 = *(_DWORD *)&v72[8];
  if (*(_DWORD *)&v72[8] == -1) {
    goto LABEL_74;
  }
LABEL_73:
  ((void (*)(long long *, unsigned char *))off_1EE9E9D68[v36])(&v59, v72);
LABEL_74:
  unint64_t v39 = v68;
  unint64_t v68 = 0;
  if (v39)
  {
    IPC::Encoder::~Encoder(v39, v37);
    WTF::fastFree(v40, v41);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v58);
LABEL_77:
  if (v67) {
LABEL_78:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v7);
  memcpy(a3, *(const void **)&v66[8], 4 * a4);
  return (WebKit::RemoteGraphicsContextGLProxy *)off_1EE9E99F8(&v59, v66);
}

WebKit::RemoteGraphicsContextGLProxy *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getFloatv(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::getFloatv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 24), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getIntegerv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, void *a3, uint64_t a4)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  int v4 = (uint64_t *)*((void *)result + 13);
  if (!v4) {
    return result;
  }
  int v7 = result;
  int v56 = a2;
  uint64_t v57 = a4;
  uint64_t v8 = *((void *)result + 10);
  double v9 = *((double *)v4 + 15);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v10 = v9 + v11;
  }
  if (v4[7] != v8)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v4 + 8), &v59, v10);
    if (!v60)
    {
      char v54 = 15;
      goto LABEL_111;
    }
    unint64_t v42 = *((void *)&v59 + 1);
    uint64_t v43 = v59;
    unint64_t v44 = (v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v45 = v44 - v59;
    if (v44 >= (unint64_t)v59)
    {
      unint64_t v46 = v45 + 2;
      if (v45 <= 0xFFFFFFFFFFFFFFFDLL && v46 <= *((void *)&v59 + 1))
      {
        *(_WORD *)(v59 + v45) = 2871;
        goto LABEL_88;
      }
      unint64_t v42 = 0;
    }
    unint64_t v46 = 0;
LABEL_88:
    unint64_t v48 = (void *)((v43 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v48 >= v43 + v46)
    {
      unint64_t v46 = (unint64_t)v48 - v43 + 8;
      if ((unint64_t)v48 - v43 > 0xFFFFFFFFFFFFFFF7 || v46 > v42)
      {
LABEL_110:
        char v54 = 17;
LABEL_111:
        v66[0] = v54;
        unsigned int v67 = 1;
        goto LABEL_78;
      }
      void *v48 = v8;
    }
    if (v42)
    {
      uint64_t v50 = v4[9];
      unint64_t v51 = (v4[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v52 = v4[8];
      if (v51 + 16 >= v52) {
        unint64_t v51 = 0;
      }
      if (v46 <= 0x10) {
        unint64_t v46 = 16;
      }
      unint64_t v53 = v51 + v46;
      if (v52 <= v53) {
        unint64_t v53 = 0;
      }
      v4[10] = v53;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v4, atomic_exchange((atomic_ullong *volatile)(*(void *)(v50 + 16) + 128), v53) == 0x80000000);
      v4[7] = v8;
      goto LABEL_5;
    }
    goto LABEL_110;
  }
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v4 + 8), &v63, v10);
  if (!v65)
  {
    v66[0] = 15;
    unsigned int v67 = 1;
    goto LABEL_77;
  }
  BOOL v55 = a3;
  unint64_t v13 = v63;
  unint64_t v12 = v64;
  uint64_t v14 = (uint64_t **)(v4 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v68, (uint64_t **)v4 + 1);
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v68, v15))
  {
    v66[0] = 11;
    unsigned int v67 = 1;
    LOBYTE(v59) = 0;
    unsigned int v61 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegerv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegerv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v59, (uint64_t)v66);
    char v62 = 1;
    if (v67 != -1) {
      (*(&off_1EE9E9A08 + v67))(v72, v66);
    }
    goto LABEL_51;
  }
  *(void *)unint64_t v66 = v13;
  *(void *)&v66[8] = v12;
  *(void *)&v66[16] = 0;
  unint64_t v16 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = v16 - v13;
  if (v16 < v13)
  {
    unint64_t v18 = 0;
  }
  else
  {
    if (v17 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_103;
    }
    unint64_t v18 = v17 + 2;
    if (v17 + 2 > v12) {
      goto LABEL_103;
    }
    *(_WORD *)(v13 + v17) = 3660;
    *(void *)&v66[16] = v17 + 2;
  }
  while (1)
  {
    unint64_t v19 = (void *)((v13 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v19 >= v13 + v18)
    {
      unint64_t v20 = (char *)v19 - v13;
      if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v20 + 8) > v12)
      {
        *(void *)&v66[8] = 0;
      }
      else
      {
        *unint64_t v19 = v15;
        *(void *)&v66[16] = v20 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned long>,0ul,1ul>((uint64_t *)v66, (uint64_t)&v56);
    if (!*(void *)&v66[8])
    {
      v70[0] = 0;
      char v71 = 0;
      goto LABEL_38;
    }
    uint64_t v21 = *(void *)&v66[16];
    unint64_t v22 = (v4[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v23 = v4[8];
    if (v22 + 16 >= v23) {
      unint64_t v22 = 0;
    }
    if (*(void *)&v66[16] <= 0x10uLL) {
      uint64_t v21 = 16;
    }
    unint64_t v24 = v22 + v21;
    if (v23 <= v24) {
      unint64_t v24 = 0;
    }
    v4[10] = v24;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v4[9] + 16) + 128), v24) == 0x80000000
      || *((_DWORD *)v4 + 29))
    {
      if (*((unsigned char *)v4 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
      }
      *((_DWORD *)v4 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)v72, (uint64_t)(v4 + 8), v10);
    if (!v73)
    {
      v70[0] = 16;
      *(_DWORD *)&v70[8] = 1;
LABEL_37:
      char v71 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v69, (uint64_t)v72, v4 + 7);
    if (*((_WORD *)v69 + 25) != 2870)
    {
      *(void *)unint64_t v70 = v69;
      *(_DWORD *)&v70[8] = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v69);
    WTF::fastFree(v25, v26);
    IPC::Connection::waitForSyncReply((uint64_t)v68, v15, 0xE4Cu, (uint64_t)v72, v10);
    v70[0] = 0;
    *(_DWORD *)&v70[8] = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v70, (uint64_t)v72);
    char v71 = 1;
    if (*(_DWORD *)&v72[8] != -1) {
      ((void (*)(IPC::Decoder **, unsigned char *))off_1EE9E9D68[*(unsigned int *)&v72[8]])(&v69, v72);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID((IPC::Decoder **)v68);
    if (!v71)
    {
      LOBYTE(v59) = 0;
      char v62 = 0;
      goto LABEL_51;
    }
    if (*(_DWORD *)&v70[8] == 1)
    {
      LOBYTE(v59) = v70[0];
      int v29 = 1;
      unsigned int v61 = 1;
      char v62 = 1;
      goto LABEL_50;
    }
    if (*(_DWORD *)&v70[8]) {
      goto LABEL_106;
    }
    IPC::Decoder::decode<std::tuple<std::span<int const,18446744073709551615ul>>>((uint64_t)v66, *(uint64_t **)v70);
    if (!v66[16])
    {
      LOBYTE(v59) = 13;
      unsigned int v61 = 1;
      char v62 = 1;
      goto LABEL_48;
    }
    char v27 = v66[0];
    *(void *)int v72 = *(void *)&v66[1];
    *(void *)&v72[7] = *(void *)&v66[8];
    if (v71) {
      break;
    }
LABEL_102:
    __break(1u);
LABEL_103:
    unint64_t v12 = 0;
    unint64_t v18 = 0;
    *(void *)&v66[8] = 0;
  }
  if (*(_DWORD *)&v70[8]) {
    goto LABEL_106;
  }
  uint64_t v28 = *(void *)v70;
  *(void *)unint64_t v70 = 0;
  *(void *)&v66[9] = *(void *)v72;
  *(void *)&v66[16] = *(void *)&v72[7];
  *(void *)unint64_t v66 = v28;
  v66[8] = v27;
  unsigned int v67 = 0;
  LOBYTE(v59) = 0;
  unsigned int v61 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegerv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegerv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v59, (uint64_t)v66);
  char v62 = 1;
  if (v67 != -1) {
    (*(&off_1EE9E9A08 + v67))(&v69, v66);
  }
LABEL_48:
  if (v71)
  {
    int v29 = *(_DWORD *)&v70[8];
    if (*(_DWORD *)&v70[8] != -1) {
LABEL_50:
    }
      ((void (*)(unsigned char *, unsigned char *))off_1EE9E9D68[v29])(v66, v70);
  }
LABEL_51:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v68);
  if (v62)
  {
    v66[0] = 0;
    unsigned int v67 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegerv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegerv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v66, (uint64_t)&v59);
    if (v62)
    {
      if (v61 != -1) {
        (*(&off_1EE9E9A08 + v61))(v72, &v59);
      }
    }
    a3 = v55;
    goto LABEL_77;
  }
  if (!v65) {
    goto LABEL_102;
  }
  unint64_t v30 = (v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = v30 - v63;
  if (v30 < v63)
  {
    unint64_t v32 = 0;
  }
  else
  {
    unint64_t v32 = 0;
    if (v31 <= 0xFFFFFFFFFFFFFFFDLL && v31 + 2 <= v64)
    {
      *(_WORD *)(v63 + v31) = 2870;
      unint64_t v32 = v31 + 2;
    }
  }
  unint64_t v33 = (v4[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v4[8];
  if (v33 + 16 >= v34) {
    goto LABEL_107;
  }
  while (1)
  {
    if (v32 <= 0x10) {
      unint64_t v32 = 16;
    }
    unint64_t v35 = v33 + v32;
    if (v34 <= v35) {
      unint64_t v35 = 0;
    }
    v4[10] = v35;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v4[9] + 16) + 128), v35);
    *((_DWORD *)v4 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, v14);
    int v4 = v58;
    int v69 = 0;
    IPC::Connection::createSyncMessageEncoder(3660, v8, (uint64_t *)&v69, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int,unsigned long>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned long>,0ul,1ul>(v68, &v56);
    IPC::Connection::sendSyncMessage((uint64_t)v4, (uint64_t)v69, (uint64_t *)&v68, 0, (uint64_t)v72, v10);
    if (*(_DWORD *)&v72[8])
    {
      a3 = v55;
      if (*(_DWORD *)&v72[8] == 1)
      {
        v66[0] = v72[0];
        int v36 = 1;
        unsigned int v67 = 1;
        goto LABEL_73;
      }
      goto LABEL_106;
    }
    IPC::Decoder::decode<std::tuple<std::span<int const,18446744073709551615ul>>>((uint64_t)&v59, *(uint64_t **)v72);
    a3 = v55;
    if (!v60) {
      break;
    }
    *(void *)unint64_t v70 = *(void *)((char *)&v59 + 1);
    *(void *)&v70[7] = *((void *)&v59 + 1);
    int v36 = *(_DWORD *)&v72[8];
    if (!*(_DWORD *)&v72[8])
    {
      uint64_t v38 = *(void *)v72;
      *(void *)int v72 = 0;
      *(void *)&v66[9] = *(void *)v70;
      *(void *)&v66[16] = *(void *)&v70[7];
      *(void *)unint64_t v66 = v38;
      v66[8] = v59;
      unsigned int v67 = 0;
      goto LABEL_73;
    }
LABEL_106:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_107:
    unint64_t v33 = 0;
  }
  v66[0] = 13;
  unsigned int v67 = 1;
  int v36 = *(_DWORD *)&v72[8];
  if (*(_DWORD *)&v72[8] == -1) {
    goto LABEL_74;
  }
LABEL_73:
  ((void (*)(long long *, unsigned char *))off_1EE9E9D68[v36])(&v59, v72);
LABEL_74:
  unint64_t v39 = v68;
  unint64_t v68 = 0;
  if (v39)
  {
    IPC::Encoder::~Encoder(v39, v37);
    WTF::fastFree(v40, v41);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v58);
LABEL_77:
  if (v67) {
LABEL_78:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v7);
  memcpy(a3, *(const void **)&v66[8], 4 * a4);
  return (WebKit::RemoteGraphicsContextGLProxy *)off_1EE9E9A08(&v59, v66);
}

WebKit::RemoteGraphicsContextGLProxy *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getIntegerv(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::getIntegerv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 24), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getIntegeri_v(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, _OWORD *a4)
{
  int v4 = (IPC::Decoder *)*((void *)result + 13);
  if (!v4) {
    return result;
  }
  int v6 = result;
  v56[0] = a2;
  v56[1] = a3;
  uint64_t v7 = *((void *)result + 10);
  double v8 = *((double *)v4 + 15);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v4 + 56;
  if (*((void *)v4 + 7) != v7)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, &v57, v9);
    if (!(_BYTE)v59)
    {
      char v55 = 15;
      goto LABEL_113;
    }
    unint64_t v44 = v57;
    unint64_t v43 = v58;
    unint64_t v45 = ((unint64_t)v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v57;
    if (v45 >= (unint64_t)v57)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v58)
      {
        *(_WORD *)((char *)v57 + v46) = 2871;
        goto LABEL_91;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_91:
    unint64_t v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v44 + v47)
    {
      unint64_t v47 = v49 - (char *)v44 + 8;
      if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43)
      {
LABEL_112:
        char v55 = 17;
LABEL_113:
        LOBYTE(v72) = v55;
        LODWORD(v74) = 1;
        goto LABEL_79;
      }
      *(void *)unint64_t v49 = v7;
    }
    if (v43)
    {
      uint64_t v51 = *((void *)v4 + 9);
      unint64_t v52 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = *((void *)v4 + 8);
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      *((void *)v4 + 10) = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v4, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      *((void *)v4 + 7) = v7;
      goto LABEL_5;
    }
    goto LABEL_112;
  }
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 64, &v61, v9);
  if (!v63)
  {
    LOBYTE(v72) = 15;
    LODWORD(v74) = 1;
    goto LABEL_78;
  }
  unint64_t v12 = v61;
  unint64_t v13 = v62;
  uint64_t v14 = (uint64_t **)((char *)v4 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v67, (uint64_t **)v4 + 1);
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v67, v15))
  {
    LOBYTE(v72) = 11;
    uint64_t v11 = 1;
    LODWORD(v74) = 1;
    LOBYTE(v57) = 0;
    int v59 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegeri_v>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegeri_v>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v57, (uint64_t)&v72);
    char v60 = 1;
    if (v74 != -1) {
      ((void (*)(uint64_t *, unint64_t *))off_1EE9E9A18[v74])(&v69, &v72);
    }
    goto LABEL_53;
  }
  unint64_t v72 = v12;
  char v73 = (_OWORD *)v13;
  unint64_t v74 = 0;
  unint64_t v16 = (v12 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = v16 - v12;
  if (v16 < v12)
  {
    unint64_t v18 = 0;
  }
  else
  {
    if (v17 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_106;
    }
    unint64_t v18 = v17 + 2;
    if (v17 + 2 > v13) {
      goto LABEL_106;
    }
    *(_WORD *)(v12 + v17) = 3659;
    unint64_t v74 = v17 + 2;
  }
  while (1)
  {
    unint64_t v19 = (void *)((v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v19 >= v12 + v18)
    {
      unint64_t v20 = (char *)v19 - v12;
      if ((unint64_t)v19 - v12 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v20 + 8) > v13)
      {
        char v73 = 0;
      }
      else
      {
        *unint64_t v19 = v15;
        unint64_t v74 = (unint64_t)(v20 + 8);
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v72, v56);
    if (!v73)
    {
      LOBYTE(v64) = 0;
      char v66 = 0;
      goto LABEL_38;
    }
    uint64_t v21 = v74;
    unint64_t v22 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v23 = *((void *)v4 + 8);
    if (v22 + 16 >= v23) {
      unint64_t v22 = 0;
    }
    if (v74 <= 0x10) {
      uint64_t v21 = 16;
    }
    unint64_t v24 = v22 + v21;
    if (v23 <= v24) {
      unint64_t v24 = 0;
    }
    *((void *)v4 + 10) = v24;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v24) == 0x80000000
      || *((_DWORD *)v4 + 29))
    {
      if (*((unsigned char *)v4 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v4 + 23));
      }
      *((_DWORD *)v4 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v69, (uint64_t)v4 + 64, v9);
    if (!v71)
    {
      LOBYTE(v64) = 16;
      int v65 = 1;
LABEL_37:
      char v66 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v68, (uint64_t)&v69, (uint64_t *)v11);
    if (*((_WORD *)v68 + 25) != 2870)
    {
      unint64_t v64 = v68;
      int v65 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v68);
    WTF::fastFree(v25, v26);
    IPC::Connection::waitForSyncReply((uint64_t)v67, v15, 0xE4Bu, (uint64_t)&v69, v9);
    LOBYTE(v64) = 0;
    int v65 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v64, (uint64_t)&v69);
    char v66 = 1;
    if (v70 != -1) {
      ((void (*)(IPC::Decoder **, uint64_t *))off_1EE9E9D68[v70])(&v68, &v69);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v67);
    if (!v66)
    {
      LOBYTE(v57) = 0;
      char v60 = 0;
      goto LABEL_50;
    }
    if (v65 == 1)
    {
      char v30 = (char)v64;
LABEL_49:
      LOBYTE(v57) = v30;
      int v59 = 1;
      char v60 = 1;
      goto LABEL_50;
    }
    if (v65) {
      goto LABEL_108;
    }
    unint64_t v27 = IPC::Decoder::decode<std::tuple<std::span<int const,4ul>>>((uint64_t *)v64);
    if (!v28)
    {
      char v30 = 13;
      goto LABEL_49;
    }
    if (v66) {
      break;
    }
LABEL_105:
    __break(1u);
LABEL_106:
    unint64_t v13 = 0;
    unint64_t v18 = 0;
    char v73 = 0;
  }
  if (v65) {
    goto LABEL_108;
  }
  int v29 = v64;
  unint64_t v64 = 0;
  unint64_t v72 = (unint64_t)v29;
  char v73 = (_OWORD *)v27;
  LODWORD(v74) = 0;
  LOBYTE(v57) = 0;
  int v59 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegeri_v>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegeri_v>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v57, (uint64_t)&v72);
  char v60 = 1;
  if (v74 != -1) {
    ((void (*)(uint64_t *, unint64_t *))off_1EE9E9A18[v74])(&v69, &v72);
  }
LABEL_50:
  if (v66 && v65 != -1) {
    ((void (*)(unint64_t *, IPC::Encoder **))off_1EE9E9D68[v65])(&v72, &v64);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v67);
  if (v60)
  {
    LOBYTE(v72) = 0;
    LODWORD(v74) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegeri_v>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegeri_v>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v72, (uint64_t)&v57);
    if (v60)
    {
      if (v59 != -1) {
        ((void (*)(uint64_t *, uint64_t **))off_1EE9E9A18[v59])(&v69, &v57);
      }
    }
    goto LABEL_78;
  }
  if (!v63) {
    goto LABEL_105;
  }
  unint64_t v31 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v61;
  if (v31 < v61)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v62)
    {
      *(_WORD *)(v61 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = *((void *)v4 + 8);
  if (v34 + 16 >= v35) {
    goto LABEL_109;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    *((void *)v4 + 10) = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v36);
    *((_DWORD *)v4 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v68, v14);
    int v4 = v68;
    uint64_t v69 = 0;
    IPC::Connection::createSyncMessageEncoder(3659, v7, &v69, &v64);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v64, v56);
    IPC::Connection::sendSyncMessage((uint64_t)v4, v69, (uint64_t *)&v64, 0, (uint64_t)&v57, v9);
    uint64_t v7 = v58;
    if (v58)
    {
      if (v58 == 1)
      {
        LOBYTE(v72) = (_BYTE)v57;
        goto LABEL_73;
      }
      goto LABEL_108;
    }
    unint64_t v37 = IPC::Decoder::decode<std::tuple<std::span<int const,4ul>>>(v57);
    if (!(_BYTE)v38) {
      break;
    }
    if (!v58)
    {
      unint64_t v39 = v57;
      uint64_t v57 = 0;
      unint64_t v72 = (unint64_t)v39;
      char v73 = (_OWORD *)v37;
LABEL_73:
      LODWORD(v74) = v7;
LABEL_74:
      ((void (*)(IPC::Decoder ***, uint64_t **))off_1EE9E9D68[v7])(&v67, &v57);
      goto LABEL_75;
    }
LABEL_108:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
    unint64_t v34 = 0;
  }
  LOBYTE(v72) = 13;
  LODWORD(v74) = 1;
  LODWORD(v7) = v58;
  if (v58 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v40 = v64;
  unint64_t v64 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v68);
LABEL_78:
  if (v74) {
LABEL_79:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
  *a4 = *v73;
  return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(uint64_t **, unint64_t *))off_1EE9E9A18[0])(&v57, &v72);
}

WebKit::RemoteGraphicsContextGLProxy *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getIntegeri_v(uint64_t a1, int a2, int a3, _OWORD *a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::getIntegeri_v((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 24), a2, a3, a4);
}

double *WebKit::RemoteGraphicsContextGLProxy::getInteger64(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v5 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetInteger64,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, *((void *)this + 10), (uint64_t)v6);
    if (v8) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v4 = v7;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetInteger64EE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v5, v6);
    return (double *)v4;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getInteger64(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::getInteger64((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

double *WebKit::RemoteGraphicsContextGLProxy::getInteger64i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetInteger64i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10), (uint64_t)v7);
    if (v9) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v8;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetInteger64iEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(v6, v7);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getInteger64i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getInteger64i((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::getProgrami(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetProgrami,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10), (uint64_t)v7);
    if (v9) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v8;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetProgramiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(v6, v7);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getProgrami(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getProgrami((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::getBooleanv(uint64_t *a1, int a2, void *a3, size_t a4)
{
  uint64_t result = (double *)a1[13];
  if (result)
  {
    int v8 = a2;
    size_t v9 = a4;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetBooleanv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v8, a1[10], (uint64_t)v10);
    if (v12) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
    memcpy(a3, __src, a4);
    return (double *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetBooleanvEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix(&v8, v10);
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getBooleanv(uint64_t a1, int a2, void *a3, size_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::getBooleanv((uint64_t *)(a1 - 24), a2, a3, a4);
}

double *WebKit::RemoteGraphicsContextGLProxy::getFramebufferAttachmentParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    v7[0] = a2;
    v7[1] = a3;
    int v7[2] = a4;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, *((void *)this + 10), (uint64_t)v8);
    if (v10) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v6 = v9;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(v7, v8);
    return (double *)v6;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getFramebufferAttachmentParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::getFramebufferAttachmentParameteri((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

double *WebKit::RemoteGraphicsContextGLProxy::getProgramInfoLog@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v7 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetProgramInfoLog,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v7, *((void *)this + 10), (uint64_t)v8);
    if (v10) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v6 = v9;
    if (v9) {
      *v9 += 2;
    }
    *a3 = v6;
    return (double *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix(&v7, v8);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getProgramInfoLog@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::getProgramInfoLog((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::getRenderbufferParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10), (uint64_t)v7);
    if (v9) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v8;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(v6, v7);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getRenderbufferParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getRenderbufferParameteri((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::getShaderi(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetShaderi,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10), (uint64_t)v7);
    if (v9) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v8;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10GetShaderiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(v6, v7);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getShaderi(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getShaderi((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::getShaderInfoLog@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v7 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetShaderInfoLog,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v7, *((void *)this + 10), (uint64_t)v8);
    if (v10) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v6 = v9;
    if (v9) {
      *v9 += 2;
    }
    *a3 = v6;
    return (double *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix(&v7, v8);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getShaderInfoLog@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::getShaderInfoLog((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getShaderPrecisionFormat(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, void *a4, _DWORD *a5)
{
  uint64_t v5 = (uint64_t *)*((void *)result + 13);
  if (!v5) {
    return result;
  }
  unsigned int v8 = result;
  v56[0] = a2;
  v56[1] = a3;
  uint64_t v9 = *((void *)result + 10);
  double v10 = *((double *)v5 + 15);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v11 = v10 + v12;
  }
  if (v5[7] != v9)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 8), &v57, v11);
    if (!v58)
    {
      char v54 = 15;
      goto LABEL_113;
    }
    unint64_t v42 = *((void *)&v57 + 1);
    uint64_t v43 = v57;
    unint64_t v44 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v45 = v44 - v57;
    if (v44 >= (unint64_t)v57)
    {
      unint64_t v46 = v45 + 2;
      if (v45 <= 0xFFFFFFFFFFFFFFFDLL && v46 <= *((void *)&v57 + 1))
      {
        *(_WORD *)(v57 + v45) = 2871;
        goto LABEL_90;
      }
      unint64_t v42 = 0;
    }
    unint64_t v46 = 0;
LABEL_90:
    unint64_t v48 = (void *)((v43 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v48 >= v43 + v46)
    {
      unint64_t v46 = (unint64_t)v48 - v43 + 8;
      if ((unint64_t)v48 - v43 > 0xFFFFFFFFFFFFFFF7 || v46 > v42)
      {
LABEL_112:
        char v54 = 17;
LABEL_113:
        LOBYTE(v67) = v54;
        unsigned int v69 = 1;
        goto LABEL_78;
      }
      void *v48 = v9;
    }
    if (v42)
    {
      uint64_t v50 = v5[9];
      unint64_t v51 = (v5[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v52 = v5[8];
      if (v51 + 16 >= v52) {
        unint64_t v51 = 0;
      }
      if (v46 <= 0x10) {
        unint64_t v46 = 16;
      }
      unint64_t v53 = v51 + v46;
      if (v52 <= v53) {
        unint64_t v53 = 0;
      }
      v5[10] = v53;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v5, atomic_exchange((atomic_ullong *volatile)(*(void *)(v50 + 16) + 128), v53) == 0x80000000);
      v5[7] = v9;
      goto LABEL_5;
    }
    goto LABEL_112;
  }
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 8), &v61, v11);
  if (!v63)
  {
    LOBYTE(v67) = 15;
    unsigned int v69 = 1;
    goto LABEL_77;
  }
  char v55 = a4;
  unint64_t v14 = v61;
  unint64_t v13 = v62;
  uint64_t v15 = (uint64_t **)(v5 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v70, (uint64_t **)v5 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v70, v16))
  {
    LOBYTE(v67) = 11;
    unsigned int v69 = 1;
    LOBYTE(v57) = 0;
    unsigned int v59 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderPrecisionFormat>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderPrecisionFormat>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v57, (uint64_t)&v67);
    char v60 = 1;
    if (v69 != -1) {
      (*(&off_1EE9E9AB8 + v69))(&v71, &v67);
    }
    goto LABEL_51;
  }
  unint64_t v67 = v14;
  long long v68 = v13;
  unint64_t v17 = (v14 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v14;
  if (v17 < v14)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v13) {
      goto LABEL_105;
    }
    *(_WORD *)(v14 + v18) = 3673;
    *((void *)&v68 + 1) = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v14 + v19)
    {
      uint64_t v21 = (char *)v20 - v14;
      if ((unint64_t)v20 - v14 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v21 + 8) > v13)
      {
        *(void *)&long long v68 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        *((void *)&v68 + 1) = v21 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v67, v56);
    if (!(void)v68)
    {
      LOBYTE(v64) = 0;
      char v66 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = *((void *)&v68 + 1);
    unint64_t v23 = (v5[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v5[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (*((void *)&v68 + 1) <= 0x10uLL) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v5[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v5[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v5 + 29))
    {
      if (*((unsigned char *)v5 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
      }
      *((_DWORD *)v5 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v71, (uint64_t)(v5 + 8), v11);
    if (!v72)
    {
      LOBYTE(v64) = 16;
      int v65 = 1;
LABEL_37:
      char v66 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)v73, (uint64_t)&v71, v5 + 7);
    if (*((_WORD *)v73[0] + 25) != 2870)
    {
      unint64_t v64 = (uint64_t *)v73[0];
      int v65 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v73[0]);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v70, v16, 0xE59u, (uint64_t)&v71, v11);
    LOBYTE(v64) = 0;
    int v65 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v64, (uint64_t)&v71);
    char v66 = 1;
    if (DWORD2(v71) != -1) {
      ((void (*)(IPC::Encoder **, long long *))off_1EE9E9D68[DWORD2(v71)])(v73, &v71);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v70);
    if (!v66)
    {
      LOBYTE(v57) = 0;
      char v60 = 0;
      goto LABEL_51;
    }
    if (v65 == 1)
    {
      LOBYTE(v57) = (_BYTE)v64;
      int v29 = 1;
      unsigned int v59 = 1;
      char v60 = 1;
      goto LABEL_50;
    }
    if (v65) {
      goto LABEL_108;
    }
    LOBYTE(v71) = 0;
    char v72 = 0;
    IPC::Decoder::operator>><std::tuple<std::span<int const,2ul>,int>>(v64, (uint64_t)&v71);
    if (!v72)
    {
      LOBYTE(v57) = 13;
      unsigned int v59 = 1;
      char v60 = 1;
      goto LABEL_48;
    }
    if (v66) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v13 = 0;
    unint64_t v19 = 0;
    *(void *)&long long v68 = 0;
  }
  if (v65) {
    goto LABEL_108;
  }
  char v28 = v64;
  unint64_t v64 = 0;
  long long v68 = v71;
  unint64_t v67 = (unint64_t)v28;
  unsigned int v69 = 0;
  LOBYTE(v57) = 0;
  unsigned int v59 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderPrecisionFormat>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderPrecisionFormat>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v57, (uint64_t)&v67);
  char v60 = 1;
  if (v69 != -1) {
    (*(&off_1EE9E9AB8 + v69))(v73, &v67);
  }
LABEL_48:
  if (v66)
  {
    int v29 = v65;
    if (v65 != -1) {
LABEL_50:
    }
      ((void (*)(unint64_t *, uint64_t **))off_1EE9E9D68[v29])(&v67, &v64);
  }
LABEL_51:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v70);
  if (v60)
  {
    LOBYTE(v67) = 0;
    unsigned int v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderPrecisionFormat>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderPrecisionFormat>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v67, (uint64_t)&v57);
    if (v60 && v59 != -1) {
      (*(&off_1EE9E9AB8 + v59))(&v71, &v57);
    }
    a4 = v55;
    goto LABEL_77;
  }
  if (!v63) {
    goto LABEL_104;
  }
  unint64_t v30 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = v30 - v61;
  if (v30 < v61)
  {
    unint64_t v32 = 0;
  }
  else
  {
    unint64_t v32 = 0;
    if (v31 <= 0xFFFFFFFFFFFFFFFDLL && v31 + 2 <= v62)
    {
      *(_WORD *)(v61 + v31) = 2870;
      unint64_t v32 = v31 + 2;
    }
  }
  unint64_t v33 = (v5[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v5[8];
  if (v33 + 16 >= v34) {
    goto LABEL_109;
  }
  while (1)
  {
    if (v32 <= 0x10) {
      unint64_t v32 = 16;
    }
    unint64_t v35 = v33 + v32;
    if (v34 <= v35) {
      unint64_t v35 = 0;
    }
    v5[10] = v35;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v5[9] + 16) + 128), v35);
    *((_DWORD *)v5 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v70, v15);
    uint64_t v5 = (uint64_t *)v70;
    unint64_t v64 = 0;
    IPC::Connection::createSyncMessageEncoder(3673, v9, (uint64_t *)&v64, v73);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v73[0], v56);
    IPC::Connection::sendSyncMessage((uint64_t)v5, (uint64_t)v64, (uint64_t *)v73, 0, (uint64_t)&v71, v11);
    if (DWORD2(v71))
    {
      a4 = v55;
      if (DWORD2(v71) == 1)
      {
        LOBYTE(v67) = v71;
        int v36 = 1;
        unsigned int v69 = 1;
        goto LABEL_73;
      }
      goto LABEL_108;
    }
    LOBYTE(v57) = 0;
    char v58 = 0;
    IPC::Decoder::operator>><std::tuple<std::span<int const,2ul>,int>>((uint64_t *)v71, (uint64_t)&v57);
    a4 = v55;
    if (!v58) {
      break;
    }
    int v36 = DWORD2(v71);
    if (!DWORD2(v71))
    {
      uint64_t v38 = v71;
      *(void *)&long long v71 = 0;
      long long v68 = v57;
      unint64_t v67 = v38;
      unsigned int v69 = 0;
      goto LABEL_73;
    }
LABEL_108:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
    unint64_t v33 = 0;
  }
  LOBYTE(v67) = 13;
  unsigned int v69 = 1;
  int v36 = DWORD2(v71);
  if (DWORD2(v71) == -1) {
    goto LABEL_74;
  }
LABEL_73:
  ((void (*)(long long *, long long *))off_1EE9E9D68[v36])(&v57, &v71);
LABEL_74:
  unint64_t v39 = v73[0];
  v73[0] = 0;
  if (v39)
  {
    IPC::Encoder::~Encoder(v39, v37);
    WTF::fastFree(v40, v41);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v70);
LABEL_77:
  if (v69) {
LABEL_78:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v8);
  *a4 = *(void *)v68;
  if (a5) {
    *a5 = DWORD2(v68);
  }
  return (WebKit::RemoteGraphicsContextGLProxy *)off_1EE9E9AB8(&v57, &v67);
}

WebKit::RemoteGraphicsContextGLProxy *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getShaderPrecisionFormat(uint64_t a1, int a2, int a3, void *a4, _DWORD *a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::getShaderPrecisionFormat((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 24), a2, a3, a4, a5);
}

double *WebKit::RemoteGraphicsContextGLProxy::getShaderSource@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v7 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetShaderSource,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v7, *((void *)this + 10), (uint64_t)v8);
    if (v10) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v6 = v9;
    if (v9) {
      *v9 += 2;
    }
    *a3 = v6;
    return (double *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix(&v7, v8);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getShaderSource@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::getShaderSource((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

float WebKit::RemoteGraphicsContextGLProxy::getTexParameterf(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t v4 = (double *)*((void *)this + 13);
  if (!v4) {
    return 0.0;
  }
  v7[0] = a2;
  v7[1] = a3;
  IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetTexParameterf,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v4, v7, *((void *)this + 10), (uint64_t)v8);
  if (v10) {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  }
  float v5 = v9;
  ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(v7, v8);
  return v5;
}

float non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getTexParameterf(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getTexParameterf((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::getTexParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetTexParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10), (uint64_t)v7);
    if (v9) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v8;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(v6, v7);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getTexParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getTexParameteri((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getUniformfv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, void *a4, uint64_t a5)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t *)*((void *)result + 13);
  if (!v5) {
    return result;
  }
  unsigned int v8 = result;
  v57[0] = a2;
  v57[1] = a3;
  uint64_t v58 = a5;
  uint64_t v9 = *((void *)result + 10);
  double v10 = *((double *)v5 + 15);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v11 = v10 + v12;
  }
  if (v5[7] != v9)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 8), &v60, v11);
    if (!v61)
    {
      char v55 = 15;
      goto LABEL_111;
    }
    unint64_t v43 = *((void *)&v60 + 1);
    uint64_t v44 = v60;
    unint64_t v45 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - v60;
    if (v45 >= (unint64_t)v60)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= *((void *)&v60 + 1))
      {
        *(_WORD *)(v60 + v46) = 2871;
        goto LABEL_88;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_88:
    unint64_t v49 = (void *)((v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v49 >= v44 + v47)
    {
      unint64_t v47 = (unint64_t)v49 - v44 + 8;
      if ((unint64_t)v49 - v44 > 0xFFFFFFFFFFFFFFF7 || v47 > v43)
      {
LABEL_110:
        char v55 = 17;
LABEL_111:
        v67[0] = v55;
        unsigned int v68 = 1;
        goto LABEL_78;
      }
      void *v49 = v9;
    }
    if (v43)
    {
      uint64_t v51 = v5[9];
      unint64_t v52 = (v5[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v5[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v5[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v5, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v5[7] = v9;
      goto LABEL_5;
    }
    goto LABEL_110;
  }
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 8), &v64, v11);
  if (!v66)
  {
    v67[0] = 15;
    unsigned int v68 = 1;
    goto LABEL_77;
  }
  int v56 = a4;
  unint64_t v14 = v64;
  unint64_t v13 = v65;
  uint64_t v15 = (uint64_t **)(v5 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v69, (uint64_t **)v5 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v69, v16))
  {
    v67[0] = 11;
    unsigned int v68 = 1;
    LOBYTE(v60) = 0;
    unsigned int v62 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformfv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformfv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v60, (uint64_t)v67);
    char v63 = 1;
    if (v68 != -1) {
      (*(&off_1EE9E9AF8 + v68))(v73, v67);
    }
    goto LABEL_51;
  }
  *(void *)unint64_t v67 = v14;
  *(void *)&v67[8] = v13;
  *(void *)&v67[16] = 0;
  unint64_t v17 = (v14 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v14;
  if (v17 < v14)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_103;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v13) {
      goto LABEL_103;
    }
    *(_WORD *)(v14 + v18) = 3685;
    *(void *)&v67[16] = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v14 + v19)
    {
      uint64_t v21 = (char *)v20 - v14;
      if ((unint64_t)v20 - v14 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v21 + 8) > v13)
      {
        *(void *)&v67[8] = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        *(void *)&v67[16] = v21 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,int,unsigned long>,0ul,1ul,2ul>((uint64_t *)v67, (uint64_t)v57);
    if (!*(void *)&v67[8])
    {
      v71[0] = 0;
      char v72 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = *(void *)&v67[16];
    unint64_t v23 = (v5[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v5[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (*(void *)&v67[16] <= 0x10uLL) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v5[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v5[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v5 + 29))
    {
      if (*((unsigned char *)v5 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
      }
      *((_DWORD *)v5 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)v73, (uint64_t)(v5 + 8), v11);
    if (!v74)
    {
      v71[0] = 16;
      *(_DWORD *)&v71[8] = 1;
LABEL_37:
      char v72 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v70, (uint64_t)v73, v5 + 7);
    if (*((_WORD *)v70 + 25) != 2870)
    {
      *(void *)long long v71 = v70;
      *(_DWORD *)&v71[8] = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v70);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v69, v16, 0xE65u, (uint64_t)v73, v11);
    v71[0] = 0;
    *(_DWORD *)&v71[8] = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v71, (uint64_t)v73);
    char v72 = 1;
    if (*(_DWORD *)&v73[8] != -1) {
      ((void (*)(IPC::Decoder **, unsigned char *))off_1EE9E9D68[*(unsigned int *)&v73[8]])(&v70, v73);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID((IPC::Decoder **)v69);
    if (!v72)
    {
      LOBYTE(v60) = 0;
      char v63 = 0;
      goto LABEL_51;
    }
    if (*(_DWORD *)&v71[8] == 1)
    {
      LOBYTE(v60) = v71[0];
      int v30 = 1;
      unsigned int v62 = 1;
      char v63 = 1;
      goto LABEL_50;
    }
    if (*(_DWORD *)&v71[8]) {
      goto LABEL_106;
    }
    IPC::Decoder::decode<std::tuple<std::span<float const,18446744073709551615ul>>>((uint64_t)v67, *(IPC::Decoder **)v71);
    if (!v67[16])
    {
      LOBYTE(v60) = 13;
      unsigned int v62 = 1;
      char v63 = 1;
      goto LABEL_48;
    }
    char v28 = v67[0];
    *(void *)char v73 = *(void *)&v67[1];
    *(void *)&v73[7] = *(void *)&v67[8];
    if (v72) {
      break;
    }
LABEL_102:
    __break(1u);
LABEL_103:
    unint64_t v13 = 0;
    unint64_t v19 = 0;
    *(void *)&v67[8] = 0;
  }
  if (*(_DWORD *)&v71[8]) {
    goto LABEL_106;
  }
  uint64_t v29 = *(void *)v71;
  *(void *)long long v71 = 0;
  *(void *)&v67[9] = *(void *)v73;
  *(void *)&v67[16] = *(void *)&v73[7];
  *(void *)unint64_t v67 = v29;
  v67[8] = v28;
  unsigned int v68 = 0;
  LOBYTE(v60) = 0;
  unsigned int v62 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformfv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformfv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v60, (uint64_t)v67);
  char v63 = 1;
  if (v68 != -1) {
    (*(&off_1EE9E9AF8 + v68))(&v70, v67);
  }
LABEL_48:
  if (v72)
  {
    int v30 = *(_DWORD *)&v71[8];
    if (*(_DWORD *)&v71[8] != -1) {
LABEL_50:
    }
      ((void (*)(unsigned char *, unsigned char *))off_1EE9E9D68[v30])(v67, v71);
  }
LABEL_51:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v69);
  if (v63)
  {
    v67[0] = 0;
    unsigned int v68 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformfv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformfv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v67, (uint64_t)&v60);
    if (v63)
    {
      if (v62 != -1) {
        (*(&off_1EE9E9AF8 + v62))(v73, &v60);
      }
    }
    a4 = v56;
    goto LABEL_77;
  }
  if (!v66) {
    goto LABEL_102;
  }
  unint64_t v31 = (v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v64;
  if (v31 < v64)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v65)
    {
      *(_WORD *)(v64 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v5[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v5[8];
  if (v34 + 16 >= v35) {
    goto LABEL_107;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v5[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v5[9] + 16) + 128), v36);
    *((_DWORD *)v5 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v59, v15);
    uint64_t v5 = v59;
    int v70 = 0;
    IPC::Connection::createSyncMessageEncoder(3685, v9, (uint64_t *)&v70, &v69);
    IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned long>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned long>,0ul,1ul,2ul>(v69, v57);
    IPC::Connection::sendSyncMessage((uint64_t)v5, (uint64_t)v70, (uint64_t *)&v69, 0, (uint64_t)v73, v11);
    if (*(_DWORD *)&v73[8])
    {
      a4 = v56;
      if (*(_DWORD *)&v73[8] == 1)
      {
        v67[0] = v73[0];
        int v37 = 1;
        unsigned int v68 = 1;
        goto LABEL_73;
      }
      goto LABEL_106;
    }
    IPC::Decoder::decode<std::tuple<std::span<float const,18446744073709551615ul>>>((uint64_t)&v60, *(IPC::Decoder **)v73);
    a4 = v56;
    if (!v61) {
      break;
    }
    *(void *)long long v71 = *(void *)((char *)&v60 + 1);
    *(void *)&v71[7] = *((void *)&v60 + 1);
    int v37 = *(_DWORD *)&v73[8];
    if (!*(_DWORD *)&v73[8])
    {
      uint64_t v39 = *(void *)v73;
      *(void *)char v73 = 0;
      *(void *)&v67[9] = *(void *)v71;
      *(void *)&v67[16] = *(void *)&v71[7];
      *(void *)unint64_t v67 = v39;
      v67[8] = v60;
      unsigned int v68 = 0;
      goto LABEL_73;
    }
LABEL_106:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_107:
    unint64_t v34 = 0;
  }
  v67[0] = 13;
  unsigned int v68 = 1;
  int v37 = *(_DWORD *)&v73[8];
  if (*(_DWORD *)&v73[8] == -1) {
    goto LABEL_74;
  }
LABEL_73:
  ((void (*)(long long *, unsigned char *))off_1EE9E9D68[v37])(&v60, v73);
LABEL_74:
  unint64_t v40 = v69;
  unsigned int v69 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v59);
LABEL_77:
  if (v68) {
LABEL_78:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v8);
  memcpy(a4, *(const void **)&v67[8], 4 * a5);
  return (WebKit::RemoteGraphicsContextGLProxy *)off_1EE9E9AF8(&v60, v67);
}

WebKit::RemoteGraphicsContextGLProxy *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getUniformfv(uint64_t a1, int a2, int a3, void *a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::getUniformfv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 24), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getUniformiv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, void *a4, uint64_t a5)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t *)*((void *)result + 13);
  if (!v5) {
    return result;
  }
  unsigned int v8 = result;
  v57[0] = a2;
  v57[1] = a3;
  uint64_t v58 = a5;
  uint64_t v9 = *((void *)result + 10);
  double v10 = *((double *)v5 + 15);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v11 = v10 + v12;
  }
  if (v5[7] != v9)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 8), &v60, v11);
    if (!v61)
    {
      char v55 = 15;
      goto LABEL_111;
    }
    unint64_t v43 = *((void *)&v60 + 1);
    uint64_t v44 = v60;
    unint64_t v45 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - v60;
    if (v45 >= (unint64_t)v60)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= *((void *)&v60 + 1))
      {
        *(_WORD *)(v60 + v46) = 2871;
        goto LABEL_88;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_88:
    unint64_t v49 = (void *)((v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v49 >= v44 + v47)
    {
      unint64_t v47 = (unint64_t)v49 - v44 + 8;
      if ((unint64_t)v49 - v44 > 0xFFFFFFFFFFFFFFF7 || v47 > v43)
      {
LABEL_110:
        char v55 = 17;
LABEL_111:
        v67[0] = v55;
        unsigned int v68 = 1;
        goto LABEL_78;
      }
      void *v49 = v9;
    }
    if (v43)
    {
      uint64_t v51 = v5[9];
      unint64_t v52 = (v5[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v5[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v5[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v5, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v5[7] = v9;
      goto LABEL_5;
    }
    goto LABEL_110;
  }
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 8), &v64, v11);
  if (!v66)
  {
    v67[0] = 15;
    unsigned int v68 = 1;
    goto LABEL_77;
  }
  int v56 = a4;
  unint64_t v14 = v64;
  unint64_t v13 = v65;
  uint64_t v15 = (uint64_t **)(v5 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v69, (uint64_t **)v5 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v69, v16))
  {
    v67[0] = 11;
    unsigned int v68 = 1;
    LOBYTE(v60) = 0;
    unsigned int v62 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v60, (uint64_t)v67);
    char v63 = 1;
    if (v68 != -1) {
      (*(&off_1EE9E9B08 + v68))(v73, v67);
    }
    goto LABEL_51;
  }
  *(void *)unint64_t v67 = v14;
  *(void *)&v67[8] = v13;
  *(void *)&v67[16] = 0;
  unint64_t v17 = (v14 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v14;
  if (v17 < v14)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_103;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v13) {
      goto LABEL_103;
    }
    *(_WORD *)(v14 + v18) = 3686;
    *(void *)&v67[16] = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v14 + v19)
    {
      uint64_t v21 = (char *)v20 - v14;
      if ((unint64_t)v20 - v14 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v21 + 8) > v13)
      {
        *(void *)&v67[8] = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        *(void *)&v67[16] = v21 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,int,unsigned long>,0ul,1ul,2ul>((uint64_t *)v67, (uint64_t)v57);
    if (!*(void *)&v67[8])
    {
      v71[0] = 0;
      char v72 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = *(void *)&v67[16];
    unint64_t v23 = (v5[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v5[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (*(void *)&v67[16] <= 0x10uLL) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v5[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v5[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v5 + 29))
    {
      if (*((unsigned char *)v5 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
      }
      *((_DWORD *)v5 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)v73, (uint64_t)(v5 + 8), v11);
    if (!v74)
    {
      v71[0] = 16;
      *(_DWORD *)&v71[8] = 1;
LABEL_37:
      char v72 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v70, (uint64_t)v73, v5 + 7);
    if (*((_WORD *)v70 + 25) != 2870)
    {
      *(void *)long long v71 = v70;
      *(_DWORD *)&v71[8] = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v70);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v69, v16, 0xE66u, (uint64_t)v73, v11);
    v71[0] = 0;
    *(_DWORD *)&v71[8] = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v71, (uint64_t)v73);
    char v72 = 1;
    if (*(_DWORD *)&v73[8] != -1) {
      ((void (*)(IPC::Decoder **, unsigned char *))off_1EE9E9D68[*(unsigned int *)&v73[8]])(&v70, v73);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID((IPC::Decoder **)v69);
    if (!v72)
    {
      LOBYTE(v60) = 0;
      char v63 = 0;
      goto LABEL_51;
    }
    if (*(_DWORD *)&v71[8] == 1)
    {
      LOBYTE(v60) = v71[0];
      int v30 = 1;
      unsigned int v62 = 1;
      char v63 = 1;
      goto LABEL_50;
    }
    if (*(_DWORD *)&v71[8]) {
      goto LABEL_106;
    }
    IPC::Decoder::decode<std::tuple<std::span<int const,18446744073709551615ul>>>((uint64_t)v67, *(uint64_t **)v71);
    if (!v67[16])
    {
      LOBYTE(v60) = 13;
      unsigned int v62 = 1;
      char v63 = 1;
      goto LABEL_48;
    }
    char v28 = v67[0];
    *(void *)char v73 = *(void *)&v67[1];
    *(void *)&v73[7] = *(void *)&v67[8];
    if (v72) {
      break;
    }
LABEL_102:
    __break(1u);
LABEL_103:
    unint64_t v13 = 0;
    unint64_t v19 = 0;
    *(void *)&v67[8] = 0;
  }
  if (*(_DWORD *)&v71[8]) {
    goto LABEL_106;
  }
  uint64_t v29 = *(void *)v71;
  *(void *)long long v71 = 0;
  *(void *)&v67[9] = *(void *)v73;
  *(void *)&v67[16] = *(void *)&v73[7];
  *(void *)unint64_t v67 = v29;
  v67[8] = v28;
  unsigned int v68 = 0;
  LOBYTE(v60) = 0;
  unsigned int v62 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v60, (uint64_t)v67);
  char v63 = 1;
  if (v68 != -1) {
    (*(&off_1EE9E9B08 + v68))(&v70, v67);
  }
LABEL_48:
  if (v72)
  {
    int v30 = *(_DWORD *)&v71[8];
    if (*(_DWORD *)&v71[8] != -1) {
LABEL_50:
    }
      ((void (*)(unsigned char *, unsigned char *))off_1EE9E9D68[v30])(v67, v71);
  }
LABEL_51:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v69);
  if (v63)
  {
    v67[0] = 0;
    unsigned int v68 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v67, (uint64_t)&v60);
    if (v63)
    {
      if (v62 != -1) {
        (*(&off_1EE9E9B08 + v62))(v73, &v60);
      }
    }
    a4 = v56;
    goto LABEL_77;
  }
  if (!v66) {
    goto LABEL_102;
  }
  unint64_t v31 = (v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v64;
  if (v31 < v64)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v65)
    {
      *(_WORD *)(v64 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v5[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v5[8];
  if (v34 + 16 >= v35) {
    goto LABEL_107;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v5[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v5[9] + 16) + 128), v36);
    *((_DWORD *)v5 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v59, v15);
    uint64_t v5 = v59;
    int v70 = 0;
    IPC::Connection::createSyncMessageEncoder(3686, v9, (uint64_t *)&v70, &v69);
    IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned long>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned long>,0ul,1ul,2ul>(v69, v57);
    IPC::Connection::sendSyncMessage((uint64_t)v5, (uint64_t)v70, (uint64_t *)&v69, 0, (uint64_t)v73, v11);
    if (*(_DWORD *)&v73[8])
    {
      a4 = v56;
      if (*(_DWORD *)&v73[8] == 1)
      {
        v67[0] = v73[0];
        int v37 = 1;
        unsigned int v68 = 1;
        goto LABEL_73;
      }
      goto LABEL_106;
    }
    IPC::Decoder::decode<std::tuple<std::span<int const,18446744073709551615ul>>>((uint64_t)&v60, *(uint64_t **)v73);
    a4 = v56;
    if (!v61) {
      break;
    }
    *(void *)long long v71 = *(void *)((char *)&v60 + 1);
    *(void *)&v71[7] = *((void *)&v60 + 1);
    int v37 = *(_DWORD *)&v73[8];
    if (!*(_DWORD *)&v73[8])
    {
      uint64_t v39 = *(void *)v73;
      *(void *)char v73 = 0;
      *(void *)&v67[9] = *(void *)v71;
      *(void *)&v67[16] = *(void *)&v71[7];
      *(void *)unint64_t v67 = v39;
      v67[8] = v60;
      unsigned int v68 = 0;
      goto LABEL_73;
    }
LABEL_106:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_107:
    unint64_t v34 = 0;
  }
  v67[0] = 13;
  unsigned int v68 = 1;
  int v37 = *(_DWORD *)&v73[8];
  if (*(_DWORD *)&v73[8] == -1) {
    goto LABEL_74;
  }
LABEL_73:
  ((void (*)(long long *, unsigned char *))off_1EE9E9D68[v37])(&v60, v73);
LABEL_74:
  unint64_t v40 = v69;
  unsigned int v69 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v59);
LABEL_77:
  if (v68) {
LABEL_78:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v8);
  memcpy(a4, *(const void **)&v67[8], 4 * a5);
  return (WebKit::RemoteGraphicsContextGLProxy *)off_1EE9E9B08(&v60, v67);
}

WebKit::RemoteGraphicsContextGLProxy *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getUniformiv(uint64_t a1, int a2, int a3, void *a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::getUniformiv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 24), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getUniformuiv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, void *a4, uint64_t a5)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t *)*((void *)result + 13);
  if (!v5) {
    return result;
  }
  unsigned int v8 = result;
  v57[0] = a2;
  v57[1] = a3;
  uint64_t v58 = a5;
  uint64_t v9 = *((void *)result + 10);
  double v10 = *((double *)v5 + 15);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v11 = v10 + v12;
  }
  if (v5[7] != v9)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 8), &v60, v11);
    if (!v61)
    {
      char v55 = 15;
      goto LABEL_111;
    }
    unint64_t v43 = *((void *)&v60 + 1);
    uint64_t v44 = v60;
    unint64_t v45 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - v60;
    if (v45 >= (unint64_t)v60)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= *((void *)&v60 + 1))
      {
        *(_WORD *)(v60 + v46) = 2871;
        goto LABEL_88;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_88:
    unint64_t v49 = (void *)((v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v49 >= v44 + v47)
    {
      unint64_t v47 = (unint64_t)v49 - v44 + 8;
      if ((unint64_t)v49 - v44 > 0xFFFFFFFFFFFFFFF7 || v47 > v43)
      {
LABEL_110:
        char v55 = 17;
LABEL_111:
        v67[0] = v55;
        unsigned int v68 = 1;
        goto LABEL_78;
      }
      void *v49 = v9;
    }
    if (v43)
    {
      uint64_t v51 = v5[9];
      unint64_t v52 = (v5[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v5[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v5[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v5, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v5[7] = v9;
      goto LABEL_5;
    }
    goto LABEL_110;
  }
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 8), &v64, v11);
  if (!v66)
  {
    v67[0] = 15;
    unsigned int v68 = 1;
    goto LABEL_77;
  }
  int v56 = a4;
  unint64_t v14 = v64;
  unint64_t v13 = v65;
  uint64_t v15 = (uint64_t **)(v5 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v69, (uint64_t **)v5 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v69, v16))
  {
    v67[0] = 11;
    unsigned int v68 = 1;
    LOBYTE(v60) = 0;
    unsigned int v62 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformuiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformuiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v60, (uint64_t)v67);
    char v63 = 1;
    if (v68 != -1) {
      (*(&off_1EE9E9B18 + v68))(v73, v67);
    }
    goto LABEL_51;
  }
  *(void *)unint64_t v67 = v14;
  *(void *)&v67[8] = v13;
  *(void *)&v67[16] = 0;
  unint64_t v17 = (v14 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v14;
  if (v17 < v14)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_103;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v13) {
      goto LABEL_103;
    }
    *(_WORD *)(v14 + v18) = 3687;
    *(void *)&v67[16] = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v14 + v19)
    {
      uint64_t v21 = (char *)v20 - v14;
      if ((unint64_t)v20 - v14 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v21 + 8) > v13)
      {
        *(void *)&v67[8] = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        *(void *)&v67[16] = v21 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,int,unsigned long>,0ul,1ul,2ul>((uint64_t *)v67, (uint64_t)v57);
    if (!*(void *)&v67[8])
    {
      v71[0] = 0;
      char v72 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = *(void *)&v67[16];
    unint64_t v23 = (v5[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v5[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (*(void *)&v67[16] <= 0x10uLL) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v5[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v5[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v5 + 29))
    {
      if (*((unsigned char *)v5 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
      }
      *((_DWORD *)v5 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)v73, (uint64_t)(v5 + 8), v11);
    if (!v74)
    {
      v71[0] = 16;
      *(_DWORD *)&v71[8] = 1;
LABEL_37:
      char v72 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v70, (uint64_t)v73, v5 + 7);
    if (*((_WORD *)v70 + 25) != 2870)
    {
      *(void *)long long v71 = v70;
      *(_DWORD *)&v71[8] = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v70);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v69, v16, 0xE67u, (uint64_t)v73, v11);
    v71[0] = 0;
    *(_DWORD *)&v71[8] = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v71, (uint64_t)v73);
    char v72 = 1;
    if (*(_DWORD *)&v73[8] != -1) {
      ((void (*)(IPC::Decoder **, unsigned char *))off_1EE9E9D68[*(unsigned int *)&v73[8]])(&v70, v73);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID((IPC::Decoder **)v69);
    if (!v72)
    {
      LOBYTE(v60) = 0;
      char v63 = 0;
      goto LABEL_51;
    }
    if (*(_DWORD *)&v71[8] == 1)
    {
      LOBYTE(v60) = v71[0];
      int v30 = 1;
      unsigned int v62 = 1;
      char v63 = 1;
      goto LABEL_50;
    }
    if (*(_DWORD *)&v71[8]) {
      goto LABEL_106;
    }
    IPC::Decoder::decode<std::tuple<std::span<unsigned int const,18446744073709551615ul>>>(*(IPC::Decoder **)v71, (uint64_t)v67);
    if (!v67[16])
    {
      LOBYTE(v60) = 13;
      unsigned int v62 = 1;
      char v63 = 1;
      goto LABEL_48;
    }
    char v28 = v67[0];
    *(void *)char v73 = *(void *)&v67[1];
    *(void *)&v73[7] = *(void *)&v67[8];
    if (v72) {
      break;
    }
LABEL_102:
    __break(1u);
LABEL_103:
    unint64_t v13 = 0;
    unint64_t v19 = 0;
    *(void *)&v67[8] = 0;
  }
  if (*(_DWORD *)&v71[8]) {
    goto LABEL_106;
  }
  uint64_t v29 = *(void *)v71;
  *(void *)long long v71 = 0;
  *(void *)&v67[9] = *(void *)v73;
  *(void *)&v67[16] = *(void *)&v73[7];
  *(void *)unint64_t v67 = v29;
  v67[8] = v28;
  unsigned int v68 = 0;
  LOBYTE(v60) = 0;
  unsigned int v62 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformuiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformuiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v60, (uint64_t)v67);
  char v63 = 1;
  if (v68 != -1) {
    (*(&off_1EE9E9B18 + v68))(&v70, v67);
  }
LABEL_48:
  if (v72)
  {
    int v30 = *(_DWORD *)&v71[8];
    if (*(_DWORD *)&v71[8] != -1) {
LABEL_50:
    }
      ((void (*)(unsigned char *, unsigned char *))off_1EE9E9D68[v30])(v67, v71);
  }
LABEL_51:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v69);
  if (v63)
  {
    v67[0] = 0;
    unsigned int v68 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformuiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformuiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v67, (uint64_t)&v60);
    if (v63)
    {
      if (v62 != -1) {
        (*(&off_1EE9E9B18 + v62))(v73, &v60);
      }
    }
    a4 = v56;
    goto LABEL_77;
  }
  if (!v66) {
    goto LABEL_102;
  }
  unint64_t v31 = (v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v64;
  if (v31 < v64)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v65)
    {
      *(_WORD *)(v64 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v5[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v5[8];
  if (v34 + 16 >= v35) {
    goto LABEL_107;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v5[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v5[9] + 16) + 128), v36);
    *((_DWORD *)v5 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v59, v15);
    uint64_t v5 = v59;
    int v70 = 0;
    IPC::Connection::createSyncMessageEncoder(3687, v9, (uint64_t *)&v70, &v69);
    IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned long>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned long>,0ul,1ul,2ul>(v69, v57);
    IPC::Connection::sendSyncMessage((uint64_t)v5, (uint64_t)v70, (uint64_t *)&v69, 0, (uint64_t)v73, v11);
    if (*(_DWORD *)&v73[8])
    {
      a4 = v56;
      if (*(_DWORD *)&v73[8] == 1)
      {
        v67[0] = v73[0];
        int v37 = 1;
        unsigned int v68 = 1;
        goto LABEL_73;
      }
      goto LABEL_106;
    }
    IPC::Decoder::decode<std::tuple<std::span<unsigned int const,18446744073709551615ul>>>(*(IPC::Decoder **)v73, (uint64_t)&v60);
    a4 = v56;
    if (!v61) {
      break;
    }
    *(void *)long long v71 = *(void *)((char *)&v60 + 1);
    *(void *)&v71[7] = *((void *)&v60 + 1);
    int v37 = *(_DWORD *)&v73[8];
    if (!*(_DWORD *)&v73[8])
    {
      uint64_t v39 = *(void *)v73;
      *(void *)char v73 = 0;
      *(void *)&v67[9] = *(void *)v71;
      *(void *)&v67[16] = *(void *)&v71[7];
      *(void *)unint64_t v67 = v39;
      v67[8] = v60;
      unsigned int v68 = 0;
      goto LABEL_73;
    }
LABEL_106:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_107:
    unint64_t v34 = 0;
  }
  v67[0] = 13;
  unsigned int v68 = 1;
  int v37 = *(_DWORD *)&v73[8];
  if (*(_DWORD *)&v73[8] == -1) {
    goto LABEL_74;
  }
LABEL_73:
  ((void (*)(long long *, unsigned char *))off_1EE9E9D68[v37])(&v60, v73);
LABEL_74:
  unint64_t v40 = v69;
  unsigned int v69 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v59);
LABEL_77:
  if (v68) {
LABEL_78:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v8);
  memcpy(a4, *(const void **)&v67[8], 4 * a5);
  return (WebKit::RemoteGraphicsContextGLProxy *)off_1EE9E9B18(&v60, v67);
}

WebKit::RemoteGraphicsContextGLProxy *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getUniformuiv(uint64_t a1, int a2, int a3, void *a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::getUniformuiv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 24), a2, a3, a4, a5);
}

double *WebKit::RemoteGraphicsContextGLProxy::getUniformLocation(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v6 = a2;
    int v7 = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetUniformLocation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, (uint64_t)&v6, *((void *)this + 10), (uint64_t)v8);
    if (v10) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v9;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v6, v8);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getUniformLocation(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getUniformLocation((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::getVertexAttribOffset(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10), (uint64_t)v7);
    if (v9) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v8;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(v6, v7);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getVertexAttribOffset(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getVertexAttribOffset((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::hint(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Hint,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::hint(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::hint((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::isBuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v5 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, *((void *)this + 10), (uint64_t)v6);
    if (v7) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v4 = v6[8];
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v5, v6);
    return (double *)v4;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isBuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isBuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

double *WebKit::RemoteGraphicsContextGLProxy::isEnabled(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v5 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsEnabled,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, *((void *)this + 10), (uint64_t)v6);
    if (v7) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v4 = v6[8];
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsEnabledEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v5, v6);
    return (double *)v4;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isEnabled(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isEnabled((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

double *WebKit::RemoteGraphicsContextGLProxy::isFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v5 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, *((void *)this + 10), (uint64_t)v6);
    if (v7) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v4 = v6[8];
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsFramebufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v5, v6);
    return (double *)v4;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isFramebuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

double *WebKit::RemoteGraphicsContextGLProxy::isProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v5 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, *((void *)this + 10), (uint64_t)v6);
    if (v7) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v4 = v6[8];
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsProgramEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v5, v6);
    return (double *)v4;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isProgram((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

double *WebKit::RemoteGraphicsContextGLProxy::isRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v5 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, *((void *)this + 10), (uint64_t)v6);
    if (v7) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v4 = v6[8];
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v5, v6);
    return (double *)v4;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isRenderbuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

double *WebKit::RemoteGraphicsContextGLProxy::isShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v5 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, *((void *)this + 10), (uint64_t)v6);
    if (v7) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v4 = v6[8];
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsShaderEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v5, v6);
    return (double *)v4;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isShader((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

double *WebKit::RemoteGraphicsContextGLProxy::isTexture(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v5 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, *((void *)this + 10), (uint64_t)v6);
    if (v7) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v4 = v6[8];
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsTextureEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v5, v6);
    return (double *)v4;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isTexture(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isTexture((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::lineWidth(WebKit::RemoteGraphicsContextGLProxy *this, float a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    float v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::LineWidth,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::lineWidth(WebKit::RemoteGraphicsContextGLProxy *this, float a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::lineWidth((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::linkProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::LinkProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::linkProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::linkProgram((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::pixelStorei(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PixelStorei,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::pixelStorei(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::pixelStorei((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::polygonOffset(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    *(float *)int v5 = a2;
    *(float *)&v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PolygonOffset,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, (uint64_t)v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::polygonOffset(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::polygonOffset((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::renderbufferStorage(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v7[0] = a2;
    v7[1] = a3;
    int v7[2] = a4;
    int v7[3] = a5;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::RenderbufferStorage,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::renderbufferStorage(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::renderbufferStorage((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::sampleCoverage(WebKit::RemoteGraphicsContextGLProxy *this, float a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    float v5 = a2;
    BOOL v6 = a3 != 0;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SampleCoverage,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, (uint64_t)&v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::sampleCoverage(WebKit::RemoteGraphicsContextGLProxy *this, float a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::sampleCoverage((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::scissor(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v7[0] = a2;
    v7[1] = a3;
    int v7[2] = a4;
    int v7[3] = a5;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Scissor,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::scissor(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::scissor((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::shaderSource(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v5 = a2;
    BOOL v6 = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ShaderSource,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::shaderSource(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::shaderSource((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::stencilFunc(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    int v6[2] = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilFunc,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::stencilFunc(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::stencilFunc((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::stencilFuncSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v7[0] = a2;
    v7[1] = a3;
    int v7[2] = a4;
    int v7[3] = a5;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilFuncSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::stencilFuncSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::stencilFuncSeparate((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::stencilMask(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilMask,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::stencilMask(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::stencilMask((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::stencilMaskSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilMaskSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::stencilMaskSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::stencilMaskSeparate((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::stencilOp(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    int v6[2] = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilOp,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::stencilOp(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::stencilOp((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::stencilOpSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v7[0] = a2;
    v7[1] = a3;
    int v7[2] = a4;
    int v7[3] = a5;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilOpSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::stencilOpSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::stencilOpSeparate((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::texParameterf(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, float a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    LODWORD(v6[0]) = a2;
    LODWORD(v6[1]) = a3;
    int v6[2] = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexParameterf,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texParameterf(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, float a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::texParameterf((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::texParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    int v6[2] = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::texParameteri((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform1f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    LODWORD(v5[0]) = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform1f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform1f((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform1fv(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a3;
  v8[1] = a4;
  uint64_t result = a1[13];
  if (result)
  {
    int v6 = a2;
    int v7 = v8;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v6, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform1fv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform1fv((uint64_t *)(a1 - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform1i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform1i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform1i((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform1iv(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a3;
  v8[1] = a4;
  uint64_t result = a1[13];
  if (result)
  {
    int v6 = a2;
    int v7 = v8;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v6, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform1iv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform1iv((uint64_t *)(a1 - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform2f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    LODWORD(v6[0]) = a2;
    v6[1] = a3;
    int v6[2] = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform2f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform2f((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform2fv(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a3;
  v8[1] = a4;
  uint64_t result = a1[13];
  if (result)
  {
    int v6 = a2;
    int v7 = v8;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v6, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform2fv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform2fv((uint64_t *)(a1 - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform2i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    int v6[2] = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform2i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform2i((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform2iv(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a3;
  v8[1] = a4;
  uint64_t result = a1[13];
  if (result)
  {
    int v6 = a2;
    int v7 = v8;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v6, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform2iv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform2iv((uint64_t *)(a1 - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform3f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4, float a5)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    LODWORD(v7[0]) = a2;
    v7[1] = a3;
    int v7[2] = a4;
    int v7[3] = a5;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform3f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4, float a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform3f((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform3fv(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a3;
  v8[1] = a4;
  uint64_t result = a1[13];
  if (result)
  {
    int v6 = a2;
    int v7 = v8;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v6, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform3fv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform3fv((uint64_t *)(a1 - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform3i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v7[0] = a2;
    v7[1] = a3;
    int v7[2] = a4;
    int v7[3] = a5;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform3i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform3i((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform3iv(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a3;
  v8[1] = a4;
  uint64_t result = a1[13];
  if (result)
  {
    int v6 = a2;
    int v7 = v8;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v6, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform3iv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform3iv((uint64_t *)(a1 - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform4f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4, float a5, float a6)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    LODWORD(v8[0]) = a2;
    v8[1] = a3;
    void v8[2] = a4;
    v8[3] = a5;
    void v8[4] = a6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform4f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4, float a5, float a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform4f((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform4fv(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a3;
  v8[1] = a4;
  uint64_t result = a1[13];
  if (result)
  {
    int v6 = a2;
    int v7 = v8;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v6, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform4fv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform4fv((uint64_t *)(a1 - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform4i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v8[0] = a2;
    v8[1] = a3;
    void v8[2] = a4;
    v8[3] = a5;
    void v8[4] = a6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform4i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform4i((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform4iv(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a3;
  v8[1] = a4;
  uint64_t result = a1[13];
  if (result)
  {
    int v6 = a2;
    int v7 = v8;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v6, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform4iv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform4iv((uint64_t *)(a1 - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniformMatrix2fv(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  v10[0] = a4;
  v10[1] = a5;
  uint64_t result = a1[13];
  if (result)
  {
    int v7 = a2;
    BOOL v8 = a3 != 0;
    int v9 = v10;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v7, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformMatrix2fv(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformMatrix2fv((uint64_t *)(a1 - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniformMatrix3fv(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  v10[0] = a4;
  v10[1] = a5;
  uint64_t result = a1[13];
  if (result)
  {
    int v7 = a2;
    BOOL v8 = a3 != 0;
    int v9 = v10;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v7, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformMatrix3fv(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformMatrix3fv((uint64_t *)(a1 - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniformMatrix4fv(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  v10[0] = a4;
  v10[1] = a5;
  uint64_t result = a1[13];
  if (result)
  {
    int v7 = a2;
    BOOL v8 = a3 != 0;
    int v9 = v10;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v7, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformMatrix4fv(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformMatrix4fv((uint64_t *)(a1 - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::useProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UseProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::useProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::useProgram((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::validateProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ValidateProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::validateProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::validateProgram((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::vertexAttrib1f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    LODWORD(v5[0]) = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib1f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttrib1f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttrib1f((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::vertexAttrib1fv(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t result = a1[13];
  if (result)
  {
    int v5 = a2;
    int v6 = &v7;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib1fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttrib1fv(uint64_t a1, int a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttrib1fv((uint64_t *)(a1 - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::vertexAttrib2f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    LODWORD(v6[0]) = a2;
    v6[1] = a3;
    int v6[2] = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib2f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttrib2f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttrib2f((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::vertexAttrib2fv(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t result = a1[13];
  if (result)
  {
    int v5 = a2;
    int v6 = &v7;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttrib2fv(uint64_t a1, int a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttrib2fv((uint64_t *)(a1 - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::vertexAttrib3f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4, float a5)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    LODWORD(v7[0]) = a2;
    v7[1] = a3;
    int v7[2] = a4;
    int v7[3] = a5;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib3f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttrib3f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4, float a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttrib3f((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::vertexAttrib3fv(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t result = a1[13];
  if (result)
  {
    int v5 = a2;
    int v6 = &v7;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttrib3fv(uint64_t a1, int a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttrib3fv((uint64_t *)(a1 - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::vertexAttrib4f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4, float a5, float a6)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    LODWORD(v8[0]) = a2;
    v8[1] = a3;
    void v8[2] = a4;
    v8[3] = a5;
    void v8[4] = a6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib4f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttrib4f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4, float a5, float a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttrib4f((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::vertexAttrib4fv(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t result = a1[13];
  if (result)
  {
    int v5 = a2;
    int v6 = &v7;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttrib4fv(uint64_t a1, int a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttrib4fv((uint64_t *)(a1 - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::vertexAttribPointer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v9[0] = a2;
    v9[1] = a3;
    unsigned char v9[2] = a4;
    BOOL v10 = a5 != 0;
    int v11 = a6;
    uint64_t v12 = a7;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribPointer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v9, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttribPointer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttribPointer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6, a7);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::viewport(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v7[0] = a2;
    v7[1] = a3;
    int v7[2] = a4;
    int v7[3] = a5;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Viewport,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::viewport(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::viewport((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::bufferData(WebKit::RemoteGraphicsContextGLProxy *this, int a2, uint64_t a3, int a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v6 = a2;
    uint64_t v7 = a3;
    int v8 = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BufferData0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bufferData(WebKit::RemoteGraphicsContextGLProxy *this, int a2, uint64_t a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::bufferData((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::bufferData(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  v9[0] = a3;
  v9[1] = a4;
  uint64_t result = a1[13];
  if (result)
  {
    LODWORD(v7[0]) = a2;
    v7[1] = (const void **)v9;
    int v8 = a5;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BufferData1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bufferData(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::bufferData((uint64_t *)(a1 - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::bufferSubData(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[0] = a4;
  v10[1] = a5;
  uint64_t result = a1[13];
  if (result)
  {
    int v7 = a2;
    uint64_t v8 = a3;
    int v9 = v10;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BufferSubData,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v7, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bufferSubData(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::bufferSubData((uint64_t *)(a1 - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::readPixelsBufferObject(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, int a8)
{
  v16[0] = a2;
  v16[1] = a3;
  uint64_t result = a1[13];
  if (result)
  {
    BOOL v10 = v16;
    int v11 = a4;
    int v12 = a5;
    uint64_t v13 = a6;
    int v14 = a7;
    int v15 = a8;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ReadPixelsBufferObject,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v10, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::readPixelsBufferObject(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, int a8)
{
  return WebKit::RemoteGraphicsContextGLProxy::readPixelsBufferObject((uint64_t *)(a1 - 24), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::texImage2D(uint64_t *a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  v21[0] = a10;
  v21[1] = a11;
  uint64_t result = a1[13];
  if (result)
  {
    uint64_t v13 = (const void **)__PAIR64__(a3, a2);
    int v14 = a4;
    int v15 = a5;
    int v16 = a6;
    int v17 = a7;
    int v18 = a8;
    int v19 = a9;
    unint64_t v20 = v21;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexImage2D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v13, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texImage2D(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  return WebKit::RemoteGraphicsContextGLProxy::texImage2D((uint64_t *)(a1 - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::texImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, uint64_t a10)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v12[0] = a2;
    v12[1] = a3;
    int v12[2] = a4;
    v12[3] = a5;
    uint64_t v12[4] = a6;
    v12[5] = a7;
    v12[6] = a8;
    v12[7] = a9;
    uint64_t v13 = a10;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexImage2D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v12, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, uint64_t a10)
{
  return WebKit::RemoteGraphicsContextGLProxy::texImage2D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::texSubImage2D(uint64_t *a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  v21[0] = a10;
  v21[1] = a11;
  uint64_t result = a1[13];
  if (result)
  {
    uint64_t v13 = (const void **)__PAIR64__(a3, a2);
    int v14 = a4;
    int v15 = a5;
    int v16 = a6;
    int v17 = a7;
    int v18 = a8;
    int v19 = a9;
    unint64_t v20 = v21;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexSubImage2D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v13, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texSubImage2D(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  return WebKit::RemoteGraphicsContextGLProxy::texSubImage2D((uint64_t *)(a1 - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::texSubImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, uint64_t a10)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v12[0] = a2;
    v12[1] = a3;
    int v12[2] = a4;
    v12[3] = a5;
    uint64_t v12[4] = a6;
    v12[5] = a7;
    v12[6] = a8;
    v12[7] = a9;
    uint64_t v13 = a10;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexSubImage2D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v12, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texSubImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, uint64_t a10)
{
  return WebKit::RemoteGraphicsContextGLProxy::texSubImage2D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::compressedTexImage2D(uint64_t *a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  v19[0] = a9;
  v19[1] = a10;
  uint64_t result = a1[13];
  if (result)
  {
    int v12 = (const void **)__PAIR64__(a3, a2);
    int v13 = a4;
    int v14 = a5;
    int v15 = a6;
    int v16 = a7;
    int v17 = a8;
    int v18 = v19;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexImage2D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v12, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::compressedTexImage2D(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  return WebKit::RemoteGraphicsContextGLProxy::compressedTexImage2D((uint64_t *)(a1 - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::compressedTexImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v11[0] = a2;
    v11[1] = a3;
    void v11[2] = a4;
    void v11[3] = a5;
    v11[4] = a6;
    v11[5] = a7;
    v11[6] = a8;
    uint64_t v12 = a9;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexImage2D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v11, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::compressedTexImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  return WebKit::RemoteGraphicsContextGLProxy::compressedTexImage2D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage2D(uint64_t *a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  v21[0] = a10;
  v21[1] = a11;
  uint64_t result = a1[13];
  if (result)
  {
    int v13 = (const void **)__PAIR64__(a3, a2);
    int v14 = a4;
    int v15 = a5;
    int v16 = a6;
    int v17 = a7;
    int v18 = a8;
    int v19 = a9;
    unint64_t v20 = v21;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage2D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v13, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage2D(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  return WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage2D((uint64_t *)(a1 - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v12[0] = a2;
    v12[1] = a3;
    int v12[2] = a4;
    v12[3] = a5;
    uint64_t v12[4] = a6;
    v12[5] = a7;
    v12[6] = a8;
    v12[7] = a9;
    uint64_t v13 = a10;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage2D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v12, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10)
{
  return WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage2D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::drawArraysInstanced(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v7[0] = a2;
    v7[1] = a3;
    int v7[2] = a4;
    int v7[3] = a5;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawArraysInstanced,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawArraysInstanced(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawArraysInstanced((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::drawElementsInstanced(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, uint64_t a5, int a6)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v8[0] = a2;
    v8[1] = a3;
    void v8[2] = a4;
    uint64_t v9 = a5;
    int v10 = a6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawElementsInstanced,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawElementsInstanced(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, uint64_t a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawElementsInstanced((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::vertexAttribDivisor(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribDivisor,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttribDivisor(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttribDivisor((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createVertexArray(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (!v2) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 46);
  uint64_t v4 = (v3 + 1);
  *((_DWORD *)this + 46) = v4;
  int v6 = v3 + 1;
  if (IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateVertexArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v2, &v6, *((void *)this + 10)))WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this); {
  return v4;
  }
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createVertexArray(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createVertexArray((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::deleteVertexArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteVertexArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteVertexArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteVertexArray((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

double *WebKit::RemoteGraphicsContextGLProxy::isVertexArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v5 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsVertexArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, *((void *)this + 10), (uint64_t)v6);
    if (v7) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v4 = v6[8];
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v5, v6);
    return (double *)v4;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isVertexArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isVertexArray((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::bindVertexArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindVertexArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindVertexArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindVertexArray((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::copyBufferSubData(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v8[0] = a2;
    v8[1] = a3;
    uint64_t v9 = a4;
    uint64_t v10 = a5;
    uint64_t v11 = a6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CopyBufferSubData,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::copyBufferSubData(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::copyBufferSubData((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::blitFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, unsigned int a11)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v13[0] = a2;
    v13[1] = a3;
    void v13[2] = a4;
    v13[3] = a5;
    v13[4] = a6;
    v13[5] = a7;
    v13[6] = a8;
    v13[7] = a9;
    v13[8] = a10;
    v13[9] = a11;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlitFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v13, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blitFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, unsigned int a11)
{
  return WebKit::RemoteGraphicsContextGLProxy::blitFramebuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::framebufferTextureLayer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v8[0] = a2;
    v8[1] = a3;
    int v8[2] = a4;
    v8[3] = a5;
    int v8[4] = a6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::FramebufferTextureLayer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::framebufferTextureLayer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::framebufferTextureLayer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::invalidateFramebuffer(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  v7[0] = a3;
  v7[1] = a4;
  uint64_t result = a1[13];
  if (result)
  {
    LODWORD(v6[0]) = a2;
    v6[1] = (const void **)v7;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::InvalidateFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::invalidateFramebuffer(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::invalidateFramebuffer((uint64_t *)(a1 - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::invalidateSubFramebuffer(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  v15[0] = a3;
  v15[1] = a4;
  uint64_t result = a1[13];
  if (result)
  {
    LODWORD(v10[0]) = a2;
    v10[1] = (const void **)v15;
    int v11 = a5;
    int v12 = a6;
    int v13 = a7;
    int v14 = a8;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::InvalidateSubFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v10, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::invalidateSubFramebuffer(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  return WebKit::RemoteGraphicsContextGLProxy::invalidateSubFramebuffer((uint64_t *)(a1 - 24), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::readBuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ReadBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::readBuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::readBuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::renderbufferStorageMultisample(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v8[0] = a2;
    v8[1] = a3;
    int v8[2] = a4;
    v8[3] = a5;
    int v8[4] = a6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::RenderbufferStorageMultisample,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::renderbufferStorageMultisample(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::renderbufferStorageMultisample((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::texStorage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v8[0] = a2;
    v8[1] = a3;
    int v8[2] = a4;
    v8[3] = a5;
    int v8[4] = a6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexStorage2D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texStorage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::texStorage2D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::texStorage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v9[0] = a2;
    v9[1] = a3;
    void v9[2] = a4;
    int v9[3] = a5;
    v9[4] = a6;
    v9[5] = a7;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexStorage3D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v9, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texStorage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  return WebKit::RemoteGraphicsContextGLProxy::texStorage3D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6, a7);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::texImage3D(uint64_t *a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12)
{
  v23[0] = a11;
  v23[1] = a12;
  uint64_t result = a1[13];
  if (result)
  {
    int v14 = (const void **)__PAIR64__(a3, a2);
    int v15 = a4;
    int v16 = a5;
    int v17 = a6;
    int v18 = a7;
    int v19 = a8;
    int v20 = a9;
    int v21 = a10;
    uint64_t v22 = v23;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexImage3D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v14, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texImage3D(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12)
{
  return WebKit::RemoteGraphicsContextGLProxy::texImage3D((uint64_t *)(a1 - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::texImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, unsigned int a10, uint64_t a11)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v13[0] = a2;
    v13[1] = a3;
    void v13[2] = a4;
    v13[3] = a5;
    v13[4] = a6;
    v13[5] = a7;
    v13[6] = a8;
    v13[7] = a9;
    v13[8] = a10;
    uint64_t v14 = a11;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexImage3D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v13, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, unsigned int a10, uint64_t a11)
{
  return WebKit::RemoteGraphicsContextGLProxy::texImage3D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::texSubImage3D(uint64_t *a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, uint64_t a12, uint64_t a13)
{
  v25[0] = a12;
  v25[1] = a13;
  uint64_t result = a1[13];
  if (result)
  {
    int v15 = (const void **)__PAIR64__(a3, a2);
    int v16 = a4;
    int v17 = a5;
    int v18 = a6;
    int v19 = a7;
    int v20 = a8;
    int v21 = a9;
    int v22 = a10;
    int v23 = a11;
    unint64_t v24 = v25;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexSubImage3D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v15, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texSubImage3D(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, uint64_t a12, uint64_t a13)
{
  return WebKit::RemoteGraphicsContextGLProxy::texSubImage3D((uint64_t *)(a1 - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::texSubImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, unsigned int a11, uint64_t a12)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v14[0] = a2;
    v14[1] = a3;
    void v14[2] = a4;
    v14[3] = a5;
    _OWORD v14[4] = a6;
    v14[5] = a7;
    v14[6] = a8;
    v14[7] = a9;
    unsigned char v14[8] = a10;
    v14[9] = a11;
    uint64_t v15 = a12;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexSubImage3D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v14, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texSubImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, unsigned int a11, uint64_t a12)
{
  return WebKit::RemoteGraphicsContextGLProxy::texSubImage3D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::copyTexSubImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v12[0] = a2;
    v12[1] = a3;
    int v12[2] = a4;
    v12[3] = a5;
    uint64_t v12[4] = a6;
    v12[5] = a7;
    v12[6] = a8;
    v12[7] = a9;
    int v12[8] = a10;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CopyTexSubImage3D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v12, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::copyTexSubImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  return WebKit::RemoteGraphicsContextGLProxy::copyTexSubImage3D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::compressedTexImage3D(uint64_t *a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  v21[0] = a10;
  v21[1] = a11;
  uint64_t result = a1[13];
  if (result)
  {
    int v13 = (const void **)__PAIR64__(a3, a2);
    int v14 = a4;
    int v15 = a5;
    int v16 = a6;
    int v17 = a7;
    int v18 = a8;
    int v19 = a9;
    int v20 = v21;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexImage3D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v13, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::compressedTexImage3D(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  return WebKit::RemoteGraphicsContextGLProxy::compressedTexImage3D((uint64_t *)(a1 - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::compressedTexImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v12[0] = a2;
    v12[1] = a3;
    int v12[2] = a4;
    v12[3] = a5;
    uint64_t v12[4] = a6;
    v12[5] = a7;
    v12[6] = a8;
    v12[7] = a9;
    uint64_t v13 = a10;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexImage3D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v12, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::compressedTexImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10)
{
  return WebKit::RemoteGraphicsContextGLProxy::compressedTexImage3D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage3D(uint64_t *a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, uint64_t a12, uint64_t a13)
{
  v25[0] = a12;
  v25[1] = a13;
  uint64_t result = a1[13];
  if (result)
  {
    int v15 = (const void **)__PAIR64__(a3, a2);
    int v16 = a4;
    int v17 = a5;
    int v18 = a6;
    int v19 = a7;
    int v20 = a8;
    int v21 = a9;
    int v22 = a10;
    int v23 = a11;
    unint64_t v24 = v25;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage3D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v15, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage3D(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, uint64_t a12, uint64_t a13)
{
  return WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage3D((uint64_t *)(a1 - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, int a11, uint64_t a12)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v14[0] = a2;
    v14[1] = a3;
    void v14[2] = a4;
    v14[3] = a5;
    _OWORD v14[4] = a6;
    v14[5] = a7;
    v14[6] = a8;
    v14[7] = a9;
    unsigned char v14[8] = a10;
    v14[9] = a11;
    uint64_t v15 = a12;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage3D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v14, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, int a11, uint64_t a12)
{
  return WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage3D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

double *WebKit::RemoteGraphicsContextGLProxy::getFragDataLocation(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v6 = a2;
    int v7 = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetFragDataLocation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, (uint64_t)&v6, *((void *)this + 10), (uint64_t)v8);
    if (v10) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v9;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v6, v8);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getFragDataLocation(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getFragDataLocation((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform1ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform1ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform1ui((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform2ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    int v6[2] = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform2ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform2ui((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform3ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v7[0] = a2;
    v7[1] = a3;
    void v7[2] = a4;
    int v7[3] = a5;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform3ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform3ui((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform4ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v8[0] = a2;
    v8[1] = a3;
    int v8[2] = a4;
    v8[3] = a5;
    int v8[4] = a6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform4ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform4ui((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform1uiv(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a3;
  v8[1] = a4;
  uint64_t result = a1[13];
  if (result)
  {
    int v6 = a2;
    int v7 = v8;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v6, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform1uiv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform1uiv((uint64_t *)(a1 - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform2uiv(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a3;
  v8[1] = a4;
  uint64_t result = a1[13];
  if (result)
  {
    int v6 = a2;
    int v7 = v8;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v6, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform2uiv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform2uiv((uint64_t *)(a1 - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform3uiv(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a3;
  v8[1] = a4;
  uint64_t result = a1[13];
  if (result)
  {
    int v6 = a2;
    int v7 = v8;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v6, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform3uiv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform3uiv((uint64_t *)(a1 - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniform4uiv(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a3;
  v8[1] = a4;
  uint64_t result = a1[13];
  if (result)
  {
    int v6 = a2;
    int v7 = v8;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v6, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform4uiv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform4uiv((uint64_t *)(a1 - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniformMatrix2x3fv(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  v10[0] = a4;
  v10[1] = a5;
  uint64_t result = a1[13];
  if (result)
  {
    int v7 = a2;
    BOOL v8 = a3 != 0;
    unsigned int v9 = v10;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix2x3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v7, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformMatrix2x3fv(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformMatrix2x3fv((uint64_t *)(a1 - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniformMatrix3x2fv(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  v10[0] = a4;
  v10[1] = a5;
  uint64_t result = a1[13];
  if (result)
  {
    int v7 = a2;
    BOOL v8 = a3 != 0;
    unsigned int v9 = v10;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix3x2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v7, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformMatrix3x2fv(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformMatrix3x2fv((uint64_t *)(a1 - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniformMatrix2x4fv(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  v10[0] = a4;
  v10[1] = a5;
  uint64_t result = a1[13];
  if (result)
  {
    int v7 = a2;
    BOOL v8 = a3 != 0;
    unsigned int v9 = v10;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix2x4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v7, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformMatrix2x4fv(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformMatrix2x4fv((uint64_t *)(a1 - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniformMatrix4x2fv(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  v10[0] = a4;
  v10[1] = a5;
  uint64_t result = a1[13];
  if (result)
  {
    int v7 = a2;
    BOOL v8 = a3 != 0;
    unsigned int v9 = v10;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix4x2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v7, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformMatrix4x2fv(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformMatrix4x2fv((uint64_t *)(a1 - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniformMatrix3x4fv(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  v10[0] = a4;
  v10[1] = a5;
  uint64_t result = a1[13];
  if (result)
  {
    int v7 = a2;
    BOOL v8 = a3 != 0;
    unsigned int v9 = v10;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix3x4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v7, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformMatrix3x4fv(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformMatrix3x4fv((uint64_t *)(a1 - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniformMatrix4x3fv(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  v10[0] = a4;
  v10[1] = a5;
  uint64_t result = a1[13];
  if (result)
  {
    int v7 = a2;
    BOOL v8 = a3 != 0;
    unsigned int v9 = v10;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix4x3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v7, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformMatrix4x3fv(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformMatrix4x3fv((uint64_t *)(a1 - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v8[0] = a2;
    v8[1] = a3;
    void v8[2] = a4;
    v8[3] = a5;
    int v8[4] = a6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribI4i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4i((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4iv(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t result = a1[13];
  if (result)
  {
    int v5 = a2;
    int v6 = &v7;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribI4iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4iv(uint64_t a1, int a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4iv((uint64_t *)(a1 - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v8[0] = a2;
    v8[1] = a3;
    void v8[2] = a4;
    v8[3] = a5;
    int v8[4] = a6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribI4ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4ui((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4uiv(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t result = a1[13];
  if (result)
  {
    int v5 = a2;
    int v6 = &v7;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribI4uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4uiv(uint64_t a1, int a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4uiv((uint64_t *)(a1 - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::vertexAttribIPointer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v8[0] = a2;
    v8[1] = a3;
    void v8[2] = a4;
    v8[3] = a5;
    uint64_t v9 = a6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribIPointer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttribIPointer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, uint64_t a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttribIPointer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::drawRangeElements(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v9[0] = a2;
    v9[1] = a3;
    void v9[2] = a4;
    int v9[3] = a5;
    v9[4] = a6;
    uint64_t v10 = a7;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawRangeElements,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v9, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawRangeElements(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawRangeElements((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6, a7);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::drawBuffers(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t result = a1[13];
  if (result)
  {
    int v5 = (const void **)v6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawBuffers,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawBuffers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawBuffers((uint64_t *)(a1 - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::clearBufferiv(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  v8[0] = a4;
  v8[1] = a5;
  uint64_t result = a1[13];
  if (result)
  {
    v7[0] = (const void **)__PAIR64__(a3, a2);
    v7[1] = (const void **)v8;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearBufferiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clearBufferiv(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::clearBufferiv((uint64_t *)(a1 - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::clearBufferuiv(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  v8[0] = a4;
  v8[1] = a5;
  uint64_t result = a1[13];
  if (result)
  {
    v7[0] = (const void **)__PAIR64__(a3, a2);
    v7[1] = (const void **)v8;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearBufferuiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clearBufferuiv(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::clearBufferuiv((uint64_t *)(a1 - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::clearBufferfv(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  v8[0] = a4;
  v8[1] = a5;
  uint64_t result = a1[13];
  if (result)
  {
    v7[0] = (const void **)__PAIR64__(a3, a2);
    v7[1] = (const void **)v8;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearBufferfv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clearBufferfv(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::clearBufferfv((uint64_t *)(a1 - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::clearBufferfi(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, float a4, int a5)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    LODWORD(v7[0]) = a2;
    LODWORD(v7[1]) = a3;
    void v7[2] = a4;
    LODWORD(v7[3]) = a5;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearBufferfi,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v7, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clearBufferfi(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, float a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::clearBufferfi((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createQuery(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (!v2) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 46);
  uint64_t v4 = (v3 + 1);
  *((_DWORD *)this + 46) = v4;
  int v6 = v3 + 1;
  if (IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v2, &v6, *((void *)this + 10)))WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this); {
  return v4;
  }
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createQuery(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createQuery((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::deleteQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteQuery((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

double *WebKit::RemoteGraphicsContextGLProxy::isQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v5 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, *((void *)this + 10), (uint64_t)v6);
    if (v7) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v4 = v6[8];
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL7IsQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v5, v6);
    return (double *)v4;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isQuery((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::beginQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BeginQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::beginQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::beginQuery((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::endQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EndQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::endQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::endQuery((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

double *WebKit::RemoteGraphicsContextGLProxy::getQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10), (uint64_t)v7);
    if (v9) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v8;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(v6, v7);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getQuery((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::getQueryObjectui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQueryObjectui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10), (uint64_t)v7);
    if (v9) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v8;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(v6, v7);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getQueryObjectui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getQueryObjectui((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createSampler(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (!v2) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 46);
  uint64_t v4 = (v3 + 1);
  *((_DWORD *)this + 46) = v4;
  int v6 = v3 + 1;
  if (IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateSampler,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v2, &v6, *((void *)this + 10)))WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this); {
  return v4;
  }
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createSampler(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createSampler((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::deleteSampler(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteSampler,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteSampler(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteSampler((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

double *WebKit::RemoteGraphicsContextGLProxy::isSampler(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v5 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsSampler,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, *((void *)this + 10), (uint64_t)v6);
    if (v7) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v4 = v6[8];
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsSamplerEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v5, v6);
    return (double *)v4;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isSampler(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isSampler((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::bindSampler(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindSampler,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindSampler(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindSampler((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::samplerParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    int v6[2] = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SamplerParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::samplerParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::samplerParameteri((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::samplerParameterf(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, float a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    LODWORD(v6[0]) = a2;
    LODWORD(v6[1]) = a3;
    int v6[2] = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SamplerParameterf,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::samplerParameterf(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, float a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::samplerParameterf((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

float WebKit::RemoteGraphicsContextGLProxy::getSamplerParameterf(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t v4 = (double *)*((void *)this + 13);
  if (!v4) {
    return 0.0;
  }
  v7[0] = a2;
  v7[1] = a3;
  IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetSamplerParameterf,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v4, v7, *((void *)this + 10), (uint64_t)v8);
  if (v10) {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  }
  float v5 = v9;
  ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(v7, v8);
  return v5;
}

float non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getSamplerParameterf(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getSamplerParameterf((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::getSamplerParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetSamplerParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10), (uint64_t)v7);
    if (v9) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v8;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(v6, v7);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getSamplerParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getSamplerParameteri((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::fenceSync(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::FenceSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10), (uint64_t)v7);
    if (v9) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v8;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9FenceSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(v6, v7);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::fenceSync(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::fenceSync((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::isSync(WebKit::RemoteGraphicsContextGLProxy *this, uint64_t a2)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    uint64_t v5 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, *((void *)this + 10), (uint64_t)v6);
    if (v7) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v4 = v6[8];
    ((void (*)(uint64_t *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL6IsSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v5, v6);
    return (double *)v4;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isSync(WebKit::RemoteGraphicsContextGLProxy *this, uint64_t a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isSync((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::deleteSync(WebKit::RemoteGraphicsContextGLProxy *this, uint64_t a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    uint64_t v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteSync(WebKit::RemoteGraphicsContextGLProxy *this, uint64_t a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteSync((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

double *WebKit::RemoteGraphicsContextGLProxy::clientWaitSync(WebKit::RemoteGraphicsContextGLProxy *this, void *a2, int a3, uint64_t a4)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v7 = a2;
    int v8 = a3;
    uint64_t v9 = a4;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::ClientWaitSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, (uint64_t)&v7, *((IPC::Encoder **)this + 10), (uint64_t)v10);
    if (v12) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v6 = v11;
    ((void (*)(void **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v7, v10);
    return (double *)v6;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clientWaitSync(WebKit::RemoteGraphicsContextGLProxy *this, void *a2, int a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::clientWaitSync((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::waitSync(WebKit::RemoteGraphicsContextGLProxy *this, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    uint64_t v6 = a2;
    int v7 = a3;
    uint64_t v8 = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::WaitSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::waitSync(WebKit::RemoteGraphicsContextGLProxy *this, uint64_t a2, int a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::waitSync((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

double *WebKit::RemoteGraphicsContextGLProxy::getSynci(WebKit::RemoteGraphicsContextGLProxy *this, void *a2, int a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    uint64_t v6 = a2;
    int v7 = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetSynci,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, (uint64_t)&v6, *((IPC::Encoder **)this + 10), (uint64_t)v8);
    if (v10) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v9;
    ((void (*)(void **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetSynciEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v6, v8);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getSynci(WebKit::RemoteGraphicsContextGLProxy *this, void *a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getSynci((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (!v2) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 46);
  uint64_t v4 = (v3 + 1);
  *((_DWORD *)this + 46) = v4;
  int v6 = v3 + 1;
  if (IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v2, &v6, *((void *)this + 10)))WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this); {
  return v4;
  }
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createTransformFeedback((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::deleteTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteTransformFeedback((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

double *WebKit::RemoteGraphicsContextGLProxy::isTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v5 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, *((void *)this + 10), (uint64_t)v6);
    if (v7) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v4 = v6[8];
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v5, v6);
    return (double *)v4;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isTransformFeedback((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::bindTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindTransformFeedback((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::beginTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BeginTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::beginTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::beginTransformFeedback((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::endTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    char v3 = 0;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EndTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, (uint64_t)&v3, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::endTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::endTransformFeedback((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::transformFeedbackVaryings(uint64_t *a1, int a2, uint64_t a3, int a4)
{
  uint64_t result = a1[13];
  if (result)
  {
    int v6 = a2;
    uint64_t v7 = a3;
    int v8 = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TransformFeedbackVaryings,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v6, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::transformFeedbackVaryings(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::transformFeedbackVaryings((uint64_t *)(a1 - 24), a2, a3, a4);
}

double *WebKit::RemoteGraphicsContextGLProxy::getTransformFeedbackVarying(uint64_t *a1, int a2, int a3, uint64_t a4)
{
  uint64_t result = (double *)a1[13];
  if (result)
  {
    v9[0] = a2;
    v9[1] = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v9, a1[10], (uint64_t)v10);
    if (v13) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
    uint64_t v8 = v11;
    uint64_t v11 = 0;
    uint64_t result = *(double **)a4;
    *(void *)a4 = v8;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (double *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    *(void *)(a4 + 8) = v12;
    if (v13 != -1) {
      return (double *)((uint64_t (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v13])(v9, v10);
    }
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getTransformFeedbackVarying(uint64_t a1, int a2, int a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::getTransformFeedbackVarying((uint64_t *)(a1 - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::pauseTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    char v3 = 0;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PauseTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, (uint64_t)&v3, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::pauseTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::pauseTransformFeedback((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::resumeTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    char v3 = 0;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ResumeTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, (uint64_t)&v3, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::resumeTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::resumeTransformFeedback((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::bindBufferBase(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    int v6[2] = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindBufferBase,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindBufferBase(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindBufferBase((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::bindBufferRange(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v8[0] = a2;
    v8[1] = a3;
    void v8[2] = a4;
    uint64_t v9 = a5;
    uint64_t v10 = a6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindBufferRange,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindBufferRange(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindBufferRange((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6);
}

double *WebKit::RemoteGraphicsContextGLProxy::getUniformIndices@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t result = *(double **)(a1 + 104);
  if (result)
  {
    unsigned int v7 = a2;
    uint64_t v8 = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetUniformIndices,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v7, *(IPC::Encoder **)(a1 + 80), (uint64_t)v9);
    if (v11) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
    uint64_t result = (double *)WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a4, (uint64_t)&v10);
    if (v11 != -1) {
      return (double *)((uint64_t (*)(unsigned int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v11])(&v7, v9);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getUniformIndices@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::getUniformIndices(a1 - 24, a2, a3, a4);
}

double *WebKit::RemoteGraphicsContextGLProxy::getActiveUniforms@<X0>(uint64_t a1@<X0>, int a2@<W1>, const void **a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  uint64_t result = *(double **)(a1 + 104);
  if (result)
  {
    LODWORD(v8[0]) = a2;
    v8[1] = a3;
    int v9 = a4;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetActiveUniforms,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *(IPC::Encoder **)(a1 + 80), (uint64_t)v10);
    if (v12) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
    uint64_t result = (double *)WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a5, (uint64_t)&v11);
    if (v12 != -1) {
      return (double *)((uint64_t (*)(const void ***, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v12])(v8, v10);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getActiveUniforms@<X0>(uint64_t a1@<X0>, int a2@<W1>, const void **a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::getActiveUniforms(a1 - 24, a2, a3, a4, a5);
}

double *WebKit::RemoteGraphicsContextGLProxy::getUniformBlockIndex(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v6 = a2;
    unsigned int v7 = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, (uint64_t)&v6, *((void *)this + 10), (uint64_t)v8);
    if (v10) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v9;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v6, v8);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getUniformBlockIndex(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getUniformBlockIndex((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::getActiveUniformBlockName@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    v8[0] = a2;
    v8[1] = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *((void *)this + 10), (uint64_t)v9);
    if (v11) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    unsigned int v7 = v10;
    if (v10) {
      *v10 += 2;
    }
    *a4 = v7;
    return (double *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix(v8, v9);
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getActiveUniformBlockName@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::getActiveUniformBlockName((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::uniformBlockBinding(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    int v6[2] = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformBlockBinding,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformBlockBinding(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformBlockBinding((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getActiveUniformBlockiv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, int a4, void *a5, uint64_t a6)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  int v6 = (uint64_t *)*((void *)result + 13);
  if (!v6) {
    return result;
  }
  unsigned int v9 = result;
  v58[0] = a2;
  v58[1] = a3;
  v58[2] = a4;
  uint64_t v59 = a6;
  uint64_t v10 = *((void *)result + 10);
  double v11 = *((double *)v6 + 15);
  double v12 = INFINITY;
  if (fabs(v11) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v12 = v11 + v13;
  }
  if (v6[7] != v10)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v61, v12);
    if (!v62)
    {
      char v56 = 15;
      goto LABEL_111;
    }
    unint64_t v44 = *((void *)&v61 + 1);
    uint64_t v45 = v61;
    unint64_t v46 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = v46 - v61;
    if (v46 >= (unint64_t)v61)
    {
      unint64_t v48 = v47 + 2;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v48 <= *((void *)&v61 + 1))
      {
        *(_WORD *)(v61 + v47) = 2871;
        goto LABEL_88;
      }
      unint64_t v44 = 0;
    }
    unint64_t v48 = 0;
LABEL_88:
    uint64_t v50 = (void *)((v45 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v50 >= v45 + v48)
    {
      unint64_t v48 = (unint64_t)v50 - v45 + 8;
      if ((unint64_t)v50 - v45 > 0xFFFFFFFFFFFFFFF7 || v48 > v44)
      {
LABEL_110:
        char v56 = 17;
LABEL_111:
        v68[0] = v56;
        unsigned int v69 = 1;
        goto LABEL_78;
      }
      void *v50 = v10;
    }
    if (v44)
    {
      uint64_t v52 = v6[9];
      unint64_t v53 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v54 = v6[8];
      if (v53 + 16 >= v54) {
        unint64_t v53 = 0;
      }
      if (v48 <= 0x10) {
        unint64_t v48 = 16;
      }
      unint64_t v55 = v53 + v48;
      if (v54 <= v55) {
        unint64_t v55 = 0;
      }
      v6[10] = v55;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v52 + 16) + 128), v55) == 0x80000000);
      v6[7] = v10;
      goto LABEL_5;
    }
    goto LABEL_110;
  }
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v65, v12);
  if (!v67)
  {
    v68[0] = 15;
    unsigned int v69 = 1;
    goto LABEL_77;
  }
  long long v57 = a5;
  unint64_t v15 = v65;
  unint64_t v14 = v66;
  int v16 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v70, (uint64_t **)v6 + 1);
  uint64_t v17 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v70, v17))
  {
    v68[0] = 11;
    unsigned int v69 = 1;
    LOBYTE(v61) = 0;
    unsigned int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)v68);
    char v64 = 1;
    if (v69 != -1) {
      (*(&off_1EE9E9CD8 + v69))(v74, v68);
    }
    goto LABEL_51;
  }
  *(void *)unsigned int v68 = v15;
  *(void *)&v68[8] = v14;
  *(void *)&unsigned char v68[16] = 0;
  unint64_t v18 = (v15 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v19 = v18 - v15;
  if (v18 < v15)
  {
    unint64_t v20 = 0;
  }
  else
  {
    if (v19 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_103;
    }
    unint64_t v20 = v19 + 2;
    if (v19 + 2 > v14) {
      goto LABEL_103;
    }
    *(_WORD *)(v15 + v19) = 3645;
    *(void *)&unsigned char v68[16] = v19 + 2;
  }
  while (1)
  {
    int v21 = (void *)((v15 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v21 >= v15 + v20)
    {
      int v22 = (char *)v21 - v15;
      if ((unint64_t)v21 - v15 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v22 + 8) > v14)
      {
        *(void *)&v68[8] = 0;
      }
      else
      {
        *int v21 = v17;
        *(void *)&unsigned char v68[16] = v22 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,0ul,1ul,2ul,3ul>((uint64_t *)v68, (uint64_t)v58);
    if (!*(void *)&v68[8])
    {
      v72[0] = 0;
      char v73 = 0;
      goto LABEL_38;
    }
    uint64_t v23 = *(void *)&v68[16];
    unint64_t v24 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v25 = v6[8];
    if (v24 + 16 >= v25) {
      unint64_t v24 = 0;
    }
    if (*(void *)&v68[16] <= 0x10uLL) {
      uint64_t v23 = 16;
    }
    unint64_t v26 = v24 + v23;
    if (v25 <= v26) {
      unint64_t v26 = 0;
    }
    v6[10] = v26;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v26) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)v74, (uint64_t)(v6 + 8), v12);
    if (!v75)
    {
      v72[0] = 16;
      *(_DWORD *)&v72[8] = 1;
LABEL_37:
      char v73 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v71, (uint64_t)v74, v6 + 7);
    if (*((_WORD *)v71 + 25) != 2870)
    {
      *(void *)char v72 = v71;
      *(_DWORD *)&v72[8] = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v71);
    WTF::fastFree(v27, v28);
    IPC::Connection::waitForSyncReply((uint64_t)v70, v17, 0xE3Du, (uint64_t)v74, v12);
    v72[0] = 0;
    *(_DWORD *)&v72[8] = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v72, (uint64_t)v74);
    char v73 = 1;
    if (*(_DWORD *)&v74[8] != -1) {
      ((void (*)(IPC::Decoder **, unsigned char *))off_1EE9E9D68[*(unsigned int *)&v74[8]])(&v71, v74);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID((IPC::Decoder **)v70);
    if (!v73)
    {
      LOBYTE(v61) = 0;
      char v64 = 0;
      goto LABEL_51;
    }
    if (*(_DWORD *)&v72[8] == 1)
    {
      LOBYTE(v61) = v72[0];
      int v31 = 1;
      unsigned int v63 = 1;
      char v64 = 1;
      goto LABEL_50;
    }
    if (*(_DWORD *)&v72[8]) {
      goto LABEL_106;
    }
    IPC::Decoder::decode<std::tuple<std::span<int const,18446744073709551615ul>>>((uint64_t)v68, *(uint64_t **)v72);
    if (!v68[16])
    {
      LOBYTE(v61) = 13;
      unsigned int v63 = 1;
      char v64 = 1;
      goto LABEL_48;
    }
    char v29 = v68[0];
    *(void *)char v74 = *(void *)&v68[1];
    *(void *)&v74[7] = *(void *)&v68[8];
    if (v73) {
      break;
    }
LABEL_102:
    __break(1u);
LABEL_103:
    unint64_t v14 = 0;
    unint64_t v20 = 0;
    *(void *)&v68[8] = 0;
  }
  if (*(_DWORD *)&v72[8]) {
    goto LABEL_106;
  }
  uint64_t v30 = *(void *)v72;
  *(void *)char v72 = 0;
  *(void *)&v68[9] = *(void *)v74;
  *(void *)&unsigned char v68[16] = *(void *)&v74[7];
  *(void *)unsigned int v68 = v30;
  v68[8] = v29;
  unsigned int v69 = 0;
  LOBYTE(v61) = 0;
  unsigned int v63 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)v68);
  char v64 = 1;
  if (v69 != -1) {
    (*(&off_1EE9E9CD8 + v69))(&v71, v68);
  }
LABEL_48:
  if (v73)
  {
    int v31 = *(_DWORD *)&v72[8];
    if (*(_DWORD *)&v72[8] != -1) {
LABEL_50:
    }
      ((void (*)(unsigned char *, unsigned char *))off_1EE9E9D68[v31])(v68, v72);
  }
LABEL_51:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v70);
  if (v64)
  {
    v68[0] = 0;
    unsigned int v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v68, (uint64_t)&v61);
    if (v64)
    {
      if (v63 != -1) {
        (*(&off_1EE9E9CD8 + v63))(v74, &v61);
      }
    }
    a5 = v57;
    goto LABEL_77;
  }
  if (!v67) {
    goto LABEL_102;
  }
  unint64_t v32 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - v65;
  if (v32 < v65)
  {
    unint64_t v34 = 0;
  }
  else
  {
    unint64_t v34 = 0;
    if (v33 <= 0xFFFFFFFFFFFFFFFDLL && v33 + 2 <= v66)
    {
      *(_WORD *)(v65 + v33) = 2870;
      unint64_t v34 = v33 + 2;
    }
  }
  unint64_t v35 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v6[8];
  if (v35 + 16 >= v36) {
    goto LABEL_107;
  }
  while (1)
  {
    if (v34 <= 0x10) {
      unint64_t v34 = 16;
    }
    unint64_t v37 = v35 + v34;
    if (v36 <= v37) {
      unint64_t v37 = 0;
    }
    v6[10] = v37;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v37);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v60, v16);
    int v6 = v60;
    long long v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3645, v10, (uint64_t *)&v71, &v70);
    IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,0ul,1ul,2ul,3ul>(v70, v58);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v71, (uint64_t *)&v70, 0, (uint64_t)v74, v12);
    if (*(_DWORD *)&v74[8])
    {
      a5 = v57;
      if (*(_DWORD *)&v74[8] == 1)
      {
        v68[0] = v74[0];
        int v38 = 1;
        unsigned int v69 = 1;
        goto LABEL_73;
      }
      goto LABEL_106;
    }
    IPC::Decoder::decode<std::tuple<std::span<int const,18446744073709551615ul>>>((uint64_t)&v61, *(uint64_t **)v74);
    a5 = v57;
    if (!v62) {
      break;
    }
    *(void *)char v72 = *(void *)((char *)&v61 + 1);
    *(void *)&v72[7] = *((void *)&v61 + 1);
    int v38 = *(_DWORD *)&v74[8];
    if (!*(_DWORD *)&v74[8])
    {
      uint64_t v40 = *(void *)v74;
      *(void *)char v74 = 0;
      *(void *)&v68[9] = *(void *)v72;
      *(void *)&unsigned char v68[16] = *(void *)&v72[7];
      *(void *)unsigned int v68 = v40;
      v68[8] = v61;
      unsigned int v69 = 0;
      goto LABEL_73;
    }
LABEL_106:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_107:
    unint64_t v35 = 0;
  }
  v68[0] = 13;
  unsigned int v69 = 1;
  int v38 = *(_DWORD *)&v74[8];
  if (*(_DWORD *)&v74[8] == -1) {
    goto LABEL_74;
  }
LABEL_73:
  ((void (*)(long long *, unsigned char *))off_1EE9E9D68[v38])(&v61, v74);
LABEL_74:
  unint64_t v41 = v70;
  int v70 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v39);
    WTF::fastFree(v42, v43);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v60);
LABEL_77:
  if (v69) {
LABEL_78:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v9);
  memcpy(a5, *(const void **)&v68[8], 4 * a6);
  return (WebKit::RemoteGraphicsContextGLProxy *)off_1EE9E9CD8(&v61, v68);
}

WebKit::RemoteGraphicsContextGLProxy *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getActiveUniformBlockiv(uint64_t a1, int a2, int a3, int a4, void *a5, uint64_t a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::getActiveUniformBlockiv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 24), a2, a3, a4, a5, a6);
}

double *WebKit::RemoteGraphicsContextGLProxy::getTranslatedShaderSourceANGLE@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v7 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v7, *((void *)this + 10), (uint64_t)v8);
    if (v10) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    int v6 = v9;
    if (v9) {
      *v9 += 2;
    }
    *a3 = v6;
    return (double *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix(&v7, v8);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getTranslatedShaderSourceANGLE@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::getTranslatedShaderSourceANGLE((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::drawBuffersEXT(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t result = a1[13];
  if (result)
  {
    uint64_t v5 = (const void **)v6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawBuffersEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, a1[10]);
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawBuffersEXT(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawBuffersEXT((uint64_t *)(a1 - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (!v2) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 46);
  uint64_t v4 = (v3 + 1);
  *((_DWORD *)this + 46) = v4;
  int v6 = v3 + 1;
  if (IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v2, &v6, *((void *)this + 10)))WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this); {
  return v4;
  }
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createQueryEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::deleteQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteQueryEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

double *WebKit::RemoteGraphicsContextGLProxy::isQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v5 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, *((void *)this + 10), (uint64_t)v6);
    if (v7) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v4 = v6[8];
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v5, v6);
    return (double *)v4;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isQueryEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::beginQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BeginQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::beginQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::beginQueryEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::endQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EndQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::endQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::endQueryEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::queryCounterEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::QueryCounterEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::queryCounterEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::queryCounterEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::getQueryiEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQueryiEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10), (uint64_t)v7);
    if (v9) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v8;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(v6, v7);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getQueryiEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getQueryiEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::getQueryObjectiEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10), (uint64_t)v7);
    if (v9) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v8;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(v6, v7);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getQueryObjectiEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getQueryObjectiEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::getQueryObjectui64EXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10), (uint64_t)v7);
    if (v9) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v5 = v8;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(v6, v7);
    return (double *)v5;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getQueryObjectui64EXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getQueryObjectui64EXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

double *WebKit::RemoteGraphicsContextGLProxy::getInteger64EXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = (double *)*((void *)this + 13);
  if (result)
  {
    int v5 = a2;
    IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetInteger64EXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v5, *((void *)this + 10), (uint64_t)v6);
    if (v8) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
    uint64_t v4 = v7;
    ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[0])(&v5, v6);
    return (double *)v4;
  }
  return result;
}

double *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getInteger64EXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::getInteger64EXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::enableiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EnableiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::enableiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::enableiOES((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::disableiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DisableiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::disableiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::disableiOES((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::blendEquationiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendEquationiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blendEquationiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::blendEquationiOES((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::blendEquationSeparateiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    int v6[2] = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendEquationSeparateiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blendEquationSeparateiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::blendEquationSeparateiOES((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::blendFunciOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    int v6[2] = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendFunciOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blendFunciOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::blendFunciOES((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::blendFuncSeparateiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v8[0] = a2;
    v8[1] = a3;
    int v8[2] = a4;
    v8[3] = a5;
    int v8[4] = a6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendFuncSeparateiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blendFuncSeparateiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::blendFuncSeparateiOES((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::colorMaskiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v8 = a2;
    BOOL v9 = a3 != 0;
    BOOL v10 = a4 != 0;
    BOOL v11 = a5 != 0;
    BOOL v12 = a6 != 0;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ColorMaskiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v8, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::colorMaskiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::colorMaskiOES((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::drawArraysInstancedBaseInstanceANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v8[0] = a2;
    v8[1] = a3;
    int v8[2] = a4;
    v8[3] = a5;
    int v8[4] = a6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawArraysInstancedBaseInstanceANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawArraysInstancedBaseInstanceANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawArraysInstancedBaseInstanceANGLE((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::drawElementsInstancedBaseVertexBaseInstanceANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v10[0] = a2;
    v10[1] = a3;
    void v10[2] = a4;
    uint64_t v11 = a5;
    int v12 = a6;
    int v13 = a7;
    int v14 = a8;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawElementsInstancedBaseVertexBaseInstanceANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v10, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawElementsInstancedBaseVertexBaseInstanceANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawElementsInstancedBaseVertexBaseInstanceANGLE((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::clipControlEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClipControlEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clipControlEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::clipControlEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::provokingVertexANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ProvokingVertexANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::provokingVertexANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::provokingVertexANGLE((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::polygonModeANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PolygonModeANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v5, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::polygonModeANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::polygonModeANGLE((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::polygonOffsetClampEXT(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3, float a4)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v6[0] = a2;
    v6[1] = a3;
    int v6[2] = a4;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PolygonOffsetClampEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v6, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::polygonOffsetClampEXT(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3, float a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::polygonOffsetClampEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::renderbufferStorageMultisampleANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    v8[0] = a2;
    v8[1] = a3;
    int v8[2] = a4;
    v8[3] = a5;
    int v8[4] = a6;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::RenderbufferStorageMultisampleANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, v8, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::renderbufferStorageMultisampleANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::renderbufferStorageMultisampleANGLE((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getInternalformativ(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, int a4, void *a5, uint64_t a6)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  int v6 = (uint64_t *)*((void *)result + 13);
  if (!v6) {
    return result;
  }
  BOOL v9 = result;
  v58[0] = a2;
  v58[1] = a3;
  v58[2] = a4;
  uint64_t v59 = a6;
  uint64_t v10 = *((void *)result + 10);
  double v11 = *((double *)v6 + 15);
  double v12 = INFINITY;
  if (fabs(v11) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v12 = v11 + v13;
  }
  if (v6[7] != v10)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v61, v12);
    if (!v62)
    {
      char v56 = 15;
      goto LABEL_111;
    }
    unint64_t v44 = *((void *)&v61 + 1);
    uint64_t v45 = v61;
    unint64_t v46 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = v46 - v61;
    if (v46 >= (unint64_t)v61)
    {
      unint64_t v48 = v47 + 2;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v48 <= *((void *)&v61 + 1))
      {
        *(_WORD *)(v61 + v47) = 2871;
        goto LABEL_88;
      }
      unint64_t v44 = 0;
    }
    unint64_t v48 = 0;
LABEL_88:
    uint64_t v50 = (void *)((v45 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v50 >= v45 + v48)
    {
      unint64_t v48 = (unint64_t)v50 - v45 + 8;
      if ((unint64_t)v50 - v45 > 0xFFFFFFFFFFFFFFF7 || v48 > v44)
      {
LABEL_110:
        char v56 = 17;
LABEL_111:
        v68[0] = v56;
        unsigned int v69 = 1;
        goto LABEL_78;
      }
      void *v50 = v10;
    }
    if (v44)
    {
      uint64_t v52 = v6[9];
      unint64_t v53 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v54 = v6[8];
      if (v53 + 16 >= v54) {
        unint64_t v53 = 0;
      }
      if (v48 <= 0x10) {
        unint64_t v48 = 16;
      }
      unint64_t v55 = v53 + v48;
      if (v54 <= v55) {
        unint64_t v55 = 0;
      }
      v6[10] = v55;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v52 + 16) + 128), v55) == 0x80000000);
      v6[7] = v10;
      goto LABEL_5;
    }
    goto LABEL_110;
  }
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v65, v12);
  if (!v67)
  {
    v68[0] = 15;
    unsigned int v69 = 1;
    goto LABEL_77;
  }
  long long v57 = a5;
  unint64_t v15 = v65;
  unint64_t v14 = v66;
  int v16 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v70, (uint64_t **)v6 + 1);
  uint64_t v17 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v70, v17))
  {
    v68[0] = 11;
    unsigned int v69 = 1;
    LOBYTE(v61) = 0;
    unsigned int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInternalformativ>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInternalformativ>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)v68);
    char v64 = 1;
    if (v69 != -1) {
      (*(&off_1EE9E9D48 + v69))(v74, v68);
    }
    goto LABEL_51;
  }
  *(void *)unsigned int v68 = v15;
  *(void *)&v68[8] = v14;
  *(void *)&unsigned char v68[16] = 0;
  unint64_t v18 = (v15 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v19 = v18 - v15;
  if (v18 < v15)
  {
    unint64_t v20 = 0;
  }
  else
  {
    if (v19 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_103;
    }
    unint64_t v20 = v19 + 2;
    if (v19 + 2 > v14) {
      goto LABEL_103;
    }
    *(_WORD *)(v15 + v19) = 3661;
    *(void *)&unsigned char v68[16] = v19 + 2;
  }
  while (1)
  {
    int v21 = (void *)((v15 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v21 >= v15 + v20)
    {
      int v22 = (char *)v21 - v15;
      if ((unint64_t)v21 - v15 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v22 + 8) > v14)
      {
        *(void *)&v68[8] = 0;
      }
      else
      {
        *int v21 = v17;
        *(void *)&unsigned char v68[16] = v22 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,0ul,1ul,2ul,3ul>((uint64_t *)v68, (uint64_t)v58);
    if (!*(void *)&v68[8])
    {
      v72[0] = 0;
      char v73 = 0;
      goto LABEL_38;
    }
    uint64_t v23 = *(void *)&v68[16];
    unint64_t v24 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v25 = v6[8];
    if (v24 + 16 >= v25) {
      unint64_t v24 = 0;
    }
    if (*(void *)&v68[16] <= 0x10uLL) {
      uint64_t v23 = 16;
    }
    unint64_t v26 = v24 + v23;
    if (v25 <= v26) {
      unint64_t v26 = 0;
    }
    v6[10] = v26;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v26) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)v74, (uint64_t)(v6 + 8), v12);
    if (!v75)
    {
      v72[0] = 16;
      *(_DWORD *)&v72[8] = 1;
LABEL_37:
      char v73 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v71, (uint64_t)v74, v6 + 7);
    if (*((_WORD *)v71 + 25) != 2870)
    {
      *(void *)char v72 = v71;
      *(_DWORD *)&v72[8] = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v71);
    WTF::fastFree(v27, v28);
    IPC::Connection::waitForSyncReply((uint64_t)v70, v17, 0xE4Du, (uint64_t)v74, v12);
    v72[0] = 0;
    *(_DWORD *)&v72[8] = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v72, (uint64_t)v74);
    char v73 = 1;
    if (*(_DWORD *)&v74[8] != -1) {
      ((void (*)(IPC::Decoder **, unsigned char *))off_1EE9E9D68[*(unsigned int *)&v74[8]])(&v71, v74);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID((IPC::Decoder **)v70);
    if (!v73)
    {
      LOBYTE(v61) = 0;
      char v64 = 0;
      goto LABEL_51;
    }
    if (*(_DWORD *)&v72[8] == 1)
    {
      LOBYTE(v61) = v72[0];
      int v31 = 1;
      unsigned int v63 = 1;
      char v64 = 1;
      goto LABEL_50;
    }
    if (*(_DWORD *)&v72[8]) {
      goto LABEL_106;
    }
    IPC::Decoder::decode<std::tuple<std::span<int const,18446744073709551615ul>>>((uint64_t)v68, *(uint64_t **)v72);
    if (!v68[16])
    {
      LOBYTE(v61) = 13;
      unsigned int v63 = 1;
      char v64 = 1;
      goto LABEL_48;
    }
    char v29 = v68[0];
    *(void *)char v74 = *(void *)&v68[1];
    *(void *)&v74[7] = *(void *)&v68[8];
    if (v73) {
      break;
    }
LABEL_102:
    __break(1u);
LABEL_103:
    unint64_t v14 = 0;
    unint64_t v20 = 0;
    *(void *)&v68[8] = 0;
  }
  if (*(_DWORD *)&v72[8]) {
    goto LABEL_106;
  }
  uint64_t v30 = *(void *)v72;
  *(void *)char v72 = 0;
  *(void *)&v68[9] = *(void *)v74;
  *(void *)&unsigned char v68[16] = *(void *)&v74[7];
  *(void *)unsigned int v68 = v30;
  v68[8] = v29;
  unsigned int v69 = 0;
  LOBYTE(v61) = 0;
  unsigned int v63 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInternalformativ>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInternalformativ>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)v68);
  char v64 = 1;
  if (v69 != -1) {
    (*(&off_1EE9E9D48 + v69))(&v71, v68);
  }
LABEL_48:
  if (v73)
  {
    int v31 = *(_DWORD *)&v72[8];
    if (*(_DWORD *)&v72[8] != -1) {
LABEL_50:
    }
      ((void (*)(unsigned char *, unsigned char *))off_1EE9E9D68[v31])(v68, v72);
  }
LABEL_51:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v70);
  if (v64)
  {
    v68[0] = 0;
    unsigned int v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInternalformativ>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInternalformativ>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v68, (uint64_t)&v61);
    if (v64)
    {
      if (v63 != -1) {
        (*(&off_1EE9E9D48 + v63))(v74, &v61);
      }
    }
    a5 = v57;
    goto LABEL_77;
  }
  if (!v67) {
    goto LABEL_102;
  }
  unint64_t v32 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - v65;
  if (v32 < v65)
  {
    unint64_t v34 = 0;
  }
  else
  {
    unint64_t v34 = 0;
    if (v33 <= 0xFFFFFFFFFFFFFFFDLL && v33 + 2 <= v66)
    {
      *(_WORD *)(v65 + v33) = 2870;
      unint64_t v34 = v33 + 2;
    }
  }
  unint64_t v35 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v6[8];
  if (v35 + 16 >= v36) {
    goto LABEL_107;
  }
  while (1)
  {
    if (v34 <= 0x10) {
      unint64_t v34 = 16;
    }
    unint64_t v37 = v35 + v34;
    if (v36 <= v37) {
      unint64_t v37 = 0;
    }
    v6[10] = v37;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v37);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v60, v16);
    int v6 = v60;
    long long v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3661, v10, (uint64_t *)&v71, &v70);
    IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,0ul,1ul,2ul,3ul>(v70, v58);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v71, (uint64_t *)&v70, 0, (uint64_t)v74, v12);
    if (*(_DWORD *)&v74[8])
    {
      a5 = v57;
      if (*(_DWORD *)&v74[8] == 1)
      {
        v68[0] = v74[0];
        int v38 = 1;
        unsigned int v69 = 1;
        goto LABEL_73;
      }
      goto LABEL_106;
    }
    IPC::Decoder::decode<std::tuple<std::span<int const,18446744073709551615ul>>>((uint64_t)&v61, *(uint64_t **)v74);
    a5 = v57;
    if (!v62) {
      break;
    }
    *(void *)char v72 = *(void *)((char *)&v61 + 1);
    *(void *)&v72[7] = *((void *)&v61 + 1);
    int v38 = *(_DWORD *)&v74[8];
    if (!*(_DWORD *)&v74[8])
    {
      uint64_t v40 = *(void *)v74;
      *(void *)char v74 = 0;
      *(void *)&v68[9] = *(void *)v72;
      *(void *)&unsigned char v68[16] = *(void *)&v72[7];
      *(void *)unsigned int v68 = v40;
      v68[8] = v61;
      unsigned int v69 = 0;
      goto LABEL_73;
    }
LABEL_106:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_107:
    unint64_t v35 = 0;
  }
  v68[0] = 13;
  unsigned int v69 = 1;
  int v38 = *(_DWORD *)&v74[8];
  if (*(_DWORD *)&v74[8] == -1) {
    goto LABEL_74;
  }
LABEL_73:
  ((void (*)(long long *, unsigned char *))off_1EE9E9D68[v38])(&v61, v74);
LABEL_74:
  unint64_t v41 = v70;
  int v70 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v39);
    WTF::fastFree(v42, v43);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v60);
LABEL_77:
  if (v69) {
LABEL_78:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v9);
  memcpy(a5, *(const void **)&v68[8], 4 * a6);
  return (WebKit::RemoteGraphicsContextGLProxy *)off_1EE9E9D48(&v61, v68);
}

WebKit::RemoteGraphicsContextGLProxy *non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getInternalformativ(uint64_t a1, int a2, int a3, int a4, void *a5, uint64_t a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::getInternalformativ((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 24), a2, a3, a4, a5, a6);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::setDrawingBufferColorSpace(WebKit::RemoteGraphicsContextGLProxy *this, CFTypeRef *a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SetDrawingBufferColorSpace,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::setDrawingBufferColorSpace(WebKit::RemoteGraphicsContextGLProxy *this, CFTypeRef *a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::setDrawingBufferColorSpace((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::deleteExternalSync(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    int v4 = a2;
    uint64_t result = IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteExternalSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, &v4, *((void *)this + 10));
    if (result) {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteExternalSync(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteExternalSync((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteImageBufferProxy::RemoteImageBufferProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v40[42] = *MEMORY[0x1E4F143B8];
  int v6 = *(const void **)(a2 + 16);
  CFTypeRef cf = v6;
  if (v6) {
    CFRetain(v6);
  }
  uint64_t v39 = 0;
  v40[0] = 0;
  WebCore::ImageBuffer::ImageBuffer();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)v40 + 4));
  if (cf) {
    CFRelease(cf);
  }
  *(void *)a1 = &unk_1EE9E9690;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 8), a4);
  uint64_t v7 = *(atomic_uint **)(a4 + 8);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  *(void *)(a1 + 136) = v7;
  WebCore::GraphicsContextState::GraphicsContextState();
  int v8 = *(const void **)(a1 + 32);
  CFTypeRef v38 = v8;
  if (v8) {
    CFRetain(v8);
  }
  WebCore::DisplayList::Recorder::Recorder();
  if (v38) {
    CFRelease(v38);
  }
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)&v39, v9);
  *(void *)(a1 + 144) = &unk_1EE9E7EB8;
  *(void *)(a1 + 3968) = *(void *)(a1 + 120);
  uint64_t v10 = *(atomic_uchar **)(a1 + 8);
  if (v10) {
    uint64_t v10 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v10);
  }
  *(void *)(a1 + 3976) = v10;
  *(void *)(a1 + 3984) = a1;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 8), a4);
  double v12 = *(atomic_uint **)(a4 + 8);
  if (v12) {
    atomic_fetch_add(v12, 1u);
  }
  *(void *)(a1 + 3992) = v12;
  *(unsigned char *)(a1 + 4000) = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 4001) = 0;
  *(void *)(a1 + 4008) = 0;
  *(unsigned char *)(a1 + 4016) = 1;
  uint64_t v13 = *(void *)(a1 + 136);
  if (v13) {
    uint64_t v14 = *(void *)(v13 + 8);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v17 = *(void *)(v14 + 88);
  int v16 = (uint64_t *)(v14 + 88);
  uint64_t v15 = v17;
  uint64_t v18 = *(void *)(a1 + 120);
  if (v17
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v16),
        (uint64_t v15 = *v16) != 0))
  {
    int v19 = *(_DWORD *)(v15 - 8);
  }
  else
  {
    int v19 = 0;
  }
  unint64_t v20 = (v18 + ~(v18 << 32)) ^ ((unint64_t)(v18 + ~(v18 << 32)) >> 22);
  unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
  unint64_t v24 = (void *)(v15 + 24 * v23);
  uint64_t v25 = *v24;
  if (!*v24)
  {
LABEL_27:
    *unint64_t v24 = v18;
    char v28 = *(atomic_uchar **)(a1 + 8);
    if (v28) {
      char v28 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v28);
    }
    char v29 = (atomic_uchar *)v24[1];
    v24[1] = v28;
    if (v29) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v29, v11);
    }
    uint64_t v24[2] = a1;
    uint64_t v30 = *v16;
    if (*v16) {
      int v31 = *(_DWORD *)(v30 - 12) + 1;
    }
    else {
      int v31 = 1;
    }
    *(_DWORD *)(v30 - 12) = v31;
    uint64_t v32 = *v16;
    if (*v16) {
      int v33 = *(_DWORD *)(v32 - 12);
    }
    else {
      int v33 = 0;
    }
    uint64_t v34 = (*(_DWORD *)(v32 - 16) + v33);
    unint64_t v35 = *(unsigned int *)(v32 - 4);
    if (v35 > 0x400)
    {
      if (v35 > 2 * v34) {
        return a1;
      }
    }
    else if (3 * v35 > 4 * v34)
    {
      return a1;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v16);
    return a1;
  }
  unint64_t v26 = 0;
  int v27 = 1;
  while (v25 != v18)
  {
    if (v25 == -1) {
      unint64_t v26 = v24;
    }
    unsigned int v23 = (v23 + v27) & v19;
    unint64_t v24 = (void *)(v15 + 24 * v23);
    uint64_t v25 = *v24;
    ++v27;
    if (!*v24)
    {
      if (v26)
      {
        *unint64_t v26 = 0;
        v26[1] = 0;
        void v26[2] = 0;
        --*(_DWORD *)(*v16 - 16);
        unint64_t v24 = v26;
      }
      goto LABEL_27;
    }
  }
  return a1;
}

void WebKit::RemoteImageBufferProxy::~RemoteImageBufferProxy(WebKit::RemoteImageBufferProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9E9690;
  uint64_t v3 = *((void *)this + 17);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0 && *(void *)(v4 + 48))
  {
    WebKit::RemoteImageBufferProxy::flushDrawingContextAsync(this);
    uint64_t v5 = *((void *)this + 17);
    if (v5) {
      uint64_t v5 = *(void *)(v5 + 8);
    }
    WebKit::RemoteResourceCacheProxy::forgetImageBuffer(v5 + 72, *((void *)this + 15));
    uint64_t v6 = *((void *)this + 17);
    if (v6) {
      uint64_t v7 = *(WebKit::RemoteRenderingBackendProxy **)(v6 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v11 = *((void *)this + 15);
    if (*((void *)v7 + 6))
    {
      uint64_t v10 = &v11;
      WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseImageBuffer,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v7, &v10, *((void *)v7 + 8));
    }
  }
  else
  {
    *((unsigned char *)this + 4016) = 0;
  }
  WebKit::RemoteDisplayListRecorderProxy::~RemoteDisplayListRecorderProxy((WebKit::RemoteImageBufferProxy *)((char *)this + 144), a2);
  BOOL v9 = (unsigned int *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  WebCore::ImageBuffer::~ImageBuffer(this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteImageBufferProxy::~RemoteImageBufferProxy(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteImageBufferProxy::flushDrawingContextAsync(WebKit::RemoteImageBufferProxy *this)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 17);
  if (!v1) {
    return 0;
  }
  uint64_t result = *(void *)(v1 + 8);
  if (!result) {
    return result;
  }
  if (!*((unsigned char *)this + 4016)) {
    return 0;
  }
  uint64_t v4 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, &v44);
  uint64_t v5 = v44;
  if (v44)
  {
    uint64_t v6 = *((void *)this + 15);
    double v7 = *((double *)v44 + 15);
    double v8 = INFINITY;
    if (fabs(v7) != INFINITY)
    {
      WTF::ApproximateTime::now(v4);
      double v8 = v7 + v9;
    }
    if (*((void *)v5 + 7) == v6)
    {
      while (1)
      {
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 16), buf, v8);
        if (!buf[16]) {
          break;
        }
        uint64_t v11 = *(void **)buf;
        unint64_t v12 = *(void *)&buf[8];
        unint64_t v13 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v14 = v13 - *(void *)buf;
        if (v13 < *(void *)buf)
        {
          unint64_t v15 = 0;
        }
        else
        {
          if (v14 > 0xFFFFFFFFFFFFFFFDLL) {
            goto LABEL_56;
          }
          unint64_t v15 = v14 + 2;
          if (v14 + 2 > *(void *)&buf[8]) {
            goto LABEL_56;
          }
          *(_WORD *)(*(void *)buf + v14) = 1122;
        }
        if (v12)
        {
          uint64_t v16 = *((void *)v5 + 9);
          unint64_t v17 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v18 = *((void *)v5 + 8);
          if (v17 + 16 >= v18) {
            unint64_t v17 = 0;
          }
          if (v15 <= 0x10) {
            unint64_t v15 = 16;
          }
          unint64_t v19 = v17 + v15;
          if (v18 <= v19) {
            unint64_t v19 = 0;
          }
          *((void *)v5 + 10) = v19;
          if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v16 + 16) + 128), v19) == 0x80000000 || v5[29])
          {
            if (*((unsigned char *)v5 + 104)) {
              MEMORY[0x1997420B0](v5[23]);
            }
            v5[29] = 0;
          }
          goto LABEL_22;
        }
        uint64_t v20 = buf[16];
        if (buf[16])
        {
          uint64_t v11 = *(void **)buf;
          unint64_t v12 = *(void *)&buf[8];
LABEL_56:
          IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, (unint64_t)v11, v12);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)v5 + 1);
          int v33 = v45;
          uint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v34 = 1122;
          *((void *)v34 + 1) = v6;
          *((void *)v34 + 66) = (char *)v34 + 16;
          *((void *)v34 + 67) = 512;
          *((void *)v34 + 68) = 0;
          *((void *)v34 + 70) = 0;
          *((void *)v34 + 69) = 0;
          IPC::Encoder::encodeHeader(v34);
          unint64_t v46 = v34;
          int v36 = IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v46, 1, 0);
          unint64_t v37 = v46;
          unint64_t v46 = 0;
          if (v37)
          {
            IPC::Encoder::~Encoder(v37, v35);
            WTF::fastFree(v42, v43);
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
          if (!v36) {
            goto LABEL_22;
          }
          break;
        }
        __break(1u);
LABEL_53:
        unint64_t v24 = 0;
        unint64_t v23 = v10;
LABEL_34:
        uint64_t v25 = (void *)((v20 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v25 >= v20 + v24)
        {
          unint64_t v26 = (char *)v25 - v20;
          if ((unint64_t)v25 - v20 > 0xFFFFFFFFFFFFFFF7) {
            break;
          }
          unint64_t v24 = (unint64_t)(v26 + 8);
          if ((unint64_t)(v26 + 8) > v23) {
            break;
          }
          *uint64_t v25 = v6;
        }
        if (!v23) {
          break;
        }
        unint64_t v27 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v28 = *((void *)v5 + 8);
        if (v27 + 16 >= v28) {
          unint64_t v27 = 0;
        }
        if (v24 <= 0x10) {
          unint64_t v24 = 16;
        }
        unint64_t v29 = v27 + v24;
        if (v28 <= v29) {
          unint64_t v30 = 0;
        }
        else {
          unint64_t v30 = v29;
        }
        *((void *)v5 + 10) = v30;
        IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v5, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v30) == 0x80000000);
        *((void *)v5 + 7) = v6;
      }
    }
    else
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 16), buf, v8);
      if (buf[16])
      {
        uint64_t v20 = *(void *)buf;
        unint64_t v10 = *(void *)&buf[8];
        unint64_t v21 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v22 = v21 - *(void *)buf;
        if (v21 < *(void *)buf) {
          goto LABEL_53;
        }
        unint64_t v23 = 0;
        if (v22 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v24 = 0;
        }
        else
        {
          unint64_t v24 = 0;
          if (v22 + 2 <= *(void *)&buf[8])
          {
            *(_WORD *)(*(void *)buf + v22) = 2871;
            unint64_t v23 = v10;
            unint64_t v24 = v22 + 2;
          }
        }
        goto LABEL_34;
      }
    }
    CFTypeRef v38 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v39 = IPC::errorAsString();
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteImageBuffer_FlushContext";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v39;
      _os_log_impl(&dword_1985F2000, v38, OS_LOG_TYPE_DEFAULT, "RemoteImageBufferProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v40 = *((void *)this + 17);
    if (v40)
    {
      unint64_t v41 = *(unsigned char **)(v40 + 8);
      if (v41) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v41);
      }
    }
LABEL_22:
    unint64_t v44 = 0;
    if (atomic_fetch_add(v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v5);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v5, v11);
      WTF::fastFree(v31, v32);
    }
  }
  return 1;
}

void WebKit::RemoteResourceCacheProxy::forgetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::find(v3, a2);
  if (v3)
  {
    uint64_t v6 = (uint64_t *)(v3 + 24 * *(unsigned int *)(v3 - 4));
    if (v6 != v4) {
      goto LABEL_3;
    }
LABEL_20:
    __break(0xC471u);
    return;
  }
  if (!v4) {
    goto LABEL_20;
  }
  uint64_t v6 = 0;
LABEL_3:
  if (v6 != v4)
  {
    double v7 = (atomic_uchar *)v4[1];
    uint64_t *v4 = -1;
    v4[1] = 0;
    if (v7) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v7, v5);
    }
    ++*(_DWORD *)(*v2 - 16);
    uint64_t v8 = *v2;
    if (*v2) {
      int v9 = *(_DWORD *)(v8 - 12) - 1;
    }
    else {
      int v9 = -1;
    }
    *(_DWORD *)(v8 - 12) = v9;
    uint64_t v10 = *v2;
    if (*v2)
    {
      unsigned int v11 = 6 * *(_DWORD *)(v10 - 12);
      unsigned int v12 = *(_DWORD *)(v10 - 4);
      if (v11 < v12 && v12 >= 9)
      {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v2, v12 >> 1);
      }
    }
  }
}

unsigned int *WebKit::RemoteRenderingBackendProxy::releaseImageBuffer(unsigned int *result, uint64_t a2)
{
  uint64_t v3 = a2;
  if (*((void *)result + 6))
  {
    uint64_t v2 = &v3;
    return WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseImageBuffer,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>((WebKit::RemoteRenderingBackendProxy *)result, &v2, *((void *)result + 8));
  }
  return result;
}

uint64_t WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(WebKit::RemoteImageBufferProxy *this)
{
  uint64_t result = WebKit::RemoteImageBufferProxy::ensureBackend(this);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 160);
    return v2();
  }
  return result;
}

uint64_t WebKit::RemoteImageBufferProxy::didCreateBackend(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = 0;
  if (!*(unsigned char *)(a2 + 72)) {
    goto LABEL_30;
  }
  WebCore::ImageBuffer::backendParameters();
  if (!*(unsigned char *)(a2 + 72)) {
    goto LABEL_41;
  }
  if (*(_DWORD *)(a2 + 64) == 1)
  {
    {
      unint64_t v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v19);
    }
    if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 762))
    {
      if (*(unsigned char *)(a2 + 72))
      {
        LOBYTE(v28[0]) = 0;
        int v29 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(v28, a2);
        WebKit::ImageBufferRemoteIOSurfaceBackend::create((uint64_t)v28, (uint64_t *)&v24);
        uint64_t v4 = v24;
        uint64_t v34 = v24;
        if (v29 != -1) {
          off_1EE9E9D58[v29]((int)&v23, (WTF::MachSendRight *)v28);
        }
        int v29 = -1;
        goto LABEL_10;
      }
    }
    else if (*(unsigned char *)(a2 + 72))
    {
      LOBYTE(v30[0]) = 0;
      int v31 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(v30, a2);
      WebKit::ImageBufferShareableMappedIOSurfaceBackend::create((uint64_t)v30, &v24);
      uint64_t v4 = v24;
      uint64_t v34 = v24;
      *(void *)&long long v24 = 0;
      if (v31 != -1) {
        off_1EE9E9D58[v31]((int)&v23, (WTF::MachSendRight *)v30);
      }
      int v31 = -1;
      goto LABEL_10;
    }
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v4 = 0;
LABEL_10:
  if (!*(unsigned char *)(a2 + 72)) {
    goto LABEL_41;
  }
  if (*(_DWORD *)(a2 + 64)) {
    goto LABEL_12;
  }
  LOBYTE(v24) = 0;
  WebCore::ImageBufferBackend::calculateBaseTransform();
  *((void *)&v27 + 1) = WebKit::ImageBufferShareableBitmapBackend::calculateMemoryCost(v32, v7, v8);
  long long v9 = *(_OWORD *)v25;
  *(_OWORD *)(a1 + 48) = v24;
  *(_OWORD *)(a1 + 64) = v9;
  long long v10 = v27;
  *(_OWORD *)(a1 + 80) = v26;
  *(_OWORD *)(a1 + 96) = v10;
  if (!*(unsigned char *)(a2 + 72)) {
    goto LABEL_41;
  }
  if (*(_DWORD *)(a2 + 64))
  {
LABEL_42:
    uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)&v24, a2);
  WebCore::SharedMemoryHandle::takeOwnershipOfMemory();
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v20, (uint64_t)&v24);
  WebKit::ImageBufferShareableBitmapBackend::create((uint64_t)v32, &v23);
  uint64_t v11 = v23;
  uint64_t v34 = v23;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (v22)
  {
    CFTypeRef v12 = cf;
    CFTypeRef cf = 0;
    if (v12) {
      CFRelease(v12);
    }
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v20);
  if ((_BYTE)v26)
  {
    CFTypeRef v13 = v25[1];
    v25[1] = 0;
    if (v13) {
      CFRelease(v13);
    }
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v24);
  uint64_t v4 = v11;
LABEL_12:
  uint64_t v5 = v33;
  int v33 = 0;
  if (v5) {
    CFRelease(v5);
  }
  if (v4)
  {
    WebCore::ImageBuffer::setBackend();
    goto LABEL_16;
  }
LABEL_30:
  WebKit::RemoteDisplayListRecorderProxy::disconnect((WebKit::RemoteDisplayListRecorderProxy *)(a1 + 144), (void *)a2);
  uint64_t v14 = *(void *)(a1 + 136);
  if (v14) {
    uint64_t v14 = *(void *)(v14 + 8);
  }
  WebKit::RemoteResourceCacheProxy::forgetImageBuffer(v14 + 72, *(void *)(a1 + 120));
  uint64_t v15 = *(void *)(a1 + 136);
  if (v15) {
    uint64_t v16 = *(unsigned int **)(v15 + 8);
  }
  else {
    uint64_t v16 = 0;
  }
  WebKit::RemoteRenderingBackendProxy::releaseImageBuffer(v16, *(void *)(a1 + 120));
  unint64_t v18 = *(unsigned int **)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v18)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v17);
    }
  }
LABEL_16:
  uint64_t result = v34;
  uint64_t v34 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::RemoteImageBufferProxy::ensureBackend(WebKit::RemoteImageBufferProxy *this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 14);
  if (v1) {
    return v1;
  }
  uint64_t v4 = *((void *)this + 17);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(WebKit::RemoteRenderingBackendProxy **)(v4 + 8);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(v5, &v24);
  uint64_t v7 = v24;
  if (!v24) {
    return *((void *)this + 14);
  }
  uint64_t v8 = *((void *)this + 15);
  double v9 = *((double *)v24 + 15);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(v6);
    double v10 = v9 + v11;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v25, (uint64_t **)v7 + 1);
  CFTypeRef v12 = v25;
  IPC::Connection::waitForMessage(v25, 0x45Du, v8, 0, (uint64_t)buf, v10);
  int v13 = *(_DWORD *)&buf[8];
  if (*(_DWORD *)&buf[8])
  {
    if (*(_DWORD *)&buf[8] != 1) {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    int v15 = buf[0];
  }
  else
  {
    unsigned __int8 v14 = atomic_load((unsigned __int8 *)v12 + 33);
    int v13 = buf[8];
    if (v14)
    {
      (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile **, void))*v12[1] + 2))(v12[1], v12, *(void *)buf);
      int v15 = 0;
      int v13 = *(_DWORD *)&buf[8];
    }
    else
    {
      int v15 = 1;
    }
    if (v13 == -1) {
      goto LABEL_13;
    }
  }
  ((void (*)(char *, unsigned char *))off_1EE9E9D68[v13])(&v26, buf);
LABEL_13:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v25);
  if (v15)
  {
    unint64_t v19 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void *)(*(void *)(*((void *)this + 17) + 8) + 64);
      unint64_t v21 = IPC::errorAsString();
      *(_DWORD *)long long buf = 134218242;
      *(void *)&uint8_t buf[4] = v20;
      __int16 v28 = 2082;
      int v29 = v21;
      _os_log_impl(&dword_1985F2000, v19, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteImageBufferProxy::ensureBackendCreated - waitForAndDispatchImmediately returned error: %{public}s", buf, 0x16u);
    }
    uint64_t v22 = *((void *)this + 17);
    if (v22)
    {
      uint64_t v23 = *(unsigned char **)(v22 + 8);
      if (v23) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v23);
      }
    }
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v1 = *((void *)this + 14);
  }
  long long v24 = 0;
  if (atomic_fetch_add(v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v7);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v7, v16);
    WTF::fastFree(v17, v18);
  }
  return v1;
}

WTF *WebKit::RemoteImageBufferProxy::copyNativeImage@<X0>(WebKit::RemoteImageBufferProxy *this@<X0>, void *a2@<X8>)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  uint64_t result = (WTF *)WebKit::RemoteImageBufferProxy::ensureBackend(this);
  if (!result) {
    goto LABEL_103;
  }
  uint64_t result = (WTF *)(*(uint64_t (**)(WTF *))(*(void *)result + 152))(result);
  if (result)
  {
    WebKit::RemoteImageBufferProxy::flushDrawingContext((uint64_t)this);
    return (WTF *)MEMORY[0x1F4174320](this);
  }
  uint64_t v8 = *((void *)this + 17);
  if (!v8 || (uint64_t v9 = *(void *)(v8 + 8)) == 0)
  {
LABEL_103:
    *a2 = 0;
    return result;
  }
  uint64_t v10 = *((void *)this + 15);
  double v11 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)v9, &v61);
  CFTypeRef v12 = v61;
  if (!v61)
  {
    buf[0] = 1;
    int v81 = 1;
    goto LABEL_89;
  }
  double v13 = *((double *)v61 + 15);
  double v4 = INFINITY;
  if (fabs(v13) != INFINITY)
  {
    WTF::ApproximateTime::now(v11);
    double v4 = v13 + v14;
  }
  if (*((void *)v12 + 7) == v10) {
    goto LABEL_12;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v12 + 16), buf, v4);
  if (!buf[16])
  {
    uint64_t v2 = 15;
    goto LABEL_136;
  }
  uint64_t v45 = *(void *)buf;
  unint64_t v46 = *(void *)&buf[8];
  unint64_t v47 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v48 = v47 - *(void *)buf;
  if (v47 < *(void *)buf)
  {
    unint64_t v50 = 0;
    unint64_t v49 = *(void *)&buf[8];
  }
  else
  {
    unint64_t v49 = 0;
    if (v48 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v50 = 0;
    }
    else
    {
      unint64_t v50 = 0;
      if (v48 + 2 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v48) = 2871;
        unint64_t v49 = v46;
        unint64_t v50 = v48 + 2;
      }
    }
  }
  uint64_t v51 = (void *)((v45 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v51 >= v45 + v50)
  {
    uint64_t v52 = (char *)v51 - v45;
    uint64_t v2 = 17;
    if ((unint64_t)v51 - v45 > 0xFFFFFFFFFFFFFFF7
      || (unint64_t v50 = (unint64_t)(v52 + 8), (unint64_t)(v52 + 8) > v49))
    {
LABEL_136:
      v72[0] = v2;
      unsigned int v75 = 1;
      uint64_t v10 = (uint64_t)off_1EB3583E8;
      if (!os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_126;
      }
      goto LABEL_125;
    }
    void *v51 = v10;
  }
  if (!v49)
  {
    uint64_t v2 = 17;
    goto LABEL_136;
  }
  uint64_t v53 = *((void *)v12 + 9);
  unint64_t v54 = (*((void *)v12 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v55 = *((void *)v12 + 8);
  if (v54 + 16 >= v55) {
    unint64_t v54 = 0;
  }
  if (v50 <= 0x10) {
    unint64_t v50 = 16;
  }
  unint64_t v56 = v54 + v50;
  if (v55 <= v56) {
    unint64_t v56 = 0;
  }
  *((void *)v12 + 10) = v56;
  IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v12, atomic_exchange((atomic_ullong *volatile)(*(void *)(v53 + 16) + 128), v56) == 0x80000000);
  *((void *)v12 + 7) = v10;
LABEL_12:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v12 + 16), &v63, v4);
  if (!v65)
  {
    v72[0] = 15;
    unsigned int v75 = 1;
    goto LABEL_84;
  }
  unint64_t v15 = v63;
  unint64_t v16 = v64;
  uint64_t v2 = (uint64_t)(v12 + 2);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v76, (uint64_t **)v12 + 1);
  uint64_t v3 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v76, v3))
  {
    v72[0] = 11;
    uint64_t v3 = 1;
    unsigned int v75 = 1;
    buf[0] = 0;
    int v81 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)v72);
    char v82 = 1;
    if (v75 != -1) {
      ((void (*)(WTF **, unsigned __int8 *))off_1EE9E9E30[v75])(&v66, v72);
    }
    goto LABEL_55;
  }
  unint64_t v17 = (v15 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v15;
  if (v17 < v15)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v16;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v16)
      {
        *(_WORD *)(v15 + v18) = 3710;
        unint64_t v19 = v16;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (void *)((v15 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v21 >= v15 + v20)
  {
    uint64_t v22 = (char *)v21 - v15;
    if ((unint64_t)v21 - v15 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_128;
    }
    unint64_t v20 = (unint64_t)(v22 + 8);
    if ((unint64_t)(v22 + 8) > v19) {
      goto LABEL_128;
    }
    *unint64_t v21 = v3;
  }
  if (v20 >= v19) {
    goto LABEL_128;
  }
  *(unsigned char *)(v15 + v20) = 1;
  unint64_t v23 = (*((void *)v12 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v24 = *((void *)v12 + 8);
  if (v23 + 16 >= v24) {
LABEL_133:
  }
    unint64_t v23 = 0;
  if (v20 <= 0xF) {
    unint64_t v20 = 15;
  }
  unint64_t v25 = v20 + v23;
  if (v24 > v25 + 1) {
    unint64_t v26 = v25 + 1;
  }
  else {
    unint64_t v26 = 0;
  }
  *((void *)v12 + 10) = v26;
  if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v12 + 9) + 16) + 128), v26) == 0x80000000
    || v12[29])
  {
    if (*((unsigned char *)v12 + 104)) {
      MEMORY[0x1997420B0](v12[23]);
    }
    v12[29] = 0;
  }
  *((void *)v12 + 10) = 0;
  IPC::Connection::waitForSyncReply((uint64_t)v76, v3, 0xE7Eu, (uint64_t)v72, v4);
  LOBYTE(v69) = 0;
  int v70 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v69, (uint64_t)v72);
  char v71 = 1;
  if (v73 != -1) {
    ((void (*)(WTF **, unsigned __int8 *))off_1EE9E9D68[v73])(&v66, v72);
  }
  while (1)
  {
    IPC::Connection::popPendingSyncRequestID(v76);
    if (v71)
    {
      if (v70 == 1)
      {
        buf[0] = (_BYTE)v69;
        int v27 = 1;
        int v81 = 1;
        char v82 = 1;
LABEL_54:
        ((void (*)(unsigned __int8 *, IPC::Decoder **))off_1EE9E9D68[v27])(v72, &v69);
        goto LABEL_55;
      }
      if (v70) {
        goto LABEL_132;
      }
      LOBYTE(v66) = 0;
      char v68 = 0;
      IPC::Decoder::operator>><std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>((uint64_t *)v69, (WTF::MachSendRight *)&v66);
      if (v68)
      {
        if (!v71) {
          goto LABEL_127;
        }
        if (v70) {
          goto LABEL_132;
        }
        IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ConnectionSendSyncResult((uint64_t)v72, &v69, (uint64_t)&v66);
        buf[0] = 0;
        int v81 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)v72);
        char v82 = 1;
        if (v75 != -1) {
          ((void (*)(uint64_t **, unsigned __int8 *))off_1EE9E9E30[v75])(&v62, v72);
        }
        if (v68) {
          std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v66);
        }
      }
      else
      {
        buf[0] = 13;
        int v81 = 1;
        char v82 = 1;
      }
      if (v71)
      {
        int v27 = v70;
        if (v70 != -1) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      buf[0] = 0;
      char v82 = 0;
    }
LABEL_55:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v76);
    if (v82)
    {
      v72[0] = 0;
      unsigned int v75 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v72, (uint64_t)buf);
      if (v82 && v81 != -1) {
        ((void (*)(WTF **, unsigned char *))off_1EE9E9E30[v81])(&v66, buf);
      }
      goto LABEL_84;
    }
    if (!v65) {
      goto LABEL_127;
    }
    unint64_t v28 = (v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = v28 - v63;
    if (v28 < v63)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v30 = 0;
      if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v29 + 2 <= v64)
      {
        *(_WORD *)(v63 + v29) = 2870;
        unint64_t v30 = v29 + 2;
      }
    }
    unint64_t v31 = (*((void *)v12 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v32 = *((void *)v12 + 8);
    if (v31 + 16 >= v32) {
      unint64_t v31 = 0;
    }
    if (v30 <= 0x10) {
      unint64_t v30 = 16;
    }
    unint64_t v33 = v31 + v30;
    if (v32 <= v33) {
      unint64_t v33 = 0;
    }
    *((void *)v12 + 10) = v33;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v12 + 9) + 16) + 128), v33);
    v12[29] = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v62, (uint64_t **)v2);
    uint64_t v2 = (uint64_t)v62;
    unsigned int v69 = 0;
    IPC::Connection::createSyncMessageEncoder(3710, v10, (uint64_t *)&v69, (IPC::Encoder **)&v76);
    uint64_t v10 = 1;
    uint64_t v34 = (unsigned char *)IPC::Encoder::grow((IPC::Encoder *)v76, 1uLL, 1);
    if (!v35)
    {
      __break(0xC471u);
      JUMPOUT(0x199054DFCLL);
    }
    unsigned char *v34 = 1;
    IPC::Connection::sendSyncMessage(v2, (uint64_t)v69, (uint64_t *)&v76, 0, (uint64_t)&v66, v4);
    if (v67)
    {
      if (v67 != 1) {
        goto LABEL_132;
      }
      v72[0] = v66;
      int v36 = 1;
      unsigned int v75 = 1;
    }
    else
    {
      buf[0] = 0;
      char v80 = 0;
      IPC::Decoder::operator>><std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>((uint64_t *)v66, (WTF::MachSendRight *)buf);
      if (v80)
      {
        if (v67) {
          goto LABEL_132;
        }
        IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ConnectionSendSyncResult((uint64_t)v72, &v66, (uint64_t)buf);
        if (v80) {
          std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)buf);
        }
      }
      else
      {
        v72[0] = 13;
        unsigned int v75 = 1;
      }
      int v36 = v67;
      if (v67 == -1) {
        goto LABEL_81;
      }
    }
    ((void (*)(unsigned char *, WTF **))off_1EE9E9D68[v36])(buf, &v66);
LABEL_81:
    CFTypeRef v38 = (IPC::Encoder *)v76;
    uint64_t v76 = 0;
    if (v38)
    {
      IPC::Encoder::~Encoder(v38, v37);
      WTF::fastFree(v43, v44);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v62);
LABEL_84:
    uint64_t v2 = v75;
    if (v75)
    {
      uint64_t v10 = (uint64_t)off_1EB3583E8;
      if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
      {
        if (v2 != 1)
        {
LABEL_132:
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_133;
        }
        uint64_t v2 = v72[0];
LABEL_125:
        uint64_t v3 = (uint64_t)buf;
        uint64_t v59 = *(void *)(v9 + 64);
        long long v60 = IPC::errorAsString();
        *(_DWORD *)long long buf = 134218498;
        *(void *)&uint8_t buf[4] = v59;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = "RemoteImageBuffer_GetShareableBitmap";
        __int16 v78 = 2082;
        unint64_t v79 = v60;
        _os_log_impl(&dword_1985F2000, (os_log_t)v10, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::sendSync - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
      }
LABEL_126:
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive((unsigned char *)v9);
    }
    buf[0] = 0;
    uint64_t v9 = 0xFFFFFFFFLL;
    int v81 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)v72);
    if (v75 != -1) {
      ((void (*)(WTF **, unsigned __int8 *))off_1EE9E9E30[v75])(&v66, v72);
    }
    long long v61 = 0;
    if (atomic_fetch_add(v12, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v12);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v12, v39);
      WTF::fastFree(v57, v58);
    }
LABEL_89:
    int v40 = v81;
    if (v81)
    {
      unint64_t v66 = 0;
      goto LABEL_96;
    }
    v72[0] = 0;
    char v74 = 0;
    if (!v80) {
      break;
    }
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v72, (uint64_t)&buf[8]);
    char v74 = 1;
    WebCore::SharedMemoryHandle::takeOwnershipOfMemory();
    if (v74)
    {
      WebCore::ShareableBitmap::create();
      goto LABEL_95;
    }
LABEL_127:
    __break(1u);
LABEL_128:
    LOBYTE(v69) = 0;
    char v71 = 0;
  }
  unint64_t v66 = 0;
LABEL_95:
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v72);
  int v40 = v81;
LABEL_96:
  if (v40 != -1) {
    ((void (*)(unsigned __int8 *, unsigned char *))off_1EE9E9E30[v40])(v72, buf);
  }
  uint64_t result = v66;
  if (!v66) {
    goto LABEL_103;
  }
  WebCore::ShareableBitmap::createPlatformImage();
  WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WebCore::NativeImage::create();
  unint64_t v42 = *(const void **)buf;
  *(void *)long long buf = 0;
  if (v42) {
    CFRelease(v42);
  }
  uint64_t result = v66;
  unint64_t v66 = 0;
  if (result) {
    return (WTF *)WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)result, v41);
  }
  return result;
}

uint64_t WebKit::RemoteImageBufferProxy::flushDrawingContext(uint64_t this)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(this + 136);
  if (!v3) {
    return this;
  }
  if (!*(void *)(v3 + 8)) {
    return this;
  }
  uint64_t v4 = this;
  if (!*(unsigned char *)(this + 4016)) {
    return this;
  }
  kdebug_trace();
  uint64_t v5 = *(void *)(v4 + 136);
  if (v5)
  {
    uint64_t v6 = *(WebKit::RemoteRenderingBackendProxy **)(v5 + 8);
    if (v6)
    {
      uint64_t v7 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(v6, &v61);
      uint64_t v8 = v61;
      if (v61)
      {
        uint64_t v9 = *(NSObject **)(v4 + 120);
        double v10 = *((double *)v61 + 15);
        double v11 = INFINITY;
        if (fabs(v10) != INFINITY)
        {
          WTF::ApproximateTime::now(v7);
          double v11 = v10 + v12;
        }
        if (*((NSObject **)v8 + 7) == v9) {
          goto LABEL_10;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 16), buf, v11);
        if (buf[16])
        {
          uint64_t v41 = *(void *)buf;
          unint64_t v42 = *(void *)&buf[8];
          unint64_t v43 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v44 = v43 - *(void *)buf;
          if (v43 < *(void *)buf)
          {
            unint64_t v46 = 0;
            unint64_t v45 = *(void *)&buf[8];
          }
          else
          {
            unint64_t v45 = 0;
            if (v44 > 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v46 = 0;
            }
            else
            {
              unint64_t v46 = 0;
              if (v44 + 2 <= *(void *)&buf[8])
              {
                *(_WORD *)(*(void *)buf + v44) = 2871;
                unint64_t v45 = v42;
                unint64_t v46 = v44 + 2;
              }
            }
          }
          unint64_t v47 = (v41 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
          if (v47 < v41 + v46) {
            goto LABEL_85;
          }
          unint64_t v48 = v47 - v41;
          char v49 = 17;
          if (v48 <= 0xFFFFFFFFFFFFFFF7)
          {
            unint64_t v46 = v48 + 8;
            if (v48 + 8 <= v45)
            {
              *(void *)(v41 + v48) = v9;
LABEL_85:
              if (v45)
              {
                uint64_t v50 = *((void *)v8 + 9);
                unint64_t v51 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
                unint64_t v52 = *((void *)v8 + 8);
                if (v51 + 16 >= v52) {
                  unint64_t v51 = 0;
                }
                if (v46 <= 0x10) {
                  unint64_t v46 = 16;
                }
                unint64_t v53 = v51 + v46;
                if (v52 <= v53) {
                  unint64_t v53 = 0;
                }
                *((void *)v8 + 10) = v53;
                IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v8, atomic_exchange((atomic_ullong *volatile)(*(void *)(v50 + 16) + 128), v53) == 0x80000000);
                *((void *)v8 + 7) = v9;
LABEL_10:
                IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 16), &v62, v11);
                if (!v64)
                {
                  LOBYTE(v68) = 15;
                  unsigned int v70 = 1;
                  goto LABEL_53;
                }
                unint64_t v2 = v62;
                unint64_t v13 = v63;
                double v14 = (uint64_t **)(v8 + 2);
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)v8 + 1);
                uint64_t v1 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
                if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v71, v1))
                {
                  LOBYTE(v68) = 11;
                  uint64_t v1 = 1;
                  unsigned int v70 = 1;
                  buf[0] = 0;
                  *(_DWORD *)&uint8_t buf[16] = -1;
                  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v68);
                  char v74 = 1;
                  if (v70 != -1) {
                    ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9DA8[v70])(&v65, &v68);
                  }
                  goto LABEL_49;
                }
                unint64_t v15 = (v2 + 1) & 0xFFFFFFFFFFFFFFFELL;
                unint64_t v16 = v15 - v2;
                if (v15 < v2)
                {
                  unint64_t v18 = 0;
                  unint64_t v17 = v13;
                }
                else
                {
                  unint64_t v17 = 0;
                  if (v16 > 0xFFFFFFFFFFFFFFFDLL) {
                    goto LABEL_102;
                  }
                  unint64_t v18 = 0;
                  if (v16 + 2 <= v13)
                  {
                    *(_WORD *)(v2 + v16) = 3707;
                    unint64_t v17 = v13;
                    unint64_t v18 = v16 + 2;
                  }
                }
                while (1)
                {
                  unint64_t v19 = (void *)((v2 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
                  if ((unint64_t)v19 >= v2 + v18)
                  {
                    unint64_t v20 = (char *)v19 - v2;
                    if ((unint64_t)v19 - v2 > 0xFFFFFFFFFFFFFFF7
                      || (unint64_t v18 = (unint64_t)(v20 + 8), (unint64_t)(v20 + 8) > v17))
                    {
LABEL_70:
                      LOBYTE(v68) = 0;
                      LOBYTE(v70) = 0;
                      goto LABEL_42;
                    }
                    *unint64_t v19 = v1;
                  }
                  if (!v17) {
                    goto LABEL_70;
                  }
                  unint64_t v21 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
                  unint64_t v22 = *((void *)v8 + 8);
                  if (v21 + 16 >= v22) {
                    unint64_t v21 = 0;
                  }
                  if (v18 <= 0x10) {
                    unint64_t v18 = 16;
                  }
                  unint64_t v23 = v21 + v18;
                  if (v22 <= v23) {
                    unint64_t v23 = 0;
                  }
                  *((void *)v8 + 10) = v23;
                  if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v23) == 0x80000000
                    || v8[29])
                  {
                    if (*((unsigned char *)v8 + 104)) {
                      MEMORY[0x1997420B0](v8[23]);
                    }
                    v8[29] = 0;
                  }
                  unint64_t v2 = (unint64_t)(v8 + 24);
                  while (1)
                  {
                    unint64_t v24 = atomic_exchange(*(atomic_ullong *volatile *)(*((void *)v8 + 9) + 16), 0x80000000uLL);
                    if (!(v24 | atomic_load_explicit((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), memory_order_acquire) & 0xFFFFFFFF7FFFFFFFLL))break; {
                    if (*((unsigned char *)v8 + 104))
                    }
                    {
                      BOOL v25 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 24, v11);
                      if (v25)
                      {
                        WTF::ApproximateTime::now((WTF::ApproximateTime *)v25);
                        if (v26 < v11) {
                          continue;
                        }
                      }
                    }
                    LOBYTE(v68) = 16;
                    int v69 = 1;
LABEL_41:
                    LOBYTE(v70) = 1;
                    goto LABEL_42;
                  }
                  atomic_store(0, *(unint64_t **)(*((void *)v8 + 9) + 16));
                  *((void *)v8 + 10) = 0;
                  uint64_t v27 = *((void *)v8 + 9);
                  unint64_t v28 = *(void *)(v27 + 8);
                  if (v28 <= 0xFF
                    || (v29 = *((void *)v8 + 8), v30 = *(void *)(v27 + 16), unint64_t v2 = v28 - 256, v29)
                    && (v31 = v29 - 1, v32 = v2 >= v31, unint64_t v2 = v31, !v32))
                  {
LABEL_93:
                    __break(1u);
                    goto LABEL_94;
                  }
                  uint64_t v33 = v30 + 256;
                  uint64_t v34 = WTF::fastMalloc((WTF *)0x50);
                  uint64_t v35 = (IPC::Decoder *)IPC::Decoder::Decoder(v34, v33, v2, *((void *)v8 + 7));
                  if (*((_WORD *)v35 + 25) != 2870)
                  {
                    char v68 = v35;
                    int v69 = 0;
                    goto LABEL_41;
                  }
                  IPC::Decoder::~Decoder(v35);
                  WTF::fastFree(v39, v40);
                  IPC::Connection::waitForSyncReply((uint64_t)v71, v1, 0xE7Bu, (uint64_t)&v65, v11);
                  LOBYTE(v68) = 0;
                  int v69 = -1;
                  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v68, (uint64_t)&v65);
                  LOBYTE(v70) = 1;
                  if (v66 != -1) {
                    ((void (*)(char *, IPC::Decoder **))off_1EE9E9D68[v66])(&v72, &v65);
                  }
LABEL_42:
                  IPC::Connection::popPendingSyncRequestID(v71);
                  if ((_BYTE)v70)
                  {
                    if (v69)
                    {
                      if (v69 != 1) {
                        goto LABEL_101;
                      }
                      buf[0] = (_BYTE)v68;
                      int v37 = 1;
                      *(_DWORD *)&uint8_t buf[16] = 1;
                      char v74 = 1;
                    }
                    else
                    {
                      int v36 = v68;
                      char v68 = 0;
                      char v65 = v36;
                      int v67 = 0;
                      buf[0] = 0;
                      *(_DWORD *)&uint8_t buf[16] = -1;
                      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v65);
                      char v74 = 1;
                      if (v67 != -1) {
                        ((void (*)(char *, IPC::Decoder **))off_1EE9E9DA8[v67])(&v72, &v65);
                      }
                      if (!(_BYTE)v70) {
                        goto LABEL_49;
                      }
                      int v37 = v69;
                      if (v69 == -1) {
                        goto LABEL_49;
                      }
                    }
                    ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9D68[v37])(&v65, &v68);
                  }
                  else
                  {
                    buf[0] = 0;
                    char v74 = 0;
                  }
LABEL_49:
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
                  if (v74)
                  {
                    LOBYTE(v68) = 0;
                    unsigned int v70 = -1;
                    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v68, (uint64_t)buf);
                    if (v74 && *(_DWORD *)&buf[16] != -1) {
                      ((void (*)(IPC::Decoder **, unsigned char *))off_1EE9E9DA8[*(unsigned int *)&buf[16]])(&v65, buf);
                    }
                  }
                  else
                  {
                    if (!v64) {
                      goto LABEL_93;
                    }
                    IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v8, v62, v63);
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, v14);
                    IPC::Connection::sendSync<Messages::RemoteImageBuffer::FlushContextSync>((uint64_t)&v68, *(uint64_t *)buf, (uint64_t)v9, v11);
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
                  }
LABEL_53:
                  double v14 = (uint64_t **)v70;
                  if (!v70) {
                    goto LABEL_54;
                  }
                  uint64_t v9 = off_1EB3583E8;
                  if (!os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_98;
                  }
                  if (v14 == 1) {
                    goto LABEL_97;
                  }
LABEL_101:
                  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_102:
                  unint64_t v18 = v17;
                }
              }
              char v49 = 17;
            }
          }
        }
        else
        {
          char v49 = 15;
        }
        LOBYTE(v68) = v49;
        unsigned int v70 = 1;
        uint64_t v9 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
LABEL_97:
          unint64_t v56 = IPC::errorAsString();
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteImageBuffer_FlushContextSync";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v56;
          _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::sendSync - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
LABEL_98:
        uint64_t v57 = *(void *)(v4 + 136);
        if (v57)
        {
          uint64_t v58 = *(unsigned char **)(v57 + 8);
          if (v58) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v58);
          }
        }
LABEL_54:
        v59[0] = 0;
        int v60 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v59, (uint64_t)&v68);
        if (v70 != -1) {
          ((void (*)(unsigned char *, IPC::Decoder **))off_1EE9E9DA8[v70])(buf, &v68);
        }
        long long v61 = 0;
        if (atomic_fetch_add(v8, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v8);
          IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v8, v38);
          WTF::fastFree(v54, v55);
        }
        goto LABEL_58;
      }
    }
  }
LABEL_94:
  v59[0] = 1;
  int v60 = 1;
LABEL_58:
  if (v60 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_1EE9E9DA8[v60])(buf, v59);
  }
  int v60 = -1;
  *(unsigned char *)(v4 + 4016) = 0;
  return kdebug_trace();
}

WTF *WebKit::RemoteImageBufferProxy::createNativeImageReference@<X0>(WebKit::RemoteImageBufferProxy *this@<X0>, void *a2@<X8>)
{
  uint64_t result = (WTF *)WebKit::RemoteImageBufferProxy::ensureBackend(this);
  if (result)
  {
    if ((*(unsigned int (**)(WTF *))(*(void *)result + 152))(result))
    {
      WebKit::RemoteImageBufferProxy::flushDrawingContext((uint64_t)this);
      return (WTF *)MEMORY[0x1F4174338](this);
    }
    else
    {
      return WebKit::RemoteImageBufferProxy::copyNativeImage(this, a2);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebKit::RemoteImageBufferProxy::sinkIntoBufferForDifferentThread@<X0>(WebKit::RemoteImageBufferProxy *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (const void *)*((void *)this + 4);
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  WebCore::ImageBuffer::create();
  if (cf) {
    CFRelease(cf);
  }
  uint64_t result = v7;
  if (v7)
  {
    (*(void (**)())(*(void *)v7 + 16))();
    uint64_t result = WebCore::GraphicsContext::drawImageBuffer();
    uint64_t v5 = v7;
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  return result;
}

void *WebKit::RemoteImageBufferProxy::filteredNativeImage@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = result[17];
  if (!v4 || !*(void *)(v4 + 8))
  {
    *a3 = 0;
    return result;
  }
  uint64_t v5 = result;
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v62, a2);
  uint64_t v7 = v5[17];
  if (!v7
    || (uint64_t v8 = *(WebKit::RemoteRenderingBackendProxy **)(v7 + 8)) == 0
    || (uint64_t v9 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(v8, &v63), (v10 = v63) == 0))
  {
    buf[0] = 1;
    int v82 = 1;
    goto LABEL_84;
  }
  double v11 = v5[15];
  double v12 = *((double *)v63 + 15);
  double v13 = INFINITY;
  if (fabs(v12) != INFINITY)
  {
    WTF::ApproximateTime::now(v9);
    double v13 = v12 + v14;
  }
  if (*((NSObject **)v10 + 7) != v11)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v10 + 16), buf, v13);
    if (!buf[16])
    {
      char v52 = 15;
      goto LABEL_131;
    }
    uint64_t v44 = *(void *)buf;
    unint64_t v45 = *(void *)&buf[8];
    unint64_t v46 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = v46 - *(void *)buf;
    if (v46 < *(void *)buf)
    {
      unint64_t v49 = 0;
      unint64_t v48 = *(void *)&buf[8];
    }
    else
    {
      unint64_t v48 = 0;
      if (v47 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v49 = 0;
      }
      else
      {
        unint64_t v49 = 0;
        if (v47 + 2 <= *(void *)&buf[8])
        {
          *(_WORD *)(*(void *)buf + v47) = 2871;
          unint64_t v48 = v45;
          unint64_t v49 = v47 + 2;
        }
      }
    }
    unint64_t v50 = (v44 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v50 >= v44 + v49)
    {
      unint64_t v51 = v50 - v44;
      char v52 = 17;
      if (v51 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_131;
      }
      unint64_t v49 = v51 + 8;
      if (v51 + 8 > v48) {
        goto LABEL_131;
      }
      *(void *)(v44 + v51) = v11;
    }
    if (v48)
    {
      uint64_t v53 = *((void *)v10 + 9);
      unint64_t v54 = (*((void *)v10 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v55 = *((void *)v10 + 8);
      if (v54 + 16 >= v55) {
        unint64_t v54 = 0;
      }
      if (v49 <= 0x10) {
        unint64_t v49 = 16;
      }
      unint64_t v56 = v54 + v49;
      if (v55 <= v56) {
        unint64_t v56 = 0;
      }
      *((void *)v10 + 10) = v56;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v10, atomic_exchange((atomic_ullong *volatile)(*(void *)(v53 + 16) + 128), v56) == 0x80000000);
      *((void *)v10 + 7) = v11;
      goto LABEL_9;
    }
    char v52 = 17;
LABEL_131:
    LOBYTE(v74) = v52;
    unsigned int v78 = 1;
    double v11 = off_1EB3583E8;
    if (!os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_119;
    }
    goto LABEL_118;
  }
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v10 + 16), &v65, v13);
  if (!v67)
  {
    LOBYTE(v74) = 15;
    unsigned int v78 = 1;
    goto LABEL_79;
  }
  unint64_t v15 = v65;
  unint64_t v16 = v66;
  uint64_t v17 = (uint64_t)(v10 + 2);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v79, (uint64_t **)v10 + 1);
  uint64_t v18 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v79, v18))
  {
    LOBYTE(v74) = 11;
    unsigned int v78 = 1;
    buf[0] = 0;
    int v82 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v74);
    char v83 = 1;
    if (v78 != -1) {
      ((void (*)(WTF **, unint64_t *))off_1EE9E9D88[v78])(&v68, &v74);
    }
    goto LABEL_52;
  }
  unint64_t v74 = v15;
  unint64_t v75 = v16;
  unint64_t v76 = 0;
  unint64_t v19 = (v15 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = v19 - v15;
  if (v19 < v15)
  {
    unint64_t v21 = 0;
  }
  else if (v20 > 0xFFFFFFFFFFFFFFFDLL || (unint64_t v21 = v20 + 2, v20 + 2 > v16))
  {
    unint64_t v16 = 0;
    unint64_t v21 = 0;
    unint64_t v75 = 0;
  }
  else
  {
    *(_WORD *)(v15 + v20) = 3706;
    unint64_t v76 = v20 + 2;
  }
  unint64_t v22 = (void *)((v15 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v22 >= v15 + v21)
  {
    unint64_t v23 = (char *)v22 - v15;
    if ((unint64_t)v22 - v15 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v23 + 8) > v16)
    {
      unint64_t v75 = 0;
    }
    else
    {
      *unint64_t v22 = v18;
      unint64_t v76 = (unint64_t)(v23 + 8);
    }
  }
  IPC::ArgumentCoder<WebCore::Filter,void>::encode((WTF::StringImpl *)&v74, v62);
  if (v75)
  {
    uint64_t v24 = v76;
    unint64_t v25 = (*((void *)v10 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v26 = *((void *)v10 + 8);
    if (v25 + 16 >= v26) {
      unint64_t v25 = 0;
    }
    if (v76 <= 0x10) {
      uint64_t v24 = 16;
    }
    unint64_t v27 = v25 + v24;
    if (v26 <= v27) {
      unint64_t v27 = 0;
    }
    *((void *)v10 + 10) = v27;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v10 + 9) + 16) + 128), v27) == 0x80000000
      || v10[29])
    {
      if (*((unsigned char *)v10 + 104)) {
        MEMORY[0x1997420B0](v10[23]);
      }
      v10[29] = 0;
    }
    *((void *)v10 + 10) = 0;
    IPC::Connection::waitForSyncReply((uint64_t)v79, v18, 0xE7Au, (uint64_t)&v68, v13);
    LOBYTE(cf) = 0;
    int v72 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf, (uint64_t)&v68);
    char v73 = 1;
    if (v69 != -1) {
      ((void (*)(uint64_t **, WTF **))off_1EE9E9D68[v69])(&v64, &v68);
    }
  }
  else
  {
    LOBYTE(cf) = 0;
    char v73 = 0;
  }
  IPC::Connection::popPendingSyncRequestID(v79);
  if (!v73)
  {
    buf[0] = 0;
    char v83 = 0;
    goto LABEL_52;
  }
  if (v72 == 1)
  {
    buf[0] = (_BYTE)cf;
    int v29 = 1;
    int v82 = 1;
    char v83 = 1;
LABEL_51:
    ((void (*)(unint64_t *, CFTypeRef *))off_1EE9E9D68[v29])(&v74, &cf);
    goto LABEL_52;
  }
  if (v72)
  {
    do
    {
LABEL_127:
      while (1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_128:
        unint64_t v33 = 0;
LABEL_62:
        if (v32 <= 0x10) {
          unint64_t v32 = 16;
        }
        unint64_t v35 = v33 + v32;
        if (v34 <= v35) {
          unint64_t v35 = 0;
        }
        *((void *)v10 + 10) = v35;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v10 + 9) + 16) + 128), v35);
        v10[29] = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v64, (uint64_t **)v17);
        uint64_t v17 = (uint64_t)v64;
        CFTypeRef cf = 0;
        IPC::Connection::createSyncMessageEncoder(3706, (uint64_t)v11, (uint64_t *)&cf, (IPC::Encoder **)&v79);
        IPC::ArgumentCoder<WebCore::Filter,void>::encode((IPC::Encoder *)v79, v62);
        IPC::Connection::sendSyncMessage(v17, (uint64_t)cf, (uint64_t *)&v79, 0, (uint64_t)&v68, v13);
        if (!v69) {
          break;
        }
        if (v69 == 1)
        {
          LOBYTE(v74) = (_BYTE)v68;
          int v36 = 1;
          unsigned int v78 = 1;
          goto LABEL_75;
        }
      }
      buf[0] = 0;
      char v81 = 0;
      IPC::Decoder::operator>><std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>((uint64_t *)v68, (WTF::MachSendRight *)buf);
      if (!v81)
      {
        LOBYTE(v74) = 13;
        unsigned int v78 = 1;
        goto LABEL_74;
      }
    }
    while (v69);
    IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ConnectionSendSyncResult((uint64_t)&v74, &v68, (uint64_t)buf);
    if (v81) {
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)buf);
    }
LABEL_74:
    int v36 = v69;
    if (v69 == -1) {
      goto LABEL_76;
    }
LABEL_75:
    ((void (*)(unsigned char *, WTF **))off_1EE9E9D68[v36])(buf, &v68);
LABEL_76:
    CFTypeRef v38 = (IPC::Encoder *)v79;
    unint64_t v79 = 0;
    if (v38)
    {
      IPC::Encoder::~Encoder(v38, v37);
      WTF::fastFree(v42, v43);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v64);
    goto LABEL_79;
  }
  LOBYTE(v68) = 0;
  char v70 = 0;
  unint64_t v28 = IPC::Decoder::operator>><std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>((uint64_t *)cf, (WTF::MachSendRight *)&v68);
  if (v70)
  {
    if (!v73) {
      goto LABEL_122;
    }
    if (v72) {
      goto LABEL_127;
    }
    IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ConnectionSendSyncResult((uint64_t)&v74, (IPC::Decoder **)&cf, (uint64_t)&v68);
    buf[0] = 0;
    int v82 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v74);
    char v83 = 1;
    if (v78 != -1) {
      ((void (*)(uint64_t **, unint64_t *))off_1EE9E9D88[v78])(&v64, &v74);
    }
    if (v70) {
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v68);
    }
  }
  else
  {
    buf[0] = 13;
    int v82 = 1;
    char v83 = 1;
  }
  if (v73)
  {
    int v29 = v72;
    if (v72 != -1) {
      goto LABEL_51;
    }
  }
LABEL_52:
  unint64_t v28 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v79);
  if (!v83)
  {
    if (v67)
    {
      unint64_t v30 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v31 = v30 - v65;
      if (v30 < v65)
      {
        unint64_t v32 = 0;
      }
      else
      {
        unint64_t v32 = 0;
        if (v31 <= 0xFFFFFFFFFFFFFFFDLL && v31 + 2 <= v66)
        {
          *(_WORD *)(v65 + v31) = 2870;
          unint64_t v32 = v31 + 2;
        }
      }
      unint64_t v33 = (*((void *)v10 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v34 = *((void *)v10 + 8);
      if (v33 + 16 < v34) {
        goto LABEL_62;
      }
      goto LABEL_128;
    }
    goto LABEL_122;
  }
  LOBYTE(v74) = 0;
  unsigned int v78 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v74, (uint64_t)buf);
  if (v83 && v82 != -1) {
    ((void (*)(WTF **, unsigned char *))off_1EE9E9D88[v82])(&v68, buf);
  }
LABEL_79:
  uint64_t v17 = v78;
  if (v78)
  {
    double v11 = off_1EB3583E8;
    if (!os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
LABEL_119:
      uint64_t v60 = v5[17];
      if (v60)
      {
        long long v61 = *(unsigned char **)(v60 + 8);
        if (v61) {
          WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v61);
        }
      }
      goto LABEL_80;
    }
    if (v17 != 1) {
      goto LABEL_127;
    }
LABEL_118:
    uint64_t v59 = IPC::errorAsString();
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "RemoteImageBuffer_FilteredNativeImage";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v59;
    _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::sendSync - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    goto LABEL_119;
  }
LABEL_80:
  buf[0] = 0;
  int v82 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v74);
  if (v78 != -1) {
    ((void (*)(WTF **, unint64_t *))off_1EE9E9D88[v78])(&v68, &v74);
  }
  unint64_t v63 = 0;
  if (atomic_fetch_add(v10, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v10);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v10, v6);
    WTF::fastFree(v57, v58);
  }
LABEL_84:
  uint64_t result = WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v62, v6);
  int v39 = v82;
  if (v82)
  {
    *a3 = 0;
    goto LABEL_94;
  }
  LOBYTE(v74) = 0;
  char v77 = 0;
  if (!v81) {
    goto LABEL_92;
  }
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)&v74, (uint64_t)&buf[8]);
  char v77 = 1;
  unint64_t v28 = (const void *)WebCore::SharedMemoryHandle::takeOwnershipOfMemory();
  if (!v77)
  {
LABEL_122:
    __break(1u);
LABEL_123:
    CFRelease(v28);
LABEL_90:
    uint64_t v41 = v68;
    char v68 = 0;
    if (v41) {
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v41, v40);
    }
    goto LABEL_93;
  }
  WebCore::ShareableBitmap::create();
  if (v68)
  {
    WebCore::ShareableBitmap::createPlatformImage();
    WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    WebCore::NativeImage::create();
    unint64_t v28 = cf;
    CFTypeRef cf = 0;
    if (!v28) {
      goto LABEL_90;
    }
    goto LABEL_123;
  }
LABEL_92:
  *a3 = 0;
LABEL_93:
  uint64_t result = std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v74);
  int v39 = v82;
LABEL_94:
  if (v39 != -1) {
    return (void *)((uint64_t (*)(unint64_t *, unsigned char *))off_1EE9E9D88[v39])(&v74, buf);
  }
  return result;
}